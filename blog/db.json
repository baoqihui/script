{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"themes/fluid/source/css/gitalk.css","path":"css/gitalk.css","modified":0,"renderable":1},{"_id":"themes/fluid/source/css/highlight-dark.styl","path":"css/highlight-dark.styl","modified":0,"renderable":1},{"_id":"themes/fluid/source/css/highlight.styl","path":"css/highlight.styl","modified":0,"renderable":1},{"_id":"themes/fluid/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/boot.js","path":"js/boot.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/color-schema.js","path":"js/color-schema.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/events.js","path":"js/events.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/img-lazyload.js","path":"js/img-lazyload.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/leancloud.js","path":"js/leancloud.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/local-search.js","path":"js/local-search.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/plugins.js","path":"js/plugins.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/avatar.png","path":"img/avatar.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/default.png","path":"img/default.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/fluid.png","path":"img/fluid.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/loading.gif","path":"img/loading.gif","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/police_beian.png","path":"img/police_beian.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/xml/local-search.xml","path":"xml/local-search.xml","modified":0,"renderable":1}],"Cache":[{"_id":"source/about/index.md","hash":"00018b3a5273c6254681b425c39300409aede704","modified":1662369530421},{"_id":"source/tags/index.md","hash":"e69de573938c015b903a85d5e69a895ea0751f20","modified":1662370915079},{"_id":"source/categories/index.md","hash":"0048784fe813d8d0c93622b4161ada663ccbe19e","modified":1662370909403},{"_id":"source/_posts/BookMark/Code Demo/Hutool.md","hash":"3ab60a52985069ae3a82ca77436230ea58ce0b8c","modified":1662446077964},{"_id":"source/_posts/BookMark/config.json","hash":"9025b49e096de097c98ca14250415903eae113a4","modified":1662436431993},{"_id":"source/_posts/BookMark/package.json","hash":"003c800e0617c5a00f012b20bbdf7d4e2fbcee45","modified":1658742773138},{"_id":"source/_posts/BookMark/README.md","hash":"deb48f7f099ede8608a0b635a49848b32f066dc9","modified":1661407557889},{"_id":"source/_posts/BookMark/Code Demo/Stream&Lambda.md","hash":"afa01ff5c2b577d5b901a4f6a67de0f393a2b55e","modified":1662446216279},{"_id":"source/_posts/BookMark/Code Demo/Mybatis Plus.md","hash":"17cbc1c1e55ff708a570d67dff35806e72705b74","modified":1662447111107},{"_id":"source/_posts/BookMark/Code Demo/sql中上下移置顶置底置换的排序实现.md","hash":"b9557f9c6136053291347723d46019872efe34ee","modified":1662447111103},{"_id":"source/_posts/BookMark/Code Demo/常用js.md","hash":"1cd1378936d03d7787585901a75a26185fd19163","modified":1662447111110},{"_id":"source/_posts/BookMark/Code Demo/常用sql.md","hash":"30b377d853baeaa9b2f0079a2b45aa7c2ef5b1a2","modified":1662447111105},{"_id":"source/_posts/BookMark/安装配置/Eclipse+idea修改maven仓库到自定义位置+添加阿里依赖秒下jar包 --菜鸟小回.md","hash":"b7681411839cc638dacb1915ee5402cf4f2401f3","modified":1662026560489},{"_id":"source/_posts/BookMark/安装配置/IDEA2021.2及以下版本破解教程.md","hash":"5be08841003a6f2c5a2af9ce921a632749bd6d5d","modified":1662026560510},{"_id":"source/_posts/BookMark/安装配置/IDEA快捷键.md","hash":"03b949e05414dc9a20a4728f6126c72ae229633b","modified":1662026560565},{"_id":"source/_posts/BookMark/安装配置/IDEA2022.1破解教程.md","hash":"9b525f76d3d1ae2b05f244fd65b77c78304560a1","modified":1662026560534},{"_id":"source/_posts/BookMark/安装配置/MySQL免安装版配置 dos基础命令创建MySQL Navicat编辑器破解--菜鸟小回.md","hash":"b454216d8db7d42dfb31e6202c2908730213f0ce","modified":1662026560582},{"_id":"source/_posts/BookMark/安装配置/Windows调取Bartender使用教程.md","hash":"1be535b6cc980d2b6040e1eda4797d4a8bf6d467","modified":1662026560520},{"_id":"source/_posts/BookMark/安装配置/Navicat破解.md","hash":"ea01644261af5217c9fdc77abb70e460b8247968","modified":1662026560502},{"_id":"source/_posts/BookMark/安装配置/idea+jrebel配置springboot+mybatis plus项目热部署。（含xml无法自动部署 解决方案）.md","hash":"67b40409a73e98ceb746846aadc2f2df1155a407","modified":1662026560542},{"_id":"source/_posts/BookMark/安装配置/windows安装mysql5.7.md","hash":"06c491045a95087826ba7299075ec670addc3fae","modified":1662026560491},{"_id":"source/_posts/BookMark/安装配置/mac.md","hash":"f9fe0ee9472897a0d83e185cc246c26fb06b0a7f","modified":1662436108734},{"_id":"source/_posts/BookMark/安装配置/使用nginx一分钟配置一个文件服务器（附：阿里oss文件服务使用、fastDFS文件服务使用）.md","hash":"1935e6d44481e44686f1c08b68e8e6403fc63943","modified":1662026560487},{"_id":"source/_posts/BookMark/安装配置/《重装系统》Windows纯净装机+常用工具（最简单易懂教程）--菜鸟小回.md","hash":"92e0b9eeb63a7dc0ea408a95a693e5efced956da","modified":1662026560544},{"_id":"source/_posts/BookMark/安装配置/小书匠绑定阿里云oss+阿里云oss图片url永久有效设置--菜鸟小回.md","hash":"1e68814f97dedf5b770c311822a19158a8a13074","modified":1662027397128},{"_id":"source/_posts/BookMark/安装配置/无水印上传本地图片到网络获取地址+小书匠使用 +github和 七牛云 图床绑定--菜鸟小回.md","hash":"90914822a2d7a11662cf3a490038dbaa2652b8b0","modified":1662027425565},{"_id":"source/_posts/BookMark/Spring Boot/SSM项目转Spring Boot项目详细过程（含eclipse转idea注意事项）--菜鸟小回.md","hash":"368a82f43dee9f72dd37d6478ebd156036ed2f6a","modified":1662448129903},{"_id":"source/_posts/BookMark/Spring Boot/Spring Boot & Jenkins 实现自动化部署（centos7&windows，涵盖防jenkins杀死的脚本）.md","hash":"9954e7ffe03c0b588e70106bf5ca673904c25351","modified":1662448129890},{"_id":"source/_posts/BookMark/Spring Boot/Spring Boot & Mybatis Plus代码生成器.md","hash":"e9a9a6d439d52f0f2dd1da464d717b2402bd1c20","modified":1662448129901},{"_id":"source/_posts/BookMark/Spring Boot/Spring Boot & MinIo进行分布式文件服务.md","hash":"566bcc31a4614b011b020bdbb9171efb294e4f36","modified":1662448129871},{"_id":"source/_posts/BookMark/Spring Boot/Spring Boot & RabbitMq 延迟消息队列死信队列实现定时任务.md","hash":"37281a1ff86e57e0d70ead065cdc21dc121b9475","modified":1662448129898},{"_id":"source/_posts/BookMark/Spring Boot/Spring Boot & 拦截参数 & 全局异常处理 & 统一结果返回.md","hash":"6c52071c8c1b5400ff00fff053f580b48bcb14f1","modified":1662448129893},{"_id":"source/_posts/BookMark/Spring Boot/Spring Boot & poi 导出Excel表格、Txt到浏览器下载.md","hash":"6e58a3623627feaaed7ca652583a6370790949f4","modified":1662448129905},{"_id":"source/_posts/BookMark/Spring Boot/Spring Boot & 自定义注解 实现从配置文件自选择redis db数据源.md","hash":"bf970eafd1a116b55b046833a2e97a2b87b6586d","modified":1662448129874},{"_id":"source/_posts/BookMark/Spring Boot/Spring Boot & Slf4j & logback 彩色日志打印（功能点：1、分运行环境生成日志文件 2、日志文件目录分类 3、日志文件按日输出）.md","hash":"e38ee48a8a29a4093cca62e92206bf763811f736","modified":1662448129907},{"_id":"source/_posts/BookMark/Spring Boot/Spring Boot & 支付宝支付（手机端，web端）.md","hash":"1ed90f5e4d30151853ea7cad84b6464a1609dd01","modified":1662448129868},{"_id":"source/_posts/BookMark/Spring Boot/Spring Boot & 过滤器 & 拦截器 & 注册.md","hash":"e66255b618403c063d3c7d3227bcfc264c6321b2","modified":1662448129888},{"_id":"source/_posts/BookMark/Spring Boot/Spring Boot与Spring Clound 微服务项目搭建流程.md","hash":"73cd15653a3633edcc39136976a81a04200cf650","modified":1662448129880},{"_id":"source/_posts/BookMark/Spring Boot/Spring Boot & 阿里OSS文件服务.md","hash":"5d607c0a86d1a55992e9662df8d8ded61b5b3e14","modified":1662448129864},{"_id":"source/_posts/BookMark/Spring Boot/Spring Boot与Spring Clound项目四层pom以及基础配置文件.md","hash":"04a247d0e37604888cbd7a6c2596a9622b151d77","modified":1662448129896},{"_id":"source/_posts/BookMark/Spring Boot/Spring Boot & 阿里短信服务（Redis+短信验证码）.md","hash":"139058345ec099d3e74ac134e58a903150138f6c","modified":1662448129883},{"_id":"source/_posts/BookMark/Spring Boot/Spring Boot项目maven分环境打包.md","hash":"4af40f24840ae20edb8e119b2e52e92a00afb581","modified":1662448129885},{"_id":"source/_posts/BookMark/异常/解决：Error java 无效的源发行版 12 --菜鸟小回.md","hash":"fba2e418de07e1668ce7eb712463c7b20110239e","modified":1662026560527},{"_id":"source/_posts/BookMark/学习笔记/Java中使用图片验证码 --菜鸟小回.md","hash":"10b44a5ca8ede375e9fabce1043f291b5f58ae51","modified":1658137869000},{"_id":"source/_posts/BookMark/异常/项目异常.md","hash":"673dadc41784c2451073a38860a96bdd7f38b685","modified":1658728298000},{"_id":"source/_posts/BookMark/学习笔记/Jenkins项目启动教程.md","hash":"f7c2d67d57dab3be773af5a17be1e6be4ffa63cd","modified":1662026560569},{"_id":"source/_posts/BookMark/学习笔记/业务清单.md","hash":"8ac0d855f03052f3911882ff3c2904271c9c43ca","modified":1662026560571},{"_id":"source/_posts/BookMark/学习笔记/java中使用redis（含json类型与java类型装换） --菜鸟小回.md","hash":"3b77b3fcbf7842e0cd1c851c67e625f6894ab9b4","modified":1662026560529},{"_id":"source/_posts/BookMark/学习笔记/java中使用fastDFS上传图片(前端ajax+后端ssm) --菜鸟小回.md","hash":"937c320d2022158e385a9e9fdb4614cb5850d698","modified":1662026560507},{"_id":"source/_posts/BookMark/学习笔记/mes学习笔记.md","hash":"ff412d0c708260a213dd24f72e1bf627c9c81edc","modified":1662026560509},{"_id":"source/_posts/BookMark/学习笔记/法务部学习笔记.md","hash":"18b22aa9194c7d874ea93fba04acad8ecc289e55","modified":1658137877000},{"_id":"source/_posts/BookMark/学习笔记/ssm框架完整pom依赖（附加 redis、fastDFS、阿里短信验证、poi、hadoop） --菜鸟小回.md","hash":"81df1b25c1f7d9f4d630cf0288978f48ffdd83ae","modified":1658137873000},{"_id":"source/_posts/BookMark/拉勾笔记/1-2.IoC容器设计实现及Spring源码分析.md","hash":"81c6b1f50cfa1e0dbf93a5f5704a31516126726e","modified":1662361075601},{"_id":"source/_posts/BookMark/拉勾笔记/1-4.约定优于配置设计范式及Spring Boot源码剖析.md","hash":"e0cfb35fc5e5d1b1555c2d258366be341fe45676","modified":1662360611700},{"_id":"source/_posts/BookMark/翻墙刷机/甲骨文vps搭建.md","hash":"0609b5146d9ad6ea489f6a7647bbedbeb4dae3c2","modified":1662026560555},{"_id":"source/_posts/BookMark/翻墙刷机/miui12.5 root刷面具+线刷降级+卡米教程（测试机小米10至尊版）.md","hash":"dadee78c997433f4e3d2d846b11a8dc4f41f78f2","modified":1662026560500},{"_id":"source/_posts/BookMark/拉勾笔记/通过房屋租赁流程理解设计模式（单例模式，代理模式，工厂模式）.md","hash":"38eead8acd4508679e9c57b90dfffced9e03d5bf","modified":1662027622854},{"_id":"source/_posts/BookMark/拉勾笔记/1-1.持久层框架设计实现及MyBatis源码分析.md","hash":"e6a86793955619e4b293711c12d38cae85cea9be","modified":1662361294666},{"_id":"source/_posts/BookMark/翻墙刷机/翻墙v2ray windows客户端使用教程.md","hash":"c357281b0a0798a5a1f94563b47196145fa0f05e","modified":1662026560522},{"_id":"source/_posts/BookMark/车车笔记/Gradle.md","hash":"a45667bfe5d9a49dbcb2a80f8f069997c940321d","modified":1658137883000},{"_id":"source/_posts/BookMark/拉勾笔记/记一次手写IOC,AOP实现类spring 功能.md","hash":"e78c057ab4b30c901f69ce895737a5b2b0e2771b","modified":1662027575769},{"_id":"source/_posts/BookMark/拉勾笔记/1-3.MVC框架设计实现及SpringMVC源码分析、通用数据操作接口设计.md","hash":"fbbc034d5f188637133f06e77b17463a964915fa","modified":1662028349311},{"_id":"source/_posts/BookMark/翻墙刷机/《XP、面具框架玩机》小米手机玩机教程--菜鸟小回.md","hash":"a69f7b964b26e5b83a776a07687be4cf30b5da8e","modified":1662026560580},{"_id":"source/_posts/BookMark/车车笔记/groovy","hash":"fbe3d3c5bbfc2c6b41e8a5e43b3547d1e24b6d1d","modified":1658728297000},{"_id":"source/_posts/BookMark/车车笔记/code-generator-persion使用.md","hash":"dffe51b9d92651af96a764dd46fd3cad5a7819dd","modified":1662028195104},{"_id":"source/_posts/BookMark/车车笔记/web报价接口调用整理.md","hash":"7a8047ac22de397d406dd3c58424812cb8c8a83c","modified":1658137886000},{"_id":"source/_posts/BookMark/车车笔记/Spring Data JPA.md","hash":"68b98ed4b33aa11b8bb3f2285094f7db2d6cf818","modified":1662027892386},{"_id":"source/_posts/BookMark/Spring Boot/idea新建一个Spring Boot项目+项目目录简单介绍+项目打包运行+导入Module项目无法识别问题（全部报红或灰色）解决 --菜鸟小回.md","hash":"c85e02f179d211874d965f24d9a3ed78be1f7926","modified":1662445690146},{"_id":"source/_posts/BookMark/车车笔记/停给利二期复盘.md","hash":"ddfe504f36c713ab8a8220ef64c5f089780f9a0c","modified":1658137887000},{"_id":"source/_posts/BookMark/车车笔记/postman.md","hash":"11b5d14582a50f77a603cc0b2a60fe85eb96cf5f","modified":1662027665939},{"_id":"source/_posts/BookMark/车车笔记/并行流.md","hash":"211af9f1054c7eb397f41866a3c1548ade8001f4","modified":1658296601000},{"_id":"source/_posts/BookMark/车车笔记/常用统计KQL.md","hash":"951e8216e35ef2de85166f5b5a892b3d79aa9ea9","modified":1662027949924},{"_id":"source/_posts/BookMark/车车笔记/编码风格.md","hash":"2ae7eaae938f754d92b491b9c355492faf62925f","modified":1662027716574},{"_id":"source/_posts/BookMark/车车笔记/统计信息.md","hash":"fc5244bf8375f92775c03c2adfd199a9db2d00b7","modified":1662442470062},{"_id":"source/_posts/BookMark/车车笔记/支付.md","hash":"712a4d926f9c141facc09ee0880bb780fd83753a","modified":1662028163176},{"_id":"source/_posts/BookMark/面试/HashMap.md","hash":"2003e9b0f02af1b6001043149f32bf0398dce1a8","modified":1662026560496},{"_id":"source/_posts/BookMark/车车笔记/笔记.md","hash":"a07b0a12837e840e6a5ae7798b4beb5ed4674593","modified":1660553384593},{"_id":"source/_posts/BookMark/面试/redis.md","hash":"61ae735b9673abbc2cbaf969b5888e58ca7ede49","modified":1662026560524},{"_id":"source/_posts/BookMark/车车笔记/车车项目启动笔记.md","hash":"4a349526f2d88824b95096b27a3379e4ca589b41","modified":1662027848022},{"_id":"source/_posts/BookMark/面试/MySQL.md","hash":"8553d22b21337749038e90559be2f4b2f966a600","modified":1662026560532},{"_id":"source/_posts/BookMark/车车笔记/订阅消息.md","hash":"a8963125d3ad3633445de6a3b35a1d11e45c105b","modified":1662027985955},{"_id":"source/_posts/BookMark/面试/spring.md","hash":"508aa228465599c886a96e26378676b4f22df29f","modified":1662026560515},{"_id":"source/_posts/BookMark/面试/算法.md","hash":"8a1704514411a2878da964d6b2279c77842c4ca7","modified":1658137898000},{"_id":"source/_posts/BookMark/面试/服务运维.md","hash":"e67d188113f5e9f5529c2f6f756a1985b285c7cd","modified":1658137898000},{"_id":"source/_posts/BookMark/面试/JAVA基础.md","hash":"cfc016317a5676002ae1896793adc52101292f1e","modified":1662027471019},{"_id":"source/_posts/BookMark/面试/人事面.md","hash":"3e678fbf70331762acbdc4b3ad9ffd4aa14eed9a","modified":1658137898000},{"_id":"source/_posts/BookMark/面试/项目面.md","hash":"7c74d7e735c0fbdad176cde92624c701d1695c25","modified":1662026560504},{"_id":"source/_posts/BookMark/运维/CentOS7修改密码 --菜鸟小回.md","hash":"e52b18ceb0bc724922d87f58b2397dd71a4b3b24","modified":1662026560547},{"_id":"source/_posts/BookMark/运维/Centos中修改，访问java工程直接通过ip，除去端口号和项目名访问。 --菜鸟小回.md","hash":"76d5a45841c9d94869f46a5e58ba28bd5f238180","modified":1662026560536},{"_id":"source/_posts/BookMark/运维/VMware中centos7网络配置（桥接自定义ip）.md","hash":"7e6160ed76f1efbd84709d9ac040893548a6c367","modified":1662026560538},{"_id":"source/_posts/BookMark/运维/云服务器伪分布式hadoop配置+javaAPI上传下载删除操纵（踩坑总结） --菜鸟小回.md","hash":"a27f759b892e05d0dd44e3d263ca25e2ba7a1587","modified":1662026560546},{"_id":"source/_posts/BookMark/运维/idea中spring boot配置一键docker.md","hash":"5eee2290f043abfd5ac98a7f4ab2f42de6f9118c","modified":1662026560518},{"_id":"source/_posts/BookMark/运维/Jenkins脚本集.md","hash":"a40a5864eb826d4c3d480de9421fa05e4ee6d3af","modified":1658137891000},{"_id":"source/_posts/BookMark/运维/git.md","hash":"d9f94ff4030452ff4e53341ee2b744573bfcd964","modified":1660810773848},{"_id":"source/_posts/BookMark/运维/内网centos 7安装mysql及问题记录.md","hash":"57c056f8bc0fa9578a910a488da41cc029e4a87d","modified":1658137892000},{"_id":"source/_posts/BookMark/面试/JVM.md","hash":"dfc6b7e88cbbef06d52bb92893f5791408035cd9","modified":1662026560567},{"_id":"source/_posts/BookMark/运维/服务器部署---《fastDFS篇》 --菜鸟小回.md","hash":"d1107f4419173ae1457d24ecc9553cc0b529d23a","modified":1662026560517},{"_id":"source/_posts/BookMark/运维/服务器部署---《jdk篇》 --菜鸟小回.md","hash":"f51a3bb21fd37459d13436b11edeff3ecf5192eb","modified":1662026560563},{"_id":"source/_posts/BookMark/运维/服务器部署---《mycat篇》 --菜鸟小回.md","hash":"d6a86ef7355cef2774035b7e0da12bb37507b2be","modified":1662026560554},{"_id":"source/_posts/BookMark/运维/常用Docker.md","hash":"0c26f1e5e0dc7b854816ed7228100d2cc73e0831","modified":1662443560984},{"_id":"source/_posts/BookMark/运维/备份恢复.md","hash":"02fad39e36116465976dd2544c144fcfd3c55f8f","modified":1661826837054},{"_id":"source/_posts/BookMark/运维/服务器部署---《redis篇》 --菜鸟小回.md","hash":"fe5373d14549b8f2ee588d819bb885e344c70543","modified":1662026560494},{"_id":"source/_posts/BookMark/运维/服务器部署---《tomcat篇》 --菜鸟小回.md","hash":"640f593b4e0ca095edf4c6e3880e6a49a8388185","modified":1662026560492},{"_id":"source/_posts/BookMark/面试/面试准备.md","hash":"7e12c7e0289bdcd1e0877701a7f414d4f41c174e","modified":1662026560513},{"_id":"source/_posts/BookMark/运维/服务器部署---《nginx篇》 --菜鸟小回.md","hash":"73709c4ae5a62d5f42251779cd8c0ea76a58f4f0","modified":1662026560485},{"_id":"source/_posts/BookMark/运维/宝塔.md","hash":"10a50233766a11ab5bb535585bbc40607f90d9bf","modified":1661528254008},{"_id":"source/_posts/BookMark/运维/从docker安装到前后端分离项目启动完成（docker安装mysql、nginx；启动jar包）.md","hash":"8c5d9ddf0bb06e6a8acf75137306fdc290a75a4d","modified":1662026560558},{"_id":"source/_posts/BookMark/运维/服务器部署---《mysql篇》 --菜鸟小回.md","hash":"0b278afc63e67b68f84ddc2b52b1b08f199e62fb","modified":1662026560549},{"_id":"source/_posts/BookMark/运维/服务器配置篇汇总（linux）+（jdk）+（tomcat）+（mysql）+（nginx）+（redis）+（fastDFS）+（mycat）+（git）+(maven) --菜鸟小回.md","hash":"b8ba95da301194db359ccfa44be7d64b42792c1b","modified":1662026560511},{"_id":"source/_posts/BookMark/运维/服务器部署—《linux加载git仓库代码打包并运行》--菜鸟小回.md","hash":"586f716231ca4ddea83de36227c925329f0e4d77","modified":1658137895000},{"_id":"source/_posts/BookMark/运维/虚拟机安装centos7并配置网络.md","hash":"19cb49dee06b046da84d45cd54b8cc5340b11409","modified":1662026560578},{"_id":"source/_posts/BookMark/车车笔记/天境/公告.md","hash":"0a701a9e8c06020bd7430211cd4c98ed1da14415","modified":1662026560540},{"_id":"source/_posts/BookMark/车车笔记/天境/用户中心项目.md","hash":"474fd9da64c693f2242be1f7c1d68b5439b92c0c","modified":1658137901000},{"_id":"source/_posts/BookMark/车车笔记/天境/项目骨架.md","hash":"b42ddea4ab64b51b72635a056564c46557fb19ef","modified":1662026560531},{"_id":"source/_posts/BookMark/车车笔记/天境/天境上线.md","hash":"f8cc6f5d9f2f710b968672d8f95d2f3de7e2f4a3","modified":1660810825461},{"_id":"source/_posts/BookMark/车车笔记/天境/风控.md","hash":"ef06fb87c6b9551809c46a9cce11322b312118b5","modified":1658137902000},{"_id":"source/_posts/BookMark/运维/阿里云服务器配置   Linuxs系统安装 jdk、tomcat、MySQL汇总详细教程   项目上线发布中的部分小bug解决方案 --菜鸟小回.md","hash":"8f3cf987b3980557e6eb030d0098d28fdb882024","modified":1662361104797},{"_id":"source/_posts/BookMark/车车笔记/天境/常用脚本代码段.md","hash":"5eddb8df98baadb2cd84050168d3b9b6f35a6ef6","modified":1659684401686},{"_id":"themes/fluid/source/css/_pages/_tag/tag.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1655372397000},{"_id":"themes/fluid/LICENSE","hash":"26f9356fd6e84b5a88df6d9014378f41b65ba209","modified":1655372397000},{"_id":"themes/fluid/README.md","hash":"6d752df6f2278033dc2512a7d5be22c8a8eb665a","modified":1655372397000},{"_id":"themes/fluid/.gitattributes","hash":"a54f902957d49356376b59287b894b1a3d7a003f","modified":1655372397000},{"_id":"themes/fluid/.gitignore","hash":"ae3bfcb89777657c5dfb5169d91445dcb0e5ab98","modified":1655372397000},{"_id":"themes/fluid/README_en.md","hash":"8c874f309e346fffa392e174385b5cc08510f218","modified":1655372397000},{"_id":"themes/fluid/.editorconfig","hash":"33218fbd623feb43edf5f99f15965392cecc44a6","modified":1655372397000},{"_id":"themes/fluid/package.json","hash":"0bc354a01c5e6e9de43bf67456dc16c59d400139","modified":1655372397000},{"_id":"themes/fluid/_config.yml","hash":"ebe26856c4cc286df3181136b5b391dd2e5f5ec7","modified":1655372397000},{"_id":"themes/fluid/.eslintrc","hash":"4bc2b19ce2b8c4d242f97d4ccf2d741e68ab0097","modified":1655372397000},{"_id":"themes/fluid/_config的副本.yml","hash":"ebe26856c4cc286df3181136b5b391dd2e5f5ec7","modified":1655372397000},{"_id":"themes/fluid/layout/about.ejs","hash":"163bee643e6a38912d3ae70923c83c48d57222e7","modified":1655372397000},{"_id":"themes/fluid/layout/404.ejs","hash":"9569c5c8f67d2783f372f671c57b93a00dc63c2f","modified":1655372397000},{"_id":"themes/fluid/layout/categories.ejs","hash":"13859726c27b6c79b5876ec174176d0f9c1ee164","modified":1655372397000},{"_id":"themes/fluid/layout/layout.ejs","hash":"7e0023474128fbe4d68c467704c41f1712432415","modified":1655372397000},{"_id":"themes/fluid/layout/index.ejs","hash":"b15d13877827e99e0ff783a6b13b13cca90bfe8c","modified":1655372397000},{"_id":"themes/fluid/layout/archive.ejs","hash":"7c1f44005849791feae4abaa10fae4cb983d3277","modified":1655372397000},{"_id":"themes/fluid/layout/category.ejs","hash":"f099161b738a16a32253f42085b5444f902018ed","modified":1655372397000},{"_id":"themes/fluid/layout/links.ejs","hash":"1cac32ec4579aaf7b9fa39d317497331d4c5e1dd","modified":1655372397000},{"_id":"themes/fluid/languages/de.yml","hash":"0e7d455d9e004ff15d8924b7a0c35cea25ee5b1d","modified":1655372397000},{"_id":"themes/fluid/layout/page.ejs","hash":"ed5007a3feb8f14d3d2843271bfb298eb0c56219","modified":1655372397000},{"_id":"themes/fluid/layout/tag.ejs","hash":"9d686364c4d16a1a9219471623af452035c5b966","modified":1655372397000},{"_id":"themes/fluid/languages/en.yml","hash":"cb11b39f44ea069652c9647179606b6cecc98d50","modified":1655372397000},{"_id":"themes/fluid/languages/es.yml","hash":"7112594259c88c04714be152af7fd377687dad40","modified":1655372397000},{"_id":"themes/fluid/languages/eo.yml","hash":"a556251cc50a5680578c03f1efbf252b1f4ab860","modified":1655372397000},{"_id":"themes/fluid/layout/post.ejs","hash":"505bcc06e55066b7cc5551d9ac0694e7713bfab5","modified":1655372397000},{"_id":"themes/fluid/languages/zh-CN.yml","hash":"f96a22f989897ecddc69d5867a206e1cf6b8f610","modified":1655372397000},{"_id":"themes/fluid/languages/zh-HK.yml","hash":"80ed400a7adaa92ea54fc7f5d534c9af795bed00","modified":1655372397000},{"_id":"themes/fluid/languages/zh-TW.yml","hash":"596d031dff3826ae8e4ffc8931fff28977b73247","modified":1655372397000},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/bug_report.md","hash":"16d33eb89ecf90f4046720fde5395d972c7ba1fd","modified":1655372397000},{"_id":"themes/fluid/layout/tags.ejs","hash":"1d06af34b6cf1d8a20d2eb565e309326ceba309f","modified":1655372397000},{"_id":"themes/fluid/languages/ja.yml","hash":"3dd6d20f8d26585a7c154a8e59fe8d5d902f4c6a","modified":1655372397000},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/bug_report_zh.md","hash":"af977ed0792508bb0766ea8afe82d34ef1e8fb3c","modified":1655372397000},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/feature_request.md","hash":"c134dd57ffd269b93402ccfffe7dbe0f0b583bec","modified":1655372397000},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/feature_request_zh.md","hash":"ed08574b196447376dd74411cca664ac9227a5d4","modified":1655372397000},{"_id":"themes/fluid/.github/workflows/limit.yaml","hash":"f8bd2edeb4424ee7a055b31583445d5d5dff91a4","modified":1655372397000},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/question_zh.md","hash":"e24b470f7aa8044499a4f5e39634e5dc43899011","modified":1655372397000},{"_id":"themes/fluid/layout/_partials/archive-list.ejs","hash":"7520fbf91f762207c2ab06b2c293235cd5b23905","modified":1655372397000},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/question.md","hash":"ab5eab9e3ff889c4ba7fd82846e7f5b7ae15bebc","modified":1655372397000},{"_id":"themes/fluid/layout/_partials/category-chains.ejs","hash":"18309584aab83bc4deb20723ebad832149dd2e24","modified":1655372397000},{"_id":"themes/fluid/layout/_partials/category-list.ejs","hash":"a591fedbc5759fb00152304f9ea486dfba3a246a","modified":1655372397000},{"_id":"themes/fluid/layout/_partials/comments.ejs","hash":"24ef242aa01e5f5bc397cf3f83ae48b1e8353dab","modified":1655372397000},{"_id":"themes/fluid/layout/_partials/head.ejs","hash":"776949aa697dffd54e9b1957d9245028879509a3","modified":1655372397000},{"_id":"themes/fluid/layout/_partials/footer.ejs","hash":"10ccfb8eef4e16182183c9a3e175c90d5b6397d3","modified":1655372397000},{"_id":"themes/fluid/layout/_partials/header.ejs","hash":"0d5e397d30051e5fbabe7b47cfd1f1e6a5820af1","modified":1655372397000},{"_id":"themes/fluid/layout/_partials/markdown-plugins.ejs","hash":"fc4bdf7de0cf1a66d0e5e4fba1b31d6f7ed49468","modified":1655372397000},{"_id":"themes/fluid/scripts/events/index.js","hash":"79de5a379b28cad759a49048351c7f6b8915bd7d","modified":1655372397000},{"_id":"themes/fluid/layout/_partials/paginator.ejs","hash":"0f38a2c238169edcb63fc46c23bfc529ff3859b7","modified":1655372397000},{"_id":"themes/fluid/scripts/filters/default-injects.js","hash":"b2013ae8e189cd07ebc8a2ff48a78e153345210f","modified":1655372397000},{"_id":"themes/fluid/scripts/generators/local-search.js","hash":"fc2c50405b771b06b7f6cfc4e9de97b992691555","modified":1655372397000},{"_id":"themes/fluid/scripts/filters/post-filter.js","hash":"d516b9db63067f9ea9c72cc75ae4ff358417e77d","modified":1655372397000},{"_id":"themes/fluid/scripts/generators/pages.js","hash":"d9971f15fbb6b775e3d31a1b9b45011959395010","modified":1655372397000},{"_id":"themes/fluid/scripts/helpers/engine.js","hash":"d3a231d106795ce99cb0bc77eb65f9ae44515933","modified":1655372397000},{"_id":"themes/fluid/scripts/helpers/date.js","hash":"9bda6382f61b40a20c24af466fe10c8366ebb74c","modified":1655372397000},{"_id":"themes/fluid/scripts/helpers/export-config.js","hash":"47e6dba7652a621a54067413490a11c8a89e3d7b","modified":1655372397000},{"_id":"themes/fluid/layout/_partials/scripts.ejs","hash":"da5810785105e5075861593c7ac22c7aa9665a72","modified":1655372397000},{"_id":"themes/fluid/layout/_partials/search.ejs","hash":"70e1c929e084ca8a2648cedabf29b372511ea2b8","modified":1655372397000},{"_id":"themes/fluid/scripts/filters/locals.js","hash":"58d0fec976f6b1d35e7ea03edc45414088acf05c","modified":1655372397000},{"_id":"themes/fluid/scripts/helpers/import.js","hash":"ca53e8dbf7d44cfd372cfa79ac60f35a7d5b0076","modified":1655372397000},{"_id":"themes/fluid/scripts/helpers/injects.js","hash":"1ad2ae6b11bd8806ee7dd6eb7140d8b54a95d613","modified":1655372397000},{"_id":"themes/fluid/scripts/helpers/page.js","hash":"4607607445233b3029ef20ed5e91de0da0a7f9c5","modified":1655372397000},{"_id":"themes/fluid/scripts/helpers/utils.js","hash":"226f99b465ff513de075a8e78b321d6cb62592ca","modified":1655372397000},{"_id":"themes/fluid/scripts/helpers/url.js","hash":"2a6a8288176d0e0f6ec008056bf2745a86e8943e","modified":1655372397000},{"_id":"themes/fluid/scripts/helpers/wordcount.js","hash":"b917b893b1777e6ffcb53188f9f5644510e5f20d","modified":1655372397000},{"_id":"themes/fluid/scripts/helpers/scope.js","hash":"43620b0944ffb67ea1fa6cc838f65a7351222eb0","modified":1655372397000},{"_id":"themes/fluid/scripts/utils/compare-versions.js","hash":"dbbc928c914fc2bd242cd66aa0c45971aec13a5d","modified":1655372397000},{"_id":"themes/fluid/scripts/utils/object.js","hash":"33b57e4decdc5e75c518859f168c8ba80b2c665b","modified":1655372397000},{"_id":"themes/fluid/scripts/utils/resolve.js","hash":"8c4a8b62aa8608f12f1e9046231dff04859dc3e9","modified":1655372397000},{"_id":"themes/fluid/scripts/tags/button.js","hash":"3eb43a8cdea0a64576ad6b31b4df6c2bf5698d4c","modified":1655372397000},{"_id":"themes/fluid/scripts/tags/checkbox.js","hash":"4938610c3543a921a341bc074626d511cb1a4b45","modified":1655372397000},{"_id":"themes/fluid/scripts/utils/url-join.js","hash":"718aab5e7b2059a06b093ca738de420d9afa44ba","modified":1655372397000},{"_id":"themes/fluid/scripts/tags/group-image.js","hash":"4aeebb797026f1df25646a5d69f7fde79b1bcd26","modified":1655372397000},{"_id":"themes/fluid/scripts/tags/mermaid.js","hash":"75160561e1ef3603b6d2ad2938464ab1cb77fd38","modified":1655372397000},{"_id":"themes/fluid/scripts/tags/note.js","hash":"f52f3a005b41f48b4da274ac64710177c8d4502f","modified":1655372397000},{"_id":"themes/fluid/scripts/tags/label.js","hash":"f05a6d32cca79535b22907dc03edb9d3fa2d8176","modified":1655372397000},{"_id":"themes/fluid/layout/_partials/css.ejs","hash":"85f6e051550907681ab4ed2e268ac8f6e9ebf931","modified":1655372397000},{"_id":"themes/fluid/source/css/highlight.styl","hash":"a9efc52a646a9e585439c768557e3e3c9e3326dc","modified":1655372397000},{"_id":"themes/fluid/source/css/main.styl","hash":"855ae5fe229c51afa57f7645f6997a27a705d7e4","modified":1655372397000},{"_id":"themes/fluid/source/css/highlight-dark.styl","hash":"45695ef75c31a4aa57324dd408b7e2327a337018","modified":1655372397000},{"_id":"themes/fluid/source/js/boot.js","hash":"2848f8eb5081a7f0550fbd76dc06d3ff877f1913","modified":1655372397000},{"_id":"themes/fluid/source/js/events.js","hash":"f05a569a9fd6da2fda69a2cf8e276ba81580faf3","modified":1655372397000},{"_id":"themes/fluid/source/js/leancloud.js","hash":"eff77c7a5c399fcaefda48884980571e15243fc9","modified":1655372397000},{"_id":"themes/fluid/source/js/img-lazyload.js","hash":"cbdeca434ec4da51f488c821d51b4d23c73294af","modified":1655372397000},{"_id":"themes/fluid/source/js/local-search.js","hash":"cebcda5991b6a9ab9307c69542389ce9013f04f7","modified":1655372397000},{"_id":"themes/fluid/source/js/utils.js","hash":"45cc86f099db0a2c36ad49711ce66c2d598a2ab1","modified":1655372397000},{"_id":"themes/fluid/source/js/plugins.js","hash":"2333494add51e5e1374602a4e81f0be36a05d4c2","modified":1655372397000},{"_id":"themes/fluid/source/js/color-schema.js","hash":"ba63f7c3324bc1fdd050a90add9d8faaffc27e07","modified":1655372397000},{"_id":"themes/fluid/source/img/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":1655372397000},{"_id":"themes/fluid/source/img/fluid.png","hash":"64b215db2cb3af98fe639e94537cb5209f959c78","modified":1655372397000},{"_id":"themes/fluid/source/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1655372397000},{"_id":"themes/fluid/source/css/gitalk.css","hash":"a57b3cc8e04a0a4a27aefa07facf5b5e7bca0e76","modified":1655372397000},{"_id":"themes/fluid/layout/_partials/comments/changyan.ejs","hash":"c9b2d68ed3d375f1953e7007307d2a3f75ed6249","modified":1655372397000},{"_id":"themes/fluid/layout/_partials/header/banner.ejs","hash":"e07757b59e7b89eea213d0e595cb5932f812fd32","modified":1655372397000},{"_id":"themes/fluid/layout/_partials/comments/disqus.ejs","hash":"aab4a4d24c55231a37db308ae94414319cecdd9b","modified":1655372397000},{"_id":"themes/fluid/layout/_partials/comments/giscus.ejs","hash":"95f8b866b158eff9352c381c243b332a155a5110","modified":1655372397000},{"_id":"themes/fluid/source/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1655372397000},{"_id":"themes/fluid/source/xml/local-search.xml","hash":"8c96ba6a064705602ce28d096fd7dd9069630a55","modified":1655372397000},{"_id":"themes/fluid/layout/_partials/comments/livere.ejs","hash":"2264758fed57542a7389c7aa9f00f1aefa17eb87","modified":1655372397000},{"_id":"themes/fluid/layout/_partials/comments/cusdis.ejs","hash":"5f9dc012be27040bbe874d0c093c0d53958cc987","modified":1655372397000},{"_id":"themes/fluid/layout/_partials/comments/gitalk.ejs","hash":"843bc141a4545eb20d1c92fb63c85d459b4271ec","modified":1655372397000},{"_id":"themes/fluid/layout/_partials/comments/remark42.ejs","hash":"d4e9532feeb02aed61bd15eda536b5b631454dac","modified":1655372397000},{"_id":"themes/fluid/layout/_partials/comments/twikoo.ejs","hash":"e6820fb7f13662c42f8433ec95404238f4c1860c","modified":1655372397000},{"_id":"themes/fluid/layout/_partials/comments/utterances.ejs","hash":"c7ccf7f28308334a6da6f5425b141a24b5eca0e2","modified":1655372397000},{"_id":"themes/fluid/layout/_partials/comments/waline.ejs","hash":"12727da7cf3ac83443270f550be4d1c06135b52b","modified":1655372397000},{"_id":"themes/fluid/layout/_partials/header/navigation.ejs","hash":"38990ed9dbccd88342ee4b4cb5e60818e9eb8e8a","modified":1655372397000},{"_id":"themes/fluid/layout/_partials/footer/beian.ejs","hash":"4fb9b5dd3f3e41a586d6af44e5069afe7c81fff2","modified":1655372397000},{"_id":"themes/fluid/layout/_partials/comments/valine.ejs","hash":"19ba937553dddd317f827d682661a1066a7b1f30","modified":1655372397000},{"_id":"themes/fluid/layout/_partials/footer/statistics.ejs","hash":"454d8dd4c39f9494ebeb03ca0746f5bc122af76a","modified":1655372397000},{"_id":"themes/fluid/layout/_partials/plugins/analytics.ejs","hash":"1327395a4dde1ea06c476b047fb110bcd269149f","modified":1655372397000},{"_id":"themes/fluid/layout/_partials/plugins/anchorjs.ejs","hash":"953552425f0b86c98d1026fdb04e716fdff356e7","modified":1655372397000},{"_id":"themes/fluid/layout/_partials/plugins/code-widget.ejs","hash":"3a505cba37942badf62a56bbb8b605b72af330aa","modified":1655372397000},{"_id":"themes/fluid/layout/_partials/plugins/fancybox.ejs","hash":"9d1ea2a46b8c8ad8c168594d578f40764818ef13","modified":1655372397000},{"_id":"themes/fluid/layout/_partials/plugins/highlight.ejs","hash":"7529dd215b09d3557804333942377b9e20fa554e","modified":1655372397000},{"_id":"themes/fluid/layout/_partials/plugins/mermaid.ejs","hash":"3b3b0be9f7624ff72fbb2da6ae3663adcfb7d118","modified":1655372397000},{"_id":"themes/fluid/layout/_partials/plugins/nprogress.ejs","hash":"4c2d39ce816b8a6dcd6b53113c8695f8bd650a23","modified":1655372397000},{"_id":"themes/fluid/layout/_partials/plugins/math.ejs","hash":"94c1ce6e312932e876886ba24b082ae34515a038","modified":1655372397000},{"_id":"themes/fluid/layout/_partials/plugins/typed.ejs","hash":"51faef29f8e464bcb2e73049b428b88c8dd8b40a","modified":1655372397000},{"_id":"themes/fluid/layout/_partials/plugins/encrypt.ejs","hash":"cbcf6905f4990a22895a848e29dd4c05592a9043","modified":1655372397000},{"_id":"themes/fluid/layout/_partials/post/meta-top.ejs","hash":"ce6e9f578f4faa45840abddf8f46af3f4b69c177","modified":1655372397000},{"_id":"themes/fluid/layout/_partials/post/category-bar.ejs","hash":"88420e83c0968f7da69aa423f42d3033891c9229","modified":1655372397000},{"_id":"themes/fluid/layout/_partials/post/copyright.ejs","hash":"e74fb49526ddb14fee2c6360a560d17f57262ef7","modified":1655372397000},{"_id":"themes/fluid/scripts/events/lib/compatible-configs.js","hash":"ef474d1fa5bbafc52619ced0f9dc7eaf2affb363","modified":1655372397000},{"_id":"themes/fluid/scripts/events/lib/footnote.js","hash":"2ec2ae03c79bb1ae7ac3fcf7e00fb52d1af2898d","modified":1655372397000},{"_id":"themes/fluid/layout/_partials/post/toc.ejs","hash":"91a1de823492d9225f9daa3ef59efbca345456a0","modified":1655372397000},{"_id":"themes/fluid/scripts/events/lib/hello.js","hash":"44c5eb97b98813a07c659d6afedd17fad63b1821","modified":1655372397000},{"_id":"themes/fluid/scripts/events/lib/highlight.js","hash":"0f02df2244e275595e72163498d42f42bcf0de5e","modified":1655372397000},{"_id":"themes/fluid/scripts/events/lib/injects.js","hash":"5ae4b07204683e54b5a1b74e931702bbce2ac23e","modified":1655372397000},{"_id":"themes/fluid/scripts/events/lib/merge-configs.js","hash":"7c944c43b2ece5dd84859bd9d1fe955d13427387","modified":1655372397000},{"_id":"themes/fluid/layout/_partials/post/sidebar-left.ejs","hash":"9992c99b3eb728ad195970e1b84d665f2c8691c4","modified":1655372397000},{"_id":"themes/fluid/source/css/_mixins/base.styl","hash":"542e306ee9494e8a78e44d6d7d409605d94caeb3","modified":1655372397000},{"_id":"themes/fluid/scripts/events/lib/lazyload.js","hash":"9ba0d4bc224e22af8a5a48d6ff13e5a0fcfee2a4","modified":1655372397000},{"_id":"themes/fluid/source/css/_functions/base.styl","hash":"2e46f3f4e2c9fe34c1ff1c598738fc7349ae8188","modified":1655372397000},{"_id":"themes/fluid/source/css/_pages/pages.styl","hash":"b8e887bc7fb3b765a1f8ec9448eff8603a41984f","modified":1655372397000},{"_id":"themes/fluid/source/css/_pages/_about/about.styl","hash":"97fe42516ea531fdad771489b68aa8b2a7f6ae46","modified":1655372397000},{"_id":"themes/fluid/source/css/_variables/base.styl","hash":"4ed5f0ae105ef4c7dd92eaf652ceda176c38e502","modified":1655372397000},{"_id":"themes/fluid/layout/_partials/post/sidebar-right.ejs","hash":"d5fcc9b60e02f869a29a8c17a16a6028ecc1e6d8","modified":1655372397000},{"_id":"themes/fluid/source/css/_pages/_category/category-list.styl","hash":"7edfe1b571ecca7d08f5f4dbcf76f4ffdcfbf0b5","modified":1655372397000},{"_id":"themes/fluid/source/css/_pages/_category/category-bar.styl","hash":"99e8e25e84d513b869a17140f63a5c1e48a0e7e1","modified":1655372397000},{"_id":"themes/fluid/source/css/_pages/_category/category-chain.styl","hash":"0cdf7ef50dfd0669d3b257821384ff31cd81b7c9","modified":1655372397000},{"_id":"themes/fluid/source/css/_pages/_archive/archive.styl","hash":"c475e6681546d30350eaed11f23081ecae80c375","modified":1655372397000},{"_id":"themes/fluid/source/css/_pages/_base/base.styl","hash":"643284c567665f96915f0b64e59934dda315f74d","modified":1655372397000},{"_id":"themes/fluid/source/css/_pages/_base/color-schema.styl","hash":"61279540c2623ea4bf93e40613d41380839b92d3","modified":1655372397000},{"_id":"themes/fluid/layout/_partials/post/meta-bottom.ejs","hash":"7079b27a7bc15a7dfa9209f6be6051bdec49ebad","modified":1655372397000},{"_id":"themes/fluid/source/css/_pages/_base/inline.styl","hash":"411a3fa3f924a87e00ff04d18b5c83283b049a4d","modified":1655372397000},{"_id":"themes/fluid/source/css/_pages/_index/index.styl","hash":"0acbd71633bcc7191672ea4e1b2277bea350d73b","modified":1655372397000},{"_id":"themes/fluid/source/css/_pages/_links/links.styl","hash":"5c7f2044e3f1da05a3229537c06bd879836f8d6e","modified":1655372397000},{"_id":"themes/fluid/source/css/_pages/_post/comment.styl","hash":"780f3788e7357bcd3f3262d781cb91bb53976a93","modified":1655372397000},{"_id":"themes/fluid/source/css/_pages/_post/highlight.styl","hash":"7054d79c9d5966fc57baf0adcdf3b19275987b62","modified":1655372397000},{"_id":"themes/fluid/source/css/_pages/_post/markdown.styl","hash":"1e3d3a82721e7c10bcfcecec6d81cf2979039452","modified":1655372397000},{"_id":"themes/fluid/source/css/_pages/_base/keyframes.styl","hash":"94065ea50f5bef7566d184f2422f6ac20866ba22","modified":1655372397000},{"_id":"themes/fluid/source/css/_pages/_post/post-page.styl","hash":"127bb5391370afe7fef2a297084d76406bc5e902","modified":1655372397000},{"_id":"themes/fluid/source/css/_pages/_post/post-tag.styl","hash":"27f70062415ccf66a9b6f4952db124fc1471fda5","modified":1655372397000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/anchorjs.styl","hash":"e0cebda4a6f499aff75e71417d88caa7ceb13b94","modified":1655372397000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/board.styl","hash":"4397037fc3f0033dbe546c33cd9dbdabd8cb1632","modified":1655372397000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/banner.styl","hash":"7a0bd629bc234fc75e3cc8e3715ffada92f09e73","modified":1655372397000},{"_id":"themes/fluid/source/css/_pages/_tag/tags.styl","hash":"65bfc01c76abc927fa1a23bf2422892b0d566c3f","modified":1655372397000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/code-widget.styl","hash":"b66ab013f0f37d724a149b85b3c7432afcf460ad","modified":1655372397000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/footer.styl","hash":"2caaca71dd1ff63d583099ed817677dd267b457e","modified":1655372397000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/header.styl","hash":"896179810e1ee986208ae2d57a44719f6b839bde","modified":1655372397000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/copyright.styl","hash":"26f71a9cd60d96bb0cb5bbdf58150b8e524d9707","modified":1655372397000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/ngrogress.styl","hash":"5d225357b4a58d46118e6616377168336ed44cb2","modified":1655372397000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/modal.styl","hash":"adf6c1e5c8e1fb41c77ce6e2258001df61245aa2","modified":1655372397000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/pagination.styl","hash":"8bb1b68e5f3552cb48c2ffa31edbc53646a8fb4c","modified":1655372397000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/noscript.styl","hash":"0cf2f2bb44f456150d428016675d5876a9d2e2aa","modified":1655372397000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/footnote.styl","hash":"ae9289cc89649af2042907f8a003303b987f3404","modified":1655372397000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/qrcode.styl","hash":"78704a94c0436097abfb0e0a57abeb3429c749b7","modified":1655372397000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/scroll-btn.styl","hash":"f0e429a27fa8a7658fcbddbb4d4dbe4afa12499a","modified":1655372397000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/toc.styl","hash":"9e7452aa2372153f25d7a4675c9d36d281a65d24","modified":1655372397000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/search.styl","hash":"10f7e91a91e681fb9fe46f9df7707b9ef78707c8","modified":1655372397000},{"_id":"themes/fluid/source/img/default.png","hash":"167a12978d80371cf578c8a2e45c24a2eb25b6fb","modified":1655372397000},{"_id":"public/local-search.xml","hash":"27f060067cba092a1610d5f5e47083cffcb42d13","modified":1662448133365},{"_id":"public/about/index.html","hash":"b5a0a9db448c181214f253913ab31d2e19f0e35a","modified":1662446638062},{"_id":"public/tags/index.html","hash":"36b6661511926a95b4350752ae90aa5b32e60ab5","modified":1662448133365},{"_id":"public/categories/index.html","hash":"17444827f41771e5b79fa09055ca273a100d009b","modified":1662448133365},{"_id":"public/2022/08/18/BookMark/运维/git/index.html","hash":"aad0925e532da0e7655da785031550df8c15f6ec","modified":1662447022902},{"_id":"public/2022/07/25/BookMark/package/index.html","hash":"c90fef764631f08f3ece9178dc6d21cccafa639c","modified":1662447022902},{"_id":"public/2022/07/18/BookMark/车车笔记/天境/用户中心项目/index.html","hash":"7d7def77b270e628531436412e655a294045a0aa","modified":1662447022902},{"_id":"public/archives/index.html","hash":"455dafb4447d0da5435bc65076daf634153e7bdf","modified":1662448133365},{"_id":"public/archives/page/2/index.html","hash":"86e6bd558e13efe598dd6cf56b49f330533c4a33","modified":1662448133365},{"_id":"public/archives/page/3/index.html","hash":"e3c0ef13f91575eaa4b8ab8f94935bce3e7cc5e3","modified":1662448133365},{"_id":"public/archives/page/4/index.html","hash":"86b5acb92de1ce0e4275ca867e78e08cb801d833","modified":1662448133365},{"_id":"public/archives/page/5/index.html","hash":"254dbef899bddb222e94b248a87bdbd0f892ca2c","modified":1662448133365},{"_id":"public/archives/page/6/index.html","hash":"01ca0ffd643dd5b7c3264af47b6ddc6d26ca066f","modified":1662448133365},{"_id":"public/archives/page/7/index.html","hash":"b2ef70da8c45eddc8f9fe6501cfa4e6a24448678","modified":1662448133365},{"_id":"public/archives/page/8/index.html","hash":"d100a03daab71e9fe27f1a52d64e4e699de34fdd","modified":1662448133365},{"_id":"public/archives/page/9/index.html","hash":"6ece64d41caa813b8f60525be54a3911ff0e9348","modified":1662448133365},{"_id":"public/archives/page/10/index.html","hash":"79d8c58e7c69b50c692e767b56ce3086f9024bc3","modified":1662448133365},{"_id":"public/archives/2022/index.html","hash":"465cf9fe415b47688ce275ae6e742502bf6b3fa0","modified":1662448133365},{"_id":"public/archives/2022/page/2/index.html","hash":"4650e32f2e6159a1d19173e0c7a6fdc731e62b0a","modified":1662448133365},{"_id":"public/archives/2022/page/3/index.html","hash":"3041b3e29f92fd6c83f8c33c4f192e26c8f0fce7","modified":1662448133365},{"_id":"public/archives/2022/page/4/index.html","hash":"fce82741fe5ea8c9ae426ef24ced1a0ce467fdbb","modified":1662448133365},{"_id":"public/archives/2022/page/5/index.html","hash":"fec4f0a4cb9043d00d1faf3b61f243d82f090935","modified":1662448133365},{"_id":"public/archives/2022/page/6/index.html","hash":"0822c849f2dbed103cf1892309cc19133ba0ef81","modified":1662448133365},{"_id":"public/archives/2022/page/7/index.html","hash":"b52ffd0d291ac06c4cdf362c54ea4cb1747d0cf1","modified":1662448133365},{"_id":"public/archives/2022/page/9/index.html","hash":"b3e08c595566e301c7e990cf182d05da4b107bc7","modified":1662448133365},{"_id":"public/archives/2022/page/10/index.html","hash":"262fbed0b66186e4c003507776268dad49e84625","modified":1662448133365},{"_id":"public/archives/2022/page/8/index.html","hash":"20c88e68800a4bd3835076bfd145b340a818b9f5","modified":1662448133365},{"_id":"public/archives/2022/07/index.html","hash":"05ecca2f5599807c7171575ae859db25434618f0","modified":1662448133365},{"_id":"public/archives/2022/07/page/2/index.html","hash":"8a2d5b1fd2b774b0082f87010857a9282fc3f95a","modified":1662448133365},{"_id":"public/archives/2022/07/page/3/index.html","hash":"959d0aaf0b7569bc3f1344c9cfc273a4f7460eeb","modified":1662448133365},{"_id":"public/archives/2022/07/page/4/index.html","hash":"8afce21b349c17bdeef28760e38e20b3a634c985","modified":1662448133365},{"_id":"public/archives/2022/07/page/5/index.html","hash":"00b1bc0ac89baeff1a65e21bcce295da0fb836d8","modified":1662448133365},{"_id":"public/archives/2022/07/page/6/index.html","hash":"dcead398a4d25c094ff933ac22720e623dcf68e2","modified":1662448133365},{"_id":"public/archives/2022/07/page/7/index.html","hash":"c8ca0c3b8cb85dd79cf6cb6ac9b9f330a050f5e8","modified":1662448133365},{"_id":"public/archives/2022/07/page/8/index.html","hash":"0c7b7c84581db748ac733602353ea6c8a3da5cc1","modified":1662448133365},{"_id":"public/archives/2022/07/page/9/index.html","hash":"76f41600f47fca1a30485f046472cefe631a57cc","modified":1662446638062},{"_id":"public/archives/2022/08/index.html","hash":"05adec3c4db73d9d570cf96f2fb228f425428bc4","modified":1662448133365},{"_id":"public/archives/2022/09/index.html","hash":"a5fcf58d8d7533a6e8d07ebe0a401a7468ead007","modified":1662448133365},{"_id":"public/categories/Code-Demo/index.html","hash":"b8541ba42363fd1d3760043a0b5cfd1a6f8c8ec8","modified":1662446638062},{"_id":"public/categories/Spring-Boot/index.html","hash":"35a1971262d4d6109cd13ff049fdbd31d0b02716","modified":1662448133365},{"_id":"public/tags/Hutool/index.html","hash":"5a6d829193f29fa56b1684b5b6065e0b73f567af","modified":1662446638062},{"_id":"public/tags/Mybatis-Plus/index.html","hash":"7504db78930bf1aaa160174a4e231d1d21eb464a","modified":1662448133365},{"_id":"public/tags/Stream/index.html","hash":"0377444d3f85ec83daaaf343292e147fc7d95019","modified":1662446638062},{"_id":"public/tags/Lambda/index.html","hash":"2a0d09493baf8c83f627a9f2d4ef4e693f5cb371","modified":1662446638062},{"_id":"public/tags/mysql/index.html","hash":"ab9d414451005164e2d4d643e82177fef6b84b85","modified":1662446638062},{"_id":"public/tags/js/index.html","hash":"9261ffe52e9e5a0313e4ef1425add34bd2a12c2d","modified":1662446638062},{"_id":"public/tags/Spring-Boot/index.html","hash":"e0ab8f64b558765d5084eb4e5da567d8cf4c9ed0","modified":1662448133365},{"_id":"public/tags/idea/index.html","hash":"99bd9c1e218dfd8b1b8f93f20ab3dfaef15650fc","modified":1662446638062},{"_id":"public/404.html","hash":"5d2bd2af535370073e48c7875f82ea2370cb09d5","modified":1662446638062},{"_id":"public/links/index.html","hash":"6eb11353bf22cf8e73309dd74c9346fcfa3b082e","modified":1662446638062},{"_id":"public/2022/09/05/BookMark/Code Demo/Hutool/index.html","hash":"094da0c8f768be6ef329dbd42615760979a13f60","modified":1662447022902},{"_id":"public/2022/09/05/BookMark/Code Demo/Mybatis Plus/index.html","hash":"020f45941175d34d4c2b8cda77b85c6ed7413744","modified":1662447121156},{"_id":"public/2022/09/05/BookMark/Code Demo/Stream&Lambda/index.html","hash":"67c0cf6a47e2d3357ed1835e4d5a51cb70f7835d","modified":1662447022902},{"_id":"public/2022/09/05/BookMark/Code Demo/常用js/index.html","hash":"d1ade7510d65dd69969c38266fc0f8f4ce4fea80","modified":1662447121156},{"_id":"public/2022/09/05/BookMark/Code Demo/sql中上下移置顶置底置换的排序实现/index.html","hash":"29d06e13a9b82cfdaa5cb1ca7a569434f2140651","modified":1662447121156},{"_id":"public/2022/09/05/BookMark/Code Demo/常用sql/index.html","hash":"3ca88df785223277f9a39db3f351cf5e228d38d2","modified":1662448133365},{"_id":"public/2022/08/26/BookMark/运维/宝塔/index.html","hash":"1a7c9e7a0da340d839aba14ae162645e286a8b18","modified":1662448133365},{"_id":"public/2022/09/05/BookMark/Spring Boot/idea新建一个Spring Boot项目+项目目录简单介绍+项目打包运行+导入Module项目无法识别问题（全部报红或灰色）解决 --菜鸟小回/index.html","hash":"3b16cb180bda57910361cf9ea93697ce09a727b5","modified":1662448133365},{"_id":"public/2022/08/18/BookMark/车车笔记/天境/天境上线/index.html","hash":"fd1a83b0a0d8b26989e1a1a8a3c6c0b06e4ae44e","modified":1662447022902},{"_id":"public/2022/07/25/BookMark/安装配置/mac/index.html","hash":"17010c859baade97c8cdc5115f7614c953001d34","modified":1662447022902},{"_id":"public/2022/07/25/BookMark/config/index.html","hash":"64ba88698ecf0b5a3989f1a05f2604e524692b3f","modified":1662447022902},{"_id":"public/2022/07/25/BookMark/车车笔记/天境/常用脚本代码段/index.html","hash":"b52e5ab7d02f22506d788afbf8a5d6a51dc9e30a","modified":1662447022902},{"_id":"public/2022/07/25/BookMark/面试/面试准备/index.html","hash":"5058d0b70d10232a383d4c7a5c1dcb959349aa9e","modified":1662448133365},{"_id":"public/2022/07/25/BookMark/Spring Boot/Spring Boot与Spring Clound项目四层pom以及基础配置文件/index.html","hash":"f9964a15b774cf19fbf7e0ee9620500724afc909","modified":1662447022902},{"_id":"public/2022/07/25/BookMark/Spring Boot/Spring Boot & 拦截参数 & 全局异常处理 & 统一结果返回/index.html","hash":"06e01b84766071fee2cb1889f4675bf89d8ac7f2","modified":1662447022902},{"_id":"public/2022/07/25/BookMark/运维/idea中spring boot配置一键docker/index.html","hash":"9263ff5d22727a6867518750a9ade0a5bbf9d805","modified":1662448133365},{"_id":"public/2022/07/25/BookMark/运维/服务器部署---《jdk篇》 --菜鸟小回/index.html","hash":"e626f4196ddbd519e7da4c2c12896a764d5cf3d6","modified":1662447022902},{"_id":"public/2022/07/25/BookMark/运维/VMware中centos7网络配置（桥接自定义ip）/index.html","hash":"f8572906d84589d629cda80182111a808b5db937","modified":1662447022902},{"_id":"public/2022/07/25/BookMark/运维/服务器部署---《mycat篇》 --菜鸟小回/index.html","hash":"21f239540d25af747c417330a8928a77b4d9e4ed","modified":1662447022902},{"_id":"public/2022/07/25/BookMark/运维/服务器部署---《mysql篇》 --菜鸟小回/index.html","hash":"663b37e4381098cbe44e840306e5075c0a58be60","modified":1662447022902},{"_id":"public/2022/07/25/BookMark/安装配置/IDEA2021.2及以下版本破解教程/index.html","hash":"4fae19e99d224e01b2dad828e0220a748ac36c27","modified":1662447022902},{"_id":"public/2022/07/25/BookMark/运维/云服务器伪分布式hadoop配置+javaAPI上传下载删除操纵（踩坑总结） --菜鸟小回/index.html","hash":"5674b35fad9a2511496eb65135639213bd46f8f2","modified":1662447022902},{"_id":"public/2022/07/25/BookMark/安装配置/MySQL免安装版配置 dos基础命令创建MySQL Navicat编辑器破解--菜鸟小回/index.html","hash":"57a4d4ca88b0576f6c435ff80087f6d1f495594b","modified":1662447022902},{"_id":"public/2022/07/25/BookMark/安装配置/无水印上传本地图片到网络获取地址+小书匠使用 +github和 七牛云 图床绑定--菜鸟小回/index.html","hash":"ec44ad831b20a26548946da0287a3adf03d054d4","modified":1662447022902},{"_id":"public/2022/07/25/BookMark/安装配置/IDEA快捷键/index.html","hash":"c7c8411a5e5e4973a12db03894c8bb459a9c90e6","modified":1662447022902},{"_id":"public/2022/07/25/BookMark/异常/项目异常/index.html","hash":"d27f1455287aaaca340a7ffe9e89798591feb187","modified":1662447022902},{"_id":"public/2022/07/25/BookMark/异常/解决：Error java 无效的源发行版 12 --菜鸟小回/index.html","hash":"668b2e94f600a1d6aa015047ecd843be3cf1dcf6","modified":1662447022902},{"_id":"public/2022/07/25/BookMark/学习笔记/java中使用fastDFS上传图片(前端ajax+后端ssm) --菜鸟小回/index.html","hash":"4450bf9bdeac22a032800e723ab3de00f47e9e3f","modified":1662447022902},{"_id":"public/2022/07/25/BookMark/拉勾笔记/1-2.IoC容器设计实现及Spring源码分析/index.html","hash":"883bf5023f729222a5bf2f5c5af1c128fbdfc1b4","modified":1662447022902},{"_id":"public/2022/07/25/BookMark/拉勾笔记/通过房屋租赁流程理解设计模式（单例模式，代理模式，工厂模式）/index.html","hash":"2e1cced8954e0cf1b96baafd848cd2877e6dabdb","modified":1662447022902},{"_id":"public/2022/07/25/BookMark/车车笔记/笔记/index.html","hash":"51267c5c4531cd54603efdf01d7eabaac14b861c","modified":1662447022902},{"_id":"public/2022/07/25/BookMark/车车笔记/统计信息/index.html","hash":"3a31d18ff165af23d7ef0e50329738555c55d382","modified":1662447022902},{"_id":"public/2022/07/25/BookMark/翻墙刷机/甲骨文vps搭建/index.html","hash":"8174ffd642dbfeeed964cf6583fb00200e6e2e5b","modified":1662447022902},{"_id":"public/2022/07/25/BookMark/README/index.html","hash":"cd36f75760ff9414da81f880110478c8495f8afe","modified":1662447022902},{"_id":"public/2022/07/21/BookMark/翻墙刷机/翻墙v2ray windows客户端使用教程/index.html","hash":"ef3c7106d625eb51295f725215ee0f9cfdb6eb2c","modified":1662447022902},{"_id":"public/2022/07/21/BookMark/翻墙刷机/《XP、面具框架玩机》小米手机玩机教程--菜鸟小回/index.html","hash":"4e083a41841f3f2893e1f96ee6ee8869edf85094","modified":1662447022902},{"_id":"public/2022/07/21/BookMark/翻墙刷机/miui12.5 root刷面具+线刷降级+卡米教程（测试机小米10至尊版）/index.html","hash":"dc529ae24835b103e4a8aa0e0533094195ea52ed","modified":1662447022902},{"_id":"public/2022/07/21/BookMark/面试/JVM/index.html","hash":"b905e09c56891012af44ac2c65af2033eff33b8b","modified":1662447022902},{"_id":"public/2022/07/21/BookMark/学习笔记/业务清单/index.html","hash":"0b4881c0022476f13017b6e6ed6d2c9e74bb4db7","modified":1662447022902},{"_id":"public/2022/07/21/BookMark/学习笔记/Jenkins项目启动教程/index.html","hash":"1915210d914b21ce9622514bdbf1eac200fd2174","modified":1662447022902},{"_id":"public/2022/07/21/BookMark/学习笔记/java中使用redis（含json类型与java类型装换） --菜鸟小回/index.html","hash":"1fd7b0648cc224df1f3e3fb323d4b2b7a16f0b92","modified":1662448133365},{"_id":"public/2022/07/21/BookMark/Spring Boot/Spring Boot & Mybatis Plus代码生成器/index.html","hash":"0212a3f3b1212dc14b95c34e7b720fbd7c1cafe1","modified":1662447022902},{"_id":"public/2022/07/21/BookMark/Spring Boot/Spring Boot & RabbitMq 延迟消息队列死信队列实现定时任务/index.html","hash":"d991fbb4292b5259910bbfafbf1930bf2292731e","modified":1662447022902},{"_id":"public/2022/07/21/BookMark/Spring Boot/Spring Boot & poi 导出Excel表格、Txt到浏览器下载/index.html","hash":"753ba3415547479354f363a598ba922f4b6efd52","modified":1662447022902},{"_id":"public/2022/07/21/BookMark/Spring Boot/Spring Boot & 阿里短信服务（Redis+短信验证码）/index.html","hash":"119e999861be5dbd14a793cd9262dfcc79b41360","modified":1662447022902},{"_id":"public/2022/07/21/BookMark/Spring Boot/Spring Boot & 支付宝支付（手机端，web端）/index.html","hash":"48ed8fd81c3cab0e18c143fa8939c5749d9ed50d","modified":1662447022902},{"_id":"public/2022/07/21/BookMark/Spring Boot/Spring Boot & Slf4j & logback 彩色日志打印（功能点：1、分运行环境生成日志文件 2、日志文件目录分类 3、日志文件按日输出）/index.html","hash":"b70d834869c9bacfcca535457b6c236342cc2c20","modified":1662447022902},{"_id":"public/2022/07/21/BookMark/Spring Boot/Spring Boot & 过滤器 & 拦截器 & 注册/index.html","hash":"a713758ca7e10651358c4a9e13df1d743a827835","modified":1662447022902},{"_id":"public/2022/07/21/BookMark/Spring Boot/Spring Boot & Jenkins 实现自动化部署（centos7&windows，涵盖防jenkins杀死的脚本）/index.html","hash":"b02632a21f31cce24e90bb7dd84187f696aa7358","modified":1662447022902},{"_id":"public/2022/07/21/BookMark/Spring Boot/Spring Boot & 自定义注解 实现从配置文件自选择redis db数据源/index.html","hash":"dc2612e49f8d5ec584cfe6a6326fef709452b44b","modified":1662447022902},{"_id":"public/2022/07/21/BookMark/Spring Boot/Spring Boot & 阿里OSS文件服务/index.html","hash":"2e9ae0d54abf0225831f0f424e2566e89fa088e0","modified":1662447022902},{"_id":"public/2022/07/20/BookMark/安装配置/Windows调取Bartender使用教程/index.html","hash":"b50a0a357a34e5e2666af8036b5a8ce42952eec2","modified":1662448133365},{"_id":"public/2022/07/20/BookMark/车车笔记/订阅消息/index.html","hash":"8e86daac9bebbcc9f4abc8efdf4a1be973c62378","modified":1662447022902},{"_id":"public/2022/07/20/BookMark/车车笔记/并行流/index.html","hash":"e27efd159dfbcea74e76433687e03185a45cce52","modified":1662448133365},{"_id":"public/2022/07/20/BookMark/Spring Boot/SSM项目转Spring Boot项目详细过程（含eclipse转idea注意事项）--菜鸟小回/index.html","hash":"ff18570cf15a7021b24f8b60af457be3b6817f24","modified":1662447022902},{"_id":"public/2022/07/20/BookMark/Spring Boot/Spring Boot与Spring Clound 微服务项目搭建流程/index.html","hash":"8eab420512dec41d2320da7403db3ab77cd7b2bb","modified":1662447022902},{"_id":"public/2022/07/20/BookMark/Spring Boot/Spring Boot项目maven分环境打包/index.html","hash":"e59179248b4ed6d512de209cc2653db6d6ecad9a","modified":1662447022902},{"_id":"public/2022/07/18/BookMark/车车笔记/天境/风控/index.html","hash":"85167d69a2222cc2eb41a5b509d758319ab064d4","modified":1662448133365},{"_id":"public/2022/07/18/BookMark/车车笔记/天境/公告/index.html","hash":"726a6a63d8bf3e6f150bbcdf1fb000b5548b99b7","modified":1662447022902},{"_id":"public/2022/07/18/BookMark/面试/JAVA基础/index.html","hash":"7f243a3779f7860407b8d87f14eb6db3a7a2b57d","modified":1662447022902},{"_id":"public/2022/07/18/BookMark/车车笔记/天境/项目骨架/index.html","hash":"29ba22ab517647f3d492df9a3d3229bd2e0b1056","modified":1662447022902},{"_id":"public/2022/07/18/BookMark/运维/虚拟机安装centos7并配置网络/index.html","hash":"b9259de93f92258df2d64c80cd21ef035d75150a","modified":1662447022902},{"_id":"public/2022/07/18/BookMark/运维/服务器部署---《redis篇》 --菜鸟小回/index.html","hash":"fd1f9d8711e2725569bf779c7465ad41637aa353","modified":1662447022902},{"_id":"public/2022/07/18/BookMark/运维/服务器部署---《tomcat篇》 --菜鸟小回/index.html","hash":"ccb9d8bfa40272ab7b39de0784502dbf8475aeea","modified":1662447022902},{"_id":"public/2022/07/18/BookMark/运维/阿里云服务器配置   Linuxs系统安装 jdk、tomcat、MySQL汇总详细教程   项目上线发布中的部分小bug解决方案 --菜鸟小回/index.html","hash":"6dead9fd8904c05fea800edd02dfcca6b5d75a4e","modified":1662447022902},{"_id":"public/2022/07/18/BookMark/运维/服务器部署—《linux加载git仓库代码打包并运行》--菜鸟小回/index.html","hash":"aee8bbfce37867695dc6a61c9db1864af3e3611b","modified":1662447022902},{"_id":"public/2022/07/18/BookMark/运维/服务器配置篇汇总（linux）+（jdk）+（tomcat）+（mysql）+（nginx）+（redis）+（fastDFS）+（mycat）+（git）+(maven) --菜鸟小回/index.html","hash":"63fa5b8ff78f81b4c124c81dd6fac1deef4a851a","modified":1662447022902},{"_id":"public/2022/07/18/BookMark/运维/服务器部署---《nginx篇》 --菜鸟小回/index.html","hash":"e2545fbbc1ae6c49c6f8b6b52a01a483f74d629a","modified":1662447022902},{"_id":"public/2022/07/18/BookMark/运维/常用Docker/index.html","hash":"a7c0933b5cb4faf04ca698d18891e70487e7d011","modified":1662447022902},{"_id":"public/2022/07/18/BookMark/运维/服务器部署---《fastDFS篇》 --菜鸟小回/index.html","hash":"7333f5705e5e0a1219c0517115a0e3d55c4f3f17","modified":1662447022902},{"_id":"public/2022/07/18/BookMark/运维/从docker安装到前后端分离项目启动完成（docker安装mysql、nginx；启动jar包）/index.html","hash":"1bf567c6af99c1b2350af0d3d934155232645897","modified":1662447022902},{"_id":"public/2022/07/18/BookMark/运维/内网centos 7安装mysql及问题记录/index.html","hash":"fb58571c8971f1216a9c7dec6233fa536c16e200","modified":1662447022902},{"_id":"public/2022/07/18/BookMark/运维/备份恢复/index.html","hash":"82b29fdfc3217c2c82022553e902f8630ac37328","modified":1662447022902},{"_id":"public/2022/07/18/BookMark/运维/Centos中修改，访问java工程直接通过ip，除去端口号和项目名访问。 --菜鸟小回/index.html","hash":"0563639d9c84ecb55f60854bcc5aec8e7e5cfae5","modified":1662447022902},{"_id":"public/2022/07/18/BookMark/运维/Jenkins脚本集/index.html","hash":"8a93b97adce230f07e122e3ea0fc33867c55e679","modified":1662447022902},{"_id":"public/2022/07/18/BookMark/车车笔记/车车项目启动笔记/index.html","hash":"cdf6ad2c0a66d7e9d90d4a5afc6d44a4c8c9d9ff","modified":1662447022902},{"_id":"public/2022/07/18/BookMark/运维/CentOS7修改密码 --菜鸟小回/index.html","hash":"1bd9f9bea148af996c86de49394e9f41efdd41e9","modified":1662447022902},{"_id":"public/2022/07/18/BookMark/车车笔记/编码风格/index.html","hash":"212b63f4800fccd8b59431ec70fdfd1c3a1b1996","modified":1662447022902},{"_id":"public/2022/07/18/BookMark/车车笔记/停给利二期复盘/index.html","hash":"7dc60a9f27313d401997b59affa48c7d59ebe236","modified":1662447022902},{"_id":"public/2022/07/18/BookMark/车车笔记/Spring Data JPA/index.html","hash":"bd1acd1ea0fbb2cc74c593f6f00b676474aad003","modified":1662447022902},{"_id":"public/2022/07/18/BookMark/车车笔记/web报价接口调用整理/index.html","hash":"fd6ddcb1c7134a95cbd00bfc657329302f8479c7","modified":1662447022902},{"_id":"public/2022/07/18/BookMark/车车笔记/postman/index.html","hash":"22447fe21b5977aa0ad93d599438feb441842699","modified":1662447022902},{"_id":"public/2022/07/18/BookMark/拉勾笔记/记一次手写IOC,AOP实现类spring 功能/index.html","hash":"9c9a0c1654374f3a89bf9bee5938cf5a0726c51b","modified":1662447022902},{"_id":"public/2022/07/18/BookMark/车车笔记/Gradle/index.html","hash":"5df2c9419c5e53c4e24ffb98cbbdf15c3366f607","modified":1662447022902},{"_id":"public/2022/07/18/BookMark/车车笔记/code-generator-persion使用/index.html","hash":"e75944c1060a40231cfb4cff2587f4c33d5abadc","modified":1662447022902},{"_id":"public/2022/07/18/BookMark/安装配置/使用nginx一分钟配置一个文件服务器（附：阿里oss文件服务使用、fastDFS文件服务使用）/index.html","hash":"5e1f045d1d53a43c1401e0e01ea24e7b1904e8ee","modified":1662447022902},{"_id":"public/2022/07/18/BookMark/安装配置/Navicat破解/index.html","hash":"1a5495837d0bfe8c97713edba20b98938efc6f65","modified":1662447022902},{"_id":"public/2022/07/18/BookMark/安装配置/小书匠绑定阿里云oss+阿里云oss图片url永久有效设置--菜鸟小回/index.html","hash":"05f550d0e15f7024d3fda148461983d2832b0d0e","modified":1662447022902},{"_id":"public/2022/07/18/BookMark/安装配置/IDEA2022.1破解教程/index.html","hash":"c9e36bc604be2ec279eb0479ace8d0588d70d6b9","modified":1662447022902},{"_id":"public/2022/07/18/BookMark/安装配置/windows安装mysql5.7/index.html","hash":"3ab62cb183c8809484d603473735e26ae521ec36","modified":1662447022902},{"_id":"public/2022/07/18/BookMark/安装配置/Eclipse+idea修改maven仓库到自定义位置+添加阿里依赖秒下jar包 --菜鸟小回/index.html","hash":"9722338619e617ac4c66008d7788daea3a4b3c2d","modified":1662447022902},{"_id":"public/2022/07/18/BookMark/安装配置/idea+jrebel配置springboot+mybatis plus项目热部署。（含xml无法自动部署 解决方案）/index.html","hash":"cab0aae3e6256eb7f117cd2bc1f2f1a4db705949","modified":1662447022902},{"_id":"public/2022/07/18/BookMark/学习笔记/法务部学习笔记/index.html","hash":"8acb014ecaf34ae8b3152ae82643b9980289eac6","modified":1662447022902},{"_id":"public/2022/07/18/BookMark/安装配置/《重装系统》Windows纯净装机+常用工具（最简单易懂教程）--菜鸟小回/index.html","hash":"91148d22d0da9c2fdb2b996804966e8580d5aebb","modified":1662447022902},{"_id":"public/2022/07/18/BookMark/学习笔记/mes学习笔记/index.html","hash":"218be40ca094c917a0fb534f8c5efe2d9f67c312","modified":1662447022902},{"_id":"public/2022/07/18/BookMark/学习笔记/ssm框架完整pom依赖（附加 redis、fastDFS、阿里短信验证、poi、hadoop） --菜鸟小回/index.html","hash":"477e69efdb00b8664cdda59886b6a8cead7d0c32","modified":1662447022902},{"_id":"public/2022/07/18/BookMark/学习笔记/Java中使用图片验证码 --菜鸟小回/index.html","hash":"48a401a2746f96d3ab960e16d7082f11774c8f31","modified":1662447022902},{"_id":"public/index.html","hash":"5a384e2766b4055a43f7da24dee63b1c6973f445","modified":1662448133365},{"_id":"public/page/2/index.html","hash":"97deba9d9e64008375be4e81f2b247cb3afd9a4b","modified":1662448133365},{"_id":"public/page/3/index.html","hash":"4e8df599192dd1a9c9b285f78fcc9f93bb1b3bbe","modified":1662448133365},{"_id":"public/page/5/index.html","hash":"0c10f59673241f286300b9d1a5083473e7d6a185","modified":1662448133365},{"_id":"public/page/4/index.html","hash":"e6c5dcaf7bac1b6e096a2c155b6d2cbaeee0fee2","modified":1662448133365},{"_id":"public/page/6/index.html","hash":"684f5631b3932494e5fd0557052ab90005976b03","modified":1662448133365},{"_id":"public/page/7/index.html","hash":"99d7d498c76e8515234ac02a66cc0350bc3dbd4b","modified":1662448133365},{"_id":"public/page/8/index.html","hash":"f7c27c60807d51086bf8c34a1231a5537ab2eb87","modified":1662448133365},{"_id":"public/page/9/index.html","hash":"b824cc897fa1993b3c4b9b90a182c200e24d58cb","modified":1662448133365},{"_id":"public/page/10/index.html","hash":"da2cad56a2637f7d0cc009928f02ff7845d20981","modified":1662448133365},{"_id":"public/img/fluid.png","hash":"64b215db2cb3af98fe639e94537cb5209f959c78","modified":1662446638062},{"_id":"public/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1662446638062},{"_id":"public/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1662446638062},{"_id":"public/xml/local-search.xml","hash":"8c96ba6a064705602ce28d096fd7dd9069630a55","modified":1662446638062},{"_id":"public/img/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":1662446638062},{"_id":"public/css/gitalk.css","hash":"a57b3cc8e04a0a4a27aefa07facf5b5e7bca0e76","modified":1662446638062},{"_id":"public/css/highlight.css","hash":"923fab6dedc88bee302659e982f9f75c5ed7d90b","modified":1662446638062},{"_id":"public/css/highlight-dark.css","hash":"923fab6dedc88bee302659e982f9f75c5ed7d90b","modified":1662446638062},{"_id":"public/js/boot.js","hash":"2848f8eb5081a7f0550fbd76dc06d3ff877f1913","modified":1662446638062},{"_id":"public/js/color-schema.js","hash":"ba63f7c3324bc1fdd050a90add9d8faaffc27e07","modified":1662446638062},{"_id":"public/js/events.js","hash":"f05a569a9fd6da2fda69a2cf8e276ba81580faf3","modified":1662446638062},{"_id":"public/js/leancloud.js","hash":"eff77c7a5c399fcaefda48884980571e15243fc9","modified":1662446638062},{"_id":"public/js/img-lazyload.js","hash":"cbdeca434ec4da51f488c821d51b4d23c73294af","modified":1662446638062},{"_id":"public/js/local-search.js","hash":"cebcda5991b6a9ab9307c69542389ce9013f04f7","modified":1662446638062},{"_id":"public/js/plugins.js","hash":"2333494add51e5e1374602a4e81f0be36a05d4c2","modified":1662446638062},{"_id":"public/js/utils.js","hash":"45cc86f099db0a2c36ad49711ce66c2d598a2ab1","modified":1662446638062},{"_id":"public/css/main.css","hash":"7e1021072ccb274cb8692a11ebc4cd9021f07f14","modified":1662446638062},{"_id":"public/img/default.png","hash":"167a12978d80371cf578c8a2e45c24a2eb25b6fb","modified":1662446638062},{"_id":"public/archives/page/11/index.html","hash":"c15d3b384c4a3a0b138039831f3a47d348fcdc50","modified":1662448133365},{"_id":"public/archives/2022/09/page/2/index.html","hash":"9e0d9c27189cc6664118b83fc892f91bf9ee16ae","modified":1662448133365},{"_id":"public/archives/2022/page/11/index.html","hash":"bff9a17948c3b9945f9888a8cf4323645fc06c94","modified":1662448133365},{"_id":"public/archives/2022/09/page/3/index.html","hash":"65b2015a5b605eda66e3f9dd63e91818e41ee9dd","modified":1662448133365},{"_id":"public/tags/Spring-Boot/page/2/index.html","hash":"72a2e39f7d628900c6c85ecf097c9062f65f3169","modified":1662448133365},{"_id":"public/categories/Spring-Boot/page/2/index.html","hash":"765344076a88417a4b1261bcbf90685cd094461e","modified":1662448133365},{"_id":"public/tags/redis/index.html","hash":"08b86d85c65ff09fa8f6b5e3bb6251dabf525c59","modified":1662448133365},{"_id":"public/tags/阿里OSS文件服务/index.html","hash":"14a5d03bb9801e0bea76b89b3f1fd4ffb0718eed","modified":1662448133365},{"_id":"public/tags/自定义注解/index.html","hash":"ba9282c25ca6b149eb912db663b76fdfd17df18d","modified":1662448133365},{"_id":"public/tags/MinIo/index.html","hash":"7918739f578f8408b5a727e5ec5335da11c0381d","modified":1662448133365},{"_id":"public/tags/Spring-Clound/index.html","hash":"dea9b6cac069855f2c1d59a2621e9b03c2345866","modified":1662448133365},{"_id":"public/tags/过滤器/index.html","hash":"814550aa2ec3c668310be4061040564bc96a6fc7","modified":1662448133365},{"_id":"public/tags/阿里短信服务/index.html","hash":"1ae1379d7e2872f4df0b68d90f7f9bb2e178de59","modified":1662448133365},{"_id":"public/tags/拦截器/index.html","hash":"0e18070c85fd636a95abe1dba50f70607bf54eb4","modified":1662448133365},{"_id":"public/tags/Jenkins/index.html","hash":"8f922b5be013d20b47489609ba89eb93a315d029","modified":1662448133365},{"_id":"public/tags/maven/index.html","hash":"cd15cbfb77cb7429f1d2e42c075396115f9ddf01","modified":1662448133365},{"_id":"public/tags/支付宝支付/index.html","hash":"e64d3f5fb19257d145f1837b4941400acff63070","modified":1662448133365},{"_id":"public/tags/RabbitMq/index.html","hash":"46a8cfedb2a0d6d4e9b378fb03d6a069f69b8a83","modified":1662448133365},{"_id":"public/tags/统一结果返回/index.html","hash":"fc345dcfbda1c21f5e13cfd1c2de918963bc152b","modified":1662448133365},{"_id":"public/tags/全局异常处理/index.html","hash":"4b1a528138b523d75a12cc7bbcfa7c35a576f7dc","modified":1662448133365},{"_id":"public/tags/poi/index.html","hash":"eb6e0f8124bc002daf782764205acdf4e6114bd3","modified":1662448133365},{"_id":"public/tags/Excel/index.html","hash":"843b914548e34de579ab03095ff3f1ecb96e7f4a","modified":1662448133365},{"_id":"public/tags/Slf4j/index.html","hash":"56403c9785b6aa3ac1364347454a4b5793e762a1","modified":1662448133365},{"_id":"public/tags/SSM/index.html","hash":"e040570bd88728781c64aa8c16f6e44036624de2","modified":1662448133365},{"_id":"public/tags/logback/index.html","hash":"cf1a0455db0b32fa6ff9dd840c6991d42c045861","modified":1662448133365},{"_id":"public/page/11/index.html","hash":"eae8247ef23d883c6708278b7a3d70f64c2178b4","modified":1662448133365},{"_id":"public/2022/09/05/BookMark/Spring Boot/Spring Boot & Jenkins 实现自动化部署（centos7&windows，涵盖防jenkins杀死的脚本）/index.html","hash":"ec760068dd05e524ecca8f9af2d9c5744e1652cd","modified":1662448133365},{"_id":"public/2022/09/05/BookMark/Spring Boot/Spring Boot & Mybatis Plus代码生成器/index.html","hash":"5889eb6e6ed8aa5eb79be5cce9766ad64844b7e2","modified":1662448133365},{"_id":"public/2022/09/05/BookMark/Spring Boot/SSM项目转Spring Boot项目详细过程（含eclipse转idea注意事项）--菜鸟小回/index.html","hash":"664075e957039074caa7dc3fc75279b59f59cd96","modified":1662448133365},{"_id":"public/2022/09/05/BookMark/Spring Boot/Spring Boot & RabbitMq 延迟消息队列死信队列实现定时任务/index.html","hash":"1c7a7d5fe676db00e734a6ca065a790599318306","modified":1662448133365},{"_id":"public/2022/09/05/BookMark/Spring Boot/Spring Boot & poi 导出Excel表格、Txt到浏览器下载/index.html","hash":"54fe29982724126e32a63d30c9f958f05de49920","modified":1662448133365},{"_id":"public/2022/09/05/BookMark/Spring Boot/Spring Boot & 拦截参数 & 全局异常处理 & 统一结果返回/index.html","hash":"dfe68957c69a6b81fa90bf691e003a9b8e6c7841","modified":1662448133365},{"_id":"public/2022/09/05/BookMark/Spring Boot/Spring Boot & Slf4j & logback 彩色日志打印（功能点：1、分运行环境生成日志文件 2、日志文件目录分类 3、日志文件按日输出）/index.html","hash":"9c40ba6ca9a93ed4197a7ff49dde4ed8da8b9a2d","modified":1662448133365},{"_id":"public/2022/09/05/BookMark/Spring Boot/Spring Boot & 支付宝支付（手机端，web端）/index.html","hash":"0cba97cfe0490e3b0d4ed843e9c81f30f0e0be03","modified":1662448133365},{"_id":"public/2022/09/05/BookMark/Spring Boot/Spring Boot & 阿里OSS文件服务/index.html","hash":"20553809a7659203d753e74a73b474903931d162","modified":1662448133365},{"_id":"public/2022/09/05/BookMark/Spring Boot/Spring Boot & 过滤器 & 拦截器 & 注册/index.html","hash":"84acc3151a9527ad5f1266d97bb48bd8611f91c9","modified":1662448133365},{"_id":"public/2022/09/05/BookMark/Spring Boot/Spring Boot & 阿里短信服务（Redis+短信验证码）/index.html","hash":"94294ae6b3989d0dd187ee160f88a402fd343636","modified":1662448133365},{"_id":"public/2022/09/05/BookMark/Spring Boot/Spring Boot & 自定义注解 实现从配置文件自选择redis db数据源/index.html","hash":"fe974cb2952eb69d96511753bcaed625464a9f0b","modified":1662448133365},{"_id":"public/2022/09/05/BookMark/Spring Boot/Spring Boot与Spring Clound 微服务项目搭建流程/index.html","hash":"a6061b751a70be219aef812702f817c0567747cf","modified":1662448133365},{"_id":"public/2022/09/05/BookMark/Spring Boot/Spring Boot项目maven分环境打包/index.html","hash":"a26366491931dcc41784e8c39caea6d1a5c47870","modified":1662448133365},{"_id":"public/2022/09/05/BookMark/Spring Boot/Spring Boot与Spring Clound项目四层pom以及基础配置文件/index.html","hash":"3c5e0ca96f0620858d3edcac04dca59f3be9bdcb","modified":1662448133365},{"_id":"public/2022/09/05/BookMark/Spring Boot/Spring Boot & MinIo进行分布式文件服务/index.html","hash":"78e4ee21387744cb1f3342f44ecefb976fb9d510","modified":1662448133365}],"Category":[{"name":"Code Demo","_id":"cl7ptszoe0008aba5eihy8pf7"},{"name":"Spring Boot","_id":"cl7ptszon001uaba5g5khbbpr"}],"Data":[],"Page":[{"title":"about.md","date":"2022-09-05T09:09:05.000Z","tags":null,"_content":"\n","source":"about/index.md","raw":"---\ntitle: about.md\ndate: 2022-09-05 17:09:05\ntags:\n---\n\n","updated":"2022-09-05T09:18:50.421Z","path":"about/index.html","comments":1,"layout":"page","_id":"cl7ptszo30000aba56sbhevxa","content":"","site":{"data":{}},"wordcount":0,"excerpt":"","more":""},{"title":"categories","date":"2022-09-05T09:36:38.000Z","type":"tags","_content":"\n","source":"tags/index.md","raw":"---\ntitle: categories\ndate: 2022-09-05 17:36:38\ntype: tags\n---\n\n","updated":"2022-09-05T09:41:55.079Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cl7ptszob0002aba5e6f4f4sg","content":"","site":{"data":{}},"wordcount":0,"excerpt":"","more":""},{"title":"categories","date":"2022-09-05T09:36:38.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2022-09-05 17:36:38\ntype: categories\n---\n","updated":"2022-09-05T09:41:49.403Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cl7ptszod0004aba5hxtf3hx5","content":"","site":{"data":{}},"wordcount":0,"excerpt":"","more":""}],"Post":[{"_content":"\n\n```\n{\n    \"exp\": 1660196705,\n    \"iat\": 1660189505,\n    \"user\": {\n        \"id\": 1,\n        \"principal\": \"admin@internal.seer.com\",\n        \"username\": \"internal-admin\"\n    },\n    \"jti\": \"2cc4b09a-fb25-49c1-a122-124b9f3bd491\",\n    \"client_id\": \"admin-frontend\",\n    \"sub\": \"admin@internal.seer.com\",\n    \"scope\": [\n        \"internal.tenant.setting_competitor\",\n        \"internal.audit_log.query\",\n        \"internal.tenant.create\",\n        \"internal.role\",\n        \"internal.role.create\",\n        \"internal.role.query\",\n        \"internal.tenant.application_trial\",\n        \"internal.tenant.setting_car_brand\",\n        \"internal.tenant.setting_oem_brand\",\n        \"internal.audit_log\",\n        \"internal.tenant.setting_car_model\",\n        \"internal.user\",\n        \"internal.tenant.edit\",\n        \"internal.user.create\",\n        \"internal.user.edit\",\n        \"internal.tenant\",\n        \"internal.tenant.query\",\n        \"internal.user.query\",\n        \"internal.role.edit\"\n    ]\n}\n```\n\n```\n{\n    \"exp\": 1660196762,\n    \"iat\": 1660189562,\n    \"user\": {\n        \"id\": 344,\n        \"principal\": \"liuzz0707@cheche365.com\",\n        \"username\": \"对手随机\"\n    },\n    \"jti\": \"9b2557f6-78ad-45b8-8e8d-2daac2358127\",\n    \"client_id\": \"frontend\",\n    \"sub\": \"liuzz0707@cheche365.com\",\n    \"scope\": [\n        \"underwriting.mine_data\",\n        \"search_condition.sub_area\",\n        \"risk_insured.batch_create\",\n        \"uc.setting.setting_competitor\",\n        \"search_condition.insurance_renewal_flag\",\n        \"risk_insured.create\",\n        \"claim\",\n        \"uc.setting\",\n        \"uc.setting.setting_car_brand\",\n        \"search_condition.sub_third_area\",\n        \"risk.auto_risk\",\n        \"uc.user\",\n        \"underwriting\",\n        \"risk_insured.query\",\n        \"internal.role.create\",\n        \"risk.mine_data\",\n        \"uc\",\n        \"claim.loss_ratio\",\n        \"search_condition.other_vehicle_types\",\n        \"risk\",\n        \"underwriting.insuring_average\",\n        \"search_condition.auto_price\",\n        \"uc.user.edit\",\n        \"risk.car_character\",\n        \"risk_claim.query\",\n        \"risk_claim\",\n        \"risk_insured.batch_query\",\n        \"claim.mine_data\",\n        \"search_condition.passenger_carriage\",\n        \"claim.average_case_compensation\",\n        \"risk.car_brand\",\n        \"claim.accident_frequency\",\n        \"risk_claim.create\",\n        \"underwriting.insuring_quantity\",\n        \"risk_insured.query.detail\",\n        \"underwriting.business_structure\",\n        \"risk.risky_car_model\",\n        \"policy.insuring_scale_rank\",\n        \"risk_claim.query.detail\",\n        \"risk_insured\",\n        \"risk.competitor_analysis\",\n        \"uc.role.query\",\n        \"risk.superior_car_model\",\n        \"search_condition.business_insurance_detail\",\n        \"internal.role.edit\",\n        \"search_condition.auto_age\",\n        \"uc.user.query\",\n        \"uc.user.create\",\n        \"underwriting.insuring_scale\",\n        \"search_condition.auto_type\",\n        \"search_condition.special_vehicle\"\n    ],\n    \"tenant\": {\n        \"id\": 113,\n        \"name\": \"租户0707 设定对手\",\n        \"type\": 1,\n        \"insurance_company_id\": 2005,\n        \"status\": 1\n    }\n}\n\n```\n\n```jsx\ndocker run -tid --name baota -p 180:80 -p 1443:443 -p 1888:8888 -p 888:888 -p 13306:3306 --privileged=true --shm-size=1g --restart always -v ~/wwwroot:/www/wwwroot pch18/baota\n```\n\n","source":"_posts/BookMark/README.md","raw":"\n\n```\n{\n    \"exp\": 1660196705,\n    \"iat\": 1660189505,\n    \"user\": {\n        \"id\": 1,\n        \"principal\": \"admin@internal.seer.com\",\n        \"username\": \"internal-admin\"\n    },\n    \"jti\": \"2cc4b09a-fb25-49c1-a122-124b9f3bd491\",\n    \"client_id\": \"admin-frontend\",\n    \"sub\": \"admin@internal.seer.com\",\n    \"scope\": [\n        \"internal.tenant.setting_competitor\",\n        \"internal.audit_log.query\",\n        \"internal.tenant.create\",\n        \"internal.role\",\n        \"internal.role.create\",\n        \"internal.role.query\",\n        \"internal.tenant.application_trial\",\n        \"internal.tenant.setting_car_brand\",\n        \"internal.tenant.setting_oem_brand\",\n        \"internal.audit_log\",\n        \"internal.tenant.setting_car_model\",\n        \"internal.user\",\n        \"internal.tenant.edit\",\n        \"internal.user.create\",\n        \"internal.user.edit\",\n        \"internal.tenant\",\n        \"internal.tenant.query\",\n        \"internal.user.query\",\n        \"internal.role.edit\"\n    ]\n}\n```\n\n```\n{\n    \"exp\": 1660196762,\n    \"iat\": 1660189562,\n    \"user\": {\n        \"id\": 344,\n        \"principal\": \"liuzz0707@cheche365.com\",\n        \"username\": \"对手随机\"\n    },\n    \"jti\": \"9b2557f6-78ad-45b8-8e8d-2daac2358127\",\n    \"client_id\": \"frontend\",\n    \"sub\": \"liuzz0707@cheche365.com\",\n    \"scope\": [\n        \"underwriting.mine_data\",\n        \"search_condition.sub_area\",\n        \"risk_insured.batch_create\",\n        \"uc.setting.setting_competitor\",\n        \"search_condition.insurance_renewal_flag\",\n        \"risk_insured.create\",\n        \"claim\",\n        \"uc.setting\",\n        \"uc.setting.setting_car_brand\",\n        \"search_condition.sub_third_area\",\n        \"risk.auto_risk\",\n        \"uc.user\",\n        \"underwriting\",\n        \"risk_insured.query\",\n        \"internal.role.create\",\n        \"risk.mine_data\",\n        \"uc\",\n        \"claim.loss_ratio\",\n        \"search_condition.other_vehicle_types\",\n        \"risk\",\n        \"underwriting.insuring_average\",\n        \"search_condition.auto_price\",\n        \"uc.user.edit\",\n        \"risk.car_character\",\n        \"risk_claim.query\",\n        \"risk_claim\",\n        \"risk_insured.batch_query\",\n        \"claim.mine_data\",\n        \"search_condition.passenger_carriage\",\n        \"claim.average_case_compensation\",\n        \"risk.car_brand\",\n        \"claim.accident_frequency\",\n        \"risk_claim.create\",\n        \"underwriting.insuring_quantity\",\n        \"risk_insured.query.detail\",\n        \"underwriting.business_structure\",\n        \"risk.risky_car_model\",\n        \"policy.insuring_scale_rank\",\n        \"risk_claim.query.detail\",\n        \"risk_insured\",\n        \"risk.competitor_analysis\",\n        \"uc.role.query\",\n        \"risk.superior_car_model\",\n        \"search_condition.business_insurance_detail\",\n        \"internal.role.edit\",\n        \"search_condition.auto_age\",\n        \"uc.user.query\",\n        \"uc.user.create\",\n        \"underwriting.insuring_scale\",\n        \"search_condition.auto_type\",\n        \"search_condition.special_vehicle\"\n    ],\n    \"tenant\": {\n        \"id\": 113,\n        \"name\": \"租户0707 设定对手\",\n        \"type\": 1,\n        \"insurance_company_id\": 2005,\n        \"status\": 1\n    }\n}\n\n```\n\n```jsx\ndocker run -tid --name baota -p 180:80 -p 1443:443 -p 1888:8888 -p 888:888 -p 13306:3306 --privileged=true --shm-size=1g --restart always -v ~/wwwroot:/www/wwwroot pch18/baota\n```\n\n","slug":"BookMark/README","published":1,"date":"2022-07-25T05:51:33.833Z","updated":"2022-08-25T06:05:57.889Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cl7ptszo40001aba57icl93n3","content":"<figure class=\"highlight perl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs perl\">&#123;<br>    <span class=\"hljs-string\">&quot;exp&quot;</span>: <span class=\"hljs-number\">1660196705</span>,<br>    <span class=\"hljs-string\">&quot;iat&quot;</span>: <span class=\"hljs-number\">1660189505</span>,<br>    <span class=\"hljs-string\">&quot;user&quot;</span>: &#123;<br>        <span class=\"hljs-string\">&quot;id&quot;</span>: <span class=\"hljs-number\">1</span>,<br>        <span class=\"hljs-string\">&quot;principal&quot;</span>: <span class=\"hljs-string\">&quot;admin@internal.seer.com&quot;</span>,<br>        <span class=\"hljs-string\">&quot;username&quot;</span>: <span class=\"hljs-string\">&quot;internal-admin&quot;</span><br>    &#125;,<br>    <span class=\"hljs-string\">&quot;jti&quot;</span>: <span class=\"hljs-string\">&quot;2cc4b09a-fb25-49c1-a122-124b9f3bd491&quot;</span>,<br>    <span class=\"hljs-string\">&quot;client_id&quot;</span>: <span class=\"hljs-string\">&quot;admin-frontend&quot;</span>,<br>    <span class=\"hljs-string\">&quot;sub&quot;</span>: <span class=\"hljs-string\">&quot;admin@internal.seer.com&quot;</span>,<br>    <span class=\"hljs-string\">&quot;scope&quot;</span>: [<br>        <span class=\"hljs-string\">&quot;internal.tenant.setting_competitor&quot;</span>,<br>        <span class=\"hljs-string\">&quot;internal.audit_log.query&quot;</span>,<br>        <span class=\"hljs-string\">&quot;internal.tenant.create&quot;</span>,<br>        <span class=\"hljs-string\">&quot;internal.role&quot;</span>,<br>        <span class=\"hljs-string\">&quot;internal.role.create&quot;</span>,<br>        <span class=\"hljs-string\">&quot;internal.role.query&quot;</span>,<br>        <span class=\"hljs-string\">&quot;internal.tenant.application_trial&quot;</span>,<br>        <span class=\"hljs-string\">&quot;internal.tenant.setting_car_brand&quot;</span>,<br>        <span class=\"hljs-string\">&quot;internal.tenant.setting_oem_brand&quot;</span>,<br>        <span class=\"hljs-string\">&quot;internal.audit_log&quot;</span>,<br>        <span class=\"hljs-string\">&quot;internal.tenant.setting_car_model&quot;</span>,<br>        <span class=\"hljs-string\">&quot;internal.user&quot;</span>,<br>        <span class=\"hljs-string\">&quot;internal.tenant.edit&quot;</span>,<br>        <span class=\"hljs-string\">&quot;internal.user.create&quot;</span>,<br>        <span class=\"hljs-string\">&quot;internal.user.edit&quot;</span>,<br>        <span class=\"hljs-string\">&quot;internal.tenant&quot;</span>,<br>        <span class=\"hljs-string\">&quot;internal.tenant.query&quot;</span>,<br>        <span class=\"hljs-string\">&quot;internal.user.query&quot;</span>,<br>        <span class=\"hljs-string\">&quot;internal.role.edit&quot;</span><br>    ]<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight perl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs perl\">&#123;<br>    <span class=\"hljs-string\">&quot;exp&quot;</span>: <span class=\"hljs-number\">1660196762</span>,<br>    <span class=\"hljs-string\">&quot;iat&quot;</span>: <span class=\"hljs-number\">1660189562</span>,<br>    <span class=\"hljs-string\">&quot;user&quot;</span>: &#123;<br>        <span class=\"hljs-string\">&quot;id&quot;</span>: <span class=\"hljs-number\">344</span>,<br>        <span class=\"hljs-string\">&quot;principal&quot;</span>: <span class=\"hljs-string\">&quot;liuzz0707@cheche365.com&quot;</span>,<br>        <span class=\"hljs-string\">&quot;username&quot;</span>: <span class=\"hljs-string\">&quot;对手随机&quot;</span><br>    &#125;,<br>    <span class=\"hljs-string\">&quot;jti&quot;</span>: <span class=\"hljs-string\">&quot;9b2557f6-78ad-45b8-8e8d-2daac2358127&quot;</span>,<br>    <span class=\"hljs-string\">&quot;client_id&quot;</span>: <span class=\"hljs-string\">&quot;frontend&quot;</span>,<br>    <span class=\"hljs-string\">&quot;sub&quot;</span>: <span class=\"hljs-string\">&quot;liuzz0707@cheche365.com&quot;</span>,<br>    <span class=\"hljs-string\">&quot;scope&quot;</span>: [<br>        <span class=\"hljs-string\">&quot;underwriting.mine_data&quot;</span>,<br>        <span class=\"hljs-string\">&quot;search_condition.sub_area&quot;</span>,<br>        <span class=\"hljs-string\">&quot;risk_insured.batch_create&quot;</span>,<br>        <span class=\"hljs-string\">&quot;uc.setting.setting_competitor&quot;</span>,<br>        <span class=\"hljs-string\">&quot;search_condition.insurance_renewal_flag&quot;</span>,<br>        <span class=\"hljs-string\">&quot;risk_insured.create&quot;</span>,<br>        <span class=\"hljs-string\">&quot;claim&quot;</span>,<br>        <span class=\"hljs-string\">&quot;uc.setting&quot;</span>,<br>        <span class=\"hljs-string\">&quot;uc.setting.setting_car_brand&quot;</span>,<br>        <span class=\"hljs-string\">&quot;search_condition.sub_third_area&quot;</span>,<br>        <span class=\"hljs-string\">&quot;risk.auto_risk&quot;</span>,<br>        <span class=\"hljs-string\">&quot;uc.user&quot;</span>,<br>        <span class=\"hljs-string\">&quot;underwriting&quot;</span>,<br>        <span class=\"hljs-string\">&quot;risk_insured.query&quot;</span>,<br>        <span class=\"hljs-string\">&quot;internal.role.create&quot;</span>,<br>        <span class=\"hljs-string\">&quot;risk.mine_data&quot;</span>,<br>        <span class=\"hljs-string\">&quot;uc&quot;</span>,<br>        <span class=\"hljs-string\">&quot;claim.loss_ratio&quot;</span>,<br>        <span class=\"hljs-string\">&quot;search_condition.other_vehicle_types&quot;</span>,<br>        <span class=\"hljs-string\">&quot;risk&quot;</span>,<br>        <span class=\"hljs-string\">&quot;underwriting.insuring_average&quot;</span>,<br>        <span class=\"hljs-string\">&quot;search_condition.auto_price&quot;</span>,<br>        <span class=\"hljs-string\">&quot;uc.user.edit&quot;</span>,<br>        <span class=\"hljs-string\">&quot;risk.car_character&quot;</span>,<br>        <span class=\"hljs-string\">&quot;risk_claim.query&quot;</span>,<br>        <span class=\"hljs-string\">&quot;risk_claim&quot;</span>,<br>        <span class=\"hljs-string\">&quot;risk_insured.batch_query&quot;</span>,<br>        <span class=\"hljs-string\">&quot;claim.mine_data&quot;</span>,<br>        <span class=\"hljs-string\">&quot;search_condition.passenger_carriage&quot;</span>,<br>        <span class=\"hljs-string\">&quot;claim.average_case_compensation&quot;</span>,<br>        <span class=\"hljs-string\">&quot;risk.car_brand&quot;</span>,<br>        <span class=\"hljs-string\">&quot;claim.accident_frequency&quot;</span>,<br>        <span class=\"hljs-string\">&quot;risk_claim.create&quot;</span>,<br>        <span class=\"hljs-string\">&quot;underwriting.insuring_quantity&quot;</span>,<br>        <span class=\"hljs-string\">&quot;risk_insured.query.detail&quot;</span>,<br>        <span class=\"hljs-string\">&quot;underwriting.business_structure&quot;</span>,<br>        <span class=\"hljs-string\">&quot;risk.risky_car_model&quot;</span>,<br>        <span class=\"hljs-string\">&quot;policy.insuring_scale_rank&quot;</span>,<br>        <span class=\"hljs-string\">&quot;risk_claim.query.detail&quot;</span>,<br>        <span class=\"hljs-string\">&quot;risk_insured&quot;</span>,<br>        <span class=\"hljs-string\">&quot;risk.competitor_analysis&quot;</span>,<br>        <span class=\"hljs-string\">&quot;uc.role.query&quot;</span>,<br>        <span class=\"hljs-string\">&quot;risk.superior_car_model&quot;</span>,<br>        <span class=\"hljs-string\">&quot;search_condition.business_insurance_detail&quot;</span>,<br>        <span class=\"hljs-string\">&quot;internal.role.edit&quot;</span>,<br>        <span class=\"hljs-string\">&quot;search_condition.auto_age&quot;</span>,<br>        <span class=\"hljs-string\">&quot;uc.user.query&quot;</span>,<br>        <span class=\"hljs-string\">&quot;uc.user.create&quot;</span>,<br>        <span class=\"hljs-string\">&quot;underwriting.insuring_scale&quot;</span>,<br>        <span class=\"hljs-string\">&quot;search_condition.auto_type&quot;</span>,<br>        <span class=\"hljs-string\">&quot;search_condition.special_vehicle&quot;</span><br>    ],<br>    <span class=\"hljs-string\">&quot;tenant&quot;</span>: &#123;<br>        <span class=\"hljs-string\">&quot;id&quot;</span>: <span class=\"hljs-number\">113</span>,<br>        <span class=\"hljs-string\">&quot;name&quot;</span>: <span class=\"hljs-string\">&quot;租户0707 设定对手&quot;</span>,<br>        <span class=\"hljs-string\">&quot;type&quot;</span>: <span class=\"hljs-number\">1</span>,<br>        <span class=\"hljs-string\">&quot;insurance_company_id&quot;</span>: <span class=\"hljs-number\">2005</span>,<br>        <span class=\"hljs-string\">&quot;status&quot;</span>: <span class=\"hljs-number\">1</span><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs jsx\">docker run -tid --name baota -p <span class=\"hljs-number\">180</span>:<span class=\"hljs-number\">80</span> -p <span class=\"hljs-number\">1443</span>:<span class=\"hljs-number\">443</span> -p <span class=\"hljs-number\">1888</span>:<span class=\"hljs-number\">8888</span> -p <span class=\"hljs-number\">888</span>:<span class=\"hljs-number\">888</span> -p <span class=\"hljs-number\">13306</span>:<span class=\"hljs-number\">3306</span> --privileged=<span class=\"hljs-literal\">true</span> --shm-size=1g --restart always -v ~<span class=\"hljs-regexp\">/wwwroot:/</span>www/wwwroot pch18/baota<br></code></pre></td></tr></table></figure>\n\n","site":{"data":{}},"wordcount":3717,"excerpt":"","more":"<figure class=\"highlight perl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs perl\">&#123;<br>    <span class=\"hljs-string\">&quot;exp&quot;</span>: <span class=\"hljs-number\">1660196705</span>,<br>    <span class=\"hljs-string\">&quot;iat&quot;</span>: <span class=\"hljs-number\">1660189505</span>,<br>    <span class=\"hljs-string\">&quot;user&quot;</span>: &#123;<br>        <span class=\"hljs-string\">&quot;id&quot;</span>: <span class=\"hljs-number\">1</span>,<br>        <span class=\"hljs-string\">&quot;principal&quot;</span>: <span class=\"hljs-string\">&quot;admin@internal.seer.com&quot;</span>,<br>        <span class=\"hljs-string\">&quot;username&quot;</span>: <span class=\"hljs-string\">&quot;internal-admin&quot;</span><br>    &#125;,<br>    <span class=\"hljs-string\">&quot;jti&quot;</span>: <span class=\"hljs-string\">&quot;2cc4b09a-fb25-49c1-a122-124b9f3bd491&quot;</span>,<br>    <span class=\"hljs-string\">&quot;client_id&quot;</span>: <span class=\"hljs-string\">&quot;admin-frontend&quot;</span>,<br>    <span class=\"hljs-string\">&quot;sub&quot;</span>: <span class=\"hljs-string\">&quot;admin@internal.seer.com&quot;</span>,<br>    <span class=\"hljs-string\">&quot;scope&quot;</span>: [<br>        <span class=\"hljs-string\">&quot;internal.tenant.setting_competitor&quot;</span>,<br>        <span class=\"hljs-string\">&quot;internal.audit_log.query&quot;</span>,<br>        <span class=\"hljs-string\">&quot;internal.tenant.create&quot;</span>,<br>        <span class=\"hljs-string\">&quot;internal.role&quot;</span>,<br>        <span class=\"hljs-string\">&quot;internal.role.create&quot;</span>,<br>        <span class=\"hljs-string\">&quot;internal.role.query&quot;</span>,<br>        <span class=\"hljs-string\">&quot;internal.tenant.application_trial&quot;</span>,<br>        <span class=\"hljs-string\">&quot;internal.tenant.setting_car_brand&quot;</span>,<br>        <span class=\"hljs-string\">&quot;internal.tenant.setting_oem_brand&quot;</span>,<br>        <span class=\"hljs-string\">&quot;internal.audit_log&quot;</span>,<br>        <span class=\"hljs-string\">&quot;internal.tenant.setting_car_model&quot;</span>,<br>        <span class=\"hljs-string\">&quot;internal.user&quot;</span>,<br>        <span class=\"hljs-string\">&quot;internal.tenant.edit&quot;</span>,<br>        <span class=\"hljs-string\">&quot;internal.user.create&quot;</span>,<br>        <span class=\"hljs-string\">&quot;internal.user.edit&quot;</span>,<br>        <span class=\"hljs-string\">&quot;internal.tenant&quot;</span>,<br>        <span class=\"hljs-string\">&quot;internal.tenant.query&quot;</span>,<br>        <span class=\"hljs-string\">&quot;internal.user.query&quot;</span>,<br>        <span class=\"hljs-string\">&quot;internal.role.edit&quot;</span><br>    ]<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight perl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs perl\">&#123;<br>    <span class=\"hljs-string\">&quot;exp&quot;</span>: <span class=\"hljs-number\">1660196762</span>,<br>    <span class=\"hljs-string\">&quot;iat&quot;</span>: <span class=\"hljs-number\">1660189562</span>,<br>    <span class=\"hljs-string\">&quot;user&quot;</span>: &#123;<br>        <span class=\"hljs-string\">&quot;id&quot;</span>: <span class=\"hljs-number\">344</span>,<br>        <span class=\"hljs-string\">&quot;principal&quot;</span>: <span class=\"hljs-string\">&quot;liuzz0707@cheche365.com&quot;</span>,<br>        <span class=\"hljs-string\">&quot;username&quot;</span>: <span class=\"hljs-string\">&quot;对手随机&quot;</span><br>    &#125;,<br>    <span class=\"hljs-string\">&quot;jti&quot;</span>: <span class=\"hljs-string\">&quot;9b2557f6-78ad-45b8-8e8d-2daac2358127&quot;</span>,<br>    <span class=\"hljs-string\">&quot;client_id&quot;</span>: <span class=\"hljs-string\">&quot;frontend&quot;</span>,<br>    <span class=\"hljs-string\">&quot;sub&quot;</span>: <span class=\"hljs-string\">&quot;liuzz0707@cheche365.com&quot;</span>,<br>    <span class=\"hljs-string\">&quot;scope&quot;</span>: [<br>        <span class=\"hljs-string\">&quot;underwriting.mine_data&quot;</span>,<br>        <span class=\"hljs-string\">&quot;search_condition.sub_area&quot;</span>,<br>        <span class=\"hljs-string\">&quot;risk_insured.batch_create&quot;</span>,<br>        <span class=\"hljs-string\">&quot;uc.setting.setting_competitor&quot;</span>,<br>        <span class=\"hljs-string\">&quot;search_condition.insurance_renewal_flag&quot;</span>,<br>        <span class=\"hljs-string\">&quot;risk_insured.create&quot;</span>,<br>        <span class=\"hljs-string\">&quot;claim&quot;</span>,<br>        <span class=\"hljs-string\">&quot;uc.setting&quot;</span>,<br>        <span class=\"hljs-string\">&quot;uc.setting.setting_car_brand&quot;</span>,<br>        <span class=\"hljs-string\">&quot;search_condition.sub_third_area&quot;</span>,<br>        <span class=\"hljs-string\">&quot;risk.auto_risk&quot;</span>,<br>        <span class=\"hljs-string\">&quot;uc.user&quot;</span>,<br>        <span class=\"hljs-string\">&quot;underwriting&quot;</span>,<br>        <span class=\"hljs-string\">&quot;risk_insured.query&quot;</span>,<br>        <span class=\"hljs-string\">&quot;internal.role.create&quot;</span>,<br>        <span class=\"hljs-string\">&quot;risk.mine_data&quot;</span>,<br>        <span class=\"hljs-string\">&quot;uc&quot;</span>,<br>        <span class=\"hljs-string\">&quot;claim.loss_ratio&quot;</span>,<br>        <span class=\"hljs-string\">&quot;search_condition.other_vehicle_types&quot;</span>,<br>        <span class=\"hljs-string\">&quot;risk&quot;</span>,<br>        <span class=\"hljs-string\">&quot;underwriting.insuring_average&quot;</span>,<br>        <span class=\"hljs-string\">&quot;search_condition.auto_price&quot;</span>,<br>        <span class=\"hljs-string\">&quot;uc.user.edit&quot;</span>,<br>        <span class=\"hljs-string\">&quot;risk.car_character&quot;</span>,<br>        <span class=\"hljs-string\">&quot;risk_claim.query&quot;</span>,<br>        <span class=\"hljs-string\">&quot;risk_claim&quot;</span>,<br>        <span class=\"hljs-string\">&quot;risk_insured.batch_query&quot;</span>,<br>        <span class=\"hljs-string\">&quot;claim.mine_data&quot;</span>,<br>        <span class=\"hljs-string\">&quot;search_condition.passenger_carriage&quot;</span>,<br>        <span class=\"hljs-string\">&quot;claim.average_case_compensation&quot;</span>,<br>        <span class=\"hljs-string\">&quot;risk.car_brand&quot;</span>,<br>        <span class=\"hljs-string\">&quot;claim.accident_frequency&quot;</span>,<br>        <span class=\"hljs-string\">&quot;risk_claim.create&quot;</span>,<br>        <span class=\"hljs-string\">&quot;underwriting.insuring_quantity&quot;</span>,<br>        <span class=\"hljs-string\">&quot;risk_insured.query.detail&quot;</span>,<br>        <span class=\"hljs-string\">&quot;underwriting.business_structure&quot;</span>,<br>        <span class=\"hljs-string\">&quot;risk.risky_car_model&quot;</span>,<br>        <span class=\"hljs-string\">&quot;policy.insuring_scale_rank&quot;</span>,<br>        <span class=\"hljs-string\">&quot;risk_claim.query.detail&quot;</span>,<br>        <span class=\"hljs-string\">&quot;risk_insured&quot;</span>,<br>        <span class=\"hljs-string\">&quot;risk.competitor_analysis&quot;</span>,<br>        <span class=\"hljs-string\">&quot;uc.role.query&quot;</span>,<br>        <span class=\"hljs-string\">&quot;risk.superior_car_model&quot;</span>,<br>        <span class=\"hljs-string\">&quot;search_condition.business_insurance_detail&quot;</span>,<br>        <span class=\"hljs-string\">&quot;internal.role.edit&quot;</span>,<br>        <span class=\"hljs-string\">&quot;search_condition.auto_age&quot;</span>,<br>        <span class=\"hljs-string\">&quot;uc.user.query&quot;</span>,<br>        <span class=\"hljs-string\">&quot;uc.user.create&quot;</span>,<br>        <span class=\"hljs-string\">&quot;underwriting.insuring_scale&quot;</span>,<br>        <span class=\"hljs-string\">&quot;search_condition.auto_type&quot;</span>,<br>        <span class=\"hljs-string\">&quot;search_condition.special_vehicle&quot;</span><br>    ],<br>    <span class=\"hljs-string\">&quot;tenant&quot;</span>: &#123;<br>        <span class=\"hljs-string\">&quot;id&quot;</span>: <span class=\"hljs-number\">113</span>,<br>        <span class=\"hljs-string\">&quot;name&quot;</span>: <span class=\"hljs-string\">&quot;租户0707 设定对手&quot;</span>,<br>        <span class=\"hljs-string\">&quot;type&quot;</span>: <span class=\"hljs-number\">1</span>,<br>        <span class=\"hljs-string\">&quot;insurance_company_id&quot;</span>: <span class=\"hljs-number\">2005</span>,<br>        <span class=\"hljs-string\">&quot;status&quot;</span>: <span class=\"hljs-number\">1</span><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs jsx\">docker run -tid --name baota -p <span class=\"hljs-number\">180</span>:<span class=\"hljs-number\">80</span> -p <span class=\"hljs-number\">1443</span>:<span class=\"hljs-number\">443</span> -p <span class=\"hljs-number\">1888</span>:<span class=\"hljs-number\">8888</span> -p <span class=\"hljs-number\">888</span>:<span class=\"hljs-number\">888</span> -p <span class=\"hljs-number\">13306</span>:<span class=\"hljs-number\">3306</span> --privileged=<span class=\"hljs-literal\">true</span> --shm-size=1g --restart always -v ~<span class=\"hljs-regexp\">/wwwroot:/</span>www/wwwroot pch18/baota<br></code></pre></td></tr></table></figure>\n\n"},{"_content":"{\"name\":\"picgo-plugins\",\"description\":\"picgo-plugins\",\"repository\":\"https://github.com/PicGo/PicGo-Core\",\"license\":\"MIT\"}","source":"_posts/BookMark/package.json","raw":"{\"name\":\"picgo-plugins\",\"description\":\"picgo-plugins\",\"repository\":\"https://github.com/PicGo/PicGo-Core\",\"license\":\"MIT\"}","slug":"BookMark/package","published":1,"date":"2022-07-25T09:52:53.138Z","updated":"2022-07-25T09:52:53.138Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cl7ptszoc0003aba5gti0hr8s","content":"{\"name\":\"picgo-plugins\",\"description\":\"picgo-plugins\",\"repository\":\"https://github.com/PicGo/PicGo-Core\",\"license\":\"MIT\"}","site":{"data":{}},"wordcount":121,"excerpt":"","more":"{\"name\":\"picgo-plugins\",\"description\":\"picgo-plugins\",\"repository\":\"https://github.com/PicGo/PicGo-Core\",\"license\":\"MIT\"}"},{"_content":"{\n  \"picBed\": {\n    \"uploader\": \"tcyun\",\n    \"tcyun\": {\n      \"secretId\": \"AKIDAKLJ8r5r8E74vdrfv0y29FBXZWIAtRyM\",\n      \"secretKey\": \"Qkwyqy0tfEg09A0eFB0fBWgfT5X4axBE\",\n      \"bucket\": \"img-1256282866\",\n      \"appId\": \"1256282866\",\n      \"area\": \"ap-beijing\",\n      \"path\": \"\",\n      \"customUrl\": \"\",\n      \"version\": \"v5\"\n    }\n  },\n  \"picgoPlugins\": {\n    \"picgo-plugin-minio\": true\n  }\n}","source":"_posts/BookMark/config.json","raw":"{\n  \"picBed\": {\n    \"uploader\": \"tcyun\",\n    \"tcyun\": {\n      \"secretId\": \"AKIDAKLJ8r5r8E74vdrfv0y29FBXZWIAtRyM\",\n      \"secretKey\": \"Qkwyqy0tfEg09A0eFB0fBWgfT5X4axBE\",\n      \"bucket\": \"img-1256282866\",\n      \"appId\": \"1256282866\",\n      \"area\": \"ap-beijing\",\n      \"path\": \"\",\n      \"customUrl\": \"\",\n      \"version\": \"v5\"\n    }\n  },\n  \"picgoPlugins\": {\n    \"picgo-plugin-minio\": true\n  }\n}","slug":"BookMark/config","published":1,"date":"2022-07-25T09:42:27.000Z","updated":"2022-09-06T03:53:51.993Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cl7ptszod0005aba57xw6fx2j","content":"{\"picBed\":{\"uploader\":\"tcyun\",\"tcyun\":{\"secretId\":\"AKIDAKLJ8r5r8E74vdrfv0y29FBXZWIAtRyM\",\"secretKey\":\"Qkwyqy0tfEg09A0eFB0fBWgfT5X4axBE\",\"bucket\":\"img-1256282866\",\"appId\":\"1256282866\",\"area\":\"ap-beijing\",\"path\":\"\",\"customUrl\":\"\",\"version\":\"v5\"}},\"picgoPlugins\":{\"picgo-plugin-minio\":true}}","site":{"data":{}},"wordcount":288,"excerpt":"","more":"{\"picBed\":{\"uploader\":\"tcyun\",\"tcyun\":{\"secretId\":\"AKIDAKLJ8r5r8E74vdrfv0y29FBXZWIAtRyM\",\"secretKey\":\"Qkwyqy0tfEg09A0eFB0fBWgfT5X4axBE\",\"bucket\":\"img-1256282866\",\"appId\":\"1256282866\",\"area\":\"ap-beijing\",\"path\":\"\",\"customUrl\":\"\",\"version\":\"v5\"}},\"picgoPlugins\":{\"picgo-plugin-minio\":true}}"},{"title":"Hutool工具类","date":"2022-09-05T09:09:05.000Z","category_bar":true,"_content":"# Hutool\n\n整理部分常用Hutool工具类，简化代码同时保持代码风格相似；\n\n官网：https://www.hutool.cn/\n官网API：https://apidoc.gitee.com/dromara/hutool/\n\n```\npackage com.hbq.codedemopersion.common.controller.test;\n\n@Slf4j\npublic class HutoolTest {\n    public static void main(String[] args) {\n        log.info(\"-------------【新建】------------\");\n        List<Integer> l1 = ListUtil.of(1, 2);\n        log.info(\"新建list并赋值:{}\", l1);\n        log.info(\"\");\n\n        log.info(\"-------------【判空】------------\");\n        String s = null;\n        List list = null;\n        Map map = null;\n        Integer code = null;\n\n        boolean b1 = StrUtil.isEmpty(s);\n        log.info(\"字符串判空:{}\", b1);\n        boolean b2 = CollectionUtil.isEmpty(list);\n        log.info(\"集合判空:{}\", b2);\n        boolean b3 = ObjectUtil.isEmpty(map);\n        log.info(\"对象判空:{}\", b3);\n        Integer i1 = ObjectUtil.defaultIfNull(code, 2);\n        log.info(\"如果为空替换为默认值:{}\", i1);\n        log.info(\"\");\n\n        log.info(\"-------------【复制】------------\");\n        F hui = F.builder().name(\"HUI\").age(24).build();\n        F xue = new F();\n        BeanUtil.copyProperties(hui, xue);\n        log.info(\"hui->xue:{}\", xue);\n        //集合中对象复制\n        List<F> huis = ListUtil.of(hui);\n        List<F> newHuis = BeanUtil.copyToList(huis, F.class);\n        log.info(\"huis->newHuis:{}\", newHuis);\n        log.info(\"\");\n\n        log.info(\"-------------【时间】------------\");\n        DateTime t = DateUtil.date();\n        String s1 = DateUtil.format(t, DatePattern.NORM_DATE_PATTERN);\n        log.info(\"DateTime->String:{}\", s1);\n        DateTime t1 = DateUtil.parse(\"2021-11-10 12:59:59\", DatePattern.NORM_DATE_PATTERN);\n        log.info(\"String->DateTime:{}\", t1);\n        int c1 = DateUtil.compare(t, t1, DatePattern.NORM_DATE_PATTERN);\n        log.info(\"按照指定格式对比两个时间t-t1：{}\", c1);\n        DateTime t2 = DateUtil.beginOfDay(t);\n        DateTime t3 = DateUtil.endOfDay(t).offset(DateField.MILLISECOND, -999);\n        log.info(\"每天开始时间：{}，每天结束时间（注意存入数据库应左偏以免毫秒大于500进位）：{}\", t2, t3);\n        boolean b = DateUtil.isSameDay(DateUtil.date(), DateUtil.endOfMonth(DateUtil.date()));\n        log.info(\"今天是否为本月最后一天：{}\", b);\n        List<String> betweenDates = getBetweenDates(null, DateUtil.parse(\"2022-04-01 12:59:59\", DatePattern.NORM_DATE_PATTERN), new Date(), new ArrayList<>(10));\n        log.info(\"从2022-04-01到当前时间的日期列表：{}\", betweenDates);\n        log.info(\"\");\n\n        log.info(\"-------------【转换】------------\");\n        Long l = Convert.toLong(1);\n        log.info(\"Object->Long：{}\", l);\n        Map<String, Object> params = new HashMap<>(8) {{\n            put(\"name\", \"HUI\");\n            put(\"plate_type\", 1);\n        }};\n        F mapF = BeanUtil.toBeanIgnoreCase(params, F.class, true);\n        log.info(\"map转实体{}\", mapF);\n        log.info(\"实体转路径参数：{}\", HttpUtil.toParams(params));\n        log.info(\"实体转map参数：{}\", Convert.toMap(String.class, String.class, mapF));\n        log.info(\"\");\n\n        log.info(\"-------------【正则校验】------------\");\n        boolean m1 = ReUtil.isMatch(\"^142000.*\", \"142000123456\");\n        log.info(\"正则校验筛142000123456是否是142000开头{}\", m1);\n        log.info(\"\");\n\n        log.info(\"-------------【file】------------\");\n        String context = \"132456\";\n        //保存文件到本地\n        String fileName = String.format(\"%s.json\", IdUtil.simpleUUID()\n                + \"-\" + LocalDateTimeUtil.format(LocalDateTime.now(), DatePattern.PURE_DATETIME_PATTERN));\n        File file = FileUtil.file(\"./\", fileName);\n        FileUtil.writeUtf8String(context, file);\n        log.info(\"写入字符串到{}文件中！文件类型：{}\", file.getPath(), FileUtil.getMimeType(file.getName()));\n        log.info(\"\");\n\n\n        log.info(\"-------------【HTTP】------------\");\n        String url = \"https://common.service.cf/file/random/love\";\n        String host = UrlBuilder.ofHttp(url).getHost();\n        log.info(\"获取host:{}\", host);\n        String imgUrl = HttpUtil.get(url);\n        log.info(\"HTTP GET Result:{}\", imgUrl);\n\n        //构建请求body\n        JSONObject body = new JSONObject();\n        body.set(\"bucketName\", \"love\");\n        //构建请求url\n        String fileListUrl = UrlBuilder.create()\n                .setScheme(\"https\") //设置协议\n                .setHost(host)  //设置主机\n                .setPath(UrlPath.of(\"/file/list\", StandardCharsets.UTF_8)) //设置路径\n                .addQuery(\"token\", \"ognFF5W5JQiXx40TVPIKegfy8JLY\")  //添加参数\n                .build();\n        String postResult = HttpUtil.post(fileListUrl, body);\n        log.info(\"HTTP POST URL:{} postResult:{}\", fileListUrl, postResult);\n        log.info(\"\");\n\n        log.info(\"-------------【http file】------------\");\n        String fileUrl1 = \"https://alist.huijia.cf/d/hui/config/linux/alist-config.json\";\n        String fileUrl2 = \"https://alist.huijia.cf/d/hui/config/linux/backup-ali.sh\";\n        File httpFile1 = HttpUtil.downloadFileFromUrl(fileUrl1, FileUtil.mkdir(IdWorker.getId() + File.separator), 10000);\n        log.info(\"从url1下载文件{}\", httpFile1.getName());\n        File httpFile2 = HttpUtil.downloadFileFromUrl(fileUrl2, FileUtil.file(\"./\"), 10000);\n        log.info(\"从url2下载文件{}\", httpFile2.getName());\n        File zip = ZipUtil.zip(FileUtil.file(\"./test.zip\"), false, List.of(httpFile1, httpFile2).toArray(File[]::new));\n        log.info(\"压缩文件，file1和file2：{}\", zip.getName());\n        //FileUtil.del(zip);\n    }\n\n    /**\n     * 递归获取从开始时间到结束时间的所有日期\n     *\n     * @param nowDate     当前日期，初始为null\n     * @param startDate   开始日期\n     * @param endDate     结束日期\n     * @param dateStrList 返回的日期列表\n     * @return 返回的日期列表\n     */\n    private static List<String> getBetweenDates(Date nowDate, Date startDate, Date endDate, List<String> dateStrList) {\n        nowDate = ObjectUtil.defaultIfNull(nowDate, startDate);\n        if (DateUtil.isIn(nowDate, startDate, endDate)) {\n            String format = DateUtil.format(nowDate, DatePattern.NORM_DATE_PATTERN);\n            dateStrList.add(format);\n            return getBetweenDates(DateUtil.offsetDay(nowDate, 1), startDate, endDate, dateStrList);\n        } else {\n            return dateStrList;\n        }\n    }\n}\n```\n\n+ 测试结果\n\n  ![image-20220720181405813](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720181405813.png)\n\n![image-20220720181631750](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720181631750.png)\n\n```\n//LocalDate\nu.getClaimDate().compareTo(LocalDate.now().minusYears(1)) >= 0\n```\n","source":"_posts/BookMark/Code Demo/Hutool.md","raw":"---\ntitle: Hutool工具类\ndate: 2022-09-05 17:09:05\ncategory_bar: true\ncategories: Code Demo\ntags:\n- Hutool\n---\n# Hutool\n\n整理部分常用Hutool工具类，简化代码同时保持代码风格相似；\n\n官网：https://www.hutool.cn/\n官网API：https://apidoc.gitee.com/dromara/hutool/\n\n```\npackage com.hbq.codedemopersion.common.controller.test;\n\n@Slf4j\npublic class HutoolTest {\n    public static void main(String[] args) {\n        log.info(\"-------------【新建】------------\");\n        List<Integer> l1 = ListUtil.of(1, 2);\n        log.info(\"新建list并赋值:{}\", l1);\n        log.info(\"\");\n\n        log.info(\"-------------【判空】------------\");\n        String s = null;\n        List list = null;\n        Map map = null;\n        Integer code = null;\n\n        boolean b1 = StrUtil.isEmpty(s);\n        log.info(\"字符串判空:{}\", b1);\n        boolean b2 = CollectionUtil.isEmpty(list);\n        log.info(\"集合判空:{}\", b2);\n        boolean b3 = ObjectUtil.isEmpty(map);\n        log.info(\"对象判空:{}\", b3);\n        Integer i1 = ObjectUtil.defaultIfNull(code, 2);\n        log.info(\"如果为空替换为默认值:{}\", i1);\n        log.info(\"\");\n\n        log.info(\"-------------【复制】------------\");\n        F hui = F.builder().name(\"HUI\").age(24).build();\n        F xue = new F();\n        BeanUtil.copyProperties(hui, xue);\n        log.info(\"hui->xue:{}\", xue);\n        //集合中对象复制\n        List<F> huis = ListUtil.of(hui);\n        List<F> newHuis = BeanUtil.copyToList(huis, F.class);\n        log.info(\"huis->newHuis:{}\", newHuis);\n        log.info(\"\");\n\n        log.info(\"-------------【时间】------------\");\n        DateTime t = DateUtil.date();\n        String s1 = DateUtil.format(t, DatePattern.NORM_DATE_PATTERN);\n        log.info(\"DateTime->String:{}\", s1);\n        DateTime t1 = DateUtil.parse(\"2021-11-10 12:59:59\", DatePattern.NORM_DATE_PATTERN);\n        log.info(\"String->DateTime:{}\", t1);\n        int c1 = DateUtil.compare(t, t1, DatePattern.NORM_DATE_PATTERN);\n        log.info(\"按照指定格式对比两个时间t-t1：{}\", c1);\n        DateTime t2 = DateUtil.beginOfDay(t);\n        DateTime t3 = DateUtil.endOfDay(t).offset(DateField.MILLISECOND, -999);\n        log.info(\"每天开始时间：{}，每天结束时间（注意存入数据库应左偏以免毫秒大于500进位）：{}\", t2, t3);\n        boolean b = DateUtil.isSameDay(DateUtil.date(), DateUtil.endOfMonth(DateUtil.date()));\n        log.info(\"今天是否为本月最后一天：{}\", b);\n        List<String> betweenDates = getBetweenDates(null, DateUtil.parse(\"2022-04-01 12:59:59\", DatePattern.NORM_DATE_PATTERN), new Date(), new ArrayList<>(10));\n        log.info(\"从2022-04-01到当前时间的日期列表：{}\", betweenDates);\n        log.info(\"\");\n\n        log.info(\"-------------【转换】------------\");\n        Long l = Convert.toLong(1);\n        log.info(\"Object->Long：{}\", l);\n        Map<String, Object> params = new HashMap<>(8) {{\n            put(\"name\", \"HUI\");\n            put(\"plate_type\", 1);\n        }};\n        F mapF = BeanUtil.toBeanIgnoreCase(params, F.class, true);\n        log.info(\"map转实体{}\", mapF);\n        log.info(\"实体转路径参数：{}\", HttpUtil.toParams(params));\n        log.info(\"实体转map参数：{}\", Convert.toMap(String.class, String.class, mapF));\n        log.info(\"\");\n\n        log.info(\"-------------【正则校验】------------\");\n        boolean m1 = ReUtil.isMatch(\"^142000.*\", \"142000123456\");\n        log.info(\"正则校验筛142000123456是否是142000开头{}\", m1);\n        log.info(\"\");\n\n        log.info(\"-------------【file】------------\");\n        String context = \"132456\";\n        //保存文件到本地\n        String fileName = String.format(\"%s.json\", IdUtil.simpleUUID()\n                + \"-\" + LocalDateTimeUtil.format(LocalDateTime.now(), DatePattern.PURE_DATETIME_PATTERN));\n        File file = FileUtil.file(\"./\", fileName);\n        FileUtil.writeUtf8String(context, file);\n        log.info(\"写入字符串到{}文件中！文件类型：{}\", file.getPath(), FileUtil.getMimeType(file.getName()));\n        log.info(\"\");\n\n\n        log.info(\"-------------【HTTP】------------\");\n        String url = \"https://common.service.cf/file/random/love\";\n        String host = UrlBuilder.ofHttp(url).getHost();\n        log.info(\"获取host:{}\", host);\n        String imgUrl = HttpUtil.get(url);\n        log.info(\"HTTP GET Result:{}\", imgUrl);\n\n        //构建请求body\n        JSONObject body = new JSONObject();\n        body.set(\"bucketName\", \"love\");\n        //构建请求url\n        String fileListUrl = UrlBuilder.create()\n                .setScheme(\"https\") //设置协议\n                .setHost(host)  //设置主机\n                .setPath(UrlPath.of(\"/file/list\", StandardCharsets.UTF_8)) //设置路径\n                .addQuery(\"token\", \"ognFF5W5JQiXx40TVPIKegfy8JLY\")  //添加参数\n                .build();\n        String postResult = HttpUtil.post(fileListUrl, body);\n        log.info(\"HTTP POST URL:{} postResult:{}\", fileListUrl, postResult);\n        log.info(\"\");\n\n        log.info(\"-------------【http file】------------\");\n        String fileUrl1 = \"https://alist.huijia.cf/d/hui/config/linux/alist-config.json\";\n        String fileUrl2 = \"https://alist.huijia.cf/d/hui/config/linux/backup-ali.sh\";\n        File httpFile1 = HttpUtil.downloadFileFromUrl(fileUrl1, FileUtil.mkdir(IdWorker.getId() + File.separator), 10000);\n        log.info(\"从url1下载文件{}\", httpFile1.getName());\n        File httpFile2 = HttpUtil.downloadFileFromUrl(fileUrl2, FileUtil.file(\"./\"), 10000);\n        log.info(\"从url2下载文件{}\", httpFile2.getName());\n        File zip = ZipUtil.zip(FileUtil.file(\"./test.zip\"), false, List.of(httpFile1, httpFile2).toArray(File[]::new));\n        log.info(\"压缩文件，file1和file2：{}\", zip.getName());\n        //FileUtil.del(zip);\n    }\n\n    /**\n     * 递归获取从开始时间到结束时间的所有日期\n     *\n     * @param nowDate     当前日期，初始为null\n     * @param startDate   开始日期\n     * @param endDate     结束日期\n     * @param dateStrList 返回的日期列表\n     * @return 返回的日期列表\n     */\n    private static List<String> getBetweenDates(Date nowDate, Date startDate, Date endDate, List<String> dateStrList) {\n        nowDate = ObjectUtil.defaultIfNull(nowDate, startDate);\n        if (DateUtil.isIn(nowDate, startDate, endDate)) {\n            String format = DateUtil.format(nowDate, DatePattern.NORM_DATE_PATTERN);\n            dateStrList.add(format);\n            return getBetweenDates(DateUtil.offsetDay(nowDate, 1), startDate, endDate, dateStrList);\n        } else {\n            return dateStrList;\n        }\n    }\n}\n```\n\n+ 测试结果\n\n  ![image-20220720181405813](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720181405813.png)\n\n![image-20220720181631750](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720181631750.png)\n\n```\n//LocalDate\nu.getClaimDate().compareTo(LocalDate.now().minusYears(1)) >= 0\n```\n","slug":"BookMark/Code Demo/Hutool","published":1,"updated":"2022-09-06T06:34:37.964Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl7ptszod0006aba58vgy075z","content":"<h1><span id=\"hutool\">Hutool</span></h1><p>整理部分常用Hutool工具类，简化代码同时保持代码风格相似；</p>\n<p>官网：<a href=\"https://www.hutool.cn/\">https://www.hutool.cn/</a><br>官网API：<a href=\"https://apidoc.gitee.com/dromara/hutool/\">https://apidoc.gitee.com/dromara/hutool/</a></p>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\">package com.hbq.codedemopersion.common.controller.test;<br><br>@Slf4j<br>public <span class=\"hljs-keyword\">class</span> HutoolTest &#123;<br>    public static void main(String<span class=\"hljs-literal\">[]</span> args) &#123;<br>        log.info(<span class=\"hljs-string\">&quot;-------------【新建】------------&quot;</span>);<br>        List&lt;Integer&gt; l1 = <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">ListUtil</span>.</span></span><span class=\"hljs-keyword\">of</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>);<br>        log.info(<span class=\"hljs-string\">&quot;新建list并赋值:&#123;&#125;&quot;</span>, l1);<br>        log.info(<span class=\"hljs-string\">&quot;&quot;</span>);<br><br>        log.info(<span class=\"hljs-string\">&quot;-------------【判空】------------&quot;</span>);<br>        String s = null;<br>        List <span class=\"hljs-built_in\">list</span> = null;<br>        Map map = null;<br>        Integer code = null;<br><br>        boolean b1 = <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">StrUtil</span>.</span></span>is<span class=\"hljs-constructor\">Empty(<span class=\"hljs-params\">s</span>)</span>;<br>        log.info(<span class=\"hljs-string\">&quot;字符串判空:&#123;&#125;&quot;</span>, b1);<br>        boolean b2 = <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">CollectionUtil</span>.</span></span>is<span class=\"hljs-constructor\">Empty(<span class=\"hljs-params\">list</span>)</span>;<br>        log.info(<span class=\"hljs-string\">&quot;集合判空:&#123;&#125;&quot;</span>, b2);<br>        boolean b3 = <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">ObjectUtil</span>.</span></span>is<span class=\"hljs-constructor\">Empty(<span class=\"hljs-params\">map</span>)</span>;<br>        log.info(<span class=\"hljs-string\">&quot;对象判空:&#123;&#125;&quot;</span>, b3);<br>        Integer i1 = <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">ObjectUtil</span>.</span></span>default<span class=\"hljs-constructor\">IfNull(<span class=\"hljs-params\">code</span>, 2)</span>;<br>        log.info(<span class=\"hljs-string\">&quot;如果为空替换为默认值:&#123;&#125;&quot;</span>, i1);<br>        log.info(<span class=\"hljs-string\">&quot;&quot;</span>);<br><br>        log.info(<span class=\"hljs-string\">&quot;-------------【复制】------------&quot;</span>);<br>        F hui = <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">F</span>.</span></span>builder<span class=\"hljs-literal\">()</span>.name(<span class=\"hljs-string\">&quot;HUI&quot;</span>).age(<span class=\"hljs-number\">24</span>).build<span class=\"hljs-literal\">()</span>;<br>        F xue = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-constructor\">F()</span>;<br>        <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">BeanUtil</span>.</span></span>copy<span class=\"hljs-constructor\">Properties(<span class=\"hljs-params\">hui</span>, <span class=\"hljs-params\">xue</span>)</span>;<br>        log.info(<span class=\"hljs-string\">&quot;hui-&gt;xue:&#123;&#125;&quot;</span>, xue);<br>        <span class=\"hljs-comment\">//集合中对象复制</span><br>        List&lt;F&gt; huis = <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">ListUtil</span>.</span></span><span class=\"hljs-keyword\">of</span>(hui);<br>        List&lt;F&gt; newHuis = <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">BeanUtil</span>.</span></span>copy<span class=\"hljs-constructor\">ToList(<span class=\"hljs-params\">huis</span>, F.<span class=\"hljs-params\">class</span>)</span>;<br>        log.info(<span class=\"hljs-string\">&quot;huis-&gt;newHuis:&#123;&#125;&quot;</span>, newHuis);<br>        log.info(<span class=\"hljs-string\">&quot;&quot;</span>);<br><br>        log.info(<span class=\"hljs-string\">&quot;-------------【时间】------------&quot;</span>);<br>        DateTime t = <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">DateUtil</span>.</span></span>date<span class=\"hljs-literal\">()</span>;<br>        String s1 = <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">DateUtil</span>.</span></span>format(t, DatePattern.NORM_DATE_PATTERN);<br>        log.info(<span class=\"hljs-string\">&quot;DateTime-&gt;String:&#123;&#125;&quot;</span>, s1);<br>        DateTime t1 = <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">DateUtil</span>.</span></span>parse(<span class=\"hljs-string\">&quot;2021-11-10 12:59:59&quot;</span>, DatePattern.NORM_DATE_PATTERN);<br>        log.info(<span class=\"hljs-string\">&quot;String-&gt;DateTime:&#123;&#125;&quot;</span>, t1);<br>        <span class=\"hljs-built_in\">int</span> c1 = <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">DateUtil</span>.</span></span>compare(t, t1, DatePattern.NORM_DATE_PATTERN);<br>        log.info(<span class=\"hljs-string\">&quot;按照指定格式对比两个时间t-t1：&#123;&#125;&quot;</span>, c1);<br>        DateTime t2 = <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">DateUtil</span>.</span></span><span class=\"hljs-keyword\">begin</span><span class=\"hljs-constructor\">OfDay(<span class=\"hljs-params\">t</span>)</span>;<br>        DateTime t3 = <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">DateUtil</span>.</span></span><span class=\"hljs-keyword\">end</span><span class=\"hljs-constructor\">OfDay(<span class=\"hljs-params\">t</span>)</span>.offset(DateField.MILLISECOND, -<span class=\"hljs-number\">999</span>);<br>        log.info(<span class=\"hljs-string\">&quot;每天开始时间：&#123;&#125;，每天结束时间（注意存入数据库应左偏以免毫秒大于500进位）：&#123;&#125;&quot;</span>, t2, t3);<br>        boolean b = <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">DateUtil</span>.</span></span>is<span class=\"hljs-constructor\">SameDay(DateUtil.<span class=\"hljs-params\">date</span>()</span>, <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">DateUtil</span>.</span></span><span class=\"hljs-keyword\">end</span><span class=\"hljs-constructor\">OfMonth(DateUtil.<span class=\"hljs-params\">date</span>()</span>));<br>        log.info(<span class=\"hljs-string\">&quot;今天是否为本月最后一天：&#123;&#125;&quot;</span>, b);<br>        List&lt;String&gt; betweenDates = get<span class=\"hljs-constructor\">BetweenDates(<span class=\"hljs-params\">null</span>, DateUtil.<span class=\"hljs-params\">parse</span>(<span class=\"hljs-string\">&quot;2022-04-01 12:59:59&quot;</span>, DatePattern.NORM_DATE_PATTERN)</span>, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-constructor\">Date()</span>, <span class=\"hljs-keyword\">new</span> ArrayList&lt;&gt;(<span class=\"hljs-number\">10</span>));<br>        log.info(<span class=\"hljs-string\">&quot;从2022-04-01到当前时间的日期列表：&#123;&#125;&quot;</span>, betweenDates);<br>        log.info(<span class=\"hljs-string\">&quot;&quot;</span>);<br><br>        log.info(<span class=\"hljs-string\">&quot;-------------【转换】------------&quot;</span>);<br>        Long l = <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">Convert</span>.</span></span><span class=\"hljs-keyword\">to</span><span class=\"hljs-constructor\">Long(1)</span>;<br>        log.info(<span class=\"hljs-string\">&quot;Object-&gt;Long：&#123;&#125;&quot;</span>, l);<br>        Map&lt;String, Object&gt; params = <span class=\"hljs-keyword\">new</span> HashMap&lt;&gt;(<span class=\"hljs-number\">8</span>) &#123;&#123;<br>            put(<span class=\"hljs-string\">&quot;name&quot;</span>, <span class=\"hljs-string\">&quot;HUI&quot;</span>);<br>            put(<span class=\"hljs-string\">&quot;plate_type&quot;</span>, <span class=\"hljs-number\">1</span>);<br>        &#125;&#125;;<br>        F mapF = <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">BeanUtil</span>.</span></span><span class=\"hljs-keyword\">to</span><span class=\"hljs-constructor\">BeanIgnoreCase(<span class=\"hljs-params\">params</span>, F.<span class=\"hljs-params\">class</span>, <span class=\"hljs-params\">true</span>)</span>;<br>        log.info(<span class=\"hljs-string\">&quot;map转实体&#123;&#125;&quot;</span>, mapF);<br>        log.info(<span class=\"hljs-string\">&quot;实体转路径参数：&#123;&#125;&quot;</span>, <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">HttpUtil</span>.</span></span><span class=\"hljs-keyword\">to</span><span class=\"hljs-constructor\">Params(<span class=\"hljs-params\">params</span>)</span>);<br>        log.info(<span class=\"hljs-string\">&quot;实体转map参数：&#123;&#125;&quot;</span>, <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">Convert</span>.</span></span><span class=\"hljs-keyword\">to</span><span class=\"hljs-constructor\">Map(String.<span class=\"hljs-params\">class</span>, String.<span class=\"hljs-params\">class</span>, <span class=\"hljs-params\">mapF</span>)</span>);<br>        log.info(<span class=\"hljs-string\">&quot;&quot;</span>);<br><br>        log.info(<span class=\"hljs-string\">&quot;-------------【正则校验】------------&quot;</span>);<br>        boolean m1 = <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">ReUtil</span>.</span></span>is<span class=\"hljs-constructor\">Match(<span class=\"hljs-string\">&quot;^142000.*&quot;</span>, <span class=\"hljs-string\">&quot;142000123456&quot;</span>)</span>;<br>        log.info(<span class=\"hljs-string\">&quot;正则校验筛142000123456是否是142000开头&#123;&#125;&quot;</span>, m1);<br>        log.info(<span class=\"hljs-string\">&quot;&quot;</span>);<br><br>        log.info(<span class=\"hljs-string\">&quot;-------------【file】------------&quot;</span>);<br>        String context = <span class=\"hljs-string\">&quot;132456&quot;</span>;<br>        <span class=\"hljs-comment\">//保存文件到本地</span><br>        String fileName = <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">String</span>.</span></span>format(<span class=\"hljs-string\">&quot;%s.json&quot;</span>, <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">IdUtil</span>.</span></span>simple<span class=\"hljs-constructor\">UUID()</span><br>                + <span class=\"hljs-string\">&quot;-&quot;</span> + <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">LocalDateTimeUtil</span>.</span></span>format(<span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">LocalDateTime</span>.</span></span>now<span class=\"hljs-literal\">()</span>, DatePattern.PURE_DATETIME_PATTERN));<br>        File file = <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">FileUtil</span>.</span></span>file(<span class=\"hljs-string\">&quot;./&quot;</span>, fileName);<br>        <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">FileUtil</span>.</span></span>write<span class=\"hljs-constructor\">Utf8String(<span class=\"hljs-params\">context</span>, <span class=\"hljs-params\">file</span>)</span>;<br>        log.info(<span class=\"hljs-string\">&quot;写入字符串到&#123;&#125;文件中！文件类型：&#123;&#125;&quot;</span>, file.get<span class=\"hljs-constructor\">Path()</span>, <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">FileUtil</span>.</span></span>get<span class=\"hljs-constructor\">MimeType(<span class=\"hljs-params\">file</span>.<span class=\"hljs-params\">getName</span>()</span>));<br>        log.info(<span class=\"hljs-string\">&quot;&quot;</span>);<br><br><br>        log.info(<span class=\"hljs-string\">&quot;-------------【HTTP】------------&quot;</span>);<br>        String url = <span class=\"hljs-string\">&quot;https://common.service.cf/file/random/love&quot;</span>;<br>        String host = <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">UrlBuilder</span>.</span></span><span class=\"hljs-keyword\">of</span><span class=\"hljs-constructor\">Http(<span class=\"hljs-params\">url</span>)</span>.get<span class=\"hljs-constructor\">Host()</span>;<br>        log.info(<span class=\"hljs-string\">&quot;获取host:&#123;&#125;&quot;</span>, host);<br>        String imgUrl = <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">HttpUtil</span>.</span></span>get(url);<br>        log.info(<span class=\"hljs-string\">&quot;HTTP GET Result:&#123;&#125;&quot;</span>, imgUrl);<br><br>        <span class=\"hljs-comment\">//构建请求body</span><br>        JSONObject body = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-constructor\">JSONObject()</span>;<br>        body.set(<span class=\"hljs-string\">&quot;bucketName&quot;</span>, <span class=\"hljs-string\">&quot;love&quot;</span>);<br>        <span class=\"hljs-comment\">//构建请求url</span><br>        String fileListUrl = <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">UrlBuilder</span>.</span></span>create<span class=\"hljs-literal\">()</span><br>                .set<span class=\"hljs-constructor\">Scheme(<span class=\"hljs-string\">&quot;https&quot;</span>)</span> <span class=\"hljs-comment\">//设置协议</span><br>                .set<span class=\"hljs-constructor\">Host(<span class=\"hljs-params\">host</span>)</span>  <span class=\"hljs-comment\">//设置主机</span><br>                .set<span class=\"hljs-constructor\">Path(UrlPath.<span class=\"hljs-params\">of</span>(<span class=\"hljs-string\">&quot;/file/list&quot;</span>, StandardCharsets.UTF_8)</span>) <span class=\"hljs-comment\">//设置路径</span><br>                .add<span class=\"hljs-constructor\">Query(<span class=\"hljs-string\">&quot;token&quot;</span>, <span class=\"hljs-string\">&quot;ognFF5W5JQiXx40TVPIKegfy8JLY&quot;</span>)</span>  <span class=\"hljs-comment\">//添加参数</span><br>                .build<span class=\"hljs-literal\">()</span>;<br>        String postResult = <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">HttpUtil</span>.</span></span>post(fileListUrl, body);<br>        log.info(<span class=\"hljs-string\">&quot;HTTP POST URL:&#123;&#125; postResult:&#123;&#125;&quot;</span>, fileListUrl, postResult);<br>        log.info(<span class=\"hljs-string\">&quot;&quot;</span>);<br><br>        log.info(<span class=\"hljs-string\">&quot;-------------【http file】------------&quot;</span>);<br>        String fileUrl1 = <span class=\"hljs-string\">&quot;https://alist.huijia.cf/d/hui/config/linux/alist-config.json&quot;</span>;<br>        String fileUrl2 = <span class=\"hljs-string\">&quot;https://alist.huijia.cf/d/hui/config/linux/backup-ali.sh&quot;</span>;<br>        File httpFile1 = <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">HttpUtil</span>.</span></span>download<span class=\"hljs-constructor\">FileFromUrl(<span class=\"hljs-params\">fileUrl1</span>, FileUtil.<span class=\"hljs-params\">mkdir</span>(IdWorker.<span class=\"hljs-params\">getId</span>()</span> + <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">File</span>.</span></span>separator), <span class=\"hljs-number\">10000</span>);<br>        log.info(<span class=\"hljs-string\">&quot;从url1下载文件&#123;&#125;&quot;</span>, httpFile1.get<span class=\"hljs-constructor\">Name()</span>);<br>        File httpFile2 = <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">HttpUtil</span>.</span></span>download<span class=\"hljs-constructor\">FileFromUrl(<span class=\"hljs-params\">fileUrl2</span>, FileUtil.<span class=\"hljs-params\">file</span>(<span class=\"hljs-string\">&quot;./&quot;</span>)</span>, <span class=\"hljs-number\">10000</span>);<br>        log.info(<span class=\"hljs-string\">&quot;从url2下载文件&#123;&#125;&quot;</span>, httpFile2.get<span class=\"hljs-constructor\">Name()</span>);<br>        File zip = <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">ZipUtil</span>.</span></span>zip(<span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">FileUtil</span>.</span></span>file(<span class=\"hljs-string\">&quot;./test.zip&quot;</span>), <span class=\"hljs-literal\">false</span>, <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">List</span>.</span></span><span class=\"hljs-keyword\">of</span>(httpFile1, httpFile2).<span class=\"hljs-keyword\">to</span><span class=\"hljs-constructor\">Array(File[]::<span class=\"hljs-params\">new</span>)</span>);<br>        log.info(<span class=\"hljs-string\">&quot;压缩文件，file1和file2：&#123;&#125;&quot;</span>, zip.get<span class=\"hljs-constructor\">Name()</span>);<br>        <span class=\"hljs-comment\">//FileUtil.del(zip);</span><br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 递归获取从开始时间到结束时间的所有日期</span><br><span class=\"hljs-comment\">     *</span><br><span class=\"hljs-comment\">     * @param nowDate     当前日期，初始为null</span><br><span class=\"hljs-comment\">     * @param startDate   开始日期</span><br><span class=\"hljs-comment\">     * @param endDate     结束日期</span><br><span class=\"hljs-comment\">     * @param dateStrList 返回的日期列表</span><br><span class=\"hljs-comment\">     * @return 返回的日期列表</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-keyword\">private</span> static List&lt;String&gt; get<span class=\"hljs-constructor\">BetweenDates(Date <span class=\"hljs-params\">nowDate</span>, Date <span class=\"hljs-params\">startDate</span>, Date <span class=\"hljs-params\">endDate</span>, List&lt;String&gt; <span class=\"hljs-params\">dateStrList</span>)</span> &#123;<br>        nowDate = <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">ObjectUtil</span>.</span></span>default<span class=\"hljs-constructor\">IfNull(<span class=\"hljs-params\">nowDate</span>, <span class=\"hljs-params\">startDate</span>)</span>;<br>        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">DateUtil</span>.</span></span>is<span class=\"hljs-constructor\">In(<span class=\"hljs-params\">nowDate</span>, <span class=\"hljs-params\">startDate</span>, <span class=\"hljs-params\">endDate</span>)</span>) &#123;<br>            String format = <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">DateUtil</span>.</span></span>format(nowDate, DatePattern.NORM_DATE_PATTERN);<br>            dateStrList.add(format);<br>            return get<span class=\"hljs-constructor\">BetweenDates(DateUtil.<span class=\"hljs-params\">offsetDay</span>(<span class=\"hljs-params\">nowDate</span>, 1)</span>, startDate, endDate, dateStrList);<br>        &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>            return dateStrList;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li><p>测试结果</p>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720181405813.png\" alt=\"image-20220720181405813\"></p>\n</li>\n</ul>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720181631750.png\" alt=\"image-20220720181631750\"></p>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\"><span class=\"hljs-comment\">//LocalDate</span><br>u.get<span class=\"hljs-constructor\">ClaimDate()</span>.compare<span class=\"hljs-constructor\">To(LocalDate.<span class=\"hljs-params\">now</span>()</span>.minus<span class=\"hljs-constructor\">Years(1)</span>) &gt;= <span class=\"hljs-number\">0</span><br></code></pre></td></tr></table></figure>\n","site":{"data":{}},"wordcount":6059,"excerpt":"","more":"<h1 id=\"Hutool\"><a href=\"#Hutool\" class=\"headerlink\" title=\"Hutool\"></a>Hutool</h1><p>整理部分常用Hutool工具类，简化代码同时保持代码风格相似；</p>\n<p>官网：<a href=\"https://www.hutool.cn/\">https://www.hutool.cn/</a><br>官网API：<a href=\"https://apidoc.gitee.com/dromara/hutool/\">https://apidoc.gitee.com/dromara/hutool/</a></p>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\">package com.hbq.codedemopersion.common.controller.test;<br><br>@Slf4j<br>public <span class=\"hljs-keyword\">class</span> HutoolTest &#123;<br>    public static void main(String<span class=\"hljs-literal\">[]</span> args) &#123;<br>        log.info(<span class=\"hljs-string\">&quot;-------------【新建】------------&quot;</span>);<br>        List&lt;Integer&gt; l1 = <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">ListUtil</span>.</span></span><span class=\"hljs-keyword\">of</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>);<br>        log.info(<span class=\"hljs-string\">&quot;新建list并赋值:&#123;&#125;&quot;</span>, l1);<br>        log.info(<span class=\"hljs-string\">&quot;&quot;</span>);<br><br>        log.info(<span class=\"hljs-string\">&quot;-------------【判空】------------&quot;</span>);<br>        String s = null;<br>        List <span class=\"hljs-built_in\">list</span> = null;<br>        Map map = null;<br>        Integer code = null;<br><br>        boolean b1 = <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">StrUtil</span>.</span></span>is<span class=\"hljs-constructor\">Empty(<span class=\"hljs-params\">s</span>)</span>;<br>        log.info(<span class=\"hljs-string\">&quot;字符串判空:&#123;&#125;&quot;</span>, b1);<br>        boolean b2 = <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">CollectionUtil</span>.</span></span>is<span class=\"hljs-constructor\">Empty(<span class=\"hljs-params\">list</span>)</span>;<br>        log.info(<span class=\"hljs-string\">&quot;集合判空:&#123;&#125;&quot;</span>, b2);<br>        boolean b3 = <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">ObjectUtil</span>.</span></span>is<span class=\"hljs-constructor\">Empty(<span class=\"hljs-params\">map</span>)</span>;<br>        log.info(<span class=\"hljs-string\">&quot;对象判空:&#123;&#125;&quot;</span>, b3);<br>        Integer i1 = <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">ObjectUtil</span>.</span></span>default<span class=\"hljs-constructor\">IfNull(<span class=\"hljs-params\">code</span>, 2)</span>;<br>        log.info(<span class=\"hljs-string\">&quot;如果为空替换为默认值:&#123;&#125;&quot;</span>, i1);<br>        log.info(<span class=\"hljs-string\">&quot;&quot;</span>);<br><br>        log.info(<span class=\"hljs-string\">&quot;-------------【复制】------------&quot;</span>);<br>        F hui = <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">F</span>.</span></span>builder<span class=\"hljs-literal\">()</span>.name(<span class=\"hljs-string\">&quot;HUI&quot;</span>).age(<span class=\"hljs-number\">24</span>).build<span class=\"hljs-literal\">()</span>;<br>        F xue = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-constructor\">F()</span>;<br>        <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">BeanUtil</span>.</span></span>copy<span class=\"hljs-constructor\">Properties(<span class=\"hljs-params\">hui</span>, <span class=\"hljs-params\">xue</span>)</span>;<br>        log.info(<span class=\"hljs-string\">&quot;hui-&gt;xue:&#123;&#125;&quot;</span>, xue);<br>        <span class=\"hljs-comment\">//集合中对象复制</span><br>        List&lt;F&gt; huis = <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">ListUtil</span>.</span></span><span class=\"hljs-keyword\">of</span>(hui);<br>        List&lt;F&gt; newHuis = <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">BeanUtil</span>.</span></span>copy<span class=\"hljs-constructor\">ToList(<span class=\"hljs-params\">huis</span>, F.<span class=\"hljs-params\">class</span>)</span>;<br>        log.info(<span class=\"hljs-string\">&quot;huis-&gt;newHuis:&#123;&#125;&quot;</span>, newHuis);<br>        log.info(<span class=\"hljs-string\">&quot;&quot;</span>);<br><br>        log.info(<span class=\"hljs-string\">&quot;-------------【时间】------------&quot;</span>);<br>        DateTime t = <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">DateUtil</span>.</span></span>date<span class=\"hljs-literal\">()</span>;<br>        String s1 = <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">DateUtil</span>.</span></span>format(t, DatePattern.NORM_DATE_PATTERN);<br>        log.info(<span class=\"hljs-string\">&quot;DateTime-&gt;String:&#123;&#125;&quot;</span>, s1);<br>        DateTime t1 = <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">DateUtil</span>.</span></span>parse(<span class=\"hljs-string\">&quot;2021-11-10 12:59:59&quot;</span>, DatePattern.NORM_DATE_PATTERN);<br>        log.info(<span class=\"hljs-string\">&quot;String-&gt;DateTime:&#123;&#125;&quot;</span>, t1);<br>        <span class=\"hljs-built_in\">int</span> c1 = <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">DateUtil</span>.</span></span>compare(t, t1, DatePattern.NORM_DATE_PATTERN);<br>        log.info(<span class=\"hljs-string\">&quot;按照指定格式对比两个时间t-t1：&#123;&#125;&quot;</span>, c1);<br>        DateTime t2 = <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">DateUtil</span>.</span></span><span class=\"hljs-keyword\">begin</span><span class=\"hljs-constructor\">OfDay(<span class=\"hljs-params\">t</span>)</span>;<br>        DateTime t3 = <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">DateUtil</span>.</span></span><span class=\"hljs-keyword\">end</span><span class=\"hljs-constructor\">OfDay(<span class=\"hljs-params\">t</span>)</span>.offset(DateField.MILLISECOND, -<span class=\"hljs-number\">999</span>);<br>        log.info(<span class=\"hljs-string\">&quot;每天开始时间：&#123;&#125;，每天结束时间（注意存入数据库应左偏以免毫秒大于500进位）：&#123;&#125;&quot;</span>, t2, t3);<br>        boolean b = <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">DateUtil</span>.</span></span>is<span class=\"hljs-constructor\">SameDay(DateUtil.<span class=\"hljs-params\">date</span>()</span>, <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">DateUtil</span>.</span></span><span class=\"hljs-keyword\">end</span><span class=\"hljs-constructor\">OfMonth(DateUtil.<span class=\"hljs-params\">date</span>()</span>));<br>        log.info(<span class=\"hljs-string\">&quot;今天是否为本月最后一天：&#123;&#125;&quot;</span>, b);<br>        List&lt;String&gt; betweenDates = get<span class=\"hljs-constructor\">BetweenDates(<span class=\"hljs-params\">null</span>, DateUtil.<span class=\"hljs-params\">parse</span>(<span class=\"hljs-string\">&quot;2022-04-01 12:59:59&quot;</span>, DatePattern.NORM_DATE_PATTERN)</span>, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-constructor\">Date()</span>, <span class=\"hljs-keyword\">new</span> ArrayList&lt;&gt;(<span class=\"hljs-number\">10</span>));<br>        log.info(<span class=\"hljs-string\">&quot;从2022-04-01到当前时间的日期列表：&#123;&#125;&quot;</span>, betweenDates);<br>        log.info(<span class=\"hljs-string\">&quot;&quot;</span>);<br><br>        log.info(<span class=\"hljs-string\">&quot;-------------【转换】------------&quot;</span>);<br>        Long l = <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">Convert</span>.</span></span><span class=\"hljs-keyword\">to</span><span class=\"hljs-constructor\">Long(1)</span>;<br>        log.info(<span class=\"hljs-string\">&quot;Object-&gt;Long：&#123;&#125;&quot;</span>, l);<br>        Map&lt;String, Object&gt; params = <span class=\"hljs-keyword\">new</span> HashMap&lt;&gt;(<span class=\"hljs-number\">8</span>) &#123;&#123;<br>            put(<span class=\"hljs-string\">&quot;name&quot;</span>, <span class=\"hljs-string\">&quot;HUI&quot;</span>);<br>            put(<span class=\"hljs-string\">&quot;plate_type&quot;</span>, <span class=\"hljs-number\">1</span>);<br>        &#125;&#125;;<br>        F mapF = <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">BeanUtil</span>.</span></span><span class=\"hljs-keyword\">to</span><span class=\"hljs-constructor\">BeanIgnoreCase(<span class=\"hljs-params\">params</span>, F.<span class=\"hljs-params\">class</span>, <span class=\"hljs-params\">true</span>)</span>;<br>        log.info(<span class=\"hljs-string\">&quot;map转实体&#123;&#125;&quot;</span>, mapF);<br>        log.info(<span class=\"hljs-string\">&quot;实体转路径参数：&#123;&#125;&quot;</span>, <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">HttpUtil</span>.</span></span><span class=\"hljs-keyword\">to</span><span class=\"hljs-constructor\">Params(<span class=\"hljs-params\">params</span>)</span>);<br>        log.info(<span class=\"hljs-string\">&quot;实体转map参数：&#123;&#125;&quot;</span>, <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">Convert</span>.</span></span><span class=\"hljs-keyword\">to</span><span class=\"hljs-constructor\">Map(String.<span class=\"hljs-params\">class</span>, String.<span class=\"hljs-params\">class</span>, <span class=\"hljs-params\">mapF</span>)</span>);<br>        log.info(<span class=\"hljs-string\">&quot;&quot;</span>);<br><br>        log.info(<span class=\"hljs-string\">&quot;-------------【正则校验】------------&quot;</span>);<br>        boolean m1 = <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">ReUtil</span>.</span></span>is<span class=\"hljs-constructor\">Match(<span class=\"hljs-string\">&quot;^142000.*&quot;</span>, <span class=\"hljs-string\">&quot;142000123456&quot;</span>)</span>;<br>        log.info(<span class=\"hljs-string\">&quot;正则校验筛142000123456是否是142000开头&#123;&#125;&quot;</span>, m1);<br>        log.info(<span class=\"hljs-string\">&quot;&quot;</span>);<br><br>        log.info(<span class=\"hljs-string\">&quot;-------------【file】------------&quot;</span>);<br>        String context = <span class=\"hljs-string\">&quot;132456&quot;</span>;<br>        <span class=\"hljs-comment\">//保存文件到本地</span><br>        String fileName = <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">String</span>.</span></span>format(<span class=\"hljs-string\">&quot;%s.json&quot;</span>, <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">IdUtil</span>.</span></span>simple<span class=\"hljs-constructor\">UUID()</span><br>                + <span class=\"hljs-string\">&quot;-&quot;</span> + <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">LocalDateTimeUtil</span>.</span></span>format(<span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">LocalDateTime</span>.</span></span>now<span class=\"hljs-literal\">()</span>, DatePattern.PURE_DATETIME_PATTERN));<br>        File file = <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">FileUtil</span>.</span></span>file(<span class=\"hljs-string\">&quot;./&quot;</span>, fileName);<br>        <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">FileUtil</span>.</span></span>write<span class=\"hljs-constructor\">Utf8String(<span class=\"hljs-params\">context</span>, <span class=\"hljs-params\">file</span>)</span>;<br>        log.info(<span class=\"hljs-string\">&quot;写入字符串到&#123;&#125;文件中！文件类型：&#123;&#125;&quot;</span>, file.get<span class=\"hljs-constructor\">Path()</span>, <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">FileUtil</span>.</span></span>get<span class=\"hljs-constructor\">MimeType(<span class=\"hljs-params\">file</span>.<span class=\"hljs-params\">getName</span>()</span>));<br>        log.info(<span class=\"hljs-string\">&quot;&quot;</span>);<br><br><br>        log.info(<span class=\"hljs-string\">&quot;-------------【HTTP】------------&quot;</span>);<br>        String url = <span class=\"hljs-string\">&quot;https://common.service.cf/file/random/love&quot;</span>;<br>        String host = <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">UrlBuilder</span>.</span></span><span class=\"hljs-keyword\">of</span><span class=\"hljs-constructor\">Http(<span class=\"hljs-params\">url</span>)</span>.get<span class=\"hljs-constructor\">Host()</span>;<br>        log.info(<span class=\"hljs-string\">&quot;获取host:&#123;&#125;&quot;</span>, host);<br>        String imgUrl = <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">HttpUtil</span>.</span></span>get(url);<br>        log.info(<span class=\"hljs-string\">&quot;HTTP GET Result:&#123;&#125;&quot;</span>, imgUrl);<br><br>        <span class=\"hljs-comment\">//构建请求body</span><br>        JSONObject body = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-constructor\">JSONObject()</span>;<br>        body.set(<span class=\"hljs-string\">&quot;bucketName&quot;</span>, <span class=\"hljs-string\">&quot;love&quot;</span>);<br>        <span class=\"hljs-comment\">//构建请求url</span><br>        String fileListUrl = <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">UrlBuilder</span>.</span></span>create<span class=\"hljs-literal\">()</span><br>                .set<span class=\"hljs-constructor\">Scheme(<span class=\"hljs-string\">&quot;https&quot;</span>)</span> <span class=\"hljs-comment\">//设置协议</span><br>                .set<span class=\"hljs-constructor\">Host(<span class=\"hljs-params\">host</span>)</span>  <span class=\"hljs-comment\">//设置主机</span><br>                .set<span class=\"hljs-constructor\">Path(UrlPath.<span class=\"hljs-params\">of</span>(<span class=\"hljs-string\">&quot;/file/list&quot;</span>, StandardCharsets.UTF_8)</span>) <span class=\"hljs-comment\">//设置路径</span><br>                .add<span class=\"hljs-constructor\">Query(<span class=\"hljs-string\">&quot;token&quot;</span>, <span class=\"hljs-string\">&quot;ognFF5W5JQiXx40TVPIKegfy8JLY&quot;</span>)</span>  <span class=\"hljs-comment\">//添加参数</span><br>                .build<span class=\"hljs-literal\">()</span>;<br>        String postResult = <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">HttpUtil</span>.</span></span>post(fileListUrl, body);<br>        log.info(<span class=\"hljs-string\">&quot;HTTP POST URL:&#123;&#125; postResult:&#123;&#125;&quot;</span>, fileListUrl, postResult);<br>        log.info(<span class=\"hljs-string\">&quot;&quot;</span>);<br><br>        log.info(<span class=\"hljs-string\">&quot;-------------【http file】------------&quot;</span>);<br>        String fileUrl1 = <span class=\"hljs-string\">&quot;https://alist.huijia.cf/d/hui/config/linux/alist-config.json&quot;</span>;<br>        String fileUrl2 = <span class=\"hljs-string\">&quot;https://alist.huijia.cf/d/hui/config/linux/backup-ali.sh&quot;</span>;<br>        File httpFile1 = <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">HttpUtil</span>.</span></span>download<span class=\"hljs-constructor\">FileFromUrl(<span class=\"hljs-params\">fileUrl1</span>, FileUtil.<span class=\"hljs-params\">mkdir</span>(IdWorker.<span class=\"hljs-params\">getId</span>()</span> + <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">File</span>.</span></span>separator), <span class=\"hljs-number\">10000</span>);<br>        log.info(<span class=\"hljs-string\">&quot;从url1下载文件&#123;&#125;&quot;</span>, httpFile1.get<span class=\"hljs-constructor\">Name()</span>);<br>        File httpFile2 = <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">HttpUtil</span>.</span></span>download<span class=\"hljs-constructor\">FileFromUrl(<span class=\"hljs-params\">fileUrl2</span>, FileUtil.<span class=\"hljs-params\">file</span>(<span class=\"hljs-string\">&quot;./&quot;</span>)</span>, <span class=\"hljs-number\">10000</span>);<br>        log.info(<span class=\"hljs-string\">&quot;从url2下载文件&#123;&#125;&quot;</span>, httpFile2.get<span class=\"hljs-constructor\">Name()</span>);<br>        File zip = <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">ZipUtil</span>.</span></span>zip(<span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">FileUtil</span>.</span></span>file(<span class=\"hljs-string\">&quot;./test.zip&quot;</span>), <span class=\"hljs-literal\">false</span>, <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">List</span>.</span></span><span class=\"hljs-keyword\">of</span>(httpFile1, httpFile2).<span class=\"hljs-keyword\">to</span><span class=\"hljs-constructor\">Array(File[]::<span class=\"hljs-params\">new</span>)</span>);<br>        log.info(<span class=\"hljs-string\">&quot;压缩文件，file1和file2：&#123;&#125;&quot;</span>, zip.get<span class=\"hljs-constructor\">Name()</span>);<br>        <span class=\"hljs-comment\">//FileUtil.del(zip);</span><br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 递归获取从开始时间到结束时间的所有日期</span><br><span class=\"hljs-comment\">     *</span><br><span class=\"hljs-comment\">     * @param nowDate     当前日期，初始为null</span><br><span class=\"hljs-comment\">     * @param startDate   开始日期</span><br><span class=\"hljs-comment\">     * @param endDate     结束日期</span><br><span class=\"hljs-comment\">     * @param dateStrList 返回的日期列表</span><br><span class=\"hljs-comment\">     * @return 返回的日期列表</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-keyword\">private</span> static List&lt;String&gt; get<span class=\"hljs-constructor\">BetweenDates(Date <span class=\"hljs-params\">nowDate</span>, Date <span class=\"hljs-params\">startDate</span>, Date <span class=\"hljs-params\">endDate</span>, List&lt;String&gt; <span class=\"hljs-params\">dateStrList</span>)</span> &#123;<br>        nowDate = <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">ObjectUtil</span>.</span></span>default<span class=\"hljs-constructor\">IfNull(<span class=\"hljs-params\">nowDate</span>, <span class=\"hljs-params\">startDate</span>)</span>;<br>        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">DateUtil</span>.</span></span>is<span class=\"hljs-constructor\">In(<span class=\"hljs-params\">nowDate</span>, <span class=\"hljs-params\">startDate</span>, <span class=\"hljs-params\">endDate</span>)</span>) &#123;<br>            String format = <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">DateUtil</span>.</span></span>format(nowDate, DatePattern.NORM_DATE_PATTERN);<br>            dateStrList.add(format);<br>            return get<span class=\"hljs-constructor\">BetweenDates(DateUtil.<span class=\"hljs-params\">offsetDay</span>(<span class=\"hljs-params\">nowDate</span>, 1)</span>, startDate, endDate, dateStrList);<br>        &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>            return dateStrList;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li><p>测试结果</p>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720181405813.png\" alt=\"image-20220720181405813\"></p>\n</li>\n</ul>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720181631750.png\" alt=\"image-20220720181631750\"></p>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\"><span class=\"hljs-comment\">//LocalDate</span><br>u.get<span class=\"hljs-constructor\">ClaimDate()</span>.compare<span class=\"hljs-constructor\">To(LocalDate.<span class=\"hljs-params\">now</span>()</span>.minus<span class=\"hljs-constructor\">Years(1)</span>) &gt;= <span class=\"hljs-number\">0</span><br></code></pre></td></tr></table></figure>\n"},{"title":"Mybatis Plus","date":"2022-09-05T09:09:05.000Z","category_bar":true,"_content":"# Mybatis Plus\n\n---\n\n[toc]\n\n---\n\n## 一、基础BaseService常用方法\n\n```\nUser user1 = new User();\nuser1.setId(1L);\nuser1.setName(\"hbq\");\nUser user2 = new User();\nuser2.setId(1L);\nuser2.setName(\"hbq\");\nList<User> users = List.of(user1, user2);\n\nuserService.save(user1);        //新增\nuserService.saveBatch(users);    //批量新增\nuserService.getById(1L);         //根据id查询\nuserService.getOne(new LambdaQueryWrapper<User>()\n        .eq(User::getId, 1L)\n        .like(User::getName, \"hbq\"));   //根据条件查询一条数据\nuserService.list(new LambdaQueryWrapper<User>()\n        .like(User::getName, \"hbq\"));   //根据条件查询多条数据\nuserService.saveOrUpdate(user2); //若id存在则更新，不存在则新增\nuserService.updateById(user1);   //更新\nuserService.removeById(1L);     //删除\nuserService.removeByIds(List.of(1L, 2L)); //批量删除\nuserService.removeByMap(Map.of(\"id\", 1L)); //根据map删除\nuserService.removeByMap(Map.of(\"id\", 1L, \"name\", \"hbq\")); //根据map删除\n```\n+ 常用条件构造器方法\n\n![](https://img-1256282866.cos.ap-beijing.myqcloud.com/20181001202710403)\n\n## 二、单搜索框查询多字段\n\n```\n<select id=\"selectAuditList\" resultType=\"com.dy.pojo.vo.AuditMallVO\" parameterType=\"map\">\n        SELECT\n        i.id id,\n        i.user_id userId,\n        i.phone phone,\n        i.user_name userName,\n        i.create_time createTime,\n        i.mall_type mallType,\n        i.store_type storeType,\n        d.`name` name,\n        i.company_name companyName,\n        i.business_license_city businessLicenseCity,\n        i.business_license_number businessLicenseNumber,\n        i.audit_status auditStatus\n        FROM\n        dy_mall_info i\n        LEFT JOIN mall_category c ON i.id = c.mall_id\n        LEFT JOIN dy_category d ON c.category_id=d.id\n        <where>\n            <if test=\"startTime != null and startTime != ''\">\n                and i.create_time>=#{startTime}\n            </if>\n            <if test=\"endTime != null and endTime != ''\">\n                and #{endTime}>=i.create_time\n            </if>\n            <if test=\"businessLicenseCity != null and businessLicenseCity != ''\">\n                and i.business_license_city LIKE '%${businessLicenseCity}%'\n            </if>\n            <if test=\"search != null and search != ''\">\n                and (\n                i.phone LIKE '%${search}%' or\n                i.user_name LIKE '%${search}%' or\n                d.name LIKE '%${search}%' or\n                i.company_name LIKE '%${search}%' or\n                i.business_license_number LIKE '%${search}%'\n                )\n            </if>\n            <if test=\"auditStatus != null \">\n                and i.audit_status= #{auditStatus}\n            </if>\n        </where>\n        limit #{pageNum},#{pageSize}\n    </select>\n```\n## 三、事务无法使用\n```\ntry {\n\n}\ncatch (Exception e) {\n\t\te.printStackTrace();\n\t\tTransactionAspectSupport.currentTransactionStatus().setRollbackOnly();\n\t\treturn new ResultObject(StatusCode.ERROR, \"添加失败\");\n}\n```\n## 四、resultMap嵌套结构\n```\n//\n//xml\n<resultMap id=\"CategoryOneMap\" type=\"com.dy.pojo.vo.CategoryOneVO\">\n        <id column=\"idOne\" property=\"idOne\"/>\n        <result column=\"nameOne\" property=\"nameOne\"/>\n        <result column=\"codeOne\" property=\"codeOne\"/>\n        <collection property=\"categoryTwoVOS\" ofType=\"com.dy.pojo.vo.CategoryTwoVO\">\n            <id column=\"idTwo\" property=\"idTwo\"/>\n            <result column=\"nameTwo\" property=\"nameTwo\"/>\n            <result column=\"codeTwo\" property=\"codeTwo\"/>\n            <collection property=\"categoryThrVOS\" ofType=\"com.dy.pojo.vo.CategoryThrVO\">\n                <id column=\"idThr\" property=\"idThr\"/>\n                <result column=\"nameThr\" property=\"nameThr\"/>\n                <result column=\"codeThr\" property=\"codeThr\"/>\n           </collection>\n      </collection>\n  </resultMap>\n```\n## 五、子查询时，将子查询作为条件\n```\nselect\n\t\tt.id id,  -- ID\n\t\t(SELECT GROUP_CONCAT(DISTINCT m.project_id) FROM sms_wms_out_stock_pm_item m WHERE m.doc_no = t.doc_no GROUP BY m.doc_no) allProject, -- 工单\n\t\tt.doc_remark docRemark,  -- 备注\nfrom sms_wms_out_stock_doc t\n        LEFT JOIN sms_wms_io_type A on t.DT_CODE=A.TWT_CODE\n        WHERE\n        1=1\n\t\t<if test=\"p.allProject != null and p.allProject != ''\">\n            and (SELECT GROUP_CONCAT(DISTINCT m.project_id) FROM sms_wms_out_stock_pm_item m WHERE m.doc_no = t.doc_no GROUP BY m.doc_no) LIKE '%${p.pickupType}%'\n        </if>\n```","source":"_posts/BookMark/Code Demo/Mybatis Plus.md","raw":"---\ntitle: Mybatis Plus\ndate: 2022-09-05 17:09:05\ncategory_bar: true\ncategories: Code Demo\ntags:\n- Mybatis Plus\n---\n# Mybatis Plus\n\n---\n\n[toc]\n\n---\n\n## 一、基础BaseService常用方法\n\n```\nUser user1 = new User();\nuser1.setId(1L);\nuser1.setName(\"hbq\");\nUser user2 = new User();\nuser2.setId(1L);\nuser2.setName(\"hbq\");\nList<User> users = List.of(user1, user2);\n\nuserService.save(user1);        //新增\nuserService.saveBatch(users);    //批量新增\nuserService.getById(1L);         //根据id查询\nuserService.getOne(new LambdaQueryWrapper<User>()\n        .eq(User::getId, 1L)\n        .like(User::getName, \"hbq\"));   //根据条件查询一条数据\nuserService.list(new LambdaQueryWrapper<User>()\n        .like(User::getName, \"hbq\"));   //根据条件查询多条数据\nuserService.saveOrUpdate(user2); //若id存在则更新，不存在则新增\nuserService.updateById(user1);   //更新\nuserService.removeById(1L);     //删除\nuserService.removeByIds(List.of(1L, 2L)); //批量删除\nuserService.removeByMap(Map.of(\"id\", 1L)); //根据map删除\nuserService.removeByMap(Map.of(\"id\", 1L, \"name\", \"hbq\")); //根据map删除\n```\n+ 常用条件构造器方法\n\n![](https://img-1256282866.cos.ap-beijing.myqcloud.com/20181001202710403)\n\n## 二、单搜索框查询多字段\n\n```\n<select id=\"selectAuditList\" resultType=\"com.dy.pojo.vo.AuditMallVO\" parameterType=\"map\">\n        SELECT\n        i.id id,\n        i.user_id userId,\n        i.phone phone,\n        i.user_name userName,\n        i.create_time createTime,\n        i.mall_type mallType,\n        i.store_type storeType,\n        d.`name` name,\n        i.company_name companyName,\n        i.business_license_city businessLicenseCity,\n        i.business_license_number businessLicenseNumber,\n        i.audit_status auditStatus\n        FROM\n        dy_mall_info i\n        LEFT JOIN mall_category c ON i.id = c.mall_id\n        LEFT JOIN dy_category d ON c.category_id=d.id\n        <where>\n            <if test=\"startTime != null and startTime != ''\">\n                and i.create_time>=#{startTime}\n            </if>\n            <if test=\"endTime != null and endTime != ''\">\n                and #{endTime}>=i.create_time\n            </if>\n            <if test=\"businessLicenseCity != null and businessLicenseCity != ''\">\n                and i.business_license_city LIKE '%${businessLicenseCity}%'\n            </if>\n            <if test=\"search != null and search != ''\">\n                and (\n                i.phone LIKE '%${search}%' or\n                i.user_name LIKE '%${search}%' or\n                d.name LIKE '%${search}%' or\n                i.company_name LIKE '%${search}%' or\n                i.business_license_number LIKE '%${search}%'\n                )\n            </if>\n            <if test=\"auditStatus != null \">\n                and i.audit_status= #{auditStatus}\n            </if>\n        </where>\n        limit #{pageNum},#{pageSize}\n    </select>\n```\n## 三、事务无法使用\n```\ntry {\n\n}\ncatch (Exception e) {\n\t\te.printStackTrace();\n\t\tTransactionAspectSupport.currentTransactionStatus().setRollbackOnly();\n\t\treturn new ResultObject(StatusCode.ERROR, \"添加失败\");\n}\n```\n## 四、resultMap嵌套结构\n```\n//\n//xml\n<resultMap id=\"CategoryOneMap\" type=\"com.dy.pojo.vo.CategoryOneVO\">\n        <id column=\"idOne\" property=\"idOne\"/>\n        <result column=\"nameOne\" property=\"nameOne\"/>\n        <result column=\"codeOne\" property=\"codeOne\"/>\n        <collection property=\"categoryTwoVOS\" ofType=\"com.dy.pojo.vo.CategoryTwoVO\">\n            <id column=\"idTwo\" property=\"idTwo\"/>\n            <result column=\"nameTwo\" property=\"nameTwo\"/>\n            <result column=\"codeTwo\" property=\"codeTwo\"/>\n            <collection property=\"categoryThrVOS\" ofType=\"com.dy.pojo.vo.CategoryThrVO\">\n                <id column=\"idThr\" property=\"idThr\"/>\n                <result column=\"nameThr\" property=\"nameThr\"/>\n                <result column=\"codeThr\" property=\"codeThr\"/>\n           </collection>\n      </collection>\n  </resultMap>\n```\n## 五、子查询时，将子查询作为条件\n```\nselect\n\t\tt.id id,  -- ID\n\t\t(SELECT GROUP_CONCAT(DISTINCT m.project_id) FROM sms_wms_out_stock_pm_item m WHERE m.doc_no = t.doc_no GROUP BY m.doc_no) allProject, -- 工单\n\t\tt.doc_remark docRemark,  -- 备注\nfrom sms_wms_out_stock_doc t\n        LEFT JOIN sms_wms_io_type A on t.DT_CODE=A.TWT_CODE\n        WHERE\n        1=1\n\t\t<if test=\"p.allProject != null and p.allProject != ''\">\n            and (SELECT GROUP_CONCAT(DISTINCT m.project_id) FROM sms_wms_out_stock_pm_item m WHERE m.doc_no = t.doc_no GROUP BY m.doc_no) LIKE '%${p.pickupType}%'\n        </if>\n```","slug":"BookMark/Code Demo/Mybatis Plus","published":1,"updated":"2022-09-06T06:51:51.107Z","_id":"cl7ptszoe0007aba53nt77g6g","comments":1,"layout":"post","photos":[],"link":"","content":"<h1><span id=\"mybatis-plus\">Mybatis Plus</span></h1><hr>\n<p>[toc]</p>\n<hr>\n<h2><span id=\"一-基础baseservice常用方法\">一、基础BaseService常用方法</span></h2><figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\">User user1 = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-constructor\">User()</span>;<br>user1.set<span class=\"hljs-constructor\">Id(1L)</span>;<br>user1.set<span class=\"hljs-constructor\">Name(<span class=\"hljs-string\">&quot;hbq&quot;</span>)</span>;<br>User user2 = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-constructor\">User()</span>;<br>user2.set<span class=\"hljs-constructor\">Id(1L)</span>;<br>user2.set<span class=\"hljs-constructor\">Name(<span class=\"hljs-string\">&quot;hbq&quot;</span>)</span>;<br>List&lt;User&gt; users = <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">List</span>.</span></span><span class=\"hljs-keyword\">of</span>(user1, user2);<br><br>userService.save(user1);        <span class=\"hljs-comment\">//新增</span><br>userService.save<span class=\"hljs-constructor\">Batch(<span class=\"hljs-params\">users</span>)</span>;    <span class=\"hljs-comment\">//批量新增</span><br>userService.get<span class=\"hljs-constructor\">ById(1L)</span>;         <span class=\"hljs-comment\">//根据id查询</span><br>userService.get<span class=\"hljs-constructor\">One(<span class=\"hljs-params\">new</span> LambdaQueryWrapper&lt;User&gt;()</span><br>        .eq(User::getId, <span class=\"hljs-number\">1L</span>)<br>        .like(User::getName, <span class=\"hljs-string\">&quot;hbq&quot;</span>));   <span class=\"hljs-comment\">//根据条件查询一条数据</span><br>userService.<span class=\"hljs-built_in\">list</span>(<span class=\"hljs-keyword\">new</span> LambdaQueryWrapper&lt;User&gt;<span class=\"hljs-literal\">()</span><br>        .like(User::getName, <span class=\"hljs-string\">&quot;hbq&quot;</span>));   <span class=\"hljs-comment\">//根据条件查询多条数据</span><br>userService.save<span class=\"hljs-constructor\">OrUpdate(<span class=\"hljs-params\">user2</span>)</span>; <span class=\"hljs-comment\">//若id存在则更新，不存在则新增</span><br>userService.update<span class=\"hljs-constructor\">ById(<span class=\"hljs-params\">user1</span>)</span>;   <span class=\"hljs-comment\">//更新</span><br>userService.remove<span class=\"hljs-constructor\">ById(1L)</span>;     <span class=\"hljs-comment\">//删除</span><br>userService.remove<span class=\"hljs-constructor\">ByIds(List.<span class=\"hljs-params\">of</span>(1L, 2L)</span>); <span class=\"hljs-comment\">//批量删除</span><br>userService.remove<span class=\"hljs-constructor\">ByMap(Map.<span class=\"hljs-params\">of</span>(<span class=\"hljs-string\">&quot;id&quot;</span>, 1L)</span>); <span class=\"hljs-comment\">//根据map删除</span><br>userService.remove<span class=\"hljs-constructor\">ByMap(Map.<span class=\"hljs-params\">of</span>(<span class=\"hljs-string\">&quot;id&quot;</span>, 1L, <span class=\"hljs-string\">&quot;name&quot;</span>, <span class=\"hljs-string\">&quot;hbq&quot;</span>)</span>); <span class=\"hljs-comment\">//根据map删除</span><br></code></pre></td></tr></table></figure>\n<ul>\n<li>常用条件构造器方法</li>\n</ul>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/20181001202710403\"></p>\n<h2><span id=\"二-单搜索框查询多字段\">二、单搜索框查询多字段</span></h2><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs stylus\">&lt;select id=<span class=\"hljs-string\">&quot;selectAuditList&quot;</span> resultType=<span class=\"hljs-string\">&quot;com.dy.pojo.vo.AuditMallVO&quot;</span> parameterType=<span class=\"hljs-string\">&quot;map&quot;</span>&gt;<br>        SELECT<br>        <span class=\"hljs-selector-tag\">i</span><span class=\"hljs-selector-class\">.id</span> id,<br>        <span class=\"hljs-selector-tag\">i</span><span class=\"hljs-selector-class\">.user_id</span> userId,<br>        <span class=\"hljs-selector-tag\">i</span><span class=\"hljs-selector-class\">.phone</span> phone,<br>        <span class=\"hljs-selector-tag\">i</span><span class=\"hljs-selector-class\">.user_name</span> userName,<br>        <span class=\"hljs-selector-tag\">i</span><span class=\"hljs-selector-class\">.create_time</span> createTime,<br>        <span class=\"hljs-selector-tag\">i</span><span class=\"hljs-selector-class\">.mall_type</span> mallType,<br>        <span class=\"hljs-selector-tag\">i</span><span class=\"hljs-selector-class\">.store_type</span> storeType,<br>        d.`name` name,<br>        <span class=\"hljs-selector-tag\">i</span><span class=\"hljs-selector-class\">.company_name</span> companyName,<br>        <span class=\"hljs-selector-tag\">i</span><span class=\"hljs-selector-class\">.business_license_city</span> businessLicenseCity,<br>        <span class=\"hljs-selector-tag\">i</span><span class=\"hljs-selector-class\">.business_license_number</span> businessLicenseNumber,<br>        <span class=\"hljs-selector-tag\">i</span><span class=\"hljs-selector-class\">.audit_status</span> auditStatus<br>        FROM<br>        dy_mall_info <span class=\"hljs-selector-tag\">i</span><br>        LEFT JOIN mall_category c ON <span class=\"hljs-selector-tag\">i</span><span class=\"hljs-selector-class\">.id</span> = c<span class=\"hljs-selector-class\">.mall_id</span><br>        LEFT JOIN dy_category d ON c.category_id=d<span class=\"hljs-selector-class\">.id</span><br>        &lt;where&gt;<br>            &lt;<span class=\"hljs-keyword\">if</span> test=<span class=\"hljs-string\">&quot;startTime != null and startTime != &#x27;&#x27;&quot;</span>&gt;<br>                and <span class=\"hljs-selector-tag\">i</span>.create_time&gt;=#&#123;startTime&#125;<br>            &lt;/<span class=\"hljs-keyword\">if</span>&gt;<br>            &lt;<span class=\"hljs-keyword\">if</span> test=<span class=\"hljs-string\">&quot;endTime != null and endTime != &#x27;&#x27;&quot;</span>&gt;<br>                and #&#123;endTime&#125;&gt;=<span class=\"hljs-selector-tag\">i</span><span class=\"hljs-selector-class\">.create_time</span><br>            &lt;/<span class=\"hljs-keyword\">if</span>&gt;<br>            &lt;<span class=\"hljs-keyword\">if</span> test=<span class=\"hljs-string\">&quot;businessLicenseCity != null and businessLicenseCity != &#x27;&#x27;&quot;</span>&gt;<br>                and <span class=\"hljs-selector-tag\">i</span><span class=\"hljs-selector-class\">.business_license_city</span> LIKE <span class=\"hljs-string\">&#x27;%$&#123;businessLicenseCity&#125;%&#x27;</span><br>            &lt;/<span class=\"hljs-keyword\">if</span>&gt;<br>            &lt;<span class=\"hljs-keyword\">if</span> test=<span class=\"hljs-string\">&quot;search != null and search != &#x27;&#x27;&quot;</span>&gt;<br>                and (<br>                <span class=\"hljs-selector-tag\">i</span><span class=\"hljs-selector-class\">.phone</span> LIKE <span class=\"hljs-string\">&#x27;%$&#123;search&#125;%&#x27;</span> or<br>                <span class=\"hljs-selector-tag\">i</span><span class=\"hljs-selector-class\">.user_name</span> LIKE <span class=\"hljs-string\">&#x27;%$&#123;search&#125;%&#x27;</span> or<br>                d<span class=\"hljs-selector-class\">.name</span> LIKE <span class=\"hljs-string\">&#x27;%$&#123;search&#125;%&#x27;</span> or<br>                <span class=\"hljs-selector-tag\">i</span><span class=\"hljs-selector-class\">.company_name</span> LIKE <span class=\"hljs-string\">&#x27;%$&#123;search&#125;%&#x27;</span> or<br>                <span class=\"hljs-selector-tag\">i</span><span class=\"hljs-selector-class\">.business_license_number</span> LIKE <span class=\"hljs-string\">&#x27;%$&#123;search&#125;%&#x27;</span><br>                )<br>            &lt;/<span class=\"hljs-keyword\">if</span>&gt;<br>            &lt;<span class=\"hljs-keyword\">if</span> test=<span class=\"hljs-string\">&quot;auditStatus != null &quot;</span>&gt;<br>                and <span class=\"hljs-selector-tag\">i</span>.audit_status= #&#123;auditStatus&#125;<br>            &lt;/<span class=\"hljs-keyword\">if</span>&gt;<br>        &lt;/where&gt;<br>        limit #&#123;pageNum&#125;,#&#123;pageSize&#125;<br>    &lt;/select&gt;<br></code></pre></td></tr></table></figure>\n<h2><span id=\"三-事务无法使用\">三、事务无法使用</span></h2><figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\"><span class=\"hljs-keyword\">try</span> &#123;<br><br>&#125;<br>catch (Exception e) &#123;<br>\t\te.print<span class=\"hljs-constructor\">StackTrace()</span>;<br>\t\t<span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">TransactionAspectSupport</span>.</span></span>current<span class=\"hljs-constructor\">TransactionStatus()</span>.set<span class=\"hljs-constructor\">RollbackOnly()</span>;<br>\t\treturn <span class=\"hljs-keyword\">new</span> <span class=\"hljs-constructor\">ResultObject(StatusCode.ERROR, <span class=\"hljs-string\">&quot;添加失败&quot;</span>)</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h2><span id=\"四-resultmap嵌套结构\">四、resultMap嵌套结构</span></h2><figure class=\"highlight abnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs abnf\">//<br>//xml<br>&lt;resultMap id<span class=\"hljs-operator\">=</span><span class=\"hljs-string\">&quot;CategoryOneMap&quot;</span> type<span class=\"hljs-operator\">=</span><span class=\"hljs-string\">&quot;com.dy.pojo.vo.CategoryOneVO&quot;</span>&gt;<br>        &lt;id column<span class=\"hljs-operator\">=</span><span class=\"hljs-string\">&quot;idOne&quot;</span> property<span class=\"hljs-operator\">=</span><span class=\"hljs-string\">&quot;idOne&quot;</span>/&gt;<br>        &lt;result column<span class=\"hljs-operator\">=</span><span class=\"hljs-string\">&quot;nameOne&quot;</span> property<span class=\"hljs-operator\">=</span><span class=\"hljs-string\">&quot;nameOne&quot;</span>/&gt;<br>        &lt;result column<span class=\"hljs-operator\">=</span><span class=\"hljs-string\">&quot;codeOne&quot;</span> property<span class=\"hljs-operator\">=</span><span class=\"hljs-string\">&quot;codeOne&quot;</span>/&gt;<br>        &lt;collection property<span class=\"hljs-operator\">=</span><span class=\"hljs-string\">&quot;categoryTwoVOS&quot;</span> ofType<span class=\"hljs-operator\">=</span><span class=\"hljs-string\">&quot;com.dy.pojo.vo.CategoryTwoVO&quot;</span>&gt;<br>            &lt;id column<span class=\"hljs-operator\">=</span><span class=\"hljs-string\">&quot;idTwo&quot;</span> property<span class=\"hljs-operator\">=</span><span class=\"hljs-string\">&quot;idTwo&quot;</span>/&gt;<br>            &lt;result column<span class=\"hljs-operator\">=</span><span class=\"hljs-string\">&quot;nameTwo&quot;</span> property<span class=\"hljs-operator\">=</span><span class=\"hljs-string\">&quot;nameTwo&quot;</span>/&gt;<br>            &lt;result column<span class=\"hljs-operator\">=</span><span class=\"hljs-string\">&quot;codeTwo&quot;</span> property<span class=\"hljs-operator\">=</span><span class=\"hljs-string\">&quot;codeTwo&quot;</span>/&gt;<br>            &lt;collection property<span class=\"hljs-operator\">=</span><span class=\"hljs-string\">&quot;categoryThrVOS&quot;</span> ofType<span class=\"hljs-operator\">=</span><span class=\"hljs-string\">&quot;com.dy.pojo.vo.CategoryThrVO&quot;</span>&gt;<br>                &lt;id column<span class=\"hljs-operator\">=</span><span class=\"hljs-string\">&quot;idThr&quot;</span> property<span class=\"hljs-operator\">=</span><span class=\"hljs-string\">&quot;idThr&quot;</span>/&gt;<br>                &lt;result column<span class=\"hljs-operator\">=</span><span class=\"hljs-string\">&quot;nameThr&quot;</span> property<span class=\"hljs-operator\">=</span><span class=\"hljs-string\">&quot;nameThr&quot;</span>/&gt;<br>                &lt;result column<span class=\"hljs-operator\">=</span><span class=\"hljs-string\">&quot;codeThr&quot;</span> property<span class=\"hljs-operator\">=</span><span class=\"hljs-string\">&quot;codeThr&quot;</span>/&gt;<br>           &lt;/collection&gt;<br>      &lt;/collection&gt;<br>  &lt;/resultMap&gt;<br></code></pre></td></tr></table></figure>\n<h2><span id=\"五-子查询时将子查询作为条件\">五、子查询时，将子查询作为条件</span></h2><figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pgsql\"><span class=\"hljs-keyword\">select</span><br>\t\tt.id id,  <span class=\"hljs-comment\">-- ID</span><br>\t\t(<span class=\"hljs-keyword\">SELECT</span> GROUP_CONCAT(<span class=\"hljs-keyword\">DISTINCT</span> m.project_id) <span class=\"hljs-keyword\">FROM</span> sms_wms_out_stock_pm_item m <span class=\"hljs-keyword\">WHERE</span> m.doc_no = t.doc_no <span class=\"hljs-keyword\">GROUP</span> <span class=\"hljs-keyword\">BY</span> m.doc_no) allProject, <span class=\"hljs-comment\">-- 工单</span><br>\t\tt.doc_remark docRemark,  <span class=\"hljs-comment\">-- 备注</span><br><span class=\"hljs-keyword\">from</span> sms_wms_out_stock_doc t<br>        <span class=\"hljs-keyword\">LEFT JOIN</span> sms_wms_io_type A <span class=\"hljs-keyword\">on</span> t.DT_CODE=A.TWT_CODE<br>        <span class=\"hljs-keyword\">WHERE</span><br>        <span class=\"hljs-number\">1</span>=<span class=\"hljs-number\">1</span><br>\t\t&lt;<span class=\"hljs-keyword\">if</span> test=&quot;p.allProject != null and p.allProject != &#x27;&#x27;&quot;&gt;<br>            <span class=\"hljs-keyword\">and</span> (<span class=\"hljs-keyword\">SELECT</span> GROUP_CONCAT(<span class=\"hljs-keyword\">DISTINCT</span> m.project_id) <span class=\"hljs-keyword\">FROM</span> sms_wms_out_stock_pm_item m <span class=\"hljs-keyword\">WHERE</span> m.doc_no = t.doc_no <span class=\"hljs-keyword\">GROUP</span> <span class=\"hljs-keyword\">BY</span> m.doc_no) <span class=\"hljs-keyword\">LIKE</span> <span class=\"hljs-string\">&#x27;%$&#123;p.pickupType&#125;%&#x27;</span><br>        &lt;/<span class=\"hljs-keyword\">if</span>&gt;<br></code></pre></td></tr></table></figure>","site":{"data":{}},"wordcount":4122,"excerpt":"","more":"<h1 id=\"Mybatis-Plus\"><a href=\"#Mybatis-Plus\" class=\"headerlink\" title=\"Mybatis Plus\"></a>Mybatis Plus</h1><hr>\n<p>[toc]</p>\n<hr>\n<h2 id=\"一、基础BaseService常用方法\"><a href=\"#一、基础BaseService常用方法\" class=\"headerlink\" title=\"一、基础BaseService常用方法\"></a>一、基础BaseService常用方法</h2><figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\">User user1 = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-constructor\">User()</span>;<br>user1.set<span class=\"hljs-constructor\">Id(1L)</span>;<br>user1.set<span class=\"hljs-constructor\">Name(<span class=\"hljs-string\">&quot;hbq&quot;</span>)</span>;<br>User user2 = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-constructor\">User()</span>;<br>user2.set<span class=\"hljs-constructor\">Id(1L)</span>;<br>user2.set<span class=\"hljs-constructor\">Name(<span class=\"hljs-string\">&quot;hbq&quot;</span>)</span>;<br>List&lt;User&gt; users = <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">List</span>.</span></span><span class=\"hljs-keyword\">of</span>(user1, user2);<br><br>userService.save(user1);        <span class=\"hljs-comment\">//新增</span><br>userService.save<span class=\"hljs-constructor\">Batch(<span class=\"hljs-params\">users</span>)</span>;    <span class=\"hljs-comment\">//批量新增</span><br>userService.get<span class=\"hljs-constructor\">ById(1L)</span>;         <span class=\"hljs-comment\">//根据id查询</span><br>userService.get<span class=\"hljs-constructor\">One(<span class=\"hljs-params\">new</span> LambdaQueryWrapper&lt;User&gt;()</span><br>        .eq(User::getId, <span class=\"hljs-number\">1L</span>)<br>        .like(User::getName, <span class=\"hljs-string\">&quot;hbq&quot;</span>));   <span class=\"hljs-comment\">//根据条件查询一条数据</span><br>userService.<span class=\"hljs-built_in\">list</span>(<span class=\"hljs-keyword\">new</span> LambdaQueryWrapper&lt;User&gt;<span class=\"hljs-literal\">()</span><br>        .like(User::getName, <span class=\"hljs-string\">&quot;hbq&quot;</span>));   <span class=\"hljs-comment\">//根据条件查询多条数据</span><br>userService.save<span class=\"hljs-constructor\">OrUpdate(<span class=\"hljs-params\">user2</span>)</span>; <span class=\"hljs-comment\">//若id存在则更新，不存在则新增</span><br>userService.update<span class=\"hljs-constructor\">ById(<span class=\"hljs-params\">user1</span>)</span>;   <span class=\"hljs-comment\">//更新</span><br>userService.remove<span class=\"hljs-constructor\">ById(1L)</span>;     <span class=\"hljs-comment\">//删除</span><br>userService.remove<span class=\"hljs-constructor\">ByIds(List.<span class=\"hljs-params\">of</span>(1L, 2L)</span>); <span class=\"hljs-comment\">//批量删除</span><br>userService.remove<span class=\"hljs-constructor\">ByMap(Map.<span class=\"hljs-params\">of</span>(<span class=\"hljs-string\">&quot;id&quot;</span>, 1L)</span>); <span class=\"hljs-comment\">//根据map删除</span><br>userService.remove<span class=\"hljs-constructor\">ByMap(Map.<span class=\"hljs-params\">of</span>(<span class=\"hljs-string\">&quot;id&quot;</span>, 1L, <span class=\"hljs-string\">&quot;name&quot;</span>, <span class=\"hljs-string\">&quot;hbq&quot;</span>)</span>); <span class=\"hljs-comment\">//根据map删除</span><br></code></pre></td></tr></table></figure>\n<ul>\n<li>常用条件构造器方法</li>\n</ul>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/20181001202710403\"></p>\n<h2 id=\"二、单搜索框查询多字段\"><a href=\"#二、单搜索框查询多字段\" class=\"headerlink\" title=\"二、单搜索框查询多字段\"></a>二、单搜索框查询多字段</h2><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs stylus\">&lt;select id=<span class=\"hljs-string\">&quot;selectAuditList&quot;</span> resultType=<span class=\"hljs-string\">&quot;com.dy.pojo.vo.AuditMallVO&quot;</span> parameterType=<span class=\"hljs-string\">&quot;map&quot;</span>&gt;<br>        SELECT<br>        <span class=\"hljs-selector-tag\">i</span><span class=\"hljs-selector-class\">.id</span> id,<br>        <span class=\"hljs-selector-tag\">i</span><span class=\"hljs-selector-class\">.user_id</span> userId,<br>        <span class=\"hljs-selector-tag\">i</span><span class=\"hljs-selector-class\">.phone</span> phone,<br>        <span class=\"hljs-selector-tag\">i</span><span class=\"hljs-selector-class\">.user_name</span> userName,<br>        <span class=\"hljs-selector-tag\">i</span><span class=\"hljs-selector-class\">.create_time</span> createTime,<br>        <span class=\"hljs-selector-tag\">i</span><span class=\"hljs-selector-class\">.mall_type</span> mallType,<br>        <span class=\"hljs-selector-tag\">i</span><span class=\"hljs-selector-class\">.store_type</span> storeType,<br>        d.`name` name,<br>        <span class=\"hljs-selector-tag\">i</span><span class=\"hljs-selector-class\">.company_name</span> companyName,<br>        <span class=\"hljs-selector-tag\">i</span><span class=\"hljs-selector-class\">.business_license_city</span> businessLicenseCity,<br>        <span class=\"hljs-selector-tag\">i</span><span class=\"hljs-selector-class\">.business_license_number</span> businessLicenseNumber,<br>        <span class=\"hljs-selector-tag\">i</span><span class=\"hljs-selector-class\">.audit_status</span> auditStatus<br>        FROM<br>        dy_mall_info <span class=\"hljs-selector-tag\">i</span><br>        LEFT JOIN mall_category c ON <span class=\"hljs-selector-tag\">i</span><span class=\"hljs-selector-class\">.id</span> = c<span class=\"hljs-selector-class\">.mall_id</span><br>        LEFT JOIN dy_category d ON c.category_id=d<span class=\"hljs-selector-class\">.id</span><br>        &lt;where&gt;<br>            &lt;<span class=\"hljs-keyword\">if</span> test=<span class=\"hljs-string\">&quot;startTime != null and startTime != &#x27;&#x27;&quot;</span>&gt;<br>                and <span class=\"hljs-selector-tag\">i</span>.create_time&gt;=#&#123;startTime&#125;<br>            &lt;/<span class=\"hljs-keyword\">if</span>&gt;<br>            &lt;<span class=\"hljs-keyword\">if</span> test=<span class=\"hljs-string\">&quot;endTime != null and endTime != &#x27;&#x27;&quot;</span>&gt;<br>                and #&#123;endTime&#125;&gt;=<span class=\"hljs-selector-tag\">i</span><span class=\"hljs-selector-class\">.create_time</span><br>            &lt;/<span class=\"hljs-keyword\">if</span>&gt;<br>            &lt;<span class=\"hljs-keyword\">if</span> test=<span class=\"hljs-string\">&quot;businessLicenseCity != null and businessLicenseCity != &#x27;&#x27;&quot;</span>&gt;<br>                and <span class=\"hljs-selector-tag\">i</span><span class=\"hljs-selector-class\">.business_license_city</span> LIKE <span class=\"hljs-string\">&#x27;%$&#123;businessLicenseCity&#125;%&#x27;</span><br>            &lt;/<span class=\"hljs-keyword\">if</span>&gt;<br>            &lt;<span class=\"hljs-keyword\">if</span> test=<span class=\"hljs-string\">&quot;search != null and search != &#x27;&#x27;&quot;</span>&gt;<br>                and (<br>                <span class=\"hljs-selector-tag\">i</span><span class=\"hljs-selector-class\">.phone</span> LIKE <span class=\"hljs-string\">&#x27;%$&#123;search&#125;%&#x27;</span> or<br>                <span class=\"hljs-selector-tag\">i</span><span class=\"hljs-selector-class\">.user_name</span> LIKE <span class=\"hljs-string\">&#x27;%$&#123;search&#125;%&#x27;</span> or<br>                d<span class=\"hljs-selector-class\">.name</span> LIKE <span class=\"hljs-string\">&#x27;%$&#123;search&#125;%&#x27;</span> or<br>                <span class=\"hljs-selector-tag\">i</span><span class=\"hljs-selector-class\">.company_name</span> LIKE <span class=\"hljs-string\">&#x27;%$&#123;search&#125;%&#x27;</span> or<br>                <span class=\"hljs-selector-tag\">i</span><span class=\"hljs-selector-class\">.business_license_number</span> LIKE <span class=\"hljs-string\">&#x27;%$&#123;search&#125;%&#x27;</span><br>                )<br>            &lt;/<span class=\"hljs-keyword\">if</span>&gt;<br>            &lt;<span class=\"hljs-keyword\">if</span> test=<span class=\"hljs-string\">&quot;auditStatus != null &quot;</span>&gt;<br>                and <span class=\"hljs-selector-tag\">i</span>.audit_status= #&#123;auditStatus&#125;<br>            &lt;/<span class=\"hljs-keyword\">if</span>&gt;<br>        &lt;/where&gt;<br>        limit #&#123;pageNum&#125;,#&#123;pageSize&#125;<br>    &lt;/select&gt;<br></code></pre></td></tr></table></figure>\n<h2 id=\"三、事务无法使用\"><a href=\"#三、事务无法使用\" class=\"headerlink\" title=\"三、事务无法使用\"></a>三、事务无法使用</h2><figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\"><span class=\"hljs-keyword\">try</span> &#123;<br><br>&#125;<br>catch (Exception e) &#123;<br>\t\te.print<span class=\"hljs-constructor\">StackTrace()</span>;<br>\t\t<span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">TransactionAspectSupport</span>.</span></span>current<span class=\"hljs-constructor\">TransactionStatus()</span>.set<span class=\"hljs-constructor\">RollbackOnly()</span>;<br>\t\treturn <span class=\"hljs-keyword\">new</span> <span class=\"hljs-constructor\">ResultObject(StatusCode.ERROR, <span class=\"hljs-string\">&quot;添加失败&quot;</span>)</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h2 id=\"四、resultMap嵌套结构\"><a href=\"#四、resultMap嵌套结构\" class=\"headerlink\" title=\"四、resultMap嵌套结构\"></a>四、resultMap嵌套结构</h2><figure class=\"highlight abnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs abnf\">//<br>//xml<br>&lt;resultMap id<span class=\"hljs-operator\">=</span><span class=\"hljs-string\">&quot;CategoryOneMap&quot;</span> type<span class=\"hljs-operator\">=</span><span class=\"hljs-string\">&quot;com.dy.pojo.vo.CategoryOneVO&quot;</span>&gt;<br>        &lt;id column<span class=\"hljs-operator\">=</span><span class=\"hljs-string\">&quot;idOne&quot;</span> property<span class=\"hljs-operator\">=</span><span class=\"hljs-string\">&quot;idOne&quot;</span>/&gt;<br>        &lt;result column<span class=\"hljs-operator\">=</span><span class=\"hljs-string\">&quot;nameOne&quot;</span> property<span class=\"hljs-operator\">=</span><span class=\"hljs-string\">&quot;nameOne&quot;</span>/&gt;<br>        &lt;result column<span class=\"hljs-operator\">=</span><span class=\"hljs-string\">&quot;codeOne&quot;</span> property<span class=\"hljs-operator\">=</span><span class=\"hljs-string\">&quot;codeOne&quot;</span>/&gt;<br>        &lt;collection property<span class=\"hljs-operator\">=</span><span class=\"hljs-string\">&quot;categoryTwoVOS&quot;</span> ofType<span class=\"hljs-operator\">=</span><span class=\"hljs-string\">&quot;com.dy.pojo.vo.CategoryTwoVO&quot;</span>&gt;<br>            &lt;id column<span class=\"hljs-operator\">=</span><span class=\"hljs-string\">&quot;idTwo&quot;</span> property<span class=\"hljs-operator\">=</span><span class=\"hljs-string\">&quot;idTwo&quot;</span>/&gt;<br>            &lt;result column<span class=\"hljs-operator\">=</span><span class=\"hljs-string\">&quot;nameTwo&quot;</span> property<span class=\"hljs-operator\">=</span><span class=\"hljs-string\">&quot;nameTwo&quot;</span>/&gt;<br>            &lt;result column<span class=\"hljs-operator\">=</span><span class=\"hljs-string\">&quot;codeTwo&quot;</span> property<span class=\"hljs-operator\">=</span><span class=\"hljs-string\">&quot;codeTwo&quot;</span>/&gt;<br>            &lt;collection property<span class=\"hljs-operator\">=</span><span class=\"hljs-string\">&quot;categoryThrVOS&quot;</span> ofType<span class=\"hljs-operator\">=</span><span class=\"hljs-string\">&quot;com.dy.pojo.vo.CategoryThrVO&quot;</span>&gt;<br>                &lt;id column<span class=\"hljs-operator\">=</span><span class=\"hljs-string\">&quot;idThr&quot;</span> property<span class=\"hljs-operator\">=</span><span class=\"hljs-string\">&quot;idThr&quot;</span>/&gt;<br>                &lt;result column<span class=\"hljs-operator\">=</span><span class=\"hljs-string\">&quot;nameThr&quot;</span> property<span class=\"hljs-operator\">=</span><span class=\"hljs-string\">&quot;nameThr&quot;</span>/&gt;<br>                &lt;result column<span class=\"hljs-operator\">=</span><span class=\"hljs-string\">&quot;codeThr&quot;</span> property<span class=\"hljs-operator\">=</span><span class=\"hljs-string\">&quot;codeThr&quot;</span>/&gt;<br>           &lt;/collection&gt;<br>      &lt;/collection&gt;<br>  &lt;/resultMap&gt;<br></code></pre></td></tr></table></figure>\n<h2 id=\"五、子查询时，将子查询作为条件\"><a href=\"#五、子查询时，将子查询作为条件\" class=\"headerlink\" title=\"五、子查询时，将子查询作为条件\"></a>五、子查询时，将子查询作为条件</h2><figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pgsql\"><span class=\"hljs-keyword\">select</span><br>\t\tt.id id,  <span class=\"hljs-comment\">-- ID</span><br>\t\t(<span class=\"hljs-keyword\">SELECT</span> GROUP_CONCAT(<span class=\"hljs-keyword\">DISTINCT</span> m.project_id) <span class=\"hljs-keyword\">FROM</span> sms_wms_out_stock_pm_item m <span class=\"hljs-keyword\">WHERE</span> m.doc_no = t.doc_no <span class=\"hljs-keyword\">GROUP</span> <span class=\"hljs-keyword\">BY</span> m.doc_no) allProject, <span class=\"hljs-comment\">-- 工单</span><br>\t\tt.doc_remark docRemark,  <span class=\"hljs-comment\">-- 备注</span><br><span class=\"hljs-keyword\">from</span> sms_wms_out_stock_doc t<br>        <span class=\"hljs-keyword\">LEFT JOIN</span> sms_wms_io_type A <span class=\"hljs-keyword\">on</span> t.DT_CODE=A.TWT_CODE<br>        <span class=\"hljs-keyword\">WHERE</span><br>        <span class=\"hljs-number\">1</span>=<span class=\"hljs-number\">1</span><br>\t\t&lt;<span class=\"hljs-keyword\">if</span> test=&quot;p.allProject != null and p.allProject != &#x27;&#x27;&quot;&gt;<br>            <span class=\"hljs-keyword\">and</span> (<span class=\"hljs-keyword\">SELECT</span> GROUP_CONCAT(<span class=\"hljs-keyword\">DISTINCT</span> m.project_id) <span class=\"hljs-keyword\">FROM</span> sms_wms_out_stock_pm_item m <span class=\"hljs-keyword\">WHERE</span> m.doc_no = t.doc_no <span class=\"hljs-keyword\">GROUP</span> <span class=\"hljs-keyword\">BY</span> m.doc_no) <span class=\"hljs-keyword\">LIKE</span> <span class=\"hljs-string\">&#x27;%$&#123;p.pickupType&#125;%&#x27;</span><br>        &lt;/<span class=\"hljs-keyword\">if</span>&gt;<br></code></pre></td></tr></table></figure>"},{"title":"Stream&Lambda","date":"2022-09-05T09:09:05.000Z","category_bar":true,"_content":"# Stream&Lambda\n\n+ 测试实体\n\n```\npackage com.hbq.codedemopersion.common.model;\n\n@Data\n@Builder\npublic class F {\n    private String name;\n    private String password;\n    private Integer age;\n    private List<S> s;\n\n    public String fetchGroupKey(){\n        return name+\"#\"+password;\n    }\n\n    @Data\n    @Builder\n    public static class S {\n        public String name;\n    }\n}\n```\n\n+ stream流的测试\n\n```\npackage com.hbq.codedemopersion.common.controller.test;\n\n/**\n * @Author: huibq\n * @Description: 流和Lambda表达式测试\n * @Date: 2021/12/10 13:57\n */\n@Slf4j\npublic class StreamAndLambdaTest {\n    public static void main(String[] args) {\n        log.info(\"-------------数组流------------\");\n        int[] array = new int[]{1, 2, 3};\n        int first = Arrays.stream(array)\n                .findFirst()\n                .orElseThrow(); //取值失败报错\n        log.info(\"[取第一项] array:{} -> first:{}\", array, first);\n        log.info(\"\");\n\n        log.info(\"-------------集合流------------\");\n        List<F> list = List.of(\n                F.builder().age(1).name(\"f1\").build(),\n                F.builder().age(2).name(\"f2\").build(),\n                F.builder().age(3).name(\"f1\").build());\n        log.info(\"↓↓↓↓↓原集合:{}↓↓↓↓↓\", list);\n        list.forEach(e -> log.info(\"[遍历]{} {}\", e.getAge(), e));\n\n        F f = list.stream()\n                .max(Comparator.comparing(F::getAge))\n                .orElseThrow();\n        log.info(\"[取Age最大项] maxModel:{}\", f);\n\n        List<String> nameList = list.stream()\n                .map(F::getName)\n                .collect(Collectors.toList());\n        log.info(\"[取值转换] nameList:{}\", nameList);\n\n        String listString = list.stream()\n                .map(F::getName)\n                .collect(Collectors.joining(\",\", \"[\", \"]\"));\n        log.info(\"[转换后数据处理] listString:{}\", listString);\n\n        List<F> filterList = list.stream()\n                .filter(e -> e.getAge() != 2)\n                .collect(Collectors.toList());\n        log.info(\"[过滤出Age不等于2] filterList:{}\", filterList);\n\n        Map<String, List<F>> groupMap = list.stream()\n                .collect(Collectors.groupingBy(F::getName));\n        log.info(\"[分组] groupMap:{}\", groupMap);\n        log.info(\"\");\n\n        log.info(\"-------------map流------------\");\n        Map<Integer, String> map = new HashMap<>(8) {{\n            put(1, \"HUI\");\n            put(2, \"XUE\");\n        }};\n        Map<Integer, String> newMap = map.entrySet()\n                .stream()\n                .collect(Collectors.toMap(e -> e.getKey() + 1, e -> e.getValue() + 1));\n        log.info(\"map:{} -> newMap:{}\", map, newMap);\n        String collect = map.entrySet().stream()\n                .map(e -> new AutoModel(e.getKey(), e.getValue()))         //转换为实体类型\n                .filter(e -> e.getId() < 100)               //过滤id小于100\n                .limit(2)                               //过滤\n                .distinct()                             //去重\n                .sorted(Comparator.comparing(AutoModel::getId))         //按照id排序\n                .max(Comparator.comparing(AutoModel::getId))            //找最大\n                .stream().map(AutoModel::getName)\n                .collect(Collectors.joining(\",\", \"[\", \"]\"));\n        log.info(\"[组合转换]collect:{}\", collect);\n        log.info(\"\");\n\n        log.info(\"-------------对象list流按照(字段)字段去重并处理其他字段------------\");\n        List<F.S> s1 = new ArrayList<>();\n        s1.add(F.S.builder().name(\"s1\").build());\n        s1.add(F.S.builder().name(\"s2\").build());\n        List<F.S> s2 = new ArrayList<>();\n        s2.add(F.S.builder().name(\"s2\").build());\n        s2.add(F.S.builder().name(\"s3\").build());\n        List<F.S> s3 = new ArrayList<>();\n        s3.add(F.S.builder().name(\"s2\").build());\n        s3.add(F.S.builder().name(\"s3\").build());\n\n        F f1 = F.builder().name(\"f1\").password(\"p1\").age(500).s(s1).build();\n        F f2 = F.builder().name(\"f1\").password(\"p1\").age(600).s(s2).build();\n        F f3 = F.builder().name(\"f2\").age(500).s(s3).build();\n        List<F> orgList = List.of(f1, f2, f3);\n        log.info(\"[原集合orgList] {}\", orgList);\n        List<F> nowList = new ArrayList<>(new ArrayList<>(orgList.stream().collect(\n                //获取重复的组合key，o1 o2\n                Collectors.toMap(F::fetchGroupKey, Function.identity(), (o1, o2) -> {\n                    //age属性求和, 赋值给o1，最后返回o1\n                    o1.setAge(o1.getAge() + o2.getAge());\n                    //合并子对象集合\n                    CollUtil.addAll(o1.getS(), o2.getS());\n                    //去重子对象集合\n                    o1.setS(o1.getS().stream().distinct().collect(Collectors.toList()));\n                    return o1;\n                })).values()));\n        log.info(\"[现集合nowList] {}\", nowList);\n        log.info(\"\");\n\n        log.info(\"-------------FlatMap双层遍历------------\");\n        String names = \"f1,f2\";\n        String ages = \"1,2\";\n        log.info(\"[原集合] names:{} ages:{}\", names, ages);\n        List<F> nowFlatList = Arrays.stream(names.split(\",\"))  //拆分名字\n                .map(name -> Arrays.stream(ages.split(\",\")) //拆分年龄\n                        .map(Integer::valueOf)  //转换年龄为Integer\n                        .map(age -> F.builder().age(age).name(name).build()) //构建对象\n                        .collect(Collectors.toList()))  //内层转换为集合 \n                .flatMap(Collection::stream)    //拆分内层集合\n                .collect(Collectors.toList());  //外层转换为集合\n        log.info(\"[新集合nowFlatList] {}\", nowFlatList);\n    }\n}\n```\n\n+ 测试结果\n\n  ![image-20220720170920523](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720170920523.png)\n","source":"_posts/BookMark/Code Demo/Stream&Lambda.md","raw":"---\ntitle: Stream&Lambda\ndate: 2022-09-05 17:09:05\ncategory_bar: true\ncategories: Code Demo\ntags:\n- Stream\n- Lambda\n---\n# Stream&Lambda\n\n+ 测试实体\n\n```\npackage com.hbq.codedemopersion.common.model;\n\n@Data\n@Builder\npublic class F {\n    private String name;\n    private String password;\n    private Integer age;\n    private List<S> s;\n\n    public String fetchGroupKey(){\n        return name+\"#\"+password;\n    }\n\n    @Data\n    @Builder\n    public static class S {\n        public String name;\n    }\n}\n```\n\n+ stream流的测试\n\n```\npackage com.hbq.codedemopersion.common.controller.test;\n\n/**\n * @Author: huibq\n * @Description: 流和Lambda表达式测试\n * @Date: 2021/12/10 13:57\n */\n@Slf4j\npublic class StreamAndLambdaTest {\n    public static void main(String[] args) {\n        log.info(\"-------------数组流------------\");\n        int[] array = new int[]{1, 2, 3};\n        int first = Arrays.stream(array)\n                .findFirst()\n                .orElseThrow(); //取值失败报错\n        log.info(\"[取第一项] array:{} -> first:{}\", array, first);\n        log.info(\"\");\n\n        log.info(\"-------------集合流------------\");\n        List<F> list = List.of(\n                F.builder().age(1).name(\"f1\").build(),\n                F.builder().age(2).name(\"f2\").build(),\n                F.builder().age(3).name(\"f1\").build());\n        log.info(\"↓↓↓↓↓原集合:{}↓↓↓↓↓\", list);\n        list.forEach(e -> log.info(\"[遍历]{} {}\", e.getAge(), e));\n\n        F f = list.stream()\n                .max(Comparator.comparing(F::getAge))\n                .orElseThrow();\n        log.info(\"[取Age最大项] maxModel:{}\", f);\n\n        List<String> nameList = list.stream()\n                .map(F::getName)\n                .collect(Collectors.toList());\n        log.info(\"[取值转换] nameList:{}\", nameList);\n\n        String listString = list.stream()\n                .map(F::getName)\n                .collect(Collectors.joining(\",\", \"[\", \"]\"));\n        log.info(\"[转换后数据处理] listString:{}\", listString);\n\n        List<F> filterList = list.stream()\n                .filter(e -> e.getAge() != 2)\n                .collect(Collectors.toList());\n        log.info(\"[过滤出Age不等于2] filterList:{}\", filterList);\n\n        Map<String, List<F>> groupMap = list.stream()\n                .collect(Collectors.groupingBy(F::getName));\n        log.info(\"[分组] groupMap:{}\", groupMap);\n        log.info(\"\");\n\n        log.info(\"-------------map流------------\");\n        Map<Integer, String> map = new HashMap<>(8) {{\n            put(1, \"HUI\");\n            put(2, \"XUE\");\n        }};\n        Map<Integer, String> newMap = map.entrySet()\n                .stream()\n                .collect(Collectors.toMap(e -> e.getKey() + 1, e -> e.getValue() + 1));\n        log.info(\"map:{} -> newMap:{}\", map, newMap);\n        String collect = map.entrySet().stream()\n                .map(e -> new AutoModel(e.getKey(), e.getValue()))         //转换为实体类型\n                .filter(e -> e.getId() < 100)               //过滤id小于100\n                .limit(2)                               //过滤\n                .distinct()                             //去重\n                .sorted(Comparator.comparing(AutoModel::getId))         //按照id排序\n                .max(Comparator.comparing(AutoModel::getId))            //找最大\n                .stream().map(AutoModel::getName)\n                .collect(Collectors.joining(\",\", \"[\", \"]\"));\n        log.info(\"[组合转换]collect:{}\", collect);\n        log.info(\"\");\n\n        log.info(\"-------------对象list流按照(字段)字段去重并处理其他字段------------\");\n        List<F.S> s1 = new ArrayList<>();\n        s1.add(F.S.builder().name(\"s1\").build());\n        s1.add(F.S.builder().name(\"s2\").build());\n        List<F.S> s2 = new ArrayList<>();\n        s2.add(F.S.builder().name(\"s2\").build());\n        s2.add(F.S.builder().name(\"s3\").build());\n        List<F.S> s3 = new ArrayList<>();\n        s3.add(F.S.builder().name(\"s2\").build());\n        s3.add(F.S.builder().name(\"s3\").build());\n\n        F f1 = F.builder().name(\"f1\").password(\"p1\").age(500).s(s1).build();\n        F f2 = F.builder().name(\"f1\").password(\"p1\").age(600).s(s2).build();\n        F f3 = F.builder().name(\"f2\").age(500).s(s3).build();\n        List<F> orgList = List.of(f1, f2, f3);\n        log.info(\"[原集合orgList] {}\", orgList);\n        List<F> nowList = new ArrayList<>(new ArrayList<>(orgList.stream().collect(\n                //获取重复的组合key，o1 o2\n                Collectors.toMap(F::fetchGroupKey, Function.identity(), (o1, o2) -> {\n                    //age属性求和, 赋值给o1，最后返回o1\n                    o1.setAge(o1.getAge() + o2.getAge());\n                    //合并子对象集合\n                    CollUtil.addAll(o1.getS(), o2.getS());\n                    //去重子对象集合\n                    o1.setS(o1.getS().stream().distinct().collect(Collectors.toList()));\n                    return o1;\n                })).values()));\n        log.info(\"[现集合nowList] {}\", nowList);\n        log.info(\"\");\n\n        log.info(\"-------------FlatMap双层遍历------------\");\n        String names = \"f1,f2\";\n        String ages = \"1,2\";\n        log.info(\"[原集合] names:{} ages:{}\", names, ages);\n        List<F> nowFlatList = Arrays.stream(names.split(\",\"))  //拆分名字\n                .map(name -> Arrays.stream(ages.split(\",\")) //拆分年龄\n                        .map(Integer::valueOf)  //转换年龄为Integer\n                        .map(age -> F.builder().age(age).name(name).build()) //构建对象\n                        .collect(Collectors.toList()))  //内层转换为集合 \n                .flatMap(Collection::stream)    //拆分内层集合\n                .collect(Collectors.toList());  //外层转换为集合\n        log.info(\"[新集合nowFlatList] {}\", nowFlatList);\n    }\n}\n```\n\n+ 测试结果\n\n  ![image-20220720170920523](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720170920523.png)\n","slug":"BookMark/Code Demo/Stream&Lambda","published":1,"updated":"2022-09-06T06:36:56.279Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl7ptszof000aaba51i2d0jed","content":"<h1><span id=\"streamamplambda\">Stream&amp;Lambda</span></h1><ul>\n<li>测试实体</li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs typescript\">package com.<span class=\"hljs-property\">hbq</span>.<span class=\"hljs-property\">codedemopersion</span>.<span class=\"hljs-property\">common</span>.<span class=\"hljs-property\">model</span>;<br><br><span class=\"hljs-meta\">@Data</span><br><span class=\"hljs-meta\">@Builder</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">F</span> &#123;<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-title class_\">String</span> name;<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-title class_\">String</span> password;<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-title class_\">Integer</span> age;<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-title class_\">List</span>&lt;S&gt; s;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title class_\">String</span> <span class=\"hljs-title function_\">fetchGroupKey</span>(<span class=\"hljs-params\"></span>)&#123;<br>        <span class=\"hljs-keyword\">return</span> name+<span class=\"hljs-string\">&quot;#&quot;</span>+password;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Data</span><br>    <span class=\"hljs-meta\">@Builder</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">S</span> &#123;<br>        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title class_\">String</span> name;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>stream流的测试</li>\n</ul>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\">package com.hbq.codedemopersion.common.controller.test;<br><br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * @Author: huibq</span><br><span class=\"hljs-comment\"> * @Description: 流和Lambda表达式测试</span><br><span class=\"hljs-comment\"> * @Date: 2021/12/10 13:57</span><br><span class=\"hljs-comment\"> */</span><br>@Slf4j<br>public <span class=\"hljs-keyword\">class</span> StreamAndLambdaTest &#123;<br>    public static void main(String<span class=\"hljs-literal\">[]</span> args) &#123;<br>        log.info(<span class=\"hljs-string\">&quot;-------------数组流------------&quot;</span>);<br>        <span class=\"hljs-built_in\">int</span><span class=\"hljs-literal\">[]</span> <span class=\"hljs-built_in\">array</span> = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">int</span><span class=\"hljs-literal\">[]</span>&#123;<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>&#125;;<br>        <span class=\"hljs-built_in\">int</span> first = <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">Arrays</span>.</span></span>stream(<span class=\"hljs-built_in\">array</span>)<br>                .find<span class=\"hljs-constructor\">First()</span><br>                .<span class=\"hljs-keyword\">or</span><span class=\"hljs-constructor\">ElseThrow()</span>; <span class=\"hljs-comment\">//取值失败报错</span><br>        log.info(<span class=\"hljs-string\">&quot;[取第一项] array:&#123;&#125; -&gt; first:&#123;&#125;&quot;</span>, <span class=\"hljs-built_in\">array</span>, first);<br>        log.info(<span class=\"hljs-string\">&quot;&quot;</span>);<br><br>        log.info(<span class=\"hljs-string\">&quot;-------------集合流------------&quot;</span>);<br>        List&lt;F&gt; <span class=\"hljs-built_in\">list</span> = <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">List</span>.</span></span><span class=\"hljs-keyword\">of</span>(<br>                <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">F</span>.</span></span>builder<span class=\"hljs-literal\">()</span>.age(<span class=\"hljs-number\">1</span>).name(<span class=\"hljs-string\">&quot;f1&quot;</span>).build<span class=\"hljs-literal\">()</span>,<br>                <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">F</span>.</span></span>builder<span class=\"hljs-literal\">()</span>.age(<span class=\"hljs-number\">2</span>).name(<span class=\"hljs-string\">&quot;f2&quot;</span>).build<span class=\"hljs-literal\">()</span>,<br>                <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">F</span>.</span></span>builder<span class=\"hljs-literal\">()</span>.age(<span class=\"hljs-number\">3</span>).name(<span class=\"hljs-string\">&quot;f1&quot;</span>).build<span class=\"hljs-literal\">()</span>);<br>        log.info(<span class=\"hljs-string\">&quot;↓↓↓↓↓原集合:&#123;&#125;↓↓↓↓↓&quot;</span>, <span class=\"hljs-built_in\">list</span>);<br>        <span class=\"hljs-built_in\">list</span>.<span class=\"hljs-keyword\">for</span><span class=\"hljs-constructor\">Each(<span class=\"hljs-params\">e</span> -&gt; <span class=\"hljs-params\">log</span>.<span class=\"hljs-params\">info</span>(<span class=\"hljs-string\">&quot;[遍历]&#123;&#125; &#123;&#125;&quot;</span>, <span class=\"hljs-params\">e</span>.<span class=\"hljs-params\">getAge</span>()</span>, e));<br><br>        F f = <span class=\"hljs-built_in\">list</span>.stream<span class=\"hljs-literal\">()</span><br>                .max(<span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">Comparator</span>.</span></span>comparing(F::getAge))<br>                .<span class=\"hljs-keyword\">or</span><span class=\"hljs-constructor\">ElseThrow()</span>;<br>        log.info(<span class=\"hljs-string\">&quot;[取Age最大项] maxModel:&#123;&#125;&quot;</span>, f);<br><br>        List&lt;String&gt; nameList = <span class=\"hljs-built_in\">list</span>.stream<span class=\"hljs-literal\">()</span><br>                .map(F::getName)<br>                .collect(<span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">Collectors</span>.</span></span><span class=\"hljs-keyword\">to</span><span class=\"hljs-constructor\">List()</span>);<br>        log.info(<span class=\"hljs-string\">&quot;[取值转换] nameList:&#123;&#125;&quot;</span>, nameList);<br><br>        String listString = <span class=\"hljs-built_in\">list</span>.stream<span class=\"hljs-literal\">()</span><br>                .map(F::getName)<br>                .collect(<span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">Collectors</span>.</span></span>joining(<span class=\"hljs-string\">&quot;,&quot;</span>, <span class=\"hljs-string\">&quot;[&quot;</span>, <span class=\"hljs-string\">&quot;]&quot;</span>));<br>        log.info(<span class=\"hljs-string\">&quot;[转换后数据处理] listString:&#123;&#125;&quot;</span>, listString);<br><br>        List&lt;F&gt; filterList = <span class=\"hljs-built_in\">list</span>.stream<span class=\"hljs-literal\">()</span><br>                .filter(e -&gt; e.get<span class=\"hljs-constructor\">Age()</span> != <span class=\"hljs-number\">2</span>)<br>                .collect(<span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">Collectors</span>.</span></span><span class=\"hljs-keyword\">to</span><span class=\"hljs-constructor\">List()</span>);<br>        log.info(<span class=\"hljs-string\">&quot;[过滤出Age不等于2] filterList:&#123;&#125;&quot;</span>, filterList);<br><br>        Map&lt;String, List&lt;F&gt;&gt; groupMap = <span class=\"hljs-built_in\">list</span>.stream<span class=\"hljs-literal\">()</span><br>                .collect(<span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">Collectors</span>.</span></span>grouping<span class=\"hljs-constructor\">By(F::<span class=\"hljs-params\">getName</span>)</span>);<br>        log.info(<span class=\"hljs-string\">&quot;[分组] groupMap:&#123;&#125;&quot;</span>, groupMap);<br>        log.info(<span class=\"hljs-string\">&quot;&quot;</span>);<br><br>        log.info(<span class=\"hljs-string\">&quot;-------------map流------------&quot;</span>);<br>        Map&lt;Integer, String&gt; map = <span class=\"hljs-keyword\">new</span> HashMap&lt;&gt;(<span class=\"hljs-number\">8</span>) &#123;&#123;<br>            put(<span class=\"hljs-number\">1</span>, <span class=\"hljs-string\">&quot;HUI&quot;</span>);<br>            put(<span class=\"hljs-number\">2</span>, <span class=\"hljs-string\">&quot;XUE&quot;</span>);<br>        &#125;&#125;;<br>        Map&lt;Integer, String&gt; newMap = map.entry<span class=\"hljs-constructor\">Set()</span><br>                .stream<span class=\"hljs-literal\">()</span><br>                .collect(<span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">Collectors</span>.</span></span><span class=\"hljs-keyword\">to</span><span class=\"hljs-constructor\">Map(<span class=\"hljs-params\">e</span> -&gt; <span class=\"hljs-params\">e</span>.<span class=\"hljs-params\">getKey</span>()</span> + <span class=\"hljs-number\">1</span>, e -&gt; e.get<span class=\"hljs-constructor\">Value()</span> + <span class=\"hljs-number\">1</span>));<br>        log.info(<span class=\"hljs-string\">&quot;map:&#123;&#125; -&gt; newMap:&#123;&#125;&quot;</span>, map, newMap);<br>        String collect = map.entry<span class=\"hljs-constructor\">Set()</span>.stream<span class=\"hljs-literal\">()</span><br>                .map(e -&gt; <span class=\"hljs-keyword\">new</span> <span class=\"hljs-constructor\">AutoModel(<span class=\"hljs-params\">e</span>.<span class=\"hljs-params\">getKey</span>()</span>, e.get<span class=\"hljs-constructor\">Value()</span>))         <span class=\"hljs-comment\">//转换为实体类型</span><br>                .filter(e -&gt; e.get<span class=\"hljs-constructor\">Id()</span> &lt; <span class=\"hljs-number\">100</span>)               <span class=\"hljs-comment\">//过滤id小于100</span><br>                .limit(<span class=\"hljs-number\">2</span>)                               <span class=\"hljs-comment\">//过滤</span><br>                .distinct<span class=\"hljs-literal\">()</span>                             <span class=\"hljs-comment\">//去重</span><br>                .sorted(<span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">Comparator</span>.</span></span>comparing(AutoModel::getId))         <span class=\"hljs-comment\">//按照id排序</span><br>                .max(<span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">Comparator</span>.</span></span>comparing(AutoModel::getId))            <span class=\"hljs-comment\">//找最大</span><br>                .stream<span class=\"hljs-literal\">()</span>.map(AutoModel::getName)<br>                .collect(<span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">Collectors</span>.</span></span>joining(<span class=\"hljs-string\">&quot;,&quot;</span>, <span class=\"hljs-string\">&quot;[&quot;</span>, <span class=\"hljs-string\">&quot;]&quot;</span>));<br>        log.info(<span class=\"hljs-string\">&quot;[组合转换]collect:&#123;&#125;&quot;</span>, collect);<br>        log.info(<span class=\"hljs-string\">&quot;&quot;</span>);<br><br>        log.info(<span class=\"hljs-string\">&quot;-------------对象list流按照(字段)字段去重并处理其他字段------------&quot;</span>);<br>        List&lt;F.S&gt; s1 = <span class=\"hljs-keyword\">new</span> ArrayList&lt;&gt;<span class=\"hljs-literal\">()</span>;<br>        s1.add(<span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">F</span>.</span><span class=\"hljs-module\"><span class=\"hljs-identifier\">S</span>.</span></span>builder<span class=\"hljs-literal\">()</span>.name(<span class=\"hljs-string\">&quot;s1&quot;</span>).build<span class=\"hljs-literal\">()</span>);<br>        s1.add(<span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">F</span>.</span><span class=\"hljs-module\"><span class=\"hljs-identifier\">S</span>.</span></span>builder<span class=\"hljs-literal\">()</span>.name(<span class=\"hljs-string\">&quot;s2&quot;</span>).build<span class=\"hljs-literal\">()</span>);<br>        List&lt;F.S&gt; s2 = <span class=\"hljs-keyword\">new</span> ArrayList&lt;&gt;<span class=\"hljs-literal\">()</span>;<br>        s2.add(<span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">F</span>.</span><span class=\"hljs-module\"><span class=\"hljs-identifier\">S</span>.</span></span>builder<span class=\"hljs-literal\">()</span>.name(<span class=\"hljs-string\">&quot;s2&quot;</span>).build<span class=\"hljs-literal\">()</span>);<br>        s2.add(<span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">F</span>.</span><span class=\"hljs-module\"><span class=\"hljs-identifier\">S</span>.</span></span>builder<span class=\"hljs-literal\">()</span>.name(<span class=\"hljs-string\">&quot;s3&quot;</span>).build<span class=\"hljs-literal\">()</span>);<br>        List&lt;F.S&gt; s3 = <span class=\"hljs-keyword\">new</span> ArrayList&lt;&gt;<span class=\"hljs-literal\">()</span>;<br>        s3.add(<span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">F</span>.</span><span class=\"hljs-module\"><span class=\"hljs-identifier\">S</span>.</span></span>builder<span class=\"hljs-literal\">()</span>.name(<span class=\"hljs-string\">&quot;s2&quot;</span>).build<span class=\"hljs-literal\">()</span>);<br>        s3.add(<span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">F</span>.</span><span class=\"hljs-module\"><span class=\"hljs-identifier\">S</span>.</span></span>builder<span class=\"hljs-literal\">()</span>.name(<span class=\"hljs-string\">&quot;s3&quot;</span>).build<span class=\"hljs-literal\">()</span>);<br><br>        F f1 = <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">F</span>.</span></span>builder<span class=\"hljs-literal\">()</span>.name(<span class=\"hljs-string\">&quot;f1&quot;</span>).password(<span class=\"hljs-string\">&quot;p1&quot;</span>).age(<span class=\"hljs-number\">500</span>).s(s1).build<span class=\"hljs-literal\">()</span>;<br>        F f2 = <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">F</span>.</span></span>builder<span class=\"hljs-literal\">()</span>.name(<span class=\"hljs-string\">&quot;f1&quot;</span>).password(<span class=\"hljs-string\">&quot;p1&quot;</span>).age(<span class=\"hljs-number\">600</span>).s(s2).build<span class=\"hljs-literal\">()</span>;<br>        F f3 = <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">F</span>.</span></span>builder<span class=\"hljs-literal\">()</span>.name(<span class=\"hljs-string\">&quot;f2&quot;</span>).age(<span class=\"hljs-number\">500</span>).s(s3).build<span class=\"hljs-literal\">()</span>;<br>        List&lt;F&gt; orgList = <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">List</span>.</span></span><span class=\"hljs-keyword\">of</span>(f1, f2, f3);<br>        log.info(<span class=\"hljs-string\">&quot;[原集合orgList] &#123;&#125;&quot;</span>, orgList);<br>        List&lt;F&gt; nowList = <span class=\"hljs-keyword\">new</span> ArrayList&lt;&gt;(<span class=\"hljs-keyword\">new</span> ArrayList&lt;&gt;(orgList.stream<span class=\"hljs-literal\">()</span>.collect(<br>                <span class=\"hljs-comment\">//获取重复的组合key，o1 o2</span><br>                <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">Collectors</span>.</span></span><span class=\"hljs-keyword\">to</span><span class=\"hljs-constructor\">Map(F::<span class=\"hljs-params\">fetchGroupKey</span>, Function.<span class=\"hljs-params\">identity</span>()</span>, (o1, o2) -&gt; &#123;<br>                    <span class=\"hljs-comment\">//age属性求和, 赋值给o1，最后返回o1</span><br>                    o1.set<span class=\"hljs-constructor\">Age(<span class=\"hljs-params\">o1</span>.<span class=\"hljs-params\">getAge</span>()</span> + o2.get<span class=\"hljs-constructor\">Age()</span>);<br>                    <span class=\"hljs-comment\">//合并子对象集合</span><br>                    <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">CollUtil</span>.</span></span>add<span class=\"hljs-constructor\">All(<span class=\"hljs-params\">o1</span>.<span class=\"hljs-params\">getS</span>()</span>, o2.get<span class=\"hljs-constructor\">S()</span>);<br>                    <span class=\"hljs-comment\">//去重子对象集合</span><br>                    o1.set<span class=\"hljs-constructor\">S(<span class=\"hljs-params\">o1</span>.<span class=\"hljs-params\">getS</span>()</span>.stream<span class=\"hljs-literal\">()</span>.distinct<span class=\"hljs-literal\">()</span>.collect(<span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">Collectors</span>.</span></span><span class=\"hljs-keyword\">to</span><span class=\"hljs-constructor\">List()</span>));<br>                    return o1;<br>                &#125;)).values<span class=\"hljs-literal\">()</span>));<br>        log.info(<span class=\"hljs-string\">&quot;[现集合nowList] &#123;&#125;&quot;</span>, nowList);<br>        log.info(<span class=\"hljs-string\">&quot;&quot;</span>);<br><br>        log.info(<span class=\"hljs-string\">&quot;-------------FlatMap双层遍历------------&quot;</span>);<br>        String names = <span class=\"hljs-string\">&quot;f1,f2&quot;</span>;<br>        String ages = <span class=\"hljs-string\">&quot;1,2&quot;</span>;<br>        log.info(<span class=\"hljs-string\">&quot;[原集合] names:&#123;&#125; ages:&#123;&#125;&quot;</span>, names, ages);<br>        List&lt;F&gt; nowFlatList = <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">Arrays</span>.</span></span>stream(names.split(<span class=\"hljs-string\">&quot;,&quot;</span>))  <span class=\"hljs-comment\">//拆分名字</span><br>                .map(name -&gt; <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">Arrays</span>.</span></span>stream(ages.split(<span class=\"hljs-string\">&quot;,&quot;</span>)) <span class=\"hljs-comment\">//拆分年龄</span><br>                        .map(Integer::valueOf)  <span class=\"hljs-comment\">//转换年龄为Integer</span><br>                        .map(age -&gt; <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">F</span>.</span></span>builder<span class=\"hljs-literal\">()</span>.age(age).name(name).build<span class=\"hljs-literal\">()</span>) <span class=\"hljs-comment\">//构建对象</span><br>                        .collect(<span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">Collectors</span>.</span></span><span class=\"hljs-keyword\">to</span><span class=\"hljs-constructor\">List()</span>))  <span class=\"hljs-comment\">//内层转换为集合 </span><br>                .flat<span class=\"hljs-constructor\">Map(Collection::<span class=\"hljs-params\">stream</span>)</span>    <span class=\"hljs-comment\">//拆分内层集合</span><br>                .collect(<span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">Collectors</span>.</span></span><span class=\"hljs-keyword\">to</span><span class=\"hljs-constructor\">List()</span>);  <span class=\"hljs-comment\">//外层转换为集合</span><br>        log.info(<span class=\"hljs-string\">&quot;[新集合nowFlatList] &#123;&#125;&quot;</span>, nowFlatList);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li><p>测试结果</p>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720170920523.png\" alt=\"image-20220720170920523\"></p>\n</li>\n</ul>\n","site":{"data":{}},"wordcount":4933,"excerpt":"","more":"<h1 id=\"Stream-amp-Lambda\"><a href=\"#Stream-amp-Lambda\" class=\"headerlink\" title=\"Stream&amp;Lambda\"></a>Stream&amp;Lambda</h1><ul>\n<li>测试实体</li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs typescript\">package com.<span class=\"hljs-property\">hbq</span>.<span class=\"hljs-property\">codedemopersion</span>.<span class=\"hljs-property\">common</span>.<span class=\"hljs-property\">model</span>;<br><br><span class=\"hljs-meta\">@Data</span><br><span class=\"hljs-meta\">@Builder</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">F</span> &#123;<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-title class_\">String</span> name;<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-title class_\">String</span> password;<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-title class_\">Integer</span> age;<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-title class_\">List</span>&lt;S&gt; s;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title class_\">String</span> <span class=\"hljs-title function_\">fetchGroupKey</span>(<span class=\"hljs-params\"></span>)&#123;<br>        <span class=\"hljs-keyword\">return</span> name+<span class=\"hljs-string\">&quot;#&quot;</span>+password;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Data</span><br>    <span class=\"hljs-meta\">@Builder</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">S</span> &#123;<br>        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title class_\">String</span> name;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>stream流的测试</li>\n</ul>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\">package com.hbq.codedemopersion.common.controller.test;<br><br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * @Author: huibq</span><br><span class=\"hljs-comment\"> * @Description: 流和Lambda表达式测试</span><br><span class=\"hljs-comment\"> * @Date: 2021/12/10 13:57</span><br><span class=\"hljs-comment\"> */</span><br>@Slf4j<br>public <span class=\"hljs-keyword\">class</span> StreamAndLambdaTest &#123;<br>    public static void main(String<span class=\"hljs-literal\">[]</span> args) &#123;<br>        log.info(<span class=\"hljs-string\">&quot;-------------数组流------------&quot;</span>);<br>        <span class=\"hljs-built_in\">int</span><span class=\"hljs-literal\">[]</span> <span class=\"hljs-built_in\">array</span> = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">int</span><span class=\"hljs-literal\">[]</span>&#123;<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>&#125;;<br>        <span class=\"hljs-built_in\">int</span> first = <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">Arrays</span>.</span></span>stream(<span class=\"hljs-built_in\">array</span>)<br>                .find<span class=\"hljs-constructor\">First()</span><br>                .<span class=\"hljs-keyword\">or</span><span class=\"hljs-constructor\">ElseThrow()</span>; <span class=\"hljs-comment\">//取值失败报错</span><br>        log.info(<span class=\"hljs-string\">&quot;[取第一项] array:&#123;&#125; -&gt; first:&#123;&#125;&quot;</span>, <span class=\"hljs-built_in\">array</span>, first);<br>        log.info(<span class=\"hljs-string\">&quot;&quot;</span>);<br><br>        log.info(<span class=\"hljs-string\">&quot;-------------集合流------------&quot;</span>);<br>        List&lt;F&gt; <span class=\"hljs-built_in\">list</span> = <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">List</span>.</span></span><span class=\"hljs-keyword\">of</span>(<br>                <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">F</span>.</span></span>builder<span class=\"hljs-literal\">()</span>.age(<span class=\"hljs-number\">1</span>).name(<span class=\"hljs-string\">&quot;f1&quot;</span>).build<span class=\"hljs-literal\">()</span>,<br>                <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">F</span>.</span></span>builder<span class=\"hljs-literal\">()</span>.age(<span class=\"hljs-number\">2</span>).name(<span class=\"hljs-string\">&quot;f2&quot;</span>).build<span class=\"hljs-literal\">()</span>,<br>                <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">F</span>.</span></span>builder<span class=\"hljs-literal\">()</span>.age(<span class=\"hljs-number\">3</span>).name(<span class=\"hljs-string\">&quot;f1&quot;</span>).build<span class=\"hljs-literal\">()</span>);<br>        log.info(<span class=\"hljs-string\">&quot;↓↓↓↓↓原集合:&#123;&#125;↓↓↓↓↓&quot;</span>, <span class=\"hljs-built_in\">list</span>);<br>        <span class=\"hljs-built_in\">list</span>.<span class=\"hljs-keyword\">for</span><span class=\"hljs-constructor\">Each(<span class=\"hljs-params\">e</span> -&gt; <span class=\"hljs-params\">log</span>.<span class=\"hljs-params\">info</span>(<span class=\"hljs-string\">&quot;[遍历]&#123;&#125; &#123;&#125;&quot;</span>, <span class=\"hljs-params\">e</span>.<span class=\"hljs-params\">getAge</span>()</span>, e));<br><br>        F f = <span class=\"hljs-built_in\">list</span>.stream<span class=\"hljs-literal\">()</span><br>                .max(<span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">Comparator</span>.</span></span>comparing(F::getAge))<br>                .<span class=\"hljs-keyword\">or</span><span class=\"hljs-constructor\">ElseThrow()</span>;<br>        log.info(<span class=\"hljs-string\">&quot;[取Age最大项] maxModel:&#123;&#125;&quot;</span>, f);<br><br>        List&lt;String&gt; nameList = <span class=\"hljs-built_in\">list</span>.stream<span class=\"hljs-literal\">()</span><br>                .map(F::getName)<br>                .collect(<span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">Collectors</span>.</span></span><span class=\"hljs-keyword\">to</span><span class=\"hljs-constructor\">List()</span>);<br>        log.info(<span class=\"hljs-string\">&quot;[取值转换] nameList:&#123;&#125;&quot;</span>, nameList);<br><br>        String listString = <span class=\"hljs-built_in\">list</span>.stream<span class=\"hljs-literal\">()</span><br>                .map(F::getName)<br>                .collect(<span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">Collectors</span>.</span></span>joining(<span class=\"hljs-string\">&quot;,&quot;</span>, <span class=\"hljs-string\">&quot;[&quot;</span>, <span class=\"hljs-string\">&quot;]&quot;</span>));<br>        log.info(<span class=\"hljs-string\">&quot;[转换后数据处理] listString:&#123;&#125;&quot;</span>, listString);<br><br>        List&lt;F&gt; filterList = <span class=\"hljs-built_in\">list</span>.stream<span class=\"hljs-literal\">()</span><br>                .filter(e -&gt; e.get<span class=\"hljs-constructor\">Age()</span> != <span class=\"hljs-number\">2</span>)<br>                .collect(<span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">Collectors</span>.</span></span><span class=\"hljs-keyword\">to</span><span class=\"hljs-constructor\">List()</span>);<br>        log.info(<span class=\"hljs-string\">&quot;[过滤出Age不等于2] filterList:&#123;&#125;&quot;</span>, filterList);<br><br>        Map&lt;String, List&lt;F&gt;&gt; groupMap = <span class=\"hljs-built_in\">list</span>.stream<span class=\"hljs-literal\">()</span><br>                .collect(<span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">Collectors</span>.</span></span>grouping<span class=\"hljs-constructor\">By(F::<span class=\"hljs-params\">getName</span>)</span>);<br>        log.info(<span class=\"hljs-string\">&quot;[分组] groupMap:&#123;&#125;&quot;</span>, groupMap);<br>        log.info(<span class=\"hljs-string\">&quot;&quot;</span>);<br><br>        log.info(<span class=\"hljs-string\">&quot;-------------map流------------&quot;</span>);<br>        Map&lt;Integer, String&gt; map = <span class=\"hljs-keyword\">new</span> HashMap&lt;&gt;(<span class=\"hljs-number\">8</span>) &#123;&#123;<br>            put(<span class=\"hljs-number\">1</span>, <span class=\"hljs-string\">&quot;HUI&quot;</span>);<br>            put(<span class=\"hljs-number\">2</span>, <span class=\"hljs-string\">&quot;XUE&quot;</span>);<br>        &#125;&#125;;<br>        Map&lt;Integer, String&gt; newMap = map.entry<span class=\"hljs-constructor\">Set()</span><br>                .stream<span class=\"hljs-literal\">()</span><br>                .collect(<span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">Collectors</span>.</span></span><span class=\"hljs-keyword\">to</span><span class=\"hljs-constructor\">Map(<span class=\"hljs-params\">e</span> -&gt; <span class=\"hljs-params\">e</span>.<span class=\"hljs-params\">getKey</span>()</span> + <span class=\"hljs-number\">1</span>, e -&gt; e.get<span class=\"hljs-constructor\">Value()</span> + <span class=\"hljs-number\">1</span>));<br>        log.info(<span class=\"hljs-string\">&quot;map:&#123;&#125; -&gt; newMap:&#123;&#125;&quot;</span>, map, newMap);<br>        String collect = map.entry<span class=\"hljs-constructor\">Set()</span>.stream<span class=\"hljs-literal\">()</span><br>                .map(e -&gt; <span class=\"hljs-keyword\">new</span> <span class=\"hljs-constructor\">AutoModel(<span class=\"hljs-params\">e</span>.<span class=\"hljs-params\">getKey</span>()</span>, e.get<span class=\"hljs-constructor\">Value()</span>))         <span class=\"hljs-comment\">//转换为实体类型</span><br>                .filter(e -&gt; e.get<span class=\"hljs-constructor\">Id()</span> &lt; <span class=\"hljs-number\">100</span>)               <span class=\"hljs-comment\">//过滤id小于100</span><br>                .limit(<span class=\"hljs-number\">2</span>)                               <span class=\"hljs-comment\">//过滤</span><br>                .distinct<span class=\"hljs-literal\">()</span>                             <span class=\"hljs-comment\">//去重</span><br>                .sorted(<span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">Comparator</span>.</span></span>comparing(AutoModel::getId))         <span class=\"hljs-comment\">//按照id排序</span><br>                .max(<span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">Comparator</span>.</span></span>comparing(AutoModel::getId))            <span class=\"hljs-comment\">//找最大</span><br>                .stream<span class=\"hljs-literal\">()</span>.map(AutoModel::getName)<br>                .collect(<span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">Collectors</span>.</span></span>joining(<span class=\"hljs-string\">&quot;,&quot;</span>, <span class=\"hljs-string\">&quot;[&quot;</span>, <span class=\"hljs-string\">&quot;]&quot;</span>));<br>        log.info(<span class=\"hljs-string\">&quot;[组合转换]collect:&#123;&#125;&quot;</span>, collect);<br>        log.info(<span class=\"hljs-string\">&quot;&quot;</span>);<br><br>        log.info(<span class=\"hljs-string\">&quot;-------------对象list流按照(字段)字段去重并处理其他字段------------&quot;</span>);<br>        List&lt;F.S&gt; s1 = <span class=\"hljs-keyword\">new</span> ArrayList&lt;&gt;<span class=\"hljs-literal\">()</span>;<br>        s1.add(<span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">F</span>.</span><span class=\"hljs-module\"><span class=\"hljs-identifier\">S</span>.</span></span>builder<span class=\"hljs-literal\">()</span>.name(<span class=\"hljs-string\">&quot;s1&quot;</span>).build<span class=\"hljs-literal\">()</span>);<br>        s1.add(<span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">F</span>.</span><span class=\"hljs-module\"><span class=\"hljs-identifier\">S</span>.</span></span>builder<span class=\"hljs-literal\">()</span>.name(<span class=\"hljs-string\">&quot;s2&quot;</span>).build<span class=\"hljs-literal\">()</span>);<br>        List&lt;F.S&gt; s2 = <span class=\"hljs-keyword\">new</span> ArrayList&lt;&gt;<span class=\"hljs-literal\">()</span>;<br>        s2.add(<span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">F</span>.</span><span class=\"hljs-module\"><span class=\"hljs-identifier\">S</span>.</span></span>builder<span class=\"hljs-literal\">()</span>.name(<span class=\"hljs-string\">&quot;s2&quot;</span>).build<span class=\"hljs-literal\">()</span>);<br>        s2.add(<span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">F</span>.</span><span class=\"hljs-module\"><span class=\"hljs-identifier\">S</span>.</span></span>builder<span class=\"hljs-literal\">()</span>.name(<span class=\"hljs-string\">&quot;s3&quot;</span>).build<span class=\"hljs-literal\">()</span>);<br>        List&lt;F.S&gt; s3 = <span class=\"hljs-keyword\">new</span> ArrayList&lt;&gt;<span class=\"hljs-literal\">()</span>;<br>        s3.add(<span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">F</span>.</span><span class=\"hljs-module\"><span class=\"hljs-identifier\">S</span>.</span></span>builder<span class=\"hljs-literal\">()</span>.name(<span class=\"hljs-string\">&quot;s2&quot;</span>).build<span class=\"hljs-literal\">()</span>);<br>        s3.add(<span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">F</span>.</span><span class=\"hljs-module\"><span class=\"hljs-identifier\">S</span>.</span></span>builder<span class=\"hljs-literal\">()</span>.name(<span class=\"hljs-string\">&quot;s3&quot;</span>).build<span class=\"hljs-literal\">()</span>);<br><br>        F f1 = <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">F</span>.</span></span>builder<span class=\"hljs-literal\">()</span>.name(<span class=\"hljs-string\">&quot;f1&quot;</span>).password(<span class=\"hljs-string\">&quot;p1&quot;</span>).age(<span class=\"hljs-number\">500</span>).s(s1).build<span class=\"hljs-literal\">()</span>;<br>        F f2 = <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">F</span>.</span></span>builder<span class=\"hljs-literal\">()</span>.name(<span class=\"hljs-string\">&quot;f1&quot;</span>).password(<span class=\"hljs-string\">&quot;p1&quot;</span>).age(<span class=\"hljs-number\">600</span>).s(s2).build<span class=\"hljs-literal\">()</span>;<br>        F f3 = <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">F</span>.</span></span>builder<span class=\"hljs-literal\">()</span>.name(<span class=\"hljs-string\">&quot;f2&quot;</span>).age(<span class=\"hljs-number\">500</span>).s(s3).build<span class=\"hljs-literal\">()</span>;<br>        List&lt;F&gt; orgList = <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">List</span>.</span></span><span class=\"hljs-keyword\">of</span>(f1, f2, f3);<br>        log.info(<span class=\"hljs-string\">&quot;[原集合orgList] &#123;&#125;&quot;</span>, orgList);<br>        List&lt;F&gt; nowList = <span class=\"hljs-keyword\">new</span> ArrayList&lt;&gt;(<span class=\"hljs-keyword\">new</span> ArrayList&lt;&gt;(orgList.stream<span class=\"hljs-literal\">()</span>.collect(<br>                <span class=\"hljs-comment\">//获取重复的组合key，o1 o2</span><br>                <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">Collectors</span>.</span></span><span class=\"hljs-keyword\">to</span><span class=\"hljs-constructor\">Map(F::<span class=\"hljs-params\">fetchGroupKey</span>, Function.<span class=\"hljs-params\">identity</span>()</span>, (o1, o2) -&gt; &#123;<br>                    <span class=\"hljs-comment\">//age属性求和, 赋值给o1，最后返回o1</span><br>                    o1.set<span class=\"hljs-constructor\">Age(<span class=\"hljs-params\">o1</span>.<span class=\"hljs-params\">getAge</span>()</span> + o2.get<span class=\"hljs-constructor\">Age()</span>);<br>                    <span class=\"hljs-comment\">//合并子对象集合</span><br>                    <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">CollUtil</span>.</span></span>add<span class=\"hljs-constructor\">All(<span class=\"hljs-params\">o1</span>.<span class=\"hljs-params\">getS</span>()</span>, o2.get<span class=\"hljs-constructor\">S()</span>);<br>                    <span class=\"hljs-comment\">//去重子对象集合</span><br>                    o1.set<span class=\"hljs-constructor\">S(<span class=\"hljs-params\">o1</span>.<span class=\"hljs-params\">getS</span>()</span>.stream<span class=\"hljs-literal\">()</span>.distinct<span class=\"hljs-literal\">()</span>.collect(<span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">Collectors</span>.</span></span><span class=\"hljs-keyword\">to</span><span class=\"hljs-constructor\">List()</span>));<br>                    return o1;<br>                &#125;)).values<span class=\"hljs-literal\">()</span>));<br>        log.info(<span class=\"hljs-string\">&quot;[现集合nowList] &#123;&#125;&quot;</span>, nowList);<br>        log.info(<span class=\"hljs-string\">&quot;&quot;</span>);<br><br>        log.info(<span class=\"hljs-string\">&quot;-------------FlatMap双层遍历------------&quot;</span>);<br>        String names = <span class=\"hljs-string\">&quot;f1,f2&quot;</span>;<br>        String ages = <span class=\"hljs-string\">&quot;1,2&quot;</span>;<br>        log.info(<span class=\"hljs-string\">&quot;[原集合] names:&#123;&#125; ages:&#123;&#125;&quot;</span>, names, ages);<br>        List&lt;F&gt; nowFlatList = <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">Arrays</span>.</span></span>stream(names.split(<span class=\"hljs-string\">&quot;,&quot;</span>))  <span class=\"hljs-comment\">//拆分名字</span><br>                .map(name -&gt; <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">Arrays</span>.</span></span>stream(ages.split(<span class=\"hljs-string\">&quot;,&quot;</span>)) <span class=\"hljs-comment\">//拆分年龄</span><br>                        .map(Integer::valueOf)  <span class=\"hljs-comment\">//转换年龄为Integer</span><br>                        .map(age -&gt; <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">F</span>.</span></span>builder<span class=\"hljs-literal\">()</span>.age(age).name(name).build<span class=\"hljs-literal\">()</span>) <span class=\"hljs-comment\">//构建对象</span><br>                        .collect(<span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">Collectors</span>.</span></span><span class=\"hljs-keyword\">to</span><span class=\"hljs-constructor\">List()</span>))  <span class=\"hljs-comment\">//内层转换为集合 </span><br>                .flat<span class=\"hljs-constructor\">Map(Collection::<span class=\"hljs-params\">stream</span>)</span>    <span class=\"hljs-comment\">//拆分内层集合</span><br>                .collect(<span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">Collectors</span>.</span></span><span class=\"hljs-keyword\">to</span><span class=\"hljs-constructor\">List()</span>);  <span class=\"hljs-comment\">//外层转换为集合</span><br>        log.info(<span class=\"hljs-string\">&quot;[新集合nowFlatList] &#123;&#125;&quot;</span>, nowFlatList);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li><p>测试结果</p>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720170920523.png\" alt=\"image-20220720170920523\"></p>\n</li>\n</ul>\n"},{"title":"sql中上下移置顶置底置换的排序实现","date":"2022-09-05T09:09:05.000Z","category_bar":true,"_content":"# sql中上下移置顶置底置换的排序实现\n\n---\n\n[toc]\n\n---\n## 一、 场景介绍\n+ 某个需要排序的表格，按照组别进行上下移置顶置底置换操作。其中sort越小，优先级越高。\n\n---\n## 二、 实现思路\n1. 上移：找到本组中本数据的上一条数据，如果没有说明已为顶部，无需上移。如果存在，二者交换sort\n2. 下移：找到本组中本数据的下一条数据，如果没有说明已为底部，无需下移。如果存在，二者交换sort\n3. 置顶：在确保非顶部时，找到该分组的最小sort，sort-1置给本数据\n4. 置底：在确保非底部时，找到该分组的最大sort，sort+1置给本数据\n5. 交换：传入两组数据交换sort即可\n\n---\n\n## 三、具体实现\n```\n// controller\n    @ApiOperation(value = \"上移 \")\n    @PostMapping(\"/upper\")\n    public Result increase(@RequestBody Map<String,Object> map) {\n        return pdtReplaceItemService.presentToBefore(map);\n    }\n    @ApiOperation(value = \"下移 \")\n    @PostMapping(\"/lower\")\n    public Result lower(@RequestBody Map<String,Object> map) {\n        return pdtReplaceItemService.presentToAfter(map);\n    }\n    @ApiOperation(value = \"置顶 \")\n    @PostMapping(\"/top\")\n    public Result head(@RequestBody Map<String, Object> map) {\n        return pdtReplaceItemService.head(map);\n    }\n    @ApiOperation(value = \"置底 \")\n    @PostMapping(\"/bottom\")\n    public Result tail(@RequestBody Map<String, Object> map) {\n        return  pdtReplaceItemService.tail(map);\n    }\n    @ApiOperation(value = \"互换 \")\n    @PostMapping(\"/exchange\")\n    public Result exchange(@RequestBody  Map<String, Object> map) {\n        return pdtReplaceItemService.exchange(map);\n    }\n```\n```\n//serviceImpl\n @Override\npublic Result presentToBefore(Map<String,Object> map){\n\tLong id = MapUtil.getLong(map,\"id\");\n\tPdtReplaceItem replaceItem = pdtReplaceItemMapper.selectById(id);\n\tString replaceGroup = replaceItem.getReplaceGroup();\n\tLong ownerSort = replaceItem.getSort();\n\tPdtReplaceItem beforeReplaceItem = pdtReplaceItemMapper.getBefore(ownerSort,replaceGroup);\n\tif (beforeReplaceItem == null) {\n\t\treturn Result.failed(\"已为顶部，无需上移\");\n\t}\n\tLong beforeSort = beforeReplaceItem.getSort();\n\treplaceItem.setSort(beforeSort);\n\tbeforeReplaceItem.setSort(ownerSort);\n\tpdtReplaceItemMapper.updateById(replaceItem);\n\tpdtReplaceItemMapper.updateById(beforeReplaceItem);\n\treturn Result.succeed(\"上移成功\");\n}\n@Override\npublic Result presentToAfter(Map<String,Object> map){\n\tLong id = MapUtil.getLong(map,\"id\");\n\tPdtReplaceItem replaceItem = pdtReplaceItemMapper.selectById(id);\n\tString replaceGroup = replaceItem.getReplaceGroup();\n\tLong ownerSort = replaceItem.getSort();\n\tPdtReplaceItem afterReplaceItem = pdtReplaceItemMapper.getAfter(ownerSort,replaceGroup);\n\tif (afterReplaceItem == null) {\n\t\treturn Result.failed(\"已为底部，无需下移\");\n\t}\n\tLong afterSort = afterReplaceItem.getSort();\n\treplaceItem.setSort(afterSort);\n\tafterReplaceItem.setSort(ownerSort);\n\tpdtReplaceItemMapper.updateById(replaceItem);\n\tpdtReplaceItemMapper.updateById(afterReplaceItem);\n\treturn Result.succeed(\"下移成功\");\n}\n@Override\npublic Result head(Map<String, Object> map){\n\tLong id = MapUtil.getLong(map, \"id\");\n\tPdtReplaceItem replaceItem = pdtReplaceItemMapper.selectById(id);\n\tString replaceGroup = replaceItem.getReplaceGroup();\n\tLong ownerSort = replaceItem.getSort();\n\tPdtReplaceItem beforeReplaceItem = pdtReplaceItemMapper.getBefore(ownerSort,replaceGroup);\n\tif (beforeReplaceItem == null) {\n\t\treturn Result.failed(\"已为顶部，无需上移\");\n\t}\n\tLong minSort = pdtReplaceItemMapper.minSort(replaceGroup);\n\treplaceItem.setSort(minSort - 1);\n\tpdtReplaceItemMapper.updateById(replaceItem);\n\treturn Result.succeed(\"置顶成功\");\n}\n@Override\npublic Result tail(Map<String, Object> map){\n\tLong id = MapUtil.getLong(map, \"id\");\n\tPdtReplaceItem replaceItem = pdtReplaceItemMapper.selectById(id);\n\tString replaceGroup = replaceItem.getReplaceGroup();\n\tLong ownerSort = replaceItem.getSort();\n\tPdtReplaceItem afterReplaceItem = pdtReplaceItemMapper.getAfter(ownerSort,replaceGroup);\n\tif (afterReplaceItem == null) {\n\t\treturn Result.failed(\"已为底部，无需下移\");\n\t}\n\tLong maxSort = pdtReplaceItemMapper.maxSort(replaceGroup);\n\treplaceItem.setSort(maxSort + 1);\n\tpdtReplaceItemMapper.updateById(replaceItem);\n\treturn Result.succeed(\"置底成功\");\n}\n@Override\npublic Result exchange(Map<String, Object> map){\n\tLong ownerId = MapUtil.getLong(map,\"ownerId\");\n\tLong otherId = MapUtil.getLong(map,\"otherId\");\n\tPdtReplaceItem owner = pdtReplaceItemMapper.selectById(ownerId);\n\tPdtReplaceItem other = pdtReplaceItemMapper.selectById(otherId);\n\tlong ownerSort = owner.getSort();\n\tlong otherSort = other.getSort();\n\towner.setSort(otherSort);\n\tother.setSort(ownerSort);\n\tpdtReplaceItemMapper.updateById(owner);\n\tpdtReplaceItemMapper.updateById(other);\n\treturn Result.succeed(\"交换成功\");\n}\n```\n```\n/**\n * @param ownerSort 自己的排序\n * @param replaceGroup  自己所在分组\n * @return  上一条记录，如果没有返回空\n */\nPdtReplaceItem getBefore(@Param(\"ownerSort\") Long ownerSort, @Param(\"replaceGroup\") String replaceGroup);\n\n/**\n * @param ownerSort 自己的排序\n * @param replaceGroup  自己所在分组\n * @return  下一条记录，如果没有返回空\n */\nPdtReplaceItem getAfter(@Param(\"ownerSort\") Long ownerSort, @Param(\"replaceGroup\") String replaceGroup);\n\n/**\n * @param replaceGroup 自己所在分组\n * @return 该分组最小的排序\n */\nLong minSort(@Param(\"replaceGroup\") String replaceGroup);\n\n/**\n * @param replaceGroup 自己所在分组\n * @return 该分组最大的排序\n */\nLong maxSort(@Param(\"replaceGroup\") String replaceGroup);\n```\n```\n//xml\n<select id=\"getBefore\" resultType=\"com.yk.i_wms.model.PdtReplaceItem\">\n\tSELECT\n\t\t*\n\tFROM\n\t\tpdt_replace_item\n\tWHERE\n\t\treplace_group=#{replaceGroup}\n\t  AND #{ownerSort} > sort\n\tORDER BY sort DESC,id DESC\n\tLIMIT 0,1;\n</select>\n<select id=\"getAfter\" resultType=\"com.yk.i_wms.model.PdtReplaceItem\">\n\tSELECT\n\t\t*\n\tFROM\n\t\tpdt_replace_item\n\tWHERE\n\t\treplace_group=#{replaceGroup}\n\t  AND sort > #{ownerSort}\n\tORDER BY sort ASC,id ASC\n\tLIMIT 0,1;\n</select>\n<select id=\"minSort\" resultType=\"java.lang.Long\">\n\tselect MIN(sort) from pdt_replace_item where replace_group=#{replaceGroup}\n</select>\n<select id=\"maxSort\" resultType=\"java.lang.Long\">\n\tselect MAX(sort) from pdt_replace_item where replace_group=#{replaceGroup}\n</select>\n```\n","source":"_posts/BookMark/Code Demo/sql中上下移置顶置底置换的排序实现.md","raw":"---\ntitle: sql中上下移置顶置底置换的排序实现\ndate: 2022-09-05 17:09:05\ncategory_bar: true\ncategories: Code Demo\ntags:\n- mysql\n---\n# sql中上下移置顶置底置换的排序实现\n\n---\n\n[toc]\n\n---\n## 一、 场景介绍\n+ 某个需要排序的表格，按照组别进行上下移置顶置底置换操作。其中sort越小，优先级越高。\n\n---\n## 二、 实现思路\n1. 上移：找到本组中本数据的上一条数据，如果没有说明已为顶部，无需上移。如果存在，二者交换sort\n2. 下移：找到本组中本数据的下一条数据，如果没有说明已为底部，无需下移。如果存在，二者交换sort\n3. 置顶：在确保非顶部时，找到该分组的最小sort，sort-1置给本数据\n4. 置底：在确保非底部时，找到该分组的最大sort，sort+1置给本数据\n5. 交换：传入两组数据交换sort即可\n\n---\n\n## 三、具体实现\n```\n// controller\n    @ApiOperation(value = \"上移 \")\n    @PostMapping(\"/upper\")\n    public Result increase(@RequestBody Map<String,Object> map) {\n        return pdtReplaceItemService.presentToBefore(map);\n    }\n    @ApiOperation(value = \"下移 \")\n    @PostMapping(\"/lower\")\n    public Result lower(@RequestBody Map<String,Object> map) {\n        return pdtReplaceItemService.presentToAfter(map);\n    }\n    @ApiOperation(value = \"置顶 \")\n    @PostMapping(\"/top\")\n    public Result head(@RequestBody Map<String, Object> map) {\n        return pdtReplaceItemService.head(map);\n    }\n    @ApiOperation(value = \"置底 \")\n    @PostMapping(\"/bottom\")\n    public Result tail(@RequestBody Map<String, Object> map) {\n        return  pdtReplaceItemService.tail(map);\n    }\n    @ApiOperation(value = \"互换 \")\n    @PostMapping(\"/exchange\")\n    public Result exchange(@RequestBody  Map<String, Object> map) {\n        return pdtReplaceItemService.exchange(map);\n    }\n```\n```\n//serviceImpl\n @Override\npublic Result presentToBefore(Map<String,Object> map){\n\tLong id = MapUtil.getLong(map,\"id\");\n\tPdtReplaceItem replaceItem = pdtReplaceItemMapper.selectById(id);\n\tString replaceGroup = replaceItem.getReplaceGroup();\n\tLong ownerSort = replaceItem.getSort();\n\tPdtReplaceItem beforeReplaceItem = pdtReplaceItemMapper.getBefore(ownerSort,replaceGroup);\n\tif (beforeReplaceItem == null) {\n\t\treturn Result.failed(\"已为顶部，无需上移\");\n\t}\n\tLong beforeSort = beforeReplaceItem.getSort();\n\treplaceItem.setSort(beforeSort);\n\tbeforeReplaceItem.setSort(ownerSort);\n\tpdtReplaceItemMapper.updateById(replaceItem);\n\tpdtReplaceItemMapper.updateById(beforeReplaceItem);\n\treturn Result.succeed(\"上移成功\");\n}\n@Override\npublic Result presentToAfter(Map<String,Object> map){\n\tLong id = MapUtil.getLong(map,\"id\");\n\tPdtReplaceItem replaceItem = pdtReplaceItemMapper.selectById(id);\n\tString replaceGroup = replaceItem.getReplaceGroup();\n\tLong ownerSort = replaceItem.getSort();\n\tPdtReplaceItem afterReplaceItem = pdtReplaceItemMapper.getAfter(ownerSort,replaceGroup);\n\tif (afterReplaceItem == null) {\n\t\treturn Result.failed(\"已为底部，无需下移\");\n\t}\n\tLong afterSort = afterReplaceItem.getSort();\n\treplaceItem.setSort(afterSort);\n\tafterReplaceItem.setSort(ownerSort);\n\tpdtReplaceItemMapper.updateById(replaceItem);\n\tpdtReplaceItemMapper.updateById(afterReplaceItem);\n\treturn Result.succeed(\"下移成功\");\n}\n@Override\npublic Result head(Map<String, Object> map){\n\tLong id = MapUtil.getLong(map, \"id\");\n\tPdtReplaceItem replaceItem = pdtReplaceItemMapper.selectById(id);\n\tString replaceGroup = replaceItem.getReplaceGroup();\n\tLong ownerSort = replaceItem.getSort();\n\tPdtReplaceItem beforeReplaceItem = pdtReplaceItemMapper.getBefore(ownerSort,replaceGroup);\n\tif (beforeReplaceItem == null) {\n\t\treturn Result.failed(\"已为顶部，无需上移\");\n\t}\n\tLong minSort = pdtReplaceItemMapper.minSort(replaceGroup);\n\treplaceItem.setSort(minSort - 1);\n\tpdtReplaceItemMapper.updateById(replaceItem);\n\treturn Result.succeed(\"置顶成功\");\n}\n@Override\npublic Result tail(Map<String, Object> map){\n\tLong id = MapUtil.getLong(map, \"id\");\n\tPdtReplaceItem replaceItem = pdtReplaceItemMapper.selectById(id);\n\tString replaceGroup = replaceItem.getReplaceGroup();\n\tLong ownerSort = replaceItem.getSort();\n\tPdtReplaceItem afterReplaceItem = pdtReplaceItemMapper.getAfter(ownerSort,replaceGroup);\n\tif (afterReplaceItem == null) {\n\t\treturn Result.failed(\"已为底部，无需下移\");\n\t}\n\tLong maxSort = pdtReplaceItemMapper.maxSort(replaceGroup);\n\treplaceItem.setSort(maxSort + 1);\n\tpdtReplaceItemMapper.updateById(replaceItem);\n\treturn Result.succeed(\"置底成功\");\n}\n@Override\npublic Result exchange(Map<String, Object> map){\n\tLong ownerId = MapUtil.getLong(map,\"ownerId\");\n\tLong otherId = MapUtil.getLong(map,\"otherId\");\n\tPdtReplaceItem owner = pdtReplaceItemMapper.selectById(ownerId);\n\tPdtReplaceItem other = pdtReplaceItemMapper.selectById(otherId);\n\tlong ownerSort = owner.getSort();\n\tlong otherSort = other.getSort();\n\towner.setSort(otherSort);\n\tother.setSort(ownerSort);\n\tpdtReplaceItemMapper.updateById(owner);\n\tpdtReplaceItemMapper.updateById(other);\n\treturn Result.succeed(\"交换成功\");\n}\n```\n```\n/**\n * @param ownerSort 自己的排序\n * @param replaceGroup  自己所在分组\n * @return  上一条记录，如果没有返回空\n */\nPdtReplaceItem getBefore(@Param(\"ownerSort\") Long ownerSort, @Param(\"replaceGroup\") String replaceGroup);\n\n/**\n * @param ownerSort 自己的排序\n * @param replaceGroup  自己所在分组\n * @return  下一条记录，如果没有返回空\n */\nPdtReplaceItem getAfter(@Param(\"ownerSort\") Long ownerSort, @Param(\"replaceGroup\") String replaceGroup);\n\n/**\n * @param replaceGroup 自己所在分组\n * @return 该分组最小的排序\n */\nLong minSort(@Param(\"replaceGroup\") String replaceGroup);\n\n/**\n * @param replaceGroup 自己所在分组\n * @return 该分组最大的排序\n */\nLong maxSort(@Param(\"replaceGroup\") String replaceGroup);\n```\n```\n//xml\n<select id=\"getBefore\" resultType=\"com.yk.i_wms.model.PdtReplaceItem\">\n\tSELECT\n\t\t*\n\tFROM\n\t\tpdt_replace_item\n\tWHERE\n\t\treplace_group=#{replaceGroup}\n\t  AND #{ownerSort} > sort\n\tORDER BY sort DESC,id DESC\n\tLIMIT 0,1;\n</select>\n<select id=\"getAfter\" resultType=\"com.yk.i_wms.model.PdtReplaceItem\">\n\tSELECT\n\t\t*\n\tFROM\n\t\tpdt_replace_item\n\tWHERE\n\t\treplace_group=#{replaceGroup}\n\t  AND sort > #{ownerSort}\n\tORDER BY sort ASC,id ASC\n\tLIMIT 0,1;\n</select>\n<select id=\"minSort\" resultType=\"java.lang.Long\">\n\tselect MIN(sort) from pdt_replace_item where replace_group=#{replaceGroup}\n</select>\n<select id=\"maxSort\" resultType=\"java.lang.Long\">\n\tselect MAX(sort) from pdt_replace_item where replace_group=#{replaceGroup}\n</select>\n```\n","slug":"BookMark/Code Demo/sql中上下移置顶置底置换的排序实现","published":1,"updated":"2022-09-06T06:51:51.103Z","_id":"cl7ptszof000baba52emxh7px","comments":1,"layout":"post","photos":[],"link":"","content":"<h1><span id=\"sql中上下移置顶置底置换的排序实现\">sql中上下移置顶置底置换的排序实现</span></h1><hr>\n<p>[toc]</p>\n<hr>\n<h2><span id=\"一-场景介绍\">一、 场景介绍</span></h2><ul>\n<li>某个需要排序的表格，按照组别进行上下移置顶置底置换操作。其中sort越小，优先级越高。</li>\n</ul>\n<hr>\n<h2><span id=\"二-实现思路\">二、 实现思路</span></h2><ol>\n<li>上移：找到本组中本数据的上一条数据，如果没有说明已为顶部，无需上移。如果存在，二者交换sort</li>\n<li>下移：找到本组中本数据的下一条数据，如果没有说明已为底部，无需下移。如果存在，二者交换sort</li>\n<li>置顶：在确保非顶部时，找到该分组的最小sort，sort-1置给本数据</li>\n<li>置底：在确保非底部时，找到该分组的最大sort，sort+1置给本数据</li>\n<li>交换：传入两组数据交换sort即可</li>\n</ol>\n<hr>\n<h2><span id=\"三-具体实现\">三、具体实现</span></h2><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs less\"><span class=\"hljs-comment\">// controller</span><br>    <span class=\"hljs-variable\">@ApiOperation</span>(value = <span class=\"hljs-string\">&quot;上移 &quot;</span>)<br>    <span class=\"hljs-variable\">@PostMapping</span>(<span class=\"hljs-string\">&quot;/upper&quot;</span>)<br>    public Result <span class=\"hljs-built_in\">increase</span>(<span class=\"hljs-variable\">@RequestBody</span> Map&lt;String,Object&gt; map) &#123;<br>        <span class=\"hljs-selector-tag\">return</span> <span class=\"hljs-selector-tag\">pdtReplaceItemService</span><span class=\"hljs-selector-class\">.presentToBefore</span>(map);<br>    &#125;<br>    @<span class=\"hljs-selector-tag\">ApiOperation</span>(value = <span class=\"hljs-string\">&quot;下移 &quot;</span>)<br>    @<span class=\"hljs-selector-tag\">PostMapping</span>(<span class=\"hljs-string\">&quot;/lower&quot;</span>)<br>    <span class=\"hljs-selector-tag\">public</span> <span class=\"hljs-selector-tag\">Result</span> <span class=\"hljs-selector-tag\">lower</span>(<span class=\"hljs-variable\">@RequestBody</span> Map&lt;String,Object&gt; map) &#123;<br>        <span class=\"hljs-selector-tag\">return</span> <span class=\"hljs-selector-tag\">pdtReplaceItemService</span><span class=\"hljs-selector-class\">.presentToAfter</span>(map);<br>    &#125;<br>    @<span class=\"hljs-selector-tag\">ApiOperation</span>(value = <span class=\"hljs-string\">&quot;置顶 &quot;</span>)<br>    @<span class=\"hljs-selector-tag\">PostMapping</span>(<span class=\"hljs-string\">&quot;/top&quot;</span>)<br>    <span class=\"hljs-selector-tag\">public</span> <span class=\"hljs-selector-tag\">Result</span> <span class=\"hljs-selector-tag\">head</span>(<span class=\"hljs-variable\">@RequestBody</span> Map&lt;String, Object&gt; map) &#123;<br>        <span class=\"hljs-selector-tag\">return</span> <span class=\"hljs-selector-tag\">pdtReplaceItemService</span><span class=\"hljs-selector-class\">.head</span>(map);<br>    &#125;<br>    @<span class=\"hljs-selector-tag\">ApiOperation</span>(value = <span class=\"hljs-string\">&quot;置底 &quot;</span>)<br>    @<span class=\"hljs-selector-tag\">PostMapping</span>(<span class=\"hljs-string\">&quot;/bottom&quot;</span>)<br>    <span class=\"hljs-selector-tag\">public</span> <span class=\"hljs-selector-tag\">Result</span> <span class=\"hljs-selector-tag\">tail</span>(<span class=\"hljs-variable\">@RequestBody</span> Map&lt;String, Object&gt; map) &#123;<br>        <span class=\"hljs-selector-tag\">return</span>  <span class=\"hljs-selector-tag\">pdtReplaceItemService</span><span class=\"hljs-selector-class\">.tail</span>(map);<br>    &#125;<br>    @<span class=\"hljs-selector-tag\">ApiOperation</span>(value = <span class=\"hljs-string\">&quot;互换 &quot;</span>)<br>    @<span class=\"hljs-selector-tag\">PostMapping</span>(<span class=\"hljs-string\">&quot;/exchange&quot;</span>)<br>    <span class=\"hljs-selector-tag\">public</span> <span class=\"hljs-selector-tag\">Result</span> <span class=\"hljs-selector-tag\">exchange</span>(<span class=\"hljs-variable\">@RequestBody</span>  Map&lt;String, Object&gt; map) &#123;<br>        <span class=\"hljs-selector-tag\">return</span> <span class=\"hljs-selector-tag\">pdtReplaceItemService</span><span class=\"hljs-selector-class\">.exchange</span>(map);<br>    &#125;<br></code></pre></td></tr></table></figure>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\"><span class=\"hljs-comment\">//serviceImpl</span><br> @Override<br>public Result present<span class=\"hljs-constructor\">ToBefore(Map&lt;String,Object&gt; <span class=\"hljs-params\">map</span>)</span>&#123;<br>\tLong id = <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">MapUtil</span>.</span></span>get<span class=\"hljs-constructor\">Long(<span class=\"hljs-params\">map</span>,<span class=\"hljs-string\">&quot;id&quot;</span>)</span>;<br>\tPdtReplaceItem replaceItem = pdtReplaceItemMapper.select<span class=\"hljs-constructor\">ById(<span class=\"hljs-params\">id</span>)</span>;<br>\tString replaceGroup = replaceItem.get<span class=\"hljs-constructor\">ReplaceGroup()</span>;<br>\tLong ownerSort = replaceItem.get<span class=\"hljs-constructor\">Sort()</span>;<br>\tPdtReplaceItem beforeReplaceItem = pdtReplaceItemMapper.get<span class=\"hljs-constructor\">Before(<span class=\"hljs-params\">ownerSort</span>,<span class=\"hljs-params\">replaceGroup</span>)</span>;<br>\t<span class=\"hljs-keyword\">if</span> (beforeReplaceItem<span class=\"hljs-operator\"> == </span>null) &#123;<br>\t\treturn <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">Result</span>.</span></span>failed(<span class=\"hljs-string\">&quot;已为顶部，无需上移&quot;</span>);<br>\t&#125;<br>\tLong beforeSort = beforeReplaceItem.get<span class=\"hljs-constructor\">Sort()</span>;<br>\treplaceItem.set<span class=\"hljs-constructor\">Sort(<span class=\"hljs-params\">beforeSort</span>)</span>;<br>\tbeforeReplaceItem.set<span class=\"hljs-constructor\">Sort(<span class=\"hljs-params\">ownerSort</span>)</span>;<br>\tpdtReplaceItemMapper.update<span class=\"hljs-constructor\">ById(<span class=\"hljs-params\">replaceItem</span>)</span>;<br>\tpdtReplaceItemMapper.update<span class=\"hljs-constructor\">ById(<span class=\"hljs-params\">beforeReplaceItem</span>)</span>;<br>\treturn <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">Result</span>.</span></span>succeed(<span class=\"hljs-string\">&quot;上移成功&quot;</span>);<br>&#125;<br>@Override<br>public Result present<span class=\"hljs-constructor\">ToAfter(Map&lt;String,Object&gt; <span class=\"hljs-params\">map</span>)</span>&#123;<br>\tLong id = <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">MapUtil</span>.</span></span>get<span class=\"hljs-constructor\">Long(<span class=\"hljs-params\">map</span>,<span class=\"hljs-string\">&quot;id&quot;</span>)</span>;<br>\tPdtReplaceItem replaceItem = pdtReplaceItemMapper.select<span class=\"hljs-constructor\">ById(<span class=\"hljs-params\">id</span>)</span>;<br>\tString replaceGroup = replaceItem.get<span class=\"hljs-constructor\">ReplaceGroup()</span>;<br>\tLong ownerSort = replaceItem.get<span class=\"hljs-constructor\">Sort()</span>;<br>\tPdtReplaceItem afterReplaceItem = pdtReplaceItemMapper.get<span class=\"hljs-constructor\">After(<span class=\"hljs-params\">ownerSort</span>,<span class=\"hljs-params\">replaceGroup</span>)</span>;<br>\t<span class=\"hljs-keyword\">if</span> (afterReplaceItem<span class=\"hljs-operator\"> == </span>null) &#123;<br>\t\treturn <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">Result</span>.</span></span>failed(<span class=\"hljs-string\">&quot;已为底部，无需下移&quot;</span>);<br>\t&#125;<br>\tLong afterSort = afterReplaceItem.get<span class=\"hljs-constructor\">Sort()</span>;<br>\treplaceItem.set<span class=\"hljs-constructor\">Sort(<span class=\"hljs-params\">afterSort</span>)</span>;<br>\tafterReplaceItem.set<span class=\"hljs-constructor\">Sort(<span class=\"hljs-params\">ownerSort</span>)</span>;<br>\tpdtReplaceItemMapper.update<span class=\"hljs-constructor\">ById(<span class=\"hljs-params\">replaceItem</span>)</span>;<br>\tpdtReplaceItemMapper.update<span class=\"hljs-constructor\">ById(<span class=\"hljs-params\">afterReplaceItem</span>)</span>;<br>\treturn <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">Result</span>.</span></span>succeed(<span class=\"hljs-string\">&quot;下移成功&quot;</span>);<br>&#125;<br>@Override<br>public Result head(Map&lt;String, Object&gt; map)&#123;<br>\tLong id = <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">MapUtil</span>.</span></span>get<span class=\"hljs-constructor\">Long(<span class=\"hljs-params\">map</span>, <span class=\"hljs-string\">&quot;id&quot;</span>)</span>;<br>\tPdtReplaceItem replaceItem = pdtReplaceItemMapper.select<span class=\"hljs-constructor\">ById(<span class=\"hljs-params\">id</span>)</span>;<br>\tString replaceGroup = replaceItem.get<span class=\"hljs-constructor\">ReplaceGroup()</span>;<br>\tLong ownerSort = replaceItem.get<span class=\"hljs-constructor\">Sort()</span>;<br>\tPdtReplaceItem beforeReplaceItem = pdtReplaceItemMapper.get<span class=\"hljs-constructor\">Before(<span class=\"hljs-params\">ownerSort</span>,<span class=\"hljs-params\">replaceGroup</span>)</span>;<br>\t<span class=\"hljs-keyword\">if</span> (beforeReplaceItem<span class=\"hljs-operator\"> == </span>null) &#123;<br>\t\treturn <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">Result</span>.</span></span>failed(<span class=\"hljs-string\">&quot;已为顶部，无需上移&quot;</span>);<br>\t&#125;<br>\tLong minSort = pdtReplaceItemMapper.min<span class=\"hljs-constructor\">Sort(<span class=\"hljs-params\">replaceGroup</span>)</span>;<br>\treplaceItem.set<span class=\"hljs-constructor\">Sort(<span class=\"hljs-params\">minSort</span> - 1)</span>;<br>\tpdtReplaceItemMapper.update<span class=\"hljs-constructor\">ById(<span class=\"hljs-params\">replaceItem</span>)</span>;<br>\treturn <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">Result</span>.</span></span>succeed(<span class=\"hljs-string\">&quot;置顶成功&quot;</span>);<br>&#125;<br>@Override<br>public Result tail(Map&lt;String, Object&gt; map)&#123;<br>\tLong id = <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">MapUtil</span>.</span></span>get<span class=\"hljs-constructor\">Long(<span class=\"hljs-params\">map</span>, <span class=\"hljs-string\">&quot;id&quot;</span>)</span>;<br>\tPdtReplaceItem replaceItem = pdtReplaceItemMapper.select<span class=\"hljs-constructor\">ById(<span class=\"hljs-params\">id</span>)</span>;<br>\tString replaceGroup = replaceItem.get<span class=\"hljs-constructor\">ReplaceGroup()</span>;<br>\tLong ownerSort = replaceItem.get<span class=\"hljs-constructor\">Sort()</span>;<br>\tPdtReplaceItem afterReplaceItem = pdtReplaceItemMapper.get<span class=\"hljs-constructor\">After(<span class=\"hljs-params\">ownerSort</span>,<span class=\"hljs-params\">replaceGroup</span>)</span>;<br>\t<span class=\"hljs-keyword\">if</span> (afterReplaceItem<span class=\"hljs-operator\"> == </span>null) &#123;<br>\t\treturn <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">Result</span>.</span></span>failed(<span class=\"hljs-string\">&quot;已为底部，无需下移&quot;</span>);<br>\t&#125;<br>\tLong maxSort = pdtReplaceItemMapper.max<span class=\"hljs-constructor\">Sort(<span class=\"hljs-params\">replaceGroup</span>)</span>;<br>\treplaceItem.set<span class=\"hljs-constructor\">Sort(<span class=\"hljs-params\">maxSort</span> + 1)</span>;<br>\tpdtReplaceItemMapper.update<span class=\"hljs-constructor\">ById(<span class=\"hljs-params\">replaceItem</span>)</span>;<br>\treturn <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">Result</span>.</span></span>succeed(<span class=\"hljs-string\">&quot;置底成功&quot;</span>);<br>&#125;<br>@Override<br>public Result exchange(Map&lt;String, Object&gt; map)&#123;<br>\tLong ownerId = <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">MapUtil</span>.</span></span>get<span class=\"hljs-constructor\">Long(<span class=\"hljs-params\">map</span>,<span class=\"hljs-string\">&quot;ownerId&quot;</span>)</span>;<br>\tLong otherId = <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">MapUtil</span>.</span></span>get<span class=\"hljs-constructor\">Long(<span class=\"hljs-params\">map</span>,<span class=\"hljs-string\">&quot;otherId&quot;</span>)</span>;<br>\tPdtReplaceItem owner = pdtReplaceItemMapper.select<span class=\"hljs-constructor\">ById(<span class=\"hljs-params\">ownerId</span>)</span>;<br>\tPdtReplaceItem other = pdtReplaceItemMapper.select<span class=\"hljs-constructor\">ById(<span class=\"hljs-params\">otherId</span>)</span>;<br>\tlong ownerSort = owner.get<span class=\"hljs-constructor\">Sort()</span>;<br>\tlong otherSort = other.get<span class=\"hljs-constructor\">Sort()</span>;<br>\towner.set<span class=\"hljs-constructor\">Sort(<span class=\"hljs-params\">otherSort</span>)</span>;<br>\tother.set<span class=\"hljs-constructor\">Sort(<span class=\"hljs-params\">ownerSort</span>)</span>;<br>\tpdtReplaceItemMapper.update<span class=\"hljs-constructor\">ById(<span class=\"hljs-params\">owner</span>)</span>;<br>\tpdtReplaceItemMapper.update<span class=\"hljs-constructor\">ById(<span class=\"hljs-params\">other</span>)</span>;<br>\treturn <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">Result</span>.</span></span>succeed(<span class=\"hljs-string\">&quot;交换成功&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs less\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * @param ownerSort 自己的排序</span><br><span class=\"hljs-comment\"> * @param replaceGroup  自己所在分组</span><br><span class=\"hljs-comment\"> * @return  上一条记录，如果没有返回空</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-selector-tag\">PdtReplaceItem</span> <span class=\"hljs-selector-tag\">getBefore</span>(<span class=\"hljs-variable\">@Param</span>(<span class=\"hljs-string\">&quot;ownerSort&quot;</span>) Long ownerSort, <span class=\"hljs-variable\">@Param</span>(<span class=\"hljs-string\">&quot;replaceGroup&quot;</span>) String replaceGroup);<br><br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * @param ownerSort 自己的排序</span><br><span class=\"hljs-comment\"> * @param replaceGroup  自己所在分组</span><br><span class=\"hljs-comment\"> * @return  下一条记录，如果没有返回空</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-selector-tag\">PdtReplaceItem</span> <span class=\"hljs-selector-tag\">getAfter</span>(<span class=\"hljs-variable\">@Param</span>(<span class=\"hljs-string\">&quot;ownerSort&quot;</span>) Long ownerSort, <span class=\"hljs-variable\">@Param</span>(<span class=\"hljs-string\">&quot;replaceGroup&quot;</span>) String replaceGroup);<br><br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * @param replaceGroup 自己所在分组</span><br><span class=\"hljs-comment\"> * @return 该分组最小的排序</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-selector-tag\">Long</span> <span class=\"hljs-selector-tag\">minSort</span>(<span class=\"hljs-variable\">@Param</span>(<span class=\"hljs-string\">&quot;replaceGroup&quot;</span>) String replaceGroup);<br><br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * @param replaceGroup 自己所在分组</span><br><span class=\"hljs-comment\"> * @return 该分组最大的排序</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-selector-tag\">Long</span> <span class=\"hljs-selector-tag\">maxSort</span>(<span class=\"hljs-variable\">@Param</span>(<span class=\"hljs-string\">&quot;replaceGroup&quot;</span>) String replaceGroup);<br></code></pre></td></tr></table></figure>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pgsql\">//<span class=\"hljs-type\">xml</span><br>&lt;<span class=\"hljs-keyword\">select</span> id=&quot;getBefore&quot; resultType=&quot;com.yk.i_wms.model.PdtReplaceItem&quot;&gt;<br>\t<span class=\"hljs-keyword\">SELECT</span><br>\t\t*<br>\t<span class=\"hljs-keyword\">FROM</span><br>\t\tpdt_replace_item<br>\t<span class=\"hljs-keyword\">WHERE</span><br>\t\treplace_group=#&#123;replaceGroup&#125;<br>\t  <span class=\"hljs-keyword\">AND</span> #&#123;ownerSort&#125; &gt; sort<br>\t<span class=\"hljs-keyword\">ORDER</span> <span class=\"hljs-keyword\">BY</span> sort <span class=\"hljs-keyword\">DESC</span>,id <span class=\"hljs-keyword\">DESC</span><br>\t<span class=\"hljs-keyword\">LIMIT</span> <span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">1</span>;<br>&lt;/<span class=\"hljs-keyword\">select</span>&gt;<br>&lt;<span class=\"hljs-keyword\">select</span> id=&quot;getAfter&quot; resultType=&quot;com.yk.i_wms.model.PdtReplaceItem&quot;&gt;<br>\t<span class=\"hljs-keyword\">SELECT</span><br>\t\t*<br>\t<span class=\"hljs-keyword\">FROM</span><br>\t\tpdt_replace_item<br>\t<span class=\"hljs-keyword\">WHERE</span><br>\t\treplace_group=#&#123;replaceGroup&#125;<br>\t  <span class=\"hljs-keyword\">AND</span> sort &gt; #&#123;ownerSort&#125;<br>\t<span class=\"hljs-keyword\">ORDER</span> <span class=\"hljs-keyword\">BY</span> sort <span class=\"hljs-keyword\">ASC</span>,id <span class=\"hljs-keyword\">ASC</span><br>\t<span class=\"hljs-keyword\">LIMIT</span> <span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">1</span>;<br>&lt;/<span class=\"hljs-keyword\">select</span>&gt;<br>&lt;<span class=\"hljs-keyword\">select</span> id=&quot;minSort&quot; resultType=&quot;java.lang.Long&quot;&gt;<br>\t<span class=\"hljs-keyword\">select</span> MIN(sort) <span class=\"hljs-keyword\">from</span> pdt_replace_item <span class=\"hljs-keyword\">where</span> replace_group=#&#123;replaceGroup&#125;<br>&lt;/<span class=\"hljs-keyword\">select</span>&gt;<br>&lt;<span class=\"hljs-keyword\">select</span> id=&quot;maxSort&quot; resultType=&quot;java.lang.Long&quot;&gt;<br>\t<span class=\"hljs-keyword\">select</span> MAX(sort) <span class=\"hljs-keyword\">from</span> pdt_replace_item <span class=\"hljs-keyword\">where</span> replace_group=#&#123;replaceGroup&#125;<br>&lt;/<span class=\"hljs-keyword\">select</span>&gt;<br></code></pre></td></tr></table></figure>\n","site":{"data":{}},"wordcount":5972,"excerpt":"","more":"<h1 id=\"sql中上下移置顶置底置换的排序实现\"><a href=\"#sql中上下移置顶置底置换的排序实现\" class=\"headerlink\" title=\"sql中上下移置顶置底置换的排序实现\"></a>sql中上下移置顶置底置换的排序实现</h1><hr>\n<p>[toc]</p>\n<hr>\n<h2 id=\"一、-场景介绍\"><a href=\"#一、-场景介绍\" class=\"headerlink\" title=\"一、 场景介绍\"></a>一、 场景介绍</h2><ul>\n<li>某个需要排序的表格，按照组别进行上下移置顶置底置换操作。其中sort越小，优先级越高。</li>\n</ul>\n<hr>\n<h2 id=\"二、-实现思路\"><a href=\"#二、-实现思路\" class=\"headerlink\" title=\"二、 实现思路\"></a>二、 实现思路</h2><ol>\n<li>上移：找到本组中本数据的上一条数据，如果没有说明已为顶部，无需上移。如果存在，二者交换sort</li>\n<li>下移：找到本组中本数据的下一条数据，如果没有说明已为底部，无需下移。如果存在，二者交换sort</li>\n<li>置顶：在确保非顶部时，找到该分组的最小sort，sort-1置给本数据</li>\n<li>置底：在确保非底部时，找到该分组的最大sort，sort+1置给本数据</li>\n<li>交换：传入两组数据交换sort即可</li>\n</ol>\n<hr>\n<h2 id=\"三、具体实现\"><a href=\"#三、具体实现\" class=\"headerlink\" title=\"三、具体实现\"></a>三、具体实现</h2><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs less\"><span class=\"hljs-comment\">// controller</span><br>    <span class=\"hljs-variable\">@ApiOperation</span>(value = <span class=\"hljs-string\">&quot;上移 &quot;</span>)<br>    <span class=\"hljs-variable\">@PostMapping</span>(<span class=\"hljs-string\">&quot;/upper&quot;</span>)<br>    public Result <span class=\"hljs-built_in\">increase</span>(<span class=\"hljs-variable\">@RequestBody</span> Map&lt;String,Object&gt; map) &#123;<br>        <span class=\"hljs-selector-tag\">return</span> <span class=\"hljs-selector-tag\">pdtReplaceItemService</span><span class=\"hljs-selector-class\">.presentToBefore</span>(map);<br>    &#125;<br>    @<span class=\"hljs-selector-tag\">ApiOperation</span>(value = <span class=\"hljs-string\">&quot;下移 &quot;</span>)<br>    @<span class=\"hljs-selector-tag\">PostMapping</span>(<span class=\"hljs-string\">&quot;/lower&quot;</span>)<br>    <span class=\"hljs-selector-tag\">public</span> <span class=\"hljs-selector-tag\">Result</span> <span class=\"hljs-selector-tag\">lower</span>(<span class=\"hljs-variable\">@RequestBody</span> Map&lt;String,Object&gt; map) &#123;<br>        <span class=\"hljs-selector-tag\">return</span> <span class=\"hljs-selector-tag\">pdtReplaceItemService</span><span class=\"hljs-selector-class\">.presentToAfter</span>(map);<br>    &#125;<br>    @<span class=\"hljs-selector-tag\">ApiOperation</span>(value = <span class=\"hljs-string\">&quot;置顶 &quot;</span>)<br>    @<span class=\"hljs-selector-tag\">PostMapping</span>(<span class=\"hljs-string\">&quot;/top&quot;</span>)<br>    <span class=\"hljs-selector-tag\">public</span> <span class=\"hljs-selector-tag\">Result</span> <span class=\"hljs-selector-tag\">head</span>(<span class=\"hljs-variable\">@RequestBody</span> Map&lt;String, Object&gt; map) &#123;<br>        <span class=\"hljs-selector-tag\">return</span> <span class=\"hljs-selector-tag\">pdtReplaceItemService</span><span class=\"hljs-selector-class\">.head</span>(map);<br>    &#125;<br>    @<span class=\"hljs-selector-tag\">ApiOperation</span>(value = <span class=\"hljs-string\">&quot;置底 &quot;</span>)<br>    @<span class=\"hljs-selector-tag\">PostMapping</span>(<span class=\"hljs-string\">&quot;/bottom&quot;</span>)<br>    <span class=\"hljs-selector-tag\">public</span> <span class=\"hljs-selector-tag\">Result</span> <span class=\"hljs-selector-tag\">tail</span>(<span class=\"hljs-variable\">@RequestBody</span> Map&lt;String, Object&gt; map) &#123;<br>        <span class=\"hljs-selector-tag\">return</span>  <span class=\"hljs-selector-tag\">pdtReplaceItemService</span><span class=\"hljs-selector-class\">.tail</span>(map);<br>    &#125;<br>    @<span class=\"hljs-selector-tag\">ApiOperation</span>(value = <span class=\"hljs-string\">&quot;互换 &quot;</span>)<br>    @<span class=\"hljs-selector-tag\">PostMapping</span>(<span class=\"hljs-string\">&quot;/exchange&quot;</span>)<br>    <span class=\"hljs-selector-tag\">public</span> <span class=\"hljs-selector-tag\">Result</span> <span class=\"hljs-selector-tag\">exchange</span>(<span class=\"hljs-variable\">@RequestBody</span>  Map&lt;String, Object&gt; map) &#123;<br>        <span class=\"hljs-selector-tag\">return</span> <span class=\"hljs-selector-tag\">pdtReplaceItemService</span><span class=\"hljs-selector-class\">.exchange</span>(map);<br>    &#125;<br></code></pre></td></tr></table></figure>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\"><span class=\"hljs-comment\">//serviceImpl</span><br> @Override<br>public Result present<span class=\"hljs-constructor\">ToBefore(Map&lt;String,Object&gt; <span class=\"hljs-params\">map</span>)</span>&#123;<br>\tLong id = <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">MapUtil</span>.</span></span>get<span class=\"hljs-constructor\">Long(<span class=\"hljs-params\">map</span>,<span class=\"hljs-string\">&quot;id&quot;</span>)</span>;<br>\tPdtReplaceItem replaceItem = pdtReplaceItemMapper.select<span class=\"hljs-constructor\">ById(<span class=\"hljs-params\">id</span>)</span>;<br>\tString replaceGroup = replaceItem.get<span class=\"hljs-constructor\">ReplaceGroup()</span>;<br>\tLong ownerSort = replaceItem.get<span class=\"hljs-constructor\">Sort()</span>;<br>\tPdtReplaceItem beforeReplaceItem = pdtReplaceItemMapper.get<span class=\"hljs-constructor\">Before(<span class=\"hljs-params\">ownerSort</span>,<span class=\"hljs-params\">replaceGroup</span>)</span>;<br>\t<span class=\"hljs-keyword\">if</span> (beforeReplaceItem<span class=\"hljs-operator\"> == </span>null) &#123;<br>\t\treturn <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">Result</span>.</span></span>failed(<span class=\"hljs-string\">&quot;已为顶部，无需上移&quot;</span>);<br>\t&#125;<br>\tLong beforeSort = beforeReplaceItem.get<span class=\"hljs-constructor\">Sort()</span>;<br>\treplaceItem.set<span class=\"hljs-constructor\">Sort(<span class=\"hljs-params\">beforeSort</span>)</span>;<br>\tbeforeReplaceItem.set<span class=\"hljs-constructor\">Sort(<span class=\"hljs-params\">ownerSort</span>)</span>;<br>\tpdtReplaceItemMapper.update<span class=\"hljs-constructor\">ById(<span class=\"hljs-params\">replaceItem</span>)</span>;<br>\tpdtReplaceItemMapper.update<span class=\"hljs-constructor\">ById(<span class=\"hljs-params\">beforeReplaceItem</span>)</span>;<br>\treturn <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">Result</span>.</span></span>succeed(<span class=\"hljs-string\">&quot;上移成功&quot;</span>);<br>&#125;<br>@Override<br>public Result present<span class=\"hljs-constructor\">ToAfter(Map&lt;String,Object&gt; <span class=\"hljs-params\">map</span>)</span>&#123;<br>\tLong id = <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">MapUtil</span>.</span></span>get<span class=\"hljs-constructor\">Long(<span class=\"hljs-params\">map</span>,<span class=\"hljs-string\">&quot;id&quot;</span>)</span>;<br>\tPdtReplaceItem replaceItem = pdtReplaceItemMapper.select<span class=\"hljs-constructor\">ById(<span class=\"hljs-params\">id</span>)</span>;<br>\tString replaceGroup = replaceItem.get<span class=\"hljs-constructor\">ReplaceGroup()</span>;<br>\tLong ownerSort = replaceItem.get<span class=\"hljs-constructor\">Sort()</span>;<br>\tPdtReplaceItem afterReplaceItem = pdtReplaceItemMapper.get<span class=\"hljs-constructor\">After(<span class=\"hljs-params\">ownerSort</span>,<span class=\"hljs-params\">replaceGroup</span>)</span>;<br>\t<span class=\"hljs-keyword\">if</span> (afterReplaceItem<span class=\"hljs-operator\"> == </span>null) &#123;<br>\t\treturn <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">Result</span>.</span></span>failed(<span class=\"hljs-string\">&quot;已为底部，无需下移&quot;</span>);<br>\t&#125;<br>\tLong afterSort = afterReplaceItem.get<span class=\"hljs-constructor\">Sort()</span>;<br>\treplaceItem.set<span class=\"hljs-constructor\">Sort(<span class=\"hljs-params\">afterSort</span>)</span>;<br>\tafterReplaceItem.set<span class=\"hljs-constructor\">Sort(<span class=\"hljs-params\">ownerSort</span>)</span>;<br>\tpdtReplaceItemMapper.update<span class=\"hljs-constructor\">ById(<span class=\"hljs-params\">replaceItem</span>)</span>;<br>\tpdtReplaceItemMapper.update<span class=\"hljs-constructor\">ById(<span class=\"hljs-params\">afterReplaceItem</span>)</span>;<br>\treturn <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">Result</span>.</span></span>succeed(<span class=\"hljs-string\">&quot;下移成功&quot;</span>);<br>&#125;<br>@Override<br>public Result head(Map&lt;String, Object&gt; map)&#123;<br>\tLong id = <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">MapUtil</span>.</span></span>get<span class=\"hljs-constructor\">Long(<span class=\"hljs-params\">map</span>, <span class=\"hljs-string\">&quot;id&quot;</span>)</span>;<br>\tPdtReplaceItem replaceItem = pdtReplaceItemMapper.select<span class=\"hljs-constructor\">ById(<span class=\"hljs-params\">id</span>)</span>;<br>\tString replaceGroup = replaceItem.get<span class=\"hljs-constructor\">ReplaceGroup()</span>;<br>\tLong ownerSort = replaceItem.get<span class=\"hljs-constructor\">Sort()</span>;<br>\tPdtReplaceItem beforeReplaceItem = pdtReplaceItemMapper.get<span class=\"hljs-constructor\">Before(<span class=\"hljs-params\">ownerSort</span>,<span class=\"hljs-params\">replaceGroup</span>)</span>;<br>\t<span class=\"hljs-keyword\">if</span> (beforeReplaceItem<span class=\"hljs-operator\"> == </span>null) &#123;<br>\t\treturn <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">Result</span>.</span></span>failed(<span class=\"hljs-string\">&quot;已为顶部，无需上移&quot;</span>);<br>\t&#125;<br>\tLong minSort = pdtReplaceItemMapper.min<span class=\"hljs-constructor\">Sort(<span class=\"hljs-params\">replaceGroup</span>)</span>;<br>\treplaceItem.set<span class=\"hljs-constructor\">Sort(<span class=\"hljs-params\">minSort</span> - 1)</span>;<br>\tpdtReplaceItemMapper.update<span class=\"hljs-constructor\">ById(<span class=\"hljs-params\">replaceItem</span>)</span>;<br>\treturn <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">Result</span>.</span></span>succeed(<span class=\"hljs-string\">&quot;置顶成功&quot;</span>);<br>&#125;<br>@Override<br>public Result tail(Map&lt;String, Object&gt; map)&#123;<br>\tLong id = <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">MapUtil</span>.</span></span>get<span class=\"hljs-constructor\">Long(<span class=\"hljs-params\">map</span>, <span class=\"hljs-string\">&quot;id&quot;</span>)</span>;<br>\tPdtReplaceItem replaceItem = pdtReplaceItemMapper.select<span class=\"hljs-constructor\">ById(<span class=\"hljs-params\">id</span>)</span>;<br>\tString replaceGroup = replaceItem.get<span class=\"hljs-constructor\">ReplaceGroup()</span>;<br>\tLong ownerSort = replaceItem.get<span class=\"hljs-constructor\">Sort()</span>;<br>\tPdtReplaceItem afterReplaceItem = pdtReplaceItemMapper.get<span class=\"hljs-constructor\">After(<span class=\"hljs-params\">ownerSort</span>,<span class=\"hljs-params\">replaceGroup</span>)</span>;<br>\t<span class=\"hljs-keyword\">if</span> (afterReplaceItem<span class=\"hljs-operator\"> == </span>null) &#123;<br>\t\treturn <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">Result</span>.</span></span>failed(<span class=\"hljs-string\">&quot;已为底部，无需下移&quot;</span>);<br>\t&#125;<br>\tLong maxSort = pdtReplaceItemMapper.max<span class=\"hljs-constructor\">Sort(<span class=\"hljs-params\">replaceGroup</span>)</span>;<br>\treplaceItem.set<span class=\"hljs-constructor\">Sort(<span class=\"hljs-params\">maxSort</span> + 1)</span>;<br>\tpdtReplaceItemMapper.update<span class=\"hljs-constructor\">ById(<span class=\"hljs-params\">replaceItem</span>)</span>;<br>\treturn <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">Result</span>.</span></span>succeed(<span class=\"hljs-string\">&quot;置底成功&quot;</span>);<br>&#125;<br>@Override<br>public Result exchange(Map&lt;String, Object&gt; map)&#123;<br>\tLong ownerId = <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">MapUtil</span>.</span></span>get<span class=\"hljs-constructor\">Long(<span class=\"hljs-params\">map</span>,<span class=\"hljs-string\">&quot;ownerId&quot;</span>)</span>;<br>\tLong otherId = <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">MapUtil</span>.</span></span>get<span class=\"hljs-constructor\">Long(<span class=\"hljs-params\">map</span>,<span class=\"hljs-string\">&quot;otherId&quot;</span>)</span>;<br>\tPdtReplaceItem owner = pdtReplaceItemMapper.select<span class=\"hljs-constructor\">ById(<span class=\"hljs-params\">ownerId</span>)</span>;<br>\tPdtReplaceItem other = pdtReplaceItemMapper.select<span class=\"hljs-constructor\">ById(<span class=\"hljs-params\">otherId</span>)</span>;<br>\tlong ownerSort = owner.get<span class=\"hljs-constructor\">Sort()</span>;<br>\tlong otherSort = other.get<span class=\"hljs-constructor\">Sort()</span>;<br>\towner.set<span class=\"hljs-constructor\">Sort(<span class=\"hljs-params\">otherSort</span>)</span>;<br>\tother.set<span class=\"hljs-constructor\">Sort(<span class=\"hljs-params\">ownerSort</span>)</span>;<br>\tpdtReplaceItemMapper.update<span class=\"hljs-constructor\">ById(<span class=\"hljs-params\">owner</span>)</span>;<br>\tpdtReplaceItemMapper.update<span class=\"hljs-constructor\">ById(<span class=\"hljs-params\">other</span>)</span>;<br>\treturn <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">Result</span>.</span></span>succeed(<span class=\"hljs-string\">&quot;交换成功&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs less\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * @param ownerSort 自己的排序</span><br><span class=\"hljs-comment\"> * @param replaceGroup  自己所在分组</span><br><span class=\"hljs-comment\"> * @return  上一条记录，如果没有返回空</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-selector-tag\">PdtReplaceItem</span> <span class=\"hljs-selector-tag\">getBefore</span>(<span class=\"hljs-variable\">@Param</span>(<span class=\"hljs-string\">&quot;ownerSort&quot;</span>) Long ownerSort, <span class=\"hljs-variable\">@Param</span>(<span class=\"hljs-string\">&quot;replaceGroup&quot;</span>) String replaceGroup);<br><br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * @param ownerSort 自己的排序</span><br><span class=\"hljs-comment\"> * @param replaceGroup  自己所在分组</span><br><span class=\"hljs-comment\"> * @return  下一条记录，如果没有返回空</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-selector-tag\">PdtReplaceItem</span> <span class=\"hljs-selector-tag\">getAfter</span>(<span class=\"hljs-variable\">@Param</span>(<span class=\"hljs-string\">&quot;ownerSort&quot;</span>) Long ownerSort, <span class=\"hljs-variable\">@Param</span>(<span class=\"hljs-string\">&quot;replaceGroup&quot;</span>) String replaceGroup);<br><br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * @param replaceGroup 自己所在分组</span><br><span class=\"hljs-comment\"> * @return 该分组最小的排序</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-selector-tag\">Long</span> <span class=\"hljs-selector-tag\">minSort</span>(<span class=\"hljs-variable\">@Param</span>(<span class=\"hljs-string\">&quot;replaceGroup&quot;</span>) String replaceGroup);<br><br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * @param replaceGroup 自己所在分组</span><br><span class=\"hljs-comment\"> * @return 该分组最大的排序</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-selector-tag\">Long</span> <span class=\"hljs-selector-tag\">maxSort</span>(<span class=\"hljs-variable\">@Param</span>(<span class=\"hljs-string\">&quot;replaceGroup&quot;</span>) String replaceGroup);<br></code></pre></td></tr></table></figure>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pgsql\">//<span class=\"hljs-type\">xml</span><br>&lt;<span class=\"hljs-keyword\">select</span> id=&quot;getBefore&quot; resultType=&quot;com.yk.i_wms.model.PdtReplaceItem&quot;&gt;<br>\t<span class=\"hljs-keyword\">SELECT</span><br>\t\t*<br>\t<span class=\"hljs-keyword\">FROM</span><br>\t\tpdt_replace_item<br>\t<span class=\"hljs-keyword\">WHERE</span><br>\t\treplace_group=#&#123;replaceGroup&#125;<br>\t  <span class=\"hljs-keyword\">AND</span> #&#123;ownerSort&#125; &gt; sort<br>\t<span class=\"hljs-keyword\">ORDER</span> <span class=\"hljs-keyword\">BY</span> sort <span class=\"hljs-keyword\">DESC</span>,id <span class=\"hljs-keyword\">DESC</span><br>\t<span class=\"hljs-keyword\">LIMIT</span> <span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">1</span>;<br>&lt;/<span class=\"hljs-keyword\">select</span>&gt;<br>&lt;<span class=\"hljs-keyword\">select</span> id=&quot;getAfter&quot; resultType=&quot;com.yk.i_wms.model.PdtReplaceItem&quot;&gt;<br>\t<span class=\"hljs-keyword\">SELECT</span><br>\t\t*<br>\t<span class=\"hljs-keyword\">FROM</span><br>\t\tpdt_replace_item<br>\t<span class=\"hljs-keyword\">WHERE</span><br>\t\treplace_group=#&#123;replaceGroup&#125;<br>\t  <span class=\"hljs-keyword\">AND</span> sort &gt; #&#123;ownerSort&#125;<br>\t<span class=\"hljs-keyword\">ORDER</span> <span class=\"hljs-keyword\">BY</span> sort <span class=\"hljs-keyword\">ASC</span>,id <span class=\"hljs-keyword\">ASC</span><br>\t<span class=\"hljs-keyword\">LIMIT</span> <span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">1</span>;<br>&lt;/<span class=\"hljs-keyword\">select</span>&gt;<br>&lt;<span class=\"hljs-keyword\">select</span> id=&quot;minSort&quot; resultType=&quot;java.lang.Long&quot;&gt;<br>\t<span class=\"hljs-keyword\">select</span> MIN(sort) <span class=\"hljs-keyword\">from</span> pdt_replace_item <span class=\"hljs-keyword\">where</span> replace_group=#&#123;replaceGroup&#125;<br>&lt;/<span class=\"hljs-keyword\">select</span>&gt;<br>&lt;<span class=\"hljs-keyword\">select</span> id=&quot;maxSort&quot; resultType=&quot;java.lang.Long&quot;&gt;<br>\t<span class=\"hljs-keyword\">select</span> MAX(sort) <span class=\"hljs-keyword\">from</span> pdt_replace_item <span class=\"hljs-keyword\">where</span> replace_group=#&#123;replaceGroup&#125;<br>&lt;/<span class=\"hljs-keyword\">select</span>&gt;<br></code></pre></td></tr></table></figure>\n"},{"title":"常用js","date":"2022-09-05T09:09:05.000Z","category_bar":true,"_content":"# 常用js\n\n---\n\n[toc]\n\n---\n\n## 1.表单提交为json\n\n```\n//上传接口\n  function addBasic() {\n    console.log($('#basic').serializeJson())\n    $.ajax({\n      type: \"POST\",\n      dataType: \"json\",\n      url: '../basicInfo',\n      contentType: \"application/json\",\n      data:JSON.stringify($('#basic').serializeJson()),\n      success: function (result) {\n        console.log(\"data is :\" + result)\n        if (result.code == 200) {\n          alert(\"登陆成功\");\n          window.location.href = \"../home/home_page.html\";\n        }else {\n          alert(result.message)\n        }\n      }\n    });\n  }\n//form -->json\n(function (window, $) {\n    $.fn.serializeJson = function () {//form serialize to json\n      var serializeObj = {};\n      var array = this.serializeArray();\n      $(array).each(\n              function () {\n                if (serializeObj[this.name]) {\n                  if ($.isArray(serializeObj[this.name])) {\n                    serializeObj[this.name].push(this.value);\n                  } else {\n                    serializeObj[this.name] = [\n                      serializeObj[this.name], this.value];\n                  }\n                } else {\n                  serializeObj[this.name] = this.value;\n                }\n              });\n      return serializeObj;\n    };\n  })(window, jQuery);\n```\n## 2.上传图片\n\n```\n //上传图片\n$(\"#m_image_addr\").live(\"change\",function(){\n        //注意这里不能写错。。。\n        var file=$(\"#m_image_addr\")[0].files[0];\n        var formData = new FormData();\n        formData.append(\"m_image_addr\",file);\n        //对文件类型进行判断\n        var index=file.name.lastIndexOf(\".\");\n        var type=file.name.substring(index);\n        if(type!=\".jpg\"&&type!=\".png\"){\n          alert(\"只能上传jpg和png格式的图片！！\");\n          return;\n        }\n        $.ajax({\n          url:\"../upload.do\",\n          data:formData,\n          dataType:\"text\",\n          type:\"post\",\n          //这两个属性必须设置！！！！\n          contentType: false,\n          processData: false, //设置为true时，ajax提交的时候不会序列化data，而是直接使用data\n          success:function (path) {\n            $(\"#yulan\").attr(\"src\",path);\n            $(\"input[name='imgUrl']\").attr(\"value\",path);\n          }\n        })\n      })\n```\n## 3.加载前端数据到表单\n\n```\n//获取json接口\n$.get(\"/basicInfo/\"+$.cookie('id'),{},function(result){\n      if (result.resp_code==\"0\"){\n        loadData(result.datas);\n      }else{\n        $(\"#msg2\").text(result.resp_msg);\n      }\n    },\"json\"){\n      if (result.resp_code==\"0\"){\n        loadData(result.datas);\n      }else{\n        $(\"#msg2\").text(result.resp_msg);\n      }\n    },\"json\")\n //加载前端数据到表单\n  function loadData(obj){\n    if($.type(obj)!=\"object\"){\n      alert(\"页面初始化错误！\");\n      return false;\n    }\n    var key,value,tagName,type,arr;\n    for(x in obj){\n      key = x;\n      value = obj[x];\n      $(\"[name='\"+key+\"'],[name='\"+key+\"[]']\").each(function(index){\n        tagName = $(this)[0].tagName;\n        type = $(this).attr('type');\n        if (tagName=='IMG'){\n          $(this).attr('src',value);\n        }\n        if(tagName=='INPUT'){\n          if(type=='radio'){                      //处理radio\n            $(this).attr('checked',$(this).val()==value);\n          }else if(type=='checkbox'){             //处理checkbox\n            for(var i =0;i<value.length;i++){\n              if($(this).val()==value[i]){\n                $(this).attr('checked',true);\n                break;\n              }\n            }\n          }else if(type=='date'){                  //处理日期型表单\n            if(parseInt(value)>1000000000000)      //毫秒时间戳\n              $(this)[0].valueAsNumber=parseInt(value);\n            else if(parseInt(value)>1000000000)    //秒时间戳\n              $(this)[0].valueAsNumber=parseInt(value)*1000;\n            else                                   //字符串时间\n              $(this)[0].valueAsDate=new Date(value);\n          }else{\n            if($.isArray(value))                    //表单组情形(多个同名表单)\n              $(this).val(value[index]);\n            else\n              $(this).val(value);\n          }\n          //$(this).uniform();//自用！\n        }else if(tagName=='SELECT'){    //处理select和textarea\n          $(this).val(value);\n        }\n      });\n    }\n  }\n```\n## 4.单按钮开关\n\n```\n$(\"#daohang\").click(\n\tfunction () {\n\t\tvar isON=$(this).attr(\"isON\");\n\t\tif(isON!=\"1\"){//关闭状态\n\t\t\t$(\"#content \").css({'margin-left':'220px'});\n\t\t\t$(\"#sidebar\").children(\"ul\").css({'display': 'block'});\n\t\t\t$(\"#sidebar\").show();\n\t\t\t$(\"#zhankai\").text(\"关闭导航\");\n\t\t\tisON=1;\n\t\t}else{//开启状态\n\t\t\t$(\"#content \").css({'margin-left':'0px'});\n\t\t\t$(\"#sidebar\").children(\"ul\").css({'display': 'none'});\n\t\t\t$(\"#sidebar\").hide();\n\t\t\t$(\"#zhankai\").text(\"展开导航\");\n\t\t\tisON=0;\n\t\t}\n\t\t$(this).attr(\"isON\",isON);\n\t}\n)\n```\n## 5.回车提交事件\n\n`\t$(\"#verify\").bind(\"keydown\",function(event){ if(event.keyCode == \"13\") { }\t})`","source":"_posts/BookMark/Code Demo/常用js.md","raw":"---\ntitle: 常用js\ndate: 2022-09-05 17:09:05\ncategory_bar: true\ncategories: Code Demo\ntags:\n- js\n---\n# 常用js\n\n---\n\n[toc]\n\n---\n\n## 1.表单提交为json\n\n```\n//上传接口\n  function addBasic() {\n    console.log($('#basic').serializeJson())\n    $.ajax({\n      type: \"POST\",\n      dataType: \"json\",\n      url: '../basicInfo',\n      contentType: \"application/json\",\n      data:JSON.stringify($('#basic').serializeJson()),\n      success: function (result) {\n        console.log(\"data is :\" + result)\n        if (result.code == 200) {\n          alert(\"登陆成功\");\n          window.location.href = \"../home/home_page.html\";\n        }else {\n          alert(result.message)\n        }\n      }\n    });\n  }\n//form -->json\n(function (window, $) {\n    $.fn.serializeJson = function () {//form serialize to json\n      var serializeObj = {};\n      var array = this.serializeArray();\n      $(array).each(\n              function () {\n                if (serializeObj[this.name]) {\n                  if ($.isArray(serializeObj[this.name])) {\n                    serializeObj[this.name].push(this.value);\n                  } else {\n                    serializeObj[this.name] = [\n                      serializeObj[this.name], this.value];\n                  }\n                } else {\n                  serializeObj[this.name] = this.value;\n                }\n              });\n      return serializeObj;\n    };\n  })(window, jQuery);\n```\n## 2.上传图片\n\n```\n //上传图片\n$(\"#m_image_addr\").live(\"change\",function(){\n        //注意这里不能写错。。。\n        var file=$(\"#m_image_addr\")[0].files[0];\n        var formData = new FormData();\n        formData.append(\"m_image_addr\",file);\n        //对文件类型进行判断\n        var index=file.name.lastIndexOf(\".\");\n        var type=file.name.substring(index);\n        if(type!=\".jpg\"&&type!=\".png\"){\n          alert(\"只能上传jpg和png格式的图片！！\");\n          return;\n        }\n        $.ajax({\n          url:\"../upload.do\",\n          data:formData,\n          dataType:\"text\",\n          type:\"post\",\n          //这两个属性必须设置！！！！\n          contentType: false,\n          processData: false, //设置为true时，ajax提交的时候不会序列化data，而是直接使用data\n          success:function (path) {\n            $(\"#yulan\").attr(\"src\",path);\n            $(\"input[name='imgUrl']\").attr(\"value\",path);\n          }\n        })\n      })\n```\n## 3.加载前端数据到表单\n\n```\n//获取json接口\n$.get(\"/basicInfo/\"+$.cookie('id'),{},function(result){\n      if (result.resp_code==\"0\"){\n        loadData(result.datas);\n      }else{\n        $(\"#msg2\").text(result.resp_msg);\n      }\n    },\"json\"){\n      if (result.resp_code==\"0\"){\n        loadData(result.datas);\n      }else{\n        $(\"#msg2\").text(result.resp_msg);\n      }\n    },\"json\")\n //加载前端数据到表单\n  function loadData(obj){\n    if($.type(obj)!=\"object\"){\n      alert(\"页面初始化错误！\");\n      return false;\n    }\n    var key,value,tagName,type,arr;\n    for(x in obj){\n      key = x;\n      value = obj[x];\n      $(\"[name='\"+key+\"'],[name='\"+key+\"[]']\").each(function(index){\n        tagName = $(this)[0].tagName;\n        type = $(this).attr('type');\n        if (tagName=='IMG'){\n          $(this).attr('src',value);\n        }\n        if(tagName=='INPUT'){\n          if(type=='radio'){                      //处理radio\n            $(this).attr('checked',$(this).val()==value);\n          }else if(type=='checkbox'){             //处理checkbox\n            for(var i =0;i<value.length;i++){\n              if($(this).val()==value[i]){\n                $(this).attr('checked',true);\n                break;\n              }\n            }\n          }else if(type=='date'){                  //处理日期型表单\n            if(parseInt(value)>1000000000000)      //毫秒时间戳\n              $(this)[0].valueAsNumber=parseInt(value);\n            else if(parseInt(value)>1000000000)    //秒时间戳\n              $(this)[0].valueAsNumber=parseInt(value)*1000;\n            else                                   //字符串时间\n              $(this)[0].valueAsDate=new Date(value);\n          }else{\n            if($.isArray(value))                    //表单组情形(多个同名表单)\n              $(this).val(value[index]);\n            else\n              $(this).val(value);\n          }\n          //$(this).uniform();//自用！\n        }else if(tagName=='SELECT'){    //处理select和textarea\n          $(this).val(value);\n        }\n      });\n    }\n  }\n```\n## 4.单按钮开关\n\n```\n$(\"#daohang\").click(\n\tfunction () {\n\t\tvar isON=$(this).attr(\"isON\");\n\t\tif(isON!=\"1\"){//关闭状态\n\t\t\t$(\"#content \").css({'margin-left':'220px'});\n\t\t\t$(\"#sidebar\").children(\"ul\").css({'display': 'block'});\n\t\t\t$(\"#sidebar\").show();\n\t\t\t$(\"#zhankai\").text(\"关闭导航\");\n\t\t\tisON=1;\n\t\t}else{//开启状态\n\t\t\t$(\"#content \").css({'margin-left':'0px'});\n\t\t\t$(\"#sidebar\").children(\"ul\").css({'display': 'none'});\n\t\t\t$(\"#sidebar\").hide();\n\t\t\t$(\"#zhankai\").text(\"展开导航\");\n\t\t\tisON=0;\n\t\t}\n\t\t$(this).attr(\"isON\",isON);\n\t}\n)\n```\n## 5.回车提交事件\n\n`\t$(\"#verify\").bind(\"keydown\",function(event){ if(event.keyCode == \"13\") { }\t})`","slug":"BookMark/Code Demo/常用js","published":1,"updated":"2022-09-06T06:51:51.110Z","_id":"cl7ptszof000caba5ee3gehrl","comments":1,"layout":"post","photos":[],"link":"","content":"<h1><span id=\"常用js\">常用js</span></h1><hr>\n<p>[toc]</p>\n<hr>\n<h2><span id=\"1表单提交为json\">1.表单提交为json</span></h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">//上传接口</span><br>  <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">addBasic</span>(<span class=\"hljs-params\"></span>) &#123;<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>($(<span class=\"hljs-string\">&#x27;#basic&#x27;</span>).<span class=\"hljs-title function_\">serializeJson</span>())<br>    $.<span class=\"hljs-title function_\">ajax</span>(&#123;<br>      <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">&quot;POST&quot;</span>,<br>      <span class=\"hljs-attr\">dataType</span>: <span class=\"hljs-string\">&quot;json&quot;</span>,<br>      <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">&#x27;../basicInfo&#x27;</span>,<br>      <span class=\"hljs-attr\">contentType</span>: <span class=\"hljs-string\">&quot;application/json&quot;</span>,<br>      <span class=\"hljs-attr\">data</span>:<span class=\"hljs-title class_\">JSON</span>.<span class=\"hljs-title function_\">stringify</span>($(<span class=\"hljs-string\">&#x27;#basic&#x27;</span>).<span class=\"hljs-title function_\">serializeJson</span>()),<br>      <span class=\"hljs-attr\">success</span>: <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">result</span>) &#123;<br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;data is :&quot;</span> + result)<br>        <span class=\"hljs-keyword\">if</span> (result.<span class=\"hljs-property\">code</span> == <span class=\"hljs-number\">200</span>) &#123;<br>          <span class=\"hljs-title function_\">alert</span>(<span class=\"hljs-string\">&quot;登陆成功&quot;</span>);<br>          <span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">location</span>.<span class=\"hljs-property\">href</span> = <span class=\"hljs-string\">&quot;../home/home_page.html&quot;</span>;<br>        &#125;<span class=\"hljs-keyword\">else</span> &#123;<br>          <span class=\"hljs-title function_\">alert</span>(result.<span class=\"hljs-property\">message</span>)<br>        &#125;<br>      &#125;<br>    &#125;);<br>  &#125;<br><span class=\"hljs-comment\">//form --&gt;json</span><br>(<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"><span class=\"hljs-variable language_\">window</span>, $</span>) &#123;<br>    $.fn.<span class=\"hljs-property\">serializeJson</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;<span class=\"hljs-comment\">//form serialize to json</span><br>      <span class=\"hljs-keyword\">var</span> serializeObj = &#123;&#125;;<br>      <span class=\"hljs-keyword\">var</span> array = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">serializeArray</span>();<br>      $(array).<span class=\"hljs-title function_\">each</span>(<br>              <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;<br>                <span class=\"hljs-keyword\">if</span> (serializeObj[<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">name</span>]) &#123;<br>                  <span class=\"hljs-keyword\">if</span> ($.<span class=\"hljs-title function_\">isArray</span>(serializeObj[<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">name</span>])) &#123;<br>                    serializeObj[<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">name</span>].<span class=\"hljs-title function_\">push</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">value</span>);<br>                  &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>                    serializeObj[<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">name</span>] = [<br>                      serializeObj[<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">name</span>], <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">value</span>];<br>                  &#125;<br>                &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>                  serializeObj[<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">name</span>] = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">value</span>;<br>                &#125;<br>              &#125;);<br>      <span class=\"hljs-keyword\">return</span> serializeObj;<br>    &#125;;<br>  &#125;)(<span class=\"hljs-variable language_\">window</span>, jQuery);<br></code></pre></td></tr></table></figure>\n<h2><span id=\"2上传图片\">2.上传图片</span></h2><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs typescript\"> <span class=\"hljs-comment\">//上传图片</span><br>$(<span class=\"hljs-string\">&quot;#m_image_addr&quot;</span>).<span class=\"hljs-title function_\">live</span>(<span class=\"hljs-string\">&quot;change&quot;</span>,<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)&#123;<br>        <span class=\"hljs-comment\">//注意这里不能写错。。。</span><br>        <span class=\"hljs-keyword\">var</span> file=$(<span class=\"hljs-string\">&quot;#m_image_addr&quot;</span>)[<span class=\"hljs-number\">0</span>].<span class=\"hljs-property\">files</span>[<span class=\"hljs-number\">0</span>];<br>        <span class=\"hljs-keyword\">var</span> formData = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">FormData</span>();<br>        formData.<span class=\"hljs-title function_\">append</span>(<span class=\"hljs-string\">&quot;m_image_addr&quot;</span>,file);<br>        <span class=\"hljs-comment\">//对文件类型进行判断</span><br>        <span class=\"hljs-keyword\">var</span> index=file.<span class=\"hljs-property\">name</span>.<span class=\"hljs-title function_\">lastIndexOf</span>(<span class=\"hljs-string\">&quot;.&quot;</span>);<br>        <span class=\"hljs-keyword\">var</span> <span class=\"hljs-keyword\">type</span>=file.<span class=\"hljs-property\">name</span>.<span class=\"hljs-title function_\">substring</span>(index);<br>        <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">type</span>!=<span class=\"hljs-string\">&quot;.jpg&quot;</span>&amp;&amp;<span class=\"hljs-keyword\">type</span>!=<span class=\"hljs-string\">&quot;.png&quot;</span>)&#123;<br>          <span class=\"hljs-title function_\">alert</span>(<span class=\"hljs-string\">&quot;只能上传jpg和png格式的图片！！&quot;</span>);<br>          <span class=\"hljs-keyword\">return</span>;<br>        &#125;<br>        $.<span class=\"hljs-title function_\">ajax</span>(&#123;<br>          <span class=\"hljs-attr\">url</span>:<span class=\"hljs-string\">&quot;../upload.do&quot;</span>,<br>          <span class=\"hljs-attr\">data</span>:formData,<br>          <span class=\"hljs-attr\">dataType</span>:<span class=\"hljs-string\">&quot;text&quot;</span>,<br>          <span class=\"hljs-attr\">type</span>:<span class=\"hljs-string\">&quot;post&quot;</span>,<br>          <span class=\"hljs-comment\">//这两个属性必须设置！！！！</span><br>          <span class=\"hljs-attr\">contentType</span>: <span class=\"hljs-literal\">false</span>,<br>          <span class=\"hljs-attr\">processData</span>: <span class=\"hljs-literal\">false</span>, <span class=\"hljs-comment\">//设置为true时，ajax提交的时候不会序列化data，而是直接使用data</span><br>          <span class=\"hljs-attr\">success</span>:<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">path</span>) &#123;<br>            $(<span class=\"hljs-string\">&quot;#yulan&quot;</span>).<span class=\"hljs-title function_\">attr</span>(<span class=\"hljs-string\">&quot;src&quot;</span>,path);<br>            $(<span class=\"hljs-string\">&quot;input[name=&#x27;imgUrl&#x27;]&quot;</span>).<span class=\"hljs-title function_\">attr</span>(<span class=\"hljs-string\">&quot;value&quot;</span>,path);<br>          &#125;<br>        &#125;)<br>      &#125;)<br></code></pre></td></tr></table></figure>\n<h2><span id=\"3加载前端数据到表单\">3.加载前端数据到表单</span></h2><figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\"><span class=\"hljs-comment\">//获取json接口</span><br>$.get(<span class=\"hljs-string\">&quot;/basicInfo/&quot;</span>+$.cookie(&#x27;id&#x27;),&#123;&#125;,<span class=\"hljs-keyword\">function</span>(result)&#123;<br>      <span class=\"hljs-keyword\">if</span> (result.resp_code==<span class=\"hljs-string\">&quot;0&quot;</span>)&#123;<br>        load<span class=\"hljs-constructor\">Data(<span class=\"hljs-params\">result</span>.<span class=\"hljs-params\">datas</span>)</span>;<br>      &#125;<span class=\"hljs-keyword\">else</span>&#123;<br>        <span class=\"hljs-constructor\">$(<span class=\"hljs-string\">&quot;#msg2&quot;</span>)</span>.text(result.resp_msg);<br>      &#125;<br>    &#125;,<span class=\"hljs-string\">&quot;json&quot;</span>)&#123;<br>      <span class=\"hljs-keyword\">if</span> (result.resp_code==<span class=\"hljs-string\">&quot;0&quot;</span>)&#123;<br>        load<span class=\"hljs-constructor\">Data(<span class=\"hljs-params\">result</span>.<span class=\"hljs-params\">datas</span>)</span>;<br>      &#125;<span class=\"hljs-keyword\">else</span>&#123;<br>        <span class=\"hljs-constructor\">$(<span class=\"hljs-string\">&quot;#msg2&quot;</span>)</span>.text(result.resp_msg);<br>      &#125;<br>    &#125;,<span class=\"hljs-string\">&quot;json&quot;</span>)<br> <span class=\"hljs-comment\">//加载前端数据到表单</span><br>  <span class=\"hljs-keyword\">function</span> load<span class=\"hljs-constructor\">Data(<span class=\"hljs-params\">obj</span>)</span>&#123;<br>    <span class=\"hljs-keyword\">if</span>($.<span class=\"hljs-keyword\">type</span>(obj)!=<span class=\"hljs-string\">&quot;object&quot;</span>)&#123;<br>      alert(<span class=\"hljs-string\">&quot;页面初始化错误！&quot;</span>);<br>      return <span class=\"hljs-literal\">false</span>;<br>    &#125;<br>    var key,value,tagName,<span class=\"hljs-keyword\">type</span>,arr;<br>    <span class=\"hljs-keyword\">for</span>(x <span class=\"hljs-keyword\">in</span> obj)&#123;<br>      key = x;<br>      value = obj<span class=\"hljs-literal\">[<span class=\"hljs-identifier\">x</span>]</span>;<br>      <span class=\"hljs-constructor\">$(<span class=\"hljs-string\">&quot;[name=&#x27;&quot;</span>+<span class=\"hljs-params\">key</span>+<span class=\"hljs-string\">&quot;&#x27;],[name=&#x27;&quot;</span>+<span class=\"hljs-params\">key</span>+<span class=\"hljs-string\">&quot;[]&#x27;]&quot;</span>)</span>.each(<span class=\"hljs-keyword\">function</span>(index)&#123;<br>        tagName = <span class=\"hljs-constructor\">$(<span class=\"hljs-params\">this</span>)</span><span class=\"hljs-literal\">[<span class=\"hljs-number\">0</span>]</span>.tagName;<br>        <span class=\"hljs-keyword\">type</span> = <span class=\"hljs-constructor\">$(<span class=\"hljs-params\">this</span>)</span>.attr(&#x27;<span class=\"hljs-keyword\">type</span>&#x27;);<br>        <span class=\"hljs-keyword\">if</span> (tagName==&#x27;IMG&#x27;)&#123;<br>          <span class=\"hljs-constructor\">$(<span class=\"hljs-params\">this</span>)</span>.attr(&#x27;src&#x27;,value);<br>        &#125;<br>        <span class=\"hljs-keyword\">if</span>(tagName==&#x27;INPUT&#x27;)&#123;<br>          <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">type</span>==&#x27;radio&#x27;)&#123;                      <span class=\"hljs-comment\">//处理radio</span><br>            <span class=\"hljs-constructor\">$(<span class=\"hljs-params\">this</span>)</span>.attr(&#x27;checked&#x27;,<span class=\"hljs-constructor\">$(<span class=\"hljs-params\">this</span>)</span>.<span class=\"hljs-keyword\">val</span><span class=\"hljs-literal\">()</span>==value);<br>          &#125;<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">type</span>==&#x27;checkbox&#x27;)&#123;             <span class=\"hljs-comment\">//处理checkbox</span><br>            <span class=\"hljs-keyword\">for</span>(var i =<span class=\"hljs-number\">0</span>;i&lt;value.length;i++)&#123;<br>              <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-constructor\">$(<span class=\"hljs-params\">this</span>)</span>.<span class=\"hljs-keyword\">val</span><span class=\"hljs-literal\">()</span>==value<span class=\"hljs-literal\">[<span class=\"hljs-identifier\">i</span>]</span>)&#123;<br>                <span class=\"hljs-constructor\">$(<span class=\"hljs-params\">this</span>)</span>.attr(&#x27;checked&#x27;,<span class=\"hljs-literal\">true</span>);<br>                break;<br>              &#125;<br>            &#125;<br>          &#125;<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">type</span>==&#x27;date&#x27;)&#123;                  <span class=\"hljs-comment\">//处理日期型表单</span><br>            <span class=\"hljs-keyword\">if</span>(parse<span class=\"hljs-constructor\">Int(<span class=\"hljs-params\">value</span>)</span>&gt;<span class=\"hljs-number\">1000000000000</span>)      <span class=\"hljs-comment\">//毫秒时间戳</span><br>              <span class=\"hljs-constructor\">$(<span class=\"hljs-params\">this</span>)</span><span class=\"hljs-literal\">[<span class=\"hljs-number\">0</span>]</span>.valueAsNumber=parse<span class=\"hljs-constructor\">Int(<span class=\"hljs-params\">value</span>)</span>;<br>            <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(parse<span class=\"hljs-constructor\">Int(<span class=\"hljs-params\">value</span>)</span>&gt;<span class=\"hljs-number\">1000000000</span>)    <span class=\"hljs-comment\">//秒时间戳</span><br>              <span class=\"hljs-constructor\">$(<span class=\"hljs-params\">this</span>)</span><span class=\"hljs-literal\">[<span class=\"hljs-number\">0</span>]</span>.valueAsNumber=parse<span class=\"hljs-constructor\">Int(<span class=\"hljs-params\">value</span>)</span>*<span class=\"hljs-number\">1000</span>;<br>            <span class=\"hljs-keyword\">else</span>                                   <span class=\"hljs-comment\">//字符串时间</span><br>              <span class=\"hljs-constructor\">$(<span class=\"hljs-params\">this</span>)</span><span class=\"hljs-literal\">[<span class=\"hljs-number\">0</span>]</span>.valueAsDate=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-constructor\">Date(<span class=\"hljs-params\">value</span>)</span>;<br>          &#125;<span class=\"hljs-keyword\">else</span>&#123;<br>            <span class=\"hljs-keyword\">if</span>($.is<span class=\"hljs-constructor\">Array(<span class=\"hljs-params\">value</span>)</span>)                    <span class=\"hljs-comment\">//表单组情形(多个同名表单)</span><br>              <span class=\"hljs-constructor\">$(<span class=\"hljs-params\">this</span>)</span>.<span class=\"hljs-keyword\">val</span>(value<span class=\"hljs-literal\">[<span class=\"hljs-identifier\">index</span>]</span>);<br>            <span class=\"hljs-keyword\">else</span><br>              <span class=\"hljs-constructor\">$(<span class=\"hljs-params\">this</span>)</span>.<span class=\"hljs-keyword\">val</span>(value);<br>          &#125;<br>          <span class=\"hljs-comment\">//$(this).uniform();//自用！</span><br>        &#125;<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(tagName==&#x27;SELECT&#x27;)&#123;    <span class=\"hljs-comment\">//处理select和textarea</span><br>          <span class=\"hljs-constructor\">$(<span class=\"hljs-params\">this</span>)</span>.<span class=\"hljs-keyword\">val</span>(value);<br>        &#125;<br>      &#125;);<br>    &#125;<br>  &#125;<br></code></pre></td></tr></table></figure>\n<h2><span id=\"4单按钮开关\">4.单按钮开关</span></h2><figure class=\"highlight arcade\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs arcade\">$(<span class=\"hljs-string\">&quot;#daohang&quot;</span>).click(<br>\t<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;<br>\t\t<span class=\"hljs-keyword\">var</span> isON=$(this).attr(<span class=\"hljs-string\">&quot;isON&quot;</span>);<br>\t\t<span class=\"hljs-keyword\">if</span>(isON!=<span class=\"hljs-string\">&quot;1&quot;</span>)&#123;<span class=\"hljs-comment\">//关闭状态</span><br>\t\t\t$(<span class=\"hljs-string\">&quot;#content &quot;</span>).css(&#123;<span class=\"hljs-string\">&#x27;margin-left&#x27;</span>:<span class=\"hljs-string\">&#x27;220px&#x27;</span>&#125;);<br>\t\t\t$(<span class=\"hljs-string\">&quot;#sidebar&quot;</span>).children(<span class=\"hljs-string\">&quot;ul&quot;</span>).css(&#123;<span class=\"hljs-string\">&#x27;display&#x27;</span>: <span class=\"hljs-string\">&#x27;block&#x27;</span>&#125;);<br>\t\t\t$(<span class=\"hljs-string\">&quot;#sidebar&quot;</span>).show();<br>\t\t\t$(<span class=\"hljs-string\">&quot;#zhankai&quot;</span>).<span class=\"hljs-built_in\">text</span>(<span class=\"hljs-string\">&quot;关闭导航&quot;</span>);<br>\t\t\tisON=<span class=\"hljs-number\">1</span>;<br>\t\t&#125;<span class=\"hljs-keyword\">else</span>&#123;<span class=\"hljs-comment\">//开启状态</span><br>\t\t\t$(<span class=\"hljs-string\">&quot;#content &quot;</span>).css(&#123;<span class=\"hljs-string\">&#x27;margin-left&#x27;</span>:<span class=\"hljs-string\">&#x27;0px&#x27;</span>&#125;);<br>\t\t\t$(<span class=\"hljs-string\">&quot;#sidebar&quot;</span>).children(<span class=\"hljs-string\">&quot;ul&quot;</span>).css(&#123;<span class=\"hljs-string\">&#x27;display&#x27;</span>: <span class=\"hljs-string\">&#x27;none&#x27;</span>&#125;);<br>\t\t\t$(<span class=\"hljs-string\">&quot;#sidebar&quot;</span>).hide();<br>\t\t\t$(<span class=\"hljs-string\">&quot;#zhankai&quot;</span>).<span class=\"hljs-built_in\">text</span>(<span class=\"hljs-string\">&quot;展开导航&quot;</span>);<br>\t\t\tisON=<span class=\"hljs-number\">0</span>;<br>\t\t&#125;<br>\t\t$(this).attr(<span class=\"hljs-string\">&quot;isON&quot;</span>,isON);<br>\t&#125;<br>)<br></code></pre></td></tr></table></figure>\n<h2><span id=\"5回车提交事件\">5.回车提交事件</span></h2><p><code>\t$(&quot;#verify&quot;).bind(&quot;keydown&quot;,function(event)&#123; if(event.keyCode == &quot;13&quot;) &#123; &#125;\t&#125;)</code></p>\n","site":{"data":{}},"wordcount":4651,"excerpt":"","more":"<h1 id=\"常用js\"><a href=\"#常用js\" class=\"headerlink\" title=\"常用js\"></a>常用js</h1><hr>\n<p>[toc]</p>\n<hr>\n<h2 id=\"1-表单提交为json\"><a href=\"#1-表单提交为json\" class=\"headerlink\" title=\"1.表单提交为json\"></a>1.表单提交为json</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">//上传接口</span><br>  <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">addBasic</span>(<span class=\"hljs-params\"></span>) &#123;<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>($(<span class=\"hljs-string\">&#x27;#basic&#x27;</span>).<span class=\"hljs-title function_\">serializeJson</span>())<br>    $.<span class=\"hljs-title function_\">ajax</span>(&#123;<br>      <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">&quot;POST&quot;</span>,<br>      <span class=\"hljs-attr\">dataType</span>: <span class=\"hljs-string\">&quot;json&quot;</span>,<br>      <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">&#x27;../basicInfo&#x27;</span>,<br>      <span class=\"hljs-attr\">contentType</span>: <span class=\"hljs-string\">&quot;application/json&quot;</span>,<br>      <span class=\"hljs-attr\">data</span>:<span class=\"hljs-title class_\">JSON</span>.<span class=\"hljs-title function_\">stringify</span>($(<span class=\"hljs-string\">&#x27;#basic&#x27;</span>).<span class=\"hljs-title function_\">serializeJson</span>()),<br>      <span class=\"hljs-attr\">success</span>: <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">result</span>) &#123;<br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;data is :&quot;</span> + result)<br>        <span class=\"hljs-keyword\">if</span> (result.<span class=\"hljs-property\">code</span> == <span class=\"hljs-number\">200</span>) &#123;<br>          <span class=\"hljs-title function_\">alert</span>(<span class=\"hljs-string\">&quot;登陆成功&quot;</span>);<br>          <span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">location</span>.<span class=\"hljs-property\">href</span> = <span class=\"hljs-string\">&quot;../home/home_page.html&quot;</span>;<br>        &#125;<span class=\"hljs-keyword\">else</span> &#123;<br>          <span class=\"hljs-title function_\">alert</span>(result.<span class=\"hljs-property\">message</span>)<br>        &#125;<br>      &#125;<br>    &#125;);<br>  &#125;<br><span class=\"hljs-comment\">//form --&gt;json</span><br>(<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"><span class=\"hljs-variable language_\">window</span>, $</span>) &#123;<br>    $.fn.<span class=\"hljs-property\">serializeJson</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;<span class=\"hljs-comment\">//form serialize to json</span><br>      <span class=\"hljs-keyword\">var</span> serializeObj = &#123;&#125;;<br>      <span class=\"hljs-keyword\">var</span> array = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">serializeArray</span>();<br>      $(array).<span class=\"hljs-title function_\">each</span>(<br>              <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;<br>                <span class=\"hljs-keyword\">if</span> (serializeObj[<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">name</span>]) &#123;<br>                  <span class=\"hljs-keyword\">if</span> ($.<span class=\"hljs-title function_\">isArray</span>(serializeObj[<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">name</span>])) &#123;<br>                    serializeObj[<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">name</span>].<span class=\"hljs-title function_\">push</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">value</span>);<br>                  &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>                    serializeObj[<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">name</span>] = [<br>                      serializeObj[<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">name</span>], <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">value</span>];<br>                  &#125;<br>                &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>                  serializeObj[<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">name</span>] = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">value</span>;<br>                &#125;<br>              &#125;);<br>      <span class=\"hljs-keyword\">return</span> serializeObj;<br>    &#125;;<br>  &#125;)(<span class=\"hljs-variable language_\">window</span>, jQuery);<br></code></pre></td></tr></table></figure>\n<h2 id=\"2-上传图片\"><a href=\"#2-上传图片\" class=\"headerlink\" title=\"2.上传图片\"></a>2.上传图片</h2><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs typescript\"> <span class=\"hljs-comment\">//上传图片</span><br>$(<span class=\"hljs-string\">&quot;#m_image_addr&quot;</span>).<span class=\"hljs-title function_\">live</span>(<span class=\"hljs-string\">&quot;change&quot;</span>,<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)&#123;<br>        <span class=\"hljs-comment\">//注意这里不能写错。。。</span><br>        <span class=\"hljs-keyword\">var</span> file=$(<span class=\"hljs-string\">&quot;#m_image_addr&quot;</span>)[<span class=\"hljs-number\">0</span>].<span class=\"hljs-property\">files</span>[<span class=\"hljs-number\">0</span>];<br>        <span class=\"hljs-keyword\">var</span> formData = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">FormData</span>();<br>        formData.<span class=\"hljs-title function_\">append</span>(<span class=\"hljs-string\">&quot;m_image_addr&quot;</span>,file);<br>        <span class=\"hljs-comment\">//对文件类型进行判断</span><br>        <span class=\"hljs-keyword\">var</span> index=file.<span class=\"hljs-property\">name</span>.<span class=\"hljs-title function_\">lastIndexOf</span>(<span class=\"hljs-string\">&quot;.&quot;</span>);<br>        <span class=\"hljs-keyword\">var</span> <span class=\"hljs-keyword\">type</span>=file.<span class=\"hljs-property\">name</span>.<span class=\"hljs-title function_\">substring</span>(index);<br>        <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">type</span>!=<span class=\"hljs-string\">&quot;.jpg&quot;</span>&amp;&amp;<span class=\"hljs-keyword\">type</span>!=<span class=\"hljs-string\">&quot;.png&quot;</span>)&#123;<br>          <span class=\"hljs-title function_\">alert</span>(<span class=\"hljs-string\">&quot;只能上传jpg和png格式的图片！！&quot;</span>);<br>          <span class=\"hljs-keyword\">return</span>;<br>        &#125;<br>        $.<span class=\"hljs-title function_\">ajax</span>(&#123;<br>          <span class=\"hljs-attr\">url</span>:<span class=\"hljs-string\">&quot;../upload.do&quot;</span>,<br>          <span class=\"hljs-attr\">data</span>:formData,<br>          <span class=\"hljs-attr\">dataType</span>:<span class=\"hljs-string\">&quot;text&quot;</span>,<br>          <span class=\"hljs-attr\">type</span>:<span class=\"hljs-string\">&quot;post&quot;</span>,<br>          <span class=\"hljs-comment\">//这两个属性必须设置！！！！</span><br>          <span class=\"hljs-attr\">contentType</span>: <span class=\"hljs-literal\">false</span>,<br>          <span class=\"hljs-attr\">processData</span>: <span class=\"hljs-literal\">false</span>, <span class=\"hljs-comment\">//设置为true时，ajax提交的时候不会序列化data，而是直接使用data</span><br>          <span class=\"hljs-attr\">success</span>:<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">path</span>) &#123;<br>            $(<span class=\"hljs-string\">&quot;#yulan&quot;</span>).<span class=\"hljs-title function_\">attr</span>(<span class=\"hljs-string\">&quot;src&quot;</span>,path);<br>            $(<span class=\"hljs-string\">&quot;input[name=&#x27;imgUrl&#x27;]&quot;</span>).<span class=\"hljs-title function_\">attr</span>(<span class=\"hljs-string\">&quot;value&quot;</span>,path);<br>          &#125;<br>        &#125;)<br>      &#125;)<br></code></pre></td></tr></table></figure>\n<h2 id=\"3-加载前端数据到表单\"><a href=\"#3-加载前端数据到表单\" class=\"headerlink\" title=\"3.加载前端数据到表单\"></a>3.加载前端数据到表单</h2><figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\"><span class=\"hljs-comment\">//获取json接口</span><br>$.get(<span class=\"hljs-string\">&quot;/basicInfo/&quot;</span>+$.cookie(&#x27;id&#x27;),&#123;&#125;,<span class=\"hljs-keyword\">function</span>(result)&#123;<br>      <span class=\"hljs-keyword\">if</span> (result.resp_code==<span class=\"hljs-string\">&quot;0&quot;</span>)&#123;<br>        load<span class=\"hljs-constructor\">Data(<span class=\"hljs-params\">result</span>.<span class=\"hljs-params\">datas</span>)</span>;<br>      &#125;<span class=\"hljs-keyword\">else</span>&#123;<br>        <span class=\"hljs-constructor\">$(<span class=\"hljs-string\">&quot;#msg2&quot;</span>)</span>.text(result.resp_msg);<br>      &#125;<br>    &#125;,<span class=\"hljs-string\">&quot;json&quot;</span>)&#123;<br>      <span class=\"hljs-keyword\">if</span> (result.resp_code==<span class=\"hljs-string\">&quot;0&quot;</span>)&#123;<br>        load<span class=\"hljs-constructor\">Data(<span class=\"hljs-params\">result</span>.<span class=\"hljs-params\">datas</span>)</span>;<br>      &#125;<span class=\"hljs-keyword\">else</span>&#123;<br>        <span class=\"hljs-constructor\">$(<span class=\"hljs-string\">&quot;#msg2&quot;</span>)</span>.text(result.resp_msg);<br>      &#125;<br>    &#125;,<span class=\"hljs-string\">&quot;json&quot;</span>)<br> <span class=\"hljs-comment\">//加载前端数据到表单</span><br>  <span class=\"hljs-keyword\">function</span> load<span class=\"hljs-constructor\">Data(<span class=\"hljs-params\">obj</span>)</span>&#123;<br>    <span class=\"hljs-keyword\">if</span>($.<span class=\"hljs-keyword\">type</span>(obj)!=<span class=\"hljs-string\">&quot;object&quot;</span>)&#123;<br>      alert(<span class=\"hljs-string\">&quot;页面初始化错误！&quot;</span>);<br>      return <span class=\"hljs-literal\">false</span>;<br>    &#125;<br>    var key,value,tagName,<span class=\"hljs-keyword\">type</span>,arr;<br>    <span class=\"hljs-keyword\">for</span>(x <span class=\"hljs-keyword\">in</span> obj)&#123;<br>      key = x;<br>      value = obj<span class=\"hljs-literal\">[<span class=\"hljs-identifier\">x</span>]</span>;<br>      <span class=\"hljs-constructor\">$(<span class=\"hljs-string\">&quot;[name=&#x27;&quot;</span>+<span class=\"hljs-params\">key</span>+<span class=\"hljs-string\">&quot;&#x27;],[name=&#x27;&quot;</span>+<span class=\"hljs-params\">key</span>+<span class=\"hljs-string\">&quot;[]&#x27;]&quot;</span>)</span>.each(<span class=\"hljs-keyword\">function</span>(index)&#123;<br>        tagName = <span class=\"hljs-constructor\">$(<span class=\"hljs-params\">this</span>)</span><span class=\"hljs-literal\">[<span class=\"hljs-number\">0</span>]</span>.tagName;<br>        <span class=\"hljs-keyword\">type</span> = <span class=\"hljs-constructor\">$(<span class=\"hljs-params\">this</span>)</span>.attr(&#x27;<span class=\"hljs-keyword\">type</span>&#x27;);<br>        <span class=\"hljs-keyword\">if</span> (tagName==&#x27;IMG&#x27;)&#123;<br>          <span class=\"hljs-constructor\">$(<span class=\"hljs-params\">this</span>)</span>.attr(&#x27;src&#x27;,value);<br>        &#125;<br>        <span class=\"hljs-keyword\">if</span>(tagName==&#x27;INPUT&#x27;)&#123;<br>          <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">type</span>==&#x27;radio&#x27;)&#123;                      <span class=\"hljs-comment\">//处理radio</span><br>            <span class=\"hljs-constructor\">$(<span class=\"hljs-params\">this</span>)</span>.attr(&#x27;checked&#x27;,<span class=\"hljs-constructor\">$(<span class=\"hljs-params\">this</span>)</span>.<span class=\"hljs-keyword\">val</span><span class=\"hljs-literal\">()</span>==value);<br>          &#125;<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">type</span>==&#x27;checkbox&#x27;)&#123;             <span class=\"hljs-comment\">//处理checkbox</span><br>            <span class=\"hljs-keyword\">for</span>(var i =<span class=\"hljs-number\">0</span>;i&lt;value.length;i++)&#123;<br>              <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-constructor\">$(<span class=\"hljs-params\">this</span>)</span>.<span class=\"hljs-keyword\">val</span><span class=\"hljs-literal\">()</span>==value<span class=\"hljs-literal\">[<span class=\"hljs-identifier\">i</span>]</span>)&#123;<br>                <span class=\"hljs-constructor\">$(<span class=\"hljs-params\">this</span>)</span>.attr(&#x27;checked&#x27;,<span class=\"hljs-literal\">true</span>);<br>                break;<br>              &#125;<br>            &#125;<br>          &#125;<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">type</span>==&#x27;date&#x27;)&#123;                  <span class=\"hljs-comment\">//处理日期型表单</span><br>            <span class=\"hljs-keyword\">if</span>(parse<span class=\"hljs-constructor\">Int(<span class=\"hljs-params\">value</span>)</span>&gt;<span class=\"hljs-number\">1000000000000</span>)      <span class=\"hljs-comment\">//毫秒时间戳</span><br>              <span class=\"hljs-constructor\">$(<span class=\"hljs-params\">this</span>)</span><span class=\"hljs-literal\">[<span class=\"hljs-number\">0</span>]</span>.valueAsNumber=parse<span class=\"hljs-constructor\">Int(<span class=\"hljs-params\">value</span>)</span>;<br>            <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(parse<span class=\"hljs-constructor\">Int(<span class=\"hljs-params\">value</span>)</span>&gt;<span class=\"hljs-number\">1000000000</span>)    <span class=\"hljs-comment\">//秒时间戳</span><br>              <span class=\"hljs-constructor\">$(<span class=\"hljs-params\">this</span>)</span><span class=\"hljs-literal\">[<span class=\"hljs-number\">0</span>]</span>.valueAsNumber=parse<span class=\"hljs-constructor\">Int(<span class=\"hljs-params\">value</span>)</span>*<span class=\"hljs-number\">1000</span>;<br>            <span class=\"hljs-keyword\">else</span>                                   <span class=\"hljs-comment\">//字符串时间</span><br>              <span class=\"hljs-constructor\">$(<span class=\"hljs-params\">this</span>)</span><span class=\"hljs-literal\">[<span class=\"hljs-number\">0</span>]</span>.valueAsDate=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-constructor\">Date(<span class=\"hljs-params\">value</span>)</span>;<br>          &#125;<span class=\"hljs-keyword\">else</span>&#123;<br>            <span class=\"hljs-keyword\">if</span>($.is<span class=\"hljs-constructor\">Array(<span class=\"hljs-params\">value</span>)</span>)                    <span class=\"hljs-comment\">//表单组情形(多个同名表单)</span><br>              <span class=\"hljs-constructor\">$(<span class=\"hljs-params\">this</span>)</span>.<span class=\"hljs-keyword\">val</span>(value<span class=\"hljs-literal\">[<span class=\"hljs-identifier\">index</span>]</span>);<br>            <span class=\"hljs-keyword\">else</span><br>              <span class=\"hljs-constructor\">$(<span class=\"hljs-params\">this</span>)</span>.<span class=\"hljs-keyword\">val</span>(value);<br>          &#125;<br>          <span class=\"hljs-comment\">//$(this).uniform();//自用！</span><br>        &#125;<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(tagName==&#x27;SELECT&#x27;)&#123;    <span class=\"hljs-comment\">//处理select和textarea</span><br>          <span class=\"hljs-constructor\">$(<span class=\"hljs-params\">this</span>)</span>.<span class=\"hljs-keyword\">val</span>(value);<br>        &#125;<br>      &#125;);<br>    &#125;<br>  &#125;<br></code></pre></td></tr></table></figure>\n<h2 id=\"4-单按钮开关\"><a href=\"#4-单按钮开关\" class=\"headerlink\" title=\"4.单按钮开关\"></a>4.单按钮开关</h2><figure class=\"highlight arcade\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs arcade\">$(<span class=\"hljs-string\">&quot;#daohang&quot;</span>).click(<br>\t<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;<br>\t\t<span class=\"hljs-keyword\">var</span> isON=$(this).attr(<span class=\"hljs-string\">&quot;isON&quot;</span>);<br>\t\t<span class=\"hljs-keyword\">if</span>(isON!=<span class=\"hljs-string\">&quot;1&quot;</span>)&#123;<span class=\"hljs-comment\">//关闭状态</span><br>\t\t\t$(<span class=\"hljs-string\">&quot;#content &quot;</span>).css(&#123;<span class=\"hljs-string\">&#x27;margin-left&#x27;</span>:<span class=\"hljs-string\">&#x27;220px&#x27;</span>&#125;);<br>\t\t\t$(<span class=\"hljs-string\">&quot;#sidebar&quot;</span>).children(<span class=\"hljs-string\">&quot;ul&quot;</span>).css(&#123;<span class=\"hljs-string\">&#x27;display&#x27;</span>: <span class=\"hljs-string\">&#x27;block&#x27;</span>&#125;);<br>\t\t\t$(<span class=\"hljs-string\">&quot;#sidebar&quot;</span>).show();<br>\t\t\t$(<span class=\"hljs-string\">&quot;#zhankai&quot;</span>).<span class=\"hljs-built_in\">text</span>(<span class=\"hljs-string\">&quot;关闭导航&quot;</span>);<br>\t\t\tisON=<span class=\"hljs-number\">1</span>;<br>\t\t&#125;<span class=\"hljs-keyword\">else</span>&#123;<span class=\"hljs-comment\">//开启状态</span><br>\t\t\t$(<span class=\"hljs-string\">&quot;#content &quot;</span>).css(&#123;<span class=\"hljs-string\">&#x27;margin-left&#x27;</span>:<span class=\"hljs-string\">&#x27;0px&#x27;</span>&#125;);<br>\t\t\t$(<span class=\"hljs-string\">&quot;#sidebar&quot;</span>).children(<span class=\"hljs-string\">&quot;ul&quot;</span>).css(&#123;<span class=\"hljs-string\">&#x27;display&#x27;</span>: <span class=\"hljs-string\">&#x27;none&#x27;</span>&#125;);<br>\t\t\t$(<span class=\"hljs-string\">&quot;#sidebar&quot;</span>).hide();<br>\t\t\t$(<span class=\"hljs-string\">&quot;#zhankai&quot;</span>).<span class=\"hljs-built_in\">text</span>(<span class=\"hljs-string\">&quot;展开导航&quot;</span>);<br>\t\t\tisON=<span class=\"hljs-number\">0</span>;<br>\t\t&#125;<br>\t\t$(this).attr(<span class=\"hljs-string\">&quot;isON&quot;</span>,isON);<br>\t&#125;<br>)<br></code></pre></td></tr></table></figure>\n<h2 id=\"5-回车提交事件\"><a href=\"#5-回车提交事件\" class=\"headerlink\" title=\"5.回车提交事件\"></a>5.回车提交事件</h2><p><code>\t$(&quot;#verify&quot;).bind(&quot;keydown&quot;,function(event)&#123; if(event.keyCode == &quot;13&quot;) &#123; &#125;\t&#125;)</code></p>\n"},{"title":"常用sql","date":"2022-09-05T09:09:05.000Z","category_bar":true,"_content":"# 常用sql\n\n---\n\n[toc]\n\n---\n\n## 1.case when\n```\nSELECT\n\t CASE WHEN k.num>0 THEN \"大\" ELSE \"小\" END AS SE\nFROM\n\tdy_sku K\n//作为条件时：\nSELECT\n\t\t CASE WHEN (ifnull(k.num,0)-ifnull(k.sale_num,0))>0 THEN \"库存充足\" ELSE \"缺货中\" END AS repertoryStatus\nFROM\n\t\tdy_sku k\n\t\tLEFT JOIN dy_spu p ON k.spu_id = p.id\n<where>\n\t\t<if test=\"repertoryStatus != null and repertoryStatus != ''\">\n\t\t\t\tand CASE WHEN (ifnull(k.num,0)-ifnull(k.sale_num,0))>0 THEN \"库存充足\" ELSE \"缺货中\" END=#{repertoryStatus}\n\t\t</if>\n</where>\nORDER BY k.sort ASC,k.update_time DESC,k.create_time DESC\nlimit #{pageNum},#{pageSize}\n```\n## 2. 某列分组并统计个数\n```\nSELECT\n\tsku_id,\n\tCOUNT(sku_id) ,\n\tMAX(create_time)\nFROM\n\tmall_user_care_log \nWHERE\n\ttype = 1 \nGROUP BY\n\tsku_id\n```\n## 3. 计算时间间隔\n```\n//1.间隔天数\ndatediff(NOW(),c.create_time)\nCASE WHEN (datediff(NOW(),c.create_time)>=30) THEN \"1\" ELSE \"0\" END AS thirtyDayExceptStatus\n//2.自定单位\nFRAC_SECOND 表示间隔是毫秒\nSECOND 秒\nMINUTE 分钟\nHOUR 小时\nDAY 天\nWEEK 星期\nMONTH 月\nQUARTER 季度\nYEAR 年\nselect timestampdiff(week,'2019-07-30','2019-09-04');\n3. 格式化时间只保留天与当前对比输出1即为过期（当前时间小于过期时间）\nCASE WHEN (timestampdiff(DAY,DATE_FORMAT(t.expire_time,'%Y-%m-%d'),DATE_FORMAT(NOW(),'%Y-%m-%d') )>=0 ) THEN '1' ELSE '0' END AS preExpireStatus,\n```\n## 4.格式化时间\n```\nDATE_FORMAT(k.apply_time,'%Y年%m月')\tAS 'applyTime'\n```\n## 5.mysql 触发器\n```\n-- ----------------------------\n-- Triggers structure for table sku_tag\n-- ----------------------------\n#新增触发器\nDROP TRIGGER IF EXISTS `tag_sku_insert`;\ndelimiter ;;\nCREATE TRIGGER `tag_sku_insert` AFTER INSERT ON `sku_tag` FOR EACH ROW BEGIN\n\tUPDATE dy_sku SET is_has_tag = 1 WHERE id = NEW.sku_id;\nEND;;\ndelimiter ;\n\n\n#更新触发器\nDROP TRIGGER IF EXISTS `tag_sku_update`;\ndelimiter ;;\nCREATE TRIGGER `tag_sku_update` AFTER UPDATE ON `sku_tag` FOR EACH ROW BEGIN\n\tIF NEW.one_tag_id IS NULL THEN\t##去除标签\n\t\tUPDATE dy_sku SET is_has_tag = 0 WHERE id = NEW.sku_id;\n\tELSE \n\t\tUPDATE dy_sku SET is_has_tag = 1 WHERE id = NEW.sku_id;\n\tEND IF;\nEND;;\ndelimiter ;\n\nDROP TRIGGER IF EXISTS `tag_po_det_update`;\ndelimiter ;;\nCREATE TRIGGER `tag_po_det_update` AFTER UPDATE ON `sms_wms_po_det` FOR EACH ROW BEGIN\n\tDECLARE  count int  DEFAULT 0;\n\tDECLARE  count2 int  DEFAULT 0;\n\tSELECT count(1) into count FROM sms_wms_po_det s WHERE s.twd_po_no = NEW.twd_po_no and s.twd_is_close ='Y';\n\tSELECT count(1) into count2 FROM sms_wms_po_det s WHERE s.twd_po_no = NEW.twd_po_no and s.twd_is_close ='N';\n\tIF count > 0 THEN\t##存在关结\n\t\tUPDATE sms_wms_po SET po_state = '2' WHERE po_no = NEW.twd_po_no;\n\tEND IF;\n\tIF count2<= 0 THEN  ##未关结数<=0,所有关结\n\t\tUPDATE sms_wms_po SET po_state = '4' WHERE po_no = NEW.twd_po_no;\n\tEND IF;\nEND;;\ndelimiter ;\n\n#删除触发器\nDROP TRIGGER IF EXISTS `tag_sku_delete`;\ndelimiter ;;\nCREATE TRIGGER `tag_sku_delete` AFTER DELETE ON `sku_tag` FOR EACH ROW BEGIN\n\t\tUPDATE dy_sku SET is_has_tag = 0 WHERE id = OLD.sku_id;\nEND;;\ndelimiter ;\n\n#启动触发器\nSET FOREIGN_KEY_CHECKS = 1;\n  \n#测试\nSELECT is_has_tag FROM dy_sku WHERE id=13;\nINSERT INTO `xmall`.`sku_tag`( `sku_id`, `one_tag_id`, `one_tag_name`, `two_tag_id`, `two_tag_name`) VALUES (13, 2, '测试22', NULL, NULL);\nSELECT is_has_tag FROM dy_sku WHERE id=13;\n\nSELECT is_has_tag FROM dy_sku WHERE id=13;\n\tUPDATE  SET `one_tag_id` = NULL WHERE sku_id=13;\nSELECT is_has_tag FROM dy_sku WHERE id=13;\n\nSELECT is_has_tag FROM dy_sku WHERE id=13;\n\tDELETE FROM `xmall`.`sku_tag` WHERE sku_id=13;\nSELECT is_has_tag FROM dy_sku WHERE id=13;\n\n```\n## 6.连接两列数据（注意concat的NULL处理）\n```\nCONCAT(IFNULL(m.company_province,''),IFNULL(m.m.company_city,'')) as adress\n```\n## 7.查询有重复的某列数据\n```\nSELECT t.OQC_NO FROM t_oqa_bath t  group by t.OQC_NO having count(*)>1\n```\n## 8. 合并某一列数据并以逗号隔开\n```\nSELECT GROUP_CONCAT(DISTINCT m.project_id) FROM sms_wms_out_stock_pm_item m WHERE m.doc_no = t.doc_no GROUP BY m.doc_no\n```\n## 9.计算两列差\n```\nIFNULL(t.osd_amount_real,0)-IFNULL(t.osd_amount_plan,0) osdAmountRetired\n```\n## 10.根据某两列分组，其他列值相加\n```\nSELECT\n\tt.item_code itemCode,\n\tt.item_name itemName,\n\tSUM( IFNULL( t.osd_amount_plan, 0 ) ) osdAmountPlan,\n\tSUM( IFNULL( t.osd_amount_real, 0 ) ) osdAmountReal,\n\tSUM( IFNULL( t.osd_amount_real, 0 )- IFNULL( t.osd_amount_plan, 0 )) osdAmountRetired \nFROM\n\tsms_wms_out_stock_detail t \nGROUP BY\n\tt.item_code,\n\tt.item_name\n```\n## 11.根据两列计算百分比\n```\nconcat ( left (t.err_qty / t.input_qty *100,5),'%') as errPercentage, -- 不良率\n```\n## 12. 截取字符串\n```\n//截取左边的4个字符\nleft（name,4）\n//截取右边的2个字符\nright（name,2）\n//去除后四位\nleft(name,length(name)-4)\n```\n## 13. mybatis动态循环\n\n```\nwhere 1=1\n<if test=\"ids != null and ids.size()>0\">\n\tand t.id IN\n\t<foreach collection=\"ids\" separator=\",\" close=\")\" open=\"(\" item=\"item\" index=\"index\">\n\t\t#{item}\n\t</foreach>\n</if>\n```\n\n## 14. 某字段去重并保留一条\n\n```\nDELETE FROM auto WHERE id in(\n    SELECT a.id FROM\n    (\n        ##通过user_id,disable查询重复记录，并保留一条\n        SELECT b.* FROM auto b\n        WHERE b.user_id IN (SELECT user_id FROM auto GROUP BY license_plate_no, `owner`, user_id, `disable` HAVING count(*)>1)\n          AND b.`disable` IN (SELECT `disable` FROM auto GROUP BY license_plate_no, `owner`, user_id, `disable` HAVING count(*)>1)\n          AND b.id NOT IN (SELECT MIN(id) FROM auto GROUP BY license_plate_no, `owner`, user_id, `disable` HAVING count(*)>1)\n    ) a\n);\n```\n\n## 15. 一对多时分组或查询最大值\n\n```\n订单，支付 一对多取出最大支付时间\nselect\n    (select MAX(p.pay_time) from payment p where p.parent_order_no=t.parent_order_no) payTime,\n    t.parent_order_no parentOrderNo\nfrom sub_purchase_order t\n```\n\n## 16. 查重\n\n```\nSELECT  Name FROM  dbo.Member t WHERE Name IN (SELECT Name FROM dbo.Member GROUP BY Name HAVING COUNT(Name)>1 ) ORDER BY t.Name\n```\n\n","source":"_posts/BookMark/Code Demo/常用sql.md","raw":"---\ntitle: 常用sql\ndate: 2022-09-05 17:09:05\ncategory_bar: true\ncategories: Code Demo\ntags:\n- mysql\n---\n# 常用sql\n\n---\n\n[toc]\n\n---\n\n## 1.case when\n```\nSELECT\n\t CASE WHEN k.num>0 THEN \"大\" ELSE \"小\" END AS SE\nFROM\n\tdy_sku K\n//作为条件时：\nSELECT\n\t\t CASE WHEN (ifnull(k.num,0)-ifnull(k.sale_num,0))>0 THEN \"库存充足\" ELSE \"缺货中\" END AS repertoryStatus\nFROM\n\t\tdy_sku k\n\t\tLEFT JOIN dy_spu p ON k.spu_id = p.id\n<where>\n\t\t<if test=\"repertoryStatus != null and repertoryStatus != ''\">\n\t\t\t\tand CASE WHEN (ifnull(k.num,0)-ifnull(k.sale_num,0))>0 THEN \"库存充足\" ELSE \"缺货中\" END=#{repertoryStatus}\n\t\t</if>\n</where>\nORDER BY k.sort ASC,k.update_time DESC,k.create_time DESC\nlimit #{pageNum},#{pageSize}\n```\n## 2. 某列分组并统计个数\n```\nSELECT\n\tsku_id,\n\tCOUNT(sku_id) ,\n\tMAX(create_time)\nFROM\n\tmall_user_care_log \nWHERE\n\ttype = 1 \nGROUP BY\n\tsku_id\n```\n## 3. 计算时间间隔\n```\n//1.间隔天数\ndatediff(NOW(),c.create_time)\nCASE WHEN (datediff(NOW(),c.create_time)>=30) THEN \"1\" ELSE \"0\" END AS thirtyDayExceptStatus\n//2.自定单位\nFRAC_SECOND 表示间隔是毫秒\nSECOND 秒\nMINUTE 分钟\nHOUR 小时\nDAY 天\nWEEK 星期\nMONTH 月\nQUARTER 季度\nYEAR 年\nselect timestampdiff(week,'2019-07-30','2019-09-04');\n3. 格式化时间只保留天与当前对比输出1即为过期（当前时间小于过期时间）\nCASE WHEN (timestampdiff(DAY,DATE_FORMAT(t.expire_time,'%Y-%m-%d'),DATE_FORMAT(NOW(),'%Y-%m-%d') )>=0 ) THEN '1' ELSE '0' END AS preExpireStatus,\n```\n## 4.格式化时间\n```\nDATE_FORMAT(k.apply_time,'%Y年%m月')\tAS 'applyTime'\n```\n## 5.mysql 触发器\n```\n-- ----------------------------\n-- Triggers structure for table sku_tag\n-- ----------------------------\n#新增触发器\nDROP TRIGGER IF EXISTS `tag_sku_insert`;\ndelimiter ;;\nCREATE TRIGGER `tag_sku_insert` AFTER INSERT ON `sku_tag` FOR EACH ROW BEGIN\n\tUPDATE dy_sku SET is_has_tag = 1 WHERE id = NEW.sku_id;\nEND;;\ndelimiter ;\n\n\n#更新触发器\nDROP TRIGGER IF EXISTS `tag_sku_update`;\ndelimiter ;;\nCREATE TRIGGER `tag_sku_update` AFTER UPDATE ON `sku_tag` FOR EACH ROW BEGIN\n\tIF NEW.one_tag_id IS NULL THEN\t##去除标签\n\t\tUPDATE dy_sku SET is_has_tag = 0 WHERE id = NEW.sku_id;\n\tELSE \n\t\tUPDATE dy_sku SET is_has_tag = 1 WHERE id = NEW.sku_id;\n\tEND IF;\nEND;;\ndelimiter ;\n\nDROP TRIGGER IF EXISTS `tag_po_det_update`;\ndelimiter ;;\nCREATE TRIGGER `tag_po_det_update` AFTER UPDATE ON `sms_wms_po_det` FOR EACH ROW BEGIN\n\tDECLARE  count int  DEFAULT 0;\n\tDECLARE  count2 int  DEFAULT 0;\n\tSELECT count(1) into count FROM sms_wms_po_det s WHERE s.twd_po_no = NEW.twd_po_no and s.twd_is_close ='Y';\n\tSELECT count(1) into count2 FROM sms_wms_po_det s WHERE s.twd_po_no = NEW.twd_po_no and s.twd_is_close ='N';\n\tIF count > 0 THEN\t##存在关结\n\t\tUPDATE sms_wms_po SET po_state = '2' WHERE po_no = NEW.twd_po_no;\n\tEND IF;\n\tIF count2<= 0 THEN  ##未关结数<=0,所有关结\n\t\tUPDATE sms_wms_po SET po_state = '4' WHERE po_no = NEW.twd_po_no;\n\tEND IF;\nEND;;\ndelimiter ;\n\n#删除触发器\nDROP TRIGGER IF EXISTS `tag_sku_delete`;\ndelimiter ;;\nCREATE TRIGGER `tag_sku_delete` AFTER DELETE ON `sku_tag` FOR EACH ROW BEGIN\n\t\tUPDATE dy_sku SET is_has_tag = 0 WHERE id = OLD.sku_id;\nEND;;\ndelimiter ;\n\n#启动触发器\nSET FOREIGN_KEY_CHECKS = 1;\n  \n#测试\nSELECT is_has_tag FROM dy_sku WHERE id=13;\nINSERT INTO `xmall`.`sku_tag`( `sku_id`, `one_tag_id`, `one_tag_name`, `two_tag_id`, `two_tag_name`) VALUES (13, 2, '测试22', NULL, NULL);\nSELECT is_has_tag FROM dy_sku WHERE id=13;\n\nSELECT is_has_tag FROM dy_sku WHERE id=13;\n\tUPDATE  SET `one_tag_id` = NULL WHERE sku_id=13;\nSELECT is_has_tag FROM dy_sku WHERE id=13;\n\nSELECT is_has_tag FROM dy_sku WHERE id=13;\n\tDELETE FROM `xmall`.`sku_tag` WHERE sku_id=13;\nSELECT is_has_tag FROM dy_sku WHERE id=13;\n\n```\n## 6.连接两列数据（注意concat的NULL处理）\n```\nCONCAT(IFNULL(m.company_province,''),IFNULL(m.m.company_city,'')) as adress\n```\n## 7.查询有重复的某列数据\n```\nSELECT t.OQC_NO FROM t_oqa_bath t  group by t.OQC_NO having count(*)>1\n```\n## 8. 合并某一列数据并以逗号隔开\n```\nSELECT GROUP_CONCAT(DISTINCT m.project_id) FROM sms_wms_out_stock_pm_item m WHERE m.doc_no = t.doc_no GROUP BY m.doc_no\n```\n## 9.计算两列差\n```\nIFNULL(t.osd_amount_real,0)-IFNULL(t.osd_amount_plan,0) osdAmountRetired\n```\n## 10.根据某两列分组，其他列值相加\n```\nSELECT\n\tt.item_code itemCode,\n\tt.item_name itemName,\n\tSUM( IFNULL( t.osd_amount_plan, 0 ) ) osdAmountPlan,\n\tSUM( IFNULL( t.osd_amount_real, 0 ) ) osdAmountReal,\n\tSUM( IFNULL( t.osd_amount_real, 0 )- IFNULL( t.osd_amount_plan, 0 )) osdAmountRetired \nFROM\n\tsms_wms_out_stock_detail t \nGROUP BY\n\tt.item_code,\n\tt.item_name\n```\n## 11.根据两列计算百分比\n```\nconcat ( left (t.err_qty / t.input_qty *100,5),'%') as errPercentage, -- 不良率\n```\n## 12. 截取字符串\n```\n//截取左边的4个字符\nleft（name,4）\n//截取右边的2个字符\nright（name,2）\n//去除后四位\nleft(name,length(name)-4)\n```\n## 13. mybatis动态循环\n\n```\nwhere 1=1\n<if test=\"ids != null and ids.size()>0\">\n\tand t.id IN\n\t<foreach collection=\"ids\" separator=\",\" close=\")\" open=\"(\" item=\"item\" index=\"index\">\n\t\t#{item}\n\t</foreach>\n</if>\n```\n\n## 14. 某字段去重并保留一条\n\n```\nDELETE FROM auto WHERE id in(\n    SELECT a.id FROM\n    (\n        ##通过user_id,disable查询重复记录，并保留一条\n        SELECT b.* FROM auto b\n        WHERE b.user_id IN (SELECT user_id FROM auto GROUP BY license_plate_no, `owner`, user_id, `disable` HAVING count(*)>1)\n          AND b.`disable` IN (SELECT `disable` FROM auto GROUP BY license_plate_no, `owner`, user_id, `disable` HAVING count(*)>1)\n          AND b.id NOT IN (SELECT MIN(id) FROM auto GROUP BY license_plate_no, `owner`, user_id, `disable` HAVING count(*)>1)\n    ) a\n);\n```\n\n## 15. 一对多时分组或查询最大值\n\n```\n订单，支付 一对多取出最大支付时间\nselect\n    (select MAX(p.pay_time) from payment p where p.parent_order_no=t.parent_order_no) payTime,\n    t.parent_order_no parentOrderNo\nfrom sub_purchase_order t\n```\n\n## 16. 查重\n\n```\nSELECT  Name FROM  dbo.Member t WHERE Name IN (SELECT Name FROM dbo.Member GROUP BY Name HAVING COUNT(Name)>1 ) ORDER BY t.Name\n```\n\n","slug":"BookMark/Code Demo/常用sql","published":1,"updated":"2022-09-06T06:51:51.105Z","_id":"cl7ptszog000gaba56frbbf1j","comments":1,"layout":"post","photos":[],"link":"","content":"<h1><span id=\"常用sql\">常用sql</span></h1><hr>\n<p>[toc]</p>\n<hr>\n<h2><span id=\"1case-when\">1.case when</span></h2><figure class=\"highlight n1ql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs n1ql\"><span class=\"hljs-keyword\">SELECT</span><br>\t <span class=\"hljs-keyword\">CASE</span> <span class=\"hljs-keyword\">WHEN</span> k.num&gt;<span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">THEN</span> <span class=\"hljs-string\">&quot;大&quot;</span> <span class=\"hljs-keyword\">ELSE</span> <span class=\"hljs-string\">&quot;小&quot;</span> <span class=\"hljs-keyword\">END</span> <span class=\"hljs-keyword\">AS</span> SE<br><span class=\"hljs-keyword\">FROM</span><br>\tdy_sku K<br>//作为条件时：<br><span class=\"hljs-keyword\">SELECT</span><br>\t\t <span class=\"hljs-keyword\">CASE</span> <span class=\"hljs-keyword\">WHEN</span> (<span class=\"hljs-built_in\">ifnull</span>(k.num,<span class=\"hljs-number\">0</span>)-<span class=\"hljs-built_in\">ifnull</span>(k.sale_num,<span class=\"hljs-number\">0</span>))&gt;<span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">THEN</span> <span class=\"hljs-string\">&quot;库存充足&quot;</span> <span class=\"hljs-keyword\">ELSE</span> <span class=\"hljs-string\">&quot;缺货中&quot;</span> <span class=\"hljs-keyword\">END</span> <span class=\"hljs-keyword\">AS</span> repertoryStatus<br><span class=\"hljs-keyword\">FROM</span><br>\t\tdy_sku k<br>\t\t<span class=\"hljs-keyword\">LEFT</span> <span class=\"hljs-keyword\">JOIN</span> dy_spu p <span class=\"hljs-keyword\">ON</span> k.spu_id = p.id<br>&lt;<span class=\"hljs-keyword\">where</span>&gt;<br>\t\t&lt;<span class=\"hljs-keyword\">if</span> test=<span class=\"hljs-string\">&quot;repertoryStatus != null and repertoryStatus != &#x27;&#x27;&quot;</span>&gt;<br>\t\t\t\t<span class=\"hljs-keyword\">and</span> <span class=\"hljs-keyword\">CASE</span> <span class=\"hljs-keyword\">WHEN</span> (<span class=\"hljs-built_in\">ifnull</span>(k.num,<span class=\"hljs-number\">0</span>)-<span class=\"hljs-built_in\">ifnull</span>(k.sale_num,<span class=\"hljs-number\">0</span>))&gt;<span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">THEN</span> <span class=\"hljs-string\">&quot;库存充足&quot;</span> <span class=\"hljs-keyword\">ELSE</span> <span class=\"hljs-string\">&quot;缺货中&quot;</span> <span class=\"hljs-keyword\">END</span>=#&#123;repertoryStatus&#125;<br>\t\t&lt;/<span class=\"hljs-keyword\">if</span>&gt;<br>&lt;/<span class=\"hljs-keyword\">where</span>&gt;<br><span class=\"hljs-keyword\">ORDER</span> <span class=\"hljs-keyword\">BY</span> k.sort <span class=\"hljs-keyword\">ASC</span>,k.update_time <span class=\"hljs-keyword\">DESC</span>,k.create_time <span class=\"hljs-keyword\">DESC</span><br><span class=\"hljs-keyword\">limit</span> #&#123;pageNum&#125;,#&#123;pageSize&#125;<br></code></pre></td></tr></table></figure>\n<h2><span id=\"2-某列分组并统计个数\">2. 某列分组并统计个数</span></h2><figure class=\"highlight n1ql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs n1ql\"><span class=\"hljs-keyword\">SELECT</span><br>\tsku_id,<br>\t<span class=\"hljs-built_in\">COUNT</span>(sku_id) ,<br>\t<span class=\"hljs-built_in\">MAX</span>(create_time)<br><span class=\"hljs-keyword\">FROM</span><br>\tmall_user_care_log <br><span class=\"hljs-keyword\">WHERE</span><br>\t<span class=\"hljs-built_in\">type</span> = <span class=\"hljs-number\">1</span> <br><span class=\"hljs-keyword\">GROUP</span> <span class=\"hljs-keyword\">BY</span><br>\tsku_id<br></code></pre></td></tr></table></figure>\n<h2><span id=\"3-计算时间间隔\">3. 计算时间间隔</span></h2><figure class=\"highlight arcade\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs arcade\"><span class=\"hljs-comment\">//1.间隔天数</span><br><span class=\"hljs-built_in\">datediff</span>(<span class=\"hljs-built_in\">NOW</span>(),c.create_time)<br>CASE <span class=\"hljs-built_in\">WHEN</span> (<span class=\"hljs-built_in\">datediff</span>(<span class=\"hljs-built_in\">NOW</span>(),c.create_time)&gt;=<span class=\"hljs-number\">30</span>) THEN <span class=\"hljs-string\">&quot;1&quot;</span> <span class=\"hljs-keyword\">ELSE</span> <span class=\"hljs-string\">&quot;0&quot;</span> END AS thirtyDayExceptStatus<br><span class=\"hljs-comment\">//2.自定单位</span><br>FRAC_SECOND 表示间隔是毫秒<br><span class=\"hljs-built_in\">SECOND</span> 秒<br><span class=\"hljs-built_in\">MINUTE</span> 分钟<br><span class=\"hljs-built_in\">HOUR</span> 小时<br><span class=\"hljs-built_in\">DAY</span> 天<br><span class=\"hljs-built_in\">WEEK</span> 星期<br><span class=\"hljs-built_in\">MONTH</span> 月<br>QUARTER 季度<br><span class=\"hljs-built_in\">YEAR</span> 年<br>select timestampdiff(<span class=\"hljs-built_in\">week</span>,<span class=\"hljs-string\">&#x27;2019-07-30&#x27;</span>,<span class=\"hljs-string\">&#x27;2019-09-04&#x27;</span>);<br><span class=\"hljs-number\">3.</span> 格式化时间只保留天与当前对比输出<span class=\"hljs-number\">1</span>即为过期（当前时间小于过期时间）<br>CASE <span class=\"hljs-built_in\">WHEN</span> (timestampdiff(<span class=\"hljs-built_in\">DAY</span>,DATE_FORMAT(t.expire_time,<span class=\"hljs-string\">&#x27;%Y-%m-%d&#x27;</span>),DATE_FORMAT(<span class=\"hljs-built_in\">NOW</span>(),<span class=\"hljs-string\">&#x27;%Y-%m-%d&#x27;</span>) )&gt;=<span class=\"hljs-number\">0</span> ) THEN <span class=\"hljs-string\">&#x27;1&#x27;</span> <span class=\"hljs-keyword\">ELSE</span> <span class=\"hljs-string\">&#x27;0&#x27;</span> END AS preExpireStatus,<br></code></pre></td></tr></table></figure>\n<h2><span id=\"4格式化时间\">4.格式化时间</span></h2><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs stylus\"><span class=\"hljs-function\"><span class=\"hljs-title\">DATE_FORMAT</span><span class=\"hljs-params\">(k.apply_time,<span class=\"hljs-string\">&#x27;%Y年%m月&#x27;</span>)</span></span>\tAS <span class=\"hljs-string\">&#x27;applyTime&#x27;</span><br></code></pre></td></tr></table></figure>\n<h2><span id=\"5mysql-触发器\">5.mysql 触发器</span></h2><figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pgsql\"><span class=\"hljs-comment\">-- ----------------------------</span><br><span class=\"hljs-comment\">-- Triggers structure for table sku_tag</span><br><span class=\"hljs-comment\">-- ----------------------------</span><br>#新增触发器<br><span class=\"hljs-keyword\">DROP</span> <span class=\"hljs-keyword\">TRIGGER</span> <span class=\"hljs-keyword\">IF</span> <span class=\"hljs-keyword\">EXISTS</span> `tag_sku_insert`;<br><span class=\"hljs-keyword\">delimiter</span> ;;<br><span class=\"hljs-keyword\">CREATE</span> <span class=\"hljs-keyword\">TRIGGER</span> `tag_sku_insert` <span class=\"hljs-keyword\">AFTER</span> <span class=\"hljs-keyword\">INSERT</span> <span class=\"hljs-keyword\">ON</span> `sku_tag` <span class=\"hljs-keyword\">FOR</span> <span class=\"hljs-keyword\">EACH</span> <span class=\"hljs-keyword\">ROW</span> <span class=\"hljs-keyword\">BEGIN</span><br>\t<span class=\"hljs-keyword\">UPDATE</span> dy_sku <span class=\"hljs-keyword\">SET</span> is_has_tag = <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">WHERE</span> id = <span class=\"hljs-built_in\">NEW</span>.sku_id;<br><span class=\"hljs-keyword\">END</span>;;<br><span class=\"hljs-keyword\">delimiter</span> ;<br><br><br>#更新触发器<br><span class=\"hljs-keyword\">DROP</span> <span class=\"hljs-keyword\">TRIGGER</span> <span class=\"hljs-keyword\">IF</span> <span class=\"hljs-keyword\">EXISTS</span> `tag_sku_update`;<br><span class=\"hljs-keyword\">delimiter</span> ;;<br><span class=\"hljs-keyword\">CREATE</span> <span class=\"hljs-keyword\">TRIGGER</span> `tag_sku_update` <span class=\"hljs-keyword\">AFTER</span> <span class=\"hljs-keyword\">UPDATE</span> <span class=\"hljs-keyword\">ON</span> `sku_tag` <span class=\"hljs-keyword\">FOR</span> <span class=\"hljs-keyword\">EACH</span> <span class=\"hljs-keyword\">ROW</span> <span class=\"hljs-keyword\">BEGIN</span><br>\t<span class=\"hljs-keyword\">IF</span> <span class=\"hljs-built_in\">NEW</span>.one_tag_id <span class=\"hljs-keyword\">IS</span> <span class=\"hljs-keyword\">NULL</span> <span class=\"hljs-keyword\">THEN</span>\t##去除标签<br>\t\t<span class=\"hljs-keyword\">UPDATE</span> dy_sku <span class=\"hljs-keyword\">SET</span> is_has_tag = <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">WHERE</span> id = <span class=\"hljs-built_in\">NEW</span>.sku_id;<br>\t<span class=\"hljs-keyword\">ELSE</span> <br>\t\t<span class=\"hljs-keyword\">UPDATE</span> dy_sku <span class=\"hljs-keyword\">SET</span> is_has_tag = <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">WHERE</span> id = <span class=\"hljs-built_in\">NEW</span>.sku_id;<br>\t<span class=\"hljs-keyword\">END</span> <span class=\"hljs-keyword\">IF</span>;<br><span class=\"hljs-keyword\">END</span>;;<br><span class=\"hljs-keyword\">delimiter</span> ;<br><br><span class=\"hljs-keyword\">DROP</span> <span class=\"hljs-keyword\">TRIGGER</span> <span class=\"hljs-keyword\">IF</span> <span class=\"hljs-keyword\">EXISTS</span> `tag_po_det_update`;<br><span class=\"hljs-keyword\">delimiter</span> ;;<br><span class=\"hljs-keyword\">CREATE</span> <span class=\"hljs-keyword\">TRIGGER</span> `tag_po_det_update` <span class=\"hljs-keyword\">AFTER</span> <span class=\"hljs-keyword\">UPDATE</span> <span class=\"hljs-keyword\">ON</span> `sms_wms_po_det` <span class=\"hljs-keyword\">FOR</span> <span class=\"hljs-keyword\">EACH</span> <span class=\"hljs-keyword\">ROW</span> <span class=\"hljs-keyword\">BEGIN</span><br>\t<span class=\"hljs-keyword\">DECLARE</span>  count <span class=\"hljs-type\">int</span>  <span class=\"hljs-keyword\">DEFAULT</span> <span class=\"hljs-number\">0</span>;<br>\t<span class=\"hljs-keyword\">DECLARE</span>  count2 <span class=\"hljs-type\">int</span>  <span class=\"hljs-keyword\">DEFAULT</span> <span class=\"hljs-number\">0</span>;<br>\t<span class=\"hljs-keyword\">SELECT</span> count(<span class=\"hljs-number\">1</span>) <span class=\"hljs-keyword\">into</span> count <span class=\"hljs-keyword\">FROM</span> sms_wms_po_det s <span class=\"hljs-keyword\">WHERE</span> s.twd_po_no = <span class=\"hljs-built_in\">NEW</span>.twd_po_no <span class=\"hljs-keyword\">and</span> s.twd_is_close =<span class=\"hljs-string\">&#x27;Y&#x27;</span>;<br>\t<span class=\"hljs-keyword\">SELECT</span> count(<span class=\"hljs-number\">1</span>) <span class=\"hljs-keyword\">into</span> count2 <span class=\"hljs-keyword\">FROM</span> sms_wms_po_det s <span class=\"hljs-keyword\">WHERE</span> s.twd_po_no = <span class=\"hljs-built_in\">NEW</span>.twd_po_no <span class=\"hljs-keyword\">and</span> s.twd_is_close =<span class=\"hljs-string\">&#x27;N&#x27;</span>;<br>\t<span class=\"hljs-keyword\">IF</span> count &gt; <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">THEN</span>\t##存在关结<br>\t\t<span class=\"hljs-keyword\">UPDATE</span> sms_wms_po <span class=\"hljs-keyword\">SET</span> po_state = <span class=\"hljs-string\">&#x27;2&#x27;</span> <span class=\"hljs-keyword\">WHERE</span> po_no = <span class=\"hljs-built_in\">NEW</span>.twd_po_no;<br>\t<span class=\"hljs-keyword\">END</span> <span class=\"hljs-keyword\">IF</span>;<br>\t<span class=\"hljs-keyword\">IF</span> count2&lt;= <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">THEN</span>  ##未关结数&lt;=<span class=\"hljs-number\">0</span>,所有关结<br>\t\t<span class=\"hljs-keyword\">UPDATE</span> sms_wms_po <span class=\"hljs-keyword\">SET</span> po_state = <span class=\"hljs-string\">&#x27;4&#x27;</span> <span class=\"hljs-keyword\">WHERE</span> po_no = <span class=\"hljs-built_in\">NEW</span>.twd_po_no;<br>\t<span class=\"hljs-keyword\">END</span> <span class=\"hljs-keyword\">IF</span>;<br><span class=\"hljs-keyword\">END</span>;;<br><span class=\"hljs-keyword\">delimiter</span> ;<br><br>#删除触发器<br><span class=\"hljs-keyword\">DROP</span> <span class=\"hljs-keyword\">TRIGGER</span> <span class=\"hljs-keyword\">IF</span> <span class=\"hljs-keyword\">EXISTS</span> `tag_sku_delete`;<br><span class=\"hljs-keyword\">delimiter</span> ;;<br><span class=\"hljs-keyword\">CREATE</span> <span class=\"hljs-keyword\">TRIGGER</span> `tag_sku_delete` <span class=\"hljs-keyword\">AFTER</span> <span class=\"hljs-keyword\">DELETE</span> <span class=\"hljs-keyword\">ON</span> `sku_tag` <span class=\"hljs-keyword\">FOR</span> <span class=\"hljs-keyword\">EACH</span> <span class=\"hljs-keyword\">ROW</span> <span class=\"hljs-keyword\">BEGIN</span><br>\t\t<span class=\"hljs-keyword\">UPDATE</span> dy_sku <span class=\"hljs-keyword\">SET</span> is_has_tag = <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">WHERE</span> id = <span class=\"hljs-built_in\">OLD</span>.sku_id;<br><span class=\"hljs-keyword\">END</span>;;<br><span class=\"hljs-keyword\">delimiter</span> ;<br><br>#启动触发器<br><span class=\"hljs-keyword\">SET</span> FOREIGN_KEY_CHECKS = <span class=\"hljs-number\">1</span>;<br>  <br>#测试<br><span class=\"hljs-keyword\">SELECT</span> is_has_tag <span class=\"hljs-keyword\">FROM</span> dy_sku <span class=\"hljs-keyword\">WHERE</span> id=<span class=\"hljs-number\">13</span>;<br><span class=\"hljs-keyword\">INSERT</span> <span class=\"hljs-keyword\">INTO</span> `xmall`.`sku_tag`( `sku_id`, `one_tag_id`, `one_tag_name`, `two_tag_id`, `two_tag_name`) <span class=\"hljs-keyword\">VALUES</span> (<span class=\"hljs-number\">13</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-string\">&#x27;测试22&#x27;</span>, <span class=\"hljs-keyword\">NULL</span>, <span class=\"hljs-keyword\">NULL</span>);<br><span class=\"hljs-keyword\">SELECT</span> is_has_tag <span class=\"hljs-keyword\">FROM</span> dy_sku <span class=\"hljs-keyword\">WHERE</span> id=<span class=\"hljs-number\">13</span>;<br><br><span class=\"hljs-keyword\">SELECT</span> is_has_tag <span class=\"hljs-keyword\">FROM</span> dy_sku <span class=\"hljs-keyword\">WHERE</span> id=<span class=\"hljs-number\">13</span>;<br>\t<span class=\"hljs-keyword\">UPDATE</span>  <span class=\"hljs-keyword\">SET</span> `one_tag_id` = <span class=\"hljs-keyword\">NULL</span> <span class=\"hljs-keyword\">WHERE</span> sku_id=<span class=\"hljs-number\">13</span>;<br><span class=\"hljs-keyword\">SELECT</span> is_has_tag <span class=\"hljs-keyword\">FROM</span> dy_sku <span class=\"hljs-keyword\">WHERE</span> id=<span class=\"hljs-number\">13</span>;<br><br><span class=\"hljs-keyword\">SELECT</span> is_has_tag <span class=\"hljs-keyword\">FROM</span> dy_sku <span class=\"hljs-keyword\">WHERE</span> id=<span class=\"hljs-number\">13</span>;<br>\t<span class=\"hljs-keyword\">DELETE</span> <span class=\"hljs-keyword\">FROM</span> `xmall`.`sku_tag` <span class=\"hljs-keyword\">WHERE</span> sku_id=<span class=\"hljs-number\">13</span>;<br><span class=\"hljs-keyword\">SELECT</span> is_has_tag <span class=\"hljs-keyword\">FROM</span> dy_sku <span class=\"hljs-keyword\">WHERE</span> id=<span class=\"hljs-number\">13</span>;<br><br></code></pre></td></tr></table></figure>\n<h2><span id=\"6连接两列数据注意concat的null处理\">6.连接两列数据（注意concat的NULL处理）</span></h2><figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\"><span class=\"hljs-constructor\">CONCAT(IFNULL(<span class=\"hljs-params\">m</span>.<span class=\"hljs-params\">company_province</span>,&#x27;&#x27;)</span>,<span class=\"hljs-constructor\">IFNULL(<span class=\"hljs-params\">m</span>.<span class=\"hljs-params\">m</span>.<span class=\"hljs-params\">company_city</span>,&#x27;&#x27;)</span>) <span class=\"hljs-keyword\">as</span> adress<br></code></pre></td></tr></table></figure>\n<h2><span id=\"7查询有重复的某列数据\">7.查询有重复的某列数据</span></h2><figure class=\"highlight n1ql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs n1ql\"><span class=\"hljs-keyword\">SELECT</span> t.OQC_NO <span class=\"hljs-keyword\">FROM</span> t_oqa_bath t  <span class=\"hljs-keyword\">group</span> <span class=\"hljs-keyword\">by</span> t.OQC_NO <span class=\"hljs-keyword\">having</span> <span class=\"hljs-built_in\">count</span>(*)&gt;<span class=\"hljs-number\">1</span><br></code></pre></td></tr></table></figure>\n<h2><span id=\"8-合并某一列数据并以逗号隔开\">8. 合并某一列数据并以逗号隔开</span></h2><figure class=\"highlight n1ql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs n1ql\"><span class=\"hljs-keyword\">SELECT</span> GROUP_CONCAT(<span class=\"hljs-keyword\">DISTINCT</span> m.project_id) <span class=\"hljs-keyword\">FROM</span> sms_wms_out_stock_pm_item m <span class=\"hljs-keyword\">WHERE</span> m.doc_no = t.doc_no <span class=\"hljs-keyword\">GROUP</span> <span class=\"hljs-keyword\">BY</span> m.doc_no<br></code></pre></td></tr></table></figure>\n<h2><span id=\"9计算两列差\">9.计算两列差</span></h2><figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\"><span class=\"hljs-constructor\">IFNULL(<span class=\"hljs-params\">t</span>.<span class=\"hljs-params\">osd_amount_real</span>,0)</span>-<span class=\"hljs-constructor\">IFNULL(<span class=\"hljs-params\">t</span>.<span class=\"hljs-params\">osd_amount_plan</span>,0)</span> osdAmountRetired<br></code></pre></td></tr></table></figure>\n<h2><span id=\"10根据某两列分组其他列值相加\">10.根据某两列分组，其他列值相加</span></h2><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs stylus\">SELECT<br>\tt<span class=\"hljs-selector-class\">.item_code</span> itemCode,<br>\tt<span class=\"hljs-selector-class\">.item_name</span> itemName,<br>\t<span class=\"hljs-built_in\">SUM</span>( <span class=\"hljs-built_in\">IFNULL</span>( t<span class=\"hljs-selector-class\">.osd_amount_plan</span>, <span class=\"hljs-number\">0</span> ) ) osdAmountPlan,<br>\t<span class=\"hljs-built_in\">SUM</span>( <span class=\"hljs-built_in\">IFNULL</span>( t<span class=\"hljs-selector-class\">.osd_amount_real</span>, <span class=\"hljs-number\">0</span> ) ) osdAmountReal,<br>\t<span class=\"hljs-built_in\">SUM</span>( <span class=\"hljs-built_in\">IFNULL</span>( t<span class=\"hljs-selector-class\">.osd_amount_real</span>, <span class=\"hljs-number\">0</span> )- <span class=\"hljs-built_in\">IFNULL</span>( t<span class=\"hljs-selector-class\">.osd_amount_plan</span>, <span class=\"hljs-number\">0</span> )) osdAmountRetired <br>FROM<br>\tsms_wms_out_stock_detail t <br>GROUP BY<br>\tt<span class=\"hljs-selector-class\">.item_code</span>,<br>\tt.item_name<br></code></pre></td></tr></table></figure>\n<h2><span id=\"11根据两列计算百分比\">11.根据两列计算百分比</span></h2><figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pgsql\">concat ( left (t.err_qty / t.input_qty *<span class=\"hljs-number\">100</span>,<span class=\"hljs-number\">5</span>),<span class=\"hljs-string\">&#x27;%&#x27;</span>) <span class=\"hljs-keyword\">as</span> errPercentage, <span class=\"hljs-comment\">-- 不良率</span><br></code></pre></td></tr></table></figure>\n<h2><span id=\"12-截取字符串\">12. 截取字符串</span></h2><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs stylus\"><span class=\"hljs-comment\">//截取左边的4个字符</span><br><span class=\"hljs-attribute\">left</span>（name,<span class=\"hljs-number\">4</span>）<br><span class=\"hljs-comment\">//截取右边的2个字符</span><br><span class=\"hljs-attribute\">right</span>（name,<span class=\"hljs-number\">2</span>）<br><span class=\"hljs-comment\">//去除后四位</span><br><span class=\"hljs-function\"><span class=\"hljs-title\">left</span><span class=\"hljs-params\">(name,length(name)</span></span>-<span class=\"hljs-number\">4</span>)<br></code></pre></td></tr></table></figure>\n<h2><span id=\"13-mybatis动态循环\">13. mybatis动态循环</span></h2><figure class=\"highlight perl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs perl\">where <span class=\"hljs-number\">1</span>=<span class=\"hljs-number\">1</span><br>&lt;<span class=\"hljs-keyword\">if</span> test=<span class=\"hljs-string\">&quot;ids != null and ids.size()&gt;0&quot;</span>&gt;<br>\t<span class=\"hljs-keyword\">and</span> t.id IN<br>\t&lt;<span class=\"hljs-keyword\">foreach</span> collection=<span class=\"hljs-string\">&quot;ids&quot;</span> separator=<span class=\"hljs-string\">&quot;,&quot;</span> <span class=\"hljs-keyword\">close</span>=<span class=\"hljs-string\">&quot;)&quot;</span> <span class=\"hljs-keyword\">open</span>=<span class=\"hljs-string\">&quot;(&quot;</span> item=<span class=\"hljs-string\">&quot;item&quot;</span> <span class=\"hljs-keyword\">index</span>=<span class=\"hljs-string\">&quot;index&quot;</span>&gt;<br>\t\t<span class=\"hljs-comment\">#&#123;item&#125;</span><br>\t&lt;<span class=\"hljs-regexp\">/foreach&gt;</span><br><span class=\"hljs-regexp\">&lt;/i</span>f&gt;<br></code></pre></td></tr></table></figure>\n\n<h2><span id=\"14-某字段去重并保留一条\">14. 某字段去重并保留一条</span></h2><figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pgsql\"><span class=\"hljs-keyword\">DELETE</span> <span class=\"hljs-keyword\">FROM</span> auto <span class=\"hljs-keyword\">WHERE</span> id <span class=\"hljs-keyword\">in</span>(<br>    <span class=\"hljs-keyword\">SELECT</span> a.id <span class=\"hljs-keyword\">FROM</span><br>    (<br>        ##通过user_id,<span class=\"hljs-keyword\">disable</span>查询重复记录，并保留一条<br>        <span class=\"hljs-keyword\">SELECT</span> b.* <span class=\"hljs-keyword\">FROM</span> auto b<br>        <span class=\"hljs-keyword\">WHERE</span> b.user_id <span class=\"hljs-keyword\">IN</span> (<span class=\"hljs-keyword\">SELECT</span> user_id <span class=\"hljs-keyword\">FROM</span> auto <span class=\"hljs-keyword\">GROUP</span> <span class=\"hljs-keyword\">BY</span> license_plate_no, `<span class=\"hljs-keyword\">owner</span>`, user_id, `<span class=\"hljs-keyword\">disable</span>` <span class=\"hljs-keyword\">HAVING</span> count(*)&gt;<span class=\"hljs-number\">1</span>)<br>          <span class=\"hljs-keyword\">AND</span> b.`<span class=\"hljs-keyword\">disable</span>` <span class=\"hljs-keyword\">IN</span> (<span class=\"hljs-keyword\">SELECT</span> `<span class=\"hljs-keyword\">disable</span>` <span class=\"hljs-keyword\">FROM</span> auto <span class=\"hljs-keyword\">GROUP</span> <span class=\"hljs-keyword\">BY</span> license_plate_no, `<span class=\"hljs-keyword\">owner</span>`, user_id, `<span class=\"hljs-keyword\">disable</span>` <span class=\"hljs-keyword\">HAVING</span> count(*)&gt;<span class=\"hljs-number\">1</span>)<br>          <span class=\"hljs-keyword\">AND</span> b.id <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-keyword\">IN</span> (<span class=\"hljs-keyword\">SELECT</span> MIN(id) <span class=\"hljs-keyword\">FROM</span> auto <span class=\"hljs-keyword\">GROUP</span> <span class=\"hljs-keyword\">BY</span> license_plate_no, `<span class=\"hljs-keyword\">owner</span>`, user_id, `<span class=\"hljs-keyword\">disable</span>` <span class=\"hljs-keyword\">HAVING</span> count(*)&gt;<span class=\"hljs-number\">1</span>)<br>    ) a<br>);<br></code></pre></td></tr></table></figure>\n\n<h2><span id=\"15-一对多时分组或查询最大值\">15. 一对多时分组或查询最大值</span></h2><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs csharp\">订单，支付 一对多取出最大支付时间<br><span class=\"hljs-keyword\">select</span><br>    (<span class=\"hljs-function\"><span class=\"hljs-keyword\">select</span> <span class=\"hljs-title\">MAX</span>(<span class=\"hljs-params\">p.pay_time</span>) <span class=\"hljs-keyword\">from</span> payment p <span class=\"hljs-keyword\">where</span> p.parent_order_no</span>=t.parent_order_no) payTime,<br>    t.parent_order_no parentOrderNo<br><span class=\"hljs-keyword\">from</span> sub_purchase_order t<br></code></pre></td></tr></table></figure>\n\n<h2><span id=\"16-查重\">16. 查重</span></h2><figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pgsql\"><span class=\"hljs-keyword\">SELECT</span>  <span class=\"hljs-type\">Name</span> <span class=\"hljs-keyword\">FROM</span>  dbo.Member t <span class=\"hljs-keyword\">WHERE</span> <span class=\"hljs-type\">Name</span> <span class=\"hljs-keyword\">IN</span> (<span class=\"hljs-keyword\">SELECT</span> <span class=\"hljs-type\">Name</span> <span class=\"hljs-keyword\">FROM</span> dbo.Member <span class=\"hljs-keyword\">GROUP</span> <span class=\"hljs-keyword\">BY</span> <span class=\"hljs-type\">Name</span> <span class=\"hljs-keyword\">HAVING</span> COUNT(<span class=\"hljs-type\">Name</span>)&gt;<span class=\"hljs-number\">1</span> ) <span class=\"hljs-keyword\">ORDER</span> <span class=\"hljs-keyword\">BY</span> t.Name<br></code></pre></td></tr></table></figure>\n\n","site":{"data":{}},"wordcount":5161,"excerpt":"","more":"<h1 id=\"常用sql\"><a href=\"#常用sql\" class=\"headerlink\" title=\"常用sql\"></a>常用sql</h1><hr>\n<p>[toc]</p>\n<hr>\n<h2 id=\"1-case-when\"><a href=\"#1-case-when\" class=\"headerlink\" title=\"1.case when\"></a>1.case when</h2><figure class=\"highlight n1ql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs n1ql\"><span class=\"hljs-keyword\">SELECT</span><br>\t <span class=\"hljs-keyword\">CASE</span> <span class=\"hljs-keyword\">WHEN</span> k.num&gt;<span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">THEN</span> <span class=\"hljs-string\">&quot;大&quot;</span> <span class=\"hljs-keyword\">ELSE</span> <span class=\"hljs-string\">&quot;小&quot;</span> <span class=\"hljs-keyword\">END</span> <span class=\"hljs-keyword\">AS</span> SE<br><span class=\"hljs-keyword\">FROM</span><br>\tdy_sku K<br>//作为条件时：<br><span class=\"hljs-keyword\">SELECT</span><br>\t\t <span class=\"hljs-keyword\">CASE</span> <span class=\"hljs-keyword\">WHEN</span> (<span class=\"hljs-built_in\">ifnull</span>(k.num,<span class=\"hljs-number\">0</span>)-<span class=\"hljs-built_in\">ifnull</span>(k.sale_num,<span class=\"hljs-number\">0</span>))&gt;<span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">THEN</span> <span class=\"hljs-string\">&quot;库存充足&quot;</span> <span class=\"hljs-keyword\">ELSE</span> <span class=\"hljs-string\">&quot;缺货中&quot;</span> <span class=\"hljs-keyword\">END</span> <span class=\"hljs-keyword\">AS</span> repertoryStatus<br><span class=\"hljs-keyword\">FROM</span><br>\t\tdy_sku k<br>\t\t<span class=\"hljs-keyword\">LEFT</span> <span class=\"hljs-keyword\">JOIN</span> dy_spu p <span class=\"hljs-keyword\">ON</span> k.spu_id = p.id<br>&lt;<span class=\"hljs-keyword\">where</span>&gt;<br>\t\t&lt;<span class=\"hljs-keyword\">if</span> test=<span class=\"hljs-string\">&quot;repertoryStatus != null and repertoryStatus != &#x27;&#x27;&quot;</span>&gt;<br>\t\t\t\t<span class=\"hljs-keyword\">and</span> <span class=\"hljs-keyword\">CASE</span> <span class=\"hljs-keyword\">WHEN</span> (<span class=\"hljs-built_in\">ifnull</span>(k.num,<span class=\"hljs-number\">0</span>)-<span class=\"hljs-built_in\">ifnull</span>(k.sale_num,<span class=\"hljs-number\">0</span>))&gt;<span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">THEN</span> <span class=\"hljs-string\">&quot;库存充足&quot;</span> <span class=\"hljs-keyword\">ELSE</span> <span class=\"hljs-string\">&quot;缺货中&quot;</span> <span class=\"hljs-keyword\">END</span>=#&#123;repertoryStatus&#125;<br>\t\t&lt;/<span class=\"hljs-keyword\">if</span>&gt;<br>&lt;/<span class=\"hljs-keyword\">where</span>&gt;<br><span class=\"hljs-keyword\">ORDER</span> <span class=\"hljs-keyword\">BY</span> k.sort <span class=\"hljs-keyword\">ASC</span>,k.update_time <span class=\"hljs-keyword\">DESC</span>,k.create_time <span class=\"hljs-keyword\">DESC</span><br><span class=\"hljs-keyword\">limit</span> #&#123;pageNum&#125;,#&#123;pageSize&#125;<br></code></pre></td></tr></table></figure>\n<h2 id=\"2-某列分组并统计个数\"><a href=\"#2-某列分组并统计个数\" class=\"headerlink\" title=\"2. 某列分组并统计个数\"></a>2. 某列分组并统计个数</h2><figure class=\"highlight n1ql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs n1ql\"><span class=\"hljs-keyword\">SELECT</span><br>\tsku_id,<br>\t<span class=\"hljs-built_in\">COUNT</span>(sku_id) ,<br>\t<span class=\"hljs-built_in\">MAX</span>(create_time)<br><span class=\"hljs-keyword\">FROM</span><br>\tmall_user_care_log <br><span class=\"hljs-keyword\">WHERE</span><br>\t<span class=\"hljs-built_in\">type</span> = <span class=\"hljs-number\">1</span> <br><span class=\"hljs-keyword\">GROUP</span> <span class=\"hljs-keyword\">BY</span><br>\tsku_id<br></code></pre></td></tr></table></figure>\n<h2 id=\"3-计算时间间隔\"><a href=\"#3-计算时间间隔\" class=\"headerlink\" title=\"3. 计算时间间隔\"></a>3. 计算时间间隔</h2><figure class=\"highlight arcade\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs arcade\"><span class=\"hljs-comment\">//1.间隔天数</span><br><span class=\"hljs-built_in\">datediff</span>(<span class=\"hljs-built_in\">NOW</span>(),c.create_time)<br>CASE <span class=\"hljs-built_in\">WHEN</span> (<span class=\"hljs-built_in\">datediff</span>(<span class=\"hljs-built_in\">NOW</span>(),c.create_time)&gt;=<span class=\"hljs-number\">30</span>) THEN <span class=\"hljs-string\">&quot;1&quot;</span> <span class=\"hljs-keyword\">ELSE</span> <span class=\"hljs-string\">&quot;0&quot;</span> END AS thirtyDayExceptStatus<br><span class=\"hljs-comment\">//2.自定单位</span><br>FRAC_SECOND 表示间隔是毫秒<br><span class=\"hljs-built_in\">SECOND</span> 秒<br><span class=\"hljs-built_in\">MINUTE</span> 分钟<br><span class=\"hljs-built_in\">HOUR</span> 小时<br><span class=\"hljs-built_in\">DAY</span> 天<br><span class=\"hljs-built_in\">WEEK</span> 星期<br><span class=\"hljs-built_in\">MONTH</span> 月<br>QUARTER 季度<br><span class=\"hljs-built_in\">YEAR</span> 年<br>select timestampdiff(<span class=\"hljs-built_in\">week</span>,<span class=\"hljs-string\">&#x27;2019-07-30&#x27;</span>,<span class=\"hljs-string\">&#x27;2019-09-04&#x27;</span>);<br><span class=\"hljs-number\">3.</span> 格式化时间只保留天与当前对比输出<span class=\"hljs-number\">1</span>即为过期（当前时间小于过期时间）<br>CASE <span class=\"hljs-built_in\">WHEN</span> (timestampdiff(<span class=\"hljs-built_in\">DAY</span>,DATE_FORMAT(t.expire_time,<span class=\"hljs-string\">&#x27;%Y-%m-%d&#x27;</span>),DATE_FORMAT(<span class=\"hljs-built_in\">NOW</span>(),<span class=\"hljs-string\">&#x27;%Y-%m-%d&#x27;</span>) )&gt;=<span class=\"hljs-number\">0</span> ) THEN <span class=\"hljs-string\">&#x27;1&#x27;</span> <span class=\"hljs-keyword\">ELSE</span> <span class=\"hljs-string\">&#x27;0&#x27;</span> END AS preExpireStatus,<br></code></pre></td></tr></table></figure>\n<h2 id=\"4-格式化时间\"><a href=\"#4-格式化时间\" class=\"headerlink\" title=\"4.格式化时间\"></a>4.格式化时间</h2><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs stylus\"><span class=\"hljs-function\"><span class=\"hljs-title\">DATE_FORMAT</span><span class=\"hljs-params\">(k.apply_time,<span class=\"hljs-string\">&#x27;%Y年%m月&#x27;</span>)</span></span>\tAS <span class=\"hljs-string\">&#x27;applyTime&#x27;</span><br></code></pre></td></tr></table></figure>\n<h2 id=\"5-mysql-触发器\"><a href=\"#5-mysql-触发器\" class=\"headerlink\" title=\"5.mysql 触发器\"></a>5.mysql 触发器</h2><figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pgsql\"><span class=\"hljs-comment\">-- ----------------------------</span><br><span class=\"hljs-comment\">-- Triggers structure for table sku_tag</span><br><span class=\"hljs-comment\">-- ----------------------------</span><br>#新增触发器<br><span class=\"hljs-keyword\">DROP</span> <span class=\"hljs-keyword\">TRIGGER</span> <span class=\"hljs-keyword\">IF</span> <span class=\"hljs-keyword\">EXISTS</span> `tag_sku_insert`;<br><span class=\"hljs-keyword\">delimiter</span> ;;<br><span class=\"hljs-keyword\">CREATE</span> <span class=\"hljs-keyword\">TRIGGER</span> `tag_sku_insert` <span class=\"hljs-keyword\">AFTER</span> <span class=\"hljs-keyword\">INSERT</span> <span class=\"hljs-keyword\">ON</span> `sku_tag` <span class=\"hljs-keyword\">FOR</span> <span class=\"hljs-keyword\">EACH</span> <span class=\"hljs-keyword\">ROW</span> <span class=\"hljs-keyword\">BEGIN</span><br>\t<span class=\"hljs-keyword\">UPDATE</span> dy_sku <span class=\"hljs-keyword\">SET</span> is_has_tag = <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">WHERE</span> id = <span class=\"hljs-built_in\">NEW</span>.sku_id;<br><span class=\"hljs-keyword\">END</span>;;<br><span class=\"hljs-keyword\">delimiter</span> ;<br><br><br>#更新触发器<br><span class=\"hljs-keyword\">DROP</span> <span class=\"hljs-keyword\">TRIGGER</span> <span class=\"hljs-keyword\">IF</span> <span class=\"hljs-keyword\">EXISTS</span> `tag_sku_update`;<br><span class=\"hljs-keyword\">delimiter</span> ;;<br><span class=\"hljs-keyword\">CREATE</span> <span class=\"hljs-keyword\">TRIGGER</span> `tag_sku_update` <span class=\"hljs-keyword\">AFTER</span> <span class=\"hljs-keyword\">UPDATE</span> <span class=\"hljs-keyword\">ON</span> `sku_tag` <span class=\"hljs-keyword\">FOR</span> <span class=\"hljs-keyword\">EACH</span> <span class=\"hljs-keyword\">ROW</span> <span class=\"hljs-keyword\">BEGIN</span><br>\t<span class=\"hljs-keyword\">IF</span> <span class=\"hljs-built_in\">NEW</span>.one_tag_id <span class=\"hljs-keyword\">IS</span> <span class=\"hljs-keyword\">NULL</span> <span class=\"hljs-keyword\">THEN</span>\t##去除标签<br>\t\t<span class=\"hljs-keyword\">UPDATE</span> dy_sku <span class=\"hljs-keyword\">SET</span> is_has_tag = <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">WHERE</span> id = <span class=\"hljs-built_in\">NEW</span>.sku_id;<br>\t<span class=\"hljs-keyword\">ELSE</span> <br>\t\t<span class=\"hljs-keyword\">UPDATE</span> dy_sku <span class=\"hljs-keyword\">SET</span> is_has_tag = <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">WHERE</span> id = <span class=\"hljs-built_in\">NEW</span>.sku_id;<br>\t<span class=\"hljs-keyword\">END</span> <span class=\"hljs-keyword\">IF</span>;<br><span class=\"hljs-keyword\">END</span>;;<br><span class=\"hljs-keyword\">delimiter</span> ;<br><br><span class=\"hljs-keyword\">DROP</span> <span class=\"hljs-keyword\">TRIGGER</span> <span class=\"hljs-keyword\">IF</span> <span class=\"hljs-keyword\">EXISTS</span> `tag_po_det_update`;<br><span class=\"hljs-keyword\">delimiter</span> ;;<br><span class=\"hljs-keyword\">CREATE</span> <span class=\"hljs-keyword\">TRIGGER</span> `tag_po_det_update` <span class=\"hljs-keyword\">AFTER</span> <span class=\"hljs-keyword\">UPDATE</span> <span class=\"hljs-keyword\">ON</span> `sms_wms_po_det` <span class=\"hljs-keyword\">FOR</span> <span class=\"hljs-keyword\">EACH</span> <span class=\"hljs-keyword\">ROW</span> <span class=\"hljs-keyword\">BEGIN</span><br>\t<span class=\"hljs-keyword\">DECLARE</span>  count <span class=\"hljs-type\">int</span>  <span class=\"hljs-keyword\">DEFAULT</span> <span class=\"hljs-number\">0</span>;<br>\t<span class=\"hljs-keyword\">DECLARE</span>  count2 <span class=\"hljs-type\">int</span>  <span class=\"hljs-keyword\">DEFAULT</span> <span class=\"hljs-number\">0</span>;<br>\t<span class=\"hljs-keyword\">SELECT</span> count(<span class=\"hljs-number\">1</span>) <span class=\"hljs-keyword\">into</span> count <span class=\"hljs-keyword\">FROM</span> sms_wms_po_det s <span class=\"hljs-keyword\">WHERE</span> s.twd_po_no = <span class=\"hljs-built_in\">NEW</span>.twd_po_no <span class=\"hljs-keyword\">and</span> s.twd_is_close =<span class=\"hljs-string\">&#x27;Y&#x27;</span>;<br>\t<span class=\"hljs-keyword\">SELECT</span> count(<span class=\"hljs-number\">1</span>) <span class=\"hljs-keyword\">into</span> count2 <span class=\"hljs-keyword\">FROM</span> sms_wms_po_det s <span class=\"hljs-keyword\">WHERE</span> s.twd_po_no = <span class=\"hljs-built_in\">NEW</span>.twd_po_no <span class=\"hljs-keyword\">and</span> s.twd_is_close =<span class=\"hljs-string\">&#x27;N&#x27;</span>;<br>\t<span class=\"hljs-keyword\">IF</span> count &gt; <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">THEN</span>\t##存在关结<br>\t\t<span class=\"hljs-keyword\">UPDATE</span> sms_wms_po <span class=\"hljs-keyword\">SET</span> po_state = <span class=\"hljs-string\">&#x27;2&#x27;</span> <span class=\"hljs-keyword\">WHERE</span> po_no = <span class=\"hljs-built_in\">NEW</span>.twd_po_no;<br>\t<span class=\"hljs-keyword\">END</span> <span class=\"hljs-keyword\">IF</span>;<br>\t<span class=\"hljs-keyword\">IF</span> count2&lt;= <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">THEN</span>  ##未关结数&lt;=<span class=\"hljs-number\">0</span>,所有关结<br>\t\t<span class=\"hljs-keyword\">UPDATE</span> sms_wms_po <span class=\"hljs-keyword\">SET</span> po_state = <span class=\"hljs-string\">&#x27;4&#x27;</span> <span class=\"hljs-keyword\">WHERE</span> po_no = <span class=\"hljs-built_in\">NEW</span>.twd_po_no;<br>\t<span class=\"hljs-keyword\">END</span> <span class=\"hljs-keyword\">IF</span>;<br><span class=\"hljs-keyword\">END</span>;;<br><span class=\"hljs-keyword\">delimiter</span> ;<br><br>#删除触发器<br><span class=\"hljs-keyword\">DROP</span> <span class=\"hljs-keyword\">TRIGGER</span> <span class=\"hljs-keyword\">IF</span> <span class=\"hljs-keyword\">EXISTS</span> `tag_sku_delete`;<br><span class=\"hljs-keyword\">delimiter</span> ;;<br><span class=\"hljs-keyword\">CREATE</span> <span class=\"hljs-keyword\">TRIGGER</span> `tag_sku_delete` <span class=\"hljs-keyword\">AFTER</span> <span class=\"hljs-keyword\">DELETE</span> <span class=\"hljs-keyword\">ON</span> `sku_tag` <span class=\"hljs-keyword\">FOR</span> <span class=\"hljs-keyword\">EACH</span> <span class=\"hljs-keyword\">ROW</span> <span class=\"hljs-keyword\">BEGIN</span><br>\t\t<span class=\"hljs-keyword\">UPDATE</span> dy_sku <span class=\"hljs-keyword\">SET</span> is_has_tag = <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">WHERE</span> id = <span class=\"hljs-built_in\">OLD</span>.sku_id;<br><span class=\"hljs-keyword\">END</span>;;<br><span class=\"hljs-keyword\">delimiter</span> ;<br><br>#启动触发器<br><span class=\"hljs-keyword\">SET</span> FOREIGN_KEY_CHECKS = <span class=\"hljs-number\">1</span>;<br>  <br>#测试<br><span class=\"hljs-keyword\">SELECT</span> is_has_tag <span class=\"hljs-keyword\">FROM</span> dy_sku <span class=\"hljs-keyword\">WHERE</span> id=<span class=\"hljs-number\">13</span>;<br><span class=\"hljs-keyword\">INSERT</span> <span class=\"hljs-keyword\">INTO</span> `xmall`.`sku_tag`( `sku_id`, `one_tag_id`, `one_tag_name`, `two_tag_id`, `two_tag_name`) <span class=\"hljs-keyword\">VALUES</span> (<span class=\"hljs-number\">13</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-string\">&#x27;测试22&#x27;</span>, <span class=\"hljs-keyword\">NULL</span>, <span class=\"hljs-keyword\">NULL</span>);<br><span class=\"hljs-keyword\">SELECT</span> is_has_tag <span class=\"hljs-keyword\">FROM</span> dy_sku <span class=\"hljs-keyword\">WHERE</span> id=<span class=\"hljs-number\">13</span>;<br><br><span class=\"hljs-keyword\">SELECT</span> is_has_tag <span class=\"hljs-keyword\">FROM</span> dy_sku <span class=\"hljs-keyword\">WHERE</span> id=<span class=\"hljs-number\">13</span>;<br>\t<span class=\"hljs-keyword\">UPDATE</span>  <span class=\"hljs-keyword\">SET</span> `one_tag_id` = <span class=\"hljs-keyword\">NULL</span> <span class=\"hljs-keyword\">WHERE</span> sku_id=<span class=\"hljs-number\">13</span>;<br><span class=\"hljs-keyword\">SELECT</span> is_has_tag <span class=\"hljs-keyword\">FROM</span> dy_sku <span class=\"hljs-keyword\">WHERE</span> id=<span class=\"hljs-number\">13</span>;<br><br><span class=\"hljs-keyword\">SELECT</span> is_has_tag <span class=\"hljs-keyword\">FROM</span> dy_sku <span class=\"hljs-keyword\">WHERE</span> id=<span class=\"hljs-number\">13</span>;<br>\t<span class=\"hljs-keyword\">DELETE</span> <span class=\"hljs-keyword\">FROM</span> `xmall`.`sku_tag` <span class=\"hljs-keyword\">WHERE</span> sku_id=<span class=\"hljs-number\">13</span>;<br><span class=\"hljs-keyword\">SELECT</span> is_has_tag <span class=\"hljs-keyword\">FROM</span> dy_sku <span class=\"hljs-keyword\">WHERE</span> id=<span class=\"hljs-number\">13</span>;<br><br></code></pre></td></tr></table></figure>\n<h2 id=\"6-连接两列数据（注意concat的NULL处理）\"><a href=\"#6-连接两列数据（注意concat的NULL处理）\" class=\"headerlink\" title=\"6.连接两列数据（注意concat的NULL处理）\"></a>6.连接两列数据（注意concat的NULL处理）</h2><figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\"><span class=\"hljs-constructor\">CONCAT(IFNULL(<span class=\"hljs-params\">m</span>.<span class=\"hljs-params\">company_province</span>,&#x27;&#x27;)</span>,<span class=\"hljs-constructor\">IFNULL(<span class=\"hljs-params\">m</span>.<span class=\"hljs-params\">m</span>.<span class=\"hljs-params\">company_city</span>,&#x27;&#x27;)</span>) <span class=\"hljs-keyword\">as</span> adress<br></code></pre></td></tr></table></figure>\n<h2 id=\"7-查询有重复的某列数据\"><a href=\"#7-查询有重复的某列数据\" class=\"headerlink\" title=\"7.查询有重复的某列数据\"></a>7.查询有重复的某列数据</h2><figure class=\"highlight n1ql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs n1ql\"><span class=\"hljs-keyword\">SELECT</span> t.OQC_NO <span class=\"hljs-keyword\">FROM</span> t_oqa_bath t  <span class=\"hljs-keyword\">group</span> <span class=\"hljs-keyword\">by</span> t.OQC_NO <span class=\"hljs-keyword\">having</span> <span class=\"hljs-built_in\">count</span>(*)&gt;<span class=\"hljs-number\">1</span><br></code></pre></td></tr></table></figure>\n<h2 id=\"8-合并某一列数据并以逗号隔开\"><a href=\"#8-合并某一列数据并以逗号隔开\" class=\"headerlink\" title=\"8. 合并某一列数据并以逗号隔开\"></a>8. 合并某一列数据并以逗号隔开</h2><figure class=\"highlight n1ql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs n1ql\"><span class=\"hljs-keyword\">SELECT</span> GROUP_CONCAT(<span class=\"hljs-keyword\">DISTINCT</span> m.project_id) <span class=\"hljs-keyword\">FROM</span> sms_wms_out_stock_pm_item m <span class=\"hljs-keyword\">WHERE</span> m.doc_no = t.doc_no <span class=\"hljs-keyword\">GROUP</span> <span class=\"hljs-keyword\">BY</span> m.doc_no<br></code></pre></td></tr></table></figure>\n<h2 id=\"9-计算两列差\"><a href=\"#9-计算两列差\" class=\"headerlink\" title=\"9.计算两列差\"></a>9.计算两列差</h2><figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\"><span class=\"hljs-constructor\">IFNULL(<span class=\"hljs-params\">t</span>.<span class=\"hljs-params\">osd_amount_real</span>,0)</span>-<span class=\"hljs-constructor\">IFNULL(<span class=\"hljs-params\">t</span>.<span class=\"hljs-params\">osd_amount_plan</span>,0)</span> osdAmountRetired<br></code></pre></td></tr></table></figure>\n<h2 id=\"10-根据某两列分组，其他列值相加\"><a href=\"#10-根据某两列分组，其他列值相加\" class=\"headerlink\" title=\"10.根据某两列分组，其他列值相加\"></a>10.根据某两列分组，其他列值相加</h2><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs stylus\">SELECT<br>\tt<span class=\"hljs-selector-class\">.item_code</span> itemCode,<br>\tt<span class=\"hljs-selector-class\">.item_name</span> itemName,<br>\t<span class=\"hljs-built_in\">SUM</span>( <span class=\"hljs-built_in\">IFNULL</span>( t<span class=\"hljs-selector-class\">.osd_amount_plan</span>, <span class=\"hljs-number\">0</span> ) ) osdAmountPlan,<br>\t<span class=\"hljs-built_in\">SUM</span>( <span class=\"hljs-built_in\">IFNULL</span>( t<span class=\"hljs-selector-class\">.osd_amount_real</span>, <span class=\"hljs-number\">0</span> ) ) osdAmountReal,<br>\t<span class=\"hljs-built_in\">SUM</span>( <span class=\"hljs-built_in\">IFNULL</span>( t<span class=\"hljs-selector-class\">.osd_amount_real</span>, <span class=\"hljs-number\">0</span> )- <span class=\"hljs-built_in\">IFNULL</span>( t<span class=\"hljs-selector-class\">.osd_amount_plan</span>, <span class=\"hljs-number\">0</span> )) osdAmountRetired <br>FROM<br>\tsms_wms_out_stock_detail t <br>GROUP BY<br>\tt<span class=\"hljs-selector-class\">.item_code</span>,<br>\tt.item_name<br></code></pre></td></tr></table></figure>\n<h2 id=\"11-根据两列计算百分比\"><a href=\"#11-根据两列计算百分比\" class=\"headerlink\" title=\"11.根据两列计算百分比\"></a>11.根据两列计算百分比</h2><figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pgsql\">concat ( left (t.err_qty / t.input_qty *<span class=\"hljs-number\">100</span>,<span class=\"hljs-number\">5</span>),<span class=\"hljs-string\">&#x27;%&#x27;</span>) <span class=\"hljs-keyword\">as</span> errPercentage, <span class=\"hljs-comment\">-- 不良率</span><br></code></pre></td></tr></table></figure>\n<h2 id=\"12-截取字符串\"><a href=\"#12-截取字符串\" class=\"headerlink\" title=\"12. 截取字符串\"></a>12. 截取字符串</h2><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs stylus\"><span class=\"hljs-comment\">//截取左边的4个字符</span><br><span class=\"hljs-attribute\">left</span>（name,<span class=\"hljs-number\">4</span>）<br><span class=\"hljs-comment\">//截取右边的2个字符</span><br><span class=\"hljs-attribute\">right</span>（name,<span class=\"hljs-number\">2</span>）<br><span class=\"hljs-comment\">//去除后四位</span><br><span class=\"hljs-function\"><span class=\"hljs-title\">left</span><span class=\"hljs-params\">(name,length(name)</span></span>-<span class=\"hljs-number\">4</span>)<br></code></pre></td></tr></table></figure>\n<h2 id=\"13-mybatis动态循环\"><a href=\"#13-mybatis动态循环\" class=\"headerlink\" title=\"13. mybatis动态循环\"></a>13. mybatis动态循环</h2><figure class=\"highlight perl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs perl\">where <span class=\"hljs-number\">1</span>=<span class=\"hljs-number\">1</span><br>&lt;<span class=\"hljs-keyword\">if</span> test=<span class=\"hljs-string\">&quot;ids != null and ids.size()&gt;0&quot;</span>&gt;<br>\t<span class=\"hljs-keyword\">and</span> t.id IN<br>\t&lt;<span class=\"hljs-keyword\">foreach</span> collection=<span class=\"hljs-string\">&quot;ids&quot;</span> separator=<span class=\"hljs-string\">&quot;,&quot;</span> <span class=\"hljs-keyword\">close</span>=<span class=\"hljs-string\">&quot;)&quot;</span> <span class=\"hljs-keyword\">open</span>=<span class=\"hljs-string\">&quot;(&quot;</span> item=<span class=\"hljs-string\">&quot;item&quot;</span> <span class=\"hljs-keyword\">index</span>=<span class=\"hljs-string\">&quot;index&quot;</span>&gt;<br>\t\t<span class=\"hljs-comment\">#&#123;item&#125;</span><br>\t&lt;<span class=\"hljs-regexp\">/foreach&gt;</span><br><span class=\"hljs-regexp\">&lt;/i</span>f&gt;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"14-某字段去重并保留一条\"><a href=\"#14-某字段去重并保留一条\" class=\"headerlink\" title=\"14. 某字段去重并保留一条\"></a>14. 某字段去重并保留一条</h2><figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pgsql\"><span class=\"hljs-keyword\">DELETE</span> <span class=\"hljs-keyword\">FROM</span> auto <span class=\"hljs-keyword\">WHERE</span> id <span class=\"hljs-keyword\">in</span>(<br>    <span class=\"hljs-keyword\">SELECT</span> a.id <span class=\"hljs-keyword\">FROM</span><br>    (<br>        ##通过user_id,<span class=\"hljs-keyword\">disable</span>查询重复记录，并保留一条<br>        <span class=\"hljs-keyword\">SELECT</span> b.* <span class=\"hljs-keyword\">FROM</span> auto b<br>        <span class=\"hljs-keyword\">WHERE</span> b.user_id <span class=\"hljs-keyword\">IN</span> (<span class=\"hljs-keyword\">SELECT</span> user_id <span class=\"hljs-keyword\">FROM</span> auto <span class=\"hljs-keyword\">GROUP</span> <span class=\"hljs-keyword\">BY</span> license_plate_no, `<span class=\"hljs-keyword\">owner</span>`, user_id, `<span class=\"hljs-keyword\">disable</span>` <span class=\"hljs-keyword\">HAVING</span> count(*)&gt;<span class=\"hljs-number\">1</span>)<br>          <span class=\"hljs-keyword\">AND</span> b.`<span class=\"hljs-keyword\">disable</span>` <span class=\"hljs-keyword\">IN</span> (<span class=\"hljs-keyword\">SELECT</span> `<span class=\"hljs-keyword\">disable</span>` <span class=\"hljs-keyword\">FROM</span> auto <span class=\"hljs-keyword\">GROUP</span> <span class=\"hljs-keyword\">BY</span> license_plate_no, `<span class=\"hljs-keyword\">owner</span>`, user_id, `<span class=\"hljs-keyword\">disable</span>` <span class=\"hljs-keyword\">HAVING</span> count(*)&gt;<span class=\"hljs-number\">1</span>)<br>          <span class=\"hljs-keyword\">AND</span> b.id <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-keyword\">IN</span> (<span class=\"hljs-keyword\">SELECT</span> MIN(id) <span class=\"hljs-keyword\">FROM</span> auto <span class=\"hljs-keyword\">GROUP</span> <span class=\"hljs-keyword\">BY</span> license_plate_no, `<span class=\"hljs-keyword\">owner</span>`, user_id, `<span class=\"hljs-keyword\">disable</span>` <span class=\"hljs-keyword\">HAVING</span> count(*)&gt;<span class=\"hljs-number\">1</span>)<br>    ) a<br>);<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"15-一对多时分组或查询最大值\"><a href=\"#15-一对多时分组或查询最大值\" class=\"headerlink\" title=\"15. 一对多时分组或查询最大值\"></a>15. 一对多时分组或查询最大值</h2><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs csharp\">订单，支付 一对多取出最大支付时间<br><span class=\"hljs-keyword\">select</span><br>    (<span class=\"hljs-function\"><span class=\"hljs-keyword\">select</span> <span class=\"hljs-title\">MAX</span>(<span class=\"hljs-params\">p.pay_time</span>) <span class=\"hljs-keyword\">from</span> payment p <span class=\"hljs-keyword\">where</span> p.parent_order_no</span>=t.parent_order_no) payTime,<br>    t.parent_order_no parentOrderNo<br><span class=\"hljs-keyword\">from</span> sub_purchase_order t<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"16-查重\"><a href=\"#16-查重\" class=\"headerlink\" title=\"16. 查重\"></a>16. 查重</h2><figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pgsql\"><span class=\"hljs-keyword\">SELECT</span>  <span class=\"hljs-type\">Name</span> <span class=\"hljs-keyword\">FROM</span>  dbo.Member t <span class=\"hljs-keyword\">WHERE</span> <span class=\"hljs-type\">Name</span> <span class=\"hljs-keyword\">IN</span> (<span class=\"hljs-keyword\">SELECT</span> <span class=\"hljs-type\">Name</span> <span class=\"hljs-keyword\">FROM</span> dbo.Member <span class=\"hljs-keyword\">GROUP</span> <span class=\"hljs-keyword\">BY</span> <span class=\"hljs-type\">Name</span> <span class=\"hljs-keyword\">HAVING</span> COUNT(<span class=\"hljs-type\">Name</span>)&gt;<span class=\"hljs-number\">1</span> ) <span class=\"hljs-keyword\">ORDER</span> <span class=\"hljs-keyword\">BY</span> t.Name<br></code></pre></td></tr></table></figure>\n\n"},{"_content":"# Eclipse修改maven仓库到自定义位置+添加阿里依赖秒下jar包\n---\n\n---\n\n[toc]\n\n+ 前言：\n+ 大家在刚开始使用eclipse使用坐标下载maven的jar包时一定出现过下载过慢或者缺包错误等等问题。出现该问题一般是因为使用系统默认的maven仓库，也就是用户.m2下的仓库。解决思路就是自己创建一个新的本地仓库。并使用国内阿里镜像下载。完美解决!\n+ [maven3.6.1包](https://alist.huijia.cf/d/hui/%E8%BD%AF%E4%BB%B6/Java/apache-maven-3.6.1-bin.zip) \n\n\n---\n## 一、Maven配置\n1. 解压我们的maven包。\n2. 新建一个空文件夹作为你的maven仓库\n![enter description here](https://img-1256282866.cos.ap-beijing.myqcloud.com/aHR0cDovL2hicS5pZHNlLnRvcC9ibG9nLzE1NzE2NjI0NjgyMDMucG5n)\n3. 找到D:\\maven\\apache-maven-3.6.2\\conf目录下setting.xml修改配置：\n```javascript?linenums\n//ctrl+f搜索“repository”在注视下方加入下边语句，路径改为你新建的仓库路径（注意不要加在注释代码内）\n <localRepository>D:\\maven\\repository</localRepository>\n//Ctrl+f搜“mirrors”注释下方添加阿里镜像\n<mirror>\n      <id>alimaven</id>\n      <name>aliyun maven</name>\n      <url>http://maven.aliyun.com/nexus/content/groups/public/</url>\n      <mirrorOf>central</mirrorOf>        \n</mirror>\n```\n\n![image-20220430163617258](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430163617258.png)\n\n## 二、eclipse\n\n1. 进入eclipse配置新的maven\n\n+ `Window -> preferences -> maven -> installations -> add`\n![image-20220430163632556](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430163632556.png)\n+ 选择刚配置的maven\n![image-20220430163643969](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430163643969.png)\n+ 勾选，应用\n![image-20220430163649253](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430163649253.png)\n\n2. 更换新的仓库\n\n+ `Window -> preferences -> maven -> user sertting -> browse`\n![image-20220430163801768](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430163801768.png)\n+ 找到我们刚才修改的setting设置，选中。\n![image-20220430163814828](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430163814828.png)\n+ 可以看到仓库已经自动由默认仓库换为我们自定义的\n+ `updata settings ->APPLY -> OK`\n![image-20220430163820272](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430163820272.png)\n\n3. 导入你的pom依赖飞速下载吧！！！\n\n## 二、idea\n1. 点击File-settings\n![image-20220430163829194](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430163829194.png)\n2. 设置maven![image-20220430163843789](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430163843789.png)\n\n3. 设置setting.xml位置和仓库位置。\n   ![image-20220430163903454](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430163903454.png)<font color=red size=5> 注：请使用idea请使用maven3.6.1版本</font>\n","source":"_posts/BookMark/安装配置/Eclipse+idea修改maven仓库到自定义位置+添加阿里依赖秒下jar包 --菜鸟小回.md","raw":"# Eclipse修改maven仓库到自定义位置+添加阿里依赖秒下jar包\n---\n\n---\n\n[toc]\n\n+ 前言：\n+ 大家在刚开始使用eclipse使用坐标下载maven的jar包时一定出现过下载过慢或者缺包错误等等问题。出现该问题一般是因为使用系统默认的maven仓库，也就是用户.m2下的仓库。解决思路就是自己创建一个新的本地仓库。并使用国内阿里镜像下载。完美解决!\n+ [maven3.6.1包](https://alist.huijia.cf/d/hui/%E8%BD%AF%E4%BB%B6/Java/apache-maven-3.6.1-bin.zip) \n\n\n---\n## 一、Maven配置\n1. 解压我们的maven包。\n2. 新建一个空文件夹作为你的maven仓库\n![enter description here](https://img-1256282866.cos.ap-beijing.myqcloud.com/aHR0cDovL2hicS5pZHNlLnRvcC9ibG9nLzE1NzE2NjI0NjgyMDMucG5n)\n3. 找到D:\\maven\\apache-maven-3.6.2\\conf目录下setting.xml修改配置：\n```javascript?linenums\n//ctrl+f搜索“repository”在注视下方加入下边语句，路径改为你新建的仓库路径（注意不要加在注释代码内）\n <localRepository>D:\\maven\\repository</localRepository>\n//Ctrl+f搜“mirrors”注释下方添加阿里镜像\n<mirror>\n      <id>alimaven</id>\n      <name>aliyun maven</name>\n      <url>http://maven.aliyun.com/nexus/content/groups/public/</url>\n      <mirrorOf>central</mirrorOf>        \n</mirror>\n```\n\n![image-20220430163617258](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430163617258.png)\n\n## 二、eclipse\n\n1. 进入eclipse配置新的maven\n\n+ `Window -> preferences -> maven -> installations -> add`\n![image-20220430163632556](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430163632556.png)\n+ 选择刚配置的maven\n![image-20220430163643969](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430163643969.png)\n+ 勾选，应用\n![image-20220430163649253](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430163649253.png)\n\n2. 更换新的仓库\n\n+ `Window -> preferences -> maven -> user sertting -> browse`\n![image-20220430163801768](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430163801768.png)\n+ 找到我们刚才修改的setting设置，选中。\n![image-20220430163814828](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430163814828.png)\n+ 可以看到仓库已经自动由默认仓库换为我们自定义的\n+ `updata settings ->APPLY -> OK`\n![image-20220430163820272](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430163820272.png)\n\n3. 导入你的pom依赖飞速下载吧！！！\n\n## 二、idea\n1. 点击File-settings\n![image-20220430163829194](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430163829194.png)\n2. 设置maven![image-20220430163843789](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430163843789.png)\n\n3. 设置setting.xml位置和仓库位置。\n   ![image-20220430163903454](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430163903454.png)<font color=red size=5> 注：请使用idea请使用maven3.6.1版本</font>\n","slug":"BookMark/安装配置/Eclipse+idea修改maven仓库到自定义位置+添加阿里依赖秒下jar包 --菜鸟小回","published":1,"date":"2022-07-18T09:51:17.000Z","updated":"2022-09-01T10:02:40.489Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cl7ptszog000haba5c27k6ilo","content":"<h1><span id=\"eclipse修改maven仓库到自定义位置添加阿里依赖秒下jar包\">Eclipse修改maven仓库到自定义位置+添加阿里依赖秒下jar包</span></h1><hr>\n<hr>\n<p>[toc]</p>\n<ul>\n<li>前言：</li>\n<li>大家在刚开始使用eclipse使用坐标下载maven的jar包时一定出现过下载过慢或者缺包错误等等问题。出现该问题一般是因为使用系统默认的maven仓库，也就是用户.m2下的仓库。解决思路就是自己创建一个新的本地仓库。并使用国内阿里镜像下载。完美解决!</li>\n<li><a href=\"https://alist.huijia.cf/d/hui/%E8%BD%AF%E4%BB%B6/Java/apache-maven-3.6.1-bin.zip\">maven3.6.1包</a></li>\n</ul>\n<hr>\n<h2><span id=\"一-maven配置\">一、Maven配置</span></h2><ol>\n<li>解压我们的maven包。</li>\n<li>新建一个空文件夹作为你的maven仓库<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/aHR0cDovL2hicS5pZHNlLnRvcC9ibG9nLzE1NzE2NjI0NjgyMDMucG5n\" alt=\"enter description here\"></li>\n<li>找到D:\\maven\\apache-maven-3.6.2\\conf目录下setting.xml修改配置：<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">//ctrl+f搜索“repository”在注视下方加入下边语句，路径改为你新建的仓库路径（注意不要加在注释代码内）<br> &lt;localRepository&gt;D:\\maven\\repository&lt;/localRepository&gt;<br>//Ctrl+f搜“mirrors”注释下方添加阿里镜像<br>&lt;mirror&gt;<br>      &lt;id&gt;alimaven&lt;/id&gt;<br>      &lt;name&gt;aliyun maven&lt;/name&gt;<br>      &lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public/&lt;/url&gt;<br>      &lt;mirrorOf&gt;central&lt;/mirrorOf&gt;        <br>&lt;/mirror&gt;<br></code></pre></td></tr></table></figure></li>\n</ol>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430163617258.png\" alt=\"image-20220430163617258\"></p>\n<h2><span id=\"二-eclipse\">二、eclipse</span></h2><ol>\n<li>进入eclipse配置新的maven</li>\n</ol>\n<ul>\n<li><code>Window -&gt; preferences -&gt; maven -&gt; installations -&gt; add</code><br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430163632556.png\" alt=\"image-20220430163632556\"></li>\n<li>选择刚配置的maven<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430163643969.png\" alt=\"image-20220430163643969\"></li>\n<li>勾选，应用<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430163649253.png\" alt=\"image-20220430163649253\"></li>\n</ul>\n<ol start=\"2\">\n<li>更换新的仓库</li>\n</ol>\n<ul>\n<li><code>Window -&gt; preferences -&gt; maven -&gt; user sertting -&gt; browse</code><br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430163801768.png\" alt=\"image-20220430163801768\"></li>\n<li>找到我们刚才修改的setting设置，选中。<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430163814828.png\" alt=\"image-20220430163814828\"></li>\n<li>可以看到仓库已经自动由默认仓库换为我们自定义的</li>\n<li><code>updata settings -&gt;APPLY -&gt; OK</code><br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430163820272.png\" alt=\"image-20220430163820272\"></li>\n</ul>\n<ol start=\"3\">\n<li>导入你的pom依赖飞速下载吧！！！</li>\n</ol>\n<h2><span id=\"二-idea\">二、idea</span></h2><ol>\n<li><p>点击File-settings<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430163829194.png\" alt=\"image-20220430163829194\"></p>\n</li>\n<li><p>设置maven<img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430163843789.png\" alt=\"image-20220430163843789\"></p>\n</li>\n<li><p>设置setting.xml位置和仓库位置。<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430163903454.png\" alt=\"image-20220430163903454\"><font color=\"red\" size=\"5\"> 注：请使用idea请使用maven3.6.1版本</font></p>\n</li>\n</ol>\n","site":{"data":{}},"wordcount":977,"excerpt":"","more":"<h1 id=\"Eclipse修改maven仓库到自定义位置-添加阿里依赖秒下jar包\"><a href=\"#Eclipse修改maven仓库到自定义位置-添加阿里依赖秒下jar包\" class=\"headerlink\" title=\"Eclipse修改maven仓库到自定义位置+添加阿里依赖秒下jar包\"></a>Eclipse修改maven仓库到自定义位置+添加阿里依赖秒下jar包</h1><hr>\n<hr>\n<p>[toc]</p>\n<ul>\n<li>前言：</li>\n<li>大家在刚开始使用eclipse使用坐标下载maven的jar包时一定出现过下载过慢或者缺包错误等等问题。出现该问题一般是因为使用系统默认的maven仓库，也就是用户.m2下的仓库。解决思路就是自己创建一个新的本地仓库。并使用国内阿里镜像下载。完美解决!</li>\n<li><a href=\"https://alist.huijia.cf/d/hui/%E8%BD%AF%E4%BB%B6/Java/apache-maven-3.6.1-bin.zip\">maven3.6.1包</a></li>\n</ul>\n<hr>\n<h2 id=\"一、Maven配置\"><a href=\"#一、Maven配置\" class=\"headerlink\" title=\"一、Maven配置\"></a>一、Maven配置</h2><ol>\n<li>解压我们的maven包。</li>\n<li>新建一个空文件夹作为你的maven仓库<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/aHR0cDovL2hicS5pZHNlLnRvcC9ibG9nLzE1NzE2NjI0NjgyMDMucG5n\" alt=\"enter description here\"></li>\n<li>找到D:\\maven\\apache-maven-3.6.2\\conf目录下setting.xml修改配置：<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">//ctrl+f搜索“repository”在注视下方加入下边语句，路径改为你新建的仓库路径（注意不要加在注释代码内）<br> &lt;localRepository&gt;D:\\maven\\repository&lt;/localRepository&gt;<br>//Ctrl+f搜“mirrors”注释下方添加阿里镜像<br>&lt;mirror&gt;<br>      &lt;id&gt;alimaven&lt;/id&gt;<br>      &lt;name&gt;aliyun maven&lt;/name&gt;<br>      &lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public/&lt;/url&gt;<br>      &lt;mirrorOf&gt;central&lt;/mirrorOf&gt;        <br>&lt;/mirror&gt;<br></code></pre></td></tr></table></figure></li>\n</ol>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430163617258.png\" alt=\"image-20220430163617258\"></p>\n<h2 id=\"二、eclipse\"><a href=\"#二、eclipse\" class=\"headerlink\" title=\"二、eclipse\"></a>二、eclipse</h2><ol>\n<li>进入eclipse配置新的maven</li>\n</ol>\n<ul>\n<li><code>Window -&gt; preferences -&gt; maven -&gt; installations -&gt; add</code><br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430163632556.png\" alt=\"image-20220430163632556\"></li>\n<li>选择刚配置的maven<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430163643969.png\" alt=\"image-20220430163643969\"></li>\n<li>勾选，应用<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430163649253.png\" alt=\"image-20220430163649253\"></li>\n</ul>\n<ol start=\"2\">\n<li>更换新的仓库</li>\n</ol>\n<ul>\n<li><code>Window -&gt; preferences -&gt; maven -&gt; user sertting -&gt; browse</code><br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430163801768.png\" alt=\"image-20220430163801768\"></li>\n<li>找到我们刚才修改的setting设置，选中。<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430163814828.png\" alt=\"image-20220430163814828\"></li>\n<li>可以看到仓库已经自动由默认仓库换为我们自定义的</li>\n<li><code>updata settings -&gt;APPLY -&gt; OK</code><br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430163820272.png\" alt=\"image-20220430163820272\"></li>\n</ul>\n<ol start=\"3\">\n<li>导入你的pom依赖飞速下载吧！！！</li>\n</ol>\n<h2 id=\"二、idea\"><a href=\"#二、idea\" class=\"headerlink\" title=\"二、idea\"></a>二、idea</h2><ol>\n<li><p>点击File-settings<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430163829194.png\" alt=\"image-20220430163829194\"></p>\n</li>\n<li><p>设置maven<img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430163843789.png\" alt=\"image-20220430163843789\"></p>\n</li>\n<li><p>设置setting.xml位置和仓库位置。<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430163903454.png\" alt=\"image-20220430163903454\"><font color=red size=5> 注：请使用idea请使用maven3.6.1版本</font></p>\n</li>\n</ol>\n"},{"_content":"# IDEA2021.2及以下版本破解教程\n\n---\n[toc]\n\n---\n\n相关链接:\n\n[IDEA2022.1破解教程](https://blog.huijia.cf/archives/2022-06-06-12-44-50)\n\n---\n\n## 一、下载安装idea\n\n+ [官网历史版本](https://www.jetbrains.com/idea/download/other.html)\n\n+ 本教程基于2021.2.4，无限试用插件支持\n![image-20220518141103653](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220518141103653.png)\n\n---\n\n## 二、登陆账号试用\n\n使用自己账号直接操作即可，可跳过本部分！！！\n\n若账号无试用期或不想用自己邮箱，可用下面临时邮箱\n\n+ [临时邮箱](https://www.linshi-email.com/)\n\n+ ![image-20220518134038955](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220518134038955.png)\n\n1. 博主生成邮箱为`idse@iubridge.com`\n\n2. 来到idea点击登录试用\n![image-20220518134304745](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220518134304745.png)\n\n3. 弹出登录页点击创建账号，输入自己的临时邮箱\n![image-20220518134545788](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220518134545788.png)\n\n4. 回到刚刚的临时邮箱页查看邮件并点击认证\n![image-20220518134743029](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220518134743029.png)\n\n5. 输入注册信息\n![image-20220518134929967](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220518134929967.png)\n\n6. 弹出认证成功，就可以开始试用了\n![image-20220518135046429](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220518135046429.png)\n\n---\n\n## 三、无限试用（idea2021.2以下版本）\n\n1. idea成功并新建一个项目\n![image-20220518135239519](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220518135239519.png)\n\n2. 下载无限试用插件:[插件](https://alist.huijia.cf/hui/%E8%BD%AF%E4%BB%B6/Java/IDEA/%E6%BF%80%E6%B4%BB/ide-eval-resetter-2.3.5.jar)\n\n3. 直接拖拽到idea\n![image-20220518140107359](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220518140107359.png)\n\n4. 可以看到我们的help菜单下多了我们的插件\n![image-20220518140324218](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220518140324218.png)\n\n5. 勾选重启后自动重置试用时间即可\n![image-20220518140514919](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220518140514919.png)\n","source":"_posts/BookMark/安装配置/IDEA2021.2及以下版本破解教程.md","raw":"# IDEA2021.2及以下版本破解教程\n\n---\n[toc]\n\n---\n\n相关链接:\n\n[IDEA2022.1破解教程](https://blog.huijia.cf/archives/2022-06-06-12-44-50)\n\n---\n\n## 一、下载安装idea\n\n+ [官网历史版本](https://www.jetbrains.com/idea/download/other.html)\n\n+ 本教程基于2021.2.4，无限试用插件支持\n![image-20220518141103653](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220518141103653.png)\n\n---\n\n## 二、登陆账号试用\n\n使用自己账号直接操作即可，可跳过本部分！！！\n\n若账号无试用期或不想用自己邮箱，可用下面临时邮箱\n\n+ [临时邮箱](https://www.linshi-email.com/)\n\n+ ![image-20220518134038955](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220518134038955.png)\n\n1. 博主生成邮箱为`idse@iubridge.com`\n\n2. 来到idea点击登录试用\n![image-20220518134304745](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220518134304745.png)\n\n3. 弹出登录页点击创建账号，输入自己的临时邮箱\n![image-20220518134545788](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220518134545788.png)\n\n4. 回到刚刚的临时邮箱页查看邮件并点击认证\n![image-20220518134743029](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220518134743029.png)\n\n5. 输入注册信息\n![image-20220518134929967](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220518134929967.png)\n\n6. 弹出认证成功，就可以开始试用了\n![image-20220518135046429](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220518135046429.png)\n\n---\n\n## 三、无限试用（idea2021.2以下版本）\n\n1. idea成功并新建一个项目\n![image-20220518135239519](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220518135239519.png)\n\n2. 下载无限试用插件:[插件](https://alist.huijia.cf/hui/%E8%BD%AF%E4%BB%B6/Java/IDEA/%E6%BF%80%E6%B4%BB/ide-eval-resetter-2.3.5.jar)\n\n3. 直接拖拽到idea\n![image-20220518140107359](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220518140107359.png)\n\n4. 可以看到我们的help菜单下多了我们的插件\n![image-20220518140324218](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220518140324218.png)\n\n5. 勾选重启后自动重置试用时间即可\n![image-20220518140514919](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220518140514919.png)\n","slug":"BookMark/安装配置/IDEA2021.2及以下版本破解教程","published":1,"date":"2022-07-25T05:51:40.962Z","updated":"2022-09-01T10:02:40.510Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cl7ptszoh000laba5fc6y8b4l","content":"<h1><span id=\"idea20212及以下版本破解教程\">IDEA2021.2及以下版本破解教程</span></h1><hr>\n<p>[toc]</p>\n<hr>\n<p>相关链接:</p>\n<p><a href=\"https://blog.huijia.cf/archives/2022-06-06-12-44-50\">IDEA2022.1破解教程</a></p>\n<hr>\n<h2><span id=\"一-下载安装idea\">一、下载安装idea</span></h2><ul>\n<li><p><a href=\"https://www.jetbrains.com/idea/download/other.html\">官网历史版本</a></p>\n</li>\n<li><p>本教程基于2021.2.4，无限试用插件支持<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220518141103653.png\" alt=\"image-20220518141103653\"></p>\n</li>\n</ul>\n<hr>\n<h2><span id=\"二-登陆账号试用\">二、登陆账号试用</span></h2><p>使用自己账号直接操作即可，可跳过本部分！！！</p>\n<p>若账号无试用期或不想用自己邮箱，可用下面临时邮箱</p>\n<ul>\n<li><p><a href=\"https://www.linshi-email.com/\">临时邮箱</a></p>\n</li>\n<li><p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220518134038955.png\" alt=\"image-20220518134038955\"></p>\n</li>\n</ul>\n<ol>\n<li><p>博主生成邮箱为<code>idse@iubridge.com</code></p>\n</li>\n<li><p>来到idea点击登录试用<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220518134304745.png\" alt=\"image-20220518134304745\"></p>\n</li>\n<li><p>弹出登录页点击创建账号，输入自己的临时邮箱<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220518134545788.png\" alt=\"image-20220518134545788\"></p>\n</li>\n<li><p>回到刚刚的临时邮箱页查看邮件并点击认证<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220518134743029.png\" alt=\"image-20220518134743029\"></p>\n</li>\n<li><p>输入注册信息<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220518134929967.png\" alt=\"image-20220518134929967\"></p>\n</li>\n<li><p>弹出认证成功，就可以开始试用了<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220518135046429.png\" alt=\"image-20220518135046429\"></p>\n</li>\n</ol>\n<hr>\n<h2><span id=\"三-无限试用idea20212以下版本\">三、无限试用（idea2021.2以下版本）</span></h2><ol>\n<li><p>idea成功并新建一个项目<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220518135239519.png\" alt=\"image-20220518135239519\"></p>\n</li>\n<li><p>下载无限试用插件:<a href=\"https://alist.huijia.cf/hui/%E8%BD%AF%E4%BB%B6/Java/IDEA/%E6%BF%80%E6%B4%BB/ide-eval-resetter-2.3.5.jar\">插件</a></p>\n</li>\n<li><p>直接拖拽到idea<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220518140107359.png\" alt=\"image-20220518140107359\"></p>\n</li>\n<li><p>可以看到我们的help菜单下多了我们的插件<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220518140324218.png\" alt=\"image-20220518140324218\"></p>\n</li>\n<li><p>勾选重启后自动重置试用时间即可<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220518140514919.png\" alt=\"image-20220518140514919\"></p>\n</li>\n</ol>\n","site":{"data":{}},"wordcount":327,"excerpt":"","more":"<h1 id=\"IDEA2021-2及以下版本破解教程\"><a href=\"#IDEA2021-2及以下版本破解教程\" class=\"headerlink\" title=\"IDEA2021.2及以下版本破解教程\"></a>IDEA2021.2及以下版本破解教程</h1><hr>\n<p>[toc]</p>\n<hr>\n<p>相关链接:</p>\n<p><a href=\"https://blog.huijia.cf/archives/2022-06-06-12-44-50\">IDEA2022.1破解教程</a></p>\n<hr>\n<h2 id=\"一、下载安装idea\"><a href=\"#一、下载安装idea\" class=\"headerlink\" title=\"一、下载安装idea\"></a>一、下载安装idea</h2><ul>\n<li><p><a href=\"https://www.jetbrains.com/idea/download/other.html\">官网历史版本</a></p>\n</li>\n<li><p>本教程基于2021.2.4，无限试用插件支持<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220518141103653.png\" alt=\"image-20220518141103653\"></p>\n</li>\n</ul>\n<hr>\n<h2 id=\"二、登陆账号试用\"><a href=\"#二、登陆账号试用\" class=\"headerlink\" title=\"二、登陆账号试用\"></a>二、登陆账号试用</h2><p>使用自己账号直接操作即可，可跳过本部分！！！</p>\n<p>若账号无试用期或不想用自己邮箱，可用下面临时邮箱</p>\n<ul>\n<li><p><a href=\"https://www.linshi-email.com/\">临时邮箱</a></p>\n</li>\n<li><p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220518134038955.png\" alt=\"image-20220518134038955\"></p>\n</li>\n</ul>\n<ol>\n<li><p>博主生成邮箱为<code>idse@iubridge.com</code></p>\n</li>\n<li><p>来到idea点击登录试用<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220518134304745.png\" alt=\"image-20220518134304745\"></p>\n</li>\n<li><p>弹出登录页点击创建账号，输入自己的临时邮箱<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220518134545788.png\" alt=\"image-20220518134545788\"></p>\n</li>\n<li><p>回到刚刚的临时邮箱页查看邮件并点击认证<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220518134743029.png\" alt=\"image-20220518134743029\"></p>\n</li>\n<li><p>输入注册信息<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220518134929967.png\" alt=\"image-20220518134929967\"></p>\n</li>\n<li><p>弹出认证成功，就可以开始试用了<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220518135046429.png\" alt=\"image-20220518135046429\"></p>\n</li>\n</ol>\n<hr>\n<h2 id=\"三、无限试用（idea2021-2以下版本）\"><a href=\"#三、无限试用（idea2021-2以下版本）\" class=\"headerlink\" title=\"三、无限试用（idea2021.2以下版本）\"></a>三、无限试用（idea2021.2以下版本）</h2><ol>\n<li><p>idea成功并新建一个项目<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220518135239519.png\" alt=\"image-20220518135239519\"></p>\n</li>\n<li><p>下载无限试用插件:<a href=\"https://alist.huijia.cf/hui/%E8%BD%AF%E4%BB%B6/Java/IDEA/%E6%BF%80%E6%B4%BB/ide-eval-resetter-2.3.5.jar\">插件</a></p>\n</li>\n<li><p>直接拖拽到idea<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220518140107359.png\" alt=\"image-20220518140107359\"></p>\n</li>\n<li><p>可以看到我们的help菜单下多了我们的插件<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220518140324218.png\" alt=\"image-20220518140324218\"></p>\n</li>\n<li><p>勾选重启后自动重置试用时间即可<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220518140514919.png\" alt=\"image-20220518140514919\"></p>\n</li>\n</ol>\n"},{"_content":"# IDEA2022.1破解教程\n\n---\n\n[toc]\n\n---\n\n相关链接:\n\n[IDEA2021.2及以下版本破解教程](https://blog.huijia.cf/archives/idea20212-ji-yi-xia-ban-ben-po-jie-jiao-cheng)\n\n---\n\n## 一、下载安装idea\n\n+ [官网历史版本](https://www.jetbrains.com/idea/download/other.html)\n+ 本教程基于2022.1，无限试用插件支持\n  ![image-20220606122936923](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220606122936923.png)\n\n## 二、激活\n\n1. [软件下载](https://alist.huijia.cf/d/hui/%E8%BD%AF%E4%BB%B6/Java/IDEA/%E6%BF%80%E6%B4%BB/JetBrains%202022%20%E6%9C%80%E6%96%B0%E7%89%88%E6%9C%AC%E5%85%A8%E5%AE%B6%E6%A1%B6%E6%BF%80%E6%B4%BB.zip)\n\n2. 解压出`ja-netfilter-all`到固定位置（以后不要删除或变更）\n\n   ![image-20220606123521135](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220606123521135.png)\n\n3. 点击`scripts`下的`install-curent-user.vbs`\n\n4. 等待出现done\n\n   ![image-20220606124106870](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220606124106870.png)\n\n5. 进入idea，激活码或者服务器激活\n\n   + 服务器激活\n\n     `https://license-server.tmk.edu.hk`\n\n   + 激活码\n\n     ```\n     WGU6N1YBFB-eyJsaWNlbnNlSWQiOiJXR1U2TjFZQkZCIiwibGljZW5zZWVOYW1lIjoiaHlwb3MgdGltYnJlcyIsImFzc2lnbmVlTmFtZSI6IiIsImFzc2lnbmVlRW1haWwiOiIiLCJsaWNlbnNlUmVzdHJpY3Rpb24iOiIiLCJjaGVja0NvbmN1cnJlbnRVc2UiOmZhbHNlLCJwcm9kdWN0cyI6W3siY29kZSI6IlBSQiIsImZhbGxiYWNrRGF0ZSI6IjIwMjMtMDQtMTEiLCJwYWlkVXBUbyI6IjIwMjMtMDQtMTEiLCJleHRlbmRlZCI6dHJ1ZX0seyJjb2RlIjoiSUkiLCJmYWxsYmFja0RhdGUiOiIyMDIzLTA0LTExIiwicGFpZFVwVG8iOiIyMDIzLTA0LTExIiwiZXh0ZW5kZWQiOmZhbHNlfSx7ImNvZGUiOiJQU1ciLCJmYWxsYmFja0RhdGUiOiIyMDIzLTA0LTExIiwicGFpZFVwVG8iOiIyMDIzLTA0LTExIiwiZXh0ZW5kZWQiOnRydWV9LHsiY29kZSI6IlBDV01QIiwiZmFsbGJhY2tEYXRlIjoiMjAyMy0wNC0xMSIsInBhaWRVcFRvIjoiMjAyMy0wNC0xMSIsImV4dGVuZGVkIjp0cnVlfSx7ImNvZGUiOiJQV1MiLCJmYWxsYmFja0RhdGUiOiIyMDIzLTA0LTExIiwicGFpZFVwVG8iOiIyMDIzLTA0LTExIiwiZXh0ZW5kZWQiOnRydWV9LHsiY29kZSI6IlBTSSIsImZhbGxiYWNrRGF0ZSI6IjIwMjMtMDQtMTEiLCJwYWlkVXBUbyI6IjIwMjMtMDQtMTEiLCJleHRlbmRlZCI6dHJ1ZX0seyJjb2RlIjoiUERCIiwiZmFsbGJhY2tEYXRlIjoiMjAyMy0wNC0xMSIsInBhaWRVcFRvIjoiMjAyMy0wNC0xMSIsImV4dGVuZGVkIjp0cnVlfSx7ImNvZGUiOiJQUFMiLCJmYWxsYmFja0RhdGUiOiIyMDIzLTA0LTExIiwicGFpZFVwVG8iOiIyMDIzLTA0LTExIiwiZXh0ZW5kZWQiOnRydWV9LHsiY29kZSI6IlBQQyIsImZhbGxiYWNrRGF0ZSI6IjIwMjMtMDQtMTEiLCJwYWlkVXBUbyI6IjIwMjMtMDQtMTEiLCJleHRlbmRlZCI6dHJ1ZX0seyJjb2RlIjoiUEdPIiwiZmFsbGJhY2tEYXRlIjoiMjAyMy0wNC0xMSIsInBhaWRVcFRvIjoiMjAyMy0wNC0xMSIsImV4dGVuZGVkIjp0cnVlfV0sIm1ldGFkYXRhIjoiMDEyMDIyMDQxMVBTQU4wMDAwMDUiLCJoYXNoIjoiVFJJQUw6ODc1MDIzNjciLCJncmFjZVBlcmlvZERheXMiOjcsImF1dG9Qcm9sb25nYXRlZCI6ZmFsc2UsImlzQXV0b1Byb2xvbmdhdGVkIjpmYWxzZX0=-Q8ZiY3+sCCImh+1+N4ZllHOjEtnY/OuV7DEedzBn8xYrqLnsEQaEwKdt1FNJwwDA8SoTBelYzx+9pV3SvXnuhmCT76ZBcoHn/XY02Upj6SJRonX1w+Qiz68akPPTxJTp+c0lLgiCotEsDV4XUhMGNzxV4ElpD34Fc7lFieWwKc8uIRUZBhrryr0fiif0zcJ89aGa84GMVvvkQawYu0sSKZgwLsE5XdvKF/DHITA06wTCsLbgc9LAU9EJi7AkDrlp8oThbX+02kancZ8OKlN4U520dKWzxQhRQrkROs4GCj2Pp+d/7SCG6Ew26qogKbLpdUxxRDtVO1ojIR/vfW4NeA==-MIIETDCCAjSgAwIBAgIBDTANBgkqhkiG9w0BAQsFADAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBMB4XDTIwMTAxOTA5MDU1M1oXDTIyMTAyMTA5MDU1M1owHzEdMBsGA1UEAwwUcHJvZDJ5LWZyb20tMjAyMDEwMTkwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCUlaUFc1wf+CfY9wzFWEL2euKQ5nswqb57V8QZG7d7RoR6rwYUIXseTOAFq210oMEe++LCjzKDuqwDfsyhgDNTgZBPAaC4vUU2oy+XR+Fq8nBixWIsH668HeOnRK6RRhsr0rJzRB95aZ3EAPzBuQ2qPaNGm17pAX0Rd6MPRgjp75IWwI9eA6aMEdPQEVN7uyOtM5zSsjoj79Lbu1fjShOnQZuJcsV8tqnayeFkNzv2LTOlofU/Tbx502Ro073gGjoeRzNvrynAP03pL486P3KCAyiNPhDs2z8/COMrxRlZW5mfzo0xsK0dQGNH3UoG/9RVwHG4eS8LFpMTR9oetHZBAgMBAAGjgZkwgZYwCQYDVR0TBAIwADAdBgNVHQ4EFgQUJNoRIpb1hUHAk0foMSNM9MCEAv8wSAYDVR0jBEEwP4AUo562SGdCEjZBvW3gubSgUouX8bOhHKQaMBgxFjAUBgNVBAMMDUpldFByb2ZpbGUgQ0GCCQDSbLGDsoN54TATBgNVHSUEDDAKBggrBgEFBQcDATALBgNVHQ8EBAMCBaAwDQYJKoZIhvcNAQELBQADggIBAB2J1ysRudbkqmkUFK8xqhiZaYPd30TlmCmSAaGJ0eBpvkVeqA2jGYhAQRqFiAlFC63JKvWvRZO1iRuWCEfUMkdqQ9VQPXziE/BlsOIgrL6RlJfuFcEZ8TK3syIfIGQZNCxYhLLUuet2HE6LJYPQ5c0jH4kDooRpcVZ4rBxNwddpctUO2te9UU5/FjhioZQsPvd92qOTsV+8Cyl2fvNhNKD1Uu9ff5AkVIQn4JU23ozdB/R5oUlebwaTE6WZNBs+TA/qPj+5/we9NH71WRB0hqUoLI2AKKyiPw++FtN4Su1vsdDlrAzDj9ILjpjJKA1ImuVcG329/WTYIKysZ1CWK3zATg9BeCUPAV1pQy8ToXOq+RSYen6winZ2OO93eyHv2Iw5kbn1dqfBw1BuTE29V2FJKicJSu8iEOpfoafwJISXmz1wnnWL3V/0NxTulfWsXugOoLfv0ZIBP1xH9kmf22jjQ2JiHhQZP7ZDsreRrOeIQ/c4yR8IQvMLfC0WKQqrHu5ZzXTH4NO3CwGWSlTY74kE91zXB5mwWAx1jig+UXYc2w4RkVhy0//lOmVya/PEepuuTTI4+UJwC7qbVlh5zfhj8oTNUXgN0AOc+Q0/WFPl1aw5VV/VrO8FCoB15lFVlpKaQ1Yh+DVU8ke+rt9Th0BCHXe0uZOEmH0nOnH/0onD\n     ```\n\n6. 激活成功\n\n   ![image-20220606124418588](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220606124418588.png)\n\n   \n\n   ","source":"_posts/BookMark/安装配置/IDEA2022.1破解教程.md","raw":"# IDEA2022.1破解教程\n\n---\n\n[toc]\n\n---\n\n相关链接:\n\n[IDEA2021.2及以下版本破解教程](https://blog.huijia.cf/archives/idea20212-ji-yi-xia-ban-ben-po-jie-jiao-cheng)\n\n---\n\n## 一、下载安装idea\n\n+ [官网历史版本](https://www.jetbrains.com/idea/download/other.html)\n+ 本教程基于2022.1，无限试用插件支持\n  ![image-20220606122936923](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220606122936923.png)\n\n## 二、激活\n\n1. [软件下载](https://alist.huijia.cf/d/hui/%E8%BD%AF%E4%BB%B6/Java/IDEA/%E6%BF%80%E6%B4%BB/JetBrains%202022%20%E6%9C%80%E6%96%B0%E7%89%88%E6%9C%AC%E5%85%A8%E5%AE%B6%E6%A1%B6%E6%BF%80%E6%B4%BB.zip)\n\n2. 解压出`ja-netfilter-all`到固定位置（以后不要删除或变更）\n\n   ![image-20220606123521135](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220606123521135.png)\n\n3. 点击`scripts`下的`install-curent-user.vbs`\n\n4. 等待出现done\n\n   ![image-20220606124106870](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220606124106870.png)\n\n5. 进入idea，激活码或者服务器激活\n\n   + 服务器激活\n\n     `https://license-server.tmk.edu.hk`\n\n   + 激活码\n\n     ```\n     WGU6N1YBFB-eyJsaWNlbnNlSWQiOiJXR1U2TjFZQkZCIiwibGljZW5zZWVOYW1lIjoiaHlwb3MgdGltYnJlcyIsImFzc2lnbmVlTmFtZSI6IiIsImFzc2lnbmVlRW1haWwiOiIiLCJsaWNlbnNlUmVzdHJpY3Rpb24iOiIiLCJjaGVja0NvbmN1cnJlbnRVc2UiOmZhbHNlLCJwcm9kdWN0cyI6W3siY29kZSI6IlBSQiIsImZhbGxiYWNrRGF0ZSI6IjIwMjMtMDQtMTEiLCJwYWlkVXBUbyI6IjIwMjMtMDQtMTEiLCJleHRlbmRlZCI6dHJ1ZX0seyJjb2RlIjoiSUkiLCJmYWxsYmFja0RhdGUiOiIyMDIzLTA0LTExIiwicGFpZFVwVG8iOiIyMDIzLTA0LTExIiwiZXh0ZW5kZWQiOmZhbHNlfSx7ImNvZGUiOiJQU1ciLCJmYWxsYmFja0RhdGUiOiIyMDIzLTA0LTExIiwicGFpZFVwVG8iOiIyMDIzLTA0LTExIiwiZXh0ZW5kZWQiOnRydWV9LHsiY29kZSI6IlBDV01QIiwiZmFsbGJhY2tEYXRlIjoiMjAyMy0wNC0xMSIsInBhaWRVcFRvIjoiMjAyMy0wNC0xMSIsImV4dGVuZGVkIjp0cnVlfSx7ImNvZGUiOiJQV1MiLCJmYWxsYmFja0RhdGUiOiIyMDIzLTA0LTExIiwicGFpZFVwVG8iOiIyMDIzLTA0LTExIiwiZXh0ZW5kZWQiOnRydWV9LHsiY29kZSI6IlBTSSIsImZhbGxiYWNrRGF0ZSI6IjIwMjMtMDQtMTEiLCJwYWlkVXBUbyI6IjIwMjMtMDQtMTEiLCJleHRlbmRlZCI6dHJ1ZX0seyJjb2RlIjoiUERCIiwiZmFsbGJhY2tEYXRlIjoiMjAyMy0wNC0xMSIsInBhaWRVcFRvIjoiMjAyMy0wNC0xMSIsImV4dGVuZGVkIjp0cnVlfSx7ImNvZGUiOiJQUFMiLCJmYWxsYmFja0RhdGUiOiIyMDIzLTA0LTExIiwicGFpZFVwVG8iOiIyMDIzLTA0LTExIiwiZXh0ZW5kZWQiOnRydWV9LHsiY29kZSI6IlBQQyIsImZhbGxiYWNrRGF0ZSI6IjIwMjMtMDQtMTEiLCJwYWlkVXBUbyI6IjIwMjMtMDQtMTEiLCJleHRlbmRlZCI6dHJ1ZX0seyJjb2RlIjoiUEdPIiwiZmFsbGJhY2tEYXRlIjoiMjAyMy0wNC0xMSIsInBhaWRVcFRvIjoiMjAyMy0wNC0xMSIsImV4dGVuZGVkIjp0cnVlfV0sIm1ldGFkYXRhIjoiMDEyMDIyMDQxMVBTQU4wMDAwMDUiLCJoYXNoIjoiVFJJQUw6ODc1MDIzNjciLCJncmFjZVBlcmlvZERheXMiOjcsImF1dG9Qcm9sb25nYXRlZCI6ZmFsc2UsImlzQXV0b1Byb2xvbmdhdGVkIjpmYWxzZX0=-Q8ZiY3+sCCImh+1+N4ZllHOjEtnY/OuV7DEedzBn8xYrqLnsEQaEwKdt1FNJwwDA8SoTBelYzx+9pV3SvXnuhmCT76ZBcoHn/XY02Upj6SJRonX1w+Qiz68akPPTxJTp+c0lLgiCotEsDV4XUhMGNzxV4ElpD34Fc7lFieWwKc8uIRUZBhrryr0fiif0zcJ89aGa84GMVvvkQawYu0sSKZgwLsE5XdvKF/DHITA06wTCsLbgc9LAU9EJi7AkDrlp8oThbX+02kancZ8OKlN4U520dKWzxQhRQrkROs4GCj2Pp+d/7SCG6Ew26qogKbLpdUxxRDtVO1ojIR/vfW4NeA==-MIIETDCCAjSgAwIBAgIBDTANBgkqhkiG9w0BAQsFADAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBMB4XDTIwMTAxOTA5MDU1M1oXDTIyMTAyMTA5MDU1M1owHzEdMBsGA1UEAwwUcHJvZDJ5LWZyb20tMjAyMDEwMTkwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCUlaUFc1wf+CfY9wzFWEL2euKQ5nswqb57V8QZG7d7RoR6rwYUIXseTOAFq210oMEe++LCjzKDuqwDfsyhgDNTgZBPAaC4vUU2oy+XR+Fq8nBixWIsH668HeOnRK6RRhsr0rJzRB95aZ3EAPzBuQ2qPaNGm17pAX0Rd6MPRgjp75IWwI9eA6aMEdPQEVN7uyOtM5zSsjoj79Lbu1fjShOnQZuJcsV8tqnayeFkNzv2LTOlofU/Tbx502Ro073gGjoeRzNvrynAP03pL486P3KCAyiNPhDs2z8/COMrxRlZW5mfzo0xsK0dQGNH3UoG/9RVwHG4eS8LFpMTR9oetHZBAgMBAAGjgZkwgZYwCQYDVR0TBAIwADAdBgNVHQ4EFgQUJNoRIpb1hUHAk0foMSNM9MCEAv8wSAYDVR0jBEEwP4AUo562SGdCEjZBvW3gubSgUouX8bOhHKQaMBgxFjAUBgNVBAMMDUpldFByb2ZpbGUgQ0GCCQDSbLGDsoN54TATBgNVHSUEDDAKBggrBgEFBQcDATALBgNVHQ8EBAMCBaAwDQYJKoZIhvcNAQELBQADggIBAB2J1ysRudbkqmkUFK8xqhiZaYPd30TlmCmSAaGJ0eBpvkVeqA2jGYhAQRqFiAlFC63JKvWvRZO1iRuWCEfUMkdqQ9VQPXziE/BlsOIgrL6RlJfuFcEZ8TK3syIfIGQZNCxYhLLUuet2HE6LJYPQ5c0jH4kDooRpcVZ4rBxNwddpctUO2te9UU5/FjhioZQsPvd92qOTsV+8Cyl2fvNhNKD1Uu9ff5AkVIQn4JU23ozdB/R5oUlebwaTE6WZNBs+TA/qPj+5/we9NH71WRB0hqUoLI2AKKyiPw++FtN4Su1vsdDlrAzDj9ILjpjJKA1ImuVcG329/WTYIKysZ1CWK3zATg9BeCUPAV1pQy8ToXOq+RSYen6winZ2OO93eyHv2Iw5kbn1dqfBw1BuTE29V2FJKicJSu8iEOpfoafwJISXmz1wnnWL3V/0NxTulfWsXugOoLfv0ZIBP1xH9kmf22jjQ2JiHhQZP7ZDsreRrOeIQ/c4yR8IQvMLfC0WKQqrHu5ZzXTH4NO3CwGWSlTY74kE91zXB5mwWAx1jig+UXYc2w4RkVhy0//lOmVya/PEepuuTTI4+UJwC7qbVlh5zfhj8oTNUXgN0AOc+Q0/WFPl1aw5VV/VrO8FCoB15lFVlpKaQ1Yh+DVU8ke+rt9Th0BCHXe0uZOEmH0nOnH/0onD\n     ```\n\n6. 激活成功\n\n   ![image-20220606124418588](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220606124418588.png)\n\n   \n\n   ","slug":"BookMark/安装配置/IDEA2022.1破解教程","published":1,"date":"2022-07-18T09:51:19.000Z","updated":"2022-09-01T10:02:40.534Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cl7ptszoh000oaba5ch9q64it","content":"<h1><span id=\"idea20221破解教程\">IDEA2022.1破解教程</span></h1><hr>\n<p>[toc]</p>\n<hr>\n<p>相关链接:</p>\n<p><a href=\"https://blog.huijia.cf/archives/idea20212-ji-yi-xia-ban-ben-po-jie-jiao-cheng\">IDEA2021.2及以下版本破解教程</a></p>\n<hr>\n<h2><span id=\"一-下载安装idea\">一、下载安装idea</span></h2><ul>\n<li><a href=\"https://www.jetbrains.com/idea/download/other.html\">官网历史版本</a></li>\n<li>本教程基于2022.1，无限试用插件支持<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220606122936923.png\" alt=\"image-20220606122936923\"></li>\n</ul>\n<h2><span id=\"二-激活\">二、激活</span></h2><ol>\n<li><p><a href=\"https://alist.huijia.cf/d/hui/%E8%BD%AF%E4%BB%B6/Java/IDEA/%E6%BF%80%E6%B4%BB/JetBrains%202022%20%E6%9C%80%E6%96%B0%E7%89%88%E6%9C%AC%E5%85%A8%E5%AE%B6%E6%A1%B6%E6%BF%80%E6%B4%BB.zip\">软件下载</a></p>\n</li>\n<li><p>解压出<code>ja-netfilter-all</code>到固定位置（以后不要删除或变更）</p>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220606123521135.png\" alt=\"image-20220606123521135\"></p>\n</li>\n<li><p>点击<code>scripts</code>下的<code>install-curent-user.vbs</code></p>\n</li>\n<li><p>等待出现done</p>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220606124106870.png\" alt=\"image-20220606124106870\"></p>\n</li>\n<li><p>进入idea，激活码或者服务器激活</p>\n<ul>\n<li><p>服务器激活</p>\n<p><code>https://license-server.tmk.edu.hk</code></p>\n</li>\n<li><p>激活码</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\">WGU6N1YBFB-eyJsaWNlbnNlSWQiOiJXR1U2TjFZQkZCIiwibGljZW5zZWVOYW1lIjoiaHlwb3MgdGltYnJlcyIsImFzc2lnbmVlTmFtZSI6IiIsImFzc2lnbmVlRW1haWwiOiIiLCJsaWNlbnNlUmVzdHJpY3Rpb24iOiIiLCJjaGVja0NvbmN1cnJlbnRVc2UiOmZhbHNlLCJwcm9kdWN0cyI6W3siY29kZSI6IlBSQiIsImZhbGxiYWNrRGF0ZSI6IjIwMjMtMDQtMTEiLCJwYWlkVXBUbyI6IjIwMjMtMDQtMTEiLCJleHRlbmRlZCI6dHJ1ZX0seyJjb2RlIjoiSUkiLCJmYWxsYmFja0RhdGUiOiIyMDIzLTA0LTExIiwicGFpZFVwVG8iOiIyMDIzLTA0LTExIiwiZXh0ZW5kZWQiOmZhbHNlfSx7ImNvZGUiOiJQU1ciLCJmYWxsYmFja0RhdGUiOiIyMDIzLTA0LTExIiwicGFpZFVwVG8iOiIyMDIzLTA0LTExIiwiZXh0ZW5kZWQiOnRydWV9LHsiY29kZSI6IlBDV01QIiwiZmFsbGJhY2tEYXRlIjoiMjAyMy0wNC0xMSIsInBhaWRVcFRvIjoiMjAyMy0wNC0xMSIsImV4dGVuZGVkIjp0cnVlfSx7ImNvZGUiOiJQV1MiLCJmYWxsYmFja0RhdGUiOiIyMDIzLTA0LTExIiwicGFpZFVwVG8iOiIyMDIzLTA0LTExIiwiZXh0ZW5kZWQiOnRydWV9LHsiY29kZSI6IlBTSSIsImZhbGxiYWNrRGF0ZSI6IjIwMjMtMDQtMTEiLCJwYWlkVXBUbyI6IjIwMjMtMDQtMTEiLCJleHRlbmRlZCI6dHJ1ZX0seyJjb2RlIjoiUERCIiwiZmFsbGJhY2tEYXRlIjoiMjAyMy0wNC0xMSIsInBhaWRVcFRvIjoiMjAyMy0wNC0xMSIsImV4dGVuZGVkIjp0cnVlfSx7ImNvZGUiOiJQUFMiLCJmYWxsYmFja0RhdGUiOiIyMDIzLTA0LTExIiwicGFpZFVwVG8iOiIyMDIzLTA0LTExIiwiZXh0ZW5kZWQiOnRydWV9LHsiY29kZSI6IlBQQyIsImZhbGxiYWNrRGF0ZSI6IjIwMjMtMDQtMTEiLCJwYWlkVXBUbyI6IjIwMjMtMDQtMTEiLCJleHRlbmRlZCI6dHJ1ZX0seyJjb2RlIjoiUEdPIiwiZmFsbGJhY2tEYXRlIjoiMjAyMy0wNC0xMSIsInBhaWRVcFRvIjoiMjAyMy0wNC0xMSIsImV4dGVuZGVkIjp0cnVlfV0sIm1ldGFkYXRhIjoiMDEyMDIyMDQxMVBTQU4wMDAwMDUiLCJoYXNoIjoiVFJJQUw6ODc1MDIzNjciLCJncmFjZVBlcmlvZERheXMiOjcsImF1dG9Qcm9sb25nYXRlZCI6ZmFsc2UsImlzQXV0b1Byb2xvbmdhdGVkIjpmYWxzZX0=-Q8ZiY3+sCCImh+<span class=\"hljs-number\">1</span>+N4ZllHOjEtnY<span class=\"hljs-regexp\">/OuV7DEedzBn8xYrqLnsEQaEwKdt1FNJwwDA8SoTBelYzx+9pV3SvXnuhmCT76ZBcoHn/</span>XY02Upj6SJRonX1w+Qiz68akPPTxJTp+c0lLgiCotEsDV4XUhMGNzxV4ElpD34Fc7lFieWwKc8uIRUZBhrryr0fiif0zcJ89aGa84GMVvvkQawYu0sSKZgwLsE5XdvKF<span class=\"hljs-regexp\">/DHITA06wTCsLbgc9LAU9EJi7AkDrlp8oThbX+02kancZ8OKlN4U520dKWzxQhRQrkROs4GCj2Pp+d/</span><span class=\"hljs-number\">7</span>SCG6Ew26qogKbLpdUxxRDtVO1ojIR<span class=\"hljs-regexp\">/vfW4NeA==-MIIETDCCAjSgAwIBAgIBDTANBgkqhkiG9w0BAQsFADAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBMB4XDTIwMTAxOTA5MDU1M1oXDTIyMTAyMTA5MDU1M1owHzEdMBsGA1UEAwwUcHJvZDJ5LWZyb20tMjAyMDEwMTkwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCUlaUFc1wf+CfY9wzFWEL2euKQ5nswqb57V8QZG7d7RoR6rwYUIXseTOAFq210oMEe++LCjzKDuqwDfsyhgDNTgZBPAaC4vUU2oy+XR+Fq8nBixWIsH668HeOnRK6RRhsr0rJzRB95aZ3EAPzBuQ2qPaNGm17pAX0Rd6MPRgjp75IWwI9eA6aMEdPQEVN7uyOtM5zSsjoj79Lbu1fjShOnQZuJcsV8tqnayeFkNzv2LTOlofU/</span>Tbx502Ro073gGjoeRzNvrynAP03pL486P3KCAyiNPhDs2z8<span class=\"hljs-regexp\">/COMrxRlZW5mfzo0xsK0dQGNH3UoG/</span><span class=\"hljs-number\">9</span>RVwHG4eS8LFpMTR9oetHZBAgMBAAGjgZkwgZYwCQYDVR0TBAIwADAdBgNVHQ4EFgQUJNoRIpb1hUHAk0foMSNM9MCEAv8wSAYDVR0jBEEwP4AUo562SGdCEjZBvW3gubSgUouX8bOhHKQaMBgxFjAUBgNVBAMMDUpldFByb2ZpbGUgQ0GCCQDSbLGDsoN54TATBgNVHSUEDDAKBggrBgEFBQcDATALBgNVHQ8EBAMCBaAwDQYJKoZIhvcNAQELBQADggIBAB2J1ysRudbkqmkUFK8xqhiZaYPd30TlmCmSAaGJ0eBpvkVeqA2jGYhAQRqFiAlFC63JKvWvRZO1iRuWCEfUMkdqQ9VQPXziE<span class=\"hljs-regexp\">/BlsOIgrL6RlJfuFcEZ8TK3syIfIGQZNCxYhLLUuet2HE6LJYPQ5c0jH4kDooRpcVZ4rBxNwddpctUO2te9UU5/</span>FjhioZQsPvd92qOTsV+<span class=\"hljs-number\">8</span>Cyl2fvNhNKD1Uu9ff5AkVIQn4JU23ozdB<span class=\"hljs-regexp\">/R5oUlebwaTE6WZNBs+TA/</span>qPj+<span class=\"hljs-number\">5</span><span class=\"hljs-regexp\">/we9NH71WRB0hqUoLI2AKKyiPw++FtN4Su1vsdDlrAzDj9ILjpjJKA1ImuVcG329/</span>WTYIKysZ1CWK3zATg9BeCUPAV1pQy8ToXOq+RSYen6winZ2OO93eyHv2Iw5kbn1dqfBw1BuTE29V2FJKicJSu8iEOpfoafwJISXmz1wnnWL3V<span class=\"hljs-regexp\">/0NxTulfWsXugOoLfv0ZIBP1xH9kmf22jjQ2JiHhQZP7ZDsreRrOeIQ/</span>c4yR8IQvMLfC0WKQqrHu5ZzXTH4NO3CwGWSlTY74kE91zXB5mwWAx1jig+UXYc2w4RkVhy0<span class=\"hljs-regexp\">//</span>lOmVya<span class=\"hljs-regexp\">/PEepuuTTI4+UJwC7qbVlh5zfhj8oTNUXgN0AOc+Q0/</span>WFPl1aw5VV<span class=\"hljs-regexp\">/VrO8FCoB15lFVlpKaQ1Yh+DVU8ke+rt9Th0BCHXe0uZOEmH0nOnH/</span><span class=\"hljs-number\">0</span>onD<br></code></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>激活成功</p>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220606124418588.png\" alt=\"image-20220606124418588\"></p>\n</li>\n</ol>\n","site":{"data":{}},"wordcount":3548,"excerpt":"","more":"<h1 id=\"IDEA2022-1破解教程\"><a href=\"#IDEA2022-1破解教程\" class=\"headerlink\" title=\"IDEA2022.1破解教程\"></a>IDEA2022.1破解教程</h1><hr>\n<p>[toc]</p>\n<hr>\n<p>相关链接:</p>\n<p><a href=\"https://blog.huijia.cf/archives/idea20212-ji-yi-xia-ban-ben-po-jie-jiao-cheng\">IDEA2021.2及以下版本破解教程</a></p>\n<hr>\n<h2 id=\"一、下载安装idea\"><a href=\"#一、下载安装idea\" class=\"headerlink\" title=\"一、下载安装idea\"></a>一、下载安装idea</h2><ul>\n<li><a href=\"https://www.jetbrains.com/idea/download/other.html\">官网历史版本</a></li>\n<li>本教程基于2022.1，无限试用插件支持<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220606122936923.png\" alt=\"image-20220606122936923\"></li>\n</ul>\n<h2 id=\"二、激活\"><a href=\"#二、激活\" class=\"headerlink\" title=\"二、激活\"></a>二、激活</h2><ol>\n<li><p><a href=\"https://alist.huijia.cf/d/hui/%E8%BD%AF%E4%BB%B6/Java/IDEA/%E6%BF%80%E6%B4%BB/JetBrains%202022%20%E6%9C%80%E6%96%B0%E7%89%88%E6%9C%AC%E5%85%A8%E5%AE%B6%E6%A1%B6%E6%BF%80%E6%B4%BB.zip\">软件下载</a></p>\n</li>\n<li><p>解压出<code>ja-netfilter-all</code>到固定位置（以后不要删除或变更）</p>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220606123521135.png\" alt=\"image-20220606123521135\"></p>\n</li>\n<li><p>点击<code>scripts</code>下的<code>install-curent-user.vbs</code></p>\n</li>\n<li><p>等待出现done</p>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220606124106870.png\" alt=\"image-20220606124106870\"></p>\n</li>\n<li><p>进入idea，激活码或者服务器激活</p>\n<ul>\n<li><p>服务器激活</p>\n<p><code>https://license-server.tmk.edu.hk</code></p>\n</li>\n<li><p>激活码</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\">WGU6N1YBFB-eyJsaWNlbnNlSWQiOiJXR1U2TjFZQkZCIiwibGljZW5zZWVOYW1lIjoiaHlwb3MgdGltYnJlcyIsImFzc2lnbmVlTmFtZSI6IiIsImFzc2lnbmVlRW1haWwiOiIiLCJsaWNlbnNlUmVzdHJpY3Rpb24iOiIiLCJjaGVja0NvbmN1cnJlbnRVc2UiOmZhbHNlLCJwcm9kdWN0cyI6W3siY29kZSI6IlBSQiIsImZhbGxiYWNrRGF0ZSI6IjIwMjMtMDQtMTEiLCJwYWlkVXBUbyI6IjIwMjMtMDQtMTEiLCJleHRlbmRlZCI6dHJ1ZX0seyJjb2RlIjoiSUkiLCJmYWxsYmFja0RhdGUiOiIyMDIzLTA0LTExIiwicGFpZFVwVG8iOiIyMDIzLTA0LTExIiwiZXh0ZW5kZWQiOmZhbHNlfSx7ImNvZGUiOiJQU1ciLCJmYWxsYmFja0RhdGUiOiIyMDIzLTA0LTExIiwicGFpZFVwVG8iOiIyMDIzLTA0LTExIiwiZXh0ZW5kZWQiOnRydWV9LHsiY29kZSI6IlBDV01QIiwiZmFsbGJhY2tEYXRlIjoiMjAyMy0wNC0xMSIsInBhaWRVcFRvIjoiMjAyMy0wNC0xMSIsImV4dGVuZGVkIjp0cnVlfSx7ImNvZGUiOiJQV1MiLCJmYWxsYmFja0RhdGUiOiIyMDIzLTA0LTExIiwicGFpZFVwVG8iOiIyMDIzLTA0LTExIiwiZXh0ZW5kZWQiOnRydWV9LHsiY29kZSI6IlBTSSIsImZhbGxiYWNrRGF0ZSI6IjIwMjMtMDQtMTEiLCJwYWlkVXBUbyI6IjIwMjMtMDQtMTEiLCJleHRlbmRlZCI6dHJ1ZX0seyJjb2RlIjoiUERCIiwiZmFsbGJhY2tEYXRlIjoiMjAyMy0wNC0xMSIsInBhaWRVcFRvIjoiMjAyMy0wNC0xMSIsImV4dGVuZGVkIjp0cnVlfSx7ImNvZGUiOiJQUFMiLCJmYWxsYmFja0RhdGUiOiIyMDIzLTA0LTExIiwicGFpZFVwVG8iOiIyMDIzLTA0LTExIiwiZXh0ZW5kZWQiOnRydWV9LHsiY29kZSI6IlBQQyIsImZhbGxiYWNrRGF0ZSI6IjIwMjMtMDQtMTEiLCJwYWlkVXBUbyI6IjIwMjMtMDQtMTEiLCJleHRlbmRlZCI6dHJ1ZX0seyJjb2RlIjoiUEdPIiwiZmFsbGJhY2tEYXRlIjoiMjAyMy0wNC0xMSIsInBhaWRVcFRvIjoiMjAyMy0wNC0xMSIsImV4dGVuZGVkIjp0cnVlfV0sIm1ldGFkYXRhIjoiMDEyMDIyMDQxMVBTQU4wMDAwMDUiLCJoYXNoIjoiVFJJQUw6ODc1MDIzNjciLCJncmFjZVBlcmlvZERheXMiOjcsImF1dG9Qcm9sb25nYXRlZCI6ZmFsc2UsImlzQXV0b1Byb2xvbmdhdGVkIjpmYWxzZX0=-Q8ZiY3+sCCImh+<span class=\"hljs-number\">1</span>+N4ZllHOjEtnY<span class=\"hljs-regexp\">/OuV7DEedzBn8xYrqLnsEQaEwKdt1FNJwwDA8SoTBelYzx+9pV3SvXnuhmCT76ZBcoHn/</span>XY02Upj6SJRonX1w+Qiz68akPPTxJTp+c0lLgiCotEsDV4XUhMGNzxV4ElpD34Fc7lFieWwKc8uIRUZBhrryr0fiif0zcJ89aGa84GMVvvkQawYu0sSKZgwLsE5XdvKF<span class=\"hljs-regexp\">/DHITA06wTCsLbgc9LAU9EJi7AkDrlp8oThbX+02kancZ8OKlN4U520dKWzxQhRQrkROs4GCj2Pp+d/</span><span class=\"hljs-number\">7</span>SCG6Ew26qogKbLpdUxxRDtVO1ojIR<span class=\"hljs-regexp\">/vfW4NeA==-MIIETDCCAjSgAwIBAgIBDTANBgkqhkiG9w0BAQsFADAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBMB4XDTIwMTAxOTA5MDU1M1oXDTIyMTAyMTA5MDU1M1owHzEdMBsGA1UEAwwUcHJvZDJ5LWZyb20tMjAyMDEwMTkwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCUlaUFc1wf+CfY9wzFWEL2euKQ5nswqb57V8QZG7d7RoR6rwYUIXseTOAFq210oMEe++LCjzKDuqwDfsyhgDNTgZBPAaC4vUU2oy+XR+Fq8nBixWIsH668HeOnRK6RRhsr0rJzRB95aZ3EAPzBuQ2qPaNGm17pAX0Rd6MPRgjp75IWwI9eA6aMEdPQEVN7uyOtM5zSsjoj79Lbu1fjShOnQZuJcsV8tqnayeFkNzv2LTOlofU/</span>Tbx502Ro073gGjoeRzNvrynAP03pL486P3KCAyiNPhDs2z8<span class=\"hljs-regexp\">/COMrxRlZW5mfzo0xsK0dQGNH3UoG/</span><span class=\"hljs-number\">9</span>RVwHG4eS8LFpMTR9oetHZBAgMBAAGjgZkwgZYwCQYDVR0TBAIwADAdBgNVHQ4EFgQUJNoRIpb1hUHAk0foMSNM9MCEAv8wSAYDVR0jBEEwP4AUo562SGdCEjZBvW3gubSgUouX8bOhHKQaMBgxFjAUBgNVBAMMDUpldFByb2ZpbGUgQ0GCCQDSbLGDsoN54TATBgNVHSUEDDAKBggrBgEFBQcDATALBgNVHQ8EBAMCBaAwDQYJKoZIhvcNAQELBQADggIBAB2J1ysRudbkqmkUFK8xqhiZaYPd30TlmCmSAaGJ0eBpvkVeqA2jGYhAQRqFiAlFC63JKvWvRZO1iRuWCEfUMkdqQ9VQPXziE<span class=\"hljs-regexp\">/BlsOIgrL6RlJfuFcEZ8TK3syIfIGQZNCxYhLLUuet2HE6LJYPQ5c0jH4kDooRpcVZ4rBxNwddpctUO2te9UU5/</span>FjhioZQsPvd92qOTsV+<span class=\"hljs-number\">8</span>Cyl2fvNhNKD1Uu9ff5AkVIQn4JU23ozdB<span class=\"hljs-regexp\">/R5oUlebwaTE6WZNBs+TA/</span>qPj+<span class=\"hljs-number\">5</span><span class=\"hljs-regexp\">/we9NH71WRB0hqUoLI2AKKyiPw++FtN4Su1vsdDlrAzDj9ILjpjJKA1ImuVcG329/</span>WTYIKysZ1CWK3zATg9BeCUPAV1pQy8ToXOq+RSYen6winZ2OO93eyHv2Iw5kbn1dqfBw1BuTE29V2FJKicJSu8iEOpfoafwJISXmz1wnnWL3V<span class=\"hljs-regexp\">/0NxTulfWsXugOoLfv0ZIBP1xH9kmf22jjQ2JiHhQZP7ZDsreRrOeIQ/</span>c4yR8IQvMLfC0WKQqrHu5ZzXTH4NO3CwGWSlTY74kE91zXB5mwWAx1jig+UXYc2w4RkVhy0<span class=\"hljs-regexp\">//</span>lOmVya<span class=\"hljs-regexp\">/PEepuuTTI4+UJwC7qbVlh5zfhj8oTNUXgN0AOc+Q0/</span>WFPl1aw5VV<span class=\"hljs-regexp\">/VrO8FCoB15lFVlpKaQ1Yh+DVU8ke+rt9Th0BCHXe0uZOEmH0nOnH/</span><span class=\"hljs-number\">0</span>onD<br></code></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>激活成功</p>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220606124418588.png\" alt=\"image-20220606124418588\"></p>\n</li>\n</ol>\n"},{"_content":"# IDEA使用\n\n## 一、常用快捷键\n\n|   键  |  功能   |\n| --- | --- |\n| F2                         | 调试                                         |\n| F3                         | 运行                                         |\n| F4                         | 停止                                         |\n|                            |                                              |\n|                            |                                              |\n|                            |                                              |\n|                            |                                              |\n| Ctrl + i                   | 格式化                                       |\n| Ctrl + E                   | 打开最近改的文件                             |\n| Ctrl + F/ Ctrl + Shift + F | 页面搜索/替换                                |\n| Ctrl + H/ Ctrl + Shift + H | 全局搜索/替换                                |\n| Ctrl + /                   | 注释行                                       |\n| Ctrl + -/+                 | 收起/展开方法                                |\n| a l t + tab                | Git注解                                      |\n| Ctrl + ↑/↓/←/→             | 光标多行或移动单词                           |\n|                            |                                              |\n|                            |                                              |\n| Alt + Q                    | 关闭全部选项卡                               |\n| Alt + W                    | 关闭其他选项卡                               |\n| Alt + ↑/↓                  | 上/下移 当前行                               |\n| Ctrl + ALT + ↓             | 复制光标所在行，并把复制内容插入光标位置下面 |\n| Shift+esc                  | 隐藏侧活动工具窗口                           |\n|                            |                                              |\n|                            |                                              |\n|                            |                                              |\n| Ctrl + Shift + 。          | 字符串选用，扩大选区                         |\n| Ctrl + Shift + u           | 大小写切换                                   |\n| Ctrl + Shift + y           | 驼峰切换（CamelCase插件）                    |\n| Ctrl + Shift + ↓           | 跳转实现                                     |\n| Ctrl + Shift + enter       | 语句补全，格式化                             |\n|                            |                                              |\n|                            |                                              |\n|                            |                                              |\n## 二、IDEA快捷提示\n\n|  序号   | 快捷    |  解释   |\n| --- | --- | --- |\n|   1  |   soutp  |  System.out.println(\"方法形参名 = \" + 形参名);   |\n|   2  | soutv    |   System.out.println(\"变量名 = \" + 变量);  |\n|   3  | fori    |  可生成 for 循环;  |\n|   4 | list.for   |  可生成集合 list 的 的 for 循环;  |\n|   5  |  ifn    |  可生成 if(xxx = null)   |\n|   6  |   inn  |  可生成 if(xxx != null) 或 xxx.nn 或 xxx.null   |\n\n## 三、批量搜索并替换当前行\n\n正则搜索`关键字.*\\n    `\n\n![image-20220426113159893](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220426113159893.png)\n\n替换后效果：\n\n![image-20220426113244834](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220426113244834.png)\n","source":"_posts/BookMark/安装配置/IDEA快捷键.md","raw":"# IDEA使用\n\n## 一、常用快捷键\n\n|   键  |  功能   |\n| --- | --- |\n| F2                         | 调试                                         |\n| F3                         | 运行                                         |\n| F4                         | 停止                                         |\n|                            |                                              |\n|                            |                                              |\n|                            |                                              |\n|                            |                                              |\n| Ctrl + i                   | 格式化                                       |\n| Ctrl + E                   | 打开最近改的文件                             |\n| Ctrl + F/ Ctrl + Shift + F | 页面搜索/替换                                |\n| Ctrl + H/ Ctrl + Shift + H | 全局搜索/替换                                |\n| Ctrl + /                   | 注释行                                       |\n| Ctrl + -/+                 | 收起/展开方法                                |\n| a l t + tab                | Git注解                                      |\n| Ctrl + ↑/↓/←/→             | 光标多行或移动单词                           |\n|                            |                                              |\n|                            |                                              |\n| Alt + Q                    | 关闭全部选项卡                               |\n| Alt + W                    | 关闭其他选项卡                               |\n| Alt + ↑/↓                  | 上/下移 当前行                               |\n| Ctrl + ALT + ↓             | 复制光标所在行，并把复制内容插入光标位置下面 |\n| Shift+esc                  | 隐藏侧活动工具窗口                           |\n|                            |                                              |\n|                            |                                              |\n|                            |                                              |\n| Ctrl + Shift + 。          | 字符串选用，扩大选区                         |\n| Ctrl + Shift + u           | 大小写切换                                   |\n| Ctrl + Shift + y           | 驼峰切换（CamelCase插件）                    |\n| Ctrl + Shift + ↓           | 跳转实现                                     |\n| Ctrl + Shift + enter       | 语句补全，格式化                             |\n|                            |                                              |\n|                            |                                              |\n|                            |                                              |\n## 二、IDEA快捷提示\n\n|  序号   | 快捷    |  解释   |\n| --- | --- | --- |\n|   1  |   soutp  |  System.out.println(\"方法形参名 = \" + 形参名);   |\n|   2  | soutv    |   System.out.println(\"变量名 = \" + 变量);  |\n|   3  | fori    |  可生成 for 循环;  |\n|   4 | list.for   |  可生成集合 list 的 的 for 循环;  |\n|   5  |  ifn    |  可生成 if(xxx = null)   |\n|   6  |   inn  |  可生成 if(xxx != null) 或 xxx.nn 或 xxx.null   |\n\n## 三、批量搜索并替换当前行\n\n正则搜索`关键字.*\\n    `\n\n![image-20220426113159893](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220426113159893.png)\n\n替换后效果：\n\n![image-20220426113244834](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220426113244834.png)\n","slug":"BookMark/安装配置/IDEA快捷键","published":1,"date":"2022-07-25T05:51:40.000Z","updated":"2022-09-01T10:02:40.565Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cl7ptszoi000raba5fil7flb6","content":"<h1><span id=\"idea使用\">IDEA使用</span></h1><h2><span id=\"一-常用快捷键\">一、常用快捷键</span></h2><table>\n<thead>\n<tr>\n<th>键</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>F2</td>\n<td>调试</td>\n</tr>\n<tr>\n<td>F3</td>\n<td>运行</td>\n</tr>\n<tr>\n<td>F4</td>\n<td>停止</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>Ctrl + i</td>\n<td>格式化</td>\n</tr>\n<tr>\n<td>Ctrl + E</td>\n<td>打开最近改的文件</td>\n</tr>\n<tr>\n<td>Ctrl + F&#x2F; Ctrl + Shift + F</td>\n<td>页面搜索&#x2F;替换</td>\n</tr>\n<tr>\n<td>Ctrl + H&#x2F; Ctrl + Shift + H</td>\n<td>全局搜索&#x2F;替换</td>\n</tr>\n<tr>\n<td>Ctrl + &#x2F;</td>\n<td>注释行</td>\n</tr>\n<tr>\n<td>Ctrl + -&#x2F;+</td>\n<td>收起&#x2F;展开方法</td>\n</tr>\n<tr>\n<td>a l t + tab</td>\n<td>Git注解</td>\n</tr>\n<tr>\n<td>Ctrl + ↑&#x2F;↓&#x2F;←&#x2F;→</td>\n<td>光标多行或移动单词</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>Alt + Q</td>\n<td>关闭全部选项卡</td>\n</tr>\n<tr>\n<td>Alt + W</td>\n<td>关闭其他选项卡</td>\n</tr>\n<tr>\n<td>Alt + ↑&#x2F;↓</td>\n<td>上&#x2F;下移 当前行</td>\n</tr>\n<tr>\n<td>Ctrl + ALT + ↓</td>\n<td>复制光标所在行，并把复制内容插入光标位置下面</td>\n</tr>\n<tr>\n<td>Shift+esc</td>\n<td>隐藏侧活动工具窗口</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>Ctrl + Shift + 。</td>\n<td>字符串选用，扩大选区</td>\n</tr>\n<tr>\n<td>Ctrl + Shift + u</td>\n<td>大小写切换</td>\n</tr>\n<tr>\n<td>Ctrl + Shift + y</td>\n<td>驼峰切换（CamelCase插件）</td>\n</tr>\n<tr>\n<td>Ctrl + Shift + ↓</td>\n<td>跳转实现</td>\n</tr>\n<tr>\n<td>Ctrl + Shift + enter</td>\n<td>语句补全，格式化</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<h2><span id=\"二-idea快捷提示\">二、IDEA快捷提示</span></h2><table>\n<thead>\n<tr>\n<th>序号</th>\n<th>快捷</th>\n<th>解释</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td>soutp</td>\n<td>System.out.println(“方法形参名 &#x3D; “ + 形参名);</td>\n</tr>\n<tr>\n<td>2</td>\n<td>soutv</td>\n<td>System.out.println(“变量名 &#x3D; “ + 变量);</td>\n</tr>\n<tr>\n<td>3</td>\n<td>fori</td>\n<td>可生成 for 循环;</td>\n</tr>\n<tr>\n<td>4</td>\n<td>list.for</td>\n<td>可生成集合 list 的 的 for 循环;</td>\n</tr>\n<tr>\n<td>5</td>\n<td>ifn</td>\n<td>可生成 if(xxx &#x3D; null)</td>\n</tr>\n<tr>\n<td>6</td>\n<td>inn</td>\n<td>可生成 if(xxx !&#x3D; null) 或 xxx.nn 或 xxx.null</td>\n</tr>\n</tbody></table>\n<h2><span id=\"三-批量搜索并替换当前行\">三、批量搜索并替换当前行</span></h2><p>正则搜索<code>关键字.*\\n    </code></p>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220426113159893.png\" alt=\"image-20220426113159893\"></p>\n<p>替换后效果：</p>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220426113244834.png\" alt=\"image-20220426113244834\"></p>\n","site":{"data":{}},"wordcount":651,"excerpt":"","more":"<h1 id=\"IDEA使用\"><a href=\"#IDEA使用\" class=\"headerlink\" title=\"IDEA使用\"></a>IDEA使用</h1><h2 id=\"一、常用快捷键\"><a href=\"#一、常用快捷键\" class=\"headerlink\" title=\"一、常用快捷键\"></a>一、常用快捷键</h2><table>\n<thead>\n<tr>\n<th>键</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>F2</td>\n<td>调试</td>\n</tr>\n<tr>\n<td>F3</td>\n<td>运行</td>\n</tr>\n<tr>\n<td>F4</td>\n<td>停止</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>Ctrl + i</td>\n<td>格式化</td>\n</tr>\n<tr>\n<td>Ctrl + E</td>\n<td>打开最近改的文件</td>\n</tr>\n<tr>\n<td>Ctrl + F&#x2F; Ctrl + Shift + F</td>\n<td>页面搜索&#x2F;替换</td>\n</tr>\n<tr>\n<td>Ctrl + H&#x2F; Ctrl + Shift + H</td>\n<td>全局搜索&#x2F;替换</td>\n</tr>\n<tr>\n<td>Ctrl + &#x2F;</td>\n<td>注释行</td>\n</tr>\n<tr>\n<td>Ctrl + -&#x2F;+</td>\n<td>收起&#x2F;展开方法</td>\n</tr>\n<tr>\n<td>a l t + tab</td>\n<td>Git注解</td>\n</tr>\n<tr>\n<td>Ctrl + ↑&#x2F;↓&#x2F;←&#x2F;→</td>\n<td>光标多行或移动单词</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>Alt + Q</td>\n<td>关闭全部选项卡</td>\n</tr>\n<tr>\n<td>Alt + W</td>\n<td>关闭其他选项卡</td>\n</tr>\n<tr>\n<td>Alt + ↑&#x2F;↓</td>\n<td>上&#x2F;下移 当前行</td>\n</tr>\n<tr>\n<td>Ctrl + ALT + ↓</td>\n<td>复制光标所在行，并把复制内容插入光标位置下面</td>\n</tr>\n<tr>\n<td>Shift+esc</td>\n<td>隐藏侧活动工具窗口</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>Ctrl + Shift + 。</td>\n<td>字符串选用，扩大选区</td>\n</tr>\n<tr>\n<td>Ctrl + Shift + u</td>\n<td>大小写切换</td>\n</tr>\n<tr>\n<td>Ctrl + Shift + y</td>\n<td>驼峰切换（CamelCase插件）</td>\n</tr>\n<tr>\n<td>Ctrl + Shift + ↓</td>\n<td>跳转实现</td>\n</tr>\n<tr>\n<td>Ctrl + Shift + enter</td>\n<td>语句补全，格式化</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<h2 id=\"二、IDEA快捷提示\"><a href=\"#二、IDEA快捷提示\" class=\"headerlink\" title=\"二、IDEA快捷提示\"></a>二、IDEA快捷提示</h2><table>\n<thead>\n<tr>\n<th>序号</th>\n<th>快捷</th>\n<th>解释</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td>soutp</td>\n<td>System.out.println(“方法形参名 &#x3D; “ + 形参名);</td>\n</tr>\n<tr>\n<td>2</td>\n<td>soutv</td>\n<td>System.out.println(“变量名 &#x3D; “ + 变量);</td>\n</tr>\n<tr>\n<td>3</td>\n<td>fori</td>\n<td>可生成 for 循环;</td>\n</tr>\n<tr>\n<td>4</td>\n<td>list.for</td>\n<td>可生成集合 list 的 的 for 循环;</td>\n</tr>\n<tr>\n<td>5</td>\n<td>ifn</td>\n<td>可生成 if(xxx &#x3D; null)</td>\n</tr>\n<tr>\n<td>6</td>\n<td>inn</td>\n<td>可生成 if(xxx !&#x3D; null) 或 xxx.nn 或 xxx.null</td>\n</tr>\n</tbody></table>\n<h2 id=\"三、批量搜索并替换当前行\"><a href=\"#三、批量搜索并替换当前行\" class=\"headerlink\" title=\"三、批量搜索并替换当前行\"></a>三、批量搜索并替换当前行</h2><p>正则搜索<code>关键字.*\\n    </code></p>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220426113159893.png\" alt=\"image-20220426113159893\"></p>\n<p>替换后效果：</p>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220426113244834.png\" alt=\"image-20220426113244834\"></p>\n"},{"_content":"﻿﻿﻿# MySQL免安装版配置 dos基础命令创建MySQL Navicat编辑器破解--菜鸟小回\n\n---\n\n[toc]\n\n[MySQL8.0.13免安装版](https://pan.baidu.com/s/1UFhPSIWF2hSJotbjl1xZvg)\n\n---\n\n## 1.安装\n\n1. 解压文件\n2. 打开my.ini文件，设置你的安装路径。\n    + 我的安装路径为：D:\\mysql\\mysql-8.0.13-winx64\n    + 设置mysql的安装目录： \n    basedir=D:\\mysql\\mysql-8.0.13-winx64\n    + 设置mysql数据库的数据的存放目录 \n    datadir=D:\\mysql\\mysql-8.0.13-winx64\\data \n    ![image-20220430165913787](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430165913787.png)\n+ 如果没有my.ini自行创建，内容如下\n\t```\n\t[mysql]\n\t#设置mysql客户端默认字符集\n\tdefault-character-set=utf8\n\t[mysqld]\n\t#设置3306端口\n\tport=3306\n\t# 设置mysql的安装目录\n\tbasedir=D:\\mysql\\mysql-8.0.13-winx64\n\t# 设置mysql数据库的数据的存放目录\n\tdatadir=D:\\mysql\\mysql-8.0.13-winx64\\data\n\t# 允许最大连接数\n\tmax_connections=200\n\t# 服务端使用的字符集默认为8比特编码的latin1字符集\n\tcharacter-set-server=utf8\n\t# 创建新表时将使用的默认存储引擎\n\tdefault-storage-engine=INNODB\n\t```\n\n3. 配置环境变量：\n    + 右键此电脑->属性->高级系统设置->环境变量\n    ![image-20220430165921872](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430165921872.png)\n    + 新建->输入你的bin路径->应用\n    + 我的bin路径：D:\\mysql\\mysql-8.0.13-winx64\\bin\n    + ![image-20220430165931178](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430165931178.png)\n    + ![enter description here](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430165936823.png)\n\n4. 以管理员身份运行cmd，进入到你的安装路径中，\n\t `d:`\n     `cd D:\\mysql\\mysql-8.0.13-winx64`\n     输入命令：\n    ` bin\\mysqld --defaults-file=my.ini --initialize-insecure `\n6. 安装mysql的服务\n     `bin\\mysqld --install`\n7. 进入bin文件夹。启动mysql服务\n     `net start mysql`  \n8. 登录mysql：\n     `mysql -uroot -p`\n9. 查询用户名密码:\n    `select host,user,authentication_string from mysql.user;`\n10. 如果root对应的authentication_string不是空值，把root对应的密码设置为空\n    `use mysql; update user set authentication_string='' where user='root'`\n11.\t修改密码,后面引号root替换为你想要设置的密码，完成。\n    `ALTER user 'root'@'localhost' IDENTIFIED BY 'root';`\t\n\n## 2.使用\n1. 登录,-u账号 -p密码\n    `mysql -uroot -p521521`\n2. 查看数据库：\n    `show databases;`\n3. 创建数据库:\n    `create database abc;`\n    应用创建：\n    `use abc;`\n4. 查看表：\n    `show tables;`\n5. 创建表:\n    ```javascript?linenums\n    create table student(\n     id int,\n     name varchar(4),\n     birthday date,\n     sex char(2)\n     );\n    ```\n+ 加主键设置：alter table score add constraint pk_scid primary key(scid);\n+ 加非空约束：alter table score modify column score double not null;\n+ 加唯一约束：alter table score add constraint uk_score unique(score);\n+ 加外键约束：alter table score add constraint fk_sid foreign key(sid) references student(sid);\n6. 插入数据：\n    `insert into 表名 values(101,'如花','2019-1-5','女');`\n7. 查询表中数据：\n    `select * from student;`\n8. 删除表\n    `drop table student;`\n9. 添加字段\n    `alter table 表名 add column 列名 类型 [first /after/before 列名];`\n10. 删除字段：\n    `alter table 表名 drop column 列名`\n11. 表描述\n    `desc student;`\n12. 数据库约束:\n\t+ 主键:`primary key`\n\t+ 自动增长:`auto_increment`\n\t    例:`tid int primary key auto_increment`\n\t    主键自增的列可以不用添加数据，数据库来维护唯一约束\n\t+ 唯一约束:`unique`\n\t+ 非空约束:`not null`\n\t+ 外键约束:`foreign key` \n\t    例:`foreign key(tid) references teacher(tid)`\n\t+ 检查约束\n---\n+ 创建student\n  ![image-20220430170003320](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430170003320.png)\n  \n    ```javascript?linenums\n     create table student(\n     sid int primary key auto_increment,\n     sname varchar(5) not null default '张三', \n     ssex char(2) not null,\n     sclassname char(5) not null,\n     sage int not null,\n     saddr varchar(100) not null\n     );\n    ```\n  \n  \n    + 插入数据：\n      ![image-20220430170011118](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430170011118.png)\n    ```javascript?linenums\n        insert into student(sname,ssex,sclassname,sage,saddr)values('回宝旗','男','水浒班',18,'河南省郑州市'),('哈哈','女','国威班',18,'河南省平顶山市'),('嘿嘿','女','励志班',19,'河南省郑州市'),('呵呵','男','加强班',20,'美国')；\n    ```\n  \n    \n---\n+ 创建teacher表\n  ![image-20220430170019572](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430170019572.png)\n  \n    ```javascript?linenums\n     create table teacher(\n     tid int primary key auto_increment,\n     tname varchar(5) null,\n     tsex char(2) not null,\n     tage int not null,\n     tphone char(11) unique\n     );\n    ```\n  \n+ 插入数据\n  ![image-20220430170030476](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430170030476.png)\n```javascript?linenums\ninsert into teacher(tname,tsex,tage,tphone)values('王','男',28,'15516055456'),('光','女',19,'16816055447'),('辉','男',35,'15516055555');\n```\n\n\n---\n+ 创建timeable\n\n![image-20220430170037869](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430170037869.png)\n```javascript?linenums\n create table timetable(\n kid int primary key auto_increment,\n kname varchar(50) unique,\n tid int,\n foreign key(tid) references teacher(tid)\n );\n```\n\n\n+ 插入数据\n ![image-20220430170046892](C:\\Users\\hui\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220430170046892.png)\n```javascript?linenums\ninsert into timetable(kname,tid)values('物理',1),('数学',2),('化学',3);\n```\n\n---\n+ 创建gradetable表\n\n![image-20220430170211238](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430170211238.png)\n\n```\ncreate table gradetable(\n     gid int primary key auto_increment,\n     grade int not null,\n     sid int,\n     kid int,\n     foreign key(sid) references student(sid),\n     foreign key(kid) references timetable(kid)\n);\n```\n\n+ 插入数据:\n  ![image-20220430170222388](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430170222388.png)\n\n```javascript?linenums\n insert into gradetable(grade,sid,kid)values(98,2,1),(93,3,2),(50,4,3);\n```\n\n\n---\n 总：![image-20220430170236623](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430170236623.png)\n","source":"_posts/BookMark/安装配置/MySQL免安装版配置 dos基础命令创建MySQL Navicat编辑器破解--菜鸟小回.md","raw":"﻿﻿﻿# MySQL免安装版配置 dos基础命令创建MySQL Navicat编辑器破解--菜鸟小回\n\n---\n\n[toc]\n\n[MySQL8.0.13免安装版](https://pan.baidu.com/s/1UFhPSIWF2hSJotbjl1xZvg)\n\n---\n\n## 1.安装\n\n1. 解压文件\n2. 打开my.ini文件，设置你的安装路径。\n    + 我的安装路径为：D:\\mysql\\mysql-8.0.13-winx64\n    + 设置mysql的安装目录： \n    basedir=D:\\mysql\\mysql-8.0.13-winx64\n    + 设置mysql数据库的数据的存放目录 \n    datadir=D:\\mysql\\mysql-8.0.13-winx64\\data \n    ![image-20220430165913787](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430165913787.png)\n+ 如果没有my.ini自行创建，内容如下\n\t```\n\t[mysql]\n\t#设置mysql客户端默认字符集\n\tdefault-character-set=utf8\n\t[mysqld]\n\t#设置3306端口\n\tport=3306\n\t# 设置mysql的安装目录\n\tbasedir=D:\\mysql\\mysql-8.0.13-winx64\n\t# 设置mysql数据库的数据的存放目录\n\tdatadir=D:\\mysql\\mysql-8.0.13-winx64\\data\n\t# 允许最大连接数\n\tmax_connections=200\n\t# 服务端使用的字符集默认为8比特编码的latin1字符集\n\tcharacter-set-server=utf8\n\t# 创建新表时将使用的默认存储引擎\n\tdefault-storage-engine=INNODB\n\t```\n\n3. 配置环境变量：\n    + 右键此电脑->属性->高级系统设置->环境变量\n    ![image-20220430165921872](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430165921872.png)\n    + 新建->输入你的bin路径->应用\n    + 我的bin路径：D:\\mysql\\mysql-8.0.13-winx64\\bin\n    + ![image-20220430165931178](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430165931178.png)\n    + ![enter description here](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430165936823.png)\n\n4. 以管理员身份运行cmd，进入到你的安装路径中，\n\t `d:`\n     `cd D:\\mysql\\mysql-8.0.13-winx64`\n     输入命令：\n    ` bin\\mysqld --defaults-file=my.ini --initialize-insecure `\n6. 安装mysql的服务\n     `bin\\mysqld --install`\n7. 进入bin文件夹。启动mysql服务\n     `net start mysql`  \n8. 登录mysql：\n     `mysql -uroot -p`\n9. 查询用户名密码:\n    `select host,user,authentication_string from mysql.user;`\n10. 如果root对应的authentication_string不是空值，把root对应的密码设置为空\n    `use mysql; update user set authentication_string='' where user='root'`\n11.\t修改密码,后面引号root替换为你想要设置的密码，完成。\n    `ALTER user 'root'@'localhost' IDENTIFIED BY 'root';`\t\n\n## 2.使用\n1. 登录,-u账号 -p密码\n    `mysql -uroot -p521521`\n2. 查看数据库：\n    `show databases;`\n3. 创建数据库:\n    `create database abc;`\n    应用创建：\n    `use abc;`\n4. 查看表：\n    `show tables;`\n5. 创建表:\n    ```javascript?linenums\n    create table student(\n     id int,\n     name varchar(4),\n     birthday date,\n     sex char(2)\n     );\n    ```\n+ 加主键设置：alter table score add constraint pk_scid primary key(scid);\n+ 加非空约束：alter table score modify column score double not null;\n+ 加唯一约束：alter table score add constraint uk_score unique(score);\n+ 加外键约束：alter table score add constraint fk_sid foreign key(sid) references student(sid);\n6. 插入数据：\n    `insert into 表名 values(101,'如花','2019-1-5','女');`\n7. 查询表中数据：\n    `select * from student;`\n8. 删除表\n    `drop table student;`\n9. 添加字段\n    `alter table 表名 add column 列名 类型 [first /after/before 列名];`\n10. 删除字段：\n    `alter table 表名 drop column 列名`\n11. 表描述\n    `desc student;`\n12. 数据库约束:\n\t+ 主键:`primary key`\n\t+ 自动增长:`auto_increment`\n\t    例:`tid int primary key auto_increment`\n\t    主键自增的列可以不用添加数据，数据库来维护唯一约束\n\t+ 唯一约束:`unique`\n\t+ 非空约束:`not null`\n\t+ 外键约束:`foreign key` \n\t    例:`foreign key(tid) references teacher(tid)`\n\t+ 检查约束\n---\n+ 创建student\n  ![image-20220430170003320](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430170003320.png)\n  \n    ```javascript?linenums\n     create table student(\n     sid int primary key auto_increment,\n     sname varchar(5) not null default '张三', \n     ssex char(2) not null,\n     sclassname char(5) not null,\n     sage int not null,\n     saddr varchar(100) not null\n     );\n    ```\n  \n  \n    + 插入数据：\n      ![image-20220430170011118](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430170011118.png)\n    ```javascript?linenums\n        insert into student(sname,ssex,sclassname,sage,saddr)values('回宝旗','男','水浒班',18,'河南省郑州市'),('哈哈','女','国威班',18,'河南省平顶山市'),('嘿嘿','女','励志班',19,'河南省郑州市'),('呵呵','男','加强班',20,'美国')；\n    ```\n  \n    \n---\n+ 创建teacher表\n  ![image-20220430170019572](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430170019572.png)\n  \n    ```javascript?linenums\n     create table teacher(\n     tid int primary key auto_increment,\n     tname varchar(5) null,\n     tsex char(2) not null,\n     tage int not null,\n     tphone char(11) unique\n     );\n    ```\n  \n+ 插入数据\n  ![image-20220430170030476](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430170030476.png)\n```javascript?linenums\ninsert into teacher(tname,tsex,tage,tphone)values('王','男',28,'15516055456'),('光','女',19,'16816055447'),('辉','男',35,'15516055555');\n```\n\n\n---\n+ 创建timeable\n\n![image-20220430170037869](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430170037869.png)\n```javascript?linenums\n create table timetable(\n kid int primary key auto_increment,\n kname varchar(50) unique,\n tid int,\n foreign key(tid) references teacher(tid)\n );\n```\n\n\n+ 插入数据\n ![image-20220430170046892](C:\\Users\\hui\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220430170046892.png)\n```javascript?linenums\ninsert into timetable(kname,tid)values('物理',1),('数学',2),('化学',3);\n```\n\n---\n+ 创建gradetable表\n\n![image-20220430170211238](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430170211238.png)\n\n```\ncreate table gradetable(\n     gid int primary key auto_increment,\n     grade int not null,\n     sid int,\n     kid int,\n     foreign key(sid) references student(sid),\n     foreign key(kid) references timetable(kid)\n);\n```\n\n+ 插入数据:\n  ![image-20220430170222388](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430170222388.png)\n\n```javascript?linenums\n insert into gradetable(grade,sid,kid)values(98,2,1),(93,3,2),(50,4,3);\n```\n\n\n---\n 总：![image-20220430170236623](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430170236623.png)\n","slug":"BookMark/安装配置/MySQL免安装版配置 dos基础命令创建MySQL Navicat编辑器破解--菜鸟小回","published":1,"date":"2022-07-25T05:51:39.000Z","updated":"2022-09-01T10:02:40.582Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cl7ptszoi000taba5h7ch27ax","content":"<h1><span id=\"mysql免安装版配置-dos基础命令创建mysql-navicat编辑器破解菜鸟小回\">MySQL免安装版配置 dos基础命令创建MySQL Navicat编辑器破解–菜鸟小回</span></h1><hr>\n<p>[toc]</p>\n<p><a href=\"https://pan.baidu.com/s/1UFhPSIWF2hSJotbjl1xZvg\">MySQL8.0.13免安装版</a></p>\n<hr>\n<h2><span id=\"1安装\">1.安装</span></h2><ol>\n<li>解压文件</li>\n<li>打开my.ini文件，设置你的安装路径。<ul>\n<li>我的安装路径为：D:\\mysql\\mysql-8.0.13-winx64</li>\n<li>设置mysql的安装目录：<br> basedir&#x3D;D:\\mysql\\mysql-8.0.13-winx64</li>\n<li>设置mysql数据库的数据的存放目录<br> datadir&#x3D;D:\\mysql\\mysql-8.0.13-winx64\\data<br> <img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430165913787.png\" alt=\"image-20220430165913787\"></li>\n</ul>\n</li>\n</ol>\n<ul>\n<li>如果没有my.ini自行创建，内容如下  <figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ini\"><span class=\"hljs-section\">[mysql]</span><br><span class=\"hljs-comment\">#设置mysql客户端默认字符集</span><br><span class=\"hljs-attr\">default-character-set</span>=utf8<br><span class=\"hljs-section\">[mysqld]</span><br><span class=\"hljs-comment\">#设置3306端口</span><br><span class=\"hljs-attr\">port</span>=<span class=\"hljs-number\">3306</span><br><span class=\"hljs-comment\"># 设置mysql的安装目录</span><br><span class=\"hljs-attr\">basedir</span>=D:\\mysql\\mysql-<span class=\"hljs-number\">8.0</span>.<span class=\"hljs-number\">13</span>-winx64<br><span class=\"hljs-comment\"># 设置mysql数据库的数据的存放目录</span><br><span class=\"hljs-attr\">datadir</span>=D:\\mysql\\mysql-<span class=\"hljs-number\">8.0</span>.<span class=\"hljs-number\">13</span>-winx64\\data<br><span class=\"hljs-comment\"># 允许最大连接数</span><br><span class=\"hljs-attr\">max_connections</span>=<span class=\"hljs-number\">200</span><br><span class=\"hljs-comment\"># 服务端使用的字符集默认为8比特编码的latin1字符集</span><br><span class=\"hljs-attr\">character-set-server</span>=utf8<br><span class=\"hljs-comment\"># 创建新表时将使用的默认存储引擎</span><br><span class=\"hljs-attr\">default-storage-engine</span>=INNODB<br></code></pre></td></tr></table></figure></li>\n</ul>\n<ol start=\"3\">\n<li><p>配置环境变量：</p>\n<ul>\n<li>右键此电脑-&gt;属性-&gt;高级系统设置-&gt;环境变量<br> <img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430165921872.png\" alt=\"image-20220430165921872\"></li>\n<li>新建-&gt;输入你的bin路径-&gt;应用</li>\n<li>我的bin路径：D:\\mysql\\mysql-8.0.13-winx64\\bin</li>\n<li><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430165931178.png\" alt=\"image-20220430165931178\"></li>\n<li><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430165936823.png\" alt=\"enter description here\"></li>\n</ul>\n</li>\n<li><p>以管理员身份运行cmd，进入到你的安装路径中，<br>  <code>d:</code><br>  <code>cd D:\\mysql\\mysql-8.0.13-winx64</code><br>  输入命令：<br> <code>bin\\mysqld --defaults-file=my.ini --initialize-insecure</code></p>\n</li>\n<li><p>安装mysql的服务<br>  <code>bin\\mysqld --install</code></p>\n</li>\n<li><p>进入bin文件夹。启动mysql服务<br>  <code>net start mysql</code>  </p>\n</li>\n<li><p>登录mysql：<br>  <code>mysql -uroot -p</code></p>\n</li>\n<li><p>查询用户名密码:<br> <code>select host,user,authentication_string from mysql.user;</code></p>\n</li>\n<li><p>如果root对应的authentication_string不是空值，把root对应的密码设置为空<br><code>use mysql; update user set authentication_string=&#39;&#39; where user=&#39;root&#39;</code></p>\n<ol start=\"11\">\n<li><pre><code class=\"hljs\">修改密码,后面引号root替换为你想要设置的密码，完成。\n</code></pre>\n<code>ALTER user &#39;root&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;root&#39;;</code></li>\n</ol>\n</li>\n</ol>\n<p>\t</p>\n<h2><span id=\"2使用\">2.使用</span></h2><ol>\n<li>登录,-u账号 -p密码<br> <code>mysql -uroot -p521521</code></li>\n<li>查看数据库：<br> <code>show databases;</code></li>\n<li>创建数据库:<br> <code>create database abc;</code><br> 应用创建：<br> <code>use abc;</code></li>\n<li>查看表：<br> <code>show tables;</code></li>\n<li>创建表: <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">create table student(<br> id int,<br> name varchar(4),<br> birthday date,<br> sex char(2)<br> );<br></code></pre></td></tr></table></figure></li>\n</ol>\n<ul>\n<li>加主键设置：alter table score add constraint pk_scid primary key(scid);</li>\n<li>加非空约束：alter table score modify column score double not null;</li>\n<li>加唯一约束：alter table score add constraint uk_score unique(score);</li>\n<li>加外键约束：alter table score add constraint fk_sid foreign key(sid) references student(sid);</li>\n</ul>\n<ol start=\"6\">\n<li>插入数据：<br> <code>insert into 表名 values(101,&#39;如花&#39;,&#39;2019-1-5&#39;,&#39;女&#39;);</code></li>\n<li>查询表中数据：<br> <code>select * from student;</code></li>\n<li>删除表<br> <code>drop table student;</code></li>\n<li>添加字段<br> <code>alter table 表名 add column 列名 类型 [first /after/before 列名];</code></li>\n<li>删除字段：<br><code>alter table 表名 drop column 列名</code></li>\n<li>表描述<br><code>desc student;</code></li>\n<li>数据库约束:<ul>\n<li>主键:<code>primary key</code></li>\n<li>自动增长:<code>auto_increment</code><br>  例:<code>tid int primary key auto_increment</code><br>  主键自增的列可以不用添加数据，数据库来维护唯一约束</li>\n<li>唯一约束:<code>unique</code></li>\n<li>非空约束:<code>not null</code></li>\n<li>外键约束:<code>foreign key</code><br>  例:<code>foreign key(tid) references teacher(tid)</code></li>\n<li>检查约束</li>\n</ul>\n</li>\n</ol>\n<hr>\n<ul>\n<li><p>创建student<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430170003320.png\" alt=\"image-20220430170003320\"></p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">create table student(<br>sid int primary key auto_increment,<br>sname varchar(5) not null default &#x27;张三&#x27;, <br>ssex char(2) not null,<br>sclassname char(5) not null,<br>sage int not null,<br>saddr varchar(100) not null<br>);<br></code></pre></td></tr></table></figure>\n\n\n<ul>\n<li>插入数据：<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430170011118.png\" alt=\"image-20220430170011118\">  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">insert into student(sname,ssex,sclassname,sage,saddr)values(&#x27;回宝旗&#x27;,&#x27;男&#x27;,&#x27;水浒班&#x27;,18,&#x27;河南省郑州市&#x27;),(&#x27;哈哈&#x27;,&#x27;女&#x27;,&#x27;国威班&#x27;,18,&#x27;河南省平顶山市&#x27;),(&#x27;嘿嘿&#x27;,&#x27;女&#x27;,&#x27;励志班&#x27;,19,&#x27;河南省郑州市&#x27;),(&#x27;呵呵&#x27;,&#x27;男&#x27;,&#x27;加强班&#x27;,20,&#x27;美国&#x27;)；<br></code></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n<hr>\n<ul>\n<li><p>创建teacher表<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430170019572.png\" alt=\"image-20220430170019572\"></p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">create table teacher(<br>tid int primary key auto_increment,<br>tname varchar(5) null,<br>tsex char(2) not null,<br>tage int not null,<br>tphone char(11) unique<br>);<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>插入数据<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430170030476.png\" alt=\"image-20220430170030476\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">insert into teacher(tname,tsex,tage,tphone)values(&#x27;王&#x27;,&#x27;男&#x27;,28,&#x27;15516055456&#x27;),(&#x27;光&#x27;,&#x27;女&#x27;,19,&#x27;16816055447&#x27;),(&#x27;辉&#x27;,&#x27;男&#x27;,35,&#x27;15516055555&#x27;);<br></code></pre></td></tr></table></figure></li>\n</ul>\n<hr>\n<ul>\n<li>创建timeable</li>\n</ul>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430170037869.png\" alt=\"image-20220430170037869\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">create table timetable(<br>kid int primary key auto_increment,<br>kname varchar(50) unique,<br>tid int,<br>foreign key(tid) references teacher(tid)<br>);<br></code></pre></td></tr></table></figure>\n\n\n<ul>\n<li>插入数据<br> <img src=\"C:\\Users\\hui\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220430170046892.png\" alt=\"image-20220430170046892\"><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">insert into timetable(kname,tid)values(&#x27;物理&#x27;,1),(&#x27;数学&#x27;,2),(&#x27;化学&#x27;,3);<br></code></pre></td></tr></table></figure></li>\n</ul>\n<hr>\n<ul>\n<li>创建gradetable表</li>\n</ul>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430170211238.png\" alt=\"image-20220430170211238\"></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">create</span> <span class=\"hljs-keyword\">table</span> gradetable(<br>     gid <span class=\"hljs-type\">int</span> <span class=\"hljs-keyword\">primary</span> key auto_increment,<br>     grade <span class=\"hljs-type\">int</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-keyword\">null</span>,<br>     sid <span class=\"hljs-type\">int</span>,<br>     kid <span class=\"hljs-type\">int</span>,<br>     <span class=\"hljs-keyword\">foreign</span> key(sid) <span class=\"hljs-keyword\">references</span> student(sid),<br>     <span class=\"hljs-keyword\">foreign</span> key(kid) <span class=\"hljs-keyword\">references</span> timetable(kid)<br>);<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>插入数据:<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430170222388.png\" alt=\"image-20220430170222388\"></li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">insert into gradetable(grade,sid,kid)values(98,2,1),(93,3,2),(50,4,3);<br></code></pre></td></tr></table></figure>\n\n\n<hr>\n<p> 总：<img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430170236623.png\" alt=\"image-20220430170236623\"></p>\n","site":{"data":{}},"wordcount":3384,"excerpt":"","more":"<h1 id=\"MySQL免安装版配置-dos基础命令创建MySQL-Navicat编辑器破解–菜鸟小回\"><a href=\"#MySQL免安装版配置-dos基础命令创建MySQL-Navicat编辑器破解–菜鸟小回\" class=\"headerlink\" title=\"MySQL免安装版配置 dos基础命令创建MySQL Navicat编辑器破解–菜鸟小回\"></a>MySQL免安装版配置 dos基础命令创建MySQL Navicat编辑器破解–菜鸟小回</h1><hr>\n<p>[toc]</p>\n<p><a href=\"https://pan.baidu.com/s/1UFhPSIWF2hSJotbjl1xZvg\">MySQL8.0.13免安装版</a></p>\n<hr>\n<h2 id=\"1-安装\"><a href=\"#1-安装\" class=\"headerlink\" title=\"1.安装\"></a>1.安装</h2><ol>\n<li>解压文件</li>\n<li>打开my.ini文件，设置你的安装路径。<ul>\n<li>我的安装路径为：D:\\mysql\\mysql-8.0.13-winx64</li>\n<li>设置mysql的安装目录：<br> basedir&#x3D;D:\\mysql\\mysql-8.0.13-winx64</li>\n<li>设置mysql数据库的数据的存放目录<br> datadir&#x3D;D:\\mysql\\mysql-8.0.13-winx64\\data<br> <img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430165913787.png\" alt=\"image-20220430165913787\"></li>\n</ul>\n</li>\n</ol>\n<ul>\n<li>如果没有my.ini自行创建，内容如下  <figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ini\"><span class=\"hljs-section\">[mysql]</span><br><span class=\"hljs-comment\">#设置mysql客户端默认字符集</span><br><span class=\"hljs-attr\">default-character-set</span>=utf8<br><span class=\"hljs-section\">[mysqld]</span><br><span class=\"hljs-comment\">#设置3306端口</span><br><span class=\"hljs-attr\">port</span>=<span class=\"hljs-number\">3306</span><br><span class=\"hljs-comment\"># 设置mysql的安装目录</span><br><span class=\"hljs-attr\">basedir</span>=D:\\mysql\\mysql-<span class=\"hljs-number\">8.0</span>.<span class=\"hljs-number\">13</span>-winx64<br><span class=\"hljs-comment\"># 设置mysql数据库的数据的存放目录</span><br><span class=\"hljs-attr\">datadir</span>=D:\\mysql\\mysql-<span class=\"hljs-number\">8.0</span>.<span class=\"hljs-number\">13</span>-winx64\\data<br><span class=\"hljs-comment\"># 允许最大连接数</span><br><span class=\"hljs-attr\">max_connections</span>=<span class=\"hljs-number\">200</span><br><span class=\"hljs-comment\"># 服务端使用的字符集默认为8比特编码的latin1字符集</span><br><span class=\"hljs-attr\">character-set-server</span>=utf8<br><span class=\"hljs-comment\"># 创建新表时将使用的默认存储引擎</span><br><span class=\"hljs-attr\">default-storage-engine</span>=INNODB<br></code></pre></td></tr></table></figure></li>\n</ul>\n<ol start=\"3\">\n<li><p>配置环境变量：</p>\n<ul>\n<li>右键此电脑-&gt;属性-&gt;高级系统设置-&gt;环境变量<br> <img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430165921872.png\" alt=\"image-20220430165921872\"></li>\n<li>新建-&gt;输入你的bin路径-&gt;应用</li>\n<li>我的bin路径：D:\\mysql\\mysql-8.0.13-winx64\\bin</li>\n<li><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430165931178.png\" alt=\"image-20220430165931178\"></li>\n<li><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430165936823.png\" alt=\"enter description here\"></li>\n</ul>\n</li>\n<li><p>以管理员身份运行cmd，进入到你的安装路径中，<br>  <code>d:</code><br>  <code>cd D:\\mysql\\mysql-8.0.13-winx64</code><br>  输入命令：<br> <code>bin\\mysqld --defaults-file=my.ini --initialize-insecure</code></p>\n</li>\n<li><p>安装mysql的服务<br>  <code>bin\\mysqld --install</code></p>\n</li>\n<li><p>进入bin文件夹。启动mysql服务<br>  <code>net start mysql</code>  </p>\n</li>\n<li><p>登录mysql：<br>  <code>mysql -uroot -p</code></p>\n</li>\n<li><p>查询用户名密码:<br> <code>select host,user,authentication_string from mysql.user;</code></p>\n</li>\n<li><p>如果root对应的authentication_string不是空值，把root对应的密码设置为空<br><code>use mysql; update user set authentication_string=&#39;&#39; where user=&#39;root&#39;</code></p>\n<ol start=\"11\">\n<li><pre><code>修改密码,后面引号root替换为你想要设置的密码，完成。\n</code></pre>\n<code>ALTER user &#39;root&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;root&#39;;</code></li>\n</ol>\n</li>\n</ol>\n<p>\t</p>\n<h2 id=\"2-使用\"><a href=\"#2-使用\" class=\"headerlink\" title=\"2.使用\"></a>2.使用</h2><ol>\n<li>登录,-u账号 -p密码<br> <code>mysql -uroot -p521521</code></li>\n<li>查看数据库：<br> <code>show databases;</code></li>\n<li>创建数据库:<br> <code>create database abc;</code><br> 应用创建：<br> <code>use abc;</code></li>\n<li>查看表：<br> <code>show tables;</code></li>\n<li>创建表: <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">create table student(<br> id int,<br> name varchar(4),<br> birthday date,<br> sex char(2)<br> );<br></code></pre></td></tr></table></figure></li>\n</ol>\n<ul>\n<li>加主键设置：alter table score add constraint pk_scid primary key(scid);</li>\n<li>加非空约束：alter table score modify column score double not null;</li>\n<li>加唯一约束：alter table score add constraint uk_score unique(score);</li>\n<li>加外键约束：alter table score add constraint fk_sid foreign key(sid) references student(sid);</li>\n</ul>\n<ol start=\"6\">\n<li>插入数据：<br> <code>insert into 表名 values(101,&#39;如花&#39;,&#39;2019-1-5&#39;,&#39;女&#39;);</code></li>\n<li>查询表中数据：<br> <code>select * from student;</code></li>\n<li>删除表<br> <code>drop table student;</code></li>\n<li>添加字段<br> <code>alter table 表名 add column 列名 类型 [first /after/before 列名];</code></li>\n<li>删除字段：<br><code>alter table 表名 drop column 列名</code></li>\n<li>表描述<br><code>desc student;</code></li>\n<li>数据库约束:<ul>\n<li>主键:<code>primary key</code></li>\n<li>自动增长:<code>auto_increment</code><br>  例:<code>tid int primary key auto_increment</code><br>  主键自增的列可以不用添加数据，数据库来维护唯一约束</li>\n<li>唯一约束:<code>unique</code></li>\n<li>非空约束:<code>not null</code></li>\n<li>外键约束:<code>foreign key</code><br>  例:<code>foreign key(tid) references teacher(tid)</code></li>\n<li>检查约束</li>\n</ul>\n</li>\n</ol>\n<hr>\n<ul>\n<li><p>创建student<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430170003320.png\" alt=\"image-20220430170003320\"></p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">create table student(<br>sid int primary key auto_increment,<br>sname varchar(5) not null default &#x27;张三&#x27;, <br>ssex char(2) not null,<br>sclassname char(5) not null,<br>sage int not null,<br>saddr varchar(100) not null<br>);<br></code></pre></td></tr></table></figure>\n\n\n<ul>\n<li>插入数据：<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430170011118.png\" alt=\"image-20220430170011118\">  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">insert into student(sname,ssex,sclassname,sage,saddr)values(&#x27;回宝旗&#x27;,&#x27;男&#x27;,&#x27;水浒班&#x27;,18,&#x27;河南省郑州市&#x27;),(&#x27;哈哈&#x27;,&#x27;女&#x27;,&#x27;国威班&#x27;,18,&#x27;河南省平顶山市&#x27;),(&#x27;嘿嘿&#x27;,&#x27;女&#x27;,&#x27;励志班&#x27;,19,&#x27;河南省郑州市&#x27;),(&#x27;呵呵&#x27;,&#x27;男&#x27;,&#x27;加强班&#x27;,20,&#x27;美国&#x27;)；<br></code></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n<hr>\n<ul>\n<li><p>创建teacher表<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430170019572.png\" alt=\"image-20220430170019572\"></p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">create table teacher(<br>tid int primary key auto_increment,<br>tname varchar(5) null,<br>tsex char(2) not null,<br>tage int not null,<br>tphone char(11) unique<br>);<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>插入数据<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430170030476.png\" alt=\"image-20220430170030476\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">insert into teacher(tname,tsex,tage,tphone)values(&#x27;王&#x27;,&#x27;男&#x27;,28,&#x27;15516055456&#x27;),(&#x27;光&#x27;,&#x27;女&#x27;,19,&#x27;16816055447&#x27;),(&#x27;辉&#x27;,&#x27;男&#x27;,35,&#x27;15516055555&#x27;);<br></code></pre></td></tr></table></figure></li>\n</ul>\n<hr>\n<ul>\n<li>创建timeable</li>\n</ul>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430170037869.png\" alt=\"image-20220430170037869\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">create table timetable(<br>kid int primary key auto_increment,<br>kname varchar(50) unique,<br>tid int,<br>foreign key(tid) references teacher(tid)<br>);<br></code></pre></td></tr></table></figure>\n\n\n<ul>\n<li>插入数据<br> <img src=\"C:\\Users\\hui\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220430170046892.png\" alt=\"image-20220430170046892\"><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">insert into timetable(kname,tid)values(&#x27;物理&#x27;,1),(&#x27;数学&#x27;,2),(&#x27;化学&#x27;,3);<br></code></pre></td></tr></table></figure></li>\n</ul>\n<hr>\n<ul>\n<li>创建gradetable表</li>\n</ul>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430170211238.png\" alt=\"image-20220430170211238\"></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">create</span> <span class=\"hljs-keyword\">table</span> gradetable(<br>     gid <span class=\"hljs-type\">int</span> <span class=\"hljs-keyword\">primary</span> key auto_increment,<br>     grade <span class=\"hljs-type\">int</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-keyword\">null</span>,<br>     sid <span class=\"hljs-type\">int</span>,<br>     kid <span class=\"hljs-type\">int</span>,<br>     <span class=\"hljs-keyword\">foreign</span> key(sid) <span class=\"hljs-keyword\">references</span> student(sid),<br>     <span class=\"hljs-keyword\">foreign</span> key(kid) <span class=\"hljs-keyword\">references</span> timetable(kid)<br>);<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>插入数据:<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430170222388.png\" alt=\"image-20220430170222388\"></li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">insert into gradetable(grade,sid,kid)values(98,2,1),(93,3,2),(50,4,3);<br></code></pre></td></tr></table></figure>\n\n\n<hr>\n<p> 总：<img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430170236623.png\" alt=\"image-20220430170236623\"></p>\n"},{"_content":" # Navicat破解\n\n---\n\n[toc]\n\n---\n\n## 一、navicat15破解\n\n1. 下载Navicat Premium\n    [官网](https://www.navicat.com.cn/)下载最新版本下载安装\n\n2. 网盘链接：[navicat安装包、破解、教程合一](https://alist.huijia.cf/hui/%E8%BD%AF%E4%BB%B6/Mysql/navicat%E5%AE%89%E8%A3%85%E5%8C%85%E3%80%81%E7%A0%B4%E8%A7%A3%E3%80%81%E6%95%99%E7%A8%8B%E5%90%88%E4%B8%80)\n    \n3. 激活Navicat Premium、先把Navicat安装好\n    然后把破解工具Navicat_Keygen_Patch解压， 以管理员身份运行\n    ![image-20220430171157524](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430171157524.png)\n    \n4. 点击patch 弹出窗口，找到navicat下载的目录选择navicat，点击打开\n    ![image-20220430171206669](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430171206669.png)\n\n5. 显示为下图就是破解成功了\n    ![image-20220430171220507](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430171220507.png)\n  + 5.1.点击Generate\n  + 5.2.出现序列码\n  + 5.3.点击Copy\n    ![image-20220430171232819](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430171232819.png)\n\n6. 然后打开navicat\n    ![image-20220430171242816](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430171242816.png)\n\n7. 第一次打开会提示注册和试用，由于作者是破解过了，我就不截图了，你们第一次打开的时候点击注册，然后把刚才copy的序列码复制进去，点击激活。\n    ![image-20220430171249770](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430171249770.png)\n\n8. 选择手动激活\n    ![image-20220430171257915](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430171257915.png)\n\n9. 然后会生成一大串请求码\n    ![image-20220430171305883](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430171305883.png)\n\n10. 复制请求码到注册机中的Request Code中，点击Activation Code下的generate，生成激活码\n\n    ![image-20220430171311917](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430171311917.png)\n\n+ 点击激活！！！\n\n## 二、navicat16无限试用\n\n1. 安装仍然去navicat官网\n2. 自动试用，会重新刷新14天试用资格\n\n![image-20220430171429279](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430171429279.png)\n","source":"_posts/BookMark/安装配置/Navicat破解.md","raw":" # Navicat破解\n\n---\n\n[toc]\n\n---\n\n## 一、navicat15破解\n\n1. 下载Navicat Premium\n    [官网](https://www.navicat.com.cn/)下载最新版本下载安装\n\n2. 网盘链接：[navicat安装包、破解、教程合一](https://alist.huijia.cf/hui/%E8%BD%AF%E4%BB%B6/Mysql/navicat%E5%AE%89%E8%A3%85%E5%8C%85%E3%80%81%E7%A0%B4%E8%A7%A3%E3%80%81%E6%95%99%E7%A8%8B%E5%90%88%E4%B8%80)\n    \n3. 激活Navicat Premium、先把Navicat安装好\n    然后把破解工具Navicat_Keygen_Patch解压， 以管理员身份运行\n    ![image-20220430171157524](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430171157524.png)\n    \n4. 点击patch 弹出窗口，找到navicat下载的目录选择navicat，点击打开\n    ![image-20220430171206669](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430171206669.png)\n\n5. 显示为下图就是破解成功了\n    ![image-20220430171220507](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430171220507.png)\n  + 5.1.点击Generate\n  + 5.2.出现序列码\n  + 5.3.点击Copy\n    ![image-20220430171232819](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430171232819.png)\n\n6. 然后打开navicat\n    ![image-20220430171242816](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430171242816.png)\n\n7. 第一次打开会提示注册和试用，由于作者是破解过了，我就不截图了，你们第一次打开的时候点击注册，然后把刚才copy的序列码复制进去，点击激活。\n    ![image-20220430171249770](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430171249770.png)\n\n8. 选择手动激活\n    ![image-20220430171257915](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430171257915.png)\n\n9. 然后会生成一大串请求码\n    ![image-20220430171305883](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430171305883.png)\n\n10. 复制请求码到注册机中的Request Code中，点击Activation Code下的generate，生成激活码\n\n    ![image-20220430171311917](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430171311917.png)\n\n+ 点击激活！！！\n\n## 二、navicat16无限试用\n\n1. 安装仍然去navicat官网\n2. 自动试用，会重新刷新14天试用资格\n\n![image-20220430171429279](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430171429279.png)\n","slug":"BookMark/安装配置/Navicat破解","published":1,"date":"2022-07-18T09:51:20.000Z","updated":"2022-09-01T10:02:40.502Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cl7ptszoi000waba506id9no5","content":"<h1><span id=\"navicat破解\">Navicat破解</span></h1><hr>\n<p>[toc]</p>\n<hr>\n<h2><span id=\"一-navicat15破解\">一、navicat15破解</span></h2><ol>\n<li><p>下载Navicat Premium<br> <a href=\"https://www.navicat.com.cn/\">官网</a>下载最新版本下载安装</p>\n</li>\n<li><p>网盘链接：<a href=\"https://alist.huijia.cf/hui/%E8%BD%AF%E4%BB%B6/Mysql/navicat%E5%AE%89%E8%A3%85%E5%8C%85%E3%80%81%E7%A0%B4%E8%A7%A3%E3%80%81%E6%95%99%E7%A8%8B%E5%90%88%E4%B8%80\">navicat安装包、破解、教程合一</a></p>\n</li>\n<li><p>激活Navicat Premium、先把Navicat安装好<br> 然后把破解工具Navicat_Keygen_Patch解压， 以管理员身份运行<br> <img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430171157524.png\" alt=\"image-20220430171157524\"></p>\n</li>\n<li><p>点击patch 弹出窗口，找到navicat下载的目录选择navicat，点击打开<br> <img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430171206669.png\" alt=\"image-20220430171206669\"></p>\n</li>\n<li><p>显示为下图就是破解成功了<br> <img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430171220507.png\" alt=\"image-20220430171220507\"></p>\n</li>\n</ol>\n<ul>\n<li>5.1.点击Generate</li>\n<li>5.2.出现序列码</li>\n<li>5.3.点击Copy<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430171232819.png\" alt=\"image-20220430171232819\"></li>\n</ul>\n<ol start=\"6\">\n<li><p>然后打开navicat<br> <img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430171242816.png\" alt=\"image-20220430171242816\"></p>\n</li>\n<li><p>第一次打开会提示注册和试用，由于作者是破解过了，我就不截图了，你们第一次打开的时候点击注册，然后把刚才copy的序列码复制进去，点击激活。<br> <img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430171249770.png\" alt=\"image-20220430171249770\"></p>\n</li>\n<li><p>选择手动激活<br> <img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430171257915.png\" alt=\"image-20220430171257915\"></p>\n</li>\n<li><p>然后会生成一大串请求码<br> <img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430171305883.png\" alt=\"image-20220430171305883\"></p>\n</li>\n<li><p>复制请求码到注册机中的Request Code中，点击Activation Code下的generate，生成激活码</p>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430171311917.png\" alt=\"image-20220430171311917\"></p>\n</li>\n</ol>\n<ul>\n<li>点击激活！！！</li>\n</ul>\n<h2><span id=\"二-navicat16无限试用\">二、navicat16无限试用</span></h2><ol>\n<li>安装仍然去navicat官网</li>\n<li>自动试用，会重新刷新14天试用资格</li>\n</ol>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430171429279.png\" alt=\"image-20220430171429279\"></p>\n","site":{"data":{}},"wordcount":436,"excerpt":"","more":"<h1 id=\"Navicat破解\"><a href=\"#Navicat破解\" class=\"headerlink\" title=\"Navicat破解\"></a>Navicat破解</h1><hr>\n<p>[toc]</p>\n<hr>\n<h2 id=\"一、navicat15破解\"><a href=\"#一、navicat15破解\" class=\"headerlink\" title=\"一、navicat15破解\"></a>一、navicat15破解</h2><ol>\n<li><p>下载Navicat Premium<br> <a href=\"https://www.navicat.com.cn/\">官网</a>下载最新版本下载安装</p>\n</li>\n<li><p>网盘链接：<a href=\"https://alist.huijia.cf/hui/%E8%BD%AF%E4%BB%B6/Mysql/navicat%E5%AE%89%E8%A3%85%E5%8C%85%E3%80%81%E7%A0%B4%E8%A7%A3%E3%80%81%E6%95%99%E7%A8%8B%E5%90%88%E4%B8%80\">navicat安装包、破解、教程合一</a></p>\n</li>\n<li><p>激活Navicat Premium、先把Navicat安装好<br> 然后把破解工具Navicat_Keygen_Patch解压， 以管理员身份运行<br> <img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430171157524.png\" alt=\"image-20220430171157524\"></p>\n</li>\n<li><p>点击patch 弹出窗口，找到navicat下载的目录选择navicat，点击打开<br> <img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430171206669.png\" alt=\"image-20220430171206669\"></p>\n</li>\n<li><p>显示为下图就是破解成功了<br> <img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430171220507.png\" alt=\"image-20220430171220507\"></p>\n</li>\n</ol>\n<ul>\n<li>5.1.点击Generate</li>\n<li>5.2.出现序列码</li>\n<li>5.3.点击Copy<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430171232819.png\" alt=\"image-20220430171232819\"></li>\n</ul>\n<ol start=\"6\">\n<li><p>然后打开navicat<br> <img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430171242816.png\" alt=\"image-20220430171242816\"></p>\n</li>\n<li><p>第一次打开会提示注册和试用，由于作者是破解过了，我就不截图了，你们第一次打开的时候点击注册，然后把刚才copy的序列码复制进去，点击激活。<br> <img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430171249770.png\" alt=\"image-20220430171249770\"></p>\n</li>\n<li><p>选择手动激活<br> <img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430171257915.png\" alt=\"image-20220430171257915\"></p>\n</li>\n<li><p>然后会生成一大串请求码<br> <img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430171305883.png\" alt=\"image-20220430171305883\"></p>\n</li>\n<li><p>复制请求码到注册机中的Request Code中，点击Activation Code下的generate，生成激活码</p>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430171311917.png\" alt=\"image-20220430171311917\"></p>\n</li>\n</ol>\n<ul>\n<li>点击激活！！！</li>\n</ul>\n<h2 id=\"二、navicat16无限试用\"><a href=\"#二、navicat16无限试用\" class=\"headerlink\" title=\"二、navicat16无限试用\"></a>二、navicat16无限试用</h2><ol>\n<li>安装仍然去navicat官网</li>\n<li>自动试用，会重新刷新14天试用资格</li>\n</ol>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430171429279.png\" alt=\"image-20220430171429279\"></p>\n"},{"_content":"# idea+JRebel配置springboot+mybatis plus项目热部署。（含xml无法自动部署 解决方案）\n\n---\n\n[toc]\n\n---\n\n本文参照文章地址：\n\n1. [【idea】JRebel mybatisPlus extension是JRebel热部署插件的扩展支持mybatis的xml文件热部署](https://www.cnblogs.com/xiaostudy/p/11890444.html)\n2. [在IDEA中安装配置并使用Jrebel热部署插件](https://www.cnblogs.com/fangts/p/13709977.html)\n\n---\n\n## 一、直接到idea插件库搜索`JRebel`,安装并重启idea\n![image-20220430164359993](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430164359993.png)\n\n---\n\n## 二、激活JRebel\n![image-20220430164408231](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430164408231.png)\n+ 激活步骤：\n\t 1. [生成UUID](https://www.guidgen.com/)\n\t 2. `https://jrebel.qekang.com/`后拼接上你生成的UUID填写至“1”处；\n\t 3. 在“2”处填写任意格式邮箱\n\t 4. 查看激活状态并更换为离线运行，至此已可以进行java项目的热部署测试。\n\t    ![image-20220430164413734](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430164413734.png)\n---\n\n## 三、mybatis plus的xml文件热部署\n1. 此时在项目java代码中已经可以实现自动部署，但如图我们的xml文件还无法自动部署。\n![image-20220430164419157](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430164419157.png)\n2. 解决：安装插件`JRebel mybatisPlus extension`并重启idea即可。\n ![image-20220430164433938](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430164433938.png)","source":"_posts/BookMark/安装配置/idea+jrebel配置springboot+mybatis plus项目热部署。（含xml无法自动部署 解决方案）.md","raw":"# idea+JRebel配置springboot+mybatis plus项目热部署。（含xml无法自动部署 解决方案）\n\n---\n\n[toc]\n\n---\n\n本文参照文章地址：\n\n1. [【idea】JRebel mybatisPlus extension是JRebel热部署插件的扩展支持mybatis的xml文件热部署](https://www.cnblogs.com/xiaostudy/p/11890444.html)\n2. [在IDEA中安装配置并使用Jrebel热部署插件](https://www.cnblogs.com/fangts/p/13709977.html)\n\n---\n\n## 一、直接到idea插件库搜索`JRebel`,安装并重启idea\n![image-20220430164359993](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430164359993.png)\n\n---\n\n## 二、激活JRebel\n![image-20220430164408231](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430164408231.png)\n+ 激活步骤：\n\t 1. [生成UUID](https://www.guidgen.com/)\n\t 2. `https://jrebel.qekang.com/`后拼接上你生成的UUID填写至“1”处；\n\t 3. 在“2”处填写任意格式邮箱\n\t 4. 查看激活状态并更换为离线运行，至此已可以进行java项目的热部署测试。\n\t    ![image-20220430164413734](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430164413734.png)\n---\n\n## 三、mybatis plus的xml文件热部署\n1. 此时在项目java代码中已经可以实现自动部署，但如图我们的xml文件还无法自动部署。\n![image-20220430164419157](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430164419157.png)\n2. 解决：安装插件`JRebel mybatisPlus extension`并重启idea即可。\n ![image-20220430164433938](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430164433938.png)","slug":"BookMark/安装配置/idea+jrebel配置springboot+mybatis plus项目热部署。（含xml无法自动部署 解决方案）","published":1,"date":"2022-07-18T09:51:17.000Z","updated":"2022-09-01T10:02:40.542Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cl7ptszoj000zaba5h8ykb1jm","content":"<h1><span id=\"ideajrebel配置springbootmybatis-plus项目热部署-含xml无法自动部署-解决方案\">idea+JRebel配置springboot+mybatis plus项目热部署。（含xml无法自动部署 解决方案）</span></h1><hr>\n<p>[toc]</p>\n<hr>\n<p>本文参照文章地址：</p>\n<ol>\n<li><a href=\"https://www.cnblogs.com/xiaostudy/p/11890444.html\">【idea】JRebel mybatisPlus extension是JRebel热部署插件的扩展支持mybatis的xml文件热部署</a></li>\n<li><a href=\"https://www.cnblogs.com/fangts/p/13709977.html\">在IDEA中安装配置并使用Jrebel热部署插件</a></li>\n</ol>\n<hr>\n<h2><span id=\"一-直接到idea插件库搜索jrebel安装并重启idea\">一、直接到idea插件库搜索<code>JRebel</code>,安装并重启idea</span></h2><p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430164359993.png\" alt=\"image-20220430164359993\"></p>\n<hr>\n<h2><span id=\"二-激活jrebel\">二、激活JRebel</span></h2><p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430164408231.png\" alt=\"image-20220430164408231\"></p>\n<ul>\n<li>激活步骤：<ol>\n<li><a href=\"https://www.guidgen.com/\">生成UUID</a></li>\n<li><code>https://jrebel.qekang.com/</code>后拼接上你生成的UUID填写至“1”处；</li>\n<li>在“2”处填写任意格式邮箱</li>\n<li>查看激活状态并更换为离线运行，至此已可以进行java项目的热部署测试。<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430164413734.png\" alt=\"image-20220430164413734\"></li>\n</ol>\n</li>\n</ul>\n<hr>\n<h2><span id=\"三-mybatis-plus的xml文件热部署\">三、mybatis plus的xml文件热部署</span></h2><ol>\n<li>此时在项目java代码中已经可以实现自动部署，但如图我们的xml文件还无法自动部署。<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430164419157.png\" alt=\"image-20220430164419157\"></li>\n<li>解决：安装插件<code>JRebel mybatisPlus extension</code>并重启idea即可。<br> <img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430164433938.png\" alt=\"image-20220430164433938\"></li>\n</ol>\n","site":{"data":{}},"wordcount":412,"excerpt":"","more":"<h1 id=\"idea-JRebel配置springboot-mybatis-plus项目热部署。（含xml无法自动部署-解决方案）\"><a href=\"#idea-JRebel配置springboot-mybatis-plus项目热部署。（含xml无法自动部署-解决方案）\" class=\"headerlink\" title=\"idea+JRebel配置springboot+mybatis plus项目热部署。（含xml无法自动部署 解决方案）\"></a>idea+JRebel配置springboot+mybatis plus项目热部署。（含xml无法自动部署 解决方案）</h1><hr>\n<p>[toc]</p>\n<hr>\n<p>本文参照文章地址：</p>\n<ol>\n<li><a href=\"https://www.cnblogs.com/xiaostudy/p/11890444.html\">【idea】JRebel mybatisPlus extension是JRebel热部署插件的扩展支持mybatis的xml文件热部署</a></li>\n<li><a href=\"https://www.cnblogs.com/fangts/p/13709977.html\">在IDEA中安装配置并使用Jrebel热部署插件</a></li>\n</ol>\n<hr>\n<h2 id=\"一、直接到idea插件库搜索JRebel-安装并重启idea\"><a href=\"#一、直接到idea插件库搜索JRebel-安装并重启idea\" class=\"headerlink\" title=\"一、直接到idea插件库搜索JRebel,安装并重启idea\"></a>一、直接到idea插件库搜索<code>JRebel</code>,安装并重启idea</h2><p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430164359993.png\" alt=\"image-20220430164359993\"></p>\n<hr>\n<h2 id=\"二、激活JRebel\"><a href=\"#二、激活JRebel\" class=\"headerlink\" title=\"二、激活JRebel\"></a>二、激活JRebel</h2><p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430164408231.png\" alt=\"image-20220430164408231\"></p>\n<ul>\n<li>激活步骤：<ol>\n<li><a href=\"https://www.guidgen.com/\">生成UUID</a></li>\n<li><code>https://jrebel.qekang.com/</code>后拼接上你生成的UUID填写至“1”处；</li>\n<li>在“2”处填写任意格式邮箱</li>\n<li>查看激活状态并更换为离线运行，至此已可以进行java项目的热部署测试。<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430164413734.png\" alt=\"image-20220430164413734\"></li>\n</ol>\n</li>\n</ul>\n<hr>\n<h2 id=\"三、mybatis-plus的xml文件热部署\"><a href=\"#三、mybatis-plus的xml文件热部署\" class=\"headerlink\" title=\"三、mybatis plus的xml文件热部署\"></a>三、mybatis plus的xml文件热部署</h2><ol>\n<li>此时在项目java代码中已经可以实现自动部署，但如图我们的xml文件还无法自动部署。<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430164419157.png\" alt=\"image-20220430164419157\"></li>\n<li>解决：安装插件<code>JRebel mybatisPlus extension</code>并重启idea即可。<br> <img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430164433938.png\" alt=\"image-20220430164433938\"></li>\n</ol>\n"},{"_content":"# Windows调取Bartender使用教程\n\n---\n\n[toc]\n---\n\n## 非首次安装\n\n### 一、在已安装目录中双击\"stop.vbs\"停止原有程序\n![image-20220720151256266](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720151256266.png)\n### 二、下载新的打印模板\"JavaBarTenderPrint.zip\"并解压\n![image-20220720151305465](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720151305465.png)\n### 三、替换原有\"model\"和\"project\"文件夹\n![image-20220720151314891](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720151314891.png)\n### 四、双击\"start.vbs\"启动程序\n![image-20220720151332385](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720151332385.png)\n\n## 首次安装\n### 一、复制解压压缩包JavaBarTenderPrint.zip到C盘根目录下：\n![image-20220720151340085](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720151340085.png)\n\n### 二、文件夹内容介绍\n+ jacob： 存放java-windows连接程序，以及需要dll（32&64bit）\n+ jdk：存放java运行环境安装包（32&64bit）\n+ model：存放Bartender打印模板\n+ project：存放java服务及项目日志\n+ start.vbs：启动服务\n+ stop.vbs：关闭服务\n ![image-20220720151406261](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720151406261.png)\n\n ### 三、jdk安装\n1. 进入“jdk”目录下，双击安装电脑对应位数jdk包\n2. 一直点击下一步保存，不要修改文件安装路径\n\n ### 四、jdk环境变量配置\n ### 方式一：右键文件以管理员形式运行 “jdk”目录下的init.bat（不成功请使用方式二）\n + 检验jdk配置是否成功\n + 打开运行\"win+R”->输入`cmd`回车\n    ![image-20220720151414639](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720151414639.png)\n  \n + 输入`java -version`和`javac`显示如下内容：\n    ![image-20220720151702965](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720151702965.png)\n ### 方式二：\n 1. 右键”我的电脑“->“属性”->“高级系统设置”\n      ![image-20220720152138943](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720152138943.png)\n   \n 2. “高级”->“环境变量”；找到系统变量的 ”Path” 双击，window10以下系统直接编辑内容\n    ![image-20220720152149510](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720152149510.png)\n  \n 3. 编辑环境变量页面 ”新建“ 填入已下内容，确定保存\nwindows10系统：` C:\\Program Files\\Java\\jdk1.8.0_261\\bin`\nwindows10以下系统：`;C:\\Program Files\\Java\\jdk1.8.0_261\\bin`\n\n![image-20220720152158054](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720152158054.png)\n4. 检验jdk配置是否成功\n + 打开运行\"win+R”->输入`cmd`回车\n    ![image-20220720152212129](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720152212129.png)\n  \n + 输入`java -version`和`javac`显示如下内容：\n    ![image-20220720152220868](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720152220868.png)\n\n### 五、复制jacob.dll文件到jdk目录\n+ 进入“jacob”目录-> 右键以管理员身份运行 “copy-jacob-dll.bat”文件\n ![image-20220720152229871](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720152229871.png)\n\n ### 六、启动java服务\n 1. 双击“JavaBarTenderPrint”目录下的start.vbs\n 2. 查看启动日志 在 C:\\JavaBarTenderPrint\\project\\info中查看\n ![image-20220720152244911](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720152244911.png)\n\n ### 七、设置开机自启\n 1. 打开运行\"win+R”->输入`shell:startup`回车 打开开机启动文件夹\n    ![image-20220720152419018](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720152419018.png)\n 2. 将“start.vbs”移动到开机启动文件夹\n ![image-20220720152428392](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720152428392.png)\n\n","source":"_posts/BookMark/安装配置/Windows调取Bartender使用教程.md","raw":"# Windows调取Bartender使用教程\n\n---\n\n[toc]\n---\n\n## 非首次安装\n\n### 一、在已安装目录中双击\"stop.vbs\"停止原有程序\n![image-20220720151256266](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720151256266.png)\n### 二、下载新的打印模板\"JavaBarTenderPrint.zip\"并解压\n![image-20220720151305465](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720151305465.png)\n### 三、替换原有\"model\"和\"project\"文件夹\n![image-20220720151314891](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720151314891.png)\n### 四、双击\"start.vbs\"启动程序\n![image-20220720151332385](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720151332385.png)\n\n## 首次安装\n### 一、复制解压压缩包JavaBarTenderPrint.zip到C盘根目录下：\n![image-20220720151340085](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720151340085.png)\n\n### 二、文件夹内容介绍\n+ jacob： 存放java-windows连接程序，以及需要dll（32&64bit）\n+ jdk：存放java运行环境安装包（32&64bit）\n+ model：存放Bartender打印模板\n+ project：存放java服务及项目日志\n+ start.vbs：启动服务\n+ stop.vbs：关闭服务\n ![image-20220720151406261](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720151406261.png)\n\n ### 三、jdk安装\n1. 进入“jdk”目录下，双击安装电脑对应位数jdk包\n2. 一直点击下一步保存，不要修改文件安装路径\n\n ### 四、jdk环境变量配置\n ### 方式一：右键文件以管理员形式运行 “jdk”目录下的init.bat（不成功请使用方式二）\n + 检验jdk配置是否成功\n + 打开运行\"win+R”->输入`cmd`回车\n    ![image-20220720151414639](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720151414639.png)\n  \n + 输入`java -version`和`javac`显示如下内容：\n    ![image-20220720151702965](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720151702965.png)\n ### 方式二：\n 1. 右键”我的电脑“->“属性”->“高级系统设置”\n      ![image-20220720152138943](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720152138943.png)\n   \n 2. “高级”->“环境变量”；找到系统变量的 ”Path” 双击，window10以下系统直接编辑内容\n    ![image-20220720152149510](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720152149510.png)\n  \n 3. 编辑环境变量页面 ”新建“ 填入已下内容，确定保存\nwindows10系统：` C:\\Program Files\\Java\\jdk1.8.0_261\\bin`\nwindows10以下系统：`;C:\\Program Files\\Java\\jdk1.8.0_261\\bin`\n\n![image-20220720152158054](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720152158054.png)\n4. 检验jdk配置是否成功\n + 打开运行\"win+R”->输入`cmd`回车\n    ![image-20220720152212129](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720152212129.png)\n  \n + 输入`java -version`和`javac`显示如下内容：\n    ![image-20220720152220868](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720152220868.png)\n\n### 五、复制jacob.dll文件到jdk目录\n+ 进入“jacob”目录-> 右键以管理员身份运行 “copy-jacob-dll.bat”文件\n ![image-20220720152229871](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720152229871.png)\n\n ### 六、启动java服务\n 1. 双击“JavaBarTenderPrint”目录下的start.vbs\n 2. 查看启动日志 在 C:\\JavaBarTenderPrint\\project\\info中查看\n ![image-20220720152244911](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720152244911.png)\n\n ### 七、设置开机自启\n 1. 打开运行\"win+R”->输入`shell:startup`回车 打开开机启动文件夹\n    ![image-20220720152419018](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720152419018.png)\n 2. 将“start.vbs”移动到开机启动文件夹\n ![image-20220720152428392](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720152428392.png)\n\n","slug":"BookMark/安装配置/Windows调取Bartender使用教程","published":1,"date":"2022-07-20T07:26:23.000Z","updated":"2022-09-01T10:02:40.520Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cl7ptszoj0011aba59j833uqn","content":"<h1><span id=\"windows调取bartender使用教程\">Windows调取Bartender使用教程</span></h1><hr>\n<h2><span id=\"toc\">[toc]</span></h2><h2><span id=\"非首次安装\">非首次安装</span></h2><h3><span id=\"一-在已安装目录中双击stopvbs停止原有程序\">一、在已安装目录中双击”stop.vbs”停止原有程序</span></h3><p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720151256266.png\" alt=\"image-20220720151256266\"></p>\n<h3><span id=\"二-下载新的打印模板javabartenderprintzip并解压\">二、下载新的打印模板”JavaBarTenderPrint.zip”并解压</span></h3><p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720151305465.png\" alt=\"image-20220720151305465\"></p>\n<h3><span id=\"三-替换原有model和project文件夹\">三、替换原有”model”和”project”文件夹</span></h3><p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720151314891.png\" alt=\"image-20220720151314891\"></p>\n<h3><span id=\"四-双击startvbs启动程序\">四、双击”start.vbs”启动程序</span></h3><p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720151332385.png\" alt=\"image-20220720151332385\"></p>\n<h2><span id=\"首次安装\">首次安装</span></h2><h3><span id=\"一-复制解压压缩包javabartenderprintzip到c盘根目录下\">一、复制解压压缩包JavaBarTenderPrint.zip到C盘根目录下：</span></h3><p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720151340085.png\" alt=\"image-20220720151340085\"></p>\n<h3><span id=\"二-文件夹内容介绍\">二、文件夹内容介绍</span></h3><ul>\n<li>jacob： 存放java-windows连接程序，以及需要dll（32&amp;64bit）</li>\n<li>jdk：存放java运行环境安装包（32&amp;64bit）</li>\n<li>model：存放Bartender打印模板</li>\n<li>project：存放java服务及项目日志</li>\n<li>start.vbs：启动服务</li>\n<li>stop.vbs：关闭服务<br> <img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720151406261.png\" alt=\"image-20220720151406261\"></li>\n</ul>\n<h3><span id=\"三-jdk安装\">三、jdk安装</span></h3><ol>\n<li>进入“jdk”目录下，双击安装电脑对应位数jdk包</li>\n<li>一直点击下一步保存，不要修改文件安装路径</li>\n</ol>\n<h3><span id=\"四-jdk环境变量配置\">四、jdk环境变量配置</span></h3><h3><span id=\"方式一右键文件以管理员形式运行-jdk目录下的initbat不成功请使用方式二\">方式一：右键文件以管理员形式运行 “jdk”目录下的init.bat（不成功请使用方式二）</span></h3><ul>\n<li><p>检验jdk配置是否成功</p>\n</li>\n<li><p>打开运行”win+R”-&gt;输入<code>cmd</code>回车<br> <img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720151414639.png\" alt=\"image-20220720151414639\"></p>\n</li>\n<li><p>输入<code>java -version</code>和<code>javac</code>显示如下内容：<br> <img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720151702965.png\" alt=\"image-20220720151702965\"></p>\n</li>\n</ul>\n<h3><span id=\"方式二\">方式二：</span></h3><ol>\n<li><p>右键”我的电脑“-&gt;“属性”-&gt;“高级系统设置”<br>  <img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720152138943.png\" alt=\"image-20220720152138943\"></p>\n</li>\n<li><p>“高级”-&gt;“环境变量”；找到系统变量的 ”Path” 双击，window10以下系统直接编辑内容<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720152149510.png\" alt=\"image-20220720152149510\"></p>\n</li>\n<li><p>编辑环境变量页面 ”新建“ 填入已下内容，确定保存<br>windows10系统：<code> C:\\Program Files\\Java\\jdk1.8.0_261\\bin</code><br>windows10以下系统：<code>;C:\\Program Files\\Java\\jdk1.8.0_261\\bin</code></p>\n</li>\n</ol>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720152158054.png\" alt=\"image-20220720152158054\"><br>4. 检验jdk配置是否成功</p>\n<ul>\n<li><p>打开运行”win+R”-&gt;输入<code>cmd</code>回车<br> <img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720152212129.png\" alt=\"image-20220720152212129\"></p>\n</li>\n<li><p>输入<code>java -version</code>和<code>javac</code>显示如下内容：<br> <img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720152220868.png\" alt=\"image-20220720152220868\"></p>\n</li>\n</ul>\n<h3><span id=\"五-复制jacobdll文件到jdk目录\">五、复制jacob.dll文件到jdk目录</span></h3><ul>\n<li>进入“jacob”目录-&gt; 右键以管理员身份运行 “copy-jacob-dll.bat”文件<br> <img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720152229871.png\" alt=\"image-20220720152229871\"></li>\n</ul>\n<h3><span id=\"六-启动java服务\">六、启动java服务</span></h3><ol>\n<li>双击“JavaBarTenderPrint”目录下的start.vbs</li>\n<li>查看启动日志 在 C:\\JavaBarTenderPrint\\project\\info中查看<br> <img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720152244911.png\" alt=\"image-20220720152244911\"></li>\n</ol>\n<h3><span id=\"七-设置开机自启\">七、设置开机自启</span></h3><ol>\n<li>打开运行”win+R”-&gt;输入<code>shell:startup</code>回车 打开开机启动文件夹<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720152419018.png\" alt=\"image-20220720152419018\"></li>\n<li>将“start.vbs”移动到开机启动文件夹<br> <img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720152428392.png\" alt=\"image-20220720152428392\"></li>\n</ol>\n","site":{"data":{}},"wordcount":1008,"excerpt":"","more":"<h1 id=\"Windows调取Bartender使用教程\"><a href=\"#Windows调取Bartender使用教程\" class=\"headerlink\" title=\"Windows调取Bartender使用教程\"></a>Windows调取Bartender使用教程</h1><hr>\n<h2 id=\"toc\"><a href=\"#toc\" class=\"headerlink\" title=\"[toc]\"></a>[toc]</h2><h2 id=\"非首次安装\"><a href=\"#非首次安装\" class=\"headerlink\" title=\"非首次安装\"></a>非首次安装</h2><h3 id=\"一、在已安装目录中双击”stop-vbs”停止原有程序\"><a href=\"#一、在已安装目录中双击”stop-vbs”停止原有程序\" class=\"headerlink\" title=\"一、在已安装目录中双击”stop.vbs”停止原有程序\"></a>一、在已安装目录中双击”stop.vbs”停止原有程序</h3><p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720151256266.png\" alt=\"image-20220720151256266\"></p>\n<h3 id=\"二、下载新的打印模板”JavaBarTenderPrint-zip”并解压\"><a href=\"#二、下载新的打印模板”JavaBarTenderPrint-zip”并解压\" class=\"headerlink\" title=\"二、下载新的打印模板”JavaBarTenderPrint.zip”并解压\"></a>二、下载新的打印模板”JavaBarTenderPrint.zip”并解压</h3><p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720151305465.png\" alt=\"image-20220720151305465\"></p>\n<h3 id=\"三、替换原有”model”和”project”文件夹\"><a href=\"#三、替换原有”model”和”project”文件夹\" class=\"headerlink\" title=\"三、替换原有”model”和”project”文件夹\"></a>三、替换原有”model”和”project”文件夹</h3><p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720151314891.png\" alt=\"image-20220720151314891\"></p>\n<h3 id=\"四、双击”start-vbs”启动程序\"><a href=\"#四、双击”start-vbs”启动程序\" class=\"headerlink\" title=\"四、双击”start.vbs”启动程序\"></a>四、双击”start.vbs”启动程序</h3><p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720151332385.png\" alt=\"image-20220720151332385\"></p>\n<h2 id=\"首次安装\"><a href=\"#首次安装\" class=\"headerlink\" title=\"首次安装\"></a>首次安装</h2><h3 id=\"一、复制解压压缩包JavaBarTenderPrint-zip到C盘根目录下：\"><a href=\"#一、复制解压压缩包JavaBarTenderPrint-zip到C盘根目录下：\" class=\"headerlink\" title=\"一、复制解压压缩包JavaBarTenderPrint.zip到C盘根目录下：\"></a>一、复制解压压缩包JavaBarTenderPrint.zip到C盘根目录下：</h3><p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720151340085.png\" alt=\"image-20220720151340085\"></p>\n<h3 id=\"二、文件夹内容介绍\"><a href=\"#二、文件夹内容介绍\" class=\"headerlink\" title=\"二、文件夹内容介绍\"></a>二、文件夹内容介绍</h3><ul>\n<li>jacob： 存放java-windows连接程序，以及需要dll（32&amp;64bit）</li>\n<li>jdk：存放java运行环境安装包（32&amp;64bit）</li>\n<li>model：存放Bartender打印模板</li>\n<li>project：存放java服务及项目日志</li>\n<li>start.vbs：启动服务</li>\n<li>stop.vbs：关闭服务<br> <img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720151406261.png\" alt=\"image-20220720151406261\"></li>\n</ul>\n<h3 id=\"三、jdk安装\"><a href=\"#三、jdk安装\" class=\"headerlink\" title=\"三、jdk安装\"></a>三、jdk安装</h3><ol>\n<li>进入“jdk”目录下，双击安装电脑对应位数jdk包</li>\n<li>一直点击下一步保存，不要修改文件安装路径</li>\n</ol>\n<h3 id=\"四、jdk环境变量配置\"><a href=\"#四、jdk环境变量配置\" class=\"headerlink\" title=\"四、jdk环境变量配置\"></a>四、jdk环境变量配置</h3><h3 id=\"方式一：右键文件以管理员形式运行-“jdk”目录下的init-bat（不成功请使用方式二）\"><a href=\"#方式一：右键文件以管理员形式运行-“jdk”目录下的init-bat（不成功请使用方式二）\" class=\"headerlink\" title=\"方式一：右键文件以管理员形式运行 “jdk”目录下的init.bat（不成功请使用方式二）\"></a>方式一：右键文件以管理员形式运行 “jdk”目录下的init.bat（不成功请使用方式二）</h3><ul>\n<li><p>检验jdk配置是否成功</p>\n</li>\n<li><p>打开运行”win+R”-&gt;输入<code>cmd</code>回车<br> <img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720151414639.png\" alt=\"image-20220720151414639\"></p>\n</li>\n<li><p>输入<code>java -version</code>和<code>javac</code>显示如下内容：<br> <img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720151702965.png\" alt=\"image-20220720151702965\"></p>\n</li>\n</ul>\n<h3 id=\"方式二：\"><a href=\"#方式二：\" class=\"headerlink\" title=\"方式二：\"></a>方式二：</h3><ol>\n<li><p>右键”我的电脑“-&gt;“属性”-&gt;“高级系统设置”<br>  <img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720152138943.png\" alt=\"image-20220720152138943\"></p>\n</li>\n<li><p>“高级”-&gt;“环境变量”；找到系统变量的 ”Path” 双击，window10以下系统直接编辑内容<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720152149510.png\" alt=\"image-20220720152149510\"></p>\n</li>\n<li><p>编辑环境变量页面 ”新建“ 填入已下内容，确定保存<br>windows10系统：<code> C:\\Program Files\\Java\\jdk1.8.0_261\\bin</code><br>windows10以下系统：<code>;C:\\Program Files\\Java\\jdk1.8.0_261\\bin</code></p>\n</li>\n</ol>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720152158054.png\" alt=\"image-20220720152158054\"><br>4. 检验jdk配置是否成功</p>\n<ul>\n<li><p>打开运行”win+R”-&gt;输入<code>cmd</code>回车<br> <img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720152212129.png\" alt=\"image-20220720152212129\"></p>\n</li>\n<li><p>输入<code>java -version</code>和<code>javac</code>显示如下内容：<br> <img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720152220868.png\" alt=\"image-20220720152220868\"></p>\n</li>\n</ul>\n<h3 id=\"五、复制jacob-dll文件到jdk目录\"><a href=\"#五、复制jacob-dll文件到jdk目录\" class=\"headerlink\" title=\"五、复制jacob.dll文件到jdk目录\"></a>五、复制jacob.dll文件到jdk目录</h3><ul>\n<li>进入“jacob”目录-&gt; 右键以管理员身份运行 “copy-jacob-dll.bat”文件<br> <img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720152229871.png\" alt=\"image-20220720152229871\"></li>\n</ul>\n<h3 id=\"六、启动java服务\"><a href=\"#六、启动java服务\" class=\"headerlink\" title=\"六、启动java服务\"></a>六、启动java服务</h3><ol>\n<li>双击“JavaBarTenderPrint”目录下的start.vbs</li>\n<li>查看启动日志 在 C:\\JavaBarTenderPrint\\project\\info中查看<br> <img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720152244911.png\" alt=\"image-20220720152244911\"></li>\n</ol>\n<h3 id=\"七、设置开机自启\"><a href=\"#七、设置开机自启\" class=\"headerlink\" title=\"七、设置开机自启\"></a>七、设置开机自启</h3><ol>\n<li>打开运行”win+R”-&gt;输入<code>shell:startup</code>回车 打开开机启动文件夹<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720152419018.png\" alt=\"image-20220720152419018\"></li>\n<li>将“start.vbs”移动到开机启动文件夹<br> <img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720152428392.png\" alt=\"image-20220720152428392\"></li>\n</ol>\n"},{"_content":"# typora-picgo-minio\n\n## Brew 安装：\n\n```\n/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n```\n\n+ 使用\n\n```\nbrew install git\nbrew install npm\nbrew install iterm\n```\n\n代码高亮提示\n\n```\n//提示\nbrew install zsh-autosuggestions\n\necho \"source /opt/homebrew/Cellar/zsh-autosuggestions/0.7.0/share/zsh-autosuggestions/zsh-autosuggestions.zsh\" >>~/.zshrc\n//高亮\nbrew install zsh-syntax-highlighting\n\necho \"source /opt/homebrew/Cellar/zsh-syntax-highlighting/0.7.1/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh\" >>~/.zshrc\n```\n\n```\n//忽略大小写\nautoload -Uz compinit && compinit\nzstyle ':completion:*' matcher-list 'm:{[:lower:][:upper:]}={[:upper:][:lower:]}' 'm:{[:lower:][:upper:]}={[:upper:][:lower:]} l:|=* r:|=*' 'm:{[:lower:][:upper:]}={[:upper:][:lower:]} l:|=* r:|=*' 'm:{[:lower:    ][:upper:]}={[:upper:][:lower:]} l:|=* r:|=*'\n```\n\n## rclone\n\n```\ncurl https://rclone.org/install.sh | sudo bash\nbrew install macfuse\n\nmkdir -p .config/rclone&wget -O .config/rclone/rclone.conf https://alist.huijia.cf/d/hui/config/linux/rclone.conf\n\nrclone mount ali: ali &\numount mac-ali\n```\n\n## picgo\n\n```\nnpm install picgo -g\npicgo install minio\nvim .picgo/config.json\n```\n\n+ config.json\n\n```\n{\n  \"picBed\": {\n    \"uploader\": \"minio\",\n    \"minio\": {\n      \"accessKey\": \"admin\",\n      \"baseDir\": \"\",\n      \"bucket\": \"img\",\n      \"customDomain\": \"https://minio.service.cf\",\n      \"endPoint\": \"minio.service.cf\",\n      \"isAutoArchive\": false,\n      \"port\": \"9000\",\n      \"sameNameFileProcessingMode\": \"跳过\",\n      \"secretKey\": \"HBQ521521cf*\",\n      \"useSSL\": false\n    }\n  },\n  \"picgoPlugins\": {\n    \"picgo-plugin-minio\": true,\n    \"picgo-plugin-gitee-uploader\": true\n  }\n}\n```\n\n## JDK\n\n1. 下载并安装安装包: [jdk11](https://alist.huijia.cf/d/hui/%E8%BD%AF%E4%BB%B6/mac/jdk-11.0.16.1_macos-aarch64_bin.dmg) [jdk17](https://alist.huijia.cf/d/hui/%E8%BD%AF%E4%BB%B6/mac/jdk-17_macos-aarch64_bin.dmg)\n\n2. 查看已安装jdk `cd  /Library/Java/JavaVirtualMachines && ls`\n\n   ![image-20220901135943190](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220901135943190.png)\n\n3. 配置环境变量\n\n   ```\n   vi .zshrc\n   export JAVA_11_HOME=\"$(/usr/libexec/java_home -v 11)\"\n   export JAVA_17_HOME=\"$(/usr/libexec/java_home -v 17)\"\n   #默认jdk11\n   export JAVA_HOME=$JAVA_11_HOME\n   source ~/.zshrc\n   ```\n\n4. 配置自动切换\n\n   ```\n   #alias命令动态切换JDK版本\n   alias jdk11=\"export JAVA_HOME=$JAVA_11_HOME\"\n   alias jdk17='export JAVA_HOME=$JAVA_17_HOME'\n   ```\n\n5. 使用命令切换jdk版本`jdk11`或者`jdk17`\n\n   ![image-20220901140954487](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220901140954487.png)\n\n## 快捷键\n\nc+h 隐藏\n\nc+m 最小化\n\nc+n 新建\n\nc+o+c 复制路径\n\n内置键盘配置：\n\n![image-20220727114814557](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220727114814557.png)\n\n外接键盘设置：\n\n![image-20220727114758227](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220727114758227.png)\n\n \n\n# 代理\n\n## 代理http\n\nexport http_proxy=\"socks5://127.0.0.1:1080\"\n\n## 代理https\n\nexport https_proxy=\"socks5://127.0.0.1:1080\"\n\n## 代理所有协议，其中包括ftp等\n\nexport ALL_PROXY=\"socks5://127.0.0.1:7891\"\n\ncurl -vv https://www.google.com\n\n```shell\necho 'eval \"$(/opt/homebrew/bin/brew shellenv)\"' >> ~/.bash_profile\neval \"$(/opt/homebrew/bin/brew shellenv)\"\n```\n\n\n\n","source":"_posts/BookMark/安装配置/mac.md","raw":"# typora-picgo-minio\n\n## Brew 安装：\n\n```\n/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n```\n\n+ 使用\n\n```\nbrew install git\nbrew install npm\nbrew install iterm\n```\n\n代码高亮提示\n\n```\n//提示\nbrew install zsh-autosuggestions\n\necho \"source /opt/homebrew/Cellar/zsh-autosuggestions/0.7.0/share/zsh-autosuggestions/zsh-autosuggestions.zsh\" >>~/.zshrc\n//高亮\nbrew install zsh-syntax-highlighting\n\necho \"source /opt/homebrew/Cellar/zsh-syntax-highlighting/0.7.1/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh\" >>~/.zshrc\n```\n\n```\n//忽略大小写\nautoload -Uz compinit && compinit\nzstyle ':completion:*' matcher-list 'm:{[:lower:][:upper:]}={[:upper:][:lower:]}' 'm:{[:lower:][:upper:]}={[:upper:][:lower:]} l:|=* r:|=*' 'm:{[:lower:][:upper:]}={[:upper:][:lower:]} l:|=* r:|=*' 'm:{[:lower:    ][:upper:]}={[:upper:][:lower:]} l:|=* r:|=*'\n```\n\n## rclone\n\n```\ncurl https://rclone.org/install.sh | sudo bash\nbrew install macfuse\n\nmkdir -p .config/rclone&wget -O .config/rclone/rclone.conf https://alist.huijia.cf/d/hui/config/linux/rclone.conf\n\nrclone mount ali: ali &\numount mac-ali\n```\n\n## picgo\n\n```\nnpm install picgo -g\npicgo install minio\nvim .picgo/config.json\n```\n\n+ config.json\n\n```\n{\n  \"picBed\": {\n    \"uploader\": \"minio\",\n    \"minio\": {\n      \"accessKey\": \"admin\",\n      \"baseDir\": \"\",\n      \"bucket\": \"img\",\n      \"customDomain\": \"https://minio.service.cf\",\n      \"endPoint\": \"minio.service.cf\",\n      \"isAutoArchive\": false,\n      \"port\": \"9000\",\n      \"sameNameFileProcessingMode\": \"跳过\",\n      \"secretKey\": \"HBQ521521cf*\",\n      \"useSSL\": false\n    }\n  },\n  \"picgoPlugins\": {\n    \"picgo-plugin-minio\": true,\n    \"picgo-plugin-gitee-uploader\": true\n  }\n}\n```\n\n## JDK\n\n1. 下载并安装安装包: [jdk11](https://alist.huijia.cf/d/hui/%E8%BD%AF%E4%BB%B6/mac/jdk-11.0.16.1_macos-aarch64_bin.dmg) [jdk17](https://alist.huijia.cf/d/hui/%E8%BD%AF%E4%BB%B6/mac/jdk-17_macos-aarch64_bin.dmg)\n\n2. 查看已安装jdk `cd  /Library/Java/JavaVirtualMachines && ls`\n\n   ![image-20220901135943190](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220901135943190.png)\n\n3. 配置环境变量\n\n   ```\n   vi .zshrc\n   export JAVA_11_HOME=\"$(/usr/libexec/java_home -v 11)\"\n   export JAVA_17_HOME=\"$(/usr/libexec/java_home -v 17)\"\n   #默认jdk11\n   export JAVA_HOME=$JAVA_11_HOME\n   source ~/.zshrc\n   ```\n\n4. 配置自动切换\n\n   ```\n   #alias命令动态切换JDK版本\n   alias jdk11=\"export JAVA_HOME=$JAVA_11_HOME\"\n   alias jdk17='export JAVA_HOME=$JAVA_17_HOME'\n   ```\n\n5. 使用命令切换jdk版本`jdk11`或者`jdk17`\n\n   ![image-20220901140954487](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220901140954487.png)\n\n## 快捷键\n\nc+h 隐藏\n\nc+m 最小化\n\nc+n 新建\n\nc+o+c 复制路径\n\n内置键盘配置：\n\n![image-20220727114814557](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220727114814557.png)\n\n外接键盘设置：\n\n![image-20220727114758227](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220727114758227.png)\n\n \n\n# 代理\n\n## 代理http\n\nexport http_proxy=\"socks5://127.0.0.1:1080\"\n\n## 代理https\n\nexport https_proxy=\"socks5://127.0.0.1:1080\"\n\n## 代理所有协议，其中包括ftp等\n\nexport ALL_PROXY=\"socks5://127.0.0.1:7891\"\n\ncurl -vv https://www.google.com\n\n```shell\necho 'eval \"$(/opt/homebrew/bin/brew shellenv)\"' >> ~/.bash_profile\neval \"$(/opt/homebrew/bin/brew shellenv)\"\n```\n\n\n\n","slug":"BookMark/安装配置/mac","published":1,"date":"2022-07-25T10:25:59.871Z","updated":"2022-09-06T03:48:28.734Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cl7ptszoj0014aba5306f2ncu","content":"<h1><span id=\"typora-picgo-minio\">typora-picgo-minio</span></h1><h2><span id=\"brew-安装\">Brew 安装：</span></h2><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\"><span class=\"hljs-regexp\">/bin/</span>bash -c <span class=\"hljs-string\">&quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)&quot;</span><br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>使用</li>\n</ul>\n<figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mipsasm\"><span class=\"hljs-keyword\">brew </span><span class=\"hljs-keyword\">install </span>git<br><span class=\"hljs-keyword\">brew </span><span class=\"hljs-keyword\">install </span>npm<br><span class=\"hljs-keyword\">brew </span><span class=\"hljs-keyword\">install </span>iterm<br></code></pre></td></tr></table></figure>\n\n<p>代码高亮提示</p>\n<figure class=\"highlight jboss-cli\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs jboss-cli\"><span class=\"hljs-string\">//</span>提示<br>brew install zsh-autosuggestions<br><br><span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">&quot;source /opt/homebrew/Cellar/zsh-autosuggestions/0.7.0/share/zsh-autosuggestions/zsh-autosuggestions.zsh&quot;</span> &gt;&gt;~<span class=\"hljs-string\">/.zshrc</span><br><span class=\"hljs-string\">//</span>高亮<br>brew install zsh-syntax-highlighting<br><br><span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">&quot;source /opt/homebrew/Cellar/zsh-syntax-highlighting/0.7.1/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh&quot;</span> &gt;&gt;~<span class=\"hljs-string\">/.zshrc</span><br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight inform7\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs inform7\">//忽略大小写<br>autoload -Uz compinit &amp;&amp; compinit<br>zstyle &#x27;:completion:*&#x27; matcher-list &#x27;m:&#123;<span class=\"hljs-comment\">[:lower:]</span><span class=\"hljs-comment\">[:upper:]</span>&#125;=&#123;<span class=\"hljs-comment\">[:upper:]</span><span class=\"hljs-comment\">[:lower:]</span>&#125;&#x27; &#x27;m:&#123;<span class=\"hljs-comment\">[:lower:]</span><span class=\"hljs-comment\">[:upper:]</span>&#125;=&#123;<span class=\"hljs-comment\">[:upper:]</span><span class=\"hljs-comment\">[:lower:]</span>&#125; l:|=* r:|=*&#x27; &#x27;m:&#123;<span class=\"hljs-comment\">[:lower:]</span><span class=\"hljs-comment\">[:upper:]</span>&#125;=&#123;<span class=\"hljs-comment\">[:upper:]</span><span class=\"hljs-comment\">[:lower:]</span>&#125; l:|=* r:|=*&#x27; &#x27;m:&#123;<span class=\"hljs-comment\">[:lower:    ]</span><span class=\"hljs-comment\">[:upper:]</span>&#125;=&#123;<span class=\"hljs-comment\">[:upper:]</span><span class=\"hljs-comment\">[:lower:]</span>&#125; l:|=* r:|=*&#x27;<br></code></pre></td></tr></table></figure>\n\n<h2><span id=\"rclone\">rclone</span></h2><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\">curl https:<span class=\"hljs-regexp\">//</span>rclone.org/install.sh | sudo bash<br>brew install macfuse<br><br>mkdir -p .config<span class=\"hljs-regexp\">/rclone&amp;wget -O .config/</span>rclone<span class=\"hljs-regexp\">/rclone.conf https:/</span><span class=\"hljs-regexp\">/alist.huijia.cf/</span>d<span class=\"hljs-regexp\">/hui/</span>config<span class=\"hljs-regexp\">/linux/</span>rclone.conf<br><br>rclone mount ali: ali &amp;<br>umount mac-ali<br></code></pre></td></tr></table></figure>\n\n<h2><span id=\"picgo\">picgo</span></h2><figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cmake\">npm <span class=\"hljs-keyword\">install</span> picgo -g<br>picgo <span class=\"hljs-keyword\">install</span> minio<br>vim .picgo/config.json<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>config.json</li>\n</ul>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs json\"><span class=\"hljs-punctuation\">&#123;</span><br>  <span class=\"hljs-attr\">&quot;picBed&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">&#123;</span><br>    <span class=\"hljs-attr\">&quot;uploader&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;minio&quot;</span><span class=\"hljs-punctuation\">,</span><br>    <span class=\"hljs-attr\">&quot;minio&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">&#123;</span><br>      <span class=\"hljs-attr\">&quot;accessKey&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;admin&quot;</span><span class=\"hljs-punctuation\">,</span><br>      <span class=\"hljs-attr\">&quot;baseDir&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;&quot;</span><span class=\"hljs-punctuation\">,</span><br>      <span class=\"hljs-attr\">&quot;bucket&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;img&quot;</span><span class=\"hljs-punctuation\">,</span><br>      <span class=\"hljs-attr\">&quot;customDomain&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;https://minio.service.cf&quot;</span><span class=\"hljs-punctuation\">,</span><br>      <span class=\"hljs-attr\">&quot;endPoint&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;minio.service.cf&quot;</span><span class=\"hljs-punctuation\">,</span><br>      <span class=\"hljs-attr\">&quot;isAutoArchive&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-literal\"><span class=\"hljs-keyword\">false</span></span><span class=\"hljs-punctuation\">,</span><br>      <span class=\"hljs-attr\">&quot;port&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;9000&quot;</span><span class=\"hljs-punctuation\">,</span><br>      <span class=\"hljs-attr\">&quot;sameNameFileProcessingMode&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;跳过&quot;</span><span class=\"hljs-punctuation\">,</span><br>      <span class=\"hljs-attr\">&quot;secretKey&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;HBQ521521cf*&quot;</span><span class=\"hljs-punctuation\">,</span><br>      <span class=\"hljs-attr\">&quot;useSSL&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-literal\"><span class=\"hljs-keyword\">false</span></span><br>    <span class=\"hljs-punctuation\">&#125;</span><br>  <span class=\"hljs-punctuation\">&#125;</span><span class=\"hljs-punctuation\">,</span><br>  <span class=\"hljs-attr\">&quot;picgoPlugins&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">&#123;</span><br>    <span class=\"hljs-attr\">&quot;picgo-plugin-minio&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-literal\"><span class=\"hljs-keyword\">true</span></span><span class=\"hljs-punctuation\">,</span><br>    <span class=\"hljs-attr\">&quot;picgo-plugin-gitee-uploader&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-literal\"><span class=\"hljs-keyword\">true</span></span><br>  <span class=\"hljs-punctuation\">&#125;</span><br><span class=\"hljs-punctuation\">&#125;</span><br></code></pre></td></tr></table></figure>\n\n<h2><span id=\"jdk\">JDK</span></h2><ol>\n<li><p>下载并安装安装包: <a href=\"https://alist.huijia.cf/d/hui/%E8%BD%AF%E4%BB%B6/mac/jdk-11.0.16.1_macos-aarch64_bin.dmg\">jdk11</a> <a href=\"https://alist.huijia.cf/d/hui/%E8%BD%AF%E4%BB%B6/mac/jdk-17_macos-aarch64_bin.dmg\">jdk17</a></p>\n</li>\n<li><p>查看已安装jdk <code>cd  /Library/Java/JavaVirtualMachines &amp;&amp; ls</code></p>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220901135943190.png\" alt=\"image-20220901135943190\"></p>\n</li>\n<li><p>配置环境变量</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\">vi .zshrc<br><span class=\"hljs-built_in\">export</span> <span class=\"hljs-attribute\">JAVA_11_HOME</span>=<span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">$(/usr/libexec/java_home -v 11)</span>&quot;</span><br><span class=\"hljs-built_in\">export</span> <span class=\"hljs-attribute\">JAVA_17_HOME</span>=<span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">$(/usr/libexec/java_home -v 17)</span>&quot;</span><br><span class=\"hljs-comment\">#默认jdk11</span><br><span class=\"hljs-built_in\">export</span> <span class=\"hljs-attribute\">JAVA_HOME</span>=<span class=\"hljs-variable\">$JAVA_11_HOME</span><br>source ~/.zshrc<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>配置自动切换</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\">#alias命令动态切换JDK版本</span><br><span class=\"hljs-built_in\">alias</span> jdk11=<span class=\"hljs-string\">&quot;export JAVA_HOME=<span class=\"hljs-variable\">$JAVA_11_HOME</span>&quot;</span><br><span class=\"hljs-built_in\">alias</span> jdk17=<span class=\"hljs-string\">&#x27;export JAVA_HOME=$JAVA_17_HOME&#x27;</span><br></code></pre></td></tr></table></figure>\n</li>\n<li><p>使用命令切换jdk版本<code>jdk11</code>或者<code>jdk17</code></p>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220901140954487.png\" alt=\"image-20220901140954487\"></p>\n</li>\n</ol>\n<h2><span id=\"快捷键\">快捷键</span></h2><p>c+h 隐藏</p>\n<p>c+m 最小化</p>\n<p>c+n 新建</p>\n<p>c+o+c 复制路径</p>\n<p>内置键盘配置：</p>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220727114814557.png\" alt=\"image-20220727114814557\"></p>\n<p>外接键盘设置：</p>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220727114758227.png\" alt=\"image-20220727114758227\"></p>\n<h1><span id=\"代理\">代理</span></h1><h2><span id=\"代理http\">代理http</span></h2><p>export http_proxy&#x3D;”socks5:&#x2F;&#x2F;127.0.0.1:1080”</p>\n<h2><span id=\"代理https\">代理https</span></h2><p>export https_proxy&#x3D;”socks5:&#x2F;&#x2F;127.0.0.1:1080”</p>\n<h2><span id=\"代理所有协议其中包括ftp等\">代理所有协议，其中包括ftp等</span></h2><p>export ALL_PROXY&#x3D;”socks5:&#x2F;&#x2F;127.0.0.1:7891”</p>\n<p>curl -vv <a href=\"https://www.google.com/\">https://www.google.com</a></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">echo &#x27;eval &quot;$(/opt/homebrew/bin/brew shellenv)&quot;&#x27; &gt;&gt; ~/.bash_profile<br>eval &quot;$(/opt/homebrew/bin/brew shellenv)&quot;<br></code></pre></td></tr></table></figure>\n\n\n\n","site":{"data":{}},"wordcount":2763,"excerpt":"","more":"<h1 id=\"typora-picgo-minio\"><a href=\"#typora-picgo-minio\" class=\"headerlink\" title=\"typora-picgo-minio\"></a>typora-picgo-minio</h1><h2 id=\"Brew-安装：\"><a href=\"#Brew-安装：\" class=\"headerlink\" title=\"Brew 安装：\"></a>Brew 安装：</h2><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\"><span class=\"hljs-regexp\">/bin/</span>bash -c <span class=\"hljs-string\">&quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)&quot;</span><br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>使用</li>\n</ul>\n<figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mipsasm\"><span class=\"hljs-keyword\">brew </span><span class=\"hljs-keyword\">install </span>git<br><span class=\"hljs-keyword\">brew </span><span class=\"hljs-keyword\">install </span>npm<br><span class=\"hljs-keyword\">brew </span><span class=\"hljs-keyword\">install </span>iterm<br></code></pre></td></tr></table></figure>\n\n<p>代码高亮提示</p>\n<figure class=\"highlight jboss-cli\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs jboss-cli\"><span class=\"hljs-string\">//</span>提示<br>brew install zsh-autosuggestions<br><br><span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">&quot;source /opt/homebrew/Cellar/zsh-autosuggestions/0.7.0/share/zsh-autosuggestions/zsh-autosuggestions.zsh&quot;</span> &gt;&gt;~<span class=\"hljs-string\">/.zshrc</span><br><span class=\"hljs-string\">//</span>高亮<br>brew install zsh-syntax-highlighting<br><br><span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">&quot;source /opt/homebrew/Cellar/zsh-syntax-highlighting/0.7.1/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh&quot;</span> &gt;&gt;~<span class=\"hljs-string\">/.zshrc</span><br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight inform7\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs inform7\">//忽略大小写<br>autoload -Uz compinit &amp;&amp; compinit<br>zstyle &#x27;:completion:*&#x27; matcher-list &#x27;m:&#123;<span class=\"hljs-comment\">[:lower:]</span><span class=\"hljs-comment\">[:upper:]</span>&#125;=&#123;<span class=\"hljs-comment\">[:upper:]</span><span class=\"hljs-comment\">[:lower:]</span>&#125;&#x27; &#x27;m:&#123;<span class=\"hljs-comment\">[:lower:]</span><span class=\"hljs-comment\">[:upper:]</span>&#125;=&#123;<span class=\"hljs-comment\">[:upper:]</span><span class=\"hljs-comment\">[:lower:]</span>&#125; l:|=* r:|=*&#x27; &#x27;m:&#123;<span class=\"hljs-comment\">[:lower:]</span><span class=\"hljs-comment\">[:upper:]</span>&#125;=&#123;<span class=\"hljs-comment\">[:upper:]</span><span class=\"hljs-comment\">[:lower:]</span>&#125; l:|=* r:|=*&#x27; &#x27;m:&#123;<span class=\"hljs-comment\">[:lower:    ]</span><span class=\"hljs-comment\">[:upper:]</span>&#125;=&#123;<span class=\"hljs-comment\">[:upper:]</span><span class=\"hljs-comment\">[:lower:]</span>&#125; l:|=* r:|=*&#x27;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"rclone\"><a href=\"#rclone\" class=\"headerlink\" title=\"rclone\"></a>rclone</h2><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\">curl https:<span class=\"hljs-regexp\">//</span>rclone.org/install.sh | sudo bash<br>brew install macfuse<br><br>mkdir -p .config<span class=\"hljs-regexp\">/rclone&amp;wget -O .config/</span>rclone<span class=\"hljs-regexp\">/rclone.conf https:/</span><span class=\"hljs-regexp\">/alist.huijia.cf/</span>d<span class=\"hljs-regexp\">/hui/</span>config<span class=\"hljs-regexp\">/linux/</span>rclone.conf<br><br>rclone mount ali: ali &amp;<br>umount mac-ali<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"picgo\"><a href=\"#picgo\" class=\"headerlink\" title=\"picgo\"></a>picgo</h2><figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cmake\">npm <span class=\"hljs-keyword\">install</span> picgo -g<br>picgo <span class=\"hljs-keyword\">install</span> minio<br>vim .picgo/config.json<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>config.json</li>\n</ul>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs json\"><span class=\"hljs-punctuation\">&#123;</span><br>  <span class=\"hljs-attr\">&quot;picBed&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">&#123;</span><br>    <span class=\"hljs-attr\">&quot;uploader&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;minio&quot;</span><span class=\"hljs-punctuation\">,</span><br>    <span class=\"hljs-attr\">&quot;minio&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">&#123;</span><br>      <span class=\"hljs-attr\">&quot;accessKey&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;admin&quot;</span><span class=\"hljs-punctuation\">,</span><br>      <span class=\"hljs-attr\">&quot;baseDir&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;&quot;</span><span class=\"hljs-punctuation\">,</span><br>      <span class=\"hljs-attr\">&quot;bucket&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;img&quot;</span><span class=\"hljs-punctuation\">,</span><br>      <span class=\"hljs-attr\">&quot;customDomain&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;https://minio.service.cf&quot;</span><span class=\"hljs-punctuation\">,</span><br>      <span class=\"hljs-attr\">&quot;endPoint&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;minio.service.cf&quot;</span><span class=\"hljs-punctuation\">,</span><br>      <span class=\"hljs-attr\">&quot;isAutoArchive&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-literal\"><span class=\"hljs-keyword\">false</span></span><span class=\"hljs-punctuation\">,</span><br>      <span class=\"hljs-attr\">&quot;port&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;9000&quot;</span><span class=\"hljs-punctuation\">,</span><br>      <span class=\"hljs-attr\">&quot;sameNameFileProcessingMode&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;跳过&quot;</span><span class=\"hljs-punctuation\">,</span><br>      <span class=\"hljs-attr\">&quot;secretKey&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;HBQ521521cf*&quot;</span><span class=\"hljs-punctuation\">,</span><br>      <span class=\"hljs-attr\">&quot;useSSL&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-literal\"><span class=\"hljs-keyword\">false</span></span><br>    <span class=\"hljs-punctuation\">&#125;</span><br>  <span class=\"hljs-punctuation\">&#125;</span><span class=\"hljs-punctuation\">,</span><br>  <span class=\"hljs-attr\">&quot;picgoPlugins&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">&#123;</span><br>    <span class=\"hljs-attr\">&quot;picgo-plugin-minio&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-literal\"><span class=\"hljs-keyword\">true</span></span><span class=\"hljs-punctuation\">,</span><br>    <span class=\"hljs-attr\">&quot;picgo-plugin-gitee-uploader&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-literal\"><span class=\"hljs-keyword\">true</span></span><br>  <span class=\"hljs-punctuation\">&#125;</span><br><span class=\"hljs-punctuation\">&#125;</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"JDK\"><a href=\"#JDK\" class=\"headerlink\" title=\"JDK\"></a>JDK</h2><ol>\n<li><p>下载并安装安装包: <a href=\"https://alist.huijia.cf/d/hui/%E8%BD%AF%E4%BB%B6/mac/jdk-11.0.16.1_macos-aarch64_bin.dmg\">jdk11</a> <a href=\"https://alist.huijia.cf/d/hui/%E8%BD%AF%E4%BB%B6/mac/jdk-17_macos-aarch64_bin.dmg\">jdk17</a></p>\n</li>\n<li><p>查看已安装jdk <code>cd  /Library/Java/JavaVirtualMachines &amp;&amp; ls</code></p>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220901135943190.png\" alt=\"image-20220901135943190\"></p>\n</li>\n<li><p>配置环境变量</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\">vi .zshrc<br><span class=\"hljs-built_in\">export</span> <span class=\"hljs-attribute\">JAVA_11_HOME</span>=<span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">$(/usr/libexec/java_home -v 11)</span>&quot;</span><br><span class=\"hljs-built_in\">export</span> <span class=\"hljs-attribute\">JAVA_17_HOME</span>=<span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">$(/usr/libexec/java_home -v 17)</span>&quot;</span><br><span class=\"hljs-comment\">#默认jdk11</span><br><span class=\"hljs-built_in\">export</span> <span class=\"hljs-attribute\">JAVA_HOME</span>=<span class=\"hljs-variable\">$JAVA_11_HOME</span><br>source ~/.zshrc<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>配置自动切换</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\">#alias命令动态切换JDK版本</span><br><span class=\"hljs-built_in\">alias</span> jdk11=<span class=\"hljs-string\">&quot;export JAVA_HOME=<span class=\"hljs-variable\">$JAVA_11_HOME</span>&quot;</span><br><span class=\"hljs-built_in\">alias</span> jdk17=<span class=\"hljs-string\">&#x27;export JAVA_HOME=$JAVA_17_HOME&#x27;</span><br></code></pre></td></tr></table></figure>\n</li>\n<li><p>使用命令切换jdk版本<code>jdk11</code>或者<code>jdk17</code></p>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220901140954487.png\" alt=\"image-20220901140954487\"></p>\n</li>\n</ol>\n<h2 id=\"快捷键\"><a href=\"#快捷键\" class=\"headerlink\" title=\"快捷键\"></a>快捷键</h2><p>c+h 隐藏</p>\n<p>c+m 最小化</p>\n<p>c+n 新建</p>\n<p>c+o+c 复制路径</p>\n<p>内置键盘配置：</p>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220727114814557.png\" alt=\"image-20220727114814557\"></p>\n<p>外接键盘设置：</p>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220727114758227.png\" alt=\"image-20220727114758227\"></p>\n<h1 id=\"代理\"><a href=\"#代理\" class=\"headerlink\" title=\"代理\"></a>代理</h1><h2 id=\"代理http\"><a href=\"#代理http\" class=\"headerlink\" title=\"代理http\"></a>代理http</h2><p>export http_proxy&#x3D;”socks5:&#x2F;&#x2F;127.0.0.1:1080”</p>\n<h2 id=\"代理https\"><a href=\"#代理https\" class=\"headerlink\" title=\"代理https\"></a>代理https</h2><p>export https_proxy&#x3D;”socks5:&#x2F;&#x2F;127.0.0.1:1080”</p>\n<h2 id=\"代理所有协议，其中包括ftp等\"><a href=\"#代理所有协议，其中包括ftp等\" class=\"headerlink\" title=\"代理所有协议，其中包括ftp等\"></a>代理所有协议，其中包括ftp等</h2><p>export ALL_PROXY&#x3D;”socks5:&#x2F;&#x2F;127.0.0.1:7891”</p>\n<p>curl -vv <a href=\"https://www.google.com/\">https://www.google.com</a></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">echo &#x27;eval &quot;$(/opt/homebrew/bin/brew shellenv)&quot;&#x27; &gt;&gt; ~/.bash_profile<br>eval &quot;$(/opt/homebrew/bin/brew shellenv)&quot;<br></code></pre></td></tr></table></figure>\n\n\n\n"},{"_content":"# windows安装mysql5.7\n## 一、下载mysql安装包\n[下载地址](https://downloads.mysql.com/archives/community/)\n![image-20220509173918892](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509173918892.png)\n\n## 二、解压到任意盘并重命名文件夹\n![image-20220509173930499](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509173930499.png)\n## 三、配置环境变量\n变量名：`MYSQL_HOME`\n变量值：`Z:\\MySQL\\mysql-5.7.29`\npath里添加：`%MYSQL_HOME%\\bin`\n![image-20220509173939042](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509173939042.png)\n![image-20220509173948602](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509173948602.png)\n\n## 四、创建目录和配置文件\n+ 在mysql-5.7.29目录下创建“data”文件夹和“my.ini”文件\n![image-20220509173959974](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509173959974.png)\n+ 编辑“my.ini”文件内容如下（注意修改basedir，datadir的路径为你的解压盘符目录）\n ```javascript?linenums\n[mysqld]\nport=3306\ncharacter_set_server=utf8\nbasedir=Z:\\MySQL\\mysql-5.7.29\ndatadir=Z:\\MySQL\\mysql-5.7.29\\data\nserver-id=1\nsql_mode=NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION\nlower_case_table_names=1\ninnodb_file_per_table = 1\nlog_timestamps=SYSTEM\n\nlog-error\t= error.log\nslow_query_log = 1\nslow_query_log_file = slow.log\nlong_query_time = 5\nlog-bin = binlog\nbinlog_format = row\nexpire_logs_days = 15\nlog_bin_trust_function_creators = 1\n\nmax_allowed_packet = 32M\nbinlog_cache_size = 4M\nsort_buffer_size = 2M\nread_buffer_size = 4M\njoin_buffer_size = 4M\ntmp_table_size = 96M\nmax_heap_table_size = 96M\nlower_case_table_names=1\ninnodb_file_per_table = 1\n\n\n[client]   \ndefault-character-set=utf8\n ```\n## 五、初始化数据库\n ```javascript?linenums\n// 管理员打开cmd命令，到bin目录下\ncd Z:\\MySQL\\mysql-5.7.29\\bin\n//初始化\nmysqld --initialize-insecure\n ```\n+ 完成后data文件夹内会产生很多文件\n![image-20220509174011124](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509174011124.png)\n+ 可能报错找不到\"MSVCR120.dll\"\n![image-20220509174029462](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509174029462.png)\n[下载安装即可解决](https://www.microsoft.com/zh-CN/download/details.aspx?id=40784)\n\n## 六、注册并启动mysql服务\n```javascript?linenums\n//cmd命令继续执行\nmysqld –install\n//启动mysql服务\nnet start mysql\n```\n![image-20220509174037248](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509174037248.png)\n\n## 七、登录mysql并修改密码\n```javascript?linenums\n//登录mysql\nmysql -uroot\n//修改密码\nalter user 'root'@'localhost' identified by '你的密码'；\n //配置root用户远程连接。（无此需求可以不执行）\n GRANT ALL PRIVILEGES ON *.* TO 'ROOT'@'%' IDENTIFIED BY 'HBQ521521CF*' WITH GRANT OPTION;\n //刷新权限\n flush privileges;\n```\n![image-20220509174045490](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509174045490.png)\n## 八、重新连接数据库或使用navicat连接\n`mysql -uroot -p你的新密码`\n![image-20220509174053979](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509174053979.png)\n![image-20220509174101579](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509174101579.png)","source":"_posts/BookMark/安装配置/windows安装mysql5.7.md","raw":"# windows安装mysql5.7\n## 一、下载mysql安装包\n[下载地址](https://downloads.mysql.com/archives/community/)\n![image-20220509173918892](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509173918892.png)\n\n## 二、解压到任意盘并重命名文件夹\n![image-20220509173930499](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509173930499.png)\n## 三、配置环境变量\n变量名：`MYSQL_HOME`\n变量值：`Z:\\MySQL\\mysql-5.7.29`\npath里添加：`%MYSQL_HOME%\\bin`\n![image-20220509173939042](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509173939042.png)\n![image-20220509173948602](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509173948602.png)\n\n## 四、创建目录和配置文件\n+ 在mysql-5.7.29目录下创建“data”文件夹和“my.ini”文件\n![image-20220509173959974](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509173959974.png)\n+ 编辑“my.ini”文件内容如下（注意修改basedir，datadir的路径为你的解压盘符目录）\n ```javascript?linenums\n[mysqld]\nport=3306\ncharacter_set_server=utf8\nbasedir=Z:\\MySQL\\mysql-5.7.29\ndatadir=Z:\\MySQL\\mysql-5.7.29\\data\nserver-id=1\nsql_mode=NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION\nlower_case_table_names=1\ninnodb_file_per_table = 1\nlog_timestamps=SYSTEM\n\nlog-error\t= error.log\nslow_query_log = 1\nslow_query_log_file = slow.log\nlong_query_time = 5\nlog-bin = binlog\nbinlog_format = row\nexpire_logs_days = 15\nlog_bin_trust_function_creators = 1\n\nmax_allowed_packet = 32M\nbinlog_cache_size = 4M\nsort_buffer_size = 2M\nread_buffer_size = 4M\njoin_buffer_size = 4M\ntmp_table_size = 96M\nmax_heap_table_size = 96M\nlower_case_table_names=1\ninnodb_file_per_table = 1\n\n\n[client]   \ndefault-character-set=utf8\n ```\n## 五、初始化数据库\n ```javascript?linenums\n// 管理员打开cmd命令，到bin目录下\ncd Z:\\MySQL\\mysql-5.7.29\\bin\n//初始化\nmysqld --initialize-insecure\n ```\n+ 完成后data文件夹内会产生很多文件\n![image-20220509174011124](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509174011124.png)\n+ 可能报错找不到\"MSVCR120.dll\"\n![image-20220509174029462](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509174029462.png)\n[下载安装即可解决](https://www.microsoft.com/zh-CN/download/details.aspx?id=40784)\n\n## 六、注册并启动mysql服务\n```javascript?linenums\n//cmd命令继续执行\nmysqld –install\n//启动mysql服务\nnet start mysql\n```\n![image-20220509174037248](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509174037248.png)\n\n## 七、登录mysql并修改密码\n```javascript?linenums\n//登录mysql\nmysql -uroot\n//修改密码\nalter user 'root'@'localhost' identified by '你的密码'；\n //配置root用户远程连接。（无此需求可以不执行）\n GRANT ALL PRIVILEGES ON *.* TO 'ROOT'@'%' IDENTIFIED BY 'HBQ521521CF*' WITH GRANT OPTION;\n //刷新权限\n flush privileges;\n```\n![image-20220509174045490](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509174045490.png)\n## 八、重新连接数据库或使用navicat连接\n`mysql -uroot -p你的新密码`\n![image-20220509174053979](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509174053979.png)\n![image-20220509174101579](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509174101579.png)","slug":"BookMark/安装配置/windows安装mysql5.7","published":1,"date":"2022-07-18T09:51:19.000Z","updated":"2022-09-01T10:02:40.491Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cl7ptszoj0015aba5febk64w3","content":"<h1><span id=\"windows安装mysql57\">windows安装mysql5.7</span></h1><h2><span id=\"一-下载mysql安装包\">一、下载mysql安装包</span></h2><p><a href=\"https://downloads.mysql.com/archives/community/\">下载地址</a><br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509173918892.png\" alt=\"image-20220509173918892\"></p>\n<h2><span id=\"二-解压到任意盘并重命名文件夹\">二、解压到任意盘并重命名文件夹</span></h2><p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509173930499.png\" alt=\"image-20220509173930499\"></p>\n<h2><span id=\"三-配置环境变量\">三、配置环境变量</span></h2><p>变量名：<code>MYSQL_HOME</code><br>变量值：<code>Z:\\MySQL\\mysql-5.7.29</code><br>path里添加：<code>%MYSQL_HOME%\\bin</code><br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509173939042.png\" alt=\"image-20220509173939042\"><br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509173948602.png\" alt=\"image-20220509173948602\"></p>\n<h2><span id=\"四-创建目录和配置文件\">四、创建目录和配置文件</span></h2><ul>\n<li>在mysql-5.7.29目录下创建“data”文件夹和“my.ini”文件<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509173959974.png\" alt=\"image-20220509173959974\"></li>\n<li>编辑“my.ini”文件内容如下（注意修改basedir，datadir的路径为你的解压盘符目录） <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">[mysqld]<br>port=3306<br>character_set_server=utf8<br>basedir=Z:\\MySQL\\mysql-5.7.29<br>datadir=Z:\\MySQL\\mysql-5.7.29\\data<br>server-id=1<br>sql_mode=NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION<br>lower_case_table_names=1<br>innodb_file_per_table = 1<br>log_timestamps=SYSTEM<br><br>log-error\t= error.log<br>slow_query_log = 1<br>slow_query_log_file = slow.log<br>long_query_time = 5<br>log-bin = binlog<br>binlog_format = row<br>expire_logs_days = 15<br>log_bin_trust_function_creators = 1<br><br>max_allowed_packet = 32M<br>binlog_cache_size = 4M<br>sort_buffer_size = 2M<br>read_buffer_size = 4M<br>join_buffer_size = 4M<br>tmp_table_size = 96M<br>max_heap_table_size = 96M<br>lower_case_table_names=1<br>innodb_file_per_table = 1<br><br><br>[client]   <br>default-character-set=utf8<br></code></pre></td></tr></table></figure></li>\n</ul>\n<h2><span id=\"五-初始化数据库\">五、初始化数据库</span></h2> <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">// 管理员打开cmd命令，到bin目录下<br>cd Z:\\MySQL\\mysql-5.7.29\\bin<br>//初始化<br>mysqld --initialize-insecure<br></code></pre></td></tr></table></figure>\n<ul>\n<li>完成后data文件夹内会产生很多文件<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509174011124.png\" alt=\"image-20220509174011124\"></li>\n<li>可能报错找不到”MSVCR120.dll”<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509174029462.png\" alt=\"image-20220509174029462\"><br><a href=\"https://www.microsoft.com/zh-CN/download/details.aspx?id=40784\">下载安装即可解决</a></li>\n</ul>\n<h2><span id=\"六-注册并启动mysql服务\">六、注册并启动mysql服务</span></h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">//cmd命令继续执行<br>mysqld –install<br>//启动mysql服务<br>net start mysql<br></code></pre></td></tr></table></figure>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509174037248.png\" alt=\"image-20220509174037248\"></p>\n<h2><span id=\"七-登录mysql并修改密码\">七、登录mysql并修改密码</span></h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">//登录mysql<br>mysql -uroot<br>//修改密码<br>alter user &#x27;root&#x27;@&#x27;localhost&#x27; identified by &#x27;你的密码&#x27;；<br> //配置root用户远程连接。（无此需求可以不执行）<br> GRANT ALL PRIVILEGES ON *.* TO &#x27;ROOT&#x27;@&#x27;%&#x27; IDENTIFIED BY &#x27;HBQ521521CF*&#x27; WITH GRANT OPTION;<br> //刷新权限<br> flush privileges;<br></code></pre></td></tr></table></figure>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509174045490.png\" alt=\"image-20220509174045490\"></p>\n<h2><span id=\"八-重新连接数据库或使用navicat连接\">八、重新连接数据库或使用navicat连接</span></h2><p><code>mysql -uroot -p你的新密码</code><br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509174053979.png\" alt=\"image-20220509174053979\"><br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509174101579.png\" alt=\"image-20220509174101579\"></p>\n","site":{"data":{}},"wordcount":1416,"excerpt":"","more":"<h1 id=\"windows安装mysql5-7\"><a href=\"#windows安装mysql5-7\" class=\"headerlink\" title=\"windows安装mysql5.7\"></a>windows安装mysql5.7</h1><h2 id=\"一、下载mysql安装包\"><a href=\"#一、下载mysql安装包\" class=\"headerlink\" title=\"一、下载mysql安装包\"></a>一、下载mysql安装包</h2><p><a href=\"https://downloads.mysql.com/archives/community/\">下载地址</a><br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509173918892.png\" alt=\"image-20220509173918892\"></p>\n<h2 id=\"二、解压到任意盘并重命名文件夹\"><a href=\"#二、解压到任意盘并重命名文件夹\" class=\"headerlink\" title=\"二、解压到任意盘并重命名文件夹\"></a>二、解压到任意盘并重命名文件夹</h2><p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509173930499.png\" alt=\"image-20220509173930499\"></p>\n<h2 id=\"三、配置环境变量\"><a href=\"#三、配置环境变量\" class=\"headerlink\" title=\"三、配置环境变量\"></a>三、配置环境变量</h2><p>变量名：<code>MYSQL_HOME</code><br>变量值：<code>Z:\\MySQL\\mysql-5.7.29</code><br>path里添加：<code>%MYSQL_HOME%\\bin</code><br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509173939042.png\" alt=\"image-20220509173939042\"><br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509173948602.png\" alt=\"image-20220509173948602\"></p>\n<h2 id=\"四、创建目录和配置文件\"><a href=\"#四、创建目录和配置文件\" class=\"headerlink\" title=\"四、创建目录和配置文件\"></a>四、创建目录和配置文件</h2><ul>\n<li>在mysql-5.7.29目录下创建“data”文件夹和“my.ini”文件<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509173959974.png\" alt=\"image-20220509173959974\"></li>\n<li>编辑“my.ini”文件内容如下（注意修改basedir，datadir的路径为你的解压盘符目录） <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">[mysqld]<br>port=3306<br>character_set_server=utf8<br>basedir=Z:\\MySQL\\mysql-5.7.29<br>datadir=Z:\\MySQL\\mysql-5.7.29\\data<br>server-id=1<br>sql_mode=NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION<br>lower_case_table_names=1<br>innodb_file_per_table = 1<br>log_timestamps=SYSTEM<br><br>log-error\t= error.log<br>slow_query_log = 1<br>slow_query_log_file = slow.log<br>long_query_time = 5<br>log-bin = binlog<br>binlog_format = row<br>expire_logs_days = 15<br>log_bin_trust_function_creators = 1<br><br>max_allowed_packet = 32M<br>binlog_cache_size = 4M<br>sort_buffer_size = 2M<br>read_buffer_size = 4M<br>join_buffer_size = 4M<br>tmp_table_size = 96M<br>max_heap_table_size = 96M<br>lower_case_table_names=1<br>innodb_file_per_table = 1<br><br><br>[client]   <br>default-character-set=utf8<br></code></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"五、初始化数据库\"><a href=\"#五、初始化数据库\" class=\"headerlink\" title=\"五、初始化数据库\"></a>五、初始化数据库</h2> <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">// 管理员打开cmd命令，到bin目录下<br>cd Z:\\MySQL\\mysql-5.7.29\\bin<br>//初始化<br>mysqld --initialize-insecure<br></code></pre></td></tr></table></figure>\n<ul>\n<li>完成后data文件夹内会产生很多文件<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509174011124.png\" alt=\"image-20220509174011124\"></li>\n<li>可能报错找不到”MSVCR120.dll”<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509174029462.png\" alt=\"image-20220509174029462\"><br><a href=\"https://www.microsoft.com/zh-CN/download/details.aspx?id=40784\">下载安装即可解决</a></li>\n</ul>\n<h2 id=\"六、注册并启动mysql服务\"><a href=\"#六、注册并启动mysql服务\" class=\"headerlink\" title=\"六、注册并启动mysql服务\"></a>六、注册并启动mysql服务</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">//cmd命令继续执行<br>mysqld –install<br>//启动mysql服务<br>net start mysql<br></code></pre></td></tr></table></figure>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509174037248.png\" alt=\"image-20220509174037248\"></p>\n<h2 id=\"七、登录mysql并修改密码\"><a href=\"#七、登录mysql并修改密码\" class=\"headerlink\" title=\"七、登录mysql并修改密码\"></a>七、登录mysql并修改密码</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">//登录mysql<br>mysql -uroot<br>//修改密码<br>alter user &#x27;root&#x27;@&#x27;localhost&#x27; identified by &#x27;你的密码&#x27;；<br> //配置root用户远程连接。（无此需求可以不执行）<br> GRANT ALL PRIVILEGES ON *.* TO &#x27;ROOT&#x27;@&#x27;%&#x27; IDENTIFIED BY &#x27;HBQ521521CF*&#x27; WITH GRANT OPTION;<br> //刷新权限<br> flush privileges;<br></code></pre></td></tr></table></figure>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509174045490.png\" alt=\"image-20220509174045490\"></p>\n<h2 id=\"八、重新连接数据库或使用navicat连接\"><a href=\"#八、重新连接数据库或使用navicat连接\" class=\"headerlink\" title=\"八、重新连接数据库或使用navicat连接\"></a>八、重新连接数据库或使用navicat连接</h2><p><code>mysql -uroot -p你的新密码</code><br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509174053979.png\" alt=\"image-20220509174053979\"><br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509174101579.png\" alt=\"image-20220509174101579\"></p>\n"},{"_content":"# 使用nginx一分钟配置一个文件服务器（附：阿里oss文件服务使用、fastDFS文件服务使用）\n\n---\n\n[toc]\n\n---\n+ 前言：作为一名Java工程师，文件服务用的也不少。从最早的fastDFS轻量级图片服务器到第三方如阿里OSS；七牛云存储都用过。 新公司里一方面没有linux服务器，无法搭建fastDFS文件服务器。当然也没有打算买第三方存储。所以，之前使用过的文件服务器都无效。\n+ 新的考虑：在windows上搭建文件服务器\n+ 解决：nginx作为文件服务器，指定目录存放文件。利用java文件流写入指定文件并返回文件路径。\n---\n## 一、配置nginx\n1. 打开nginx配置目录，找到nginx.config文件编辑\n```javascript?linenums\nlocation /file {\n\talias Z:\\file/; \n\t#如果目录在download下则强制浏览器下载\n\tif ($request_filename ~* ^.*?\\/download\\/.*$){\n\t\tadd_header Content-Disposition: 'attachment;';\n\t}\n\tautoindex on;\n}\n```\n\n![image-20220430160035229](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430160035229.png)\n\n ## 二、在所配置路径上放入一个文件。重启nginx尝试访问文件服务器\n +  重启nginx\n +  浏览器访问`http://localhost:80/file/`，实际访问地址按照自己配置路径访问\n +  ![image-20220430160102331](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430160102331.png)\n+  看到如下目录，文件服务器配置完成\n  ![image-20220430160237103](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430160237103.png)\n\n---\n\n ## 三、附加Java上传文件并返回文件访问路径（Spring Boot）\n 1. yml配置`nginxFilePath: Z:\\file/`\n![image-20220430160252681](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430160252681.png)\n```javascript?linenums\n//Controller 其中modelName是想将文件放入的文件夹（不存在时自动生成）\n@PostMapping(\"/uploadToNginx\")\npublic String uploadToNginx(@RequestParam(\"file\") MultipartFile file,String modelName) {\n\tif (file==null){\n\t\treturn \"文件上传失败，请重新选择文件\";\n\t}\n\treturn fileManageService.uploadToNginx(file,modelName);\n}\n//Service\nString uploadToNginx(MultipartFile file, String modelName);\n//ServiceImpl\n@Override\n    public String uploadToNginx(MultipartFile file, String modelName)  {\n        try {\n            String path=modelName+ \"/\"+ IdUtil.simpleUUID() +\"-\"+file.getOriginalFilename();\n            File test = new File(nginxFilePath+path);\n            if (!test.exists()){\n                test.mkdirs();\n            }\n            file.transferTo(test);\n            InetAddress address = InetAddress.getLocalHost();\n            String ip=address.getHostAddress();\n            String finalPath=\"http://\"+ip+\"/file/\"+path;\n            return finalPath;\n        }catch (Exception e){\n            log.error(file.getOriginalFilename()+\"文件上传失败\", e);\n            return file.getOriginalFilename()+\"文件上传失败\";\n        }\n    }\n```\n---\n<font color=red size=5> 附加文章参考：</font> \n\n[服务器部署—《fastDFS篇》](https://blog.csdn.net/qq_39231769/article/details/102650042)\n\n[java中使用fastDFS上传图片(前端ajax+后端ssm) ](https://blog.huijia.cf/2022/09/05/BookMark/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/java%E4%B8%AD%E4%BD%BF%E7%94%A8fastDFS%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87(%E5%89%8D%E7%AB%AFajax+%E5%90%8E%E7%AB%AFssm)%20--%E8%8F%9C%E9%B8%9F%E5%B0%8F%E5%9B%9E/)\n\n[阿里云OSS使用——java中图片上传返回url（Spring Boot项目中详细使用）](https://blog.csdn.net/qq_39231769/article/details/105031064)","source":"_posts/BookMark/安装配置/使用nginx一分钟配置一个文件服务器（附：阿里oss文件服务使用、fastDFS文件服务使用）.md","raw":"# 使用nginx一分钟配置一个文件服务器（附：阿里oss文件服务使用、fastDFS文件服务使用）\n\n---\n\n[toc]\n\n---\n+ 前言：作为一名Java工程师，文件服务用的也不少。从最早的fastDFS轻量级图片服务器到第三方如阿里OSS；七牛云存储都用过。 新公司里一方面没有linux服务器，无法搭建fastDFS文件服务器。当然也没有打算买第三方存储。所以，之前使用过的文件服务器都无效。\n+ 新的考虑：在windows上搭建文件服务器\n+ 解决：nginx作为文件服务器，指定目录存放文件。利用java文件流写入指定文件并返回文件路径。\n---\n## 一、配置nginx\n1. 打开nginx配置目录，找到nginx.config文件编辑\n```javascript?linenums\nlocation /file {\n\talias Z:\\file/; \n\t#如果目录在download下则强制浏览器下载\n\tif ($request_filename ~* ^.*?\\/download\\/.*$){\n\t\tadd_header Content-Disposition: 'attachment;';\n\t}\n\tautoindex on;\n}\n```\n\n![image-20220430160035229](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430160035229.png)\n\n ## 二、在所配置路径上放入一个文件。重启nginx尝试访问文件服务器\n +  重启nginx\n +  浏览器访问`http://localhost:80/file/`，实际访问地址按照自己配置路径访问\n +  ![image-20220430160102331](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430160102331.png)\n+  看到如下目录，文件服务器配置完成\n  ![image-20220430160237103](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430160237103.png)\n\n---\n\n ## 三、附加Java上传文件并返回文件访问路径（Spring Boot）\n 1. yml配置`nginxFilePath: Z:\\file/`\n![image-20220430160252681](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430160252681.png)\n```javascript?linenums\n//Controller 其中modelName是想将文件放入的文件夹（不存在时自动生成）\n@PostMapping(\"/uploadToNginx\")\npublic String uploadToNginx(@RequestParam(\"file\") MultipartFile file,String modelName) {\n\tif (file==null){\n\t\treturn \"文件上传失败，请重新选择文件\";\n\t}\n\treturn fileManageService.uploadToNginx(file,modelName);\n}\n//Service\nString uploadToNginx(MultipartFile file, String modelName);\n//ServiceImpl\n@Override\n    public String uploadToNginx(MultipartFile file, String modelName)  {\n        try {\n            String path=modelName+ \"/\"+ IdUtil.simpleUUID() +\"-\"+file.getOriginalFilename();\n            File test = new File(nginxFilePath+path);\n            if (!test.exists()){\n                test.mkdirs();\n            }\n            file.transferTo(test);\n            InetAddress address = InetAddress.getLocalHost();\n            String ip=address.getHostAddress();\n            String finalPath=\"http://\"+ip+\"/file/\"+path;\n            return finalPath;\n        }catch (Exception e){\n            log.error(file.getOriginalFilename()+\"文件上传失败\", e);\n            return file.getOriginalFilename()+\"文件上传失败\";\n        }\n    }\n```\n---\n<font color=red size=5> 附加文章参考：</font> \n\n[服务器部署—《fastDFS篇》](https://blog.csdn.net/qq_39231769/article/details/102650042)\n\n[java中使用fastDFS上传图片(前端ajax+后端ssm) ](https://blog.huijia.cf/2022/09/05/BookMark/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/java%E4%B8%AD%E4%BD%BF%E7%94%A8fastDFS%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87(%E5%89%8D%E7%AB%AFajax+%E5%90%8E%E7%AB%AFssm)%20--%E8%8F%9C%E9%B8%9F%E5%B0%8F%E5%9B%9E/)\n\n[阿里云OSS使用——java中图片上传返回url（Spring Boot项目中详细使用）](https://blog.csdn.net/qq_39231769/article/details/105031064)","slug":"BookMark/安装配置/使用nginx一分钟配置一个文件服务器（附：阿里oss文件服务使用、fastDFS文件服务使用）","published":1,"date":"2022-07-18T09:51:21.000Z","updated":"2022-09-01T10:02:40.487Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cl7ptszok0017aba5efr2f4w2","content":"<h1><span id=\"使用nginx一分钟配置一个文件服务器附阿里oss文件服务使用-fastdfs文件服务使用\">使用nginx一分钟配置一个文件服务器（附：阿里oss文件服务使用、fastDFS文件服务使用）</span></h1><hr>\n<p>[toc]</p>\n<hr>\n<ul>\n<li>前言：作为一名Java工程师，文件服务用的也不少。从最早的fastDFS轻量级图片服务器到第三方如阿里OSS；七牛云存储都用过。 新公司里一方面没有linux服务器，无法搭建fastDFS文件服务器。当然也没有打算买第三方存储。所以，之前使用过的文件服务器都无效。</li>\n<li>新的考虑：在windows上搭建文件服务器</li>\n<li>解决：nginx作为文件服务器，指定目录存放文件。利用java文件流写入指定文件并返回文件路径。</li>\n</ul>\n<hr>\n<h2><span id=\"一-配置nginx\">一、配置nginx</span></h2><ol>\n<li>打开nginx配置目录，找到nginx.config文件编辑<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">location /file &#123;<br>\talias Z:\\file/; <br>\t#如果目录在download下则强制浏览器下载<br>\tif ($request_filename ~* ^.*?\\/download\\/.*$)&#123;<br>\t\tadd_header Content-Disposition: &#x27;attachment;&#x27;;<br>\t&#125;<br>\tautoindex on;<br>&#125;<br></code></pre></td></tr></table></figure></li>\n</ol>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430160035229.png\" alt=\"image-20220430160035229\"></p>\n<h2><span id=\"二-在所配置路径上放入一个文件-重启nginx尝试访问文件服务器\">二、在所配置路径上放入一个文件。重启nginx尝试访问文件服务器</span></h2><ul>\n<li>重启nginx</li>\n<li>浏览器访问<code>http://localhost:80/file/</code>，实际访问地址按照自己配置路径访问</li>\n<li><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430160102331.png\" alt=\"image-20220430160102331\"></li>\n<li>看到如下目录，文件服务器配置完成<br>  <img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430160237103.png\" alt=\"image-20220430160237103\"></li>\n</ul>\n<hr>\n<h2><span id=\"三-附加java上传文件并返回文件访问路径spring-boot\">三、附加Java上传文件并返回文件访问路径（Spring Boot）</span></h2><ol>\n<li>yml配置<code>nginxFilePath: Z:\\file/</code><br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430160252681.png\" alt=\"image-20220430160252681\"><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">//Controller 其中modelName是想将文件放入的文件夹（不存在时自动生成）<br>@PostMapping(&quot;/uploadToNginx&quot;)<br>public String uploadToNginx(@RequestParam(&quot;file&quot;) MultipartFile file,String modelName) &#123;<br>\tif (file==null)&#123;<br>\t\treturn &quot;文件上传失败，请重新选择文件&quot;;<br>\t&#125;<br>\treturn fileManageService.uploadToNginx(file,modelName);<br>&#125;<br>//Service<br>String uploadToNginx(MultipartFile file, String modelName);<br>//ServiceImpl<br>@Override<br>    public String uploadToNginx(MultipartFile file, String modelName)  &#123;<br>        try &#123;<br>            String path=modelName+ &quot;/&quot;+ IdUtil.simpleUUID() +&quot;-&quot;+file.getOriginalFilename();<br>            File test = new File(nginxFilePath+path);<br>            if (!test.exists())&#123;<br>                test.mkdirs();<br>            &#125;<br>            file.transferTo(test);<br>            InetAddress address = InetAddress.getLocalHost();<br>            String ip=address.getHostAddress();<br>            String finalPath=&quot;http://&quot;+ip+&quot;/file/&quot;+path;<br>            return finalPath;<br>        &#125;catch (Exception e)&#123;<br>            log.error(file.getOriginalFilename()+&quot;文件上传失败&quot;, e);<br>            return file.getOriginalFilename()+&quot;文件上传失败&quot;;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure></li>\n</ol>\n<hr>\n<p><font color=\"red\" size=\"5\"> 附加文章参考：</font> </p>\n<p><a href=\"https://blog.csdn.net/qq_39231769/article/details/102650042\">服务器部署—《fastDFS篇》</a></p>\n<p><a href=\"https://blog.huijia.cf/2022/09/05/BookMark/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/java%E4%B8%AD%E4%BD%BF%E7%94%A8fastDFS%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87(%E5%89%8D%E7%AB%AFajax+%E5%90%8E%E7%AB%AFssm)%20--%E8%8F%9C%E9%B8%9F%E5%B0%8F%E5%9B%9E/\">java中使用fastDFS上传图片(前端ajax+后端ssm) </a></p>\n<p><a href=\"https://blog.csdn.net/qq_39231769/article/details/105031064\">阿里云OSS使用——java中图片上传返回url（Spring Boot项目中详细使用）</a></p>\n","site":{"data":{}},"wordcount":1762,"excerpt":"","more":"<h1 id=\"使用nginx一分钟配置一个文件服务器（附：阿里oss文件服务使用、fastDFS文件服务使用）\"><a href=\"#使用nginx一分钟配置一个文件服务器（附：阿里oss文件服务使用、fastDFS文件服务使用）\" class=\"headerlink\" title=\"使用nginx一分钟配置一个文件服务器（附：阿里oss文件服务使用、fastDFS文件服务使用）\"></a>使用nginx一分钟配置一个文件服务器（附：阿里oss文件服务使用、fastDFS文件服务使用）</h1><hr>\n<p>[toc]</p>\n<hr>\n<ul>\n<li>前言：作为一名Java工程师，文件服务用的也不少。从最早的fastDFS轻量级图片服务器到第三方如阿里OSS；七牛云存储都用过。 新公司里一方面没有linux服务器，无法搭建fastDFS文件服务器。当然也没有打算买第三方存储。所以，之前使用过的文件服务器都无效。</li>\n<li>新的考虑：在windows上搭建文件服务器</li>\n<li>解决：nginx作为文件服务器，指定目录存放文件。利用java文件流写入指定文件并返回文件路径。</li>\n</ul>\n<hr>\n<h2 id=\"一、配置nginx\"><a href=\"#一、配置nginx\" class=\"headerlink\" title=\"一、配置nginx\"></a>一、配置nginx</h2><ol>\n<li>打开nginx配置目录，找到nginx.config文件编辑<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">location /file &#123;<br>\talias Z:\\file/; <br>\t#如果目录在download下则强制浏览器下载<br>\tif ($request_filename ~* ^.*?\\/download\\/.*$)&#123;<br>\t\tadd_header Content-Disposition: &#x27;attachment;&#x27;;<br>\t&#125;<br>\tautoindex on;<br>&#125;<br></code></pre></td></tr></table></figure></li>\n</ol>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430160035229.png\" alt=\"image-20220430160035229\"></p>\n<h2 id=\"二、在所配置路径上放入一个文件。重启nginx尝试访问文件服务器\"><a href=\"#二、在所配置路径上放入一个文件。重启nginx尝试访问文件服务器\" class=\"headerlink\" title=\"二、在所配置路径上放入一个文件。重启nginx尝试访问文件服务器\"></a>二、在所配置路径上放入一个文件。重启nginx尝试访问文件服务器</h2><ul>\n<li>重启nginx</li>\n<li>浏览器访问<code>http://localhost:80/file/</code>，实际访问地址按照自己配置路径访问</li>\n<li><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430160102331.png\" alt=\"image-20220430160102331\"></li>\n<li>看到如下目录，文件服务器配置完成<br>  <img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430160237103.png\" alt=\"image-20220430160237103\"></li>\n</ul>\n<hr>\n<h2 id=\"三、附加Java上传文件并返回文件访问路径（Spring-Boot）\"><a href=\"#三、附加Java上传文件并返回文件访问路径（Spring-Boot）\" class=\"headerlink\" title=\"三、附加Java上传文件并返回文件访问路径（Spring Boot）\"></a>三、附加Java上传文件并返回文件访问路径（Spring Boot）</h2><ol>\n<li>yml配置<code>nginxFilePath: Z:\\file/</code><br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430160252681.png\" alt=\"image-20220430160252681\"><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">//Controller 其中modelName是想将文件放入的文件夹（不存在时自动生成）<br>@PostMapping(&quot;/uploadToNginx&quot;)<br>public String uploadToNginx(@RequestParam(&quot;file&quot;) MultipartFile file,String modelName) &#123;<br>\tif (file==null)&#123;<br>\t\treturn &quot;文件上传失败，请重新选择文件&quot;;<br>\t&#125;<br>\treturn fileManageService.uploadToNginx(file,modelName);<br>&#125;<br>//Service<br>String uploadToNginx(MultipartFile file, String modelName);<br>//ServiceImpl<br>@Override<br>    public String uploadToNginx(MultipartFile file, String modelName)  &#123;<br>        try &#123;<br>            String path=modelName+ &quot;/&quot;+ IdUtil.simpleUUID() +&quot;-&quot;+file.getOriginalFilename();<br>            File test = new File(nginxFilePath+path);<br>            if (!test.exists())&#123;<br>                test.mkdirs();<br>            &#125;<br>            file.transferTo(test);<br>            InetAddress address = InetAddress.getLocalHost();<br>            String ip=address.getHostAddress();<br>            String finalPath=&quot;http://&quot;+ip+&quot;/file/&quot;+path;<br>            return finalPath;<br>        &#125;catch (Exception e)&#123;<br>            log.error(file.getOriginalFilename()+&quot;文件上传失败&quot;, e);<br>            return file.getOriginalFilename()+&quot;文件上传失败&quot;;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure></li>\n</ol>\n<hr>\n<p><font color=red size=5> 附加文章参考：</font> </p>\n<p><a href=\"https://blog.csdn.net/qq_39231769/article/details/102650042\">服务器部署—《fastDFS篇》</a></p>\n<p><a href=\"https://blog.huijia.cf/2022/09/05/BookMark/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/java%E4%B8%AD%E4%BD%BF%E7%94%A8fastDFS%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87(%E5%89%8D%E7%AB%AFajax+%E5%90%8E%E7%AB%AFssm)%20--%E8%8F%9C%E9%B8%9F%E5%B0%8F%E5%9B%9E/\">java中使用fastDFS上传图片(前端ajax+后端ssm) </a></p>\n<p><a href=\"https://blog.csdn.net/qq_39231769/article/details/105031064\">阿里云OSS使用——java中图片上传返回url（Spring Boot项目中详细使用）</a></p>\n"},{"_content":"# 重装系统教程\n\n---\n+ 入门IT第一步，来一个干净的电脑系统吧？\n[toc]\n\n---\n\n**（装机需谨慎，系统盘必须格式化，其他风险自测。）**\n本教程提供三种重装系统方式，三种均为纯净装机,均需要U盘。\n\n1. windows10官方系统重装（新增！win10推荐）\n2. PE 重装，此方式会为装机者提供更多工具，包括分区大师，电脑密码解除等等工具。\n3. ISO重装，此方法傻瓜式操作，简单快捷，一键重装。\n\n---\n\n##  windows10官方系统重装（新增！win10推荐）\n\n---\n\n+ 无需下载百度网盘中的系统镜像，但要注意在U盘制作过程保持网络畅通。win10工具会帮助我们自动下载系统。\n+ 优点：为系统自动是官网较新的系统，重装完成后无需更新太多。而且绕过了限速的某云下载。\n+ 缺点：只能安装win10系统\n\n---\n\n### 一、下载Windows10官网工具助手\n\n*  [Win10官网](https://www.microsoft.com/zh-cn/software-download/windows10)\n   ![enter description here](https://img-1256282866.cos.ap-beijing.myqcloud.com/aHR0cDovL2hicS5pZHNlLnRvcC9ibG9nLzE1ODYzMDk3MTcwMTEucG5n)\n\n### 二、制作U盘启动。\n\n+ 选择为另一台安装介质 \n\n  ![image-20220713170952100](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220713170952100.png)\n\n+ 取消推荐选项框，自行选择你想要的系统（仅有win10系统）\n  ![image-20220713171010482](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220713171010482.png)\n\n+ 选择U盘\n\n  ![image-20220713171033069](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220713171033069.png)\n\n+ 等待下载就可以了\n\n  ![image-20220713171046576](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220713171046576.png)\n\n### 三、 系统BIOS选择（不同电脑不同）\n\n---\n\n**1.进入BIOS设置，一般快捷键根据电脑有所不同；**\n\n+ 普通电脑：度娘搜对应电脑开机快捷键，格式：*xxx型号电脑BIOS设置U盘为第一启动项*\n\n![img](https://img-1256282866.cos.ap-beijing.myqcloud.com/20304569-7e6753d98ad53197.png)\n\n+ 特殊电脑（联想系列部分新机）;关机状态用卡针点击电脑上的小孔（类似手机装卡孔）\n\n**2.BIOS设置（不同电脑设置难易程度不同）：**\n\n+ （此处为联想笔记本）进入BIOS~——>按→光标移动到boot——>设置页面如下图一：——>按→光标到exit\n  ![image-20220713171534830](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220713171534830.png)\n  ![image-20220713171555082](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220713171555082.png)\n+ 此过程的目的就是在启动电脑选择系统时选择到你的U盘启动，而不是电脑自己的硬盘。\n  所以虽然有多种启动方式，其过程一般在BOOT设置栏，看到自己的U盘，将其优先级别提高。如：\n  ![image-20220713171608972](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220713171608972.png)\n\n+ 简单的电脑一般可以直接选择启动盘，直接点击即可。如：\n  ![image-20220713171616851](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220713171616851.png)\n\n### 四、启动电脑,选择系统，划分盘符。\n\n1. U盘启动后你会看见电脑屏幕会变为蓝色装机页面，以下的操作按照提示下一步就可以。\n2. 选择自定义：\n   ![image-20220713172100606](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220713172100606.png)\n3. 删除原有分区\n   ![image-20220713172110691](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220713172110691.png)\n\n4. 新建分区，最先创建出主分区，就是系统盘。或产生引导分区，无需理会。![image-20220713172132928](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220713172132928.png)\n\n5. 新建所有分区后，一直下一步然后等待，就OK。\n\n   \n\n---\n\n## PE重装\n\n+ **工具:**\n  \t1、8G以上U盘\n  \t2、微PE工具：https://www.wepe.com.cn/download.html\n  \t3、操作系统（此处提供纯净win10）： https://alist.huijia.cf/d/hui/%E8%BD%AF%E4%BB%B6/%E7%B3%BB%E7%BB%9F%E9%95%9C%E5%83%8F/Windows%E5%AE%98%E6%96%B9.iso\n\n### 一、制作PE U盘\n\n1. 下载微PE工具，win10系统：\n\n2. 格式化U盘：\n   鼠标右击插入的U盘，选择“格式化”，在文件系统处选择“NTFS”，点击“开始”（格式化时，文件系统选择NTFS是为了U盘能够存储单个内存大于4G的文件）。\n\n3. 点击“安装PE到U盘”。\n\n![image-20220713172804689](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220713172804689.png)\n\n4. 点击“立即安装进U盘”（U盘卷标显示的名称为自己插入U盘的名称)。\n\n5. 点击“开始制作”。\n\n6. 将下载好的win10系统复制入U盘中\n\n### 二、BIOS设置（同上）\n\n### 三、PE系统重装Windows\n\n---\n ~~如需重新分盘或者格式化全盘，获得一个新的电脑系统请继续阅读本段：\n如需保留系统盘外磁盘内容，跳过本段，否则数据丢失不负责呦！\n打开分区助手——>点击快速分区——>执行即可\n快速分区弹窗出现提示，需要注意以下几点\n1.磁盘类型选择【MBR】\n2.分区数目选择：多少个取决需求和硬盘大小\n3.分区大小选择：第一个为主分区（即系统安装的分区），\n一般建议25-100G左右即可（取决需求和硬盘大小）~~  \n\n----\n1. 进入“PE系统”后，双击“**CGI备份还原**”。\n   ![image-20220713173017405](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220713173017405.png)\n\n2. 选择“**还原分区**”，**选择分区盘符为“C盘”**，请选择镜像文件”处**右侧点击“三个点”**。\n\n   ![image-20220713173025631](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220713173025631.png)\n\n3. 选择拷贝到U盘里的“镜像文件”（iso格式），点击“**打开**”。\n\n   ![image-20220713173033997](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220713173033997.png)\n\n4. 选择自己所需要安装的版本（我这里选择Windows 7 旗舰版），点击“**确定**”。\n   ![image-20220713173043227](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220713173043227.png)\n\n5. 点击“**执行**”。\n\n6. 勾选“重启”，点击“**确定**”。\n\n7. 正在还原分区。\n\n8. 显示“还原成功”，此时拔掉U盘，重启完成。\n\n---\n\n## ISO重装\n+ **工具:**\n\t\t1、8G以上U盘\n\t\t2、软碟通：[软碟通官网](https://cn.ultraiso.net/xiazai.html)（直接免费下载试用）\n\t\t3、操作系统（此处提供纯净win10）： https://alist.huijia.cf/d/hui/%E8%BD%AF%E4%BB%B6/%E7%B3%BB%E7%BB%9F%E9%95%9C%E5%83%8F/Windows%E5%AE%98%E6%96%B9.iso\n\n### 一、制作U盘启动盘\n1. 首先下载“软碟通”软件，下载后安装，选项默认，***不要自己去勾选***；安装完成后，**不需要**运行此软件。\n\n   ![image-20220713173540878](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220713173540878.png)\n\n2. 下载一个win10操作系统，下载的操作系统不要下载在U盘里，电脑的任意一个盘都可以\n3. 下载好系统后，插好U盘，直接**双击下载好的iso文件**\n   ![image-20220713173610731](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220713173610731.png)\n   弹出以下界面：点击“**继续试用**”\n   ![image-20220713173624605](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220713173624605.png)\n4. 选择左侧“**本地目录**”的U盘盘符，***千万不要选错***，再选择工具拦的“启动”\n   ![image-20220713173641447](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220713173641447.png)\n5. 在选中“**写入硬盘映像**”，（启动项里的第4个），跳出一个对话框，默认设置，直接点“**格式化**”，格式化完成后点“**写入**”，等待**刻录成功**，完成制作。\n   ![image-20220713173655658](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220713173655658.png)\n\n### 二、 BIOS设置（同上Win10重装）\n\n### 三、启动电脑,选择系统，划分盘符（同上Win10重装）。\n---\n提供常用装机后、升级 以及 无线网卡驱动：\n\n+ **win10易升：**  [win10易升](https://alist.huijia.cf/d/hui/%E8%BD%AF%E4%BB%B6/%E9%87%8D%E8%A3%85%E7%B3%BB%E7%BB%9F/win10%E6%98%93%E5%8D%87.exe) \n+ **360驱动大师（无线网卡驱动版）**： [驱动大师](https://alist.huijia.cf/d/hui/%E8%BD%AF%E4%BB%B6/%E9%87%8D%E8%A3%85%E7%B3%BB%E7%BB%9F/360DrvMgrInstaller_net.exe)\n+ **虚拟机(害怕电脑难以恢复的小白可以利用虚拟机进行第一次模拟测试)**：[虚拟机](https://alist.huijia.cf/d/hui/%E8%BD%AF%E4%BB%B6/%E9%87%8D%E8%A3%85%E7%B3%BB%E7%BB%9F/VMware/VMware-workstation-full-16.0.exe) \n+ **启动系统后。激活工具链接**: [工具系统](https://alist.huijia.cf/d/hui/%E8%BD%AF%E4%BB%B6/%E9%87%8D%E8%A3%85%E7%B3%BB%E7%BB%9F/Win10%20%E6%95%B0%E5%AD%97%E6%BF%80%E6%B4%BB%E5%B7%A5%E5%85%B7.zip) \n\n","source":"_posts/BookMark/安装配置/《重装系统》Windows纯净装机+常用工具（最简单易懂教程）--菜鸟小回.md","raw":"# 重装系统教程\n\n---\n+ 入门IT第一步，来一个干净的电脑系统吧？\n[toc]\n\n---\n\n**（装机需谨慎，系统盘必须格式化，其他风险自测。）**\n本教程提供三种重装系统方式，三种均为纯净装机,均需要U盘。\n\n1. windows10官方系统重装（新增！win10推荐）\n2. PE 重装，此方式会为装机者提供更多工具，包括分区大师，电脑密码解除等等工具。\n3. ISO重装，此方法傻瓜式操作，简单快捷，一键重装。\n\n---\n\n##  windows10官方系统重装（新增！win10推荐）\n\n---\n\n+ 无需下载百度网盘中的系统镜像，但要注意在U盘制作过程保持网络畅通。win10工具会帮助我们自动下载系统。\n+ 优点：为系统自动是官网较新的系统，重装完成后无需更新太多。而且绕过了限速的某云下载。\n+ 缺点：只能安装win10系统\n\n---\n\n### 一、下载Windows10官网工具助手\n\n*  [Win10官网](https://www.microsoft.com/zh-cn/software-download/windows10)\n   ![enter description here](https://img-1256282866.cos.ap-beijing.myqcloud.com/aHR0cDovL2hicS5pZHNlLnRvcC9ibG9nLzE1ODYzMDk3MTcwMTEucG5n)\n\n### 二、制作U盘启动。\n\n+ 选择为另一台安装介质 \n\n  ![image-20220713170952100](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220713170952100.png)\n\n+ 取消推荐选项框，自行选择你想要的系统（仅有win10系统）\n  ![image-20220713171010482](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220713171010482.png)\n\n+ 选择U盘\n\n  ![image-20220713171033069](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220713171033069.png)\n\n+ 等待下载就可以了\n\n  ![image-20220713171046576](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220713171046576.png)\n\n### 三、 系统BIOS选择（不同电脑不同）\n\n---\n\n**1.进入BIOS设置，一般快捷键根据电脑有所不同；**\n\n+ 普通电脑：度娘搜对应电脑开机快捷键，格式：*xxx型号电脑BIOS设置U盘为第一启动项*\n\n![img](https://img-1256282866.cos.ap-beijing.myqcloud.com/20304569-7e6753d98ad53197.png)\n\n+ 特殊电脑（联想系列部分新机）;关机状态用卡针点击电脑上的小孔（类似手机装卡孔）\n\n**2.BIOS设置（不同电脑设置难易程度不同）：**\n\n+ （此处为联想笔记本）进入BIOS~——>按→光标移动到boot——>设置页面如下图一：——>按→光标到exit\n  ![image-20220713171534830](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220713171534830.png)\n  ![image-20220713171555082](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220713171555082.png)\n+ 此过程的目的就是在启动电脑选择系统时选择到你的U盘启动，而不是电脑自己的硬盘。\n  所以虽然有多种启动方式，其过程一般在BOOT设置栏，看到自己的U盘，将其优先级别提高。如：\n  ![image-20220713171608972](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220713171608972.png)\n\n+ 简单的电脑一般可以直接选择启动盘，直接点击即可。如：\n  ![image-20220713171616851](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220713171616851.png)\n\n### 四、启动电脑,选择系统，划分盘符。\n\n1. U盘启动后你会看见电脑屏幕会变为蓝色装机页面，以下的操作按照提示下一步就可以。\n2. 选择自定义：\n   ![image-20220713172100606](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220713172100606.png)\n3. 删除原有分区\n   ![image-20220713172110691](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220713172110691.png)\n\n4. 新建分区，最先创建出主分区，就是系统盘。或产生引导分区，无需理会。![image-20220713172132928](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220713172132928.png)\n\n5. 新建所有分区后，一直下一步然后等待，就OK。\n\n   \n\n---\n\n## PE重装\n\n+ **工具:**\n  \t1、8G以上U盘\n  \t2、微PE工具：https://www.wepe.com.cn/download.html\n  \t3、操作系统（此处提供纯净win10）： https://alist.huijia.cf/d/hui/%E8%BD%AF%E4%BB%B6/%E7%B3%BB%E7%BB%9F%E9%95%9C%E5%83%8F/Windows%E5%AE%98%E6%96%B9.iso\n\n### 一、制作PE U盘\n\n1. 下载微PE工具，win10系统：\n\n2. 格式化U盘：\n   鼠标右击插入的U盘，选择“格式化”，在文件系统处选择“NTFS”，点击“开始”（格式化时，文件系统选择NTFS是为了U盘能够存储单个内存大于4G的文件）。\n\n3. 点击“安装PE到U盘”。\n\n![image-20220713172804689](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220713172804689.png)\n\n4. 点击“立即安装进U盘”（U盘卷标显示的名称为自己插入U盘的名称)。\n\n5. 点击“开始制作”。\n\n6. 将下载好的win10系统复制入U盘中\n\n### 二、BIOS设置（同上）\n\n### 三、PE系统重装Windows\n\n---\n ~~如需重新分盘或者格式化全盘，获得一个新的电脑系统请继续阅读本段：\n如需保留系统盘外磁盘内容，跳过本段，否则数据丢失不负责呦！\n打开分区助手——>点击快速分区——>执行即可\n快速分区弹窗出现提示，需要注意以下几点\n1.磁盘类型选择【MBR】\n2.分区数目选择：多少个取决需求和硬盘大小\n3.分区大小选择：第一个为主分区（即系统安装的分区），\n一般建议25-100G左右即可（取决需求和硬盘大小）~~  \n\n----\n1. 进入“PE系统”后，双击“**CGI备份还原**”。\n   ![image-20220713173017405](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220713173017405.png)\n\n2. 选择“**还原分区**”，**选择分区盘符为“C盘”**，请选择镜像文件”处**右侧点击“三个点”**。\n\n   ![image-20220713173025631](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220713173025631.png)\n\n3. 选择拷贝到U盘里的“镜像文件”（iso格式），点击“**打开**”。\n\n   ![image-20220713173033997](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220713173033997.png)\n\n4. 选择自己所需要安装的版本（我这里选择Windows 7 旗舰版），点击“**确定**”。\n   ![image-20220713173043227](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220713173043227.png)\n\n5. 点击“**执行**”。\n\n6. 勾选“重启”，点击“**确定**”。\n\n7. 正在还原分区。\n\n8. 显示“还原成功”，此时拔掉U盘，重启完成。\n\n---\n\n## ISO重装\n+ **工具:**\n\t\t1、8G以上U盘\n\t\t2、软碟通：[软碟通官网](https://cn.ultraiso.net/xiazai.html)（直接免费下载试用）\n\t\t3、操作系统（此处提供纯净win10）： https://alist.huijia.cf/d/hui/%E8%BD%AF%E4%BB%B6/%E7%B3%BB%E7%BB%9F%E9%95%9C%E5%83%8F/Windows%E5%AE%98%E6%96%B9.iso\n\n### 一、制作U盘启动盘\n1. 首先下载“软碟通”软件，下载后安装，选项默认，***不要自己去勾选***；安装完成后，**不需要**运行此软件。\n\n   ![image-20220713173540878](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220713173540878.png)\n\n2. 下载一个win10操作系统，下载的操作系统不要下载在U盘里，电脑的任意一个盘都可以\n3. 下载好系统后，插好U盘，直接**双击下载好的iso文件**\n   ![image-20220713173610731](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220713173610731.png)\n   弹出以下界面：点击“**继续试用**”\n   ![image-20220713173624605](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220713173624605.png)\n4. 选择左侧“**本地目录**”的U盘盘符，***千万不要选错***，再选择工具拦的“启动”\n   ![image-20220713173641447](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220713173641447.png)\n5. 在选中“**写入硬盘映像**”，（启动项里的第4个），跳出一个对话框，默认设置，直接点“**格式化**”，格式化完成后点“**写入**”，等待**刻录成功**，完成制作。\n   ![image-20220713173655658](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220713173655658.png)\n\n### 二、 BIOS设置（同上Win10重装）\n\n### 三、启动电脑,选择系统，划分盘符（同上Win10重装）。\n---\n提供常用装机后、升级 以及 无线网卡驱动：\n\n+ **win10易升：**  [win10易升](https://alist.huijia.cf/d/hui/%E8%BD%AF%E4%BB%B6/%E9%87%8D%E8%A3%85%E7%B3%BB%E7%BB%9F/win10%E6%98%93%E5%8D%87.exe) \n+ **360驱动大师（无线网卡驱动版）**： [驱动大师](https://alist.huijia.cf/d/hui/%E8%BD%AF%E4%BB%B6/%E9%87%8D%E8%A3%85%E7%B3%BB%E7%BB%9F/360DrvMgrInstaller_net.exe)\n+ **虚拟机(害怕电脑难以恢复的小白可以利用虚拟机进行第一次模拟测试)**：[虚拟机](https://alist.huijia.cf/d/hui/%E8%BD%AF%E4%BB%B6/%E9%87%8D%E8%A3%85%E7%B3%BB%E7%BB%9F/VMware/VMware-workstation-full-16.0.exe) \n+ **启动系统后。激活工具链接**: [工具系统](https://alist.huijia.cf/d/hui/%E8%BD%AF%E4%BB%B6/%E9%87%8D%E8%A3%85%E7%B3%BB%E7%BB%9F/Win10%20%E6%95%B0%E5%AD%97%E6%BF%80%E6%B4%BB%E5%B7%A5%E5%85%B7.zip) \n\n","slug":"BookMark/安装配置/《重装系统》Windows纯净装机+常用工具（最简单易懂教程）--菜鸟小回","published":1,"date":"2022-07-18T09:51:15.000Z","updated":"2022-09-01T10:02:40.544Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cl7ptszok0019aba57h5kec80","content":"<h1><span id=\"重装系统教程\">重装系统教程</span></h1><hr>\n<ul>\n<li>入门IT第一步，来一个干净的电脑系统吧？<br>[toc]</li>\n</ul>\n<hr>\n<p><strong>（装机需谨慎，系统盘必须格式化，其他风险自测。）</strong><br>本教程提供三种重装系统方式，三种均为纯净装机,均需要U盘。</p>\n<ol>\n<li>windows10官方系统重装（新增！win10推荐）</li>\n<li>PE 重装，此方式会为装机者提供更多工具，包括分区大师，电脑密码解除等等工具。</li>\n<li>ISO重装，此方法傻瓜式操作，简单快捷，一键重装。</li>\n</ol>\n<hr>\n<h2><span id=\"windows10官方系统重装新增win10推荐\">windows10官方系统重装（新增！win10推荐）</span></h2><hr>\n<ul>\n<li>无需下载百度网盘中的系统镜像，但要注意在U盘制作过程保持网络畅通。win10工具会帮助我们自动下载系统。</li>\n<li>优点：为系统自动是官网较新的系统，重装完成后无需更新太多。而且绕过了限速的某云下载。</li>\n<li>缺点：只能安装win10系统</li>\n</ul>\n<hr>\n<h3><span id=\"一-下载windows10官网工具助手\">一、下载Windows10官网工具助手</span></h3><ul>\n<li><a href=\"https://www.microsoft.com/zh-cn/software-download/windows10\">Win10官网</a><br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/aHR0cDovL2hicS5pZHNlLnRvcC9ibG9nLzE1ODYzMDk3MTcwMTEucG5n\" alt=\"enter description here\"></li>\n</ul>\n<h3><span id=\"二-制作u盘启动\">二、制作U盘启动。</span></h3><ul>\n<li><p>选择为另一台安装介质 </p>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220713170952100.png\" alt=\"image-20220713170952100\"></p>\n</li>\n<li><p>取消推荐选项框，自行选择你想要的系统（仅有win10系统）<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220713171010482.png\" alt=\"image-20220713171010482\"></p>\n</li>\n<li><p>选择U盘</p>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220713171033069.png\" alt=\"image-20220713171033069\"></p>\n</li>\n<li><p>等待下载就可以了</p>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220713171046576.png\" alt=\"image-20220713171046576\"></p>\n</li>\n</ul>\n<h3><span id=\"三-系统bios选择不同电脑不同\">三、 系统BIOS选择（不同电脑不同）</span></h3><hr>\n<p><strong>1.进入BIOS设置，一般快捷键根据电脑有所不同；</strong></p>\n<ul>\n<li>普通电脑：度娘搜对应电脑开机快捷键，格式：<em>xxx型号电脑BIOS设置U盘为第一启动项</em></li>\n</ul>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/20304569-7e6753d98ad53197.png\" alt=\"img\"></p>\n<ul>\n<li>特殊电脑（联想系列部分新机）;关机状态用卡针点击电脑上的小孔（类似手机装卡孔）</li>\n</ul>\n<p><strong>2.BIOS设置（不同电脑设置难易程度不同）：</strong></p>\n<ul>\n<li><p>（此处为联想笔记本）进入BIOS~——&gt;按→光标移动到boot——&gt;设置页面如下图一：——&gt;按→光标到exit<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220713171534830.png\" alt=\"image-20220713171534830\"><br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220713171555082.png\" alt=\"image-20220713171555082\"></p>\n</li>\n<li><p>此过程的目的就是在启动电脑选择系统时选择到你的U盘启动，而不是电脑自己的硬盘。<br>所以虽然有多种启动方式，其过程一般在BOOT设置栏，看到自己的U盘，将其优先级别提高。如：<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220713171608972.png\" alt=\"image-20220713171608972\"></p>\n</li>\n<li><p>简单的电脑一般可以直接选择启动盘，直接点击即可。如：<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220713171616851.png\" alt=\"image-20220713171616851\"></p>\n</li>\n</ul>\n<h3><span id=\"四-启动电脑选择系统划分盘符\">四、启动电脑,选择系统，划分盘符。</span></h3><ol>\n<li><p>U盘启动后你会看见电脑屏幕会变为蓝色装机页面，以下的操作按照提示下一步就可以。</p>\n</li>\n<li><p>选择自定义：<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220713172100606.png\" alt=\"image-20220713172100606\"></p>\n</li>\n<li><p>删除原有分区<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220713172110691.png\" alt=\"image-20220713172110691\"></p>\n</li>\n<li><p>新建分区，最先创建出主分区，就是系统盘。或产生引导分区，无需理会。<img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220713172132928.png\" alt=\"image-20220713172132928\"></p>\n</li>\n<li><p>新建所有分区后，一直下一步然后等待，就OK。</p>\n</li>\n</ol>\n<hr>\n<h2><span id=\"pe重装\">PE重装</span></h2><ul>\n<li><strong>工具:</strong><br>1、8G以上U盘<br>2、微PE工具：<a href=\"https://www.wepe.com.cn/download.html\">https://www.wepe.com.cn/download.html</a><br>3、操作系统（此处提供纯净win10）： <a href=\"https://alist.huijia.cf/d/hui/%E8%BD%AF%E4%BB%B6/%E7%B3%BB%E7%BB%9F%E9%95%9C%E5%83%8F/Windows%E5%AE%98%E6%96%B9.iso\">https://alist.huijia.cf/d/hui/%E8%BD%AF%E4%BB%B6/%E7%B3%BB%E7%BB%9F%E9%95%9C%E5%83%8F/Windows%E5%AE%98%E6%96%B9.iso</a></li>\n</ul>\n<h3><span id=\"一-制作pe-u盘\">一、制作PE U盘</span></h3><ol>\n<li><p>下载微PE工具，win10系统：</p>\n</li>\n<li><p>格式化U盘：<br>鼠标右击插入的U盘，选择“格式化”，在文件系统处选择“NTFS”，点击“开始”（格式化时，文件系统选择NTFS是为了U盘能够存储单个内存大于4G的文件）。</p>\n</li>\n<li><p>点击“安装PE到U盘”。</p>\n</li>\n</ol>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220713172804689.png\" alt=\"image-20220713172804689\"></p>\n<ol start=\"4\">\n<li><p>点击“立即安装进U盘”（U盘卷标显示的名称为自己插入U盘的名称)。</p>\n</li>\n<li><p>点击“开始制作”。</p>\n</li>\n<li><p>将下载好的win10系统复制入U盘中</p>\n</li>\n</ol>\n<h3><span id=\"二-bios设置同上\">二、BIOS设置（同上）</span></h3><h3><span id=\"三-pe系统重装windows\">三、PE系统重装Windows</span></h3><hr>\n<p> <del>如需重新分盘或者格式化全盘，获得一个新的电脑系统请继续阅读本段：<br>如需保留系统盘外磁盘内容，跳过本段，否则数据丢失不负责呦！<br>打开分区助手——&gt;点击快速分区——&gt;执行即可<br>快速分区弹窗出现提示，需要注意以下几点<br>1.磁盘类型选择【MBR】<br>2.分区数目选择：多少个取决需求和硬盘大小<br>3.分区大小选择：第一个为主分区（即系统安装的分区），<br>一般建议25-100G左右即可（取决需求和硬盘大小）</del>  </p>\n<hr>\n<ol>\n<li><p>进入“PE系统”后，双击“<strong>CGI备份还原</strong>”。<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220713173017405.png\" alt=\"image-20220713173017405\"></p>\n</li>\n<li><p>选择“<strong>还原分区</strong>”，<strong>选择分区盘符为“C盘”</strong>，请选择镜像文件”处<strong>右侧点击“三个点”</strong>。</p>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220713173025631.png\" alt=\"image-20220713173025631\"></p>\n</li>\n<li><p>选择拷贝到U盘里的“镜像文件”（iso格式），点击“<strong>打开</strong>”。</p>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220713173033997.png\" alt=\"image-20220713173033997\"></p>\n</li>\n<li><p>选择自己所需要安装的版本（我这里选择Windows 7 旗舰版），点击“<strong>确定</strong>”。<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220713173043227.png\" alt=\"image-20220713173043227\"></p>\n</li>\n<li><p>点击“<strong>执行</strong>”。</p>\n</li>\n<li><p>勾选“重启”，点击“<strong>确定</strong>”。</p>\n</li>\n<li><p>正在还原分区。</p>\n</li>\n<li><p>显示“还原成功”，此时拔掉U盘，重启完成。</p>\n</li>\n</ol>\n<hr>\n<h2><span id=\"iso重装\">ISO重装</span></h2><ul>\n<li><strong>工具:</strong><br>  1、8G以上U盘<br>  2、软碟通：<a href=\"https://cn.ultraiso.net/xiazai.html\">软碟通官网</a>（直接免费下载试用）<br>  3、操作系统（此处提供纯净win10）： <a href=\"https://alist.huijia.cf/d/hui/%E8%BD%AF%E4%BB%B6/%E7%B3%BB%E7%BB%9F%E9%95%9C%E5%83%8F/Windows%E5%AE%98%E6%96%B9.iso\">https://alist.huijia.cf/d/hui/%E8%BD%AF%E4%BB%B6/%E7%B3%BB%E7%BB%9F%E9%95%9C%E5%83%8F/Windows%E5%AE%98%E6%96%B9.iso</a></li>\n</ul>\n<h3><span id=\"一-制作u盘启动盘\">一、制作U盘启动盘</span></h3><ol>\n<li><p>首先下载“软碟通”软件，下载后安装，选项默认，<em><strong>不要自己去勾选</strong></em>；安装完成后，<strong>不需要</strong>运行此软件。</p>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220713173540878.png\" alt=\"image-20220713173540878\"></p>\n</li>\n<li><p>下载一个win10操作系统，下载的操作系统不要下载在U盘里，电脑的任意一个盘都可以</p>\n</li>\n<li><p>下载好系统后，插好U盘，直接<strong>双击下载好的iso文件</strong><br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220713173610731.png\" alt=\"image-20220713173610731\"><br>弹出以下界面：点击“<strong>继续试用</strong>”<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220713173624605.png\" alt=\"image-20220713173624605\"></p>\n</li>\n<li><p>选择左侧“<strong>本地目录</strong>”的U盘盘符，<em><strong>千万不要选错</strong></em>，再选择工具拦的“启动”<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220713173641447.png\" alt=\"image-20220713173641447\"></p>\n</li>\n<li><p>在选中“<strong>写入硬盘映像</strong>”，（启动项里的第4个），跳出一个对话框，默认设置，直接点“<strong>格式化</strong>”，格式化完成后点“<strong>写入</strong>”，等待<strong>刻录成功</strong>，完成制作。<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220713173655658.png\" alt=\"image-20220713173655658\"></p>\n</li>\n</ol>\n<h3><span id=\"二-bios设置同上win10重装\">二、 BIOS设置（同上Win10重装）</span></h3><h3><span id=\"三-启动电脑选择系统划分盘符同上win10重装\">三、启动电脑,选择系统，划分盘符（同上Win10重装）。</span></h3><hr>\n<p>提供常用装机后、升级 以及 无线网卡驱动：</p>\n<ul>\n<li><strong>win10易升：</strong>  <a href=\"https://alist.huijia.cf/d/hui/%E8%BD%AF%E4%BB%B6/%E9%87%8D%E8%A3%85%E7%B3%BB%E7%BB%9F/win10%E6%98%93%E5%8D%87.exe\">win10易升</a> </li>\n<li><strong>360驱动大师（无线网卡驱动版）</strong>： <a href=\"https://alist.huijia.cf/d/hui/%E8%BD%AF%E4%BB%B6/%E9%87%8D%E8%A3%85%E7%B3%BB%E7%BB%9F/360DrvMgrInstaller_net.exe\">驱动大师</a></li>\n<li>**虚拟机(害怕电脑难以恢复的小白可以利用虚拟机进行第一次模拟测试)**：<a href=\"https://alist.huijia.cf/d/hui/%E8%BD%AF%E4%BB%B6/%E9%87%8D%E8%A3%85%E7%B3%BB%E7%BB%9F/VMware/VMware-workstation-full-16.0.exe\">虚拟机</a> </li>\n<li><strong>启动系统后。激活工具链接</strong>: <a href=\"https://alist.huijia.cf/d/hui/%E8%BD%AF%E4%BB%B6/%E9%87%8D%E8%A3%85%E7%B3%BB%E7%BB%9F/Win10%20%E6%95%B0%E5%AD%97%E6%BF%80%E6%B4%BB%E5%B7%A5%E5%85%B7.zip\">工具系统</a></li>\n</ul>\n","site":{"data":{}},"wordcount":2184,"excerpt":"","more":"<h1 id=\"重装系统教程\"><a href=\"#重装系统教程\" class=\"headerlink\" title=\"重装系统教程\"></a>重装系统教程</h1><hr>\n<ul>\n<li>入门IT第一步，来一个干净的电脑系统吧？<br>[toc]</li>\n</ul>\n<hr>\n<p><strong>（装机需谨慎，系统盘必须格式化，其他风险自测。）</strong><br>本教程提供三种重装系统方式，三种均为纯净装机,均需要U盘。</p>\n<ol>\n<li>windows10官方系统重装（新增！win10推荐）</li>\n<li>PE 重装，此方式会为装机者提供更多工具，包括分区大师，电脑密码解除等等工具。</li>\n<li>ISO重装，此方法傻瓜式操作，简单快捷，一键重装。</li>\n</ol>\n<hr>\n<h2 id=\"windows10官方系统重装（新增！win10推荐）\"><a href=\"#windows10官方系统重装（新增！win10推荐）\" class=\"headerlink\" title=\"windows10官方系统重装（新增！win10推荐）\"></a>windows10官方系统重装（新增！win10推荐）</h2><hr>\n<ul>\n<li>无需下载百度网盘中的系统镜像，但要注意在U盘制作过程保持网络畅通。win10工具会帮助我们自动下载系统。</li>\n<li>优点：为系统自动是官网较新的系统，重装完成后无需更新太多。而且绕过了限速的某云下载。</li>\n<li>缺点：只能安装win10系统</li>\n</ul>\n<hr>\n<h3 id=\"一、下载Windows10官网工具助手\"><a href=\"#一、下载Windows10官网工具助手\" class=\"headerlink\" title=\"一、下载Windows10官网工具助手\"></a>一、下载Windows10官网工具助手</h3><ul>\n<li><a href=\"https://www.microsoft.com/zh-cn/software-download/windows10\">Win10官网</a><br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/aHR0cDovL2hicS5pZHNlLnRvcC9ibG9nLzE1ODYzMDk3MTcwMTEucG5n\" alt=\"enter description here\"></li>\n</ul>\n<h3 id=\"二、制作U盘启动。\"><a href=\"#二、制作U盘启动。\" class=\"headerlink\" title=\"二、制作U盘启动。\"></a>二、制作U盘启动。</h3><ul>\n<li><p>选择为另一台安装介质 </p>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220713170952100.png\" alt=\"image-20220713170952100\"></p>\n</li>\n<li><p>取消推荐选项框，自行选择你想要的系统（仅有win10系统）<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220713171010482.png\" alt=\"image-20220713171010482\"></p>\n</li>\n<li><p>选择U盘</p>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220713171033069.png\" alt=\"image-20220713171033069\"></p>\n</li>\n<li><p>等待下载就可以了</p>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220713171046576.png\" alt=\"image-20220713171046576\"></p>\n</li>\n</ul>\n<h3 id=\"三、-系统BIOS选择（不同电脑不同）\"><a href=\"#三、-系统BIOS选择（不同电脑不同）\" class=\"headerlink\" title=\"三、 系统BIOS选择（不同电脑不同）\"></a>三、 系统BIOS选择（不同电脑不同）</h3><hr>\n<p><strong>1.进入BIOS设置，一般快捷键根据电脑有所不同；</strong></p>\n<ul>\n<li>普通电脑：度娘搜对应电脑开机快捷键，格式：<em>xxx型号电脑BIOS设置U盘为第一启动项</em></li>\n</ul>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/20304569-7e6753d98ad53197.png\" alt=\"img\"></p>\n<ul>\n<li>特殊电脑（联想系列部分新机）;关机状态用卡针点击电脑上的小孔（类似手机装卡孔）</li>\n</ul>\n<p><strong>2.BIOS设置（不同电脑设置难易程度不同）：</strong></p>\n<ul>\n<li><p>（此处为联想笔记本）进入BIOS~——&gt;按→光标移动到boot——&gt;设置页面如下图一：——&gt;按→光标到exit<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220713171534830.png\" alt=\"image-20220713171534830\"><br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220713171555082.png\" alt=\"image-20220713171555082\"></p>\n</li>\n<li><p>此过程的目的就是在启动电脑选择系统时选择到你的U盘启动，而不是电脑自己的硬盘。<br>所以虽然有多种启动方式，其过程一般在BOOT设置栏，看到自己的U盘，将其优先级别提高。如：<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220713171608972.png\" alt=\"image-20220713171608972\"></p>\n</li>\n<li><p>简单的电脑一般可以直接选择启动盘，直接点击即可。如：<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220713171616851.png\" alt=\"image-20220713171616851\"></p>\n</li>\n</ul>\n<h3 id=\"四、启动电脑-选择系统，划分盘符。\"><a href=\"#四、启动电脑-选择系统，划分盘符。\" class=\"headerlink\" title=\"四、启动电脑,选择系统，划分盘符。\"></a>四、启动电脑,选择系统，划分盘符。</h3><ol>\n<li><p>U盘启动后你会看见电脑屏幕会变为蓝色装机页面，以下的操作按照提示下一步就可以。</p>\n</li>\n<li><p>选择自定义：<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220713172100606.png\" alt=\"image-20220713172100606\"></p>\n</li>\n<li><p>删除原有分区<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220713172110691.png\" alt=\"image-20220713172110691\"></p>\n</li>\n<li><p>新建分区，最先创建出主分区，就是系统盘。或产生引导分区，无需理会。<img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220713172132928.png\" alt=\"image-20220713172132928\"></p>\n</li>\n<li><p>新建所有分区后，一直下一步然后等待，就OK。</p>\n</li>\n</ol>\n<hr>\n<h2 id=\"PE重装\"><a href=\"#PE重装\" class=\"headerlink\" title=\"PE重装\"></a>PE重装</h2><ul>\n<li><strong>工具:</strong><br>1、8G以上U盘<br>2、微PE工具：<a href=\"https://www.wepe.com.cn/download.html\">https://www.wepe.com.cn/download.html</a><br>3、操作系统（此处提供纯净win10）： <a href=\"https://alist.huijia.cf/d/hui/%E8%BD%AF%E4%BB%B6/%E7%B3%BB%E7%BB%9F%E9%95%9C%E5%83%8F/Windows%E5%AE%98%E6%96%B9.iso\">https://alist.huijia.cf/d/hui/%E8%BD%AF%E4%BB%B6/%E7%B3%BB%E7%BB%9F%E9%95%9C%E5%83%8F/Windows%E5%AE%98%E6%96%B9.iso</a></li>\n</ul>\n<h3 id=\"一、制作PE-U盘\"><a href=\"#一、制作PE-U盘\" class=\"headerlink\" title=\"一、制作PE U盘\"></a>一、制作PE U盘</h3><ol>\n<li><p>下载微PE工具，win10系统：</p>\n</li>\n<li><p>格式化U盘：<br>鼠标右击插入的U盘，选择“格式化”，在文件系统处选择“NTFS”，点击“开始”（格式化时，文件系统选择NTFS是为了U盘能够存储单个内存大于4G的文件）。</p>\n</li>\n<li><p>点击“安装PE到U盘”。</p>\n</li>\n</ol>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220713172804689.png\" alt=\"image-20220713172804689\"></p>\n<ol start=\"4\">\n<li><p>点击“立即安装进U盘”（U盘卷标显示的名称为自己插入U盘的名称)。</p>\n</li>\n<li><p>点击“开始制作”。</p>\n</li>\n<li><p>将下载好的win10系统复制入U盘中</p>\n</li>\n</ol>\n<h3 id=\"二、BIOS设置（同上）\"><a href=\"#二、BIOS设置（同上）\" class=\"headerlink\" title=\"二、BIOS设置（同上）\"></a>二、BIOS设置（同上）</h3><h3 id=\"三、PE系统重装Windows\"><a href=\"#三、PE系统重装Windows\" class=\"headerlink\" title=\"三、PE系统重装Windows\"></a>三、PE系统重装Windows</h3><hr>\n<p> <del>如需重新分盘或者格式化全盘，获得一个新的电脑系统请继续阅读本段：<br>如需保留系统盘外磁盘内容，跳过本段，否则数据丢失不负责呦！<br>打开分区助手——&gt;点击快速分区——&gt;执行即可<br>快速分区弹窗出现提示，需要注意以下几点<br>1.磁盘类型选择【MBR】<br>2.分区数目选择：多少个取决需求和硬盘大小<br>3.分区大小选择：第一个为主分区（即系统安装的分区），<br>一般建议25-100G左右即可（取决需求和硬盘大小）</del>  </p>\n<hr>\n<ol>\n<li><p>进入“PE系统”后，双击“<strong>CGI备份还原</strong>”。<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220713173017405.png\" alt=\"image-20220713173017405\"></p>\n</li>\n<li><p>选择“<strong>还原分区</strong>”，<strong>选择分区盘符为“C盘”</strong>，请选择镜像文件”处<strong>右侧点击“三个点”</strong>。</p>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220713173025631.png\" alt=\"image-20220713173025631\"></p>\n</li>\n<li><p>选择拷贝到U盘里的“镜像文件”（iso格式），点击“<strong>打开</strong>”。</p>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220713173033997.png\" alt=\"image-20220713173033997\"></p>\n</li>\n<li><p>选择自己所需要安装的版本（我这里选择Windows 7 旗舰版），点击“<strong>确定</strong>”。<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220713173043227.png\" alt=\"image-20220713173043227\"></p>\n</li>\n<li><p>点击“<strong>执行</strong>”。</p>\n</li>\n<li><p>勾选“重启”，点击“<strong>确定</strong>”。</p>\n</li>\n<li><p>正在还原分区。</p>\n</li>\n<li><p>显示“还原成功”，此时拔掉U盘，重启完成。</p>\n</li>\n</ol>\n<hr>\n<h2 id=\"ISO重装\"><a href=\"#ISO重装\" class=\"headerlink\" title=\"ISO重装\"></a>ISO重装</h2><ul>\n<li><strong>工具:</strong><br>  1、8G以上U盘<br>  2、软碟通：<a href=\"https://cn.ultraiso.net/xiazai.html\">软碟通官网</a>（直接免费下载试用）<br>  3、操作系统（此处提供纯净win10）： <a href=\"https://alist.huijia.cf/d/hui/%E8%BD%AF%E4%BB%B6/%E7%B3%BB%E7%BB%9F%E9%95%9C%E5%83%8F/Windows%E5%AE%98%E6%96%B9.iso\">https://alist.huijia.cf/d/hui/%E8%BD%AF%E4%BB%B6/%E7%B3%BB%E7%BB%9F%E9%95%9C%E5%83%8F/Windows%E5%AE%98%E6%96%B9.iso</a></li>\n</ul>\n<h3 id=\"一、制作U盘启动盘\"><a href=\"#一、制作U盘启动盘\" class=\"headerlink\" title=\"一、制作U盘启动盘\"></a>一、制作U盘启动盘</h3><ol>\n<li><p>首先下载“软碟通”软件，下载后安装，选项默认，<em><strong>不要自己去勾选</strong></em>；安装完成后，<strong>不需要</strong>运行此软件。</p>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220713173540878.png\" alt=\"image-20220713173540878\"></p>\n</li>\n<li><p>下载一个win10操作系统，下载的操作系统不要下载在U盘里，电脑的任意一个盘都可以</p>\n</li>\n<li><p>下载好系统后，插好U盘，直接<strong>双击下载好的iso文件</strong><br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220713173610731.png\" alt=\"image-20220713173610731\"><br>弹出以下界面：点击“<strong>继续试用</strong>”<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220713173624605.png\" alt=\"image-20220713173624605\"></p>\n</li>\n<li><p>选择左侧“<strong>本地目录</strong>”的U盘盘符，<em><strong>千万不要选错</strong></em>，再选择工具拦的“启动”<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220713173641447.png\" alt=\"image-20220713173641447\"></p>\n</li>\n<li><p>在选中“<strong>写入硬盘映像</strong>”，（启动项里的第4个），跳出一个对话框，默认设置，直接点“<strong>格式化</strong>”，格式化完成后点“<strong>写入</strong>”，等待<strong>刻录成功</strong>，完成制作。<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220713173655658.png\" alt=\"image-20220713173655658\"></p>\n</li>\n</ol>\n<h3 id=\"二、-BIOS设置（同上Win10重装）\"><a href=\"#二、-BIOS设置（同上Win10重装）\" class=\"headerlink\" title=\"二、 BIOS设置（同上Win10重装）\"></a>二、 BIOS设置（同上Win10重装）</h3><h3 id=\"三、启动电脑-选择系统，划分盘符（同上Win10重装）。\"><a href=\"#三、启动电脑-选择系统，划分盘符（同上Win10重装）。\" class=\"headerlink\" title=\"三、启动电脑,选择系统，划分盘符（同上Win10重装）。\"></a>三、启动电脑,选择系统，划分盘符（同上Win10重装）。</h3><hr>\n<p>提供常用装机后、升级 以及 无线网卡驱动：</p>\n<ul>\n<li><strong>win10易升：</strong>  <a href=\"https://alist.huijia.cf/d/hui/%E8%BD%AF%E4%BB%B6/%E9%87%8D%E8%A3%85%E7%B3%BB%E7%BB%9F/win10%E6%98%93%E5%8D%87.exe\">win10易升</a> </li>\n<li><strong>360驱动大师（无线网卡驱动版）</strong>： <a href=\"https://alist.huijia.cf/d/hui/%E8%BD%AF%E4%BB%B6/%E9%87%8D%E8%A3%85%E7%B3%BB%E7%BB%9F/360DrvMgrInstaller_net.exe\">驱动大师</a></li>\n<li>**虚拟机(害怕电脑难以恢复的小白可以利用虚拟机进行第一次模拟测试)**：<a href=\"https://alist.huijia.cf/d/hui/%E8%BD%AF%E4%BB%B6/%E9%87%8D%E8%A3%85%E7%B3%BB%E7%BB%9F/VMware/VMware-workstation-full-16.0.exe\">虚拟机</a> </li>\n<li><strong>启动系统后。激活工具链接</strong>: <a href=\"https://alist.huijia.cf/d/hui/%E8%BD%AF%E4%BB%B6/%E9%87%8D%E8%A3%85%E7%B3%BB%E7%BB%9F/Win10%20%E6%95%B0%E5%AD%97%E6%BF%80%E6%B4%BB%E5%B7%A5%E5%85%B7.zip\">工具系统</a></li>\n</ul>\n"},{"_content":"# 小书匠绑定阿里云oss+阿里云oss图片url永久有效设置\n\n---\n\n[toc]\n\n---\n\n## 一、开通阿里云oss服务[阿里云oss服务](https://www.aliyun.com/minisite/goods?userCode=e3v6m6yo)\n![image-20220430162853521](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430162853521.png)\n## 二、创建Bucket\n![image-20220430162859071](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430162859071.png)\n## 三、文件管理创建image/ 目录\n![image-20220430162928754](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430162928754.png)\n## 四、进入小书匠绑定\n![image-20220430162936781](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430162936781.png)\n1. 访问入口：如图位置复制并加上前缀`https://`\n  ![image-20220430162944011](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430162944011.png)\n\n  3.两个key，点击头像AccessKey，如果没有就新增一个。\n  ![enter description here](https://img-1256282866.cos.ap-beijing.myqcloud.com/aHR0cHM6Ly94c2otaW1nLm9zcy1jbi1iZWlqaW5nLmFsaXl1bmNzLmNvbS9pbWFnZS8xNTg0ODY1NjY3MTc1LnBuZw.png)![enter description here](https://img-1256282866.cos.ap-beijing.myqcloud.com/aHR0cHM6Ly94c2otaW1nLm9zcy1jbi1iZWlqaW5nLmFsaXl1bmNzLmNvbS9pbWFnZS8xNTg0ODY1NzQ4OTUyLnBuZw.png)\n  4.文件目录：把`小书匠`三字改为`image`\n  ![image-20220430163003822](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430163003822.png)\n  5.图片前缀：上传一张图片到oss的image目录下在点击图片详情。复制前缀（一般与1相同）。\n  ![image-20220430163021588](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430163021588.png)\n  ![image-20220430163026296](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430163026296.png)\n  6.保存完成。\n  ![image-20220430163034046](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430163034046.png)\n---\n\n<font color=red size=5> 注：默认的bucket中的图片有url失效时间，建议将其设为永久有效。基础设置中Bucket ACL设为公共读写即可。</font>\n![image-20220430163039134](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430163039134.png)\n","source":"_posts/BookMark/安装配置/小书匠绑定阿里云oss+阿里云oss图片url永久有效设置--菜鸟小回.md","raw":"# 小书匠绑定阿里云oss+阿里云oss图片url永久有效设置\n\n---\n\n[toc]\n\n---\n\n## 一、开通阿里云oss服务[阿里云oss服务](https://www.aliyun.com/minisite/goods?userCode=e3v6m6yo)\n![image-20220430162853521](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430162853521.png)\n## 二、创建Bucket\n![image-20220430162859071](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430162859071.png)\n## 三、文件管理创建image/ 目录\n![image-20220430162928754](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430162928754.png)\n## 四、进入小书匠绑定\n![image-20220430162936781](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430162936781.png)\n1. 访问入口：如图位置复制并加上前缀`https://`\n  ![image-20220430162944011](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430162944011.png)\n\n  3.两个key，点击头像AccessKey，如果没有就新增一个。\n  ![enter description here](https://img-1256282866.cos.ap-beijing.myqcloud.com/aHR0cHM6Ly94c2otaW1nLm9zcy1jbi1iZWlqaW5nLmFsaXl1bmNzLmNvbS9pbWFnZS8xNTg0ODY1NjY3MTc1LnBuZw.png)![enter description here](https://img-1256282866.cos.ap-beijing.myqcloud.com/aHR0cHM6Ly94c2otaW1nLm9zcy1jbi1iZWlqaW5nLmFsaXl1bmNzLmNvbS9pbWFnZS8xNTg0ODY1NzQ4OTUyLnBuZw.png)\n  4.文件目录：把`小书匠`三字改为`image`\n  ![image-20220430163003822](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430163003822.png)\n  5.图片前缀：上传一张图片到oss的image目录下在点击图片详情。复制前缀（一般与1相同）。\n  ![image-20220430163021588](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430163021588.png)\n  ![image-20220430163026296](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430163026296.png)\n  6.保存完成。\n  ![image-20220430163034046](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430163034046.png)\n---\n\n<font color=red size=5> 注：默认的bucket中的图片有url失效时间，建议将其设为永久有效。基础设置中Bucket ACL设为公共读写即可。</font>\n![image-20220430163039134](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430163039134.png)\n","slug":"BookMark/安装配置/小书匠绑定阿里云oss+阿里云oss图片url永久有效设置--菜鸟小回","published":1,"date":"2022-07-18T09:51:20.000Z","updated":"2022-09-01T10:16:37.128Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cl7ptszok001aaba5csi426po","content":"<h1><span id=\"小书匠绑定阿里云oss阿里云oss图片url永久有效设置\">小书匠绑定阿里云oss+阿里云oss图片url永久有效设置</span></h1><hr>\n<p>[toc]</p>\n<hr>\n<h2><span id=\"一-开通阿里云oss服务阿里云oss服务\">一、开通阿里云oss服务</span></h2><p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430162853521.png\" alt=\"image-20220430162853521\"></p>\n<h2><span id=\"二-创建bucket\">二、创建Bucket</span></h2><p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430162859071.png\" alt=\"image-20220430162859071\"></p>\n<h2><span id=\"三-文件管理创建imagex2f-目录\">三、文件管理创建image&#x2F; 目录</span></h2><p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430162928754.png\" alt=\"image-20220430162928754\"></p>\n<h2><span id=\"四-进入小书匠绑定\">四、进入小书匠绑定</span></h2><p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430162936781.png\" alt=\"image-20220430162936781\"></p>\n<ol>\n<li>访问入口：如图位置复制并加上前缀<code>https://</code><br>  <img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430162944011.png\" alt=\"image-20220430162944011\"></li>\n</ol>\n<p>  3.两个key，点击头像AccessKey，如果没有就新增一个。<br>  <img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/aHR0cHM6Ly94c2otaW1nLm9zcy1jbi1iZWlqaW5nLmFsaXl1bmNzLmNvbS9pbWFnZS8xNTg0ODY1NjY3MTc1LnBuZw.png\" alt=\"enter description here\"><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/aHR0cHM6Ly94c2otaW1nLm9zcy1jbi1iZWlqaW5nLmFsaXl1bmNzLmNvbS9pbWFnZS8xNTg0ODY1NzQ4OTUyLnBuZw.png\" alt=\"enter description here\"><br>  4.文件目录：把<code>小书匠</code>三字改为<code>image</code><br>  <img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430163003822.png\" alt=\"image-20220430163003822\"><br>  5.图片前缀：上传一张图片到oss的image目录下在点击图片详情。复制前缀（一般与1相同）。<br>  <img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430163021588.png\" alt=\"image-20220430163021588\"><br>  <img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430163026296.png\" alt=\"image-20220430163026296\"><br>  6.保存完成。<br>  <img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430163034046.png\" alt=\"image-20220430163034046\"></p>\n<hr>\n<p><font color=\"red\" size=\"5\"> 注：默认的bucket中的图片有url失效时间，建议将其设为永久有效。基础设置中Bucket ACL设为公共读写即可。</font><br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430163039134.png\" alt=\"image-20220430163039134\"></p>\n","site":{"data":{}},"wordcount":282,"excerpt":"","more":"<h1 id=\"小书匠绑定阿里云oss-阿里云oss图片url永久有效设置\"><a href=\"#小书匠绑定阿里云oss-阿里云oss图片url永久有效设置\" class=\"headerlink\" title=\"小书匠绑定阿里云oss+阿里云oss图片url永久有效设置\"></a>小书匠绑定阿里云oss+阿里云oss图片url永久有效设置</h1><hr>\n<p>[toc]</p>\n<hr>\n<h2 id=\"一、开通阿里云oss服务阿里云oss服务\"><a href=\"#一、开通阿里云oss服务阿里云oss服务\" class=\"headerlink\" title=\"一、开通阿里云oss服务阿里云oss服务\"></a>一、开通阿里云oss服务<a href=\"https://www.aliyun.com/minisite/goods?userCode=e3v6m6yo\">阿里云oss服务</a></h2><p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430162853521.png\" alt=\"image-20220430162853521\"></p>\n<h2 id=\"二、创建Bucket\"><a href=\"#二、创建Bucket\" class=\"headerlink\" title=\"二、创建Bucket\"></a>二、创建Bucket</h2><p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430162859071.png\" alt=\"image-20220430162859071\"></p>\n<h2 id=\"三、文件管理创建image-x2F-目录\"><a href=\"#三、文件管理创建image-x2F-目录\" class=\"headerlink\" title=\"三、文件管理创建image&#x2F; 目录\"></a>三、文件管理创建image&#x2F; 目录</h2><p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430162928754.png\" alt=\"image-20220430162928754\"></p>\n<h2 id=\"四、进入小书匠绑定\"><a href=\"#四、进入小书匠绑定\" class=\"headerlink\" title=\"四、进入小书匠绑定\"></a>四、进入小书匠绑定</h2><p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430162936781.png\" alt=\"image-20220430162936781\"></p>\n<ol>\n<li>访问入口：如图位置复制并加上前缀<code>https://</code><br>  <img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430162944011.png\" alt=\"image-20220430162944011\"></li>\n</ol>\n<p>  3.两个key，点击头像AccessKey，如果没有就新增一个。<br>  <img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/aHR0cHM6Ly94c2otaW1nLm9zcy1jbi1iZWlqaW5nLmFsaXl1bmNzLmNvbS9pbWFnZS8xNTg0ODY1NjY3MTc1LnBuZw.png\" alt=\"enter description here\"><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/aHR0cHM6Ly94c2otaW1nLm9zcy1jbi1iZWlqaW5nLmFsaXl1bmNzLmNvbS9pbWFnZS8xNTg0ODY1NzQ4OTUyLnBuZw.png\" alt=\"enter description here\"><br>  4.文件目录：把<code>小书匠</code>三字改为<code>image</code><br>  <img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430163003822.png\" alt=\"image-20220430163003822\"><br>  5.图片前缀：上传一张图片到oss的image目录下在点击图片详情。复制前缀（一般与1相同）。<br>  <img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430163021588.png\" alt=\"image-20220430163021588\"><br>  <img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430163026296.png\" alt=\"image-20220430163026296\"><br>  6.保存完成。<br>  <img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430163034046.png\" alt=\"image-20220430163034046\"></p>\n<hr>\n<p><font color=red size=5> 注：默认的bucket中的图片有url失效时间，建议将其设为永久有效。基础设置中Bucket ACL设为公共读写即可。</font><br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430163039134.png\" alt=\"image-20220430163039134\"></p>\n"},{"_content":"# 无水印上传本地图片到网络获取地址+小书匠使用 +github和 七牛云 图床绑定 \n\n---\n\n[toc]\n\n---\n前言：\n最近开始写博客，缺少一个Markdown编辑器。寻找了两三天终于找到了这款《小书匠》，可复制粘图，可导出多种格式，导出.md文档可以直接导入博客，十分方便快捷。但是存在问题时图片转存的问题。本地图片在小书匠里可以使用，但导出好的小书匠.md文件想上传到csdn，是必须需要将图片上传到网络图床的。此处选择github图床储存仓库，当然此处也算是无水印将图片从本地上传到网络获取地址的一种方法了。\n\n\n---\n## 一、github图床绑定\n\n1. 左侧菜单栏->\"**绑定**\"\n     ![image-20220430161107724](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430161107724.png)\n\n2. 选择github\n     ![image-20220430161131277](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430161131277.png)\n\n3. 选择下方申请“**token**\"\n     ![image-20220430161144278](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430161144278.png)\n\n4. 进入github 登陆后 自己设置一个名字，选项勾选如下图，点击Generate\n     ![image-20220430161204257](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430161204257.png)\n     ![image-20220430161218609](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430161218609.png)\n\n5. 得到“**token**”值填入小书匠下图位置：\n     ![image-20220430161234225](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430161234225.png)\n     ![image-20220430161244913](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430161244913.png)\n\n6. github右上角点击**New repository**：\n     ![image-20220430161309167](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430161309167.png)\n\n7. 填写**name**，此处**仓库名**填到小书匠下图位置，**ur前缀**自动生成，确定：\n     ![image-20220430161335578](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430161335578.png)\n     ![image-20220430161404016](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430161404016.png)\n\n8. 最后选择刚刚建好的图床即可：\n     ![enter description here](https://img-1256282866.cos.ap-beijing.myqcloud.com/aHR0cHM6Ly9naXRodWIuY29tL215aHVpYmJhb3FpL2NjYy9yYXcvbWFzdGVyLyVFNSVCMCU4RiVFNCVCOSVBNiVFNSU4QyVBMC8xNTYzNjgzMjc3NjgzLnBuZw.png)\n\n9. 完成图床绑定，截个图放入小书匠编辑框就可以发现github仓库中自动生成文件夹\n   ![image-20220430161429950](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430161429950.png)\n   ![image-20220430161441268](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430161441268.png)\n\n10. 上传的图片都保存在这里：\n    ![image-20220430161452488](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430161452488.png)\n\n---\n\n  <center><font color=red size=5>github图床绑定已经完成了</font>\n\n  - 注意：但是我这边可能网络有问题，每次上传图片速度不是很好，同样感觉图片上传速度欠佳的小伙伴们可以尝试下方七牛云图床。\n\n---\n\n  ##  二、七牛云图床绑定（建议使用）\n  - 小书匠中绑定位置与github绑定位置相同，此处不做介绍：\n\n1. 先去申请并实名认证一个七牛云账户（需要身份证照片）；\n2. 看到我们所需要填写的内容：共6个位置\n\n![image-20220430161512113](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430161512113.png)\n\n3. 左侧菜单栏选择对象存储-->**新建存储** -->填写下面内容；此处可以得到需填图的<font color=red>  4、1</font>\n   ![image-20220430161521567](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430161521567.png)\n4.  创建完成点击右上角 **个人中心**--> **秘钥管理**得到 <font color=red>  2、3</font>\n   ![image-20220430161528002](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430161528002.png)![image-20220430161541983](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430161541983.png)\n   5. 不要用汉字作为图片后缀，容易乱码，文件名生成规则-->“**小书匠**”三个字改为“**blog**” 得到 <font color=red>  5</font>\n   6. 回到刚刚建好的储存空间中-->**内容管理**外联默认域名就是<font color=red>  6</font>\n      ![image-20220430161556743](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430161556743.png)<center><font color=red size=5>七牛云图床绑定已经完成了</font>\n\n  ## 三、无水印本地图片上传得到图片外联地址\n1. 截图、复制、导入图片到小书匠编辑框自动生成图片外联，复制即可；\n\n2. 也可去七牛云的存储空间找上传的图片：\n   ![image-20220430161611268](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430161611268.png)\n   ![image-20220430161624986](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430161624986.png)\n","source":"_posts/BookMark/安装配置/无水印上传本地图片到网络获取地址+小书匠使用 +github和 七牛云 图床绑定--菜鸟小回.md","raw":"# 无水印上传本地图片到网络获取地址+小书匠使用 +github和 七牛云 图床绑定 \n\n---\n\n[toc]\n\n---\n前言：\n最近开始写博客，缺少一个Markdown编辑器。寻找了两三天终于找到了这款《小书匠》，可复制粘图，可导出多种格式，导出.md文档可以直接导入博客，十分方便快捷。但是存在问题时图片转存的问题。本地图片在小书匠里可以使用，但导出好的小书匠.md文件想上传到csdn，是必须需要将图片上传到网络图床的。此处选择github图床储存仓库，当然此处也算是无水印将图片从本地上传到网络获取地址的一种方法了。\n\n\n---\n## 一、github图床绑定\n\n1. 左侧菜单栏->\"**绑定**\"\n     ![image-20220430161107724](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430161107724.png)\n\n2. 选择github\n     ![image-20220430161131277](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430161131277.png)\n\n3. 选择下方申请“**token**\"\n     ![image-20220430161144278](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430161144278.png)\n\n4. 进入github 登陆后 自己设置一个名字，选项勾选如下图，点击Generate\n     ![image-20220430161204257](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430161204257.png)\n     ![image-20220430161218609](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430161218609.png)\n\n5. 得到“**token**”值填入小书匠下图位置：\n     ![image-20220430161234225](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430161234225.png)\n     ![image-20220430161244913](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430161244913.png)\n\n6. github右上角点击**New repository**：\n     ![image-20220430161309167](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430161309167.png)\n\n7. 填写**name**，此处**仓库名**填到小书匠下图位置，**ur前缀**自动生成，确定：\n     ![image-20220430161335578](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430161335578.png)\n     ![image-20220430161404016](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430161404016.png)\n\n8. 最后选择刚刚建好的图床即可：\n     ![enter description here](https://img-1256282866.cos.ap-beijing.myqcloud.com/aHR0cHM6Ly9naXRodWIuY29tL215aHVpYmJhb3FpL2NjYy9yYXcvbWFzdGVyLyVFNSVCMCU4RiVFNCVCOSVBNiVFNSU4QyVBMC8xNTYzNjgzMjc3NjgzLnBuZw.png)\n\n9. 完成图床绑定，截个图放入小书匠编辑框就可以发现github仓库中自动生成文件夹\n   ![image-20220430161429950](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430161429950.png)\n   ![image-20220430161441268](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430161441268.png)\n\n10. 上传的图片都保存在这里：\n    ![image-20220430161452488](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430161452488.png)\n\n---\n\n  <center><font color=red size=5>github图床绑定已经完成了</font>\n\n  - 注意：但是我这边可能网络有问题，每次上传图片速度不是很好，同样感觉图片上传速度欠佳的小伙伴们可以尝试下方七牛云图床。\n\n---\n\n  ##  二、七牛云图床绑定（建议使用）\n  - 小书匠中绑定位置与github绑定位置相同，此处不做介绍：\n\n1. 先去申请并实名认证一个七牛云账户（需要身份证照片）；\n2. 看到我们所需要填写的内容：共6个位置\n\n![image-20220430161512113](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430161512113.png)\n\n3. 左侧菜单栏选择对象存储-->**新建存储** -->填写下面内容；此处可以得到需填图的<font color=red>  4、1</font>\n   ![image-20220430161521567](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430161521567.png)\n4.  创建完成点击右上角 **个人中心**--> **秘钥管理**得到 <font color=red>  2、3</font>\n   ![image-20220430161528002](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430161528002.png)![image-20220430161541983](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430161541983.png)\n   5. 不要用汉字作为图片后缀，容易乱码，文件名生成规则-->“**小书匠**”三个字改为“**blog**” 得到 <font color=red>  5</font>\n   6. 回到刚刚建好的储存空间中-->**内容管理**外联默认域名就是<font color=red>  6</font>\n      ![image-20220430161556743](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430161556743.png)<center><font color=red size=5>七牛云图床绑定已经完成了</font>\n\n  ## 三、无水印本地图片上传得到图片外联地址\n1. 截图、复制、导入图片到小书匠编辑框自动生成图片外联，复制即可；\n\n2. 也可去七牛云的存储空间找上传的图片：\n   ![image-20220430161611268](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430161611268.png)\n   ![image-20220430161624986](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430161624986.png)\n","slug":"BookMark/安装配置/无水印上传本地图片到网络获取地址+小书匠使用 +github和 七牛云 图床绑定--菜鸟小回","published":1,"date":"2022-07-25T05:51:39.000Z","updated":"2022-09-01T10:17:05.565Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cl7ptszok001caba5eac769wf","content":"<h1><span id=\"无水印上传本地图片到网络获取地址小书匠使用-github和-七牛云-图床绑定\">无水印上传本地图片到网络获取地址+小书匠使用 +github和 七牛云 图床绑定</span></h1><hr>\n<p>[toc]</p>\n<hr>\n<p>前言：<br>最近开始写博客，缺少一个Markdown编辑器。寻找了两三天终于找到了这款《小书匠》，可复制粘图，可导出多种格式，导出.md文档可以直接导入博客，十分方便快捷。但是存在问题时图片转存的问题。本地图片在小书匠里可以使用，但导出好的小书匠.md文件想上传到csdn，是必须需要将图片上传到网络图床的。此处选择github图床储存仓库，当然此处也算是无水印将图片从本地上传到网络获取地址的一种方法了。</p>\n<hr>\n<h2><span id=\"一-github图床绑定\">一、github图床绑定</span></h2><ol>\n<li><p>左侧菜单栏-&gt;”<strong>绑定</strong>“<br>  <img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430161107724.png\" alt=\"image-20220430161107724\"></p>\n</li>\n<li><p>选择github<br>  <img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430161131277.png\" alt=\"image-20220430161131277\"></p>\n</li>\n<li><p>选择下方申请“<strong>token</strong>“<br>  <img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430161144278.png\" alt=\"image-20220430161144278\"></p>\n</li>\n<li><p>进入github 登陆后 自己设置一个名字，选项勾选如下图，点击Generate<br>  <img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430161204257.png\" alt=\"image-20220430161204257\"><br>  <img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430161218609.png\" alt=\"image-20220430161218609\"></p>\n</li>\n<li><p>得到“<strong>token</strong>”值填入小书匠下图位置：<br>  <img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430161234225.png\" alt=\"image-20220430161234225\"><br>  <img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430161244913.png\" alt=\"image-20220430161244913\"></p>\n</li>\n<li><p>github右上角点击<strong>New repository</strong>：<br>  <img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430161309167.png\" alt=\"image-20220430161309167\"></p>\n</li>\n<li><p>填写<strong>name</strong>，此处<strong>仓库名</strong>填到小书匠下图位置，<strong>ur前缀</strong>自动生成，确定：<br>  <img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430161335578.png\" alt=\"image-20220430161335578\"><br>  <img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430161404016.png\" alt=\"image-20220430161404016\"></p>\n</li>\n<li><p>最后选择刚刚建好的图床即可：<br>  <img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/aHR0cHM6Ly9naXRodWIuY29tL215aHVpYmJhb3FpL2NjYy9yYXcvbWFzdGVyLyVFNSVCMCU4RiVFNCVCOSVBNiVFNSU4QyVBMC8xNTYzNjgzMjc3NjgzLnBuZw.png\" alt=\"enter description here\"></p>\n</li>\n<li><p>完成图床绑定，截个图放入小书匠编辑框就可以发现github仓库中自动生成文件夹<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430161429950.png\" alt=\"image-20220430161429950\"><br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430161441268.png\" alt=\"image-20220430161441268\"></p>\n</li>\n<li><p>上传的图片都保存在这里：<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430161452488.png\" alt=\"image-20220430161452488\"></p>\n</li>\n</ol>\n<hr>\n  <center><font color=\"red\" size=\"5\">github图床绑定已经完成了</font>\n\n<ul>\n<li>注意：但是我这边可能网络有问题，每次上传图片速度不是很好，同样感觉图片上传速度欠佳的小伙伴们可以尝试下方七牛云图床。</li>\n</ul>\n<hr>\n<h2><span id=\"二-七牛云图床绑定建议使用\">二、七牛云图床绑定（建议使用）</span></h2><ul>\n<li>小书匠中绑定位置与github绑定位置相同，此处不做介绍：</li>\n</ul>\n<ol>\n<li>先去申请并实名认证一个七牛云账户（需要身份证照片）；</li>\n<li>看到我们所需要填写的内容：共6个位置</li>\n</ol>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430161512113.png\" alt=\"image-20220430161512113\"></p>\n<ol start=\"3\">\n<li>左侧菜单栏选择对象存储–&gt;<strong>新建存储</strong> –&gt;填写下面内容；此处可以得到需填图的<font color=\"red\">  4、1</font><br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430161521567.png\" alt=\"image-20220430161521567\"></li>\n<li>创建完成点击右上角 <strong>个人中心</strong>–&gt; <strong>秘钥管理</strong>得到 <font color=\"red\">  2、3</font><br>   <img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430161528002.png\" alt=\"image-20220430161528002\"><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430161541983.png\" alt=\"image-20220430161541983\"></li>\n<li>不要用汉字作为图片后缀，容易乱码，文件名生成规则–&gt;“<strong>小书匠</strong>”三个字改为“<strong>blog</strong>” 得到 <font color=\"red\">  5</font></li>\n<li>回到刚刚建好的储存空间中–&gt;<strong>内容管理</strong>外联默认域名就是<font color=\"red\">  6</font><br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430161556743.png\" alt=\"image-20220430161556743\"><center><font color=\"red\" size=\"5\">七牛云图床绑定已经完成了</font></center></li>\n</ol>\n<h2><span id=\"三-无水印本地图片上传得到图片外联地址\">三、无水印本地图片上传得到图片外联地址</span></h2><ol>\n<li><p>截图、复制、导入图片到小书匠编辑框自动生成图片外联，复制即可；</p>\n</li>\n<li><p>也可去七牛云的存储空间找上传的图片：<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430161611268.png\" alt=\"image-20220430161611268\"><br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430161624986.png\" alt=\"image-20220430161624986\"></p>\n</li>\n</ol>\n</center>","site":{"data":{}},"wordcount":862,"excerpt":"","more":"<h1 id=\"无水印上传本地图片到网络获取地址-小书匠使用-github和-七牛云-图床绑定\"><a href=\"#无水印上传本地图片到网络获取地址-小书匠使用-github和-七牛云-图床绑定\" class=\"headerlink\" title=\"无水印上传本地图片到网络获取地址+小书匠使用 +github和 七牛云 图床绑定\"></a>无水印上传本地图片到网络获取地址+小书匠使用 +github和 七牛云 图床绑定</h1><hr>\n<p>[toc]</p>\n<hr>\n<p>前言：<br>最近开始写博客，缺少一个Markdown编辑器。寻找了两三天终于找到了这款《小书匠》，可复制粘图，可导出多种格式，导出.md文档可以直接导入博客，十分方便快捷。但是存在问题时图片转存的问题。本地图片在小书匠里可以使用，但导出好的小书匠.md文件想上传到csdn，是必须需要将图片上传到网络图床的。此处选择github图床储存仓库，当然此处也算是无水印将图片从本地上传到网络获取地址的一种方法了。</p>\n<hr>\n<h2 id=\"一、github图床绑定\"><a href=\"#一、github图床绑定\" class=\"headerlink\" title=\"一、github图床绑定\"></a>一、github图床绑定</h2><ol>\n<li><p>左侧菜单栏-&gt;”<strong>绑定</strong>“<br>  <img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430161107724.png\" alt=\"image-20220430161107724\"></p>\n</li>\n<li><p>选择github<br>  <img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430161131277.png\" alt=\"image-20220430161131277\"></p>\n</li>\n<li><p>选择下方申请“<strong>token</strong>“<br>  <img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430161144278.png\" alt=\"image-20220430161144278\"></p>\n</li>\n<li><p>进入github 登陆后 自己设置一个名字，选项勾选如下图，点击Generate<br>  <img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430161204257.png\" alt=\"image-20220430161204257\"><br>  <img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430161218609.png\" alt=\"image-20220430161218609\"></p>\n</li>\n<li><p>得到“<strong>token</strong>”值填入小书匠下图位置：<br>  <img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430161234225.png\" alt=\"image-20220430161234225\"><br>  <img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430161244913.png\" alt=\"image-20220430161244913\"></p>\n</li>\n<li><p>github右上角点击<strong>New repository</strong>：<br>  <img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430161309167.png\" alt=\"image-20220430161309167\"></p>\n</li>\n<li><p>填写<strong>name</strong>，此处<strong>仓库名</strong>填到小书匠下图位置，<strong>ur前缀</strong>自动生成，确定：<br>  <img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430161335578.png\" alt=\"image-20220430161335578\"><br>  <img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430161404016.png\" alt=\"image-20220430161404016\"></p>\n</li>\n<li><p>最后选择刚刚建好的图床即可：<br>  <img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/aHR0cHM6Ly9naXRodWIuY29tL215aHVpYmJhb3FpL2NjYy9yYXcvbWFzdGVyLyVFNSVCMCU4RiVFNCVCOSVBNiVFNSU4QyVBMC8xNTYzNjgzMjc3NjgzLnBuZw.png\" alt=\"enter description here\"></p>\n</li>\n<li><p>完成图床绑定，截个图放入小书匠编辑框就可以发现github仓库中自动生成文件夹<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430161429950.png\" alt=\"image-20220430161429950\"><br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430161441268.png\" alt=\"image-20220430161441268\"></p>\n</li>\n<li><p>上传的图片都保存在这里：<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430161452488.png\" alt=\"image-20220430161452488\"></p>\n</li>\n</ol>\n<hr>\n  <center><font color=red size=5>github图床绑定已经完成了</font>\n\n<ul>\n<li>注意：但是我这边可能网络有问题，每次上传图片速度不是很好，同样感觉图片上传速度欠佳的小伙伴们可以尝试下方七牛云图床。</li>\n</ul>\n<hr>\n<h2 id=\"二、七牛云图床绑定（建议使用）\"><a href=\"#二、七牛云图床绑定（建议使用）\" class=\"headerlink\" title=\"二、七牛云图床绑定（建议使用）\"></a>二、七牛云图床绑定（建议使用）</h2><ul>\n<li>小书匠中绑定位置与github绑定位置相同，此处不做介绍：</li>\n</ul>\n<ol>\n<li>先去申请并实名认证一个七牛云账户（需要身份证照片）；</li>\n<li>看到我们所需要填写的内容：共6个位置</li>\n</ol>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430161512113.png\" alt=\"image-20220430161512113\"></p>\n<ol start=\"3\">\n<li>左侧菜单栏选择对象存储–&gt;<strong>新建存储</strong> –&gt;填写下面内容；此处可以得到需填图的<font color=red>  4、1</font><br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430161521567.png\" alt=\"image-20220430161521567\"></li>\n<li>创建完成点击右上角 <strong>个人中心</strong>–&gt; <strong>秘钥管理</strong>得到 <font color=red>  2、3</font><br>   <img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430161528002.png\" alt=\"image-20220430161528002\"><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430161541983.png\" alt=\"image-20220430161541983\"></li>\n<li>不要用汉字作为图片后缀，容易乱码，文件名生成规则–&gt;“<strong>小书匠</strong>”三个字改为“<strong>blog</strong>” 得到 <font color=red>  5</font></li>\n<li>回到刚刚建好的储存空间中–&gt;<strong>内容管理</strong>外联默认域名就是<font color=red>  6</font><br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430161556743.png\" alt=\"image-20220430161556743\"><center><font color=red size=5>七牛云图床绑定已经完成了</font></li>\n</ol>\n<h2 id=\"三、无水印本地图片上传得到图片外联地址\"><a href=\"#三、无水印本地图片上传得到图片外联地址\" class=\"headerlink\" title=\"三、无水印本地图片上传得到图片外联地址\"></a>三、无水印本地图片上传得到图片外联地址</h2><ol>\n<li><p>截图、复制、导入图片到小书匠编辑框自动生成图片外联，复制即可；</p>\n</li>\n<li><p>也可去七牛云的存储空间找上传的图片：<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430161611268.png\" alt=\"image-20220430161611268\"><br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430161624986.png\" alt=\"image-20220430161624986\"></p>\n</li>\n</ol>\n"},{"title":"SSM项目转Spring Boot项目详细过程（含eclipse-->idea注意事项）","date":"2022-09-05T09:09:05.000Z","category_bar":true,"_content":"# SSM项目转Spring Boot项目详细过程（含eclipse-->idea注意事项）\n\n---\n[toc]\n\n---\n\n+ 本文主要记录SSM项目转移为Spring Boot项目中注意事项。包括SSM中主要配置文件的转移\n相关博文：\n+ Spring Boot常用pom依赖：[Spring Boot常用依赖汇总 ](https://blog.csdn.net/qq_39231769/article/details/103096352)\n+ idea创建Spring Boot项目介绍：[idea新建一个Spring Boot项目+项目目录简单介绍+项目打包运行](https://blog.csdn.net/qq_39231769/article/details/103098524)\n---\n## 一、建立Spring Boot项目并导入依赖参考上方相关博文\n\n## 二、静态页面转移\n![image-20220720112322207](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720112322207.png)\n\n## 三、后台代码\n![enter description here](https://img-1256282866.cos.ap-beijing.myqcloud.com/aHR0cDovL2hicS5pZHNlLnRvcC9ibG9nLzE1NzM4NzI5MDY3NjEucG5n.png)\n\n## 四、分离mapper文件\n![image-20220720112332110](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720112332110.png)\n\n## 五、运行方式的改（由于内置tomcat，直接运行main方法就可以运行项目）变和注解扫描的配置\n![image-20220720112342369](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720112342369.png)\n\n## 六、mysql以及mybatis的配置\n1. mysql\n![image-20220720112353247](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720112353247.png)\n2. mybatis的mapper.xml文件位置更换并配置包路径。\n    ![image-20220720112431444](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720112431444.png)\n3. mybatis别名设置（直接设置pojo包，之后mapper.xml中就可以省略包名直接用类名） \n![image-20220720112441543](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720112441543.png)\n\n## 七、拦截器和过滤器的配置（主要改变为其注册方式，从配置方式改为java类配置）\n1. 拦截器\n![image-20220720112449570](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720112449570.png)\n\n2. 过滤器\n![image-20220720112458305](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720112458305.png)\n\n3. 附带拦截器、过滤器、注册代码：\n[Spring Boot项目 过滤器，拦截器，及其注册](https://blog.huijia.cf/archives/springboot-xiang-mu-guo-lv-qi--lan-jie-qi--ji-qi-zhu-ce)\n\n## 八、事务的配置（直接对ServiceImpl中所需类或方法使用@Transactional注解)\n![image-20220720112507962](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720112507962.png)\n\n## 九、项目默认跳转首页设置（新增Controller）\n![image-20220720112530212](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720112530212.png)\n```javascript?linenums\n/* **********************************直接访问首页************************************* */\n@Configuration\npublic class WebConfigurer implements WebMvcConfigurer {\n\t@Override\n\tpublic void addViewControllers(ViewControllerRegistry registry) {\n\t\tregistry.addViewController(\"/\").setViewName(\"forward:/login.html\");\n\t\tregistry.setOrder(Ordered.HIGHEST_PRECEDENCE);\n\t}\n}\n```\n\n## 十、其他\n1. mapper自动注入报错可以忽略，或者在mapper接口上加@Component。\n2. 图片验证码可能失效，参考博文第二种方法：[Java中使用图片验证码](https://blog.csdn.net/qq_39231769/article/details/102710427)\n3. PageHelper分页需要更换spring boot类型pom依赖\n\n","source":"_posts/BookMark/Spring Boot/SSM项目转Spring Boot项目详细过程（含eclipse转idea注意事项）--菜鸟小回.md","raw":"---\ntitle: SSM项目转Spring Boot项目详细过程（含eclipse-->idea注意事项）\ndate: 2022-09-05 17:09:05\ncategory_bar: true\ncategories: Spring Boot\ntags:\n- Spring Boot\n- SSM\n---\n# SSM项目转Spring Boot项目详细过程（含eclipse-->idea注意事项）\n\n---\n[toc]\n\n---\n\n+ 本文主要记录SSM项目转移为Spring Boot项目中注意事项。包括SSM中主要配置文件的转移\n相关博文：\n+ Spring Boot常用pom依赖：[Spring Boot常用依赖汇总 ](https://blog.csdn.net/qq_39231769/article/details/103096352)\n+ idea创建Spring Boot项目介绍：[idea新建一个Spring Boot项目+项目目录简单介绍+项目打包运行](https://blog.csdn.net/qq_39231769/article/details/103098524)\n---\n## 一、建立Spring Boot项目并导入依赖参考上方相关博文\n\n## 二、静态页面转移\n![image-20220720112322207](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720112322207.png)\n\n## 三、后台代码\n![enter description here](https://img-1256282866.cos.ap-beijing.myqcloud.com/aHR0cDovL2hicS5pZHNlLnRvcC9ibG9nLzE1NzM4NzI5MDY3NjEucG5n.png)\n\n## 四、分离mapper文件\n![image-20220720112332110](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720112332110.png)\n\n## 五、运行方式的改（由于内置tomcat，直接运行main方法就可以运行项目）变和注解扫描的配置\n![image-20220720112342369](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720112342369.png)\n\n## 六、mysql以及mybatis的配置\n1. mysql\n![image-20220720112353247](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720112353247.png)\n2. mybatis的mapper.xml文件位置更换并配置包路径。\n    ![image-20220720112431444](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720112431444.png)\n3. mybatis别名设置（直接设置pojo包，之后mapper.xml中就可以省略包名直接用类名） \n![image-20220720112441543](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720112441543.png)\n\n## 七、拦截器和过滤器的配置（主要改变为其注册方式，从配置方式改为java类配置）\n1. 拦截器\n![image-20220720112449570](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720112449570.png)\n\n2. 过滤器\n![image-20220720112458305](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720112458305.png)\n\n3. 附带拦截器、过滤器、注册代码：\n[Spring Boot项目 过滤器，拦截器，及其注册](https://blog.huijia.cf/archives/springboot-xiang-mu-guo-lv-qi--lan-jie-qi--ji-qi-zhu-ce)\n\n## 八、事务的配置（直接对ServiceImpl中所需类或方法使用@Transactional注解)\n![image-20220720112507962](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720112507962.png)\n\n## 九、项目默认跳转首页设置（新增Controller）\n![image-20220720112530212](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720112530212.png)\n```javascript?linenums\n/* **********************************直接访问首页************************************* */\n@Configuration\npublic class WebConfigurer implements WebMvcConfigurer {\n\t@Override\n\tpublic void addViewControllers(ViewControllerRegistry registry) {\n\t\tregistry.addViewController(\"/\").setViewName(\"forward:/login.html\");\n\t\tregistry.setOrder(Ordered.HIGHEST_PRECEDENCE);\n\t}\n}\n```\n\n## 十、其他\n1. mapper自动注入报错可以忽略，或者在mapper接口上加@Component。\n2. 图片验证码可能失效，参考博文第二种方法：[Java中使用图片验证码](https://blog.csdn.net/qq_39231769/article/details/102710427)\n3. PageHelper分页需要更换spring boot类型pom依赖\n\n","slug":"BookMark/Spring Boot/SSM项目转Spring Boot项目详细过程（含eclipse转idea注意事项）--菜鸟小回","published":1,"updated":"2022-09-06T07:08:49.903Z","_id":"cl7ptszok001daba52xkxba9q","comments":1,"layout":"post","photos":[],"link":"","content":"<h1><span id=\"ssm项目转spring-boot项目详细过程含eclipsegtidea注意事项\">SSM项目转Spring Boot项目详细过程（含eclipse–&gt;idea注意事项）</span></h1><hr>\n<p>[toc]</p>\n<hr>\n<ul>\n<li>本文主要记录SSM项目转移为Spring Boot项目中注意事项。包括SSM中主要配置文件的转移<br>相关博文：</li>\n<li>Spring Boot常用pom依赖：<a href=\"https://blog.csdn.net/qq_39231769/article/details/103096352\">Spring Boot常用依赖汇总 </a></li>\n<li>idea创建Spring Boot项目介绍：<a href=\"https://blog.csdn.net/qq_39231769/article/details/103098524\">idea新建一个Spring Boot项目+项目目录简单介绍+项目打包运行</a></li>\n</ul>\n<hr>\n<h2><span id=\"一-建立spring-boot项目并导入依赖参考上方相关博文\">一、建立Spring Boot项目并导入依赖参考上方相关博文</span></h2><h2><span id=\"二-静态页面转移\">二、静态页面转移</span></h2><p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720112322207.png\" alt=\"image-20220720112322207\"></p>\n<h2><span id=\"三-后台代码\">三、后台代码</span></h2><p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/aHR0cDovL2hicS5pZHNlLnRvcC9ibG9nLzE1NzM4NzI5MDY3NjEucG5n.png\" alt=\"enter description here\"></p>\n<h2><span id=\"四-分离mapper文件\">四、分离mapper文件</span></h2><p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720112332110.png\" alt=\"image-20220720112332110\"></p>\n<h2><span id=\"五-运行方式的改由于内置tomcat直接运行main方法就可以运行项目变和注解扫描的配置\">五、运行方式的改（由于内置tomcat，直接运行main方法就可以运行项目）变和注解扫描的配置</span></h2><p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720112342369.png\" alt=\"image-20220720112342369\"></p>\n<h2><span id=\"六-mysql以及mybatis的配置\">六、mysql以及mybatis的配置</span></h2><ol>\n<li>mysql<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720112353247.png\" alt=\"image-20220720112353247\"></li>\n<li>mybatis的mapper.xml文件位置更换并配置包路径。<br> <img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720112431444.png\" alt=\"image-20220720112431444\"></li>\n<li>mybatis别名设置（直接设置pojo包，之后mapper.xml中就可以省略包名直接用类名）<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720112441543.png\" alt=\"image-20220720112441543\"></li>\n</ol>\n<h2><span id=\"七-拦截器和过滤器的配置主要改变为其注册方式从配置方式改为java类配置\">七、拦截器和过滤器的配置（主要改变为其注册方式，从配置方式改为java类配置）</span></h2><ol>\n<li><p>拦截器<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720112449570.png\" alt=\"image-20220720112449570\"></p>\n</li>\n<li><p>过滤器<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720112458305.png\" alt=\"image-20220720112458305\"></p>\n</li>\n<li><p>附带拦截器、过滤器、注册代码：<br><a href=\"https://blog.huijia.cf/archives/springboot-xiang-mu-guo-lv-qi--lan-jie-qi--ji-qi-zhu-ce\">Spring Boot项目 过滤器，拦截器，及其注册</a></p>\n</li>\n</ol>\n<h2><span id=\"八-事务的配置直接对serviceimpl中所需类或方法使用transactional注解\">八、事务的配置（直接对ServiceImpl中所需类或方法使用@Transactional注解)</span></h2><p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720112507962.png\" alt=\"image-20220720112507962\"></p>\n<h2><span id=\"九-项目默认跳转首页设置新增controller\">九、项目默认跳转首页设置（新增Controller）</span></h2><p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720112530212.png\" alt=\"image-20220720112530212\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">/* **********************************直接访问首页************************************* */<br>@Configuration<br>public class WebConfigurer implements WebMvcConfigurer &#123;<br>\t@Override<br>\tpublic void addViewControllers(ViewControllerRegistry registry) &#123;<br>\t\tregistry.addViewController(&quot;/&quot;).setViewName(&quot;forward:/login.html&quot;);<br>\t\tregistry.setOrder(Ordered.HIGHEST_PRECEDENCE);<br>\t&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2><span id=\"十-其他\">十、其他</span></h2><ol>\n<li>mapper自动注入报错可以忽略，或者在mapper接口上加@Component。</li>\n<li>图片验证码可能失效，参考博文第二种方法：<a href=\"https://blog.csdn.net/qq_39231769/article/details/102710427\">Java中使用图片验证码</a></li>\n<li>PageHelper分页需要更换spring boot类型pom依赖</li>\n</ol>\n","site":{"data":{}},"wordcount":1046,"excerpt":"","more":"<h1 id=\"SSM项目转Spring-Boot项目详细过程（含eclipse–-gt-idea注意事项）\"><a href=\"#SSM项目转Spring-Boot项目详细过程（含eclipse–-gt-idea注意事项）\" class=\"headerlink\" title=\"SSM项目转Spring Boot项目详细过程（含eclipse–&gt;idea注意事项）\"></a>SSM项目转Spring Boot项目详细过程（含eclipse–&gt;idea注意事项）</h1><hr>\n<p>[toc]</p>\n<hr>\n<ul>\n<li>本文主要记录SSM项目转移为Spring Boot项目中注意事项。包括SSM中主要配置文件的转移<br>相关博文：</li>\n<li>Spring Boot常用pom依赖：<a href=\"https://blog.csdn.net/qq_39231769/article/details/103096352\">Spring Boot常用依赖汇总 </a></li>\n<li>idea创建Spring Boot项目介绍：<a href=\"https://blog.csdn.net/qq_39231769/article/details/103098524\">idea新建一个Spring Boot项目+项目目录简单介绍+项目打包运行</a></li>\n</ul>\n<hr>\n<h2 id=\"一、建立Spring-Boot项目并导入依赖参考上方相关博文\"><a href=\"#一、建立Spring-Boot项目并导入依赖参考上方相关博文\" class=\"headerlink\" title=\"一、建立Spring Boot项目并导入依赖参考上方相关博文\"></a>一、建立Spring Boot项目并导入依赖参考上方相关博文</h2><h2 id=\"二、静态页面转移\"><a href=\"#二、静态页面转移\" class=\"headerlink\" title=\"二、静态页面转移\"></a>二、静态页面转移</h2><p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720112322207.png\" alt=\"image-20220720112322207\"></p>\n<h2 id=\"三、后台代码\"><a href=\"#三、后台代码\" class=\"headerlink\" title=\"三、后台代码\"></a>三、后台代码</h2><p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/aHR0cDovL2hicS5pZHNlLnRvcC9ibG9nLzE1NzM4NzI5MDY3NjEucG5n.png\" alt=\"enter description here\"></p>\n<h2 id=\"四、分离mapper文件\"><a href=\"#四、分离mapper文件\" class=\"headerlink\" title=\"四、分离mapper文件\"></a>四、分离mapper文件</h2><p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720112332110.png\" alt=\"image-20220720112332110\"></p>\n<h2 id=\"五、运行方式的改（由于内置tomcat，直接运行main方法就可以运行项目）变和注解扫描的配置\"><a href=\"#五、运行方式的改（由于内置tomcat，直接运行main方法就可以运行项目）变和注解扫描的配置\" class=\"headerlink\" title=\"五、运行方式的改（由于内置tomcat，直接运行main方法就可以运行项目）变和注解扫描的配置\"></a>五、运行方式的改（由于内置tomcat，直接运行main方法就可以运行项目）变和注解扫描的配置</h2><p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720112342369.png\" alt=\"image-20220720112342369\"></p>\n<h2 id=\"六、mysql以及mybatis的配置\"><a href=\"#六、mysql以及mybatis的配置\" class=\"headerlink\" title=\"六、mysql以及mybatis的配置\"></a>六、mysql以及mybatis的配置</h2><ol>\n<li>mysql<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720112353247.png\" alt=\"image-20220720112353247\"></li>\n<li>mybatis的mapper.xml文件位置更换并配置包路径。<br> <img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720112431444.png\" alt=\"image-20220720112431444\"></li>\n<li>mybatis别名设置（直接设置pojo包，之后mapper.xml中就可以省略包名直接用类名）<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720112441543.png\" alt=\"image-20220720112441543\"></li>\n</ol>\n<h2 id=\"七、拦截器和过滤器的配置（主要改变为其注册方式，从配置方式改为java类配置）\"><a href=\"#七、拦截器和过滤器的配置（主要改变为其注册方式，从配置方式改为java类配置）\" class=\"headerlink\" title=\"七、拦截器和过滤器的配置（主要改变为其注册方式，从配置方式改为java类配置）\"></a>七、拦截器和过滤器的配置（主要改变为其注册方式，从配置方式改为java类配置）</h2><ol>\n<li><p>拦截器<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720112449570.png\" alt=\"image-20220720112449570\"></p>\n</li>\n<li><p>过滤器<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720112458305.png\" alt=\"image-20220720112458305\"></p>\n</li>\n<li><p>附带拦截器、过滤器、注册代码：<br><a href=\"https://blog.huijia.cf/archives/springboot-xiang-mu-guo-lv-qi--lan-jie-qi--ji-qi-zhu-ce\">Spring Boot项目 过滤器，拦截器，及其注册</a></p>\n</li>\n</ol>\n<h2 id=\"八、事务的配置（直接对ServiceImpl中所需类或方法使用-Transactional注解\"><a href=\"#八、事务的配置（直接对ServiceImpl中所需类或方法使用-Transactional注解\" class=\"headerlink\" title=\"八、事务的配置（直接对ServiceImpl中所需类或方法使用@Transactional注解)\"></a>八、事务的配置（直接对ServiceImpl中所需类或方法使用@Transactional注解)</h2><p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720112507962.png\" alt=\"image-20220720112507962\"></p>\n<h2 id=\"九、项目默认跳转首页设置（新增Controller）\"><a href=\"#九、项目默认跳转首页设置（新增Controller）\" class=\"headerlink\" title=\"九、项目默认跳转首页设置（新增Controller）\"></a>九、项目默认跳转首页设置（新增Controller）</h2><p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720112530212.png\" alt=\"image-20220720112530212\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">/* **********************************直接访问首页************************************* */<br>@Configuration<br>public class WebConfigurer implements WebMvcConfigurer &#123;<br>\t@Override<br>\tpublic void addViewControllers(ViewControllerRegistry registry) &#123;<br>\t\tregistry.addViewController(&quot;/&quot;).setViewName(&quot;forward:/login.html&quot;);<br>\t\tregistry.setOrder(Ordered.HIGHEST_PRECEDENCE);<br>\t&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"十、其他\"><a href=\"#十、其他\" class=\"headerlink\" title=\"十、其他\"></a>十、其他</h2><ol>\n<li>mapper自动注入报错可以忽略，或者在mapper接口上加@Component。</li>\n<li>图片验证码可能失效，参考博文第二种方法：<a href=\"https://blog.csdn.net/qq_39231769/article/details/102710427\">Java中使用图片验证码</a></li>\n<li>PageHelper分页需要更换spring boot类型pom依赖</li>\n</ol>\n"},{"title":"Spring Boot & Jenkins 实现自动化部署（centos7&windows，涵盖防jenkins杀死的脚本）","date":"2022-09-05T09:09:05.000Z","category_bar":true,"_content":"# Spring Boot & Jenkins 实现自动化部署（centos7&windows，涵盖防jenkins杀死的脚本）\n\n---\n\n[toc]\n\n---\n\n## 一、安装Jenkins\n```javascript?linenums\n//下载安装\nsudo wget -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat-stable/jenkins.repo\nsudo rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io.key\nyum install jenkins\n```\n## 二、修改配置\n```javascript?linenums\n//修改配置1 找到 JENKINS_USER 和JENKINS_PORT ，修改为root和你需要的端口\nvi /etc/sysconfig/jenkins\nJENKINS_USER=\"root\"\nJENKINS_PORT=\"8001\"\n// 修改配置2 找到candidates后面改为你的jdk路径\nvi /etc/rc.d/init.d/jenkins\n```\n![image-20220509153054848](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509153054848.png)\n\n## 三、启动\n```javascript?linenums\nservice jenkins start\nservice jenkins stop\nservice jenkins restart\n```\n## 四、浏览器输入“ip+端口”，配置jenkins\n1. 首页\n![image-20220509153124740](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509153124740.png)\n2. 复制提示路径寻找初始密码\n ```javascript?linenums\n //复制密码输入\ncat /var/lib/jenkins/secrets/initialAdminPassword\n ```\n![enter description here](https://img-1256282866.cos.ap-beijing.myqcloud.com/8fdc63f79bded19d2952bef453ed831e.png)\n\n3. 直接推荐安装，等待...\n    ![image-20220509153135439](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509153135439.png)\n4. 创建用户\n    ![image-20220509153200202](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509153200202.png)\n\n  + 成功安装\n    ![image-20220509153207418](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509153207418.png)\n\n ## 五、Jenkins的maven，jdk环境配置\n 1. 在 Manage Jenkins中配置jdk和maven以及系统环境变量\n![image-20220509153354659](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509153354659.png)\n+ JDK(取消自动安装填自己的路径)\n ![image-20220509153403549](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509153403549.png)\n + MAVEN(取消自动安装填自己的路径)\n    ![image-20220509153413203](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509153413203.png)\n + 系统环境变量`echo $PATH`查看\n    ![image-20220509153431736](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509153431736.png)\n    复制到此\n    ![image-20220509153438814](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509153438814.png)\n  2. 安装maven插件，安装后重启\n\n     ![enter description here](https://img-1256282866.cos.ap-beijing.myqcloud.com/78a3d58539672e782025185c7b77f24c.png)\n\n     ![enter description here](https://img-1256282866.cos.ap-beijing.myqcloud.com/bff9c95900d6380b3340337da1aca328.png)\n\n## 六、新建spring boot 项目\n1. 新建一个spring boot的demo。\n![image-20220509153516260](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509153516260.png)\n2. 随便一个controller\n ```javascript?linenums\npackage com.example.demo;\n\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.ResponseBody;\n\n@Controller\npublic class HelloController {\n    @RequestMapping(\"/\")\n    @ResponseBody\n    public String hello() {\n        return \"Hello, SpringBoot 2\";\n    }\n}\n ```\n ![image-20220509153528886](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509153528886.png)\n 3. 上传到git仓库，我这里上传的是gitee。\n    ![image-20220509153540595](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509153540595.png)\n## 七、建立任务并运行\n1. 新建任务\n   ![image-20220509153554982](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509153554982.png)\n2. 输入项目名称并选择maven项目\n    ![image-20220509153604487](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509153604487.png)\n3. General\n    ![image-20220509153615406](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509153615406.png)\n4. 源码管理，配置git并填写git账号密码。\n    ![image-20220509153627114](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509153627114.png)\n    ![image-20220509153800325](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509153800325.png)\n 5. 构建触发器\n    ![image-20220509153808812](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509153808812.png)\n 6. Build高级中可以修改你的maven配置文件\n ```javascript?linenums\nclean install -Dmaven.test.skip -U\n//如需要选择分支打包详情参照：https://blog.csdn.net/qq_39231769/article/details/109311606\nclean package -P dev\n ```\n![image-20220509153827729](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509153827729.png)\n 7. post steps\n   + 添加一个执行shell，注意修改你的jar包名以及保证路径存在\n```javascript?linenums\n#!/bin/bash \n\n#export BUILD_ID=dontKillMe这一句很重要，这样指定了，项目启动之后才不会被Jenkins杀掉。\nexport BUILD_ID=dontKillMe\n\n#指定最后编译好的jar存放的位置\nwww_path=/out\n\n#Jenkins中编译好的jar位置\njar_path=/var/lib/jenkins/workspace/demo/target\n\n#Jenkins中编译好的jar名称\njar_name=demo-0.0.1.jar\n\n#获取运行编译好的进程ID，便于我们在重新部署项目的时候先杀掉以前的进程\npid=$(cat /out/demo.pid)\n\n#进入指定的编译好的jar的位置\ncd  ${jar_path}\n\n#将编译好的jar复制到最后指定的位置\ncp  ${jar_path}/${jar_name} ${www_path}\n\n#进入最后指定存放jar的位置\ncd  ${www_path}\n\n#杀掉以前可能启动的项目进程\nkill -9 ${pid}\n\n#启动jar，指定SpringBoot后台启动\nnohup java -jar  ${jar_name} &\n\n#将进程ID存入到shaw-web.pid文件中\necho $! > /out/demo.pid\n```\n   ![image-20220509153835988](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509153835988.png)\n8. 保存并构建项目\n   + 构建项目\n   ![enter description here](https://img-1256282866.cos.ap-beijing.myqcloud.com/0912e1966caa0b70fb7258d46452d6cd.png)\n   + 点击构建历史可以看控制台输出\n   ![enter description here](https://img-1256282866.cos.ap-beijing.myqcloud.com/1603876202494.png)\n9. 访问项目，部署成功\n    ![image-20220509154057961](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509154057961.png)\n\n---\n  + 附加内容：\n  ## windows版安装\n  + 步骤基本与centos相似，但有几个注意事项；\n1.  [下载地址](https://www.jenkins.io/zh/download/)\n    ![image-20220509154109937](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509154109937.png)\n2. 安装、启动、修改密码过程省略。与centos相似。\n3. 注意事项 一：配置shell路径为服务器上git目录下的sh.exe文件路径。\n ![image-20220509154123933](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509154123933.png)\n    ![enter description here](https://img-1256282866.cos.ap-beijing.myqcloud.com/80d773a67b03f808f99e4a9153421458.png)\n 4. 注意事项二：新增项目时，post steps需要设置为windows的batch\n ![image-20220509154216554](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509154216554.png)\n 5. 注意事项三：执行脚本的不同\n ```javascript?linenums\n@echo off\nsetlocal enabledelayedexpansion\n\n::设置端口 \nset PORT=8082\n\n:: 设置生成路径\nset OLD_PATH=C:\\Windows\\system32\\config\\systemprofile\\AppData\\Local\\Jenkins\\.jenkins\\workspace\\gtoa\\target\n\n:: 设置新的存放路径\nset NEW_PATH=C:\\out\n\n:: 设置jar包名\nset JAR_NAME=gtoa-0.0.1-SNAPSHOT.jar\n\n::set /p port=Please enter the port ：\nfor /f \"tokens=1-5\" %%a in ('netstat -ano ^| find \":%PORT%\"') do (\n    if \"%%e%\" == \"\" (\n        set pid=%%d\n    ) else (\n        set pid=%%e\n    )\n    echo !pid!\n    taskkill /f /pid !pid!\n)\n\n::复制文件\nXCOPY %OLD_PATH%\\%JAR_NAME%  \"%NEW_PATH%\" /y\n\n::防止启动后被杀死进程\nset BUILD_ID=dontKillMe \n\n::启动jar包\nstart javaw -jar %NEW_PATH%\\%JAR_NAME%\n ```\n---","source":"_posts/BookMark/Spring Boot/Spring Boot & Jenkins 实现自动化部署（centos7&windows，涵盖防jenkins杀死的脚本）.md","raw":"---\ntitle: Spring Boot & Jenkins 实现自动化部署（centos7&windows，涵盖防jenkins杀死的脚本）\ndate: 2022-09-05 17:09:05\ncategory_bar: true\ncategories: Spring Boot\ntags:\n- Spring Boot\n- Jenkins\n---\n# Spring Boot & Jenkins 实现自动化部署（centos7&windows，涵盖防jenkins杀死的脚本）\n\n---\n\n[toc]\n\n---\n\n## 一、安装Jenkins\n```javascript?linenums\n//下载安装\nsudo wget -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat-stable/jenkins.repo\nsudo rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io.key\nyum install jenkins\n```\n## 二、修改配置\n```javascript?linenums\n//修改配置1 找到 JENKINS_USER 和JENKINS_PORT ，修改为root和你需要的端口\nvi /etc/sysconfig/jenkins\nJENKINS_USER=\"root\"\nJENKINS_PORT=\"8001\"\n// 修改配置2 找到candidates后面改为你的jdk路径\nvi /etc/rc.d/init.d/jenkins\n```\n![image-20220509153054848](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509153054848.png)\n\n## 三、启动\n```javascript?linenums\nservice jenkins start\nservice jenkins stop\nservice jenkins restart\n```\n## 四、浏览器输入“ip+端口”，配置jenkins\n1. 首页\n![image-20220509153124740](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509153124740.png)\n2. 复制提示路径寻找初始密码\n ```javascript?linenums\n //复制密码输入\ncat /var/lib/jenkins/secrets/initialAdminPassword\n ```\n![enter description here](https://img-1256282866.cos.ap-beijing.myqcloud.com/8fdc63f79bded19d2952bef453ed831e.png)\n\n3. 直接推荐安装，等待...\n    ![image-20220509153135439](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509153135439.png)\n4. 创建用户\n    ![image-20220509153200202](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509153200202.png)\n\n  + 成功安装\n    ![image-20220509153207418](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509153207418.png)\n\n ## 五、Jenkins的maven，jdk环境配置\n 1. 在 Manage Jenkins中配置jdk和maven以及系统环境变量\n![image-20220509153354659](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509153354659.png)\n+ JDK(取消自动安装填自己的路径)\n ![image-20220509153403549](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509153403549.png)\n + MAVEN(取消自动安装填自己的路径)\n    ![image-20220509153413203](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509153413203.png)\n + 系统环境变量`echo $PATH`查看\n    ![image-20220509153431736](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509153431736.png)\n    复制到此\n    ![image-20220509153438814](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509153438814.png)\n  2. 安装maven插件，安装后重启\n\n     ![enter description here](https://img-1256282866.cos.ap-beijing.myqcloud.com/78a3d58539672e782025185c7b77f24c.png)\n\n     ![enter description here](https://img-1256282866.cos.ap-beijing.myqcloud.com/bff9c95900d6380b3340337da1aca328.png)\n\n## 六、新建spring boot 项目\n1. 新建一个spring boot的demo。\n![image-20220509153516260](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509153516260.png)\n2. 随便一个controller\n ```javascript?linenums\npackage com.example.demo;\n\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.ResponseBody;\n\n@Controller\npublic class HelloController {\n    @RequestMapping(\"/\")\n    @ResponseBody\n    public String hello() {\n        return \"Hello, SpringBoot 2\";\n    }\n}\n ```\n ![image-20220509153528886](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509153528886.png)\n 3. 上传到git仓库，我这里上传的是gitee。\n    ![image-20220509153540595](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509153540595.png)\n## 七、建立任务并运行\n1. 新建任务\n   ![image-20220509153554982](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509153554982.png)\n2. 输入项目名称并选择maven项目\n    ![image-20220509153604487](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509153604487.png)\n3. General\n    ![image-20220509153615406](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509153615406.png)\n4. 源码管理，配置git并填写git账号密码。\n    ![image-20220509153627114](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509153627114.png)\n    ![image-20220509153800325](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509153800325.png)\n 5. 构建触发器\n    ![image-20220509153808812](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509153808812.png)\n 6. Build高级中可以修改你的maven配置文件\n ```javascript?linenums\nclean install -Dmaven.test.skip -U\n//如需要选择分支打包详情参照：https://blog.csdn.net/qq_39231769/article/details/109311606\nclean package -P dev\n ```\n![image-20220509153827729](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509153827729.png)\n 7. post steps\n   + 添加一个执行shell，注意修改你的jar包名以及保证路径存在\n```javascript?linenums\n#!/bin/bash \n\n#export BUILD_ID=dontKillMe这一句很重要，这样指定了，项目启动之后才不会被Jenkins杀掉。\nexport BUILD_ID=dontKillMe\n\n#指定最后编译好的jar存放的位置\nwww_path=/out\n\n#Jenkins中编译好的jar位置\njar_path=/var/lib/jenkins/workspace/demo/target\n\n#Jenkins中编译好的jar名称\njar_name=demo-0.0.1.jar\n\n#获取运行编译好的进程ID，便于我们在重新部署项目的时候先杀掉以前的进程\npid=$(cat /out/demo.pid)\n\n#进入指定的编译好的jar的位置\ncd  ${jar_path}\n\n#将编译好的jar复制到最后指定的位置\ncp  ${jar_path}/${jar_name} ${www_path}\n\n#进入最后指定存放jar的位置\ncd  ${www_path}\n\n#杀掉以前可能启动的项目进程\nkill -9 ${pid}\n\n#启动jar，指定SpringBoot后台启动\nnohup java -jar  ${jar_name} &\n\n#将进程ID存入到shaw-web.pid文件中\necho $! > /out/demo.pid\n```\n   ![image-20220509153835988](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509153835988.png)\n8. 保存并构建项目\n   + 构建项目\n   ![enter description here](https://img-1256282866.cos.ap-beijing.myqcloud.com/0912e1966caa0b70fb7258d46452d6cd.png)\n   + 点击构建历史可以看控制台输出\n   ![enter description here](https://img-1256282866.cos.ap-beijing.myqcloud.com/1603876202494.png)\n9. 访问项目，部署成功\n    ![image-20220509154057961](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509154057961.png)\n\n---\n  + 附加内容：\n  ## windows版安装\n  + 步骤基本与centos相似，但有几个注意事项；\n1.  [下载地址](https://www.jenkins.io/zh/download/)\n    ![image-20220509154109937](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509154109937.png)\n2. 安装、启动、修改密码过程省略。与centos相似。\n3. 注意事项 一：配置shell路径为服务器上git目录下的sh.exe文件路径。\n ![image-20220509154123933](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509154123933.png)\n    ![enter description here](https://img-1256282866.cos.ap-beijing.myqcloud.com/80d773a67b03f808f99e4a9153421458.png)\n 4. 注意事项二：新增项目时，post steps需要设置为windows的batch\n ![image-20220509154216554](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509154216554.png)\n 5. 注意事项三：执行脚本的不同\n ```javascript?linenums\n@echo off\nsetlocal enabledelayedexpansion\n\n::设置端口 \nset PORT=8082\n\n:: 设置生成路径\nset OLD_PATH=C:\\Windows\\system32\\config\\systemprofile\\AppData\\Local\\Jenkins\\.jenkins\\workspace\\gtoa\\target\n\n:: 设置新的存放路径\nset NEW_PATH=C:\\out\n\n:: 设置jar包名\nset JAR_NAME=gtoa-0.0.1-SNAPSHOT.jar\n\n::set /p port=Please enter the port ：\nfor /f \"tokens=1-5\" %%a in ('netstat -ano ^| find \":%PORT%\"') do (\n    if \"%%e%\" == \"\" (\n        set pid=%%d\n    ) else (\n        set pid=%%e\n    )\n    echo !pid!\n    taskkill /f /pid !pid!\n)\n\n::复制文件\nXCOPY %OLD_PATH%\\%JAR_NAME%  \"%NEW_PATH%\" /y\n\n::防止启动后被杀死进程\nset BUILD_ID=dontKillMe \n\n::启动jar包\nstart javaw -jar %NEW_PATH%\\%JAR_NAME%\n ```\n---","slug":"BookMark/Spring Boot/Spring Boot & Jenkins 实现自动化部署（centos7&windows，涵盖防jenkins杀死的脚本）","published":1,"updated":"2022-09-06T07:08:49.890Z","_id":"cl7ptszol001eaba59vouaiwk","comments":1,"layout":"post","photos":[],"link":"","content":"<h1><span id=\"spring-boot-amp-jenkins-实现自动化部署centos7ampwindows涵盖防jenkins杀死的脚本\">Spring Boot &amp; Jenkins 实现自动化部署（centos7&amp;windows，涵盖防jenkins杀死的脚本）</span></h1><hr>\n<p>[toc]</p>\n<hr>\n<h2><span id=\"一-安装jenkins\">一、安装Jenkins</span></h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">//下载安装<br>sudo wget -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat-stable/jenkins.repo<br>sudo rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io.key<br>yum install jenkins<br></code></pre></td></tr></table></figure>\n<h2><span id=\"二-修改配置\">二、修改配置</span></h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">//修改配置1 找到 JENKINS_USER 和JENKINS_PORT ，修改为root和你需要的端口<br>vi /etc/sysconfig/jenkins<br>JENKINS_USER=&quot;root&quot;<br>JENKINS_PORT=&quot;8001&quot;<br>// 修改配置2 找到candidates后面改为你的jdk路径<br>vi /etc/rc.d/init.d/jenkins<br></code></pre></td></tr></table></figure>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509153054848.png\" alt=\"image-20220509153054848\"></p>\n<h2><span id=\"三-启动\">三、启动</span></h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">service jenkins start<br>service jenkins stop<br>service jenkins restart<br></code></pre></td></tr></table></figure>\n<h2><span id=\"四-浏览器输入ip端口配置jenkins\">四、浏览器输入“ip+端口”，配置jenkins</span></h2><ol>\n<li><p>首页<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509153124740.png\" alt=\"image-20220509153124740\"></p>\n</li>\n<li><p>复制提示路径寻找初始密码</p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\"> //复制密码输入<br>cat /var/lib/jenkins/secrets/initialAdminPassword<br></code></pre></td></tr></table></figure>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/8fdc63f79bded19d2952bef453ed831e.png\" alt=\"enter description here\"></p>\n</li>\n<li><p>直接推荐安装，等待…<br> <img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509153135439.png\" alt=\"image-20220509153135439\"></p>\n</li>\n<li><p>创建用户<br> <img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509153200202.png\" alt=\"image-20220509153200202\"></p>\n</li>\n</ol>\n<ul>\n<li>成功安装<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509153207418.png\" alt=\"image-20220509153207418\"></li>\n</ul>\n<h2><span id=\"五-jenkins的mavenjdk环境配置\">五、Jenkins的maven，jdk环境配置</span></h2><ol>\n<li>在 Manage Jenkins中配置jdk和maven以及系统环境变量<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509153354659.png\" alt=\"image-20220509153354659\"></li>\n</ol>\n<ul>\n<li>JDK(取消自动安装填自己的路径)<br> <img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509153403549.png\" alt=\"image-20220509153403549\"></li>\n<li>MAVEN(取消自动安装填自己的路径)<br> <img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509153413203.png\" alt=\"image-20220509153413203\"></li>\n<li>系统环境变量<code>echo $PATH</code>查看<br> <img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509153431736.png\" alt=\"image-20220509153431736\"><br> 复制到此<br> <img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509153438814.png\" alt=\"image-20220509153438814\"></li>\n</ul>\n<ol start=\"2\">\n<li><p>安装maven插件，安装后重启</p>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/78a3d58539672e782025185c7b77f24c.png\" alt=\"enter description here\"></p>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/bff9c95900d6380b3340337da1aca328.png\" alt=\"enter description here\"></p>\n</li>\n</ol>\n<h2><span id=\"六-新建spring-boot-项目\">六、新建spring boot 项目</span></h2><ol>\n<li>新建一个spring boot的demo。<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509153516260.png\" alt=\"image-20220509153516260\"></li>\n<li>随便一个controller <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">package com.example.demo;<br><br>import org.springframework.stereotype.Controller;<br>import org.springframework.web.bind.annotation.RequestMapping;<br>import org.springframework.web.bind.annotation.ResponseBody;<br><br>@Controller<br>public class HelloController &#123;<br>    @RequestMapping(&quot;/&quot;)<br>    @ResponseBody<br>    public String hello() &#123;<br>        return &quot;Hello, SpringBoot 2&quot;;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n <img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509153528886.png\" alt=\"image-20220509153528886\"></li>\n<li>上传到git仓库，我这里上传的是gitee。<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509153540595.png\" alt=\"image-20220509153540595\"></li>\n</ol>\n<h2><span id=\"七-建立任务并运行\">七、建立任务并运行</span></h2><ol>\n<li>新建任务<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509153554982.png\" alt=\"image-20220509153554982\"></li>\n<li>输入项目名称并选择maven项目<br> <img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509153604487.png\" alt=\"image-20220509153604487\"></li>\n<li>General<br> <img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509153615406.png\" alt=\"image-20220509153615406\"></li>\n<li>源码管理，配置git并填写git账号密码。<br> <img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509153627114.png\" alt=\"image-20220509153627114\"><br> <img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509153800325.png\" alt=\"image-20220509153800325\"></li>\n<li>构建触发器<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509153808812.png\" alt=\"image-20220509153808812\"></li>\n<li>Build高级中可以修改你的maven配置文件 <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">clean install -Dmaven.test.skip -U<br>//如需要选择分支打包详情参照：https://blog.csdn.net/qq_39231769/article/details/109311606<br>clean package -P dev<br></code></pre></td></tr></table></figure>\n<img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509153827729.png\" alt=\"image-20220509153827729\"></li>\n<li>post steps</li>\n</ol>\n<ul>\n<li>添加一个执行shell，注意修改你的jar包名以及保证路径存在<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">#!/bin/bash <br><br>#export BUILD_ID=dontKillMe这一句很重要，这样指定了，项目启动之后才不会被Jenkins杀掉。<br>export BUILD_ID=dontKillMe<br><br>#指定最后编译好的jar存放的位置<br>www_path=/out<br><br>#Jenkins中编译好的jar位置<br>jar_path=/var/lib/jenkins/workspace/demo/target<br><br>#Jenkins中编译好的jar名称<br>jar_name=demo-0.0.1.jar<br><br>#获取运行编译好的进程ID，便于我们在重新部署项目的时候先杀掉以前的进程<br>pid=$(cat /out/demo.pid)<br><br>#进入指定的编译好的jar的位置<br>cd  $&#123;jar_path&#125;<br><br>#将编译好的jar复制到最后指定的位置<br>cp  $&#123;jar_path&#125;/$&#123;jar_name&#125; $&#123;www_path&#125;<br><br>#进入最后指定存放jar的位置<br>cd  $&#123;www_path&#125;<br><br>#杀掉以前可能启动的项目进程<br>kill -9 $&#123;pid&#125;<br><br>#启动jar，指定SpringBoot后台启动<br>nohup java -jar  $&#123;jar_name&#125; &amp;<br><br>#将进程ID存入到shaw-web.pid文件中<br>echo $! &gt; /out/demo.pid<br></code></pre></td></tr></table></figure>\n   <img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509153835988.png\" alt=\"image-20220509153835988\"></li>\n</ul>\n<ol start=\"8\">\n<li>保存并构建项目<ul>\n<li>构建项目<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/0912e1966caa0b70fb7258d46452d6cd.png\" alt=\"enter description here\"></li>\n<li>点击构建历史可以看控制台输出<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/1603876202494.png\" alt=\"enter description here\"></li>\n</ul>\n</li>\n<li>访问项目，部署成功<br> <img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509154057961.png\" alt=\"image-20220509154057961\"></li>\n</ol>\n<hr>\n<ul>\n<li>附加内容：</li>\n</ul>\n<h2><span id=\"windows版安装\">windows版安装</span></h2><ul>\n<li>步骤基本与centos相似，但有几个注意事项；</li>\n</ul>\n<ol>\n<li><a href=\"https://www.jenkins.io/zh/download/\">下载地址</a><br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509154109937.png\" alt=\"image-20220509154109937\"></li>\n<li>安装、启动、修改密码过程省略。与centos相似。</li>\n<li>注意事项 一：配置shell路径为服务器上git目录下的sh.exe文件路径。<br> <img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509154123933.png\" alt=\"image-20220509154123933\"><br> <img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/80d773a67b03f808f99e4a9153421458.png\" alt=\"enter description here\"></li>\n<li>注意事项二：新增项目时，post steps需要设置为windows的batch<br> <img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509154216554.png\" alt=\"image-20220509154216554\"></li>\n<li>注意事项三：执行脚本的不同 <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">@echo off<br>setlocal enabledelayedexpansion<br><br>::设置端口 <br>set PORT=8082<br><br>:: 设置生成路径<br>set OLD_PATH=C:\\Windows\\system32\\config\\systemprofile\\AppData\\Local\\Jenkins\\.jenkins\\workspace\\gtoa\\target<br><br>:: 设置新的存放路径<br>set NEW_PATH=C:\\out<br><br>:: 设置jar包名<br>set JAR_NAME=gtoa-0.0.1-SNAPSHOT.jar<br><br>::set /p port=Please enter the port ：<br>for /f &quot;tokens=1-5&quot; %%a in (&#x27;netstat -ano ^| find &quot;:%PORT%&quot;&#x27;) do (<br>    if &quot;%%e%&quot; == &quot;&quot; (<br>        set pid=%%d<br>    ) else (<br>        set pid=%%e<br>    )<br>    echo !pid!<br>    taskkill /f /pid !pid!<br>)<br><br>::复制文件<br>XCOPY %OLD_PATH%\\%JAR_NAME%  &quot;%NEW_PATH%&quot; /y<br><br>::防止启动后被杀死进程<br>set BUILD_ID=dontKillMe <br><br>::启动jar包<br>start javaw -jar %NEW_PATH%\\%JAR_NAME%<br></code></pre></td></tr></table></figure></li>\n</ol>\n<hr>\n","site":{"data":{}},"wordcount":2948,"excerpt":"","more":"<h1 id=\"Spring-Boot-amp-Jenkins-实现自动化部署（centos7-amp-windows，涵盖防jenkins杀死的脚本）\"><a href=\"#Spring-Boot-amp-Jenkins-实现自动化部署（centos7-amp-windows，涵盖防jenkins杀死的脚本）\" class=\"headerlink\" title=\"Spring Boot &amp; Jenkins 实现自动化部署（centos7&amp;windows，涵盖防jenkins杀死的脚本）\"></a>Spring Boot &amp; Jenkins 实现自动化部署（centos7&amp;windows，涵盖防jenkins杀死的脚本）</h1><hr>\n<p>[toc]</p>\n<hr>\n<h2 id=\"一、安装Jenkins\"><a href=\"#一、安装Jenkins\" class=\"headerlink\" title=\"一、安装Jenkins\"></a>一、安装Jenkins</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">//下载安装<br>sudo wget -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat-stable/jenkins.repo<br>sudo rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io.key<br>yum install jenkins<br></code></pre></td></tr></table></figure>\n<h2 id=\"二、修改配置\"><a href=\"#二、修改配置\" class=\"headerlink\" title=\"二、修改配置\"></a>二、修改配置</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">//修改配置1 找到 JENKINS_USER 和JENKINS_PORT ，修改为root和你需要的端口<br>vi /etc/sysconfig/jenkins<br>JENKINS_USER=&quot;root&quot;<br>JENKINS_PORT=&quot;8001&quot;<br>// 修改配置2 找到candidates后面改为你的jdk路径<br>vi /etc/rc.d/init.d/jenkins<br></code></pre></td></tr></table></figure>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509153054848.png\" alt=\"image-20220509153054848\"></p>\n<h2 id=\"三、启动\"><a href=\"#三、启动\" class=\"headerlink\" title=\"三、启动\"></a>三、启动</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">service jenkins start<br>service jenkins stop<br>service jenkins restart<br></code></pre></td></tr></table></figure>\n<h2 id=\"四、浏览器输入“ip-端口”，配置jenkins\"><a href=\"#四、浏览器输入“ip-端口”，配置jenkins\" class=\"headerlink\" title=\"四、浏览器输入“ip+端口”，配置jenkins\"></a>四、浏览器输入“ip+端口”，配置jenkins</h2><ol>\n<li><p>首页<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509153124740.png\" alt=\"image-20220509153124740\"></p>\n</li>\n<li><p>复制提示路径寻找初始密码</p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\"> //复制密码输入<br>cat /var/lib/jenkins/secrets/initialAdminPassword<br></code></pre></td></tr></table></figure>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/8fdc63f79bded19d2952bef453ed831e.png\" alt=\"enter description here\"></p>\n</li>\n<li><p>直接推荐安装，等待…<br> <img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509153135439.png\" alt=\"image-20220509153135439\"></p>\n</li>\n<li><p>创建用户<br> <img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509153200202.png\" alt=\"image-20220509153200202\"></p>\n</li>\n</ol>\n<ul>\n<li>成功安装<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509153207418.png\" alt=\"image-20220509153207418\"></li>\n</ul>\n<h2 id=\"五、Jenkins的maven，jdk环境配置\"><a href=\"#五、Jenkins的maven，jdk环境配置\" class=\"headerlink\" title=\"五、Jenkins的maven，jdk环境配置\"></a>五、Jenkins的maven，jdk环境配置</h2><ol>\n<li>在 Manage Jenkins中配置jdk和maven以及系统环境变量<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509153354659.png\" alt=\"image-20220509153354659\"></li>\n</ol>\n<ul>\n<li>JDK(取消自动安装填自己的路径)<br> <img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509153403549.png\" alt=\"image-20220509153403549\"></li>\n<li>MAVEN(取消自动安装填自己的路径)<br> <img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509153413203.png\" alt=\"image-20220509153413203\"></li>\n<li>系统环境变量<code>echo $PATH</code>查看<br> <img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509153431736.png\" alt=\"image-20220509153431736\"><br> 复制到此<br> <img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509153438814.png\" alt=\"image-20220509153438814\"></li>\n</ul>\n<ol start=\"2\">\n<li><p>安装maven插件，安装后重启</p>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/78a3d58539672e782025185c7b77f24c.png\" alt=\"enter description here\"></p>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/bff9c95900d6380b3340337da1aca328.png\" alt=\"enter description here\"></p>\n</li>\n</ol>\n<h2 id=\"六、新建spring-boot-项目\"><a href=\"#六、新建spring-boot-项目\" class=\"headerlink\" title=\"六、新建spring boot 项目\"></a>六、新建spring boot 项目</h2><ol>\n<li>新建一个spring boot的demo。<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509153516260.png\" alt=\"image-20220509153516260\"></li>\n<li>随便一个controller <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">package com.example.demo;<br><br>import org.springframework.stereotype.Controller;<br>import org.springframework.web.bind.annotation.RequestMapping;<br>import org.springframework.web.bind.annotation.ResponseBody;<br><br>@Controller<br>public class HelloController &#123;<br>    @RequestMapping(&quot;/&quot;)<br>    @ResponseBody<br>    public String hello() &#123;<br>        return &quot;Hello, SpringBoot 2&quot;;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n <img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509153528886.png\" alt=\"image-20220509153528886\"></li>\n<li>上传到git仓库，我这里上传的是gitee。<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509153540595.png\" alt=\"image-20220509153540595\"></li>\n</ol>\n<h2 id=\"七、建立任务并运行\"><a href=\"#七、建立任务并运行\" class=\"headerlink\" title=\"七、建立任务并运行\"></a>七、建立任务并运行</h2><ol>\n<li>新建任务<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509153554982.png\" alt=\"image-20220509153554982\"></li>\n<li>输入项目名称并选择maven项目<br> <img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509153604487.png\" alt=\"image-20220509153604487\"></li>\n<li>General<br> <img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509153615406.png\" alt=\"image-20220509153615406\"></li>\n<li>源码管理，配置git并填写git账号密码。<br> <img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509153627114.png\" alt=\"image-20220509153627114\"><br> <img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509153800325.png\" alt=\"image-20220509153800325\"></li>\n<li>构建触发器<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509153808812.png\" alt=\"image-20220509153808812\"></li>\n<li>Build高级中可以修改你的maven配置文件 <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">clean install -Dmaven.test.skip -U<br>//如需要选择分支打包详情参照：https://blog.csdn.net/qq_39231769/article/details/109311606<br>clean package -P dev<br></code></pre></td></tr></table></figure>\n<img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509153827729.png\" alt=\"image-20220509153827729\"></li>\n<li>post steps</li>\n</ol>\n<ul>\n<li>添加一个执行shell，注意修改你的jar包名以及保证路径存在<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">#!/bin/bash <br><br>#export BUILD_ID=dontKillMe这一句很重要，这样指定了，项目启动之后才不会被Jenkins杀掉。<br>export BUILD_ID=dontKillMe<br><br>#指定最后编译好的jar存放的位置<br>www_path=/out<br><br>#Jenkins中编译好的jar位置<br>jar_path=/var/lib/jenkins/workspace/demo/target<br><br>#Jenkins中编译好的jar名称<br>jar_name=demo-0.0.1.jar<br><br>#获取运行编译好的进程ID，便于我们在重新部署项目的时候先杀掉以前的进程<br>pid=$(cat /out/demo.pid)<br><br>#进入指定的编译好的jar的位置<br>cd  $&#123;jar_path&#125;<br><br>#将编译好的jar复制到最后指定的位置<br>cp  $&#123;jar_path&#125;/$&#123;jar_name&#125; $&#123;www_path&#125;<br><br>#进入最后指定存放jar的位置<br>cd  $&#123;www_path&#125;<br><br>#杀掉以前可能启动的项目进程<br>kill -9 $&#123;pid&#125;<br><br>#启动jar，指定SpringBoot后台启动<br>nohup java -jar  $&#123;jar_name&#125; &amp;<br><br>#将进程ID存入到shaw-web.pid文件中<br>echo $! &gt; /out/demo.pid<br></code></pre></td></tr></table></figure>\n   <img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509153835988.png\" alt=\"image-20220509153835988\"></li>\n</ul>\n<ol start=\"8\">\n<li>保存并构建项目<ul>\n<li>构建项目<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/0912e1966caa0b70fb7258d46452d6cd.png\" alt=\"enter description here\"></li>\n<li>点击构建历史可以看控制台输出<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/1603876202494.png\" alt=\"enter description here\"></li>\n</ul>\n</li>\n<li>访问项目，部署成功<br> <img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509154057961.png\" alt=\"image-20220509154057961\"></li>\n</ol>\n<hr>\n<ul>\n<li>附加内容：</li>\n</ul>\n<h2 id=\"windows版安装\"><a href=\"#windows版安装\" class=\"headerlink\" title=\"windows版安装\"></a>windows版安装</h2><ul>\n<li>步骤基本与centos相似，但有几个注意事项；</li>\n</ul>\n<ol>\n<li><a href=\"https://www.jenkins.io/zh/download/\">下载地址</a><br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509154109937.png\" alt=\"image-20220509154109937\"></li>\n<li>安装、启动、修改密码过程省略。与centos相似。</li>\n<li>注意事项 一：配置shell路径为服务器上git目录下的sh.exe文件路径。<br> <img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509154123933.png\" alt=\"image-20220509154123933\"><br> <img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/80d773a67b03f808f99e4a9153421458.png\" alt=\"enter description here\"></li>\n<li>注意事项二：新增项目时，post steps需要设置为windows的batch<br> <img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509154216554.png\" alt=\"image-20220509154216554\"></li>\n<li>注意事项三：执行脚本的不同 <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">@echo off<br>setlocal enabledelayedexpansion<br><br>::设置端口 <br>set PORT=8082<br><br>:: 设置生成路径<br>set OLD_PATH=C:\\Windows\\system32\\config\\systemprofile\\AppData\\Local\\Jenkins\\.jenkins\\workspace\\gtoa\\target<br><br>:: 设置新的存放路径<br>set NEW_PATH=C:\\out<br><br>:: 设置jar包名<br>set JAR_NAME=gtoa-0.0.1-SNAPSHOT.jar<br><br>::set /p port=Please enter the port ：<br>for /f &quot;tokens=1-5&quot; %%a in (&#x27;netstat -ano ^| find &quot;:%PORT%&quot;&#x27;) do (<br>    if &quot;%%e%&quot; == &quot;&quot; (<br>        set pid=%%d<br>    ) else (<br>        set pid=%%e<br>    )<br>    echo !pid!<br>    taskkill /f /pid !pid!<br>)<br><br>::复制文件<br>XCOPY %OLD_PATH%\\%JAR_NAME%  &quot;%NEW_PATH%&quot; /y<br><br>::防止启动后被杀死进程<br>set BUILD_ID=dontKillMe <br><br>::启动jar包<br>start javaw -jar %NEW_PATH%\\%JAR_NAME%<br></code></pre></td></tr></table></figure></li>\n</ol>\n<hr>\n"},{"title":"Spring Boot & Mybatis Plus代码生成器","date":"2022-09-05T09:09:05.000Z","category_bar":true,"_content":"# Spring Boot & Mybatis Plus代码生成器\n\n---\n\n[toc]\n\n---\n\n<font color=red size=5>\n前言：近期进入新公司以后抛弃了原有mybatis框架，使用了mybatis plus操作mysql，并设置了最基本的增删改查模板。极大程度减少了重复代码。此处单独拉出mybatis plus代码生成器以及最基础的分页配置，条件查询配置，swagger配置，sql日志打印的demo。 代码生成器不但可以生成后端Java代码，也可以经过模板配置生成前端代码。小回正在测试中....\n</font> \n\n+ 涉及技术：mybatis plus、swagger 2、hutool、lombok、mysql....\n\n+ 源码：\n [生成器源码](https://gitee.com/idse666666/code-generator.git)\n  [配置模板源码](https://gitee.com/idse666666/code-demo.git)\n\n---\n\n## 一. 分别引入生成器和模板（如报错或有提示警告，请确保配置maven3.6.1和jdk1.8，其他版本自测）。\n1. 从git创建文件： \n\n   ![image-20220721141903483](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721141903483.png)\n\n2. 分别填写上方地址：\n\n   ![image-20220721141924334](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721141924334.png)\n\n3. 引入数据库\n```javascript?linenums\nCREATE TABLE `user` (\n  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT '主键ID',\n  `name` varchar(30) DEFAULT NULL COMMENT '姓名',\n  `age` int(11) DEFAULT NULL COMMENT '年龄',\n  `email` varchar(50) DEFAULT NULL COMMENT '邮箱',\n  `is_del` tinyint(2) DEFAULT NULL COMMENT '删除标志',\n  `create_time` datetime DEFAULT NULL COMMENT '创建时间',\n  `update_time` datetime DEFAULT NULL COMMENT '修改时间',\n  PRIMARY KEY (`id`)\n) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8 COMMENT='user代码生成测试';\n```\n![image-20220721141932225](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721141932225.png)\n\n4.  详细读一下README.md\n\n\n## 二、基础配置\n+ 分别配置两个application.properties中的数据源(配置后请重启idea)\n![image-20220721141942523](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721141942523.png)\n\n\n## 三、生成代码\n1. 启动CodeGeneratorApp\n2. postman生成所需user表所对应代码\n```javascript?linenums\n//访问路径，多个用 , 分开；如：tables=user,user2\nlocalhost:8081/generator/code?tables=user\n```\n![image-20220721142001181](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721142001181.png)\n3. 解压代码并复制到demo项目中（复制后请重启idea）\n+ 解压\n![image-20220721142010077](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721142010077.png)\n+ 复制java代码\n![image-20220721142019534](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721142019534.png)\n+ 复制xml\n![image-20220721142028181](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721142028181.png)\n\n## 四、 测试生成代码\n1. swagger接口文档形式，浏览器访问http://localhost:8080/swagger-ui.html#/\n![image-20220721142037784](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721142037784.png)\n2. postman测试，略\n\n## 五、附加使用：分页插件（默认集成），条件查询，逻辑删除，时间戳自动新增和更新\n1. 分页条件查询\n```javascript?linenums\n//xml中findList方法，添加你想要查询的条件\nwhere t.is_del=0\n<if test=\"p.name != null and p.name != ''\">\n\tand t.name like '%${p.name}%'\n</if>\n//Controler的swagger参数配置\n```\n![image-20220721142048083](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721142048083.png)\n\n![image-20220721142057826](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721142057826.png)\n+ 测试：\n\n  ![image-20220721142111831](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721142111831.png)\n\n+ 观察到执行sql：select * from user t   where t.is_del=0   and t.name like '%bq%'   order by t.id desc LIMIT 0,2\n\n2. 逻辑删除：删除标志上直接加 @TableLogic 注解即可\n![image-20220721142122720](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721142122720.png)\n\n3. 时间戳自动新增和更新\n![image-20220721142142552](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721142142552.png)\n","source":"_posts/BookMark/Spring Boot/Spring Boot & Mybatis Plus代码生成器.md","raw":"---\ntitle: Spring Boot & Mybatis Plus代码生成器\ndate: 2022-09-05 17:09:05\ncategory_bar: true\ncategories: Spring Boot\ntags:\n- Spring Boot\n- Mybatis Plus\n---\n# Spring Boot & Mybatis Plus代码生成器\n\n---\n\n[toc]\n\n---\n\n<font color=red size=5>\n前言：近期进入新公司以后抛弃了原有mybatis框架，使用了mybatis plus操作mysql，并设置了最基本的增删改查模板。极大程度减少了重复代码。此处单独拉出mybatis plus代码生成器以及最基础的分页配置，条件查询配置，swagger配置，sql日志打印的demo。 代码生成器不但可以生成后端Java代码，也可以经过模板配置生成前端代码。小回正在测试中....\n</font> \n\n+ 涉及技术：mybatis plus、swagger 2、hutool、lombok、mysql....\n\n+ 源码：\n [生成器源码](https://gitee.com/idse666666/code-generator.git)\n  [配置模板源码](https://gitee.com/idse666666/code-demo.git)\n\n---\n\n## 一. 分别引入生成器和模板（如报错或有提示警告，请确保配置maven3.6.1和jdk1.8，其他版本自测）。\n1. 从git创建文件： \n\n   ![image-20220721141903483](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721141903483.png)\n\n2. 分别填写上方地址：\n\n   ![image-20220721141924334](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721141924334.png)\n\n3. 引入数据库\n```javascript?linenums\nCREATE TABLE `user` (\n  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT '主键ID',\n  `name` varchar(30) DEFAULT NULL COMMENT '姓名',\n  `age` int(11) DEFAULT NULL COMMENT '年龄',\n  `email` varchar(50) DEFAULT NULL COMMENT '邮箱',\n  `is_del` tinyint(2) DEFAULT NULL COMMENT '删除标志',\n  `create_time` datetime DEFAULT NULL COMMENT '创建时间',\n  `update_time` datetime DEFAULT NULL COMMENT '修改时间',\n  PRIMARY KEY (`id`)\n) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8 COMMENT='user代码生成测试';\n```\n![image-20220721141932225](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721141932225.png)\n\n4.  详细读一下README.md\n\n\n## 二、基础配置\n+ 分别配置两个application.properties中的数据源(配置后请重启idea)\n![image-20220721141942523](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721141942523.png)\n\n\n## 三、生成代码\n1. 启动CodeGeneratorApp\n2. postman生成所需user表所对应代码\n```javascript?linenums\n//访问路径，多个用 , 分开；如：tables=user,user2\nlocalhost:8081/generator/code?tables=user\n```\n![image-20220721142001181](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721142001181.png)\n3. 解压代码并复制到demo项目中（复制后请重启idea）\n+ 解压\n![image-20220721142010077](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721142010077.png)\n+ 复制java代码\n![image-20220721142019534](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721142019534.png)\n+ 复制xml\n![image-20220721142028181](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721142028181.png)\n\n## 四、 测试生成代码\n1. swagger接口文档形式，浏览器访问http://localhost:8080/swagger-ui.html#/\n![image-20220721142037784](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721142037784.png)\n2. postman测试，略\n\n## 五、附加使用：分页插件（默认集成），条件查询，逻辑删除，时间戳自动新增和更新\n1. 分页条件查询\n```javascript?linenums\n//xml中findList方法，添加你想要查询的条件\nwhere t.is_del=0\n<if test=\"p.name != null and p.name != ''\">\n\tand t.name like '%${p.name}%'\n</if>\n//Controler的swagger参数配置\n```\n![image-20220721142048083](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721142048083.png)\n\n![image-20220721142057826](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721142057826.png)\n+ 测试：\n\n  ![image-20220721142111831](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721142111831.png)\n\n+ 观察到执行sql：select * from user t   where t.is_del=0   and t.name like '%bq%'   order by t.id desc LIMIT 0,2\n\n2. 逻辑删除：删除标志上直接加 @TableLogic 注解即可\n![image-20220721142122720](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721142122720.png)\n\n3. 时间戳自动新增和更新\n![image-20220721142142552](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721142142552.png)\n","slug":"BookMark/Spring Boot/Spring Boot & Mybatis Plus代码生成器","published":1,"updated":"2022-09-06T07:08:49.901Z","_id":"cl7ptszol001faba5c7296ukz","comments":1,"layout":"post","photos":[],"link":"","content":"<h1><span id=\"spring-boot-amp-mybatis-plus代码生成器\">Spring Boot &amp; Mybatis Plus代码生成器</span></h1><hr>\n<p>[toc]</p>\n<hr>\n<font color=\"red\" size=\"5\">\n前言：近期进入新公司以后抛弃了原有mybatis框架，使用了mybatis plus操作mysql，并设置了最基本的增删改查模板。极大程度减少了重复代码。此处单独拉出mybatis plus代码生成器以及最基础的分页配置，条件查询配置，swagger配置，sql日志打印的demo。 代码生成器不但可以生成后端Java代码，也可以经过模板配置生成前端代码。小回正在测试中....\n</font> \n\n<ul>\n<li><p>涉及技术：mybatis plus、swagger 2、hutool、lombok、mysql….</p>\n</li>\n<li><p>源码：<br> <a href=\"https://gitee.com/idse666666/code-generator.git\">生成器源码</a><br><a href=\"https://gitee.com/idse666666/code-demo.git\">配置模板源码</a></p>\n</li>\n</ul>\n<hr>\n<h2><span id=\"一-分别引入生成器和模板如报错或有提示警告请确保配置maven361和jdk18其他版本自测\">一. 分别引入生成器和模板（如报错或有提示警告，请确保配置maven3.6.1和jdk1.8，其他版本自测）。</span></h2><ol>\n<li><p>从git创建文件： </p>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721141903483.png\" alt=\"image-20220721141903483\"></p>\n</li>\n<li><p>分别填写上方地址：</p>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721141924334.png\" alt=\"image-20220721141924334\"></p>\n</li>\n<li><p>引入数据库</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">CREATE TABLE `user` (<br>  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT &#x27;主键ID&#x27;,<br>  `name` varchar(30) DEFAULT NULL COMMENT &#x27;姓名&#x27;,<br>  `age` int(11) DEFAULT NULL COMMENT &#x27;年龄&#x27;,<br>  `email` varchar(50) DEFAULT NULL COMMENT &#x27;邮箱&#x27;,<br>  `is_del` tinyint(2) DEFAULT NULL COMMENT &#x27;删除标志&#x27;,<br>  `create_time` datetime DEFAULT NULL COMMENT &#x27;创建时间&#x27;,<br>  `update_time` datetime DEFAULT NULL COMMENT &#x27;修改时间&#x27;,<br>  PRIMARY KEY (`id`)<br>) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8 COMMENT=&#x27;user代码生成测试&#x27;;<br></code></pre></td></tr></table></figure>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721141932225.png\" alt=\"image-20220721141932225\"></p>\n</li>\n<li><p>详细读一下README.md</p>\n</li>\n</ol>\n<h2><span id=\"二-基础配置\">二、基础配置</span></h2><ul>\n<li>分别配置两个application.properties中的数据源(配置后请重启idea)<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721141942523.png\" alt=\"image-20220721141942523\"></li>\n</ul>\n<h2><span id=\"三-生成代码\">三、生成代码</span></h2><ol>\n<li>启动CodeGeneratorApp</li>\n<li>postman生成所需user表所对应代码<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">//访问路径，多个用 , 分开；如：tables=user,user2<br>localhost:8081/generator/code?tables=user<br></code></pre></td></tr></table></figure>\n<img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721142001181.png\" alt=\"image-20220721142001181\"></li>\n<li>解压代码并复制到demo项目中（复制后请重启idea）</li>\n</ol>\n<ul>\n<li>解压<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721142010077.png\" alt=\"image-20220721142010077\"></li>\n<li>复制java代码<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721142019534.png\" alt=\"image-20220721142019534\"></li>\n<li>复制xml<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721142028181.png\" alt=\"image-20220721142028181\"></li>\n</ul>\n<h2><span id=\"四-测试生成代码\">四、 测试生成代码</span></h2><ol>\n<li>swagger接口文档形式，浏览器访问<a href=\"http://localhost:8080/swagger-ui.html#/\">http://localhost:8080/swagger-ui.html#/</a><br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721142037784.png\" alt=\"image-20220721142037784\"></li>\n<li>postman测试，略</li>\n</ol>\n<h2><span id=\"五-附加使用分页插件默认集成条件查询逻辑删除时间戳自动新增和更新\">五、附加使用：分页插件（默认集成），条件查询，逻辑删除，时间戳自动新增和更新</span></h2><ol>\n<li>分页条件查询<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">//xml中findList方法，添加你想要查询的条件<br>where t.is_del=0<br>&lt;if test=&quot;p.name != null and p.name != &#x27;&#x27;&quot;&gt;<br>\tand t.name like &#x27;%$&#123;p.name&#125;%&#x27;<br>&lt;/if&gt;<br>//Controler的swagger参数配置<br></code></pre></td></tr></table></figure>\n<img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721142048083.png\" alt=\"image-20220721142048083\"></li>\n</ol>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721142057826.png\" alt=\"image-20220721142057826\"></p>\n<ul>\n<li><p>测试：</p>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721142111831.png\" alt=\"image-20220721142111831\"></p>\n</li>\n<li><p>观察到执行sql：select * from user t   where t.is_del&#x3D;0   and t.name like ‘%bq%’   order by t.id desc LIMIT 0,2</p>\n</li>\n</ul>\n<ol start=\"2\">\n<li><p>逻辑删除：删除标志上直接加 @TableLogic 注解即可<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721142122720.png\" alt=\"image-20220721142122720\"></p>\n</li>\n<li><p>时间戳自动新增和更新<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721142142552.png\" alt=\"image-20220721142142552\"></p>\n</li>\n</ol>\n","site":{"data":{}},"wordcount":1522,"excerpt":"","more":"<h1 id=\"Spring-Boot-amp-Mybatis-Plus代码生成器\"><a href=\"#Spring-Boot-amp-Mybatis-Plus代码生成器\" class=\"headerlink\" title=\"Spring Boot &amp; Mybatis Plus代码生成器\"></a>Spring Boot &amp; Mybatis Plus代码生成器</h1><hr>\n<p>[toc]</p>\n<hr>\n<font color=red size=5>\n前言：近期进入新公司以后抛弃了原有mybatis框架，使用了mybatis plus操作mysql，并设置了最基本的增删改查模板。极大程度减少了重复代码。此处单独拉出mybatis plus代码生成器以及最基础的分页配置，条件查询配置，swagger配置，sql日志打印的demo。 代码生成器不但可以生成后端Java代码，也可以经过模板配置生成前端代码。小回正在测试中....\n</font> \n\n<ul>\n<li><p>涉及技术：mybatis plus、swagger 2、hutool、lombok、mysql….</p>\n</li>\n<li><p>源码：<br> <a href=\"https://gitee.com/idse666666/code-generator.git\">生成器源码</a><br><a href=\"https://gitee.com/idse666666/code-demo.git\">配置模板源码</a></p>\n</li>\n</ul>\n<hr>\n<h2 id=\"一-分别引入生成器和模板（如报错或有提示警告，请确保配置maven3-6-1和jdk1-8，其他版本自测）。\"><a href=\"#一-分别引入生成器和模板（如报错或有提示警告，请确保配置maven3-6-1和jdk1-8，其他版本自测）。\" class=\"headerlink\" title=\"一. 分别引入生成器和模板（如报错或有提示警告，请确保配置maven3.6.1和jdk1.8，其他版本自测）。\"></a>一. 分别引入生成器和模板（如报错或有提示警告，请确保配置maven3.6.1和jdk1.8，其他版本自测）。</h2><ol>\n<li><p>从git创建文件： </p>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721141903483.png\" alt=\"image-20220721141903483\"></p>\n</li>\n<li><p>分别填写上方地址：</p>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721141924334.png\" alt=\"image-20220721141924334\"></p>\n</li>\n<li><p>引入数据库</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">CREATE TABLE `user` (<br>  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT &#x27;主键ID&#x27;,<br>  `name` varchar(30) DEFAULT NULL COMMENT &#x27;姓名&#x27;,<br>  `age` int(11) DEFAULT NULL COMMENT &#x27;年龄&#x27;,<br>  `email` varchar(50) DEFAULT NULL COMMENT &#x27;邮箱&#x27;,<br>  `is_del` tinyint(2) DEFAULT NULL COMMENT &#x27;删除标志&#x27;,<br>  `create_time` datetime DEFAULT NULL COMMENT &#x27;创建时间&#x27;,<br>  `update_time` datetime DEFAULT NULL COMMENT &#x27;修改时间&#x27;,<br>  PRIMARY KEY (`id`)<br>) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8 COMMENT=&#x27;user代码生成测试&#x27;;<br></code></pre></td></tr></table></figure>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721141932225.png\" alt=\"image-20220721141932225\"></p>\n</li>\n<li><p>详细读一下README.md</p>\n</li>\n</ol>\n<h2 id=\"二、基础配置\"><a href=\"#二、基础配置\" class=\"headerlink\" title=\"二、基础配置\"></a>二、基础配置</h2><ul>\n<li>分别配置两个application.properties中的数据源(配置后请重启idea)<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721141942523.png\" alt=\"image-20220721141942523\"></li>\n</ul>\n<h2 id=\"三、生成代码\"><a href=\"#三、生成代码\" class=\"headerlink\" title=\"三、生成代码\"></a>三、生成代码</h2><ol>\n<li>启动CodeGeneratorApp</li>\n<li>postman生成所需user表所对应代码<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">//访问路径，多个用 , 分开；如：tables=user,user2<br>localhost:8081/generator/code?tables=user<br></code></pre></td></tr></table></figure>\n<img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721142001181.png\" alt=\"image-20220721142001181\"></li>\n<li>解压代码并复制到demo项目中（复制后请重启idea）</li>\n</ol>\n<ul>\n<li>解压<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721142010077.png\" alt=\"image-20220721142010077\"></li>\n<li>复制java代码<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721142019534.png\" alt=\"image-20220721142019534\"></li>\n<li>复制xml<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721142028181.png\" alt=\"image-20220721142028181\"></li>\n</ul>\n<h2 id=\"四、-测试生成代码\"><a href=\"#四、-测试生成代码\" class=\"headerlink\" title=\"四、 测试生成代码\"></a>四、 测试生成代码</h2><ol>\n<li>swagger接口文档形式，浏览器访问<a href=\"http://localhost:8080/swagger-ui.html#/\">http://localhost:8080/swagger-ui.html#/</a><br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721142037784.png\" alt=\"image-20220721142037784\"></li>\n<li>postman测试，略</li>\n</ol>\n<h2 id=\"五、附加使用：分页插件（默认集成），条件查询，逻辑删除，时间戳自动新增和更新\"><a href=\"#五、附加使用：分页插件（默认集成），条件查询，逻辑删除，时间戳自动新增和更新\" class=\"headerlink\" title=\"五、附加使用：分页插件（默认集成），条件查询，逻辑删除，时间戳自动新增和更新\"></a>五、附加使用：分页插件（默认集成），条件查询，逻辑删除，时间戳自动新增和更新</h2><ol>\n<li>分页条件查询<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">//xml中findList方法，添加你想要查询的条件<br>where t.is_del=0<br>&lt;if test=&quot;p.name != null and p.name != &#x27;&#x27;&quot;&gt;<br>\tand t.name like &#x27;%$&#123;p.name&#125;%&#x27;<br>&lt;/if&gt;<br>//Controler的swagger参数配置<br></code></pre></td></tr></table></figure>\n<img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721142048083.png\" alt=\"image-20220721142048083\"></li>\n</ol>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721142057826.png\" alt=\"image-20220721142057826\"></p>\n<ul>\n<li><p>测试：</p>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721142111831.png\" alt=\"image-20220721142111831\"></p>\n</li>\n<li><p>观察到执行sql：select * from user t   where t.is_del&#x3D;0   and t.name like ‘%bq%’   order by t.id desc LIMIT 0,2</p>\n</li>\n</ul>\n<ol start=\"2\">\n<li><p>逻辑删除：删除标志上直接加 @TableLogic 注解即可<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721142122720.png\" alt=\"image-20220721142122720\"></p>\n</li>\n<li><p>时间戳自动新增和更新<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721142142552.png\" alt=\"image-20220721142142552\"></p>\n</li>\n</ol>\n"},{"title":"Spring Boot & RabbitMq 延迟消息队列死信队列实现定时任务","date":"2022-09-05T09:09:05.000Z","category_bar":true,"_content":"# Spring Boot & RabbitMq 延迟消息队列死信队列实现定时任务\n1. TradeProcess\n```javascript?linenums\n@Service\npublic class TradeProcess {\n\n    @Autowired\n    private AmqpTemplate amqpTemplate;\n\n    @RabbitListener(queues= MqConstant.MY_TRANS_QUEUE)\n    @RabbitHandler\n    public void process(String content) {\n        String msg = content.split(\":\")[0];\n        String delayQueueName = content.split(\":\")[1];\n        amqpTemplate.convertAndSend(MqConstant.MY_EXCHANGE, delayQueueName, msg);\n//        System.out.println(\"进行转发 {}\"+ new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").format(new Date()));\n    }\n}\n```\n2. MqConstant\n```javascript?linenums\npublic class MqConstant {\n\n    public static final String MY_EXCHANGE = \"dy_order_delay_exchange\";\n\n    public static final String MY_QUEUE_ONE = \"my_queue_one\";\n\n    public static final String Order_DENLY_QUEQE = \"my_queue_two\";\n\n    public static final String DEAD_LETTER_QUEUE = \"dead_letter_queue\";\n\n    public static final String MY_TRANS_QUEUE = \"my_trans_queue\";\n\n}\n```\n3. RabbitMqConfig\n```javascript?linenums\n\n@Configuration\npublic class RabbitMqConfig {\n\n\n\n    @Bean\n    public DirectExchange myExchange() {\n        return new DirectExchange(MqConstant.MY_EXCHANGE, true, false);\n    }\n\n    @Bean\n    public Queue myQueueOne() {\n        return new Queue(MqConstant.MY_QUEUE_ONE, true, false, false);\n    }\n\n    @Bean\n    public Queue myQueueTwo() {\n        return new Queue(MqConstant.Order_DENLY_QUEQE, true, false, false);\n    }\n    @Bean\n    public Queue myTransQueue() {\n        return new Queue(MqConstant.MY_TRANS_QUEUE, true, false, false);\n    }\n\n    @Bean\n    public Queue deadLetterQueue() {\n        Map<String, Object> map = new HashMap<>();\n        map.put(\"x-dead-letter-exchange\", MqConstant.MY_EXCHANGE);\n        map.put(\"x-dead-letter-routing-key\", MqConstant.MY_TRANS_QUEUE);\n        Queue queue = new Queue(MqConstant.DEAD_LETTER_QUEUE, true, false, false, map);\n        System.out.println(\"arguments :\" + queue.getArguments());\n        return queue;\n    }\n\n    @Bean\n    public Binding queueOneBinding() {\n        return BindingBuilder.bind(myQueueOne()).to(myExchange()).with(MqConstant.MY_QUEUE_ONE);\n    }\n\n    @Bean\n    public Binding queueTwoBinding() {\n        return BindingBuilder.bind(myQueueTwo()).to(myExchange()).with(MqConstant.Order_DENLY_QUEQE);\n    }\n\n    @Bean\n    public Binding queueDeadBinding() {\n        return BindingBuilder.bind(deadLetterQueue()).to(myExchange()).with(MqConstant.DEAD_LETTER_QUEUE);\n    }\n\n    @Bean\n    public Binding queueTransBinding() {\n        return BindingBuilder.bind(myTransQueue()).to(myExchange()).with(MqConstant.MY_TRANS_QUEUE);\n    }\n\n```\n4.RabbitQueueService\n```javascript?linenums\npublic interface RabbitQueueService {\n\n    /**\n     * 发布到延时队列\n     * @param msg 消息内容\n     * @param time 时间/秒\n     * @param delayQueueName 延时队列名称\n     */\n    void send(String msg,long time,String delayQueueName);\n\n\n}\n```\n5. RabbitQueueServiceImpl\n```javascript?linenums\n@Service\npublic class RabbitQueueServiceImpl implements RabbitQueueService {\n\n    //@Resource\n    //DyOrderService dyOrderService;\n\n    @Resource\n    AmqpTemplate amqpTemplate;\n\n    @Autowired\n    ApplicationContext context;\n\n\n    class SendEvent{\n        String msg ;\n        long time;\n        String delayQueueName;\n    }\n\n\n    @Override\n    public void send(String msg, long time, String delayQueueName) {\n        //rabbit默认为毫秒级\n\n        SendEvent event = new SendEvent();\n        event.delayQueueName = delayQueueName;\n        event.msg = msg;\n        event.time = time;\n        context.publishEvent(event);\n\n    }\n\n\n    @EventListener\n    public void publish(SendEvent event){\n        long times = event.time*1000;\n        MessagePostProcessor processor = new MessagePostProcessor() {\n            @Override\n            public Message postProcessMessage(Message message) throws AmqpException {\n                message.getMessageProperties().setExpiration(String.valueOf(times));\n                return message;\n            }\n        };\n        // 拼装msg\n        String msg = StringUtils.join(event.msg, \":\", event.delayQueueName);\n        amqpTemplate.convertAndSend(MqConstant.MY_EXCHANGE, MqConstant.DEAD_LETTER_QUEUE, msg, processor);\n    }\n\n    @RabbitListener(queues = MqConstant.MY_QUEUE_ONE)\n    public void receiveA(Message message, Channel channel) throws IOException {\n        String msg = new String(message.getBody());\n        System.out.println(\"当前时间：{},死信队列A收到消息：{}\"+new Date().toString()+ msg);\n        /*channel.basicAck(message.getMessageProperties().getDeliveryTag(), false);\n        Map<String,Long> map = new HashedMap();\n        map.put(\"id\",Long.valueOf(msg));\n        dyOrderService.cancleOrder(map);*/\n    }\n\n}\n```\n6. 测试\n```javascript?linenums\n@RestController\n@RequestMapping(\"/delayQueue\")\npublic class TestController {\n\n    @Resource\n    RabbitQueueService rabbitQueueService;\n\n    @GetMapping(\"/send/{time}\")\n    public String send(@PathVariable(\"time\") int time){\n        System.out.println(\"{}秒后, 发送延迟消息，当前时间{}\"+time+\":\"+ new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").format(new Date()));\n        rabbitQueueService.send(\"我是延时消息...\", time, MqConstant.MY_QUEUE_ONE);\n        return \"ok\";\n\n    }\n\n}\n```\n\n<font color=red size=5> 最后：如果你需要实现定时在xxxx-xx-xx时间点，只需要拿该时间计算出与当前时间的时间差，设为定时的time即可</font>\n```javascript?linenums\n        Date timingOnTime = DateUtil.parse(MapUtil.getStr(map, \"timingOnTime\"));\n\n        Date nowTime= DateUtil.date();\n        DySku dySku = iDySkuService.selectById(id);\n\t\t\n        //使用hutool计算时间差，非绝对值\n        long betweenSecond = DateUtil.between(nowTime,timingOnTime, DateUnit.SECOND,false);\n        logger.info(\"商品 {} 在 {} 定时上架消息发出,将在 {} 定时上架；距离当前时间{}s\",dySku.getName(),DateUtil.now(),timingOnTime,betweenSecond+1);\n        rabbitQueueService.sendSkuMakeTable(String.valueOf(dySku.getId()), betweenSecond+1, MqConstant.SKU_MAKETABLE_QUEUE);\n\n```","source":"_posts/BookMark/Spring Boot/Spring Boot & RabbitMq 延迟消息队列死信队列实现定时任务.md","raw":"---\ntitle: Spring Boot & RabbitMq 延迟消息队列死信队列实现定时任务\ndate: 2022-09-05 17:09:05\ncategory_bar: true\ncategories: Spring Boot\ntags:\n- Spring Boot\n- RabbitMq\n---\n# Spring Boot & RabbitMq 延迟消息队列死信队列实现定时任务\n1. TradeProcess\n```javascript?linenums\n@Service\npublic class TradeProcess {\n\n    @Autowired\n    private AmqpTemplate amqpTemplate;\n\n    @RabbitListener(queues= MqConstant.MY_TRANS_QUEUE)\n    @RabbitHandler\n    public void process(String content) {\n        String msg = content.split(\":\")[0];\n        String delayQueueName = content.split(\":\")[1];\n        amqpTemplate.convertAndSend(MqConstant.MY_EXCHANGE, delayQueueName, msg);\n//        System.out.println(\"进行转发 {}\"+ new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").format(new Date()));\n    }\n}\n```\n2. MqConstant\n```javascript?linenums\npublic class MqConstant {\n\n    public static final String MY_EXCHANGE = \"dy_order_delay_exchange\";\n\n    public static final String MY_QUEUE_ONE = \"my_queue_one\";\n\n    public static final String Order_DENLY_QUEQE = \"my_queue_two\";\n\n    public static final String DEAD_LETTER_QUEUE = \"dead_letter_queue\";\n\n    public static final String MY_TRANS_QUEUE = \"my_trans_queue\";\n\n}\n```\n3. RabbitMqConfig\n```javascript?linenums\n\n@Configuration\npublic class RabbitMqConfig {\n\n\n\n    @Bean\n    public DirectExchange myExchange() {\n        return new DirectExchange(MqConstant.MY_EXCHANGE, true, false);\n    }\n\n    @Bean\n    public Queue myQueueOne() {\n        return new Queue(MqConstant.MY_QUEUE_ONE, true, false, false);\n    }\n\n    @Bean\n    public Queue myQueueTwo() {\n        return new Queue(MqConstant.Order_DENLY_QUEQE, true, false, false);\n    }\n    @Bean\n    public Queue myTransQueue() {\n        return new Queue(MqConstant.MY_TRANS_QUEUE, true, false, false);\n    }\n\n    @Bean\n    public Queue deadLetterQueue() {\n        Map<String, Object> map = new HashMap<>();\n        map.put(\"x-dead-letter-exchange\", MqConstant.MY_EXCHANGE);\n        map.put(\"x-dead-letter-routing-key\", MqConstant.MY_TRANS_QUEUE);\n        Queue queue = new Queue(MqConstant.DEAD_LETTER_QUEUE, true, false, false, map);\n        System.out.println(\"arguments :\" + queue.getArguments());\n        return queue;\n    }\n\n    @Bean\n    public Binding queueOneBinding() {\n        return BindingBuilder.bind(myQueueOne()).to(myExchange()).with(MqConstant.MY_QUEUE_ONE);\n    }\n\n    @Bean\n    public Binding queueTwoBinding() {\n        return BindingBuilder.bind(myQueueTwo()).to(myExchange()).with(MqConstant.Order_DENLY_QUEQE);\n    }\n\n    @Bean\n    public Binding queueDeadBinding() {\n        return BindingBuilder.bind(deadLetterQueue()).to(myExchange()).with(MqConstant.DEAD_LETTER_QUEUE);\n    }\n\n    @Bean\n    public Binding queueTransBinding() {\n        return BindingBuilder.bind(myTransQueue()).to(myExchange()).with(MqConstant.MY_TRANS_QUEUE);\n    }\n\n```\n4.RabbitQueueService\n```javascript?linenums\npublic interface RabbitQueueService {\n\n    /**\n     * 发布到延时队列\n     * @param msg 消息内容\n     * @param time 时间/秒\n     * @param delayQueueName 延时队列名称\n     */\n    void send(String msg,long time,String delayQueueName);\n\n\n}\n```\n5. RabbitQueueServiceImpl\n```javascript?linenums\n@Service\npublic class RabbitQueueServiceImpl implements RabbitQueueService {\n\n    //@Resource\n    //DyOrderService dyOrderService;\n\n    @Resource\n    AmqpTemplate amqpTemplate;\n\n    @Autowired\n    ApplicationContext context;\n\n\n    class SendEvent{\n        String msg ;\n        long time;\n        String delayQueueName;\n    }\n\n\n    @Override\n    public void send(String msg, long time, String delayQueueName) {\n        //rabbit默认为毫秒级\n\n        SendEvent event = new SendEvent();\n        event.delayQueueName = delayQueueName;\n        event.msg = msg;\n        event.time = time;\n        context.publishEvent(event);\n\n    }\n\n\n    @EventListener\n    public void publish(SendEvent event){\n        long times = event.time*1000;\n        MessagePostProcessor processor = new MessagePostProcessor() {\n            @Override\n            public Message postProcessMessage(Message message) throws AmqpException {\n                message.getMessageProperties().setExpiration(String.valueOf(times));\n                return message;\n            }\n        };\n        // 拼装msg\n        String msg = StringUtils.join(event.msg, \":\", event.delayQueueName);\n        amqpTemplate.convertAndSend(MqConstant.MY_EXCHANGE, MqConstant.DEAD_LETTER_QUEUE, msg, processor);\n    }\n\n    @RabbitListener(queues = MqConstant.MY_QUEUE_ONE)\n    public void receiveA(Message message, Channel channel) throws IOException {\n        String msg = new String(message.getBody());\n        System.out.println(\"当前时间：{},死信队列A收到消息：{}\"+new Date().toString()+ msg);\n        /*channel.basicAck(message.getMessageProperties().getDeliveryTag(), false);\n        Map<String,Long> map = new HashedMap();\n        map.put(\"id\",Long.valueOf(msg));\n        dyOrderService.cancleOrder(map);*/\n    }\n\n}\n```\n6. 测试\n```javascript?linenums\n@RestController\n@RequestMapping(\"/delayQueue\")\npublic class TestController {\n\n    @Resource\n    RabbitQueueService rabbitQueueService;\n\n    @GetMapping(\"/send/{time}\")\n    public String send(@PathVariable(\"time\") int time){\n        System.out.println(\"{}秒后, 发送延迟消息，当前时间{}\"+time+\":\"+ new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").format(new Date()));\n        rabbitQueueService.send(\"我是延时消息...\", time, MqConstant.MY_QUEUE_ONE);\n        return \"ok\";\n\n    }\n\n}\n```\n\n<font color=red size=5> 最后：如果你需要实现定时在xxxx-xx-xx时间点，只需要拿该时间计算出与当前时间的时间差，设为定时的time即可</font>\n```javascript?linenums\n        Date timingOnTime = DateUtil.parse(MapUtil.getStr(map, \"timingOnTime\"));\n\n        Date nowTime= DateUtil.date();\n        DySku dySku = iDySkuService.selectById(id);\n\t\t\n        //使用hutool计算时间差，非绝对值\n        long betweenSecond = DateUtil.between(nowTime,timingOnTime, DateUnit.SECOND,false);\n        logger.info(\"商品 {} 在 {} 定时上架消息发出,将在 {} 定时上架；距离当前时间{}s\",dySku.getName(),DateUtil.now(),timingOnTime,betweenSecond+1);\n        rabbitQueueService.sendSkuMakeTable(String.valueOf(dySku.getId()), betweenSecond+1, MqConstant.SKU_MAKETABLE_QUEUE);\n\n```","slug":"BookMark/Spring Boot/Spring Boot & RabbitMq 延迟消息队列死信队列实现定时任务","published":1,"updated":"2022-09-06T07:08:49.898Z","_id":"cl7ptszol001gaba55gm31487","comments":1,"layout":"post","photos":[],"link":"","content":"<h1><span id=\"spring-boot-amp-rabbitmq-延迟消息队列死信队列实现定时任务\">Spring Boot &amp; RabbitMq 延迟消息队列死信队列实现定时任务</span></h1><ol>\n<li>TradeProcess<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">@Service<br>public class TradeProcess &#123;<br><br>    @Autowired<br>    private AmqpTemplate amqpTemplate;<br><br>    @RabbitListener(queues= MqConstant.MY_TRANS_QUEUE)<br>    @RabbitHandler<br>    public void process(String content) &#123;<br>        String msg = content.split(&quot;:&quot;)[0];<br>        String delayQueueName = content.split(&quot;:&quot;)[1];<br>        amqpTemplate.convertAndSend(MqConstant.MY_EXCHANGE, delayQueueName, msg);<br>//        System.out.println(&quot;进行转发 &#123;&#125;&quot;+ new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;).format(new Date()));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li>\n<li>MqConstant<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">public class MqConstant &#123;<br><br>    public static final String MY_EXCHANGE = &quot;dy_order_delay_exchange&quot;;<br><br>    public static final String MY_QUEUE_ONE = &quot;my_queue_one&quot;;<br><br>    public static final String Order_DENLY_QUEQE = &quot;my_queue_two&quot;;<br><br>    public static final String DEAD_LETTER_QUEUE = &quot;dead_letter_queue&quot;;<br><br>    public static final String MY_TRANS_QUEUE = &quot;my_trans_queue&quot;;<br><br>&#125;<br></code></pre></td></tr></table></figure></li>\n<li>RabbitMqConfig<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\"><br>@Configuration<br>public class RabbitMqConfig &#123;<br><br><br><br>    @Bean<br>    public DirectExchange myExchange() &#123;<br>        return new DirectExchange(MqConstant.MY_EXCHANGE, true, false);<br>    &#125;<br><br>    @Bean<br>    public Queue myQueueOne() &#123;<br>        return new Queue(MqConstant.MY_QUEUE_ONE, true, false, false);<br>    &#125;<br><br>    @Bean<br>    public Queue myQueueTwo() &#123;<br>        return new Queue(MqConstant.Order_DENLY_QUEQE, true, false, false);<br>    &#125;<br>    @Bean<br>    public Queue myTransQueue() &#123;<br>        return new Queue(MqConstant.MY_TRANS_QUEUE, true, false, false);<br>    &#125;<br><br>    @Bean<br>    public Queue deadLetterQueue() &#123;<br>        Map&lt;String, Object&gt; map = new HashMap&lt;&gt;();<br>        map.put(&quot;x-dead-letter-exchange&quot;, MqConstant.MY_EXCHANGE);<br>        map.put(&quot;x-dead-letter-routing-key&quot;, MqConstant.MY_TRANS_QUEUE);<br>        Queue queue = new Queue(MqConstant.DEAD_LETTER_QUEUE, true, false, false, map);<br>        System.out.println(&quot;arguments :&quot; + queue.getArguments());<br>        return queue;<br>    &#125;<br><br>    @Bean<br>    public Binding queueOneBinding() &#123;<br>        return BindingBuilder.bind(myQueueOne()).to(myExchange()).with(MqConstant.MY_QUEUE_ONE);<br>    &#125;<br><br>    @Bean<br>    public Binding queueTwoBinding() &#123;<br>        return BindingBuilder.bind(myQueueTwo()).to(myExchange()).with(MqConstant.Order_DENLY_QUEQE);<br>    &#125;<br><br>    @Bean<br>    public Binding queueDeadBinding() &#123;<br>        return BindingBuilder.bind(deadLetterQueue()).to(myExchange()).with(MqConstant.DEAD_LETTER_QUEUE);<br>    &#125;<br><br>    @Bean<br>    public Binding queueTransBinding() &#123;<br>        return BindingBuilder.bind(myTransQueue()).to(myExchange()).with(MqConstant.MY_TRANS_QUEUE);<br>    &#125;<br><br></code></pre></td></tr></table></figure>\n4.RabbitQueueService<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">public interface RabbitQueueService &#123;<br><br>    /**<br>     * 发布到延时队列<br>     * @param msg 消息内容<br>     * @param time 时间/秒<br>     * @param delayQueueName 延时队列名称<br>     */<br>    void send(String msg,long time,String delayQueueName);<br><br><br>&#125;<br></code></pre></td></tr></table></figure></li>\n<li>RabbitQueueServiceImpl<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">@Service<br>public class RabbitQueueServiceImpl implements RabbitQueueService &#123;<br><br>    //@Resource<br>    //DyOrderService dyOrderService;<br><br>    @Resource<br>    AmqpTemplate amqpTemplate;<br><br>    @Autowired<br>    ApplicationContext context;<br><br><br>    class SendEvent&#123;<br>        String msg ;<br>        long time;<br>        String delayQueueName;<br>    &#125;<br><br><br>    @Override<br>    public void send(String msg, long time, String delayQueueName) &#123;<br>        //rabbit默认为毫秒级<br><br>        SendEvent event = new SendEvent();<br>        event.delayQueueName = delayQueueName;<br>        event.msg = msg;<br>        event.time = time;<br>        context.publishEvent(event);<br><br>    &#125;<br><br><br>    @EventListener<br>    public void publish(SendEvent event)&#123;<br>        long times = event.time*1000;<br>        MessagePostProcessor processor = new MessagePostProcessor() &#123;<br>            @Override<br>            public Message postProcessMessage(Message message) throws AmqpException &#123;<br>                message.getMessageProperties().setExpiration(String.valueOf(times));<br>                return message;<br>            &#125;<br>        &#125;;<br>        // 拼装msg<br>        String msg = StringUtils.join(event.msg, &quot;:&quot;, event.delayQueueName);<br>        amqpTemplate.convertAndSend(MqConstant.MY_EXCHANGE, MqConstant.DEAD_LETTER_QUEUE, msg, processor);<br>    &#125;<br><br>    @RabbitListener(queues = MqConstant.MY_QUEUE_ONE)<br>    public void receiveA(Message message, Channel channel) throws IOException &#123;<br>        String msg = new String(message.getBody());<br>        System.out.println(&quot;当前时间：&#123;&#125;,死信队列A收到消息：&#123;&#125;&quot;+new Date().toString()+ msg);<br>        /*channel.basicAck(message.getMessageProperties().getDeliveryTag(), false);<br>        Map&lt;String,Long&gt; map = new HashedMap();<br>        map.put(&quot;id&quot;,Long.valueOf(msg));<br>        dyOrderService.cancleOrder(map);*/<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li>\n<li>测试<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">@RestController<br>@RequestMapping(&quot;/delayQueue&quot;)<br>public class TestController &#123;<br><br>    @Resource<br>    RabbitQueueService rabbitQueueService;<br><br>    @GetMapping(&quot;/send/&#123;time&#125;&quot;)<br>    public String send(@PathVariable(&quot;time&quot;) int time)&#123;<br>        System.out.println(&quot;&#123;&#125;秒后, 发送延迟消息，当前时间&#123;&#125;&quot;+time+&quot;:&quot;+ new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;).format(new Date()));<br>        rabbitQueueService.send(&quot;我是延时消息...&quot;, time, MqConstant.MY_QUEUE_ONE);<br>        return &quot;ok&quot;;<br><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li>\n</ol>\n<p><font color=\"red\" size=\"5\"> 最后：如果你需要实现定时在xxxx-xx-xx时间点，只需要拿该时间计算出与当前时间的时间差，设为定时的time即可</font></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">Date timingOnTime = DateUtil.parse(MapUtil.getStr(map, &quot;timingOnTime&quot;));<br><br>Date nowTime= DateUtil.date();<br>DySku dySku = iDySkuService.selectById(id);<br>\t\t<br>//使用hutool计算时间差，非绝对值<br>long betweenSecond = DateUtil.between(nowTime,timingOnTime, DateUnit.SECOND,false);<br>logger.info(&quot;商品 &#123;&#125; 在 &#123;&#125; 定时上架消息发出,将在 &#123;&#125; 定时上架；距离当前时间&#123;&#125;s&quot;,dySku.getName(),DateUtil.now(),timingOnTime,betweenSecond+1);<br>rabbitQueueService.sendSkuMakeTable(String.valueOf(dySku.getId()), betweenSecond+1, MqConstant.SKU_MAKETABLE_QUEUE);<br><br></code></pre></td></tr></table></figure>","site":{"data":{}},"wordcount":5328,"excerpt":"","more":"<h1 id=\"Spring-Boot-amp-RabbitMq-延迟消息队列死信队列实现定时任务\"><a href=\"#Spring-Boot-amp-RabbitMq-延迟消息队列死信队列实现定时任务\" class=\"headerlink\" title=\"Spring Boot &amp; RabbitMq 延迟消息队列死信队列实现定时任务\"></a>Spring Boot &amp; RabbitMq 延迟消息队列死信队列实现定时任务</h1><ol>\n<li>TradeProcess<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">@Service<br>public class TradeProcess &#123;<br><br>    @Autowired<br>    private AmqpTemplate amqpTemplate;<br><br>    @RabbitListener(queues= MqConstant.MY_TRANS_QUEUE)<br>    @RabbitHandler<br>    public void process(String content) &#123;<br>        String msg = content.split(&quot;:&quot;)[0];<br>        String delayQueueName = content.split(&quot;:&quot;)[1];<br>        amqpTemplate.convertAndSend(MqConstant.MY_EXCHANGE, delayQueueName, msg);<br>//        System.out.println(&quot;进行转发 &#123;&#125;&quot;+ new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;).format(new Date()));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li>\n<li>MqConstant<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">public class MqConstant &#123;<br><br>    public static final String MY_EXCHANGE = &quot;dy_order_delay_exchange&quot;;<br><br>    public static final String MY_QUEUE_ONE = &quot;my_queue_one&quot;;<br><br>    public static final String Order_DENLY_QUEQE = &quot;my_queue_two&quot;;<br><br>    public static final String DEAD_LETTER_QUEUE = &quot;dead_letter_queue&quot;;<br><br>    public static final String MY_TRANS_QUEUE = &quot;my_trans_queue&quot;;<br><br>&#125;<br></code></pre></td></tr></table></figure></li>\n<li>RabbitMqConfig<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\"><br>@Configuration<br>public class RabbitMqConfig &#123;<br><br><br><br>    @Bean<br>    public DirectExchange myExchange() &#123;<br>        return new DirectExchange(MqConstant.MY_EXCHANGE, true, false);<br>    &#125;<br><br>    @Bean<br>    public Queue myQueueOne() &#123;<br>        return new Queue(MqConstant.MY_QUEUE_ONE, true, false, false);<br>    &#125;<br><br>    @Bean<br>    public Queue myQueueTwo() &#123;<br>        return new Queue(MqConstant.Order_DENLY_QUEQE, true, false, false);<br>    &#125;<br>    @Bean<br>    public Queue myTransQueue() &#123;<br>        return new Queue(MqConstant.MY_TRANS_QUEUE, true, false, false);<br>    &#125;<br><br>    @Bean<br>    public Queue deadLetterQueue() &#123;<br>        Map&lt;String, Object&gt; map = new HashMap&lt;&gt;();<br>        map.put(&quot;x-dead-letter-exchange&quot;, MqConstant.MY_EXCHANGE);<br>        map.put(&quot;x-dead-letter-routing-key&quot;, MqConstant.MY_TRANS_QUEUE);<br>        Queue queue = new Queue(MqConstant.DEAD_LETTER_QUEUE, true, false, false, map);<br>        System.out.println(&quot;arguments :&quot; + queue.getArguments());<br>        return queue;<br>    &#125;<br><br>    @Bean<br>    public Binding queueOneBinding() &#123;<br>        return BindingBuilder.bind(myQueueOne()).to(myExchange()).with(MqConstant.MY_QUEUE_ONE);<br>    &#125;<br><br>    @Bean<br>    public Binding queueTwoBinding() &#123;<br>        return BindingBuilder.bind(myQueueTwo()).to(myExchange()).with(MqConstant.Order_DENLY_QUEQE);<br>    &#125;<br><br>    @Bean<br>    public Binding queueDeadBinding() &#123;<br>        return BindingBuilder.bind(deadLetterQueue()).to(myExchange()).with(MqConstant.DEAD_LETTER_QUEUE);<br>    &#125;<br><br>    @Bean<br>    public Binding queueTransBinding() &#123;<br>        return BindingBuilder.bind(myTransQueue()).to(myExchange()).with(MqConstant.MY_TRANS_QUEUE);<br>    &#125;<br><br></code></pre></td></tr></table></figure>\n4.RabbitQueueService<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">public interface RabbitQueueService &#123;<br><br>    /**<br>     * 发布到延时队列<br>     * @param msg 消息内容<br>     * @param time 时间/秒<br>     * @param delayQueueName 延时队列名称<br>     */<br>    void send(String msg,long time,String delayQueueName);<br><br><br>&#125;<br></code></pre></td></tr></table></figure></li>\n<li>RabbitQueueServiceImpl<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">@Service<br>public class RabbitQueueServiceImpl implements RabbitQueueService &#123;<br><br>    //@Resource<br>    //DyOrderService dyOrderService;<br><br>    @Resource<br>    AmqpTemplate amqpTemplate;<br><br>    @Autowired<br>    ApplicationContext context;<br><br><br>    class SendEvent&#123;<br>        String msg ;<br>        long time;<br>        String delayQueueName;<br>    &#125;<br><br><br>    @Override<br>    public void send(String msg, long time, String delayQueueName) &#123;<br>        //rabbit默认为毫秒级<br><br>        SendEvent event = new SendEvent();<br>        event.delayQueueName = delayQueueName;<br>        event.msg = msg;<br>        event.time = time;<br>        context.publishEvent(event);<br><br>    &#125;<br><br><br>    @EventListener<br>    public void publish(SendEvent event)&#123;<br>        long times = event.time*1000;<br>        MessagePostProcessor processor = new MessagePostProcessor() &#123;<br>            @Override<br>            public Message postProcessMessage(Message message) throws AmqpException &#123;<br>                message.getMessageProperties().setExpiration(String.valueOf(times));<br>                return message;<br>            &#125;<br>        &#125;;<br>        // 拼装msg<br>        String msg = StringUtils.join(event.msg, &quot;:&quot;, event.delayQueueName);<br>        amqpTemplate.convertAndSend(MqConstant.MY_EXCHANGE, MqConstant.DEAD_LETTER_QUEUE, msg, processor);<br>    &#125;<br><br>    @RabbitListener(queues = MqConstant.MY_QUEUE_ONE)<br>    public void receiveA(Message message, Channel channel) throws IOException &#123;<br>        String msg = new String(message.getBody());<br>        System.out.println(&quot;当前时间：&#123;&#125;,死信队列A收到消息：&#123;&#125;&quot;+new Date().toString()+ msg);<br>        /*channel.basicAck(message.getMessageProperties().getDeliveryTag(), false);<br>        Map&lt;String,Long&gt; map = new HashedMap();<br>        map.put(&quot;id&quot;,Long.valueOf(msg));<br>        dyOrderService.cancleOrder(map);*/<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li>\n<li>测试<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">@RestController<br>@RequestMapping(&quot;/delayQueue&quot;)<br>public class TestController &#123;<br><br>    @Resource<br>    RabbitQueueService rabbitQueueService;<br><br>    @GetMapping(&quot;/send/&#123;time&#125;&quot;)<br>    public String send(@PathVariable(&quot;time&quot;) int time)&#123;<br>        System.out.println(&quot;&#123;&#125;秒后, 发送延迟消息，当前时间&#123;&#125;&quot;+time+&quot;:&quot;+ new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;).format(new Date()));<br>        rabbitQueueService.send(&quot;我是延时消息...&quot;, time, MqConstant.MY_QUEUE_ONE);<br>        return &quot;ok&quot;;<br><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li>\n</ol>\n<p><font color=red size=5> 最后：如果你需要实现定时在xxxx-xx-xx时间点，只需要拿该时间计算出与当前时间的时间差，设为定时的time即可</font></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">Date timingOnTime = DateUtil.parse(MapUtil.getStr(map, &quot;timingOnTime&quot;));<br><br>Date nowTime= DateUtil.date();<br>DySku dySku = iDySkuService.selectById(id);<br>\t\t<br>//使用hutool计算时间差，非绝对值<br>long betweenSecond = DateUtil.between(nowTime,timingOnTime, DateUnit.SECOND,false);<br>logger.info(&quot;商品 &#123;&#125; 在 &#123;&#125; 定时上架消息发出,将在 &#123;&#125; 定时上架；距离当前时间&#123;&#125;s&quot;,dySku.getName(),DateUtil.now(),timingOnTime,betweenSecond+1);<br>rabbitQueueService.sendSkuMakeTable(String.valueOf(dySku.getId()), betweenSecond+1, MqConstant.SKU_MAKETABLE_QUEUE);<br><br></code></pre></td></tr></table></figure>"},{"title":"Spring Boot & Slf4j & logback 彩色日志打印（功能点：1、分运行环境生成日志文件 2、日志文件目录分类 3、日志文件按日输出）","date":"2022-09-05T09:09:05.000Z","category_bar":true,"_content":"# Spring Boot & Slf4j & logback 彩色日志打印（功能点：1、分运行环境生成日志文件 2、日志文件目录分类 3、日志文件按日输出）\n---\n 需求概述：\n + spring boot 项目需要分环境运行。在local环境，也就是本地开发，只需要控制台打印，无需输出日志文件。\n + 相关文章：\n   [spring boot项目分环境打包教程](https://blog.huijia.cf/archives/springboot-xiang-mu-maven-fen-huan-jing-da-bao)\n   [slf4j、log4j、logback的关系](https://blog.csdn.net/u012894692/article/details/80308826)\n\n---\n\n## 一、项目目录，分dev，local，pro\n![image-20220720100649778](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720100649778.png)\n\n---\n\n## 二、logback-spring.xml文件及其注释\n```javascript?linenums\n<configuration scan=\"true\" scanPeriod=\"10 seconds\">\n    <contextName>logback</contextName>\n\n    <!--配置日志文件输出路径，下面用${path}占位使用}-->\n    <springProperty scope=\"context\" name=\"LOG_URL\" source=\"log.url\" />\n    <property name=\"path\" value=\"${LOG_URL}\" />\n\n    <!--0. 日志格式和颜色渲染 -->\n    <!-- 彩色日志依赖的渲染类 -->\n    <conversionRule conversionWord=\"clr\" converterClass=\"org.springframework.boot.logging.logback.ColorConverter\" />\n    <conversionRule conversionWord=\"wex\" converterClass=\"org.springframework.boot.logging.logback.WhitespaceThrowableProxyConverter\" />\n    <conversionRule conversionWord=\"wEx\" converterClass=\"org.springframework.boot.logging.logback.ExtendedWhitespaceThrowableProxyConverter\" />\n    <!-- 彩色日志格式 -->\n    <property name=\"local_pattern\" value=\"${CONSOLE_LOG_PATTERN:-%clr(%d{yyyy-MM-dd HH:mm:ss.SSS}){faint} %clr(${LOG_LEVEL_PATTERN:-%5p}) %clr(${PID:- }){magenta} %clr(---){faint} %clr([%15.15t]){faint} %clr(%-40.40logger{39}){cyan} %clr(:){faint} %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}}\"/>\n\n    <!--文件日志格式-->\n    <property name=\"file_pattern\" value=\"%d - %msg%n\"/>\n\n\n    <!--输出日志格式-->\n    <appender name=\"consoleLog\" class=\"ch.qos.logback.core.ConsoleAppender\">\n        <!--此日志appender是为开发使用，只配置最底级别，控制台输出的日志级别是大于或等于此级别的日志信息-->\n        <filter class=\"ch.qos.logback.classic.filter.ThresholdFilter\">\n            <level>debug</level>\n        </filter>\n        <encoder>\n            <Pattern>\n                ${local_pattern}\n            </Pattern>\n            <!-- 设置字符集 -->\n            <charset>UTF-8</charset>\n        </encoder>\n    </appender>\n    <!--只保存info日志-->\n    <appender name=\"fileInfoLog\" class=\"ch.qos.logback.core.rolling.RollingFileAppender\">\n        <filter class=\"ch.qos.logback.classic.filter.LevelFilter\">\n            <level>INFO</level>\n            <onMatch>ACCEPT</onMatch>\n            <onMismatch>DENY</onMismatch>\n        </filter>\n        <encoder>\n            <pattern>\n                ${file_pattern}\n            </pattern>\n            <charset>UTF-8</charset>\n        </encoder>\n        <!--滚动输出策略-->\n        <rollingPolicy class=\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\">\n            <!--路径-->\n            <fileNamePattern>${path}/info/info-%d{yyyy-MM-dd}-%i.log</fileNamePattern>\n            <!-- 文件大小分割，超过配置大小就建当天新的日志文件 -->\n            <timeBasedFileNamingAndTriggeringPolicy class=\"ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP\">\n                <maxFileSize>50MB</maxFileSize>\n            </timeBasedFileNamingAndTriggeringPolicy>\n            <!-- 保存7天 -->\n            <MaxHistory>7</MaxHistory>\n            <!-- 总日志大小 -->\n            <totalSizeCap>10GB</totalSizeCap>\n        </rollingPolicy>\n    </appender>\n\n    <!--只保存warn日志-->\n\n\n    <appender name=\"fileWarnLog\" class=\"ch.qos.logback.core.rolling.RollingFileAppender\">\n        <filter class=\"ch.qos.logback.classic.filter.LevelFilter\">\n            <level>WARN</level>\n            <onMatch>ACCEPT</onMatch>\n            <onMismatch>DENY</onMismatch>\n        </filter>\n        <encoder>\n            <pattern>\n                ${file_pattern}\n            </pattern>\n            <charset>UTF-8</charset>\n        </encoder>\n        <!--滚动输出策略-->\n        <rollingPolicy class=\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\">\n            <!--路径-->\n            <fileNamePattern>${path}/warn/warn-%d{yyyy-MM-dd}-%i.log</fileNamePattern>\n            <!-- 文件大小分割，超过配置大小就建当天新的日志文件 -->\n            <timeBasedFileNamingAndTriggeringPolicy class=\"ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP\">\n                <maxFileSize>50MB</maxFileSize>\n            </timeBasedFileNamingAndTriggeringPolicy>\n            <!-- 保存30天 -->\n            <MaxHistory>30</MaxHistory>\n            <!-- 总日志大小 -->\n            <totalSizeCap>10GB</totalSizeCap>\n        </rollingPolicy>\n    </appender>\n\n    <!--只保存error日志-->\n    <appender name=\"fileErrorLog\" class=\"ch.qos.logback.core.rolling.RollingFileAppender\">\n        <filter class=\"ch.qos.logback.classic.filter.ThresholdFilter\">\n            <level>ERROR</level>\n        </filter>\n        <encoder>\n            <pattern>\n                ${file_pattern}\n            </pattern>\n            <charset>UTF-8</charset>\n        </encoder>\n        <!--滚动输出策略-->\n        <rollingPolicy class=\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\">\n            <!--路径-->\n            <fileNamePattern>${path}/error/error-%d{yyyy-MM-dd}-%i.log</fileNamePattern>\n            <!-- 文件大小分割，超过配置大小就建当天新的日志文件 -->\n            <timeBasedFileNamingAndTriggeringPolicy class=\"ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP\">\n                <maxFileSize>50MB</maxFileSize>\n            </timeBasedFileNamingAndTriggeringPolicy>\n            <!-- 保存30天 -->\n            <MaxHistory>30</MaxHistory>\n            <!-- 总日志大小 -->\n            <totalSizeCap>10GB</totalSizeCap>\n        </rollingPolicy>\n    </appender>\n\n    <!--local环境下，仅控制台打印，配置为彩色-->\n    <springProfile name=\"local\">\n        <root level=\"info\">\n            <appender-ref ref=\"consoleLog\"/>\n        </root>\n    </springProfile>\n\n    <!--dev环境输出到文件-->\n    <springProfile name=\"dev\">\n        <root level=\"info\">\n            <appender-ref ref=\"consoleLog\"/>\n            <appender-ref ref=\"fileInfoLog\"/>\n            <appender-ref ref=\"fileWarnLog\"/>\n            <appender-ref ref=\"fileErrorLog\"/>\n        </root>\n    </springProfile>\n\n    <!--pro环境输出到文件-->\n    <springProfile name=\"pro\">\n        <root level=\"info\">\n            <appender-ref ref=\"consoleLog\"/>\n            <appender-ref ref=\"fileInfoLog\"/>\n            <appender-ref ref=\"fileWarnLog\"/>\n            <appender-ref ref=\"fileErrorLog\"/>\n        </root>\n    </springProfile>\n</configuration>\n```\n---\n\n## 三、效果\n1. local开发环境，直接输出到打印区\n\n![image-20220720100801731](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720100801731.png)\n\n2. dev和pro环境，输出到文件中。\n + 生成文件路径在配置文件中配置\n\n  ![image-20220720100811808](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720101815814.png)\n\n  ![image-20220720102028014](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720102028014.png)\n\n + 日志文件名设置\n    ![image-20220720100819690](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720100819690.png)\n\n + 生成文件夹分三个，分别在配置文件里分为三个等级‘info’，‘error’，‘warn’\n    ![image-20220720101120238](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720101120238.png)\n\n + 生成日志文件以天为单位分文件\n![image-20220720101620589](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720101620589.png)\n","source":"_posts/BookMark/Spring Boot/Spring Boot & Slf4j & logback 彩色日志打印（功能点：1、分运行环境生成日志文件 2、日志文件目录分类 3、日志文件按日输出）.md","raw":"---\ntitle: Spring Boot & Slf4j & logback 彩色日志打印（功能点：1、分运行环境生成日志文件 2、日志文件目录分类 3、日志文件按日输出）\ndate: 2022-09-05 17:09:05\ncategory_bar: true\ncategories: Spring Boot\ntags:\n- Spring Boot\n- Slf4j\n- logback\n---\n# Spring Boot & Slf4j & logback 彩色日志打印（功能点：1、分运行环境生成日志文件 2、日志文件目录分类 3、日志文件按日输出）\n---\n 需求概述：\n + spring boot 项目需要分环境运行。在local环境，也就是本地开发，只需要控制台打印，无需输出日志文件。\n + 相关文章：\n   [spring boot项目分环境打包教程](https://blog.huijia.cf/archives/springboot-xiang-mu-maven-fen-huan-jing-da-bao)\n   [slf4j、log4j、logback的关系](https://blog.csdn.net/u012894692/article/details/80308826)\n\n---\n\n## 一、项目目录，分dev，local，pro\n![image-20220720100649778](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720100649778.png)\n\n---\n\n## 二、logback-spring.xml文件及其注释\n```javascript?linenums\n<configuration scan=\"true\" scanPeriod=\"10 seconds\">\n    <contextName>logback</contextName>\n\n    <!--配置日志文件输出路径，下面用${path}占位使用}-->\n    <springProperty scope=\"context\" name=\"LOG_URL\" source=\"log.url\" />\n    <property name=\"path\" value=\"${LOG_URL}\" />\n\n    <!--0. 日志格式和颜色渲染 -->\n    <!-- 彩色日志依赖的渲染类 -->\n    <conversionRule conversionWord=\"clr\" converterClass=\"org.springframework.boot.logging.logback.ColorConverter\" />\n    <conversionRule conversionWord=\"wex\" converterClass=\"org.springframework.boot.logging.logback.WhitespaceThrowableProxyConverter\" />\n    <conversionRule conversionWord=\"wEx\" converterClass=\"org.springframework.boot.logging.logback.ExtendedWhitespaceThrowableProxyConverter\" />\n    <!-- 彩色日志格式 -->\n    <property name=\"local_pattern\" value=\"${CONSOLE_LOG_PATTERN:-%clr(%d{yyyy-MM-dd HH:mm:ss.SSS}){faint} %clr(${LOG_LEVEL_PATTERN:-%5p}) %clr(${PID:- }){magenta} %clr(---){faint} %clr([%15.15t]){faint} %clr(%-40.40logger{39}){cyan} %clr(:){faint} %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}}\"/>\n\n    <!--文件日志格式-->\n    <property name=\"file_pattern\" value=\"%d - %msg%n\"/>\n\n\n    <!--输出日志格式-->\n    <appender name=\"consoleLog\" class=\"ch.qos.logback.core.ConsoleAppender\">\n        <!--此日志appender是为开发使用，只配置最底级别，控制台输出的日志级别是大于或等于此级别的日志信息-->\n        <filter class=\"ch.qos.logback.classic.filter.ThresholdFilter\">\n            <level>debug</level>\n        </filter>\n        <encoder>\n            <Pattern>\n                ${local_pattern}\n            </Pattern>\n            <!-- 设置字符集 -->\n            <charset>UTF-8</charset>\n        </encoder>\n    </appender>\n    <!--只保存info日志-->\n    <appender name=\"fileInfoLog\" class=\"ch.qos.logback.core.rolling.RollingFileAppender\">\n        <filter class=\"ch.qos.logback.classic.filter.LevelFilter\">\n            <level>INFO</level>\n            <onMatch>ACCEPT</onMatch>\n            <onMismatch>DENY</onMismatch>\n        </filter>\n        <encoder>\n            <pattern>\n                ${file_pattern}\n            </pattern>\n            <charset>UTF-8</charset>\n        </encoder>\n        <!--滚动输出策略-->\n        <rollingPolicy class=\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\">\n            <!--路径-->\n            <fileNamePattern>${path}/info/info-%d{yyyy-MM-dd}-%i.log</fileNamePattern>\n            <!-- 文件大小分割，超过配置大小就建当天新的日志文件 -->\n            <timeBasedFileNamingAndTriggeringPolicy class=\"ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP\">\n                <maxFileSize>50MB</maxFileSize>\n            </timeBasedFileNamingAndTriggeringPolicy>\n            <!-- 保存7天 -->\n            <MaxHistory>7</MaxHistory>\n            <!-- 总日志大小 -->\n            <totalSizeCap>10GB</totalSizeCap>\n        </rollingPolicy>\n    </appender>\n\n    <!--只保存warn日志-->\n\n\n    <appender name=\"fileWarnLog\" class=\"ch.qos.logback.core.rolling.RollingFileAppender\">\n        <filter class=\"ch.qos.logback.classic.filter.LevelFilter\">\n            <level>WARN</level>\n            <onMatch>ACCEPT</onMatch>\n            <onMismatch>DENY</onMismatch>\n        </filter>\n        <encoder>\n            <pattern>\n                ${file_pattern}\n            </pattern>\n            <charset>UTF-8</charset>\n        </encoder>\n        <!--滚动输出策略-->\n        <rollingPolicy class=\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\">\n            <!--路径-->\n            <fileNamePattern>${path}/warn/warn-%d{yyyy-MM-dd}-%i.log</fileNamePattern>\n            <!-- 文件大小分割，超过配置大小就建当天新的日志文件 -->\n            <timeBasedFileNamingAndTriggeringPolicy class=\"ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP\">\n                <maxFileSize>50MB</maxFileSize>\n            </timeBasedFileNamingAndTriggeringPolicy>\n            <!-- 保存30天 -->\n            <MaxHistory>30</MaxHistory>\n            <!-- 总日志大小 -->\n            <totalSizeCap>10GB</totalSizeCap>\n        </rollingPolicy>\n    </appender>\n\n    <!--只保存error日志-->\n    <appender name=\"fileErrorLog\" class=\"ch.qos.logback.core.rolling.RollingFileAppender\">\n        <filter class=\"ch.qos.logback.classic.filter.ThresholdFilter\">\n            <level>ERROR</level>\n        </filter>\n        <encoder>\n            <pattern>\n                ${file_pattern}\n            </pattern>\n            <charset>UTF-8</charset>\n        </encoder>\n        <!--滚动输出策略-->\n        <rollingPolicy class=\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\">\n            <!--路径-->\n            <fileNamePattern>${path}/error/error-%d{yyyy-MM-dd}-%i.log</fileNamePattern>\n            <!-- 文件大小分割，超过配置大小就建当天新的日志文件 -->\n            <timeBasedFileNamingAndTriggeringPolicy class=\"ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP\">\n                <maxFileSize>50MB</maxFileSize>\n            </timeBasedFileNamingAndTriggeringPolicy>\n            <!-- 保存30天 -->\n            <MaxHistory>30</MaxHistory>\n            <!-- 总日志大小 -->\n            <totalSizeCap>10GB</totalSizeCap>\n        </rollingPolicy>\n    </appender>\n\n    <!--local环境下，仅控制台打印，配置为彩色-->\n    <springProfile name=\"local\">\n        <root level=\"info\">\n            <appender-ref ref=\"consoleLog\"/>\n        </root>\n    </springProfile>\n\n    <!--dev环境输出到文件-->\n    <springProfile name=\"dev\">\n        <root level=\"info\">\n            <appender-ref ref=\"consoleLog\"/>\n            <appender-ref ref=\"fileInfoLog\"/>\n            <appender-ref ref=\"fileWarnLog\"/>\n            <appender-ref ref=\"fileErrorLog\"/>\n        </root>\n    </springProfile>\n\n    <!--pro环境输出到文件-->\n    <springProfile name=\"pro\">\n        <root level=\"info\">\n            <appender-ref ref=\"consoleLog\"/>\n            <appender-ref ref=\"fileInfoLog\"/>\n            <appender-ref ref=\"fileWarnLog\"/>\n            <appender-ref ref=\"fileErrorLog\"/>\n        </root>\n    </springProfile>\n</configuration>\n```\n---\n\n## 三、效果\n1. local开发环境，直接输出到打印区\n\n![image-20220720100801731](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720100801731.png)\n\n2. dev和pro环境，输出到文件中。\n + 生成文件路径在配置文件中配置\n\n  ![image-20220720100811808](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720101815814.png)\n\n  ![image-20220720102028014](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720102028014.png)\n\n + 日志文件名设置\n    ![image-20220720100819690](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720100819690.png)\n\n + 生成文件夹分三个，分别在配置文件里分为三个等级‘info’，‘error’，‘warn’\n    ![image-20220720101120238](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720101120238.png)\n\n + 生成日志文件以天为单位分文件\n![image-20220720101620589](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720101620589.png)\n","slug":"BookMark/Spring Boot/Spring Boot & Slf4j & logback 彩色日志打印（功能点：1、分运行环境生成日志文件 2、日志文件目录分类 3、日志文件按日输出）","published":1,"updated":"2022-09-06T07:08:49.907Z","_id":"cl7ptszol001haba5g6041o98","comments":1,"layout":"post","photos":[],"link":"","content":"<h1><span id=\"spring-boot-amp-slf4j-amp-logback-彩色日志打印功能点1-分运行环境生成日志文件-2-日志文件目录分类-3-日志文件按日输出\">Spring Boot &amp; Slf4j &amp; logback 彩色日志打印（功能点：1、分运行环境生成日志文件 2、日志文件目录分类 3、日志文件按日输出）</span></h1><hr>\n<p> 需求概述：</p>\n<ul>\n<li>spring boot 项目需要分环境运行。在local环境，也就是本地开发，只需要控制台打印，无需输出日志文件。</li>\n<li>相关文章：<br><a href=\"https://blog.huijia.cf/archives/springboot-xiang-mu-maven-fen-huan-jing-da-bao\">spring boot项目分环境打包教程</a><br><a href=\"https://blog.csdn.net/u012894692/article/details/80308826\">slf4j、log4j、logback的关系</a></li>\n</ul>\n<hr>\n<h2><span id=\"一-项目目录分devlocalpro\">一、项目目录，分dev，local，pro</span></h2><p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720100649778.png\" alt=\"image-20220720100649778\"></p>\n<hr>\n<h2><span id=\"二-logback-springxml文件及其注释\">二、logback-spring.xml文件及其注释</span></h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">&lt;configuration scan=&quot;true&quot; scanPeriod=&quot;10 seconds&quot;&gt;<br>    &lt;contextName&gt;logback&lt;/contextName&gt;<br><br>    &lt;!--配置日志文件输出路径，下面用$&#123;path&#125;占位使用&#125;--&gt;<br>    &lt;springProperty scope=&quot;context&quot; name=&quot;LOG_URL&quot; source=&quot;log.url&quot; /&gt;<br>    &lt;property name=&quot;path&quot; value=&quot;$&#123;LOG_URL&#125;&quot; /&gt;<br><br>    &lt;!--0. 日志格式和颜色渲染 --&gt;<br>    &lt;!-- 彩色日志依赖的渲染类 --&gt;<br>    &lt;conversionRule conversionWord=&quot;clr&quot; converterClass=&quot;org.springframework.boot.logging.logback.ColorConverter&quot; /&gt;<br>    &lt;conversionRule conversionWord=&quot;wex&quot; converterClass=&quot;org.springframework.boot.logging.logback.WhitespaceThrowableProxyConverter&quot; /&gt;<br>    &lt;conversionRule conversionWord=&quot;wEx&quot; converterClass=&quot;org.springframework.boot.logging.logback.ExtendedWhitespaceThrowableProxyConverter&quot; /&gt;<br>    &lt;!-- 彩色日志格式 --&gt;<br>    &lt;property name=&quot;local_pattern&quot; value=&quot;$&#123;CONSOLE_LOG_PATTERN:-%clr(%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125;)&#123;faint&#125; %clr($&#123;LOG_LEVEL_PATTERN:-%5p&#125;) %clr($&#123;PID:- &#125;)&#123;magenta&#125; %clr(---)&#123;faint&#125; %clr([%15.15t])&#123;faint&#125; %clr(%-40.40logger&#123;39&#125;)&#123;cyan&#125; %clr(:)&#123;faint&#125; %m%n$&#123;LOG_EXCEPTION_CONVERSION_WORD:-%wEx&#125;&#125;&quot;/&gt;<br><br>    &lt;!--文件日志格式--&gt;<br>    &lt;property name=&quot;file_pattern&quot; value=&quot;%d - %msg%n&quot;/&gt;<br><br><br>    &lt;!--输出日志格式--&gt;<br>    &lt;appender name=&quot;consoleLog&quot; class=&quot;ch.qos.logback.core.ConsoleAppender&quot;&gt;<br>        &lt;!--此日志appender是为开发使用，只配置最底级别，控制台输出的日志级别是大于或等于此级别的日志信息--&gt;<br>        &lt;filter class=&quot;ch.qos.logback.classic.filter.ThresholdFilter&quot;&gt;<br>            &lt;level&gt;debug&lt;/level&gt;<br>        &lt;/filter&gt;<br>        &lt;encoder&gt;<br>            &lt;Pattern&gt;<br>                $&#123;local_pattern&#125;<br>            &lt;/Pattern&gt;<br>            &lt;!-- 设置字符集 --&gt;<br>            &lt;charset&gt;UTF-8&lt;/charset&gt;<br>        &lt;/encoder&gt;<br>    &lt;/appender&gt;<br>    &lt;!--只保存info日志--&gt;<br>    &lt;appender name=&quot;fileInfoLog&quot; class=&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;&gt;<br>        &lt;filter class=&quot;ch.qos.logback.classic.filter.LevelFilter&quot;&gt;<br>            &lt;level&gt;INFO&lt;/level&gt;<br>            &lt;onMatch&gt;ACCEPT&lt;/onMatch&gt;<br>            &lt;onMismatch&gt;DENY&lt;/onMismatch&gt;<br>        &lt;/filter&gt;<br>        &lt;encoder&gt;<br>            &lt;pattern&gt;<br>                $&#123;file_pattern&#125;<br>            &lt;/pattern&gt;<br>            &lt;charset&gt;UTF-8&lt;/charset&gt;<br>        &lt;/encoder&gt;<br>        &lt;!--滚动输出策略--&gt;<br>        &lt;rollingPolicy class=&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;&gt;<br>            &lt;!--路径--&gt;<br>            &lt;fileNamePattern&gt;$&#123;path&#125;/info/info-%d&#123;yyyy-MM-dd&#125;-%i.log&lt;/fileNamePattern&gt;<br>            &lt;!-- 文件大小分割，超过配置大小就建当天新的日志文件 --&gt;<br>            &lt;timeBasedFileNamingAndTriggeringPolicy class=&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP&quot;&gt;<br>                &lt;maxFileSize&gt;50MB&lt;/maxFileSize&gt;<br>            &lt;/timeBasedFileNamingAndTriggeringPolicy&gt;<br>            &lt;!-- 保存7天 --&gt;<br>            &lt;MaxHistory&gt;7&lt;/MaxHistory&gt;<br>            &lt;!-- 总日志大小 --&gt;<br>            &lt;totalSizeCap&gt;10GB&lt;/totalSizeCap&gt;<br>        &lt;/rollingPolicy&gt;<br>    &lt;/appender&gt;<br><br>    &lt;!--只保存warn日志--&gt;<br><br><br>    &lt;appender name=&quot;fileWarnLog&quot; class=&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;&gt;<br>        &lt;filter class=&quot;ch.qos.logback.classic.filter.LevelFilter&quot;&gt;<br>            &lt;level&gt;WARN&lt;/level&gt;<br>            &lt;onMatch&gt;ACCEPT&lt;/onMatch&gt;<br>            &lt;onMismatch&gt;DENY&lt;/onMismatch&gt;<br>        &lt;/filter&gt;<br>        &lt;encoder&gt;<br>            &lt;pattern&gt;<br>                $&#123;file_pattern&#125;<br>            &lt;/pattern&gt;<br>            &lt;charset&gt;UTF-8&lt;/charset&gt;<br>        &lt;/encoder&gt;<br>        &lt;!--滚动输出策略--&gt;<br>        &lt;rollingPolicy class=&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;&gt;<br>            &lt;!--路径--&gt;<br>            &lt;fileNamePattern&gt;$&#123;path&#125;/warn/warn-%d&#123;yyyy-MM-dd&#125;-%i.log&lt;/fileNamePattern&gt;<br>            &lt;!-- 文件大小分割，超过配置大小就建当天新的日志文件 --&gt;<br>            &lt;timeBasedFileNamingAndTriggeringPolicy class=&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP&quot;&gt;<br>                &lt;maxFileSize&gt;50MB&lt;/maxFileSize&gt;<br>            &lt;/timeBasedFileNamingAndTriggeringPolicy&gt;<br>            &lt;!-- 保存30天 --&gt;<br>            &lt;MaxHistory&gt;30&lt;/MaxHistory&gt;<br>            &lt;!-- 总日志大小 --&gt;<br>            &lt;totalSizeCap&gt;10GB&lt;/totalSizeCap&gt;<br>        &lt;/rollingPolicy&gt;<br>    &lt;/appender&gt;<br><br>    &lt;!--只保存error日志--&gt;<br>    &lt;appender name=&quot;fileErrorLog&quot; class=&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;&gt;<br>        &lt;filter class=&quot;ch.qos.logback.classic.filter.ThresholdFilter&quot;&gt;<br>            &lt;level&gt;ERROR&lt;/level&gt;<br>        &lt;/filter&gt;<br>        &lt;encoder&gt;<br>            &lt;pattern&gt;<br>                $&#123;file_pattern&#125;<br>            &lt;/pattern&gt;<br>            &lt;charset&gt;UTF-8&lt;/charset&gt;<br>        &lt;/encoder&gt;<br>        &lt;!--滚动输出策略--&gt;<br>        &lt;rollingPolicy class=&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;&gt;<br>            &lt;!--路径--&gt;<br>            &lt;fileNamePattern&gt;$&#123;path&#125;/error/error-%d&#123;yyyy-MM-dd&#125;-%i.log&lt;/fileNamePattern&gt;<br>            &lt;!-- 文件大小分割，超过配置大小就建当天新的日志文件 --&gt;<br>            &lt;timeBasedFileNamingAndTriggeringPolicy class=&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP&quot;&gt;<br>                &lt;maxFileSize&gt;50MB&lt;/maxFileSize&gt;<br>            &lt;/timeBasedFileNamingAndTriggeringPolicy&gt;<br>            &lt;!-- 保存30天 --&gt;<br>            &lt;MaxHistory&gt;30&lt;/MaxHistory&gt;<br>            &lt;!-- 总日志大小 --&gt;<br>            &lt;totalSizeCap&gt;10GB&lt;/totalSizeCap&gt;<br>        &lt;/rollingPolicy&gt;<br>    &lt;/appender&gt;<br><br>    &lt;!--local环境下，仅控制台打印，配置为彩色--&gt;<br>    &lt;springProfile name=&quot;local&quot;&gt;<br>        &lt;root level=&quot;info&quot;&gt;<br>            &lt;appender-ref ref=&quot;consoleLog&quot;/&gt;<br>        &lt;/root&gt;<br>    &lt;/springProfile&gt;<br><br>    &lt;!--dev环境输出到文件--&gt;<br>    &lt;springProfile name=&quot;dev&quot;&gt;<br>        &lt;root level=&quot;info&quot;&gt;<br>            &lt;appender-ref ref=&quot;consoleLog&quot;/&gt;<br>            &lt;appender-ref ref=&quot;fileInfoLog&quot;/&gt;<br>            &lt;appender-ref ref=&quot;fileWarnLog&quot;/&gt;<br>            &lt;appender-ref ref=&quot;fileErrorLog&quot;/&gt;<br>        &lt;/root&gt;<br>    &lt;/springProfile&gt;<br><br>    &lt;!--pro环境输出到文件--&gt;<br>    &lt;springProfile name=&quot;pro&quot;&gt;<br>        &lt;root level=&quot;info&quot;&gt;<br>            &lt;appender-ref ref=&quot;consoleLog&quot;/&gt;<br>            &lt;appender-ref ref=&quot;fileInfoLog&quot;/&gt;<br>            &lt;appender-ref ref=&quot;fileWarnLog&quot;/&gt;<br>            &lt;appender-ref ref=&quot;fileErrorLog&quot;/&gt;<br>        &lt;/root&gt;<br>    &lt;/springProfile&gt;<br>&lt;/configuration&gt;<br></code></pre></td></tr></table></figure>\n<hr>\n<h2><span id=\"三-效果\">三、效果</span></h2><ol>\n<li>local开发环境，直接输出到打印区</li>\n</ol>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720100801731.png\" alt=\"image-20220720100801731\"></p>\n<ol start=\"2\">\n<li>dev和pro环境，输出到文件中。</li>\n</ol>\n<ul>\n<li>生成文件路径在配置文件中配置</li>\n</ul>\n<p>  <img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720101815814.png\" alt=\"image-20220720100811808\"></p>\n<p>  <img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720102028014.png\" alt=\"image-20220720102028014\"></p>\n<ul>\n<li><p>日志文件名设置<br> <img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720100819690.png\" alt=\"image-20220720100819690\"></p>\n</li>\n<li><p>生成文件夹分三个，分别在配置文件里分为三个等级‘info’，‘error’，‘warn’<br> <img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720101120238.png\" alt=\"image-20220720101120238\"></p>\n</li>\n<li><p>生成日志文件以天为单位分文件<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720101620589.png\" alt=\"image-20220720101620589\"></p>\n</li>\n</ul>\n","site":{"data":{}},"wordcount":6543,"excerpt":"","more":"<h1 id=\"Spring-Boot-amp-Slf4j-amp-logback-彩色日志打印（功能点：1、分运行环境生成日志文件-2、日志文件目录分类-3、日志文件按日输出）\"><a href=\"#Spring-Boot-amp-Slf4j-amp-logback-彩色日志打印（功能点：1、分运行环境生成日志文件-2、日志文件目录分类-3、日志文件按日输出）\" class=\"headerlink\" title=\"Spring Boot &amp; Slf4j &amp; logback 彩色日志打印（功能点：1、分运行环境生成日志文件 2、日志文件目录分类 3、日志文件按日输出）\"></a>Spring Boot &amp; Slf4j &amp; logback 彩色日志打印（功能点：1、分运行环境生成日志文件 2、日志文件目录分类 3、日志文件按日输出）</h1><hr>\n<p> 需求概述：</p>\n<ul>\n<li>spring boot 项目需要分环境运行。在local环境，也就是本地开发，只需要控制台打印，无需输出日志文件。</li>\n<li>相关文章：<br><a href=\"https://blog.huijia.cf/archives/springboot-xiang-mu-maven-fen-huan-jing-da-bao\">spring boot项目分环境打包教程</a><br><a href=\"https://blog.csdn.net/u012894692/article/details/80308826\">slf4j、log4j、logback的关系</a></li>\n</ul>\n<hr>\n<h2 id=\"一、项目目录，分dev，local，pro\"><a href=\"#一、项目目录，分dev，local，pro\" class=\"headerlink\" title=\"一、项目目录，分dev，local，pro\"></a>一、项目目录，分dev，local，pro</h2><p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720100649778.png\" alt=\"image-20220720100649778\"></p>\n<hr>\n<h2 id=\"二、logback-spring-xml文件及其注释\"><a href=\"#二、logback-spring-xml文件及其注释\" class=\"headerlink\" title=\"二、logback-spring.xml文件及其注释\"></a>二、logback-spring.xml文件及其注释</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">&lt;configuration scan=&quot;true&quot; scanPeriod=&quot;10 seconds&quot;&gt;<br>    &lt;contextName&gt;logback&lt;/contextName&gt;<br><br>    &lt;!--配置日志文件输出路径，下面用$&#123;path&#125;占位使用&#125;--&gt;<br>    &lt;springProperty scope=&quot;context&quot; name=&quot;LOG_URL&quot; source=&quot;log.url&quot; /&gt;<br>    &lt;property name=&quot;path&quot; value=&quot;$&#123;LOG_URL&#125;&quot; /&gt;<br><br>    &lt;!--0. 日志格式和颜色渲染 --&gt;<br>    &lt;!-- 彩色日志依赖的渲染类 --&gt;<br>    &lt;conversionRule conversionWord=&quot;clr&quot; converterClass=&quot;org.springframework.boot.logging.logback.ColorConverter&quot; /&gt;<br>    &lt;conversionRule conversionWord=&quot;wex&quot; converterClass=&quot;org.springframework.boot.logging.logback.WhitespaceThrowableProxyConverter&quot; /&gt;<br>    &lt;conversionRule conversionWord=&quot;wEx&quot; converterClass=&quot;org.springframework.boot.logging.logback.ExtendedWhitespaceThrowableProxyConverter&quot; /&gt;<br>    &lt;!-- 彩色日志格式 --&gt;<br>    &lt;property name=&quot;local_pattern&quot; value=&quot;$&#123;CONSOLE_LOG_PATTERN:-%clr(%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125;)&#123;faint&#125; %clr($&#123;LOG_LEVEL_PATTERN:-%5p&#125;) %clr($&#123;PID:- &#125;)&#123;magenta&#125; %clr(---)&#123;faint&#125; %clr([%15.15t])&#123;faint&#125; %clr(%-40.40logger&#123;39&#125;)&#123;cyan&#125; %clr(:)&#123;faint&#125; %m%n$&#123;LOG_EXCEPTION_CONVERSION_WORD:-%wEx&#125;&#125;&quot;/&gt;<br><br>    &lt;!--文件日志格式--&gt;<br>    &lt;property name=&quot;file_pattern&quot; value=&quot;%d - %msg%n&quot;/&gt;<br><br><br>    &lt;!--输出日志格式--&gt;<br>    &lt;appender name=&quot;consoleLog&quot; class=&quot;ch.qos.logback.core.ConsoleAppender&quot;&gt;<br>        &lt;!--此日志appender是为开发使用，只配置最底级别，控制台输出的日志级别是大于或等于此级别的日志信息--&gt;<br>        &lt;filter class=&quot;ch.qos.logback.classic.filter.ThresholdFilter&quot;&gt;<br>            &lt;level&gt;debug&lt;/level&gt;<br>        &lt;/filter&gt;<br>        &lt;encoder&gt;<br>            &lt;Pattern&gt;<br>                $&#123;local_pattern&#125;<br>            &lt;/Pattern&gt;<br>            &lt;!-- 设置字符集 --&gt;<br>            &lt;charset&gt;UTF-8&lt;/charset&gt;<br>        &lt;/encoder&gt;<br>    &lt;/appender&gt;<br>    &lt;!--只保存info日志--&gt;<br>    &lt;appender name=&quot;fileInfoLog&quot; class=&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;&gt;<br>        &lt;filter class=&quot;ch.qos.logback.classic.filter.LevelFilter&quot;&gt;<br>            &lt;level&gt;INFO&lt;/level&gt;<br>            &lt;onMatch&gt;ACCEPT&lt;/onMatch&gt;<br>            &lt;onMismatch&gt;DENY&lt;/onMismatch&gt;<br>        &lt;/filter&gt;<br>        &lt;encoder&gt;<br>            &lt;pattern&gt;<br>                $&#123;file_pattern&#125;<br>            &lt;/pattern&gt;<br>            &lt;charset&gt;UTF-8&lt;/charset&gt;<br>        &lt;/encoder&gt;<br>        &lt;!--滚动输出策略--&gt;<br>        &lt;rollingPolicy class=&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;&gt;<br>            &lt;!--路径--&gt;<br>            &lt;fileNamePattern&gt;$&#123;path&#125;/info/info-%d&#123;yyyy-MM-dd&#125;-%i.log&lt;/fileNamePattern&gt;<br>            &lt;!-- 文件大小分割，超过配置大小就建当天新的日志文件 --&gt;<br>            &lt;timeBasedFileNamingAndTriggeringPolicy class=&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP&quot;&gt;<br>                &lt;maxFileSize&gt;50MB&lt;/maxFileSize&gt;<br>            &lt;/timeBasedFileNamingAndTriggeringPolicy&gt;<br>            &lt;!-- 保存7天 --&gt;<br>            &lt;MaxHistory&gt;7&lt;/MaxHistory&gt;<br>            &lt;!-- 总日志大小 --&gt;<br>            &lt;totalSizeCap&gt;10GB&lt;/totalSizeCap&gt;<br>        &lt;/rollingPolicy&gt;<br>    &lt;/appender&gt;<br><br>    &lt;!--只保存warn日志--&gt;<br><br><br>    &lt;appender name=&quot;fileWarnLog&quot; class=&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;&gt;<br>        &lt;filter class=&quot;ch.qos.logback.classic.filter.LevelFilter&quot;&gt;<br>            &lt;level&gt;WARN&lt;/level&gt;<br>            &lt;onMatch&gt;ACCEPT&lt;/onMatch&gt;<br>            &lt;onMismatch&gt;DENY&lt;/onMismatch&gt;<br>        &lt;/filter&gt;<br>        &lt;encoder&gt;<br>            &lt;pattern&gt;<br>                $&#123;file_pattern&#125;<br>            &lt;/pattern&gt;<br>            &lt;charset&gt;UTF-8&lt;/charset&gt;<br>        &lt;/encoder&gt;<br>        &lt;!--滚动输出策略--&gt;<br>        &lt;rollingPolicy class=&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;&gt;<br>            &lt;!--路径--&gt;<br>            &lt;fileNamePattern&gt;$&#123;path&#125;/warn/warn-%d&#123;yyyy-MM-dd&#125;-%i.log&lt;/fileNamePattern&gt;<br>            &lt;!-- 文件大小分割，超过配置大小就建当天新的日志文件 --&gt;<br>            &lt;timeBasedFileNamingAndTriggeringPolicy class=&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP&quot;&gt;<br>                &lt;maxFileSize&gt;50MB&lt;/maxFileSize&gt;<br>            &lt;/timeBasedFileNamingAndTriggeringPolicy&gt;<br>            &lt;!-- 保存30天 --&gt;<br>            &lt;MaxHistory&gt;30&lt;/MaxHistory&gt;<br>            &lt;!-- 总日志大小 --&gt;<br>            &lt;totalSizeCap&gt;10GB&lt;/totalSizeCap&gt;<br>        &lt;/rollingPolicy&gt;<br>    &lt;/appender&gt;<br><br>    &lt;!--只保存error日志--&gt;<br>    &lt;appender name=&quot;fileErrorLog&quot; class=&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;&gt;<br>        &lt;filter class=&quot;ch.qos.logback.classic.filter.ThresholdFilter&quot;&gt;<br>            &lt;level&gt;ERROR&lt;/level&gt;<br>        &lt;/filter&gt;<br>        &lt;encoder&gt;<br>            &lt;pattern&gt;<br>                $&#123;file_pattern&#125;<br>            &lt;/pattern&gt;<br>            &lt;charset&gt;UTF-8&lt;/charset&gt;<br>        &lt;/encoder&gt;<br>        &lt;!--滚动输出策略--&gt;<br>        &lt;rollingPolicy class=&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;&gt;<br>            &lt;!--路径--&gt;<br>            &lt;fileNamePattern&gt;$&#123;path&#125;/error/error-%d&#123;yyyy-MM-dd&#125;-%i.log&lt;/fileNamePattern&gt;<br>            &lt;!-- 文件大小分割，超过配置大小就建当天新的日志文件 --&gt;<br>            &lt;timeBasedFileNamingAndTriggeringPolicy class=&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP&quot;&gt;<br>                &lt;maxFileSize&gt;50MB&lt;/maxFileSize&gt;<br>            &lt;/timeBasedFileNamingAndTriggeringPolicy&gt;<br>            &lt;!-- 保存30天 --&gt;<br>            &lt;MaxHistory&gt;30&lt;/MaxHistory&gt;<br>            &lt;!-- 总日志大小 --&gt;<br>            &lt;totalSizeCap&gt;10GB&lt;/totalSizeCap&gt;<br>        &lt;/rollingPolicy&gt;<br>    &lt;/appender&gt;<br><br>    &lt;!--local环境下，仅控制台打印，配置为彩色--&gt;<br>    &lt;springProfile name=&quot;local&quot;&gt;<br>        &lt;root level=&quot;info&quot;&gt;<br>            &lt;appender-ref ref=&quot;consoleLog&quot;/&gt;<br>        &lt;/root&gt;<br>    &lt;/springProfile&gt;<br><br>    &lt;!--dev环境输出到文件--&gt;<br>    &lt;springProfile name=&quot;dev&quot;&gt;<br>        &lt;root level=&quot;info&quot;&gt;<br>            &lt;appender-ref ref=&quot;consoleLog&quot;/&gt;<br>            &lt;appender-ref ref=&quot;fileInfoLog&quot;/&gt;<br>            &lt;appender-ref ref=&quot;fileWarnLog&quot;/&gt;<br>            &lt;appender-ref ref=&quot;fileErrorLog&quot;/&gt;<br>        &lt;/root&gt;<br>    &lt;/springProfile&gt;<br><br>    &lt;!--pro环境输出到文件--&gt;<br>    &lt;springProfile name=&quot;pro&quot;&gt;<br>        &lt;root level=&quot;info&quot;&gt;<br>            &lt;appender-ref ref=&quot;consoleLog&quot;/&gt;<br>            &lt;appender-ref ref=&quot;fileInfoLog&quot;/&gt;<br>            &lt;appender-ref ref=&quot;fileWarnLog&quot;/&gt;<br>            &lt;appender-ref ref=&quot;fileErrorLog&quot;/&gt;<br>        &lt;/root&gt;<br>    &lt;/springProfile&gt;<br>&lt;/configuration&gt;<br></code></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"三、效果\"><a href=\"#三、效果\" class=\"headerlink\" title=\"三、效果\"></a>三、效果</h2><ol>\n<li>local开发环境，直接输出到打印区</li>\n</ol>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720100801731.png\" alt=\"image-20220720100801731\"></p>\n<ol start=\"2\">\n<li>dev和pro环境，输出到文件中。</li>\n</ol>\n<ul>\n<li>生成文件路径在配置文件中配置</li>\n</ul>\n<p>  <img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720101815814.png\" alt=\"image-20220720100811808\"></p>\n<p>  <img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720102028014.png\" alt=\"image-20220720102028014\"></p>\n<ul>\n<li><p>日志文件名设置<br> <img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720100819690.png\" alt=\"image-20220720100819690\"></p>\n</li>\n<li><p>生成文件夹分三个，分别在配置文件里分为三个等级‘info’，‘error’，‘warn’<br> <img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720101120238.png\" alt=\"image-20220720101120238\"></p>\n</li>\n<li><p>生成日志文件以天为单位分文件<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720101620589.png\" alt=\"image-20220720101620589\"></p>\n</li>\n</ul>\n"},{"title":"Spring Boot & poi 导出Excel表格、Txt到浏览器下载","date":"2022-09-05T09:09:05.000Z","category_bar":true,"_content":"# Spring Boot & poi 导出Excel表格、Txt到浏览器下载\n---\n[toc]\n\n+ 注：若只需要导出Txt则不需要Excel的pom包和工具类\n\n---\n## 一. pom依赖\n```javascript?linenums\n<!-- ****************************************** poi导出excel ************************************ -->\n<dependency>\n\t<groupId>org.apache.poi</groupId>\n\t<artifactId>poi</artifactId>\n\t<version>3.17</version>\n</dependency>\n<dependency>\n\t<groupId>org.apache.poi</groupId>\n\t<artifactId>poi-ooxml</artifactId>\n\t<version>3.17</version>\n</dependency>\n<dependency>\n\t<groupId>org.apache.poi</groupId>\n\t<artifactId>poi-ooxml-schemas</artifactId>\n\t<version>3.17</version>\n</dependency>\n```\n\n---\n## 二. 工具类\n1. ExcelUtil 用于生成工作簿对象和sheet对象等\n```javascript?linenums\npublic class ExcelUtils {\n\t/**\n\t * \n\t * @param titles 表格标题\n\t * @param name sheet名\n\t * @return\n\t * @throws Exception\n\t */\n\tpublic static Workbook exportExcel(String[] titles,String name) throws Exception{\n\n\t\t// 新建工作簿对象\n\t\tXSSFWorkbook workBook = new XSSFWorkbook();\n\t\t// 创建sheet对象\n\t\tXSSFSheet sheet = workBook.createSheet(name);\n\t\t// 创建行,标题行\n\t\tXSSFRow row = sheet.createRow(0);\n\t\tfor(int i = 0; i < titles.length; i++){\n\t\t\t// 创建单元格\n\t\t\tXSSFCell cell = row.createCell(i);\n\t\t\t// 设置单元格内容\n\t\t\tcell.setCellValue(titles[i]);\n\t\t}\n\t\treturn workBook;\n\t}\n}\n```\n2. BuildPath 用于创建响应对象输出流\n```javascript?linenums\npublic class BuildPath {\n\t/**\n\t * \n\t * @param response  响应对象\n\t * @param fileName  输出内容\n\t * @return 响应对象输出流\n\t * @throws IOException\n\t */\n\tpublic  static OutputStream  Manual_Saving(HttpServletResponse response,String fileName) throws IOException{\n\t\t\n\t\t//浏览器自选输出路径\n\t\tresponse.setHeader(\"Content-disposition\", \"attachment;filename=\"+fileName);\n\t\tresponse.setContentType(\"application/msexcel\");\n\n\t\tOutputStream out=response.getOutputStream();\n\t\treturn out;\n\t}\n}\n```\n---\n## 三、后台\n1. 导出Txt(只需要传入需要导出表的id集合如“1,2,3”即可)\n```javascript?linenums\n@RequestMapping(\"/exportTxt.do\")\npublic void exportTerminalKey(HttpServletRequest request, HttpServletResponse response,String ids) throws Exception {\n\n\t\tResult result=new Result(6001, false, \"导出失败\");\n\t\t\n\t\tList<String> list=new ArrayList<>();\n\t\tCollections.addAll(list, ids.split(\",\"));\n\t\tVO mv=new VO();\n\t\tmv.setIds(list);\n\t\tList<Medicine> medicines=medicineService.selectAll(mv);\n\t\tStringBuilder sb = new StringBuilder(\"编号,图片地址,进价,售价,药品名称\\r\\n\");\n\t\tif(medicines!=null&&medicines.size()>0){\n\t\t\tfor(int i=0;i<medicines.size();i++){\n\t\t\t\tsb.append(\n\t\t\t\t\t\tmedicines.get(i).getM_number()+\",\"+\n\t\t\t\t\t\tmedicines.get(i).getM_image_addr()+\",\"+\n\t\t\t\t\t\tmedicines.get(i).getM_purchase()+\",\"+\n\t\t\t\t\t\tmedicines.get(i).getM_selling()+\",\"+\n\t\t\t\t\t\tmedicines.get(i).getM_name()+\"\\r\\n\");\n\t\t\t}\n\t\t}\n\t\tBufferedOutputStream output = null;\n\t\tBufferedInputStream input = null;\n\t\t\n\t\t//设置输出流对象\n\t\tOutputStream os =BuildPath.Manual_Saving(response, \"Mediine.txt\");\n\t\ttry{\n\t\t\tbyte[] byt = sb.toString().getBytes();\n\t\t\tos.write(byt);\n\t\t}catch(Exception e){\n\t\t\tSystem.out.println(\"chucuo\");\n\t\t}finally{\n\t\t\tos.flush();\n\t\t\tos.close();\n\t\t\tif(input!=null){\n\t\t\t\tinput.close();\n\t\t\t}\n\t\t\tif(output!=null){\n\t\t\t\toutput.close();\n\t\t\t}\n\t\t}\n\t\tif(medicines!=null){\n\t\t\t//所有信息装入result对象\n\t\t\tresult.setCode(6000);\n\t\t\tresult.setFlag(true);\n\t\t\tresult.setMessage(\"导出成功\");\t\t\n\t\t}\n\t}\n```\n2. 导出Excel(只需要传入需要导出表的id集合如“1,2,3”即可)\n```javascript?linenums\n@RequestMapping(\"/exportMedicine.do\")\n\tpublic void exportDoctor(String ids,HttpServletResponse response) throws Exception{\n\n\t\tString[] titles={\"编号\",\"图片地址\",\"进价\",\"售价\",\"药品名称\"};\n\t\tResult result=new Result(6001, false, \"导出失败\");\n\t\tVO mv=new VO();\n\t\tList<String> list=new ArrayList<>();\n\t\t//分割ids字符串得到数组并放入集合\n\t\tCollections.addAll(list, ids.split(\",\"));\n\t\tmv.setIds(list);\n\t\t//查询所有信息放到集合中\n\t\tList<Medicine> medicines=medicineService.selectAll(mv);\n\t\t\n\t\t//设置导出信息\n\t\tWorkbook wk=ExcelUtils.exportExcel(titles,\"药品信息\");\n\n\t\tXSSFSheet sheet=(XSSFSheet) wk.getSheet(\"药品信息\");\n\t\t\n\t\t//取出集合中的数据放到表格中\n\t\tfor(int i=0;i<medicines.size();i++){\n\t\t\tXSSFRow row = sheet.createRow(i+1);\n\n\t\t\trow.createCell(0).setCellValue(medicines.get(i).getM_number());\n\t\t\trow.createCell(1).setCellValue(medicines.get(i).getM_image_addr());\n\t\t\trow.createCell(2).setCellValue(medicines.get(i).getM_purchase());\n\t\t\trow.createCell(3).setCellValue(medicines.get(i).getM_selling());\n\t\t\trow.createCell(4).setCellValue(medicines.get(i).getM_name());\n\n\t\t}\n\t\t//设置输出流\n\t\tOutputStream out=BuildPath.Manual_Saving(response, \"Medicine.xls\");\n\t\twk.write(out);\n\t\twk.close();\n\t\tif(medicines!=null){\n\t\t\t//所有信息装入result对象\n\t\t\tresult.setCode(6000);\n\t\t\tresult.setFlag(true);\n\t\t\tresult.setMessage(\"导出成功\");\t\t\n\t\t}\n\n\t\tSystem.out.println(result);\n\t} \n```\n## 四、前端\n1. JavaScript\n```javascript?linenums\n$.post(\"../selectMedicineByCondition.do\",{pageNum:pageNum,m_name:m_name,m_type:m_type},function(result){\n    //填充数据到tbody\n    $(\"#tbody\").empty();//清除之前的内容\n    $(result.object.list).each(function(index,medicine){\n    \t$(\"#tbody\").append(\n    \t\t\t\" <tr>\"+\n             \t\"<td style='vertical-align:middle;'><input type='checkbox' name='check' value='\"+medicine.m_id+\"'></td>\"+\n                \"<td style='vertical-align:middle;'>\"+medicine.m_number+\"</td>\"+\n                \"<td style='vertical-align:middle;''>\"+medicine.m_name+\"</td>\"+\n                \"<td style='vertical-align:middle;''>\"+medicine.m_type+\"</td>\"+\n                \"<td style='vertical-align:middle;''>\"+medicine.m_description+\"</td>\"+\n                \"<td style='vertical-align:middle;''>\"+medicine.m_state+\"</td>\"+\n                \"<td style='vertical-align:middle;''>\"+medicine.m_residue+\"</td>\"+\n                \"<td style='vertical-align:middle;'>\"+\n                \"<a id='btn6' m_id=\"+medicine.m_id+\">详情>>></a> &nbsp;&nbsp;&nbsp;\"+\n            \t\"</tr>\"\n            \t);\n    })\n},\"json\");\t\n\n$(\"input[type=checkbox]\").live(\"change\",function(){\n\tdelAll();  \n})\n//查看所有被选中的checkbox框并记录其id\nfunction delAll(){\n\tvar alls=document.getElementsByName(\"check\");\n\tvar ids=new Array();\n\tfor(var i=0;i<alls.length;i++){\n\t\tif(alls[i].checked){\n\t\t\tids.push(alls[i].value);\n\t\t}\t\t\n\t}\n\t$(\".ids\").val(ids);\t\n}\n\n```\n2. Html\n```javascript?linenums\n<table class=\"table table-bordered table-hover definewidth m10\" >\n    <thead>\n    <tr>\n        <th><input type=\"checkbox\" id=\"checkall\" onChange=\"checkall();\"></th>\n        <th>药品编号</th>\n        <th>药品名称</th>\n        <th>药品类型</th>\n        <th>简单描述</th>\n        <th>状态</th>\n        <th>剩余量</th>\n        <th>操作</th>\n    </tr> \n    </thead>\n    <tbody id=\"tbody\">\n    </tbody>\n</table>\n\n<form action=\"../exportMedicine.do\" method=\"post\" style=\"display: inline-block;\">\n\t<input type=\"hidden\" class=\"ids\" name=\"ids\" value=\"\">\n\t<input type=\"submit\" class=\"btn btn-success\" value=\"导出Excel\">\n</form>\n<form action=\"../exportTxt.do\" method=\"post\" style=\"display: inline-block;\">\n\t<input type=\"hidden\" class=\"ids\" name=\"ids\" value=\"\">\n\t<input type=\"submit\" class=\"btn btn-success\" value=\"导出txt\">\n</form>\n```\n","source":"_posts/BookMark/Spring Boot/Spring Boot & poi 导出Excel表格、Txt到浏览器下载.md","raw":"---\ntitle: Spring Boot & poi 导出Excel表格、Txt到浏览器下载\ndate: 2022-09-05 17:09:05\ncategory_bar: true\ncategories: Spring Boot\ntags:\n- Spring Boot\n- poi\n- Excel\n---\n# Spring Boot & poi 导出Excel表格、Txt到浏览器下载\n---\n[toc]\n\n+ 注：若只需要导出Txt则不需要Excel的pom包和工具类\n\n---\n## 一. pom依赖\n```javascript?linenums\n<!-- ****************************************** poi导出excel ************************************ -->\n<dependency>\n\t<groupId>org.apache.poi</groupId>\n\t<artifactId>poi</artifactId>\n\t<version>3.17</version>\n</dependency>\n<dependency>\n\t<groupId>org.apache.poi</groupId>\n\t<artifactId>poi-ooxml</artifactId>\n\t<version>3.17</version>\n</dependency>\n<dependency>\n\t<groupId>org.apache.poi</groupId>\n\t<artifactId>poi-ooxml-schemas</artifactId>\n\t<version>3.17</version>\n</dependency>\n```\n\n---\n## 二. 工具类\n1. ExcelUtil 用于生成工作簿对象和sheet对象等\n```javascript?linenums\npublic class ExcelUtils {\n\t/**\n\t * \n\t * @param titles 表格标题\n\t * @param name sheet名\n\t * @return\n\t * @throws Exception\n\t */\n\tpublic static Workbook exportExcel(String[] titles,String name) throws Exception{\n\n\t\t// 新建工作簿对象\n\t\tXSSFWorkbook workBook = new XSSFWorkbook();\n\t\t// 创建sheet对象\n\t\tXSSFSheet sheet = workBook.createSheet(name);\n\t\t// 创建行,标题行\n\t\tXSSFRow row = sheet.createRow(0);\n\t\tfor(int i = 0; i < titles.length; i++){\n\t\t\t// 创建单元格\n\t\t\tXSSFCell cell = row.createCell(i);\n\t\t\t// 设置单元格内容\n\t\t\tcell.setCellValue(titles[i]);\n\t\t}\n\t\treturn workBook;\n\t}\n}\n```\n2. BuildPath 用于创建响应对象输出流\n```javascript?linenums\npublic class BuildPath {\n\t/**\n\t * \n\t * @param response  响应对象\n\t * @param fileName  输出内容\n\t * @return 响应对象输出流\n\t * @throws IOException\n\t */\n\tpublic  static OutputStream  Manual_Saving(HttpServletResponse response,String fileName) throws IOException{\n\t\t\n\t\t//浏览器自选输出路径\n\t\tresponse.setHeader(\"Content-disposition\", \"attachment;filename=\"+fileName);\n\t\tresponse.setContentType(\"application/msexcel\");\n\n\t\tOutputStream out=response.getOutputStream();\n\t\treturn out;\n\t}\n}\n```\n---\n## 三、后台\n1. 导出Txt(只需要传入需要导出表的id集合如“1,2,3”即可)\n```javascript?linenums\n@RequestMapping(\"/exportTxt.do\")\npublic void exportTerminalKey(HttpServletRequest request, HttpServletResponse response,String ids) throws Exception {\n\n\t\tResult result=new Result(6001, false, \"导出失败\");\n\t\t\n\t\tList<String> list=new ArrayList<>();\n\t\tCollections.addAll(list, ids.split(\",\"));\n\t\tVO mv=new VO();\n\t\tmv.setIds(list);\n\t\tList<Medicine> medicines=medicineService.selectAll(mv);\n\t\tStringBuilder sb = new StringBuilder(\"编号,图片地址,进价,售价,药品名称\\r\\n\");\n\t\tif(medicines!=null&&medicines.size()>0){\n\t\t\tfor(int i=0;i<medicines.size();i++){\n\t\t\t\tsb.append(\n\t\t\t\t\t\tmedicines.get(i).getM_number()+\",\"+\n\t\t\t\t\t\tmedicines.get(i).getM_image_addr()+\",\"+\n\t\t\t\t\t\tmedicines.get(i).getM_purchase()+\",\"+\n\t\t\t\t\t\tmedicines.get(i).getM_selling()+\",\"+\n\t\t\t\t\t\tmedicines.get(i).getM_name()+\"\\r\\n\");\n\t\t\t}\n\t\t}\n\t\tBufferedOutputStream output = null;\n\t\tBufferedInputStream input = null;\n\t\t\n\t\t//设置输出流对象\n\t\tOutputStream os =BuildPath.Manual_Saving(response, \"Mediine.txt\");\n\t\ttry{\n\t\t\tbyte[] byt = sb.toString().getBytes();\n\t\t\tos.write(byt);\n\t\t}catch(Exception e){\n\t\t\tSystem.out.println(\"chucuo\");\n\t\t}finally{\n\t\t\tos.flush();\n\t\t\tos.close();\n\t\t\tif(input!=null){\n\t\t\t\tinput.close();\n\t\t\t}\n\t\t\tif(output!=null){\n\t\t\t\toutput.close();\n\t\t\t}\n\t\t}\n\t\tif(medicines!=null){\n\t\t\t//所有信息装入result对象\n\t\t\tresult.setCode(6000);\n\t\t\tresult.setFlag(true);\n\t\t\tresult.setMessage(\"导出成功\");\t\t\n\t\t}\n\t}\n```\n2. 导出Excel(只需要传入需要导出表的id集合如“1,2,3”即可)\n```javascript?linenums\n@RequestMapping(\"/exportMedicine.do\")\n\tpublic void exportDoctor(String ids,HttpServletResponse response) throws Exception{\n\n\t\tString[] titles={\"编号\",\"图片地址\",\"进价\",\"售价\",\"药品名称\"};\n\t\tResult result=new Result(6001, false, \"导出失败\");\n\t\tVO mv=new VO();\n\t\tList<String> list=new ArrayList<>();\n\t\t//分割ids字符串得到数组并放入集合\n\t\tCollections.addAll(list, ids.split(\",\"));\n\t\tmv.setIds(list);\n\t\t//查询所有信息放到集合中\n\t\tList<Medicine> medicines=medicineService.selectAll(mv);\n\t\t\n\t\t//设置导出信息\n\t\tWorkbook wk=ExcelUtils.exportExcel(titles,\"药品信息\");\n\n\t\tXSSFSheet sheet=(XSSFSheet) wk.getSheet(\"药品信息\");\n\t\t\n\t\t//取出集合中的数据放到表格中\n\t\tfor(int i=0;i<medicines.size();i++){\n\t\t\tXSSFRow row = sheet.createRow(i+1);\n\n\t\t\trow.createCell(0).setCellValue(medicines.get(i).getM_number());\n\t\t\trow.createCell(1).setCellValue(medicines.get(i).getM_image_addr());\n\t\t\trow.createCell(2).setCellValue(medicines.get(i).getM_purchase());\n\t\t\trow.createCell(3).setCellValue(medicines.get(i).getM_selling());\n\t\t\trow.createCell(4).setCellValue(medicines.get(i).getM_name());\n\n\t\t}\n\t\t//设置输出流\n\t\tOutputStream out=BuildPath.Manual_Saving(response, \"Medicine.xls\");\n\t\twk.write(out);\n\t\twk.close();\n\t\tif(medicines!=null){\n\t\t\t//所有信息装入result对象\n\t\t\tresult.setCode(6000);\n\t\t\tresult.setFlag(true);\n\t\t\tresult.setMessage(\"导出成功\");\t\t\n\t\t}\n\n\t\tSystem.out.println(result);\n\t} \n```\n## 四、前端\n1. JavaScript\n```javascript?linenums\n$.post(\"../selectMedicineByCondition.do\",{pageNum:pageNum,m_name:m_name,m_type:m_type},function(result){\n    //填充数据到tbody\n    $(\"#tbody\").empty();//清除之前的内容\n    $(result.object.list).each(function(index,medicine){\n    \t$(\"#tbody\").append(\n    \t\t\t\" <tr>\"+\n             \t\"<td style='vertical-align:middle;'><input type='checkbox' name='check' value='\"+medicine.m_id+\"'></td>\"+\n                \"<td style='vertical-align:middle;'>\"+medicine.m_number+\"</td>\"+\n                \"<td style='vertical-align:middle;''>\"+medicine.m_name+\"</td>\"+\n                \"<td style='vertical-align:middle;''>\"+medicine.m_type+\"</td>\"+\n                \"<td style='vertical-align:middle;''>\"+medicine.m_description+\"</td>\"+\n                \"<td style='vertical-align:middle;''>\"+medicine.m_state+\"</td>\"+\n                \"<td style='vertical-align:middle;''>\"+medicine.m_residue+\"</td>\"+\n                \"<td style='vertical-align:middle;'>\"+\n                \"<a id='btn6' m_id=\"+medicine.m_id+\">详情>>></a> &nbsp;&nbsp;&nbsp;\"+\n            \t\"</tr>\"\n            \t);\n    })\n},\"json\");\t\n\n$(\"input[type=checkbox]\").live(\"change\",function(){\n\tdelAll();  \n})\n//查看所有被选中的checkbox框并记录其id\nfunction delAll(){\n\tvar alls=document.getElementsByName(\"check\");\n\tvar ids=new Array();\n\tfor(var i=0;i<alls.length;i++){\n\t\tif(alls[i].checked){\n\t\t\tids.push(alls[i].value);\n\t\t}\t\t\n\t}\n\t$(\".ids\").val(ids);\t\n}\n\n```\n2. Html\n```javascript?linenums\n<table class=\"table table-bordered table-hover definewidth m10\" >\n    <thead>\n    <tr>\n        <th><input type=\"checkbox\" id=\"checkall\" onChange=\"checkall();\"></th>\n        <th>药品编号</th>\n        <th>药品名称</th>\n        <th>药品类型</th>\n        <th>简单描述</th>\n        <th>状态</th>\n        <th>剩余量</th>\n        <th>操作</th>\n    </tr> \n    </thead>\n    <tbody id=\"tbody\">\n    </tbody>\n</table>\n\n<form action=\"../exportMedicine.do\" method=\"post\" style=\"display: inline-block;\">\n\t<input type=\"hidden\" class=\"ids\" name=\"ids\" value=\"\">\n\t<input type=\"submit\" class=\"btn btn-success\" value=\"导出Excel\">\n</form>\n<form action=\"../exportTxt.do\" method=\"post\" style=\"display: inline-block;\">\n\t<input type=\"hidden\" class=\"ids\" name=\"ids\" value=\"\">\n\t<input type=\"submit\" class=\"btn btn-success\" value=\"导出txt\">\n</form>\n```\n","slug":"BookMark/Spring Boot/Spring Boot & poi 导出Excel表格、Txt到浏览器下载","published":1,"updated":"2022-09-06T07:08:49.905Z","_id":"cl7ptszol001iaba5hbo9d2h2","comments":1,"layout":"post","photos":[],"link":"","content":"<h1><span id=\"spring-boot-amp-poi-导出excel表格-txt到浏览器下载\">Spring Boot &amp; poi 导出Excel表格、Txt到浏览器下载</span></h1><hr>\n<p>[toc]</p>\n<ul>\n<li>注：若只需要导出Txt则不需要Excel的pom包和工具类</li>\n</ul>\n<hr>\n<h2><span id=\"一-pom依赖\">一. pom依赖</span></h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">&lt;!-- ****************************************** poi导出excel ************************************ --&gt;<br>&lt;dependency&gt;<br>\t&lt;groupId&gt;org.apache.poi&lt;/groupId&gt;<br>\t&lt;artifactId&gt;poi&lt;/artifactId&gt;<br>\t&lt;version&gt;3.17&lt;/version&gt;<br>&lt;/dependency&gt;<br>&lt;dependency&gt;<br>\t&lt;groupId&gt;org.apache.poi&lt;/groupId&gt;<br>\t&lt;artifactId&gt;poi-ooxml&lt;/artifactId&gt;<br>\t&lt;version&gt;3.17&lt;/version&gt;<br>&lt;/dependency&gt;<br>&lt;dependency&gt;<br>\t&lt;groupId&gt;org.apache.poi&lt;/groupId&gt;<br>\t&lt;artifactId&gt;poi-ooxml-schemas&lt;/artifactId&gt;<br>\t&lt;version&gt;3.17&lt;/version&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure>\n\n<hr>\n<h2><span id=\"二-工具类\">二. 工具类</span></h2><ol>\n<li>ExcelUtil 用于生成工作簿对象和sheet对象等<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">public class ExcelUtils &#123;<br>\t/**<br>\t * <br>\t * @param titles 表格标题<br>\t * @param name sheet名<br>\t * @return<br>\t * @throws Exception<br>\t */<br>\tpublic static Workbook exportExcel(String[] titles,String name) throws Exception&#123;<br><br>\t\t// 新建工作簿对象<br>\t\tXSSFWorkbook workBook = new XSSFWorkbook();<br>\t\t// 创建sheet对象<br>\t\tXSSFSheet sheet = workBook.createSheet(name);<br>\t\t// 创建行,标题行<br>\t\tXSSFRow row = sheet.createRow(0);<br>\t\tfor(int i = 0; i &lt; titles.length; i++)&#123;<br>\t\t\t// 创建单元格<br>\t\t\tXSSFCell cell = row.createCell(i);<br>\t\t\t// 设置单元格内容<br>\t\t\tcell.setCellValue(titles[i]);<br>\t\t&#125;<br>\t\treturn workBook;<br>\t&#125;<br>&#125;<br></code></pre></td></tr></table></figure></li>\n<li>BuildPath 用于创建响应对象输出流<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">public class BuildPath &#123;<br>\t/**<br>\t * <br>\t * @param response  响应对象<br>\t * @param fileName  输出内容<br>\t * @return 响应对象输出流<br>\t * @throws IOException<br>\t */<br>\tpublic  static OutputStream  Manual_Saving(HttpServletResponse response,String fileName) throws IOException&#123;<br>\t\t<br>\t\t//浏览器自选输出路径<br>\t\tresponse.setHeader(&quot;Content-disposition&quot;, &quot;attachment;filename=&quot;+fileName);<br>\t\tresponse.setContentType(&quot;application/msexcel&quot;);<br><br>\t\tOutputStream out=response.getOutputStream();<br>\t\treturn out;<br>\t&#125;<br>&#125;<br></code></pre></td></tr></table></figure></li>\n</ol>\n<hr>\n<h2><span id=\"三-后台\">三、后台</span></h2><ol>\n<li>导出Txt(只需要传入需要导出表的id集合如“1,2,3”即可)<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">@RequestMapping(&quot;/exportTxt.do&quot;)<br>public void exportTerminalKey(HttpServletRequest request, HttpServletResponse response,String ids) throws Exception &#123;<br><br>\t\tResult result=new Result(6001, false, &quot;导出失败&quot;);<br>\t\t<br>\t\tList&lt;String&gt; list=new ArrayList&lt;&gt;();<br>\t\tCollections.addAll(list, ids.split(&quot;,&quot;));<br>\t\tVO mv=new VO();<br>\t\tmv.setIds(list);<br>\t\tList&lt;Medicine&gt; medicines=medicineService.selectAll(mv);<br>\t\tStringBuilder sb = new StringBuilder(&quot;编号,图片地址,进价,售价,药品名称\\r\\n&quot;);<br>\t\tif(medicines!=null&amp;&amp;medicines.size()&gt;0)&#123;<br>\t\t\tfor(int i=0;i&lt;medicines.size();i++)&#123;<br>\t\t\t\tsb.append(<br>\t\t\t\t\t\tmedicines.get(i).getM_number()+&quot;,&quot;+<br>\t\t\t\t\t\tmedicines.get(i).getM_image_addr()+&quot;,&quot;+<br>\t\t\t\t\t\tmedicines.get(i).getM_purchase()+&quot;,&quot;+<br>\t\t\t\t\t\tmedicines.get(i).getM_selling()+&quot;,&quot;+<br>\t\t\t\t\t\tmedicines.get(i).getM_name()+&quot;\\r\\n&quot;);<br>\t\t\t&#125;<br>\t\t&#125;<br>\t\tBufferedOutputStream output = null;<br>\t\tBufferedInputStream input = null;<br>\t\t<br>\t\t//设置输出流对象<br>\t\tOutputStream os =BuildPath.Manual_Saving(response, &quot;Mediine.txt&quot;);<br>\t\ttry&#123;<br>\t\t\tbyte[] byt = sb.toString().getBytes();<br>\t\t\tos.write(byt);<br>\t\t&#125;catch(Exception e)&#123;<br>\t\t\tSystem.out.println(&quot;chucuo&quot;);<br>\t\t&#125;finally&#123;<br>\t\t\tos.flush();<br>\t\t\tos.close();<br>\t\t\tif(input!=null)&#123;<br>\t\t\t\tinput.close();<br>\t\t\t&#125;<br>\t\t\tif(output!=null)&#123;<br>\t\t\t\toutput.close();<br>\t\t\t&#125;<br>\t\t&#125;<br>\t\tif(medicines!=null)&#123;<br>\t\t\t//所有信息装入result对象<br>\t\t\tresult.setCode(6000);<br>\t\t\tresult.setFlag(true);<br>\t\t\tresult.setMessage(&quot;导出成功&quot;);\t\t<br>\t\t&#125;<br>\t&#125;<br></code></pre></td></tr></table></figure></li>\n<li>导出Excel(只需要传入需要导出表的id集合如“1,2,3”即可)<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">@RequestMapping(&quot;/exportMedicine.do&quot;)<br>\tpublic void exportDoctor(String ids,HttpServletResponse response) throws Exception&#123;<br><br>\t\tString[] titles=&#123;&quot;编号&quot;,&quot;图片地址&quot;,&quot;进价&quot;,&quot;售价&quot;,&quot;药品名称&quot;&#125;;<br>\t\tResult result=new Result(6001, false, &quot;导出失败&quot;);<br>\t\tVO mv=new VO();<br>\t\tList&lt;String&gt; list=new ArrayList&lt;&gt;();<br>\t\t//分割ids字符串得到数组并放入集合<br>\t\tCollections.addAll(list, ids.split(&quot;,&quot;));<br>\t\tmv.setIds(list);<br>\t\t//查询所有信息放到集合中<br>\t\tList&lt;Medicine&gt; medicines=medicineService.selectAll(mv);<br>\t\t<br>\t\t//设置导出信息<br>\t\tWorkbook wk=ExcelUtils.exportExcel(titles,&quot;药品信息&quot;);<br><br>\t\tXSSFSheet sheet=(XSSFSheet) wk.getSheet(&quot;药品信息&quot;);<br>\t\t<br>\t\t//取出集合中的数据放到表格中<br>\t\tfor(int i=0;i&lt;medicines.size();i++)&#123;<br>\t\t\tXSSFRow row = sheet.createRow(i+1);<br><br>\t\t\trow.createCell(0).setCellValue(medicines.get(i).getM_number());<br>\t\t\trow.createCell(1).setCellValue(medicines.get(i).getM_image_addr());<br>\t\t\trow.createCell(2).setCellValue(medicines.get(i).getM_purchase());<br>\t\t\trow.createCell(3).setCellValue(medicines.get(i).getM_selling());<br>\t\t\trow.createCell(4).setCellValue(medicines.get(i).getM_name());<br><br>\t\t&#125;<br>\t\t//设置输出流<br>\t\tOutputStream out=BuildPath.Manual_Saving(response, &quot;Medicine.xls&quot;);<br>\t\twk.write(out);<br>\t\twk.close();<br>\t\tif(medicines!=null)&#123;<br>\t\t\t//所有信息装入result对象<br>\t\t\tresult.setCode(6000);<br>\t\t\tresult.setFlag(true);<br>\t\t\tresult.setMessage(&quot;导出成功&quot;);\t\t<br>\t\t&#125;<br><br>\t\tSystem.out.println(result);<br>\t&#125; <br></code></pre></td></tr></table></figure></li>\n</ol>\n<h2><span id=\"四-前端\">四、前端</span></h2><ol>\n<li>JavaScript<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">$.post(&quot;../selectMedicineByCondition.do&quot;,&#123;pageNum:pageNum,m_name:m_name,m_type:m_type&#125;,function(result)&#123;<br>    //填充数据到tbody<br>    $(&quot;#tbody&quot;).empty();//清除之前的内容<br>    $(result.object.list).each(function(index,medicine)&#123;<br>    \t$(&quot;#tbody&quot;).append(<br>    \t\t\t&quot; &lt;tr&gt;&quot;+<br>             \t&quot;&lt;td style=&#x27;vertical-align:middle;&#x27;&gt;&lt;input type=&#x27;checkbox&#x27; name=&#x27;check&#x27; value=&#x27;&quot;+medicine.m_id+&quot;&#x27;&gt;&lt;/td&gt;&quot;+<br>                &quot;&lt;td style=&#x27;vertical-align:middle;&#x27;&gt;&quot;+medicine.m_number+&quot;&lt;/td&gt;&quot;+<br>                &quot;&lt;td style=&#x27;vertical-align:middle;&#x27;&#x27;&gt;&quot;+medicine.m_name+&quot;&lt;/td&gt;&quot;+<br>                &quot;&lt;td style=&#x27;vertical-align:middle;&#x27;&#x27;&gt;&quot;+medicine.m_type+&quot;&lt;/td&gt;&quot;+<br>                &quot;&lt;td style=&#x27;vertical-align:middle;&#x27;&#x27;&gt;&quot;+medicine.m_description+&quot;&lt;/td&gt;&quot;+<br>                &quot;&lt;td style=&#x27;vertical-align:middle;&#x27;&#x27;&gt;&quot;+medicine.m_state+&quot;&lt;/td&gt;&quot;+<br>                &quot;&lt;td style=&#x27;vertical-align:middle;&#x27;&#x27;&gt;&quot;+medicine.m_residue+&quot;&lt;/td&gt;&quot;+<br>                &quot;&lt;td style=&#x27;vertical-align:middle;&#x27;&gt;&quot;+<br>                &quot;&lt;a id=&#x27;btn6&#x27; m_id=&quot;+medicine.m_id+&quot;&gt;详情&gt;&gt;&gt;&lt;/a&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&quot;+<br>            \t&quot;&lt;/tr&gt;&quot;<br>            \t);<br>    &#125;)<br>&#125;,&quot;json&quot;);\t<br><br>$(&quot;input[type=checkbox]&quot;).live(&quot;change&quot;,function()&#123;<br>\tdelAll();  <br>&#125;)<br>//查看所有被选中的checkbox框并记录其id<br>function delAll()&#123;<br>\tvar alls=document.getElementsByName(&quot;check&quot;);<br>\tvar ids=new Array();<br>\tfor(var i=0;i&lt;alls.length;i++)&#123;<br>\t\tif(alls[i].checked)&#123;<br>\t\t\tids.push(alls[i].value);<br>\t\t&#125;\t\t<br>\t&#125;<br>\t$(&quot;.ids&quot;).val(ids);\t<br>&#125;<br><br></code></pre></td></tr></table></figure></li>\n<li>Html<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">&lt;table class=&quot;table table-bordered table-hover definewidth m10&quot; &gt;<br>    &lt;thead&gt;<br>    &lt;tr&gt;<br>        &lt;th&gt;&lt;input type=&quot;checkbox&quot; id=&quot;checkall&quot; onChange=&quot;checkall();&quot;&gt;&lt;/th&gt;<br>        &lt;th&gt;药品编号&lt;/th&gt;<br>        &lt;th&gt;药品名称&lt;/th&gt;<br>        &lt;th&gt;药品类型&lt;/th&gt;<br>        &lt;th&gt;简单描述&lt;/th&gt;<br>        &lt;th&gt;状态&lt;/th&gt;<br>        &lt;th&gt;剩余量&lt;/th&gt;<br>        &lt;th&gt;操作&lt;/th&gt;<br>    &lt;/tr&gt; <br>    &lt;/thead&gt;<br>    &lt;tbody id=&quot;tbody&quot;&gt;<br>    &lt;/tbody&gt;<br>&lt;/table&gt;<br><br>&lt;form action=&quot;../exportMedicine.do&quot; method=&quot;post&quot; style=&quot;display: inline-block;&quot;&gt;<br>\t&lt;input type=&quot;hidden&quot; class=&quot;ids&quot; name=&quot;ids&quot; value=&quot;&quot;&gt;<br>\t&lt;input type=&quot;submit&quot; class=&quot;btn btn-success&quot; value=&quot;导出Excel&quot;&gt;<br>&lt;/form&gt;<br>&lt;form action=&quot;../exportTxt.do&quot; method=&quot;post&quot; style=&quot;display: inline-block;&quot;&gt;<br>\t&lt;input type=&quot;hidden&quot; class=&quot;ids&quot; name=&quot;ids&quot; value=&quot;&quot;&gt;<br>\t&lt;input type=&quot;submit&quot; class=&quot;btn btn-success&quot; value=&quot;导出txt&quot;&gt;<br>&lt;/form&gt;<br></code></pre></td></tr></table></figure></li>\n</ol>\n","site":{"data":{}},"wordcount":7526,"excerpt":"","more":"<h1 id=\"Spring-Boot-amp-poi-导出Excel表格、Txt到浏览器下载\"><a href=\"#Spring-Boot-amp-poi-导出Excel表格、Txt到浏览器下载\" class=\"headerlink\" title=\"Spring Boot &amp; poi 导出Excel表格、Txt到浏览器下载\"></a>Spring Boot &amp; poi 导出Excel表格、Txt到浏览器下载</h1><hr>\n<p>[toc]</p>\n<ul>\n<li>注：若只需要导出Txt则不需要Excel的pom包和工具类</li>\n</ul>\n<hr>\n<h2 id=\"一-pom依赖\"><a href=\"#一-pom依赖\" class=\"headerlink\" title=\"一. pom依赖\"></a>一. pom依赖</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">&lt;!-- ****************************************** poi导出excel ************************************ --&gt;<br>&lt;dependency&gt;<br>\t&lt;groupId&gt;org.apache.poi&lt;/groupId&gt;<br>\t&lt;artifactId&gt;poi&lt;/artifactId&gt;<br>\t&lt;version&gt;3.17&lt;/version&gt;<br>&lt;/dependency&gt;<br>&lt;dependency&gt;<br>\t&lt;groupId&gt;org.apache.poi&lt;/groupId&gt;<br>\t&lt;artifactId&gt;poi-ooxml&lt;/artifactId&gt;<br>\t&lt;version&gt;3.17&lt;/version&gt;<br>&lt;/dependency&gt;<br>&lt;dependency&gt;<br>\t&lt;groupId&gt;org.apache.poi&lt;/groupId&gt;<br>\t&lt;artifactId&gt;poi-ooxml-schemas&lt;/artifactId&gt;<br>\t&lt;version&gt;3.17&lt;/version&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"二-工具类\"><a href=\"#二-工具类\" class=\"headerlink\" title=\"二. 工具类\"></a>二. 工具类</h2><ol>\n<li>ExcelUtil 用于生成工作簿对象和sheet对象等<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">public class ExcelUtils &#123;<br>\t/**<br>\t * <br>\t * @param titles 表格标题<br>\t * @param name sheet名<br>\t * @return<br>\t * @throws Exception<br>\t */<br>\tpublic static Workbook exportExcel(String[] titles,String name) throws Exception&#123;<br><br>\t\t// 新建工作簿对象<br>\t\tXSSFWorkbook workBook = new XSSFWorkbook();<br>\t\t// 创建sheet对象<br>\t\tXSSFSheet sheet = workBook.createSheet(name);<br>\t\t// 创建行,标题行<br>\t\tXSSFRow row = sheet.createRow(0);<br>\t\tfor(int i = 0; i &lt; titles.length; i++)&#123;<br>\t\t\t// 创建单元格<br>\t\t\tXSSFCell cell = row.createCell(i);<br>\t\t\t// 设置单元格内容<br>\t\t\tcell.setCellValue(titles[i]);<br>\t\t&#125;<br>\t\treturn workBook;<br>\t&#125;<br>&#125;<br></code></pre></td></tr></table></figure></li>\n<li>BuildPath 用于创建响应对象输出流<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">public class BuildPath &#123;<br>\t/**<br>\t * <br>\t * @param response  响应对象<br>\t * @param fileName  输出内容<br>\t * @return 响应对象输出流<br>\t * @throws IOException<br>\t */<br>\tpublic  static OutputStream  Manual_Saving(HttpServletResponse response,String fileName) throws IOException&#123;<br>\t\t<br>\t\t//浏览器自选输出路径<br>\t\tresponse.setHeader(&quot;Content-disposition&quot;, &quot;attachment;filename=&quot;+fileName);<br>\t\tresponse.setContentType(&quot;application/msexcel&quot;);<br><br>\t\tOutputStream out=response.getOutputStream();<br>\t\treturn out;<br>\t&#125;<br>&#125;<br></code></pre></td></tr></table></figure></li>\n</ol>\n<hr>\n<h2 id=\"三、后台\"><a href=\"#三、后台\" class=\"headerlink\" title=\"三、后台\"></a>三、后台</h2><ol>\n<li>导出Txt(只需要传入需要导出表的id集合如“1,2,3”即可)<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">@RequestMapping(&quot;/exportTxt.do&quot;)<br>public void exportTerminalKey(HttpServletRequest request, HttpServletResponse response,String ids) throws Exception &#123;<br><br>\t\tResult result=new Result(6001, false, &quot;导出失败&quot;);<br>\t\t<br>\t\tList&lt;String&gt; list=new ArrayList&lt;&gt;();<br>\t\tCollections.addAll(list, ids.split(&quot;,&quot;));<br>\t\tVO mv=new VO();<br>\t\tmv.setIds(list);<br>\t\tList&lt;Medicine&gt; medicines=medicineService.selectAll(mv);<br>\t\tStringBuilder sb = new StringBuilder(&quot;编号,图片地址,进价,售价,药品名称\\r\\n&quot;);<br>\t\tif(medicines!=null&amp;&amp;medicines.size()&gt;0)&#123;<br>\t\t\tfor(int i=0;i&lt;medicines.size();i++)&#123;<br>\t\t\t\tsb.append(<br>\t\t\t\t\t\tmedicines.get(i).getM_number()+&quot;,&quot;+<br>\t\t\t\t\t\tmedicines.get(i).getM_image_addr()+&quot;,&quot;+<br>\t\t\t\t\t\tmedicines.get(i).getM_purchase()+&quot;,&quot;+<br>\t\t\t\t\t\tmedicines.get(i).getM_selling()+&quot;,&quot;+<br>\t\t\t\t\t\tmedicines.get(i).getM_name()+&quot;\\r\\n&quot;);<br>\t\t\t&#125;<br>\t\t&#125;<br>\t\tBufferedOutputStream output = null;<br>\t\tBufferedInputStream input = null;<br>\t\t<br>\t\t//设置输出流对象<br>\t\tOutputStream os =BuildPath.Manual_Saving(response, &quot;Mediine.txt&quot;);<br>\t\ttry&#123;<br>\t\t\tbyte[] byt = sb.toString().getBytes();<br>\t\t\tos.write(byt);<br>\t\t&#125;catch(Exception e)&#123;<br>\t\t\tSystem.out.println(&quot;chucuo&quot;);<br>\t\t&#125;finally&#123;<br>\t\t\tos.flush();<br>\t\t\tos.close();<br>\t\t\tif(input!=null)&#123;<br>\t\t\t\tinput.close();<br>\t\t\t&#125;<br>\t\t\tif(output!=null)&#123;<br>\t\t\t\toutput.close();<br>\t\t\t&#125;<br>\t\t&#125;<br>\t\tif(medicines!=null)&#123;<br>\t\t\t//所有信息装入result对象<br>\t\t\tresult.setCode(6000);<br>\t\t\tresult.setFlag(true);<br>\t\t\tresult.setMessage(&quot;导出成功&quot;);\t\t<br>\t\t&#125;<br>\t&#125;<br></code></pre></td></tr></table></figure></li>\n<li>导出Excel(只需要传入需要导出表的id集合如“1,2,3”即可)<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">@RequestMapping(&quot;/exportMedicine.do&quot;)<br>\tpublic void exportDoctor(String ids,HttpServletResponse response) throws Exception&#123;<br><br>\t\tString[] titles=&#123;&quot;编号&quot;,&quot;图片地址&quot;,&quot;进价&quot;,&quot;售价&quot;,&quot;药品名称&quot;&#125;;<br>\t\tResult result=new Result(6001, false, &quot;导出失败&quot;);<br>\t\tVO mv=new VO();<br>\t\tList&lt;String&gt; list=new ArrayList&lt;&gt;();<br>\t\t//分割ids字符串得到数组并放入集合<br>\t\tCollections.addAll(list, ids.split(&quot;,&quot;));<br>\t\tmv.setIds(list);<br>\t\t//查询所有信息放到集合中<br>\t\tList&lt;Medicine&gt; medicines=medicineService.selectAll(mv);<br>\t\t<br>\t\t//设置导出信息<br>\t\tWorkbook wk=ExcelUtils.exportExcel(titles,&quot;药品信息&quot;);<br><br>\t\tXSSFSheet sheet=(XSSFSheet) wk.getSheet(&quot;药品信息&quot;);<br>\t\t<br>\t\t//取出集合中的数据放到表格中<br>\t\tfor(int i=0;i&lt;medicines.size();i++)&#123;<br>\t\t\tXSSFRow row = sheet.createRow(i+1);<br><br>\t\t\trow.createCell(0).setCellValue(medicines.get(i).getM_number());<br>\t\t\trow.createCell(1).setCellValue(medicines.get(i).getM_image_addr());<br>\t\t\trow.createCell(2).setCellValue(medicines.get(i).getM_purchase());<br>\t\t\trow.createCell(3).setCellValue(medicines.get(i).getM_selling());<br>\t\t\trow.createCell(4).setCellValue(medicines.get(i).getM_name());<br><br>\t\t&#125;<br>\t\t//设置输出流<br>\t\tOutputStream out=BuildPath.Manual_Saving(response, &quot;Medicine.xls&quot;);<br>\t\twk.write(out);<br>\t\twk.close();<br>\t\tif(medicines!=null)&#123;<br>\t\t\t//所有信息装入result对象<br>\t\t\tresult.setCode(6000);<br>\t\t\tresult.setFlag(true);<br>\t\t\tresult.setMessage(&quot;导出成功&quot;);\t\t<br>\t\t&#125;<br><br>\t\tSystem.out.println(result);<br>\t&#125; <br></code></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"四、前端\"><a href=\"#四、前端\" class=\"headerlink\" title=\"四、前端\"></a>四、前端</h2><ol>\n<li>JavaScript<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">$.post(&quot;../selectMedicineByCondition.do&quot;,&#123;pageNum:pageNum,m_name:m_name,m_type:m_type&#125;,function(result)&#123;<br>    //填充数据到tbody<br>    $(&quot;#tbody&quot;).empty();//清除之前的内容<br>    $(result.object.list).each(function(index,medicine)&#123;<br>    \t$(&quot;#tbody&quot;).append(<br>    \t\t\t&quot; &lt;tr&gt;&quot;+<br>             \t&quot;&lt;td style=&#x27;vertical-align:middle;&#x27;&gt;&lt;input type=&#x27;checkbox&#x27; name=&#x27;check&#x27; value=&#x27;&quot;+medicine.m_id+&quot;&#x27;&gt;&lt;/td&gt;&quot;+<br>                &quot;&lt;td style=&#x27;vertical-align:middle;&#x27;&gt;&quot;+medicine.m_number+&quot;&lt;/td&gt;&quot;+<br>                &quot;&lt;td style=&#x27;vertical-align:middle;&#x27;&#x27;&gt;&quot;+medicine.m_name+&quot;&lt;/td&gt;&quot;+<br>                &quot;&lt;td style=&#x27;vertical-align:middle;&#x27;&#x27;&gt;&quot;+medicine.m_type+&quot;&lt;/td&gt;&quot;+<br>                &quot;&lt;td style=&#x27;vertical-align:middle;&#x27;&#x27;&gt;&quot;+medicine.m_description+&quot;&lt;/td&gt;&quot;+<br>                &quot;&lt;td style=&#x27;vertical-align:middle;&#x27;&#x27;&gt;&quot;+medicine.m_state+&quot;&lt;/td&gt;&quot;+<br>                &quot;&lt;td style=&#x27;vertical-align:middle;&#x27;&#x27;&gt;&quot;+medicine.m_residue+&quot;&lt;/td&gt;&quot;+<br>                &quot;&lt;td style=&#x27;vertical-align:middle;&#x27;&gt;&quot;+<br>                &quot;&lt;a id=&#x27;btn6&#x27; m_id=&quot;+medicine.m_id+&quot;&gt;详情&gt;&gt;&gt;&lt;/a&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&quot;+<br>            \t&quot;&lt;/tr&gt;&quot;<br>            \t);<br>    &#125;)<br>&#125;,&quot;json&quot;);\t<br><br>$(&quot;input[type=checkbox]&quot;).live(&quot;change&quot;,function()&#123;<br>\tdelAll();  <br>&#125;)<br>//查看所有被选中的checkbox框并记录其id<br>function delAll()&#123;<br>\tvar alls=document.getElementsByName(&quot;check&quot;);<br>\tvar ids=new Array();<br>\tfor(var i=0;i&lt;alls.length;i++)&#123;<br>\t\tif(alls[i].checked)&#123;<br>\t\t\tids.push(alls[i].value);<br>\t\t&#125;\t\t<br>\t&#125;<br>\t$(&quot;.ids&quot;).val(ids);\t<br>&#125;<br><br></code></pre></td></tr></table></figure></li>\n<li>Html<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">&lt;table class=&quot;table table-bordered table-hover definewidth m10&quot; &gt;<br>    &lt;thead&gt;<br>    &lt;tr&gt;<br>        &lt;th&gt;&lt;input type=&quot;checkbox&quot; id=&quot;checkall&quot; onChange=&quot;checkall();&quot;&gt;&lt;/th&gt;<br>        &lt;th&gt;药品编号&lt;/th&gt;<br>        &lt;th&gt;药品名称&lt;/th&gt;<br>        &lt;th&gt;药品类型&lt;/th&gt;<br>        &lt;th&gt;简单描述&lt;/th&gt;<br>        &lt;th&gt;状态&lt;/th&gt;<br>        &lt;th&gt;剩余量&lt;/th&gt;<br>        &lt;th&gt;操作&lt;/th&gt;<br>    &lt;/tr&gt; <br>    &lt;/thead&gt;<br>    &lt;tbody id=&quot;tbody&quot;&gt;<br>    &lt;/tbody&gt;<br>&lt;/table&gt;<br><br>&lt;form action=&quot;../exportMedicine.do&quot; method=&quot;post&quot; style=&quot;display: inline-block;&quot;&gt;<br>\t&lt;input type=&quot;hidden&quot; class=&quot;ids&quot; name=&quot;ids&quot; value=&quot;&quot;&gt;<br>\t&lt;input type=&quot;submit&quot; class=&quot;btn btn-success&quot; value=&quot;导出Excel&quot;&gt;<br>&lt;/form&gt;<br>&lt;form action=&quot;../exportTxt.do&quot; method=&quot;post&quot; style=&quot;display: inline-block;&quot;&gt;<br>\t&lt;input type=&quot;hidden&quot; class=&quot;ids&quot; name=&quot;ids&quot; value=&quot;&quot;&gt;<br>\t&lt;input type=&quot;submit&quot; class=&quot;btn btn-success&quot; value=&quot;导出txt&quot;&gt;<br>&lt;/form&gt;<br></code></pre></td></tr></table></figure></li>\n</ol>\n"},{"title":"Spring Boot & Slf4j & logback 彩色日志打印（功能点：1、分运行环境生成日志文件 2、日志文件目录分类 3、日志文件按日输出）","date":"2022-09-05T09:09:05.000Z","category_bar":true,"_content":"# Spring Boot & 拦截参数 & 全局异常处理 & 统一结果返回\n---\n\n[toc]\n\n---\n\n## 一、直接在实体类字段上加上注解以拦截\n\n```javascript?linenums\n@NotBlank(message = \"请输入密码\")\n@Pattern(regexp = \"\\\\w{6,18}$\",message = \"账号应为6-18位字符,不含特殊符号，添加失败\")\nprivate String userAccount;\n@NotBlank(message = \"请输入密码\")\n@Pattern(regexp = \"^(?![0-9]+$)(?![a-zA-Z]+$)[0-9A-Za-z]{6,18}$\",message = \"账号应为6-18位字符,包含数字和字母，不含特殊符号，添加失败\")\nprivate String userPwd;\n```\n+ 常用注解\n| **注解**                                             | **适用的数据类型**                                           | **说明**                                                     |\n| ---------------------------------------------------- | ------------------------------------------------------------ | ------------------------------------------------------------ |\n| **@AssertFalse**                                     | [Boolean](https://so.csdn.net/so/search?q=Boolean&spm=1001.2101.3001.7020), boolean | 验证注解的元素值是false                                      |\n| **@AssertTrue**                                      | Boolean, boolean                                             | 验证注解的元素值是true                                       |\n| **@DecimalMax****（value=x）**                       | BigDecimal, BigInteger, String, byte,short, int, long and the respective wrappers of the primitive types. Additionally supported by HV: any sub-type of Number andCharSequence. | 验证注解的元素值小于等于@ DecimalMax指定的value值            |\n| **@DecimalMin****（value=x）**                       | BigDecimal, BigInteger, String, byte,short, int, long and the respective wrappers of the primitive types. Additionally supported by HV: any sub-type of Number andCharSequence. | 验证注解的元素值小于等于@ DecimalMin指定的value值            |\n| **@Digits(integer=****整数位数, fraction=小数位数)** | BigDecimal, BigInteger, String, byte,short, int, long and the respective wrappers of the primitive types. Additionally supported by HV: any sub-type of Number andCharSequence. | 验证注解的元素值的整数位数和小数位数上限                     |\n| **@Future**                                          | java.util.Date, java.util.Calendar; Additionally supported by HV, if the[Joda Time](http://joda-time.sourceforge.net/) date/time API is on the class path: any implementations ofReadablePartial andReadableInstant. | 验证注解的元素值（日期类型）比当前时间晚                     |\n| **@Max****（value=x）**                              | BigDecimal, BigInteger, byte, short,int, long and the respective wrappers of the primitive types. Additionally supported by HV: any sub-type ofCharSequence (the numeric value represented by the character sequence is evaluated), any sub-type of Number. | 验证注解的元素值小于等于@Max指定的value值                    |\n| **@Min****（value=x）**                              | BigDecimal, BigInteger, byte, short,int, long and the respective wrappers of the primitive types. Additionally supported by HV: any sub-type of CharSequence (the numeric value represented by the char sequence is evaluated), any sub-type of Number. | 验证注解的元素值大于等于@Min指定的value值                    |\n| **@NotNull**                                         | Any type                                                     | 验证注解的元素值不是null                                     |\n| **@Null**                                            | Any type                                                     | 验证注解的元素值是null                                       |\n| **@Past**                                            | java.util.Date, java.util.Calendar; Additionally supported by HV, if the[Joda Time](http://joda-time.sourceforge.net/) date/time API is on the class path: any implementations ofReadablePartial andReadableInstant. | 验证注解的元素值（日期类型）比当前时间早                     |\n| **@Pattern(regex=****正则表达式, flag=)**            | String. Additionally supported by HV: any sub-type of CharSequence. | 验证注解的元素值与指定的正则表达式匹配                       |\n| **@Size(min=****最小值, max=最大值)**                | String, Collection, Map and arrays. Additionally supported by HV: any sub-type of CharSequence. | 验证注解的元素值的在min和max（包含）指定区间之内，如字符长度、集合大小 |\n| **@Valid**                                           | Any non-primitive type（引用类型）                           | 验证关联的对象，如账户对象里有一个订单对象，指定验证订单对象 |\n| **@NotEmpty**                                        | `CharSequence`,`Collection`, `Map and Arrays`                | 验证注解的元素值不为null且不为空（字符串长度不为0、集合大小不为0） |\n| **@Range(min=****最小值, max=最大值)**               | `CharSequence, Collection, Map and Arrays,BigDecimal, BigInteger, CharSequence, byte, short, int, long and the respective wrappers of the primitive types` | 验证注解的元素值在最小值和最大值之间                         |\n| **@NotBlank**                                        | `CharSequence`                                               | 验证注解的元素值不为空（不为null、去除首位空格后长度为0），不同于@NotEmpty，@NotBlank只应用于字符串且在比较时会去除字符串的空格 |\n| **@Length(min=****下限, max=上限)**                  | `CharSequence`                                               | 验证注解的元素值长度在min和max区间内                         |\n| **@Email**                                           | `CharSequence`                                               | 验证注解的元素值是Email，也可以通过正则表达式和flag指定自定义的email格式 |\n\n## 二、配置拦截成功时的返回信息\n\n![image-20220720111716167](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720111716167.png)\n+ @Valid：表示加入拦截\n\n## 三、全局异常处理\n\n```\npackage com.hbq.cms.config;\n\n/**\n * @author: hbq\n * @description: 统一异常拦截\n * @date: 2017/10/24 10:31\n */\n@ControllerAdvice\n@ResponseBody\n@Slf4j\npublic class GlobalExceptionHandler {\n\t/**\n\t * 参数校验异常处理\n\t */\n    @ExceptionHandler(MethodArgumentNotValidException.class)\n    public Result handleMethodArgumentNotValid(MethodArgumentNotValidException e) {\n        log.error(\"校验失败：{}\\nat：{}\", e.getMessage(), Arrays.toString(e.getStackTrace()).replaceAll(\",\", \"\\n   \"));\n        String message = e.getFieldError().getDefaultMessage();\n        String errorDetail = message + \"(\" + e.getFieldError().getField() + \")\";\n        return Result.failed(errorDetail);\n    }\n\n    /**\n     * 常规异常处理\n     */\n    @ExceptionHandler(Throwable.class)\n    public Result handleGeneralException(Exception e) {\n        log.error(\"未知异常：{}\\nat：{}\", e.getMessage(), Arrays.toString(e.getStackTrace()).replaceAll(\",\", \"\\n   \"));\n        return Result.failedWith(\"\", ErrorEnum.E_500.getErrorCode(), ErrorEnum.E_500.getErrorMsg());\n    }\n}\n```\n\n## 四、统一异常返回\n\n```\npackage com.hbq.cms.common.model;\n\n/**\n * @Author: hbq\n */\n@Data\n@NoArgsConstructor\n@AllArgsConstructor\npublic class Result<T> implements Serializable {\n\n    private T datas;\n    private Integer resp_code;\n    private String resp_msg;\n\n    public static <T> Result<T> succeed(String msg) {\n        return succeedWith(null, CodeEnum.SUCCESS.getCode(), msg);\n    }\n\n    public static <T> Result<T> succeed(T model, String msg) {\n        return succeedWith(model, CodeEnum.SUCCESS.getCode(), msg);\n    }\n\n    public static <T> Result<T> succeed(T model) {\n        return succeedWith(model, CodeEnum.SUCCESS.getCode(), \"\");\n    }\n\n    public static <T> Result<T> succeedWith(T datas, Integer code, String msg) {\n        return new Result<>(datas, code, msg);\n    }\n\n    public static <T> Result<T> failed(String msg) {\n        return failedWith(null, CodeEnum.ERROR.getCode(), msg);\n    }\n\n    public static <T> Result<T> failed(T model, String msg) {\n        return failedWith(model, CodeEnum.ERROR.getCode(), msg);\n    }\n\n    public static <T> Result<T> failedWith(T datas, Integer code, String msg) {\n        return new Result<>(datas, code, msg);\n    }\n\n}\n```\n\n","source":"_posts/BookMark/Spring Boot/Spring Boot & 拦截参数 & 全局异常处理 & 统一结果返回.md","raw":"---\ntitle: Spring Boot & Slf4j & logback 彩色日志打印（功能点：1、分运行环境生成日志文件 2、日志文件目录分类 3、日志文件按日输出）\ndate: 2022-09-05 17:09:05\ncategory_bar: true\ncategories: Spring Boot\ntags:\n- Spring Boot\n- 全局异常处理\n- 统一结果返回\n---\n# Spring Boot & 拦截参数 & 全局异常处理 & 统一结果返回\n---\n\n[toc]\n\n---\n\n## 一、直接在实体类字段上加上注解以拦截\n\n```javascript?linenums\n@NotBlank(message = \"请输入密码\")\n@Pattern(regexp = \"\\\\w{6,18}$\",message = \"账号应为6-18位字符,不含特殊符号，添加失败\")\nprivate String userAccount;\n@NotBlank(message = \"请输入密码\")\n@Pattern(regexp = \"^(?![0-9]+$)(?![a-zA-Z]+$)[0-9A-Za-z]{6,18}$\",message = \"账号应为6-18位字符,包含数字和字母，不含特殊符号，添加失败\")\nprivate String userPwd;\n```\n+ 常用注解\n| **注解**                                             | **适用的数据类型**                                           | **说明**                                                     |\n| ---------------------------------------------------- | ------------------------------------------------------------ | ------------------------------------------------------------ |\n| **@AssertFalse**                                     | [Boolean](https://so.csdn.net/so/search?q=Boolean&spm=1001.2101.3001.7020), boolean | 验证注解的元素值是false                                      |\n| **@AssertTrue**                                      | Boolean, boolean                                             | 验证注解的元素值是true                                       |\n| **@DecimalMax****（value=x）**                       | BigDecimal, BigInteger, String, byte,short, int, long and the respective wrappers of the primitive types. Additionally supported by HV: any sub-type of Number andCharSequence. | 验证注解的元素值小于等于@ DecimalMax指定的value值            |\n| **@DecimalMin****（value=x）**                       | BigDecimal, BigInteger, String, byte,short, int, long and the respective wrappers of the primitive types. Additionally supported by HV: any sub-type of Number andCharSequence. | 验证注解的元素值小于等于@ DecimalMin指定的value值            |\n| **@Digits(integer=****整数位数, fraction=小数位数)** | BigDecimal, BigInteger, String, byte,short, int, long and the respective wrappers of the primitive types. Additionally supported by HV: any sub-type of Number andCharSequence. | 验证注解的元素值的整数位数和小数位数上限                     |\n| **@Future**                                          | java.util.Date, java.util.Calendar; Additionally supported by HV, if the[Joda Time](http://joda-time.sourceforge.net/) date/time API is on the class path: any implementations ofReadablePartial andReadableInstant. | 验证注解的元素值（日期类型）比当前时间晚                     |\n| **@Max****（value=x）**                              | BigDecimal, BigInteger, byte, short,int, long and the respective wrappers of the primitive types. Additionally supported by HV: any sub-type ofCharSequence (the numeric value represented by the character sequence is evaluated), any sub-type of Number. | 验证注解的元素值小于等于@Max指定的value值                    |\n| **@Min****（value=x）**                              | BigDecimal, BigInteger, byte, short,int, long and the respective wrappers of the primitive types. Additionally supported by HV: any sub-type of CharSequence (the numeric value represented by the char sequence is evaluated), any sub-type of Number. | 验证注解的元素值大于等于@Min指定的value值                    |\n| **@NotNull**                                         | Any type                                                     | 验证注解的元素值不是null                                     |\n| **@Null**                                            | Any type                                                     | 验证注解的元素值是null                                       |\n| **@Past**                                            | java.util.Date, java.util.Calendar; Additionally supported by HV, if the[Joda Time](http://joda-time.sourceforge.net/) date/time API is on the class path: any implementations ofReadablePartial andReadableInstant. | 验证注解的元素值（日期类型）比当前时间早                     |\n| **@Pattern(regex=****正则表达式, flag=)**            | String. Additionally supported by HV: any sub-type of CharSequence. | 验证注解的元素值与指定的正则表达式匹配                       |\n| **@Size(min=****最小值, max=最大值)**                | String, Collection, Map and arrays. Additionally supported by HV: any sub-type of CharSequence. | 验证注解的元素值的在min和max（包含）指定区间之内，如字符长度、集合大小 |\n| **@Valid**                                           | Any non-primitive type（引用类型）                           | 验证关联的对象，如账户对象里有一个订单对象，指定验证订单对象 |\n| **@NotEmpty**                                        | `CharSequence`,`Collection`, `Map and Arrays`                | 验证注解的元素值不为null且不为空（字符串长度不为0、集合大小不为0） |\n| **@Range(min=****最小值, max=最大值)**               | `CharSequence, Collection, Map and Arrays,BigDecimal, BigInteger, CharSequence, byte, short, int, long and the respective wrappers of the primitive types` | 验证注解的元素值在最小值和最大值之间                         |\n| **@NotBlank**                                        | `CharSequence`                                               | 验证注解的元素值不为空（不为null、去除首位空格后长度为0），不同于@NotEmpty，@NotBlank只应用于字符串且在比较时会去除字符串的空格 |\n| **@Length(min=****下限, max=上限)**                  | `CharSequence`                                               | 验证注解的元素值长度在min和max区间内                         |\n| **@Email**                                           | `CharSequence`                                               | 验证注解的元素值是Email，也可以通过正则表达式和flag指定自定义的email格式 |\n\n## 二、配置拦截成功时的返回信息\n\n![image-20220720111716167](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720111716167.png)\n+ @Valid：表示加入拦截\n\n## 三、全局异常处理\n\n```\npackage com.hbq.cms.config;\n\n/**\n * @author: hbq\n * @description: 统一异常拦截\n * @date: 2017/10/24 10:31\n */\n@ControllerAdvice\n@ResponseBody\n@Slf4j\npublic class GlobalExceptionHandler {\n\t/**\n\t * 参数校验异常处理\n\t */\n    @ExceptionHandler(MethodArgumentNotValidException.class)\n    public Result handleMethodArgumentNotValid(MethodArgumentNotValidException e) {\n        log.error(\"校验失败：{}\\nat：{}\", e.getMessage(), Arrays.toString(e.getStackTrace()).replaceAll(\",\", \"\\n   \"));\n        String message = e.getFieldError().getDefaultMessage();\n        String errorDetail = message + \"(\" + e.getFieldError().getField() + \")\";\n        return Result.failed(errorDetail);\n    }\n\n    /**\n     * 常规异常处理\n     */\n    @ExceptionHandler(Throwable.class)\n    public Result handleGeneralException(Exception e) {\n        log.error(\"未知异常：{}\\nat：{}\", e.getMessage(), Arrays.toString(e.getStackTrace()).replaceAll(\",\", \"\\n   \"));\n        return Result.failedWith(\"\", ErrorEnum.E_500.getErrorCode(), ErrorEnum.E_500.getErrorMsg());\n    }\n}\n```\n\n## 四、统一异常返回\n\n```\npackage com.hbq.cms.common.model;\n\n/**\n * @Author: hbq\n */\n@Data\n@NoArgsConstructor\n@AllArgsConstructor\npublic class Result<T> implements Serializable {\n\n    private T datas;\n    private Integer resp_code;\n    private String resp_msg;\n\n    public static <T> Result<T> succeed(String msg) {\n        return succeedWith(null, CodeEnum.SUCCESS.getCode(), msg);\n    }\n\n    public static <T> Result<T> succeed(T model, String msg) {\n        return succeedWith(model, CodeEnum.SUCCESS.getCode(), msg);\n    }\n\n    public static <T> Result<T> succeed(T model) {\n        return succeedWith(model, CodeEnum.SUCCESS.getCode(), \"\");\n    }\n\n    public static <T> Result<T> succeedWith(T datas, Integer code, String msg) {\n        return new Result<>(datas, code, msg);\n    }\n\n    public static <T> Result<T> failed(String msg) {\n        return failedWith(null, CodeEnum.ERROR.getCode(), msg);\n    }\n\n    public static <T> Result<T> failed(T model, String msg) {\n        return failedWith(model, CodeEnum.ERROR.getCode(), msg);\n    }\n\n    public static <T> Result<T> failedWith(T datas, Integer code, String msg) {\n        return new Result<>(datas, code, msg);\n    }\n\n}\n```\n\n","slug":"BookMark/Spring Boot/Spring Boot & 拦截参数 & 全局异常处理 & 统一结果返回","published":1,"updated":"2022-09-06T07:08:49.893Z","_id":"cl7ptszol001jaba54jja7y2w","comments":1,"layout":"post","photos":[],"link":"","content":"<h1><span id=\"spring-boot-amp-拦截参数-amp-全局异常处理-amp-统一结果返回\">Spring Boot &amp; 拦截参数 &amp; 全局异常处理 &amp; 统一结果返回</span></h1><hr>\n<p>[toc]</p>\n<hr>\n<h2><span id=\"一-直接在实体类字段上加上注解以拦截\">一、直接在实体类字段上加上注解以拦截</span></h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">@NotBlank(message = &quot;请输入密码&quot;)<br>@Pattern(regexp = &quot;\\\\w&#123;6,18&#125;$&quot;,message = &quot;账号应为6-18位字符,不含特殊符号，添加失败&quot;)<br>private String userAccount;<br>@NotBlank(message = &quot;请输入密码&quot;)<br>@Pattern(regexp = &quot;^(?![0-9]+$)(?![a-zA-Z]+$)[0-9A-Za-z]&#123;6,18&#125;$&quot;,message = &quot;账号应为6-18位字符,包含数字和字母，不含特殊符号，添加失败&quot;)<br>private String userPwd;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>常用注解<table>\n<thead>\n<tr>\n<th><strong>注解</strong></th>\n<th><strong>适用的数据类型</strong></th>\n<th><strong>说明</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>@AssertFalse</strong></td>\n<td><a href=\"https://so.csdn.net/so/search?q=Boolean&spm=1001.2101.3001.7020\">Boolean</a>, boolean</td>\n<td>验证注解的元素值是false</td>\n</tr>\n<tr>\n<td><strong>@AssertTrue</strong></td>\n<td>Boolean, boolean</td>\n<td>验证注解的元素值是true</td>\n</tr>\n<tr>\n<td><strong>@DecimalMax****（value&#x3D;x）</strong></td>\n<td>BigDecimal, BigInteger, String, byte,short, int, long and the respective wrappers of the primitive types. Additionally supported by HV: any sub-type of Number andCharSequence.</td>\n<td>验证注解的元素值小于等于@ DecimalMax指定的value值</td>\n</tr>\n<tr>\n<td><strong>@DecimalMin****（value&#x3D;x）</strong></td>\n<td>BigDecimal, BigInteger, String, byte,short, int, long and the respective wrappers of the primitive types. Additionally supported by HV: any sub-type of Number andCharSequence.</td>\n<td>验证注解的元素值小于等于@ DecimalMin指定的value值</td>\n</tr>\n<tr>\n<td>**@Digits(integer&#x3D;**<strong>整数位数, fraction&#x3D;小数位数)</strong></td>\n<td>BigDecimal, BigInteger, String, byte,short, int, long and the respective wrappers of the primitive types. Additionally supported by HV: any sub-type of Number andCharSequence.</td>\n<td>验证注解的元素值的整数位数和小数位数上限</td>\n</tr>\n<tr>\n<td><strong>@Future</strong></td>\n<td>java.util.Date, java.util.Calendar; Additionally supported by HV, if the<a href=\"http://joda-time.sourceforge.net/\">Joda Time</a> date&#x2F;time API is on the class path: any implementations ofReadablePartial andReadableInstant.</td>\n<td>验证注解的元素值（日期类型）比当前时间晚</td>\n</tr>\n<tr>\n<td><strong>@Max****（value&#x3D;x）</strong></td>\n<td>BigDecimal, BigInteger, byte, short,int, long and the respective wrappers of the primitive types. Additionally supported by HV: any sub-type ofCharSequence (the numeric value represented by the character sequence is evaluated), any sub-type of Number.</td>\n<td>验证注解的元素值小于等于@Max指定的value值</td>\n</tr>\n<tr>\n<td><strong>@Min****（value&#x3D;x）</strong></td>\n<td>BigDecimal, BigInteger, byte, short,int, long and the respective wrappers of the primitive types. Additionally supported by HV: any sub-type of CharSequence (the numeric value represented by the char sequence is evaluated), any sub-type of Number.</td>\n<td>验证注解的元素值大于等于@Min指定的value值</td>\n</tr>\n<tr>\n<td><strong>@NotNull</strong></td>\n<td>Any type</td>\n<td>验证注解的元素值不是null</td>\n</tr>\n<tr>\n<td><strong>@Null</strong></td>\n<td>Any type</td>\n<td>验证注解的元素值是null</td>\n</tr>\n<tr>\n<td><strong>@Past</strong></td>\n<td>java.util.Date, java.util.Calendar; Additionally supported by HV, if the<a href=\"http://joda-time.sourceforge.net/\">Joda Time</a> date&#x2F;time API is on the class path: any implementations ofReadablePartial andReadableInstant.</td>\n<td>验证注解的元素值（日期类型）比当前时间早</td>\n</tr>\n<tr>\n<td>**@Pattern(regex&#x3D;**<strong>正则表达式, flag&#x3D;)</strong></td>\n<td>String. Additionally supported by HV: any sub-type of CharSequence.</td>\n<td>验证注解的元素值与指定的正则表达式匹配</td>\n</tr>\n<tr>\n<td>**@Size(min&#x3D;**<strong>最小值, max&#x3D;最大值)</strong></td>\n<td>String, Collection, Map and arrays. Additionally supported by HV: any sub-type of CharSequence.</td>\n<td>验证注解的元素值的在min和max（包含）指定区间之内，如字符长度、集合大小</td>\n</tr>\n<tr>\n<td><strong>@Valid</strong></td>\n<td>Any non-primitive type（引用类型）</td>\n<td>验证关联的对象，如账户对象里有一个订单对象，指定验证订单对象</td>\n</tr>\n<tr>\n<td><strong>@NotEmpty</strong></td>\n<td><code>CharSequence</code>,<code>Collection</code>, <code>Map and Arrays</code></td>\n<td>验证注解的元素值不为null且不为空（字符串长度不为0、集合大小不为0）</td>\n</tr>\n<tr>\n<td>**@Range(min&#x3D;**<strong>最小值, max&#x3D;最大值)</strong></td>\n<td><code>CharSequence, Collection, Map and Arrays,BigDecimal, BigInteger, CharSequence, byte, short, int, long and the respective wrappers of the primitive types</code></td>\n<td>验证注解的元素值在最小值和最大值之间</td>\n</tr>\n<tr>\n<td><strong>@NotBlank</strong></td>\n<td><code>CharSequence</code></td>\n<td>验证注解的元素值不为空（不为null、去除首位空格后长度为0），不同于@NotEmpty，@NotBlank只应用于字符串且在比较时会去除字符串的空格</td>\n</tr>\n<tr>\n<td>**@Length(min&#x3D;**<strong>下限, max&#x3D;上限)</strong></td>\n<td><code>CharSequence</code></td>\n<td>验证注解的元素值长度在min和max区间内</td>\n</tr>\n<tr>\n<td><strong>@Email</strong></td>\n<td><code>CharSequence</code></td>\n<td>验证注解的元素值是Email，也可以通过正则表达式和flag指定自定义的email格式</td>\n</tr>\n</tbody></table>\n</li>\n</ul>\n<h2><span id=\"二-配置拦截成功时的返回信息\">二、配置拦截成功时的返回信息</span></h2><p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720111716167.png\" alt=\"image-20220720111716167\"></p>\n<ul>\n<li>@Valid：表示加入拦截</li>\n</ul>\n<h2><span id=\"三-全局异常处理\">三、全局异常处理</span></h2><figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\">package com.hbq.cms.config;<br><br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * @author: hbq</span><br><span class=\"hljs-comment\"> * @description: 统一异常拦截</span><br><span class=\"hljs-comment\"> * @date: 2017/10/24 10:31</span><br><span class=\"hljs-comment\"> */</span><br>@ControllerAdvice<br>@ResponseBody<br>@Slf4j<br>public <span class=\"hljs-keyword\">class</span> GlobalExceptionHandler &#123;<br>\t<span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">\t * 参数校验异常处理</span><br><span class=\"hljs-comment\">\t */</span><br>    @<span class=\"hljs-constructor\">ExceptionHandler(MethodArgumentNotValidException.<span class=\"hljs-params\">class</span>)</span><br>    public Result handle<span class=\"hljs-constructor\">MethodArgumentNotValid(MethodArgumentNotValidException <span class=\"hljs-params\">e</span>)</span> &#123;<br>        log.error(<span class=\"hljs-string\">&quot;校验失败：&#123;&#125;\\nat：&#123;&#125;&quot;</span>, e.get<span class=\"hljs-constructor\">Message()</span>, <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">Arrays</span>.</span></span><span class=\"hljs-keyword\">to</span><span class=\"hljs-constructor\">String(<span class=\"hljs-params\">e</span>.<span class=\"hljs-params\">getStackTrace</span>()</span>).replace<span class=\"hljs-constructor\">All(<span class=\"hljs-string\">&quot;,&quot;</span>, <span class=\"hljs-string\">&quot;\\n   &quot;</span>)</span>);<br>        String message = e.get<span class=\"hljs-constructor\">FieldError()</span>.get<span class=\"hljs-constructor\">DefaultMessage()</span>;<br>        String errorDetail = message + <span class=\"hljs-string\">&quot;(&quot;</span> + e.get<span class=\"hljs-constructor\">FieldError()</span>.get<span class=\"hljs-constructor\">Field()</span> + <span class=\"hljs-string\">&quot;)&quot;</span>;<br>        return <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">Result</span>.</span></span>failed(errorDetail);<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 常规异常处理</span><br><span class=\"hljs-comment\">     */</span><br>    @<span class=\"hljs-constructor\">ExceptionHandler(Throwable.<span class=\"hljs-params\">class</span>)</span><br>    public Result handle<span class=\"hljs-constructor\">GeneralException(Exception <span class=\"hljs-params\">e</span>)</span> &#123;<br>        log.error(<span class=\"hljs-string\">&quot;未知异常：&#123;&#125;\\nat：&#123;&#125;&quot;</span>, e.get<span class=\"hljs-constructor\">Message()</span>, <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">Arrays</span>.</span></span><span class=\"hljs-keyword\">to</span><span class=\"hljs-constructor\">String(<span class=\"hljs-params\">e</span>.<span class=\"hljs-params\">getStackTrace</span>()</span>).replace<span class=\"hljs-constructor\">All(<span class=\"hljs-string\">&quot;,&quot;</span>, <span class=\"hljs-string\">&quot;\\n   &quot;</span>)</span>);<br>        return <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">Result</span>.</span></span>failed<span class=\"hljs-constructor\">With(<span class=\"hljs-string\">&quot;&quot;</span>, ErrorEnum.E_500.<span class=\"hljs-params\">getErrorCode</span>()</span>, <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">ErrorEnum</span>.</span><span class=\"hljs-module\"><span class=\"hljs-identifier\">E_500</span>.</span></span>get<span class=\"hljs-constructor\">ErrorMsg()</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2><span id=\"四-统一异常返回\">四、统一异常返回</span></h2><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs typescript\">package com.<span class=\"hljs-property\">hbq</span>.<span class=\"hljs-property\">cms</span>.<span class=\"hljs-property\">common</span>.<span class=\"hljs-property\">model</span>;<br><br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@Author</span>: hbq</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-meta\">@Data</span><br><span class=\"hljs-meta\">@NoArgsConstructor</span><br><span class=\"hljs-meta\">@AllArgsConstructor</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Result</span>&lt;T&gt; <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">Serializable</span> &#123;<br><br>    <span class=\"hljs-keyword\">private</span> T datas;<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-title class_\">Integer</span> resp_code;<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-title class_\">String</span> resp_msg;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> &lt;T&gt; <span class=\"hljs-title class_\">Result</span>&lt;T&gt; <span class=\"hljs-title function_\">succeed</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">String</span> msg</span>) &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">succeedWith</span>(<span class=\"hljs-literal\">null</span>, <span class=\"hljs-title class_\">CodeEnum</span>.<span class=\"hljs-property\">SUCCESS</span>.<span class=\"hljs-title function_\">getCode</span>(), msg);<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> &lt;T&gt; <span class=\"hljs-title class_\">Result</span>&lt;T&gt; <span class=\"hljs-title function_\">succeed</span>(<span class=\"hljs-params\">T model, <span class=\"hljs-built_in\">String</span> msg</span>) &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">succeedWith</span>(model, <span class=\"hljs-title class_\">CodeEnum</span>.<span class=\"hljs-property\">SUCCESS</span>.<span class=\"hljs-title function_\">getCode</span>(), msg);<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> &lt;T&gt; <span class=\"hljs-title class_\">Result</span>&lt;T&gt; <span class=\"hljs-title function_\">succeed</span>(<span class=\"hljs-params\">T model</span>) &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">succeedWith</span>(model, <span class=\"hljs-title class_\">CodeEnum</span>.<span class=\"hljs-property\">SUCCESS</span>.<span class=\"hljs-title function_\">getCode</span>(), <span class=\"hljs-string\">&quot;&quot;</span>);<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> &lt;T&gt; <span class=\"hljs-title class_\">Result</span>&lt;T&gt; <span class=\"hljs-title function_\">succeedWith</span>(<span class=\"hljs-params\">T datas, Integer code, <span class=\"hljs-built_in\">String</span> msg</span>) &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Result</span>&lt;&gt;(datas, code, msg);<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> &lt;T&gt; <span class=\"hljs-title class_\">Result</span>&lt;T&gt; <span class=\"hljs-title function_\">failed</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">String</span> msg</span>) &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">failedWith</span>(<span class=\"hljs-literal\">null</span>, <span class=\"hljs-title class_\">CodeEnum</span>.<span class=\"hljs-property\">ERROR</span>.<span class=\"hljs-title function_\">getCode</span>(), msg);<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> &lt;T&gt; <span class=\"hljs-title class_\">Result</span>&lt;T&gt; <span class=\"hljs-title function_\">failed</span>(<span class=\"hljs-params\">T model, <span class=\"hljs-built_in\">String</span> msg</span>) &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">failedWith</span>(model, <span class=\"hljs-title class_\">CodeEnum</span>.<span class=\"hljs-property\">ERROR</span>.<span class=\"hljs-title function_\">getCode</span>(), msg);<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> &lt;T&gt; <span class=\"hljs-title class_\">Result</span>&lt;T&gt; <span class=\"hljs-title function_\">failedWith</span>(<span class=\"hljs-params\">T datas, Integer code, <span class=\"hljs-built_in\">String</span> msg</span>) &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Result</span>&lt;&gt;(datas, code, msg);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>\n\n","site":{"data":{}},"wordcount":5200,"excerpt":"","more":"<h1 id=\"Spring-Boot-amp-拦截参数-amp-全局异常处理-amp-统一结果返回\"><a href=\"#Spring-Boot-amp-拦截参数-amp-全局异常处理-amp-统一结果返回\" class=\"headerlink\" title=\"Spring Boot &amp; 拦截参数 &amp; 全局异常处理 &amp; 统一结果返回\"></a>Spring Boot &amp; 拦截参数 &amp; 全局异常处理 &amp; 统一结果返回</h1><hr>\n<p>[toc]</p>\n<hr>\n<h2 id=\"一、直接在实体类字段上加上注解以拦截\"><a href=\"#一、直接在实体类字段上加上注解以拦截\" class=\"headerlink\" title=\"一、直接在实体类字段上加上注解以拦截\"></a>一、直接在实体类字段上加上注解以拦截</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">@NotBlank(message = &quot;请输入密码&quot;)<br>@Pattern(regexp = &quot;\\\\w&#123;6,18&#125;$&quot;,message = &quot;账号应为6-18位字符,不含特殊符号，添加失败&quot;)<br>private String userAccount;<br>@NotBlank(message = &quot;请输入密码&quot;)<br>@Pattern(regexp = &quot;^(?![0-9]+$)(?![a-zA-Z]+$)[0-9A-Za-z]&#123;6,18&#125;$&quot;,message = &quot;账号应为6-18位字符,包含数字和字母，不含特殊符号，添加失败&quot;)<br>private String userPwd;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>常用注解<table>\n<thead>\n<tr>\n<th><strong>注解</strong></th>\n<th><strong>适用的数据类型</strong></th>\n<th><strong>说明</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>@AssertFalse</strong></td>\n<td><a href=\"https://so.csdn.net/so/search?q=Boolean&spm=1001.2101.3001.7020\">Boolean</a>, boolean</td>\n<td>验证注解的元素值是false</td>\n</tr>\n<tr>\n<td><strong>@AssertTrue</strong></td>\n<td>Boolean, boolean</td>\n<td>验证注解的元素值是true</td>\n</tr>\n<tr>\n<td><strong>@DecimalMax****（value&#x3D;x）</strong></td>\n<td>BigDecimal, BigInteger, String, byte,short, int, long and the respective wrappers of the primitive types. Additionally supported by HV: any sub-type of Number andCharSequence.</td>\n<td>验证注解的元素值小于等于@ DecimalMax指定的value值</td>\n</tr>\n<tr>\n<td><strong>@DecimalMin****（value&#x3D;x）</strong></td>\n<td>BigDecimal, BigInteger, String, byte,short, int, long and the respective wrappers of the primitive types. Additionally supported by HV: any sub-type of Number andCharSequence.</td>\n<td>验证注解的元素值小于等于@ DecimalMin指定的value值</td>\n</tr>\n<tr>\n<td>**@Digits(integer&#x3D;**<strong>整数位数, fraction&#x3D;小数位数)</strong></td>\n<td>BigDecimal, BigInteger, String, byte,short, int, long and the respective wrappers of the primitive types. Additionally supported by HV: any sub-type of Number andCharSequence.</td>\n<td>验证注解的元素值的整数位数和小数位数上限</td>\n</tr>\n<tr>\n<td><strong>@Future</strong></td>\n<td>java.util.Date, java.util.Calendar; Additionally supported by HV, if the<a href=\"http://joda-time.sourceforge.net/\">Joda Time</a> date&#x2F;time API is on the class path: any implementations ofReadablePartial andReadableInstant.</td>\n<td>验证注解的元素值（日期类型）比当前时间晚</td>\n</tr>\n<tr>\n<td><strong>@Max****（value&#x3D;x）</strong></td>\n<td>BigDecimal, BigInteger, byte, short,int, long and the respective wrappers of the primitive types. Additionally supported by HV: any sub-type ofCharSequence (the numeric value represented by the character sequence is evaluated), any sub-type of Number.</td>\n<td>验证注解的元素值小于等于@Max指定的value值</td>\n</tr>\n<tr>\n<td><strong>@Min****（value&#x3D;x）</strong></td>\n<td>BigDecimal, BigInteger, byte, short,int, long and the respective wrappers of the primitive types. Additionally supported by HV: any sub-type of CharSequence (the numeric value represented by the char sequence is evaluated), any sub-type of Number.</td>\n<td>验证注解的元素值大于等于@Min指定的value值</td>\n</tr>\n<tr>\n<td><strong>@NotNull</strong></td>\n<td>Any type</td>\n<td>验证注解的元素值不是null</td>\n</tr>\n<tr>\n<td><strong>@Null</strong></td>\n<td>Any type</td>\n<td>验证注解的元素值是null</td>\n</tr>\n<tr>\n<td><strong>@Past</strong></td>\n<td>java.util.Date, java.util.Calendar; Additionally supported by HV, if the<a href=\"http://joda-time.sourceforge.net/\">Joda Time</a> date&#x2F;time API is on the class path: any implementations ofReadablePartial andReadableInstant.</td>\n<td>验证注解的元素值（日期类型）比当前时间早</td>\n</tr>\n<tr>\n<td>**@Pattern(regex&#x3D;**<strong>正则表达式, flag&#x3D;)</strong></td>\n<td>String. Additionally supported by HV: any sub-type of CharSequence.</td>\n<td>验证注解的元素值与指定的正则表达式匹配</td>\n</tr>\n<tr>\n<td>**@Size(min&#x3D;**<strong>最小值, max&#x3D;最大值)</strong></td>\n<td>String, Collection, Map and arrays. Additionally supported by HV: any sub-type of CharSequence.</td>\n<td>验证注解的元素值的在min和max（包含）指定区间之内，如字符长度、集合大小</td>\n</tr>\n<tr>\n<td><strong>@Valid</strong></td>\n<td>Any non-primitive type（引用类型）</td>\n<td>验证关联的对象，如账户对象里有一个订单对象，指定验证订单对象</td>\n</tr>\n<tr>\n<td><strong>@NotEmpty</strong></td>\n<td><code>CharSequence</code>,<code>Collection</code>, <code>Map and Arrays</code></td>\n<td>验证注解的元素值不为null且不为空（字符串长度不为0、集合大小不为0）</td>\n</tr>\n<tr>\n<td>**@Range(min&#x3D;**<strong>最小值, max&#x3D;最大值)</strong></td>\n<td><code>CharSequence, Collection, Map and Arrays,BigDecimal, BigInteger, CharSequence, byte, short, int, long and the respective wrappers of the primitive types</code></td>\n<td>验证注解的元素值在最小值和最大值之间</td>\n</tr>\n<tr>\n<td><strong>@NotBlank</strong></td>\n<td><code>CharSequence</code></td>\n<td>验证注解的元素值不为空（不为null、去除首位空格后长度为0），不同于@NotEmpty，@NotBlank只应用于字符串且在比较时会去除字符串的空格</td>\n</tr>\n<tr>\n<td>**@Length(min&#x3D;**<strong>下限, max&#x3D;上限)</strong></td>\n<td><code>CharSequence</code></td>\n<td>验证注解的元素值长度在min和max区间内</td>\n</tr>\n<tr>\n<td><strong>@Email</strong></td>\n<td><code>CharSequence</code></td>\n<td>验证注解的元素值是Email，也可以通过正则表达式和flag指定自定义的email格式</td>\n</tr>\n</tbody></table>\n</li>\n</ul>\n<h2 id=\"二、配置拦截成功时的返回信息\"><a href=\"#二、配置拦截成功时的返回信息\" class=\"headerlink\" title=\"二、配置拦截成功时的返回信息\"></a>二、配置拦截成功时的返回信息</h2><p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720111716167.png\" alt=\"image-20220720111716167\"></p>\n<ul>\n<li>@Valid：表示加入拦截</li>\n</ul>\n<h2 id=\"三、全局异常处理\"><a href=\"#三、全局异常处理\" class=\"headerlink\" title=\"三、全局异常处理\"></a>三、全局异常处理</h2><figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\">package com.hbq.cms.config;<br><br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * @author: hbq</span><br><span class=\"hljs-comment\"> * @description: 统一异常拦截</span><br><span class=\"hljs-comment\"> * @date: 2017/10/24 10:31</span><br><span class=\"hljs-comment\"> */</span><br>@ControllerAdvice<br>@ResponseBody<br>@Slf4j<br>public <span class=\"hljs-keyword\">class</span> GlobalExceptionHandler &#123;<br>\t<span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">\t * 参数校验异常处理</span><br><span class=\"hljs-comment\">\t */</span><br>    @<span class=\"hljs-constructor\">ExceptionHandler(MethodArgumentNotValidException.<span class=\"hljs-params\">class</span>)</span><br>    public Result handle<span class=\"hljs-constructor\">MethodArgumentNotValid(MethodArgumentNotValidException <span class=\"hljs-params\">e</span>)</span> &#123;<br>        log.error(<span class=\"hljs-string\">&quot;校验失败：&#123;&#125;\\nat：&#123;&#125;&quot;</span>, e.get<span class=\"hljs-constructor\">Message()</span>, <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">Arrays</span>.</span></span><span class=\"hljs-keyword\">to</span><span class=\"hljs-constructor\">String(<span class=\"hljs-params\">e</span>.<span class=\"hljs-params\">getStackTrace</span>()</span>).replace<span class=\"hljs-constructor\">All(<span class=\"hljs-string\">&quot;,&quot;</span>, <span class=\"hljs-string\">&quot;\\n   &quot;</span>)</span>);<br>        String message = e.get<span class=\"hljs-constructor\">FieldError()</span>.get<span class=\"hljs-constructor\">DefaultMessage()</span>;<br>        String errorDetail = message + <span class=\"hljs-string\">&quot;(&quot;</span> + e.get<span class=\"hljs-constructor\">FieldError()</span>.get<span class=\"hljs-constructor\">Field()</span> + <span class=\"hljs-string\">&quot;)&quot;</span>;<br>        return <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">Result</span>.</span></span>failed(errorDetail);<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 常规异常处理</span><br><span class=\"hljs-comment\">     */</span><br>    @<span class=\"hljs-constructor\">ExceptionHandler(Throwable.<span class=\"hljs-params\">class</span>)</span><br>    public Result handle<span class=\"hljs-constructor\">GeneralException(Exception <span class=\"hljs-params\">e</span>)</span> &#123;<br>        log.error(<span class=\"hljs-string\">&quot;未知异常：&#123;&#125;\\nat：&#123;&#125;&quot;</span>, e.get<span class=\"hljs-constructor\">Message()</span>, <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">Arrays</span>.</span></span><span class=\"hljs-keyword\">to</span><span class=\"hljs-constructor\">String(<span class=\"hljs-params\">e</span>.<span class=\"hljs-params\">getStackTrace</span>()</span>).replace<span class=\"hljs-constructor\">All(<span class=\"hljs-string\">&quot;,&quot;</span>, <span class=\"hljs-string\">&quot;\\n   &quot;</span>)</span>);<br>        return <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">Result</span>.</span></span>failed<span class=\"hljs-constructor\">With(<span class=\"hljs-string\">&quot;&quot;</span>, ErrorEnum.E_500.<span class=\"hljs-params\">getErrorCode</span>()</span>, <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">ErrorEnum</span>.</span><span class=\"hljs-module\"><span class=\"hljs-identifier\">E_500</span>.</span></span>get<span class=\"hljs-constructor\">ErrorMsg()</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"四、统一异常返回\"><a href=\"#四、统一异常返回\" class=\"headerlink\" title=\"四、统一异常返回\"></a>四、统一异常返回</h2><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs typescript\">package com.<span class=\"hljs-property\">hbq</span>.<span class=\"hljs-property\">cms</span>.<span class=\"hljs-property\">common</span>.<span class=\"hljs-property\">model</span>;<br><br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@Author</span>: hbq</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-meta\">@Data</span><br><span class=\"hljs-meta\">@NoArgsConstructor</span><br><span class=\"hljs-meta\">@AllArgsConstructor</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Result</span>&lt;T&gt; <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">Serializable</span> &#123;<br><br>    <span class=\"hljs-keyword\">private</span> T datas;<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-title class_\">Integer</span> resp_code;<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-title class_\">String</span> resp_msg;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> &lt;T&gt; <span class=\"hljs-title class_\">Result</span>&lt;T&gt; <span class=\"hljs-title function_\">succeed</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">String</span> msg</span>) &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">succeedWith</span>(<span class=\"hljs-literal\">null</span>, <span class=\"hljs-title class_\">CodeEnum</span>.<span class=\"hljs-property\">SUCCESS</span>.<span class=\"hljs-title function_\">getCode</span>(), msg);<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> &lt;T&gt; <span class=\"hljs-title class_\">Result</span>&lt;T&gt; <span class=\"hljs-title function_\">succeed</span>(<span class=\"hljs-params\">T model, <span class=\"hljs-built_in\">String</span> msg</span>) &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">succeedWith</span>(model, <span class=\"hljs-title class_\">CodeEnum</span>.<span class=\"hljs-property\">SUCCESS</span>.<span class=\"hljs-title function_\">getCode</span>(), msg);<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> &lt;T&gt; <span class=\"hljs-title class_\">Result</span>&lt;T&gt; <span class=\"hljs-title function_\">succeed</span>(<span class=\"hljs-params\">T model</span>) &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">succeedWith</span>(model, <span class=\"hljs-title class_\">CodeEnum</span>.<span class=\"hljs-property\">SUCCESS</span>.<span class=\"hljs-title function_\">getCode</span>(), <span class=\"hljs-string\">&quot;&quot;</span>);<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> &lt;T&gt; <span class=\"hljs-title class_\">Result</span>&lt;T&gt; <span class=\"hljs-title function_\">succeedWith</span>(<span class=\"hljs-params\">T datas, Integer code, <span class=\"hljs-built_in\">String</span> msg</span>) &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Result</span>&lt;&gt;(datas, code, msg);<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> &lt;T&gt; <span class=\"hljs-title class_\">Result</span>&lt;T&gt; <span class=\"hljs-title function_\">failed</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">String</span> msg</span>) &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">failedWith</span>(<span class=\"hljs-literal\">null</span>, <span class=\"hljs-title class_\">CodeEnum</span>.<span class=\"hljs-property\">ERROR</span>.<span class=\"hljs-title function_\">getCode</span>(), msg);<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> &lt;T&gt; <span class=\"hljs-title class_\">Result</span>&lt;T&gt; <span class=\"hljs-title function_\">failed</span>(<span class=\"hljs-params\">T model, <span class=\"hljs-built_in\">String</span> msg</span>) &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">failedWith</span>(model, <span class=\"hljs-title class_\">CodeEnum</span>.<span class=\"hljs-property\">ERROR</span>.<span class=\"hljs-title function_\">getCode</span>(), msg);<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> &lt;T&gt; <span class=\"hljs-title class_\">Result</span>&lt;T&gt; <span class=\"hljs-title function_\">failedWith</span>(<span class=\"hljs-params\">T datas, Integer code, <span class=\"hljs-built_in\">String</span> msg</span>) &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Result</span>&lt;&gt;(datas, code, msg);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>\n\n"},{"title":"Spring Boot & 支付宝支付（手机端，web端）","date":"2022-09-05T09:09:05.000Z","category_bar":true,"_content":"# Spring Boot & 支付宝支付（手机端，web端）\n---\n\n[toc]\n\n---\n\n## 一、Spring boot项目代码\n1. Controller\n```javascript?linenums\npackage com.hbq.teacher_plus.common.controller;\n\n/**\n * @author hbq\n * @createTime 2020/3/19 23:29\n */\n@Slf4j\n@RestController\npublic class AlipayController {\n\n    /**\n     * 支付宝完成回调页面(不可信回调)\n     */\n    @GetMapping(\"/return\")\n    @ResponseBody\n    private String alipayReturn(HttpServletRequest request) {\n\n        Map<String, String[]> parameterMap = request.getParameterMap();\n        Map<String, String> handleParams = AlipayUtil.handleParams(parameterMap);\n\n        // 这里的校验没有多大的意思,不可信,直接获取out_trade_no跳转到对应的payed controller也可\n        boolean rsaCheck = AlipayUtil.rsaCheck(handleParams);\n        if (rsaCheck){\n            System.out.println(\"验证通过\");\n        }else {\n            System.out.println(\"验证失败\");\n        }\n\n        // 获取订单号\n        String out_trade_no = handleParams.get(\"out_trade_no\");\n        System.out.println(\"out_trade_no:\" + out_trade_no);\n        // 这里一般都是 重定向 payed的controller, 然后携带对应的信息如:return \"redirect:/alipay/success?out_trade_no=\" + out_trade_no;\n        // payed的controller根据out_trade_no获取支付结果,并且给出页面提示\n\n        return \"支付完成\";\n    }\n\n\n    /**\n     * 支付宝完成结果异步的回调(可信回调)\n     * @param request\n     */\n    @PostMapping(\"/notify\")\n    @ResponseBody\n    private String alipayNotify(HttpServletRequest request) {\n\n        Map<String, String[]> parameterMap = request.getParameterMap();\n        Map<String, String> handleParams = AlipayUtil.handleParams(parameterMap);\n\n        boolean rsaCheck = AlipayUtil.rsaCheck(handleParams);\n        if (rsaCheck){\n            System.out.println(\"验证通过\");\n\n            // 处理业务逻辑,更改支付状态等骚操作\n            // ...\n        }else {\n            System.out.println(\"验证失败\");\n        }\n        return rsaCheck ? \"success\" : \"failure\";\n    }\n    @RequestMapping(\"/pay/phone\")\n    public String pay() {\n\n        AlipayVo alipayVo = new AlipayVo();\n        // String out_trade_no = UUID.randomUUID().toString().replace(\"-\", \"\");\n        String out_trade_no = AlipayUtil.get().nextId() + \"\";\n        System.out.println(\"out_trade_no:\" + out_trade_no);\n        // 设置订单单号,需要保证唯一性\n        alipayVo.setOut_trade_no(out_trade_no);\n        // 设置支付金额\n        alipayVo.setTotal_amount(\"0.01\");\n        // 设置支付标题\n        alipayVo.setSubject(\"houyu-test-title\");\n        // 设置订单有效时长(30分钟)\n        alipayVo.setTimeout_express(\"30m\");\n        alipayVo.setProduct_code(\"QUICK_WAP_WAY\");\n\n        // 对象转为json字符串\n        String json = JSONObject.toJSONString(alipayVo);\n\n        // 建立连接\n        AlipayClient client = new DefaultAlipayClient(AlipayConfig.URL, AlipayConfig.APPID, AlipayConfig.RSA_PRIVATE_KEY, AlipayConfig.FORMAT, AlipayConfig.CHARSET, AlipayConfig.ALIPAY_PUBLIC_KEY, AlipayConfig.SIGNTYPE);\n\n        // 创建请求\n        AlipayTradeWapPayRequest alipayTradeWapPayRequest = new AlipayTradeWapPayRequest();\n\n        // 设置异步通知地址\n        alipayTradeWapPayRequest.setNotifyUrl(AlipayConfig.notify_url);\n        // 设置对调地址,就是说支付成功之后回调你的页面,你可以继续进行你的业务操作,但是这个是不可信任的,需要根据notify_url这边的回调确定支付是否成功\n        alipayTradeWapPayRequest.setReturnUrl(AlipayConfig.return_url);\n\n        // 封装请求支付信息\n        alipayTradeWapPayRequest.setBizContent(json);\n\n        String pageString;\n        try {\n            pageString = client.pageExecute(alipayTradeWapPayRequest).getBody();\n        } catch (AlipayApiException e) {\n            pageString = \"request aliapy has error\";\n            e.printStackTrace();\n        }\n        return pageString;\n    }\n    @RequestMapping(\"/pay/web\")\n    public   void   doPost (HttpServletRequest httpRequest, HttpServletResponse httpResponse)   throws ServletException, IOException {\n        AlipayClient client = new DefaultAlipayClient(AlipayConfig.URL, AlipayConfig.APPID, AlipayConfig.RSA_PRIVATE_KEY, AlipayConfig.FORMAT, AlipayConfig.CHARSET, AlipayConfig.ALIPAY_PUBLIC_KEY, AlipayConfig.SIGNTYPE);\n        AlipayTradePagePayRequest alipayRequest =  new  AlipayTradePagePayRequest(); //创建API对应的request\n        alipayRequest.setReturnUrl( AlipayConfig.return_url );\n        alipayRequest.setNotifyUrl( AlipayConfig.notify_url ); //在公共参数中设置回跳和通知地址\n        AlipayVo alipayVo = new AlipayVo();\n        // String out_trade_no = UUID.randomUUID().toString().replace(\"-\", \"\");\n        String out_trade_no = AlipayUtil.get().nextId() + \"\";\n        System.out.println(\"out_trade_no:\" + out_trade_no);\n        // 设置订单单号,需要保证唯一性\n        alipayVo.setOut_trade_no(out_trade_no);\n        // 设置支付金额\n        alipayVo.setTotal_amount(\"0.01\");\n        // 设置支付标题\n        alipayVo.setSubject(\"hbq-test-title\");\n        // 设置订单有效时长(30分钟)\n        alipayVo.setTimeout_express(\"30m\");\n        alipayVo.setProduct_code(\"FAST_INSTANT_TRADE_PAY\");\n        //备注\n        alipayVo.setBody(\"Iphone6 16G\");\n\n        alipayVo.setPassback_params(\"merchantBizType%3d3C%26merchantBizNo%3d2016010101111\");\n        // 对象转为json字符串\n        String json = JSONObject.toJSONString(alipayVo);\n\n        alipayRequest.setBizContent(json); //填充业务参数*/\n        String form= \"\" ;\n        try  {\n            form = client.pageExecute(alipayRequest).getBody();  //调用SDK生成表单\n        }  catch  (AlipayApiException e) {\n            e.printStackTrace();\n        }\n        httpResponse.setContentType( \"text/html;charset=\"  + AlipayConfig.CHARSET);\n        httpResponse.getWriter().write(form); //直接将完整的表单html输出到页面\n        httpResponse.getWriter().flush();\n        httpResponse.getWriter().close();\n    }\n}\n```\n2. model\n```javascript?linenums\npackage com.hbq.teacher_plus.common.model;\n\nimport lombok.Data;\n\nimport java.io.Serializable;\n\n/**\n * @author hbq\n * @createTime 2020/3/19 23:29\n */\n@Data\npublic class AlipayVo implements Serializable {\n\n    /**\n     * 订单名称\n     */\n    private String subject;\n    /**\n     * 商户网站唯一订单号\n     */\n    private String out_trade_no;\n    /**\n     * 该笔订单允许的最晚付款时间\n     */\n    private String timeout_express;\n    /**\n     * 付款金额\n     */\n    private String total_amount;\n    /**\n     * 销售产品码，与支付宝签约的产品码名称\n     */\n    private String product_code;\n    /**\n     * \t具体描述信息。如果是多种商品，请将商品描述字符串累加传给body。\n     * */\n    private String body;\n    /**\n     *\n     * */\n    private String passback_params;\n    private String extend_params;\n    // getter and setter ....\n}\n```\n3. util\n```javascript?linenums\npackage com.hbq.teacher_plus.util;\n\nimport com.alipay.api.AlipayApiException;\nimport com.alipay.api.internal.util.AlipaySignature;\nimport com.hbq.teacher_plus.config.AlipayConfig;\n\nimport java.lang.management.ManagementFactory;\nimport java.net.InetAddress;\nimport java.net.NetworkInterface;\nimport java.util.HashMap;\nimport java.util.Map;\n\n/**\n * @author houyu\n * @createTime 2019/3/20 8:38\n */\npublic class AlipayUtil {\n\n    /**\n     * 处理请求参数\n     * @param requestParams\n     * @return\n     */\n    public static Map<String, String> handleParams(Map<String, String[]> requestParams){\n        Map<String, String> handleMap = new HashMap<>(requestParams.size());\n        for (Map.Entry<String, String[]> entry : requestParams.entrySet()) {\n            String key = entry.getKey();\n            String[] value = entry.getValue();\n            handleMap.put(key, join(value, \",\"));\n        }\n        return handleMap;\n    }\n\n    /**\n     * 数组转字符串  [\"1\", \"2\"]  ==> \"1,2\"\n     * @param os\n     * @param splitString\n     * @return\n     */\n    public static String join(Object[] os, String splitString){\n        String s = \"\";\n        if (os != null) {\n            StringBuilder sBuffer = new StringBuilder();\n            for (int i = 0; i < os.length; i++) {\n                sBuffer.append(os[i]).append(splitString);\n            }\n            s = sBuffer.deleteCharAt(sBuffer.length() - 1).toString();\n        }\n        return s;\n    }\n\n    /**\n     * 校验是否支付成功\n     * @param handleParams\n     * @return\n     */\n    public static boolean rsaCheck(Map<String, String> handleParams) {\n        boolean checkV1 = false;\n        try {\n            checkV1 = AlipaySignature.rsaCheckV1(handleParams, AlipayConfig.ALIPAY_PUBLIC_KEY, AlipayConfig.CHARSET, AlipayConfig.SIGNTYPE);\n        } catch (AlipayApiException e) {\n            e.printStackTrace();\n        }\n        return checkV1;\n    }\n\n    /** ---------------------------------------单例模式---------------------------------------*/\n    private static class SingletonHolder {\n        private static final AlipayUtil INSTANCE = new AlipayUtil();\n    }\n    public static AlipayUtil get() {\n        return SingletonHolder.INSTANCE;\n    }\n    /** ---------------------------------------单例模式---------------------------------------*/\n\n    /**  雪花算法生成ID,自带时间排序,一秒可以生成25万个ID左右 */\n\n    // 时间起始标记点，作为基准，一般取系统的最近时间（一旦确定不能变动）\n    private final static long twepoch = 1288834974657L;\n    // 机器标识位数\n    private final static long workerIdBits = 5L;\n    // 数据中心标识位数\n    private final static long datacenterIdBits = 5L;\n    // 机器ID最大值\n    private final static long maxWorkerId = -1L ^ (-1L << workerIdBits);\n    // 数据中心ID最大值\n    private final static long maxDatacenterId = -1L ^ (-1L << datacenterIdBits);\n    // 毫秒内自增位\n    private final static long sequenceBits = 12L;\n    // 机器ID偏左移12位\n    private final static long workerIdShift = sequenceBits;\n    // 数据中心ID左移17位\n    private final static long datacenterIdShift = sequenceBits + workerIdBits;\n    // 时间毫秒左移22位\n    private final static long timestampLeftShift = sequenceBits + workerIdBits + datacenterIdBits;\n\n    private final static long sequenceMask = -1L ^ (-1L << sequenceBits);\n    /* 上次生产id时间戳 */\n    private static long lastTimestamp = -1L;\n    // 0，并发控制\n    private long sequence = 0L;\n\n    private final long workerId;\n    // 数据标识id部分\n    private final long datacenterId;\n\n    public AlipayUtil() {\n        this.datacenterId = getDatacenterId(maxDatacenterId);\n        this.workerId = getMaxWorkerId(datacenterId, maxWorkerId);\n    }\n\n    /**\n     * @param workerId     工作机器ID\n     * @param datacenterId 序列号\n     */\n    public AlipayUtil(long workerId, long datacenterId) {\n        if (workerId > maxWorkerId || workerId < 0) {\n            throw new IllegalArgumentException(String.format(\"worker Id can't be greater than %d or less than 0\", maxWorkerId));\n        }\n        if (datacenterId > maxDatacenterId || datacenterId < 0) {\n            throw new IllegalArgumentException(String.format(\"datacenter Id can't be greater than %d or less than 0\", maxDatacenterId));\n        }\n        this.workerId = workerId;\n        this.datacenterId = datacenterId;\n    }\n\n    /**\n     * 获取下一个ID\n     *\n     * @return\n     */\n    public synchronized long nextId() {\n        long timestamp = timeGen();\n        if (timestamp < lastTimestamp) {\n            throw new RuntimeException(String.format(\"Clock moved backwards.  Refusing to generate id for %d milliseconds\", lastTimestamp - timestamp));\n        }\n\n        if (lastTimestamp == timestamp) {\n            // 当前毫秒内，则+1\n            sequence = (sequence + 1) & sequenceMask;\n            if (sequence == 0) {\n                // 当前毫秒内计数满了，则等待下一秒\n                timestamp = tilNextMillis(lastTimestamp);\n            }\n        } else {\n            sequence = 0L;\n        }\n        lastTimestamp = timestamp;\n        // ID偏移组合生成最终的ID，并返回ID\n        long nextId = ((timestamp - twepoch) << timestampLeftShift)\n                | (datacenterId << datacenterIdShift)\n                | (workerId << workerIdShift) | sequence;\n\n        return nextId;\n    }\n\n    private long tilNextMillis(final long lastTimestamp) {\n        long timestamp = this.timeGen();\n        while (timestamp <= lastTimestamp) {\n            timestamp = this.timeGen();\n        }\n        return timestamp;\n    }\n\n    private long timeGen() {\n        return System.currentTimeMillis();\n    }\n\n    /**\n     * <p>\n     * 获取 maxWorkerId\n     * </p>\n     */\n    protected static long getMaxWorkerId(long datacenterId, long maxWorkerId) {\n        StringBuffer mpid = new StringBuffer();\n        mpid.append(datacenterId);\n        String name = ManagementFactory.getRuntimeMXBean().getName();\n        if (!name.isEmpty()) {\n            /*\n             * GET jvmPid\n             */\n            mpid.append(name.split(\"@\")[0]);\n        }\n        /*\n         * MAC + PID 的 hashcode 获取16个低位\n         */\n        return (mpid.toString().hashCode() & 0xffff) % (maxWorkerId + 1);\n    }\n\n    /**\n     * <p>\n     * 数据标识id部分\n     * </p>\n     */\n    protected static long getDatacenterId(long maxDatacenterId) {\n        long id = 0L;\n        try {\n            InetAddress ip = InetAddress.getLocalHost();\n            NetworkInterface network = NetworkInterface.getByInetAddress(ip);\n            if (network == null) {\n                id = 1L;\n            } else {\n                byte[] mac = network.getHardwareAddress();\n                id = ((0x000000FF & (long) mac[mac.length - 1])\n                        | (0x0000FF00 & (((long) mac[mac.length - 2]) << 8))) >> 6;\n                id = id % (maxDatacenterId + 1);\n            }\n        } catch (Exception e) {\n            System.out.println(\" getDatacenterId: \" + e.getMessage());\n        }\n        return id;\n    }\n\n    /**  雪花算法生成ID,自带时间排序,一秒可以生成25万个ID左右 */\n\n}\n\n\n\n```\n3. config\n```javascript?linenums\npackage com.hbq.teacher_plus.config;\n/**\n * @author hbq\n * @createTime 2020/3/19 23:29\n */\npublic class AlipayConfig {\n    // 商户appid\n    public static String APPID = \"\";\n    public static String RSA_PRIVATE_KEY = \" \";\n    // 服务器异步通知页面路径 需http://或者https://格式的完整路径，不能加?id=123这类自定义参数，必须外网可以正常访问\n    public static String notify_url = \"\";\n    // 页面跳转同步通知页面路径 需http://或者https://格式的完整路径，不能加?id=123这类自定义参数，必须外网可以正常访问 商户可以自定义同步跳转地址\n    public static String return_url = \"\";\n    // 请求网关地址,沙箱是:https://openapi.alipaydev.com/gateway.do\n    public static String URL = \"https://openapi.alipaydev.com/gateway.do\";\n    // 编码\n    public static String CHARSET = \"UTF-8\";\n    // 返回格式\n    public static String FORMAT = \"json\";\n    // 支付宝公钥(在应用中可以获取)\n    public static String ALIPAY_PUBLIC_KEY = \"\";\n    // RSA2\n    public static String SIGNTYPE = \"RSA2\";\n\n}\n```\n## 二、支付宝沙箱环境配置\n### 1. 因为上面config中我们的参数都还没进行配置，所以现在来配置参数。\n![image-20220720153541257](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720153541257.png)\n### 2. 打开支付宝官网的沙箱位置：https://openhome.alipay.com/platform/appDaily.htm?tab=info\n### 3. 首先3和4的位置需要填写一个外网可以访问的网址如：`http://www.baidu.com`\n### 4. APPID，如图复制到“1”位置\n ![image-20220720153633436](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720153633436.png)\n ### 5. RSA_PRIVATE_KEY，应用私钥\n + 下载[公钥私钥生成工具](https://docs.open.alipay.com/291/105971)\n + 直接点击生成秘钥，复制下方的应用公钥回到沙箱配置，保存，复制私钥到项目中配置到“2”位置\n![image-20220720153643519](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720153643519.png)\n ![image-20220720153657035](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720153657035.png)\n\n###  6. ALIPAY_PUBLIC_KEY，支付宝公钥\n + 经过第5步保存公钥后可以看到支付宝公钥：\n![image-20220720153709137](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720153709137.png)\n\n### 7. 五项配置完成，启动项目，访问`http://localhost:8080/pay/web`。\n![image-20220720153721309](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720153721309.png)\n\n### 8. 下载沙箱支付宝，并通过沙箱账号登录，支付完成。\n![image-20220720153730304](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720153730304.png)\n","source":"_posts/BookMark/Spring Boot/Spring Boot & 支付宝支付（手机端，web端）.md","raw":"---\ntitle: Spring Boot & 支付宝支付（手机端，web端）\ndate: 2022-09-05 17:09:05\ncategory_bar: true\ncategories: Spring Boot\ntags:\n- Spring Boot\n- 支付宝支付\n---\n# Spring Boot & 支付宝支付（手机端，web端）\n---\n\n[toc]\n\n---\n\n## 一、Spring boot项目代码\n1. Controller\n```javascript?linenums\npackage com.hbq.teacher_plus.common.controller;\n\n/**\n * @author hbq\n * @createTime 2020/3/19 23:29\n */\n@Slf4j\n@RestController\npublic class AlipayController {\n\n    /**\n     * 支付宝完成回调页面(不可信回调)\n     */\n    @GetMapping(\"/return\")\n    @ResponseBody\n    private String alipayReturn(HttpServletRequest request) {\n\n        Map<String, String[]> parameterMap = request.getParameterMap();\n        Map<String, String> handleParams = AlipayUtil.handleParams(parameterMap);\n\n        // 这里的校验没有多大的意思,不可信,直接获取out_trade_no跳转到对应的payed controller也可\n        boolean rsaCheck = AlipayUtil.rsaCheck(handleParams);\n        if (rsaCheck){\n            System.out.println(\"验证通过\");\n        }else {\n            System.out.println(\"验证失败\");\n        }\n\n        // 获取订单号\n        String out_trade_no = handleParams.get(\"out_trade_no\");\n        System.out.println(\"out_trade_no:\" + out_trade_no);\n        // 这里一般都是 重定向 payed的controller, 然后携带对应的信息如:return \"redirect:/alipay/success?out_trade_no=\" + out_trade_no;\n        // payed的controller根据out_trade_no获取支付结果,并且给出页面提示\n\n        return \"支付完成\";\n    }\n\n\n    /**\n     * 支付宝完成结果异步的回调(可信回调)\n     * @param request\n     */\n    @PostMapping(\"/notify\")\n    @ResponseBody\n    private String alipayNotify(HttpServletRequest request) {\n\n        Map<String, String[]> parameterMap = request.getParameterMap();\n        Map<String, String> handleParams = AlipayUtil.handleParams(parameterMap);\n\n        boolean rsaCheck = AlipayUtil.rsaCheck(handleParams);\n        if (rsaCheck){\n            System.out.println(\"验证通过\");\n\n            // 处理业务逻辑,更改支付状态等骚操作\n            // ...\n        }else {\n            System.out.println(\"验证失败\");\n        }\n        return rsaCheck ? \"success\" : \"failure\";\n    }\n    @RequestMapping(\"/pay/phone\")\n    public String pay() {\n\n        AlipayVo alipayVo = new AlipayVo();\n        // String out_trade_no = UUID.randomUUID().toString().replace(\"-\", \"\");\n        String out_trade_no = AlipayUtil.get().nextId() + \"\";\n        System.out.println(\"out_trade_no:\" + out_trade_no);\n        // 设置订单单号,需要保证唯一性\n        alipayVo.setOut_trade_no(out_trade_no);\n        // 设置支付金额\n        alipayVo.setTotal_amount(\"0.01\");\n        // 设置支付标题\n        alipayVo.setSubject(\"houyu-test-title\");\n        // 设置订单有效时长(30分钟)\n        alipayVo.setTimeout_express(\"30m\");\n        alipayVo.setProduct_code(\"QUICK_WAP_WAY\");\n\n        // 对象转为json字符串\n        String json = JSONObject.toJSONString(alipayVo);\n\n        // 建立连接\n        AlipayClient client = new DefaultAlipayClient(AlipayConfig.URL, AlipayConfig.APPID, AlipayConfig.RSA_PRIVATE_KEY, AlipayConfig.FORMAT, AlipayConfig.CHARSET, AlipayConfig.ALIPAY_PUBLIC_KEY, AlipayConfig.SIGNTYPE);\n\n        // 创建请求\n        AlipayTradeWapPayRequest alipayTradeWapPayRequest = new AlipayTradeWapPayRequest();\n\n        // 设置异步通知地址\n        alipayTradeWapPayRequest.setNotifyUrl(AlipayConfig.notify_url);\n        // 设置对调地址,就是说支付成功之后回调你的页面,你可以继续进行你的业务操作,但是这个是不可信任的,需要根据notify_url这边的回调确定支付是否成功\n        alipayTradeWapPayRequest.setReturnUrl(AlipayConfig.return_url);\n\n        // 封装请求支付信息\n        alipayTradeWapPayRequest.setBizContent(json);\n\n        String pageString;\n        try {\n            pageString = client.pageExecute(alipayTradeWapPayRequest).getBody();\n        } catch (AlipayApiException e) {\n            pageString = \"request aliapy has error\";\n            e.printStackTrace();\n        }\n        return pageString;\n    }\n    @RequestMapping(\"/pay/web\")\n    public   void   doPost (HttpServletRequest httpRequest, HttpServletResponse httpResponse)   throws ServletException, IOException {\n        AlipayClient client = new DefaultAlipayClient(AlipayConfig.URL, AlipayConfig.APPID, AlipayConfig.RSA_PRIVATE_KEY, AlipayConfig.FORMAT, AlipayConfig.CHARSET, AlipayConfig.ALIPAY_PUBLIC_KEY, AlipayConfig.SIGNTYPE);\n        AlipayTradePagePayRequest alipayRequest =  new  AlipayTradePagePayRequest(); //创建API对应的request\n        alipayRequest.setReturnUrl( AlipayConfig.return_url );\n        alipayRequest.setNotifyUrl( AlipayConfig.notify_url ); //在公共参数中设置回跳和通知地址\n        AlipayVo alipayVo = new AlipayVo();\n        // String out_trade_no = UUID.randomUUID().toString().replace(\"-\", \"\");\n        String out_trade_no = AlipayUtil.get().nextId() + \"\";\n        System.out.println(\"out_trade_no:\" + out_trade_no);\n        // 设置订单单号,需要保证唯一性\n        alipayVo.setOut_trade_no(out_trade_no);\n        // 设置支付金额\n        alipayVo.setTotal_amount(\"0.01\");\n        // 设置支付标题\n        alipayVo.setSubject(\"hbq-test-title\");\n        // 设置订单有效时长(30分钟)\n        alipayVo.setTimeout_express(\"30m\");\n        alipayVo.setProduct_code(\"FAST_INSTANT_TRADE_PAY\");\n        //备注\n        alipayVo.setBody(\"Iphone6 16G\");\n\n        alipayVo.setPassback_params(\"merchantBizType%3d3C%26merchantBizNo%3d2016010101111\");\n        // 对象转为json字符串\n        String json = JSONObject.toJSONString(alipayVo);\n\n        alipayRequest.setBizContent(json); //填充业务参数*/\n        String form= \"\" ;\n        try  {\n            form = client.pageExecute(alipayRequest).getBody();  //调用SDK生成表单\n        }  catch  (AlipayApiException e) {\n            e.printStackTrace();\n        }\n        httpResponse.setContentType( \"text/html;charset=\"  + AlipayConfig.CHARSET);\n        httpResponse.getWriter().write(form); //直接将完整的表单html输出到页面\n        httpResponse.getWriter().flush();\n        httpResponse.getWriter().close();\n    }\n}\n```\n2. model\n```javascript?linenums\npackage com.hbq.teacher_plus.common.model;\n\nimport lombok.Data;\n\nimport java.io.Serializable;\n\n/**\n * @author hbq\n * @createTime 2020/3/19 23:29\n */\n@Data\npublic class AlipayVo implements Serializable {\n\n    /**\n     * 订单名称\n     */\n    private String subject;\n    /**\n     * 商户网站唯一订单号\n     */\n    private String out_trade_no;\n    /**\n     * 该笔订单允许的最晚付款时间\n     */\n    private String timeout_express;\n    /**\n     * 付款金额\n     */\n    private String total_amount;\n    /**\n     * 销售产品码，与支付宝签约的产品码名称\n     */\n    private String product_code;\n    /**\n     * \t具体描述信息。如果是多种商品，请将商品描述字符串累加传给body。\n     * */\n    private String body;\n    /**\n     *\n     * */\n    private String passback_params;\n    private String extend_params;\n    // getter and setter ....\n}\n```\n3. util\n```javascript?linenums\npackage com.hbq.teacher_plus.util;\n\nimport com.alipay.api.AlipayApiException;\nimport com.alipay.api.internal.util.AlipaySignature;\nimport com.hbq.teacher_plus.config.AlipayConfig;\n\nimport java.lang.management.ManagementFactory;\nimport java.net.InetAddress;\nimport java.net.NetworkInterface;\nimport java.util.HashMap;\nimport java.util.Map;\n\n/**\n * @author houyu\n * @createTime 2019/3/20 8:38\n */\npublic class AlipayUtil {\n\n    /**\n     * 处理请求参数\n     * @param requestParams\n     * @return\n     */\n    public static Map<String, String> handleParams(Map<String, String[]> requestParams){\n        Map<String, String> handleMap = new HashMap<>(requestParams.size());\n        for (Map.Entry<String, String[]> entry : requestParams.entrySet()) {\n            String key = entry.getKey();\n            String[] value = entry.getValue();\n            handleMap.put(key, join(value, \",\"));\n        }\n        return handleMap;\n    }\n\n    /**\n     * 数组转字符串  [\"1\", \"2\"]  ==> \"1,2\"\n     * @param os\n     * @param splitString\n     * @return\n     */\n    public static String join(Object[] os, String splitString){\n        String s = \"\";\n        if (os != null) {\n            StringBuilder sBuffer = new StringBuilder();\n            for (int i = 0; i < os.length; i++) {\n                sBuffer.append(os[i]).append(splitString);\n            }\n            s = sBuffer.deleteCharAt(sBuffer.length() - 1).toString();\n        }\n        return s;\n    }\n\n    /**\n     * 校验是否支付成功\n     * @param handleParams\n     * @return\n     */\n    public static boolean rsaCheck(Map<String, String> handleParams) {\n        boolean checkV1 = false;\n        try {\n            checkV1 = AlipaySignature.rsaCheckV1(handleParams, AlipayConfig.ALIPAY_PUBLIC_KEY, AlipayConfig.CHARSET, AlipayConfig.SIGNTYPE);\n        } catch (AlipayApiException e) {\n            e.printStackTrace();\n        }\n        return checkV1;\n    }\n\n    /** ---------------------------------------单例模式---------------------------------------*/\n    private static class SingletonHolder {\n        private static final AlipayUtil INSTANCE = new AlipayUtil();\n    }\n    public static AlipayUtil get() {\n        return SingletonHolder.INSTANCE;\n    }\n    /** ---------------------------------------单例模式---------------------------------------*/\n\n    /**  雪花算法生成ID,自带时间排序,一秒可以生成25万个ID左右 */\n\n    // 时间起始标记点，作为基准，一般取系统的最近时间（一旦确定不能变动）\n    private final static long twepoch = 1288834974657L;\n    // 机器标识位数\n    private final static long workerIdBits = 5L;\n    // 数据中心标识位数\n    private final static long datacenterIdBits = 5L;\n    // 机器ID最大值\n    private final static long maxWorkerId = -1L ^ (-1L << workerIdBits);\n    // 数据中心ID最大值\n    private final static long maxDatacenterId = -1L ^ (-1L << datacenterIdBits);\n    // 毫秒内自增位\n    private final static long sequenceBits = 12L;\n    // 机器ID偏左移12位\n    private final static long workerIdShift = sequenceBits;\n    // 数据中心ID左移17位\n    private final static long datacenterIdShift = sequenceBits + workerIdBits;\n    // 时间毫秒左移22位\n    private final static long timestampLeftShift = sequenceBits + workerIdBits + datacenterIdBits;\n\n    private final static long sequenceMask = -1L ^ (-1L << sequenceBits);\n    /* 上次生产id时间戳 */\n    private static long lastTimestamp = -1L;\n    // 0，并发控制\n    private long sequence = 0L;\n\n    private final long workerId;\n    // 数据标识id部分\n    private final long datacenterId;\n\n    public AlipayUtil() {\n        this.datacenterId = getDatacenterId(maxDatacenterId);\n        this.workerId = getMaxWorkerId(datacenterId, maxWorkerId);\n    }\n\n    /**\n     * @param workerId     工作机器ID\n     * @param datacenterId 序列号\n     */\n    public AlipayUtil(long workerId, long datacenterId) {\n        if (workerId > maxWorkerId || workerId < 0) {\n            throw new IllegalArgumentException(String.format(\"worker Id can't be greater than %d or less than 0\", maxWorkerId));\n        }\n        if (datacenterId > maxDatacenterId || datacenterId < 0) {\n            throw new IllegalArgumentException(String.format(\"datacenter Id can't be greater than %d or less than 0\", maxDatacenterId));\n        }\n        this.workerId = workerId;\n        this.datacenterId = datacenterId;\n    }\n\n    /**\n     * 获取下一个ID\n     *\n     * @return\n     */\n    public synchronized long nextId() {\n        long timestamp = timeGen();\n        if (timestamp < lastTimestamp) {\n            throw new RuntimeException(String.format(\"Clock moved backwards.  Refusing to generate id for %d milliseconds\", lastTimestamp - timestamp));\n        }\n\n        if (lastTimestamp == timestamp) {\n            // 当前毫秒内，则+1\n            sequence = (sequence + 1) & sequenceMask;\n            if (sequence == 0) {\n                // 当前毫秒内计数满了，则等待下一秒\n                timestamp = tilNextMillis(lastTimestamp);\n            }\n        } else {\n            sequence = 0L;\n        }\n        lastTimestamp = timestamp;\n        // ID偏移组合生成最终的ID，并返回ID\n        long nextId = ((timestamp - twepoch) << timestampLeftShift)\n                | (datacenterId << datacenterIdShift)\n                | (workerId << workerIdShift) | sequence;\n\n        return nextId;\n    }\n\n    private long tilNextMillis(final long lastTimestamp) {\n        long timestamp = this.timeGen();\n        while (timestamp <= lastTimestamp) {\n            timestamp = this.timeGen();\n        }\n        return timestamp;\n    }\n\n    private long timeGen() {\n        return System.currentTimeMillis();\n    }\n\n    /**\n     * <p>\n     * 获取 maxWorkerId\n     * </p>\n     */\n    protected static long getMaxWorkerId(long datacenterId, long maxWorkerId) {\n        StringBuffer mpid = new StringBuffer();\n        mpid.append(datacenterId);\n        String name = ManagementFactory.getRuntimeMXBean().getName();\n        if (!name.isEmpty()) {\n            /*\n             * GET jvmPid\n             */\n            mpid.append(name.split(\"@\")[0]);\n        }\n        /*\n         * MAC + PID 的 hashcode 获取16个低位\n         */\n        return (mpid.toString().hashCode() & 0xffff) % (maxWorkerId + 1);\n    }\n\n    /**\n     * <p>\n     * 数据标识id部分\n     * </p>\n     */\n    protected static long getDatacenterId(long maxDatacenterId) {\n        long id = 0L;\n        try {\n            InetAddress ip = InetAddress.getLocalHost();\n            NetworkInterface network = NetworkInterface.getByInetAddress(ip);\n            if (network == null) {\n                id = 1L;\n            } else {\n                byte[] mac = network.getHardwareAddress();\n                id = ((0x000000FF & (long) mac[mac.length - 1])\n                        | (0x0000FF00 & (((long) mac[mac.length - 2]) << 8))) >> 6;\n                id = id % (maxDatacenterId + 1);\n            }\n        } catch (Exception e) {\n            System.out.println(\" getDatacenterId: \" + e.getMessage());\n        }\n        return id;\n    }\n\n    /**  雪花算法生成ID,自带时间排序,一秒可以生成25万个ID左右 */\n\n}\n\n\n\n```\n3. config\n```javascript?linenums\npackage com.hbq.teacher_plus.config;\n/**\n * @author hbq\n * @createTime 2020/3/19 23:29\n */\npublic class AlipayConfig {\n    // 商户appid\n    public static String APPID = \"\";\n    public static String RSA_PRIVATE_KEY = \" \";\n    // 服务器异步通知页面路径 需http://或者https://格式的完整路径，不能加?id=123这类自定义参数，必须外网可以正常访问\n    public static String notify_url = \"\";\n    // 页面跳转同步通知页面路径 需http://或者https://格式的完整路径，不能加?id=123这类自定义参数，必须外网可以正常访问 商户可以自定义同步跳转地址\n    public static String return_url = \"\";\n    // 请求网关地址,沙箱是:https://openapi.alipaydev.com/gateway.do\n    public static String URL = \"https://openapi.alipaydev.com/gateway.do\";\n    // 编码\n    public static String CHARSET = \"UTF-8\";\n    // 返回格式\n    public static String FORMAT = \"json\";\n    // 支付宝公钥(在应用中可以获取)\n    public static String ALIPAY_PUBLIC_KEY = \"\";\n    // RSA2\n    public static String SIGNTYPE = \"RSA2\";\n\n}\n```\n## 二、支付宝沙箱环境配置\n### 1. 因为上面config中我们的参数都还没进行配置，所以现在来配置参数。\n![image-20220720153541257](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720153541257.png)\n### 2. 打开支付宝官网的沙箱位置：https://openhome.alipay.com/platform/appDaily.htm?tab=info\n### 3. 首先3和4的位置需要填写一个外网可以访问的网址如：`http://www.baidu.com`\n### 4. APPID，如图复制到“1”位置\n ![image-20220720153633436](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720153633436.png)\n ### 5. RSA_PRIVATE_KEY，应用私钥\n + 下载[公钥私钥生成工具](https://docs.open.alipay.com/291/105971)\n + 直接点击生成秘钥，复制下方的应用公钥回到沙箱配置，保存，复制私钥到项目中配置到“2”位置\n![image-20220720153643519](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720153643519.png)\n ![image-20220720153657035](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720153657035.png)\n\n###  6. ALIPAY_PUBLIC_KEY，支付宝公钥\n + 经过第5步保存公钥后可以看到支付宝公钥：\n![image-20220720153709137](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720153709137.png)\n\n### 7. 五项配置完成，启动项目，访问`http://localhost:8080/pay/web`。\n![image-20220720153721309](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720153721309.png)\n\n### 8. 下载沙箱支付宝，并通过沙箱账号登录，支付完成。\n![image-20220720153730304](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720153730304.png)\n","slug":"BookMark/Spring Boot/Spring Boot & 支付宝支付（手机端，web端）","published":1,"updated":"2022-09-06T07:08:49.868Z","_id":"cl7ptszom001kaba509tzgdfv","comments":1,"layout":"post","photos":[],"link":"","content":"<h1><span id=\"spring-boot-amp-支付宝支付手机端web端\">Spring Boot &amp; 支付宝支付（手机端，web端）</span></h1><hr>\n<p>[toc]</p>\n<hr>\n<h2><span id=\"一-spring-boot项目代码\">一、Spring boot项目代码</span></h2><ol>\n<li>Controller<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">package com.hbq.teacher_plus.common.controller;<br><br>/**<br> * @author hbq<br> * @createTime 2020/3/19 23:29<br> */<br>@Slf4j<br>@RestController<br>public class AlipayController &#123;<br><br>    /**<br>     * 支付宝完成回调页面(不可信回调)<br>     */<br>    @GetMapping(&quot;/return&quot;)<br>    @ResponseBody<br>    private String alipayReturn(HttpServletRequest request) &#123;<br><br>        Map&lt;String, String[]&gt; parameterMap = request.getParameterMap();<br>        Map&lt;String, String&gt; handleParams = AlipayUtil.handleParams(parameterMap);<br><br>        // 这里的校验没有多大的意思,不可信,直接获取out_trade_no跳转到对应的payed controller也可<br>        boolean rsaCheck = AlipayUtil.rsaCheck(handleParams);<br>        if (rsaCheck)&#123;<br>            System.out.println(&quot;验证通过&quot;);<br>        &#125;else &#123;<br>            System.out.println(&quot;验证失败&quot;);<br>        &#125;<br><br>        // 获取订单号<br>        String out_trade_no = handleParams.get(&quot;out_trade_no&quot;);<br>        System.out.println(&quot;out_trade_no:&quot; + out_trade_no);<br>        // 这里一般都是 重定向 payed的controller, 然后携带对应的信息如:return &quot;redirect:/alipay/success?out_trade_no=&quot; + out_trade_no;<br>        // payed的controller根据out_trade_no获取支付结果,并且给出页面提示<br><br>        return &quot;支付完成&quot;;<br>    &#125;<br><br><br>    /**<br>     * 支付宝完成结果异步的回调(可信回调)<br>     * @param request<br>     */<br>    @PostMapping(&quot;/notify&quot;)<br>    @ResponseBody<br>    private String alipayNotify(HttpServletRequest request) &#123;<br><br>        Map&lt;String, String[]&gt; parameterMap = request.getParameterMap();<br>        Map&lt;String, String&gt; handleParams = AlipayUtil.handleParams(parameterMap);<br><br>        boolean rsaCheck = AlipayUtil.rsaCheck(handleParams);<br>        if (rsaCheck)&#123;<br>            System.out.println(&quot;验证通过&quot;);<br><br>            // 处理业务逻辑,更改支付状态等骚操作<br>            // ...<br>        &#125;else &#123;<br>            System.out.println(&quot;验证失败&quot;);<br>        &#125;<br>        return rsaCheck ? &quot;success&quot; : &quot;failure&quot;;<br>    &#125;<br>    @RequestMapping(&quot;/pay/phone&quot;)<br>    public String pay() &#123;<br><br>        AlipayVo alipayVo = new AlipayVo();<br>        // String out_trade_no = UUID.randomUUID().toString().replace(&quot;-&quot;, &quot;&quot;);<br>        String out_trade_no = AlipayUtil.get().nextId() + &quot;&quot;;<br>        System.out.println(&quot;out_trade_no:&quot; + out_trade_no);<br>        // 设置订单单号,需要保证唯一性<br>        alipayVo.setOut_trade_no(out_trade_no);<br>        // 设置支付金额<br>        alipayVo.setTotal_amount(&quot;0.01&quot;);<br>        // 设置支付标题<br>        alipayVo.setSubject(&quot;houyu-test-title&quot;);<br>        // 设置订单有效时长(30分钟)<br>        alipayVo.setTimeout_express(&quot;30m&quot;);<br>        alipayVo.setProduct_code(&quot;QUICK_WAP_WAY&quot;);<br><br>        // 对象转为json字符串<br>        String json = JSONObject.toJSONString(alipayVo);<br><br>        // 建立连接<br>        AlipayClient client = new DefaultAlipayClient(AlipayConfig.URL, AlipayConfig.APPID, AlipayConfig.RSA_PRIVATE_KEY, AlipayConfig.FORMAT, AlipayConfig.CHARSET, AlipayConfig.ALIPAY_PUBLIC_KEY, AlipayConfig.SIGNTYPE);<br><br>        // 创建请求<br>        AlipayTradeWapPayRequest alipayTradeWapPayRequest = new AlipayTradeWapPayRequest();<br><br>        // 设置异步通知地址<br>        alipayTradeWapPayRequest.setNotifyUrl(AlipayConfig.notify_url);<br>        // 设置对调地址,就是说支付成功之后回调你的页面,你可以继续进行你的业务操作,但是这个是不可信任的,需要根据notify_url这边的回调确定支付是否成功<br>        alipayTradeWapPayRequest.setReturnUrl(AlipayConfig.return_url);<br><br>        // 封装请求支付信息<br>        alipayTradeWapPayRequest.setBizContent(json);<br><br>        String pageString;<br>        try &#123;<br>            pageString = client.pageExecute(alipayTradeWapPayRequest).getBody();<br>        &#125; catch (AlipayApiException e) &#123;<br>            pageString = &quot;request aliapy has error&quot;;<br>            e.printStackTrace();<br>        &#125;<br>        return pageString;<br>    &#125;<br>    @RequestMapping(&quot;/pay/web&quot;)<br>    public   void   doPost (HttpServletRequest httpRequest, HttpServletResponse httpResponse)   throws ServletException, IOException &#123;<br>        AlipayClient client = new DefaultAlipayClient(AlipayConfig.URL, AlipayConfig.APPID, AlipayConfig.RSA_PRIVATE_KEY, AlipayConfig.FORMAT, AlipayConfig.CHARSET, AlipayConfig.ALIPAY_PUBLIC_KEY, AlipayConfig.SIGNTYPE);<br>        AlipayTradePagePayRequest alipayRequest =  new  AlipayTradePagePayRequest(); //创建API对应的request<br>        alipayRequest.setReturnUrl( AlipayConfig.return_url );<br>        alipayRequest.setNotifyUrl( AlipayConfig.notify_url ); //在公共参数中设置回跳和通知地址<br>        AlipayVo alipayVo = new AlipayVo();<br>        // String out_trade_no = UUID.randomUUID().toString().replace(&quot;-&quot;, &quot;&quot;);<br>        String out_trade_no = AlipayUtil.get().nextId() + &quot;&quot;;<br>        System.out.println(&quot;out_trade_no:&quot; + out_trade_no);<br>        // 设置订单单号,需要保证唯一性<br>        alipayVo.setOut_trade_no(out_trade_no);<br>        // 设置支付金额<br>        alipayVo.setTotal_amount(&quot;0.01&quot;);<br>        // 设置支付标题<br>        alipayVo.setSubject(&quot;hbq-test-title&quot;);<br>        // 设置订单有效时长(30分钟)<br>        alipayVo.setTimeout_express(&quot;30m&quot;);<br>        alipayVo.setProduct_code(&quot;FAST_INSTANT_TRADE_PAY&quot;);<br>        //备注<br>        alipayVo.setBody(&quot;Iphone6 16G&quot;);<br><br>        alipayVo.setPassback_params(&quot;merchantBizType%3d3C%26merchantBizNo%3d2016010101111&quot;);<br>        // 对象转为json字符串<br>        String json = JSONObject.toJSONString(alipayVo);<br><br>        alipayRequest.setBizContent(json); //填充业务参数*/<br>        String form= &quot;&quot; ;<br>        try  &#123;<br>            form = client.pageExecute(alipayRequest).getBody();  //调用SDK生成表单<br>        &#125;  catch  (AlipayApiException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        httpResponse.setContentType( &quot;text/html;charset=&quot;  + AlipayConfig.CHARSET);<br>        httpResponse.getWriter().write(form); //直接将完整的表单html输出到页面<br>        httpResponse.getWriter().flush();<br>        httpResponse.getWriter().close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li>\n<li>model<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">package com.hbq.teacher_plus.common.model;<br><br>import lombok.Data;<br><br>import java.io.Serializable;<br><br>/**<br> * @author hbq<br> * @createTime 2020/3/19 23:29<br> */<br>@Data<br>public class AlipayVo implements Serializable &#123;<br><br>    /**<br>     * 订单名称<br>     */<br>    private String subject;<br>    /**<br>     * 商户网站唯一订单号<br>     */<br>    private String out_trade_no;<br>    /**<br>     * 该笔订单允许的最晚付款时间<br>     */<br>    private String timeout_express;<br>    /**<br>     * 付款金额<br>     */<br>    private String total_amount;<br>    /**<br>     * 销售产品码，与支付宝签约的产品码名称<br>     */<br>    private String product_code;<br>    /**<br>     * \t具体描述信息。如果是多种商品，请将商品描述字符串累加传给body。<br>     * */<br>    private String body;<br>    /**<br>     *<br>     * */<br>    private String passback_params;<br>    private String extend_params;<br>    // getter and setter ....<br>&#125;<br></code></pre></td></tr></table></figure></li>\n<li>util<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">package com.hbq.teacher_plus.util;<br><br>import com.alipay.api.AlipayApiException;<br>import com.alipay.api.internal.util.AlipaySignature;<br>import com.hbq.teacher_plus.config.AlipayConfig;<br><br>import java.lang.management.ManagementFactory;<br>import java.net.InetAddress;<br>import java.net.NetworkInterface;<br>import java.util.HashMap;<br>import java.util.Map;<br><br>/**<br> * @author houyu<br> * @createTime 2019/3/20 8:38<br> */<br>public class AlipayUtil &#123;<br><br>    /**<br>     * 处理请求参数<br>     * @param requestParams<br>     * @return<br>     */<br>    public static Map&lt;String, String&gt; handleParams(Map&lt;String, String[]&gt; requestParams)&#123;<br>        Map&lt;String, String&gt; handleMap = new HashMap&lt;&gt;(requestParams.size());<br>        for (Map.Entry&lt;String, String[]&gt; entry : requestParams.entrySet()) &#123;<br>            String key = entry.getKey();<br>            String[] value = entry.getValue();<br>            handleMap.put(key, join(value, &quot;,&quot;));<br>        &#125;<br>        return handleMap;<br>    &#125;<br><br>    /**<br>     * 数组转字符串  [&quot;1&quot;, &quot;2&quot;]  ==&gt; &quot;1,2&quot;<br>     * @param os<br>     * @param splitString<br>     * @return<br>     */<br>    public static String join(Object[] os, String splitString)&#123;<br>        String s = &quot;&quot;;<br>        if (os != null) &#123;<br>            StringBuilder sBuffer = new StringBuilder();<br>            for (int i = 0; i &lt; os.length; i++) &#123;<br>                sBuffer.append(os[i]).append(splitString);<br>            &#125;<br>            s = sBuffer.deleteCharAt(sBuffer.length() - 1).toString();<br>        &#125;<br>        return s;<br>    &#125;<br><br>    /**<br>     * 校验是否支付成功<br>     * @param handleParams<br>     * @return<br>     */<br>    public static boolean rsaCheck(Map&lt;String, String&gt; handleParams) &#123;<br>        boolean checkV1 = false;<br>        try &#123;<br>            checkV1 = AlipaySignature.rsaCheckV1(handleParams, AlipayConfig.ALIPAY_PUBLIC_KEY, AlipayConfig.CHARSET, AlipayConfig.SIGNTYPE);<br>        &#125; catch (AlipayApiException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        return checkV1;<br>    &#125;<br><br>    /** ---------------------------------------单例模式---------------------------------------*/<br>    private static class SingletonHolder &#123;<br>        private static final AlipayUtil INSTANCE = new AlipayUtil();<br>    &#125;<br>    public static AlipayUtil get() &#123;<br>        return SingletonHolder.INSTANCE;<br>    &#125;<br>    /** ---------------------------------------单例模式---------------------------------------*/<br><br>    /**  雪花算法生成ID,自带时间排序,一秒可以生成25万个ID左右 */<br><br>    // 时间起始标记点，作为基准，一般取系统的最近时间（一旦确定不能变动）<br>    private final static long twepoch = 1288834974657L;<br>    // 机器标识位数<br>    private final static long workerIdBits = 5L;<br>    // 数据中心标识位数<br>    private final static long datacenterIdBits = 5L;<br>    // 机器ID最大值<br>    private final static long maxWorkerId = -1L ^ (-1L &lt;&lt; workerIdBits);<br>    // 数据中心ID最大值<br>    private final static long maxDatacenterId = -1L ^ (-1L &lt;&lt; datacenterIdBits);<br>    // 毫秒内自增位<br>    private final static long sequenceBits = 12L;<br>    // 机器ID偏左移12位<br>    private final static long workerIdShift = sequenceBits;<br>    // 数据中心ID左移17位<br>    private final static long datacenterIdShift = sequenceBits + workerIdBits;<br>    // 时间毫秒左移22位<br>    private final static long timestampLeftShift = sequenceBits + workerIdBits + datacenterIdBits;<br><br>    private final static long sequenceMask = -1L ^ (-1L &lt;&lt; sequenceBits);<br>    /* 上次生产id时间戳 */<br>    private static long lastTimestamp = -1L;<br>    // 0，并发控制<br>    private long sequence = 0L;<br><br>    private final long workerId;<br>    // 数据标识id部分<br>    private final long datacenterId;<br><br>    public AlipayUtil() &#123;<br>        this.datacenterId = getDatacenterId(maxDatacenterId);<br>        this.workerId = getMaxWorkerId(datacenterId, maxWorkerId);<br>    &#125;<br><br>    /**<br>     * @param workerId     工作机器ID<br>     * @param datacenterId 序列号<br>     */<br>    public AlipayUtil(long workerId, long datacenterId) &#123;<br>        if (workerId &gt; maxWorkerId || workerId &lt; 0) &#123;<br>            throw new IllegalArgumentException(String.format(&quot;worker Id can&#x27;t be greater than %d or less than 0&quot;, maxWorkerId));<br>        &#125;<br>        if (datacenterId &gt; maxDatacenterId || datacenterId &lt; 0) &#123;<br>            throw new IllegalArgumentException(String.format(&quot;datacenter Id can&#x27;t be greater than %d or less than 0&quot;, maxDatacenterId));<br>        &#125;<br>        this.workerId = workerId;<br>        this.datacenterId = datacenterId;<br>    &#125;<br><br>    /**<br>     * 获取下一个ID<br>     *<br>     * @return<br>     */<br>    public synchronized long nextId() &#123;<br>        long timestamp = timeGen();<br>        if (timestamp &lt; lastTimestamp) &#123;<br>            throw new RuntimeException(String.format(&quot;Clock moved backwards.  Refusing to generate id for %d milliseconds&quot;, lastTimestamp - timestamp));<br>        &#125;<br><br>        if (lastTimestamp == timestamp) &#123;<br>            // 当前毫秒内，则+1<br>            sequence = (sequence + 1) &amp; sequenceMask;<br>            if (sequence == 0) &#123;<br>                // 当前毫秒内计数满了，则等待下一秒<br>                timestamp = tilNextMillis(lastTimestamp);<br>            &#125;<br>        &#125; else &#123;<br>            sequence = 0L;<br>        &#125;<br>        lastTimestamp = timestamp;<br>        // ID偏移组合生成最终的ID，并返回ID<br>        long nextId = ((timestamp - twepoch) &lt;&lt; timestampLeftShift)<br>                | (datacenterId &lt;&lt; datacenterIdShift)<br>                | (workerId &lt;&lt; workerIdShift) | sequence;<br><br>        return nextId;<br>    &#125;<br><br>    private long tilNextMillis(final long lastTimestamp) &#123;<br>        long timestamp = this.timeGen();<br>        while (timestamp &lt;= lastTimestamp) &#123;<br>            timestamp = this.timeGen();<br>        &#125;<br>        return timestamp;<br>    &#125;<br><br>    private long timeGen() &#123;<br>        return System.currentTimeMillis();<br>    &#125;<br><br>    /**<br>     * &lt;p&gt;<br>     * 获取 maxWorkerId<br>     * &lt;/p&gt;<br>     */<br>    protected static long getMaxWorkerId(long datacenterId, long maxWorkerId) &#123;<br>        StringBuffer mpid = new StringBuffer();<br>        mpid.append(datacenterId);<br>        String name = ManagementFactory.getRuntimeMXBean().getName();<br>        if (!name.isEmpty()) &#123;<br>            /*<br>             * GET jvmPid<br>             */<br>            mpid.append(name.split(&quot;@&quot;)[0]);<br>        &#125;<br>        /*<br>         * MAC + PID 的 hashcode 获取16个低位<br>         */<br>        return (mpid.toString().hashCode() &amp; 0xffff) % (maxWorkerId + 1);<br>    &#125;<br><br>    /**<br>     * &lt;p&gt;<br>     * 数据标识id部分<br>     * &lt;/p&gt;<br>     */<br>    protected static long getDatacenterId(long maxDatacenterId) &#123;<br>        long id = 0L;<br>        try &#123;<br>            InetAddress ip = InetAddress.getLocalHost();<br>            NetworkInterface network = NetworkInterface.getByInetAddress(ip);<br>            if (network == null) &#123;<br>                id = 1L;<br>            &#125; else &#123;<br>                byte[] mac = network.getHardwareAddress();<br>                id = ((0x000000FF &amp; (long) mac[mac.length - 1])<br>                        | (0x0000FF00 &amp; (((long) mac[mac.length - 2]) &lt;&lt; 8))) &gt;&gt; 6;<br>                id = id % (maxDatacenterId + 1);<br>            &#125;<br>        &#125; catch (Exception e) &#123;<br>            System.out.println(&quot; getDatacenterId: &quot; + e.getMessage());<br>        &#125;<br>        return id;<br>    &#125;<br><br>    /**  雪花算法生成ID,自带时间排序,一秒可以生成25万个ID左右 */<br><br>&#125;<br><br><br><br></code></pre></td></tr></table></figure></li>\n<li>config<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">package com.hbq.teacher_plus.config;<br>/**<br> * @author hbq<br> * @createTime 2020/3/19 23:29<br> */<br>public class AlipayConfig &#123;<br>    // 商户appid<br>    public static String APPID = &quot;&quot;;<br>    public static String RSA_PRIVATE_KEY = &quot; &quot;;<br>    // 服务器异步通知页面路径 需http://或者https://格式的完整路径，不能加?id=123这类自定义参数，必须外网可以正常访问<br>    public static String notify_url = &quot;&quot;;<br>    // 页面跳转同步通知页面路径 需http://或者https://格式的完整路径，不能加?id=123这类自定义参数，必须外网可以正常访问 商户可以自定义同步跳转地址<br>    public static String return_url = &quot;&quot;;<br>    // 请求网关地址,沙箱是:https://openapi.alipaydev.com/gateway.do<br>    public static String URL = &quot;https://openapi.alipaydev.com/gateway.do&quot;;<br>    // 编码<br>    public static String CHARSET = &quot;UTF-8&quot;;<br>    // 返回格式<br>    public static String FORMAT = &quot;json&quot;;<br>    // 支付宝公钥(在应用中可以获取)<br>    public static String ALIPAY_PUBLIC_KEY = &quot;&quot;;<br>    // RSA2<br>    public static String SIGNTYPE = &quot;RSA2&quot;;<br><br>&#125;<br></code></pre></td></tr></table></figure></li>\n</ol>\n<h2><span id=\"二-支付宝沙箱环境配置\">二、支付宝沙箱环境配置</span></h2><h3><span id=\"1-因为上面config中我们的参数都还没进行配置所以现在来配置参数\">1. 因为上面config中我们的参数都还没进行配置，所以现在来配置参数。</span></h3><p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720153541257.png\" alt=\"image-20220720153541257\"></p>\n<h3><span id=\"2-打开支付宝官网的沙箱位置httpsopenhomealipaycomplatformappdailyhtmtabinfo\">2. 打开支付宝官网的沙箱位置：</span></h3><h3><span id=\"3-首先3和4的位置需要填写一个外网可以访问的网址如httpwwwbaiducom\">3. 首先3和4的位置需要填写一个外网可以访问的网址如：<code>http://www.baidu.com</code></span></h3><h3><span id=\"4-appid如图复制到1位置\">4. APPID，如图复制到“1”位置</span></h3><p> <img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720153633436.png\" alt=\"image-20220720153633436\"></p>\n<h3><span id=\"5-rsa_private_key应用私钥\">5. RSA_PRIVATE_KEY，应用私钥</span></h3><ul>\n<li>下载<a href=\"https://docs.open.alipay.com/291/105971\">公钥私钥生成工具</a></li>\n<li>直接点击生成秘钥，复制下方的应用公钥回到沙箱配置，保存，复制私钥到项目中配置到“2”位置<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720153643519.png\" alt=\"image-20220720153643519\"><br> <img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720153657035.png\" alt=\"image-20220720153657035\"></li>\n</ul>\n<h3><span id=\"6-alipay_public_key支付宝公钥\">6. ALIPAY_PUBLIC_KEY，支付宝公钥</span></h3><ul>\n<li>经过第5步保存公钥后可以看到支付宝公钥：<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720153709137.png\" alt=\"image-20220720153709137\"></li>\n</ul>\n<h3><span id=\"7-五项配置完成启动项目访问httplocalhost8080payweb\">7. 五项配置完成，启动项目，访问<code>http://localhost:8080/pay/web</code>。</span></h3><p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720153721309.png\" alt=\"image-20220720153721309\"></p>\n<h3><span id=\"8-下载沙箱支付宝并通过沙箱账号登录支付完成\">8. 下载沙箱支付宝，并通过沙箱账号登录，支付完成。</span></h3><p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720153730304.png\" alt=\"image-20220720153730304\"></p>\n","site":{"data":{}},"wordcount":12660,"excerpt":"","more":"<h1 id=\"Spring-Boot-amp-支付宝支付（手机端，web端）\"><a href=\"#Spring-Boot-amp-支付宝支付（手机端，web端）\" class=\"headerlink\" title=\"Spring Boot &amp; 支付宝支付（手机端，web端）\"></a>Spring Boot &amp; 支付宝支付（手机端，web端）</h1><hr>\n<p>[toc]</p>\n<hr>\n<h2 id=\"一、Spring-boot项目代码\"><a href=\"#一、Spring-boot项目代码\" class=\"headerlink\" title=\"一、Spring boot项目代码\"></a>一、Spring boot项目代码</h2><ol>\n<li>Controller<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">package com.hbq.teacher_plus.common.controller;<br><br>/**<br> * @author hbq<br> * @createTime 2020/3/19 23:29<br> */<br>@Slf4j<br>@RestController<br>public class AlipayController &#123;<br><br>    /**<br>     * 支付宝完成回调页面(不可信回调)<br>     */<br>    @GetMapping(&quot;/return&quot;)<br>    @ResponseBody<br>    private String alipayReturn(HttpServletRequest request) &#123;<br><br>        Map&lt;String, String[]&gt; parameterMap = request.getParameterMap();<br>        Map&lt;String, String&gt; handleParams = AlipayUtil.handleParams(parameterMap);<br><br>        // 这里的校验没有多大的意思,不可信,直接获取out_trade_no跳转到对应的payed controller也可<br>        boolean rsaCheck = AlipayUtil.rsaCheck(handleParams);<br>        if (rsaCheck)&#123;<br>            System.out.println(&quot;验证通过&quot;);<br>        &#125;else &#123;<br>            System.out.println(&quot;验证失败&quot;);<br>        &#125;<br><br>        // 获取订单号<br>        String out_trade_no = handleParams.get(&quot;out_trade_no&quot;);<br>        System.out.println(&quot;out_trade_no:&quot; + out_trade_no);<br>        // 这里一般都是 重定向 payed的controller, 然后携带对应的信息如:return &quot;redirect:/alipay/success?out_trade_no=&quot; + out_trade_no;<br>        // payed的controller根据out_trade_no获取支付结果,并且给出页面提示<br><br>        return &quot;支付完成&quot;;<br>    &#125;<br><br><br>    /**<br>     * 支付宝完成结果异步的回调(可信回调)<br>     * @param request<br>     */<br>    @PostMapping(&quot;/notify&quot;)<br>    @ResponseBody<br>    private String alipayNotify(HttpServletRequest request) &#123;<br><br>        Map&lt;String, String[]&gt; parameterMap = request.getParameterMap();<br>        Map&lt;String, String&gt; handleParams = AlipayUtil.handleParams(parameterMap);<br><br>        boolean rsaCheck = AlipayUtil.rsaCheck(handleParams);<br>        if (rsaCheck)&#123;<br>            System.out.println(&quot;验证通过&quot;);<br><br>            // 处理业务逻辑,更改支付状态等骚操作<br>            // ...<br>        &#125;else &#123;<br>            System.out.println(&quot;验证失败&quot;);<br>        &#125;<br>        return rsaCheck ? &quot;success&quot; : &quot;failure&quot;;<br>    &#125;<br>    @RequestMapping(&quot;/pay/phone&quot;)<br>    public String pay() &#123;<br><br>        AlipayVo alipayVo = new AlipayVo();<br>        // String out_trade_no = UUID.randomUUID().toString().replace(&quot;-&quot;, &quot;&quot;);<br>        String out_trade_no = AlipayUtil.get().nextId() + &quot;&quot;;<br>        System.out.println(&quot;out_trade_no:&quot; + out_trade_no);<br>        // 设置订单单号,需要保证唯一性<br>        alipayVo.setOut_trade_no(out_trade_no);<br>        // 设置支付金额<br>        alipayVo.setTotal_amount(&quot;0.01&quot;);<br>        // 设置支付标题<br>        alipayVo.setSubject(&quot;houyu-test-title&quot;);<br>        // 设置订单有效时长(30分钟)<br>        alipayVo.setTimeout_express(&quot;30m&quot;);<br>        alipayVo.setProduct_code(&quot;QUICK_WAP_WAY&quot;);<br><br>        // 对象转为json字符串<br>        String json = JSONObject.toJSONString(alipayVo);<br><br>        // 建立连接<br>        AlipayClient client = new DefaultAlipayClient(AlipayConfig.URL, AlipayConfig.APPID, AlipayConfig.RSA_PRIVATE_KEY, AlipayConfig.FORMAT, AlipayConfig.CHARSET, AlipayConfig.ALIPAY_PUBLIC_KEY, AlipayConfig.SIGNTYPE);<br><br>        // 创建请求<br>        AlipayTradeWapPayRequest alipayTradeWapPayRequest = new AlipayTradeWapPayRequest();<br><br>        // 设置异步通知地址<br>        alipayTradeWapPayRequest.setNotifyUrl(AlipayConfig.notify_url);<br>        // 设置对调地址,就是说支付成功之后回调你的页面,你可以继续进行你的业务操作,但是这个是不可信任的,需要根据notify_url这边的回调确定支付是否成功<br>        alipayTradeWapPayRequest.setReturnUrl(AlipayConfig.return_url);<br><br>        // 封装请求支付信息<br>        alipayTradeWapPayRequest.setBizContent(json);<br><br>        String pageString;<br>        try &#123;<br>            pageString = client.pageExecute(alipayTradeWapPayRequest).getBody();<br>        &#125; catch (AlipayApiException e) &#123;<br>            pageString = &quot;request aliapy has error&quot;;<br>            e.printStackTrace();<br>        &#125;<br>        return pageString;<br>    &#125;<br>    @RequestMapping(&quot;/pay/web&quot;)<br>    public   void   doPost (HttpServletRequest httpRequest, HttpServletResponse httpResponse)   throws ServletException, IOException &#123;<br>        AlipayClient client = new DefaultAlipayClient(AlipayConfig.URL, AlipayConfig.APPID, AlipayConfig.RSA_PRIVATE_KEY, AlipayConfig.FORMAT, AlipayConfig.CHARSET, AlipayConfig.ALIPAY_PUBLIC_KEY, AlipayConfig.SIGNTYPE);<br>        AlipayTradePagePayRequest alipayRequest =  new  AlipayTradePagePayRequest(); //创建API对应的request<br>        alipayRequest.setReturnUrl( AlipayConfig.return_url );<br>        alipayRequest.setNotifyUrl( AlipayConfig.notify_url ); //在公共参数中设置回跳和通知地址<br>        AlipayVo alipayVo = new AlipayVo();<br>        // String out_trade_no = UUID.randomUUID().toString().replace(&quot;-&quot;, &quot;&quot;);<br>        String out_trade_no = AlipayUtil.get().nextId() + &quot;&quot;;<br>        System.out.println(&quot;out_trade_no:&quot; + out_trade_no);<br>        // 设置订单单号,需要保证唯一性<br>        alipayVo.setOut_trade_no(out_trade_no);<br>        // 设置支付金额<br>        alipayVo.setTotal_amount(&quot;0.01&quot;);<br>        // 设置支付标题<br>        alipayVo.setSubject(&quot;hbq-test-title&quot;);<br>        // 设置订单有效时长(30分钟)<br>        alipayVo.setTimeout_express(&quot;30m&quot;);<br>        alipayVo.setProduct_code(&quot;FAST_INSTANT_TRADE_PAY&quot;);<br>        //备注<br>        alipayVo.setBody(&quot;Iphone6 16G&quot;);<br><br>        alipayVo.setPassback_params(&quot;merchantBizType%3d3C%26merchantBizNo%3d2016010101111&quot;);<br>        // 对象转为json字符串<br>        String json = JSONObject.toJSONString(alipayVo);<br><br>        alipayRequest.setBizContent(json); //填充业务参数*/<br>        String form= &quot;&quot; ;<br>        try  &#123;<br>            form = client.pageExecute(alipayRequest).getBody();  //调用SDK生成表单<br>        &#125;  catch  (AlipayApiException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        httpResponse.setContentType( &quot;text/html;charset=&quot;  + AlipayConfig.CHARSET);<br>        httpResponse.getWriter().write(form); //直接将完整的表单html输出到页面<br>        httpResponse.getWriter().flush();<br>        httpResponse.getWriter().close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li>\n<li>model<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">package com.hbq.teacher_plus.common.model;<br><br>import lombok.Data;<br><br>import java.io.Serializable;<br><br>/**<br> * @author hbq<br> * @createTime 2020/3/19 23:29<br> */<br>@Data<br>public class AlipayVo implements Serializable &#123;<br><br>    /**<br>     * 订单名称<br>     */<br>    private String subject;<br>    /**<br>     * 商户网站唯一订单号<br>     */<br>    private String out_trade_no;<br>    /**<br>     * 该笔订单允许的最晚付款时间<br>     */<br>    private String timeout_express;<br>    /**<br>     * 付款金额<br>     */<br>    private String total_amount;<br>    /**<br>     * 销售产品码，与支付宝签约的产品码名称<br>     */<br>    private String product_code;<br>    /**<br>     * \t具体描述信息。如果是多种商品，请将商品描述字符串累加传给body。<br>     * */<br>    private String body;<br>    /**<br>     *<br>     * */<br>    private String passback_params;<br>    private String extend_params;<br>    // getter and setter ....<br>&#125;<br></code></pre></td></tr></table></figure></li>\n<li>util<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">package com.hbq.teacher_plus.util;<br><br>import com.alipay.api.AlipayApiException;<br>import com.alipay.api.internal.util.AlipaySignature;<br>import com.hbq.teacher_plus.config.AlipayConfig;<br><br>import java.lang.management.ManagementFactory;<br>import java.net.InetAddress;<br>import java.net.NetworkInterface;<br>import java.util.HashMap;<br>import java.util.Map;<br><br>/**<br> * @author houyu<br> * @createTime 2019/3/20 8:38<br> */<br>public class AlipayUtil &#123;<br><br>    /**<br>     * 处理请求参数<br>     * @param requestParams<br>     * @return<br>     */<br>    public static Map&lt;String, String&gt; handleParams(Map&lt;String, String[]&gt; requestParams)&#123;<br>        Map&lt;String, String&gt; handleMap = new HashMap&lt;&gt;(requestParams.size());<br>        for (Map.Entry&lt;String, String[]&gt; entry : requestParams.entrySet()) &#123;<br>            String key = entry.getKey();<br>            String[] value = entry.getValue();<br>            handleMap.put(key, join(value, &quot;,&quot;));<br>        &#125;<br>        return handleMap;<br>    &#125;<br><br>    /**<br>     * 数组转字符串  [&quot;1&quot;, &quot;2&quot;]  ==&gt; &quot;1,2&quot;<br>     * @param os<br>     * @param splitString<br>     * @return<br>     */<br>    public static String join(Object[] os, String splitString)&#123;<br>        String s = &quot;&quot;;<br>        if (os != null) &#123;<br>            StringBuilder sBuffer = new StringBuilder();<br>            for (int i = 0; i &lt; os.length; i++) &#123;<br>                sBuffer.append(os[i]).append(splitString);<br>            &#125;<br>            s = sBuffer.deleteCharAt(sBuffer.length() - 1).toString();<br>        &#125;<br>        return s;<br>    &#125;<br><br>    /**<br>     * 校验是否支付成功<br>     * @param handleParams<br>     * @return<br>     */<br>    public static boolean rsaCheck(Map&lt;String, String&gt; handleParams) &#123;<br>        boolean checkV1 = false;<br>        try &#123;<br>            checkV1 = AlipaySignature.rsaCheckV1(handleParams, AlipayConfig.ALIPAY_PUBLIC_KEY, AlipayConfig.CHARSET, AlipayConfig.SIGNTYPE);<br>        &#125; catch (AlipayApiException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        return checkV1;<br>    &#125;<br><br>    /** ---------------------------------------单例模式---------------------------------------*/<br>    private static class SingletonHolder &#123;<br>        private static final AlipayUtil INSTANCE = new AlipayUtil();<br>    &#125;<br>    public static AlipayUtil get() &#123;<br>        return SingletonHolder.INSTANCE;<br>    &#125;<br>    /** ---------------------------------------单例模式---------------------------------------*/<br><br>    /**  雪花算法生成ID,自带时间排序,一秒可以生成25万个ID左右 */<br><br>    // 时间起始标记点，作为基准，一般取系统的最近时间（一旦确定不能变动）<br>    private final static long twepoch = 1288834974657L;<br>    // 机器标识位数<br>    private final static long workerIdBits = 5L;<br>    // 数据中心标识位数<br>    private final static long datacenterIdBits = 5L;<br>    // 机器ID最大值<br>    private final static long maxWorkerId = -1L ^ (-1L &lt;&lt; workerIdBits);<br>    // 数据中心ID最大值<br>    private final static long maxDatacenterId = -1L ^ (-1L &lt;&lt; datacenterIdBits);<br>    // 毫秒内自增位<br>    private final static long sequenceBits = 12L;<br>    // 机器ID偏左移12位<br>    private final static long workerIdShift = sequenceBits;<br>    // 数据中心ID左移17位<br>    private final static long datacenterIdShift = sequenceBits + workerIdBits;<br>    // 时间毫秒左移22位<br>    private final static long timestampLeftShift = sequenceBits + workerIdBits + datacenterIdBits;<br><br>    private final static long sequenceMask = -1L ^ (-1L &lt;&lt; sequenceBits);<br>    /* 上次生产id时间戳 */<br>    private static long lastTimestamp = -1L;<br>    // 0，并发控制<br>    private long sequence = 0L;<br><br>    private final long workerId;<br>    // 数据标识id部分<br>    private final long datacenterId;<br><br>    public AlipayUtil() &#123;<br>        this.datacenterId = getDatacenterId(maxDatacenterId);<br>        this.workerId = getMaxWorkerId(datacenterId, maxWorkerId);<br>    &#125;<br><br>    /**<br>     * @param workerId     工作机器ID<br>     * @param datacenterId 序列号<br>     */<br>    public AlipayUtil(long workerId, long datacenterId) &#123;<br>        if (workerId &gt; maxWorkerId || workerId &lt; 0) &#123;<br>            throw new IllegalArgumentException(String.format(&quot;worker Id can&#x27;t be greater than %d or less than 0&quot;, maxWorkerId));<br>        &#125;<br>        if (datacenterId &gt; maxDatacenterId || datacenterId &lt; 0) &#123;<br>            throw new IllegalArgumentException(String.format(&quot;datacenter Id can&#x27;t be greater than %d or less than 0&quot;, maxDatacenterId));<br>        &#125;<br>        this.workerId = workerId;<br>        this.datacenterId = datacenterId;<br>    &#125;<br><br>    /**<br>     * 获取下一个ID<br>     *<br>     * @return<br>     */<br>    public synchronized long nextId() &#123;<br>        long timestamp = timeGen();<br>        if (timestamp &lt; lastTimestamp) &#123;<br>            throw new RuntimeException(String.format(&quot;Clock moved backwards.  Refusing to generate id for %d milliseconds&quot;, lastTimestamp - timestamp));<br>        &#125;<br><br>        if (lastTimestamp == timestamp) &#123;<br>            // 当前毫秒内，则+1<br>            sequence = (sequence + 1) &amp; sequenceMask;<br>            if (sequence == 0) &#123;<br>                // 当前毫秒内计数满了，则等待下一秒<br>                timestamp = tilNextMillis(lastTimestamp);<br>            &#125;<br>        &#125; else &#123;<br>            sequence = 0L;<br>        &#125;<br>        lastTimestamp = timestamp;<br>        // ID偏移组合生成最终的ID，并返回ID<br>        long nextId = ((timestamp - twepoch) &lt;&lt; timestampLeftShift)<br>                | (datacenterId &lt;&lt; datacenterIdShift)<br>                | (workerId &lt;&lt; workerIdShift) | sequence;<br><br>        return nextId;<br>    &#125;<br><br>    private long tilNextMillis(final long lastTimestamp) &#123;<br>        long timestamp = this.timeGen();<br>        while (timestamp &lt;= lastTimestamp) &#123;<br>            timestamp = this.timeGen();<br>        &#125;<br>        return timestamp;<br>    &#125;<br><br>    private long timeGen() &#123;<br>        return System.currentTimeMillis();<br>    &#125;<br><br>    /**<br>     * &lt;p&gt;<br>     * 获取 maxWorkerId<br>     * &lt;/p&gt;<br>     */<br>    protected static long getMaxWorkerId(long datacenterId, long maxWorkerId) &#123;<br>        StringBuffer mpid = new StringBuffer();<br>        mpid.append(datacenterId);<br>        String name = ManagementFactory.getRuntimeMXBean().getName();<br>        if (!name.isEmpty()) &#123;<br>            /*<br>             * GET jvmPid<br>             */<br>            mpid.append(name.split(&quot;@&quot;)[0]);<br>        &#125;<br>        /*<br>         * MAC + PID 的 hashcode 获取16个低位<br>         */<br>        return (mpid.toString().hashCode() &amp; 0xffff) % (maxWorkerId + 1);<br>    &#125;<br><br>    /**<br>     * &lt;p&gt;<br>     * 数据标识id部分<br>     * &lt;/p&gt;<br>     */<br>    protected static long getDatacenterId(long maxDatacenterId) &#123;<br>        long id = 0L;<br>        try &#123;<br>            InetAddress ip = InetAddress.getLocalHost();<br>            NetworkInterface network = NetworkInterface.getByInetAddress(ip);<br>            if (network == null) &#123;<br>                id = 1L;<br>            &#125; else &#123;<br>                byte[] mac = network.getHardwareAddress();<br>                id = ((0x000000FF &amp; (long) mac[mac.length - 1])<br>                        | (0x0000FF00 &amp; (((long) mac[mac.length - 2]) &lt;&lt; 8))) &gt;&gt; 6;<br>                id = id % (maxDatacenterId + 1);<br>            &#125;<br>        &#125; catch (Exception e) &#123;<br>            System.out.println(&quot; getDatacenterId: &quot; + e.getMessage());<br>        &#125;<br>        return id;<br>    &#125;<br><br>    /**  雪花算法生成ID,自带时间排序,一秒可以生成25万个ID左右 */<br><br>&#125;<br><br><br><br></code></pre></td></tr></table></figure></li>\n<li>config<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">package com.hbq.teacher_plus.config;<br>/**<br> * @author hbq<br> * @createTime 2020/3/19 23:29<br> */<br>public class AlipayConfig &#123;<br>    // 商户appid<br>    public static String APPID = &quot;&quot;;<br>    public static String RSA_PRIVATE_KEY = &quot; &quot;;<br>    // 服务器异步通知页面路径 需http://或者https://格式的完整路径，不能加?id=123这类自定义参数，必须外网可以正常访问<br>    public static String notify_url = &quot;&quot;;<br>    // 页面跳转同步通知页面路径 需http://或者https://格式的完整路径，不能加?id=123这类自定义参数，必须外网可以正常访问 商户可以自定义同步跳转地址<br>    public static String return_url = &quot;&quot;;<br>    // 请求网关地址,沙箱是:https://openapi.alipaydev.com/gateway.do<br>    public static String URL = &quot;https://openapi.alipaydev.com/gateway.do&quot;;<br>    // 编码<br>    public static String CHARSET = &quot;UTF-8&quot;;<br>    // 返回格式<br>    public static String FORMAT = &quot;json&quot;;<br>    // 支付宝公钥(在应用中可以获取)<br>    public static String ALIPAY_PUBLIC_KEY = &quot;&quot;;<br>    // RSA2<br>    public static String SIGNTYPE = &quot;RSA2&quot;;<br><br>&#125;<br></code></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"二、支付宝沙箱环境配置\"><a href=\"#二、支付宝沙箱环境配置\" class=\"headerlink\" title=\"二、支付宝沙箱环境配置\"></a>二、支付宝沙箱环境配置</h2><h3 id=\"1-因为上面config中我们的参数都还没进行配置，所以现在来配置参数。\"><a href=\"#1-因为上面config中我们的参数都还没进行配置，所以现在来配置参数。\" class=\"headerlink\" title=\"1. 因为上面config中我们的参数都还没进行配置，所以现在来配置参数。\"></a>1. 因为上面config中我们的参数都还没进行配置，所以现在来配置参数。</h3><p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720153541257.png\" alt=\"image-20220720153541257\"></p>\n<h3 id=\"2-打开支付宝官网的沙箱位置：https-openhome-alipay-com-platform-appDaily-htm-tab-info\"><a href=\"#2-打开支付宝官网的沙箱位置：https-openhome-alipay-com-platform-appDaily-htm-tab-info\" class=\"headerlink\" title=\"2. 打开支付宝官网的沙箱位置：https://openhome.alipay.com/platform/appDaily.htm?tab=info\"></a>2. 打开支付宝官网的沙箱位置：<a href=\"https://openhome.alipay.com/platform/appDaily.htm?tab=info\">https://openhome.alipay.com/platform/appDaily.htm?tab=info</a></h3><h3 id=\"3-首先3和4的位置需要填写一个外网可以访问的网址如：http-www-baidu-com\"><a href=\"#3-首先3和4的位置需要填写一个外网可以访问的网址如：http-www-baidu-com\" class=\"headerlink\" title=\"3. 首先3和4的位置需要填写一个外网可以访问的网址如：http://www.baidu.com\"></a>3. 首先3和4的位置需要填写一个外网可以访问的网址如：<code>http://www.baidu.com</code></h3><h3 id=\"4-APPID，如图复制到“1”位置\"><a href=\"#4-APPID，如图复制到“1”位置\" class=\"headerlink\" title=\"4. APPID，如图复制到“1”位置\"></a>4. APPID，如图复制到“1”位置</h3><p> <img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720153633436.png\" alt=\"image-20220720153633436\"></p>\n<h3 id=\"5-RSA-PRIVATE-KEY，应用私钥\"><a href=\"#5-RSA-PRIVATE-KEY，应用私钥\" class=\"headerlink\" title=\"5. RSA_PRIVATE_KEY，应用私钥\"></a>5. RSA_PRIVATE_KEY，应用私钥</h3><ul>\n<li>下载<a href=\"https://docs.open.alipay.com/291/105971\">公钥私钥生成工具</a></li>\n<li>直接点击生成秘钥，复制下方的应用公钥回到沙箱配置，保存，复制私钥到项目中配置到“2”位置<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720153643519.png\" alt=\"image-20220720153643519\"><br> <img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720153657035.png\" alt=\"image-20220720153657035\"></li>\n</ul>\n<h3 id=\"6-ALIPAY-PUBLIC-KEY，支付宝公钥\"><a href=\"#6-ALIPAY-PUBLIC-KEY，支付宝公钥\" class=\"headerlink\" title=\"6. ALIPAY_PUBLIC_KEY，支付宝公钥\"></a>6. ALIPAY_PUBLIC_KEY，支付宝公钥</h3><ul>\n<li>经过第5步保存公钥后可以看到支付宝公钥：<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720153709137.png\" alt=\"image-20220720153709137\"></li>\n</ul>\n<h3 id=\"7-五项配置完成，启动项目，访问http-localhost-8080-pay-web。\"><a href=\"#7-五项配置完成，启动项目，访问http-localhost-8080-pay-web。\" class=\"headerlink\" title=\"7. 五项配置完成，启动项目，访问http://localhost:8080/pay/web。\"></a>7. 五项配置完成，启动项目，访问<code>http://localhost:8080/pay/web</code>。</h3><p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720153721309.png\" alt=\"image-20220720153721309\"></p>\n<h3 id=\"8-下载沙箱支付宝，并通过沙箱账号登录，支付完成。\"><a href=\"#8-下载沙箱支付宝，并通过沙箱账号登录，支付完成。\" class=\"headerlink\" title=\"8. 下载沙箱支付宝，并通过沙箱账号登录，支付完成。\"></a>8. 下载沙箱支付宝，并通过沙箱账号登录，支付完成。</h3><p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720153730304.png\" alt=\"image-20220720153730304\"></p>\n"},{"title":"Spring Boot & 支付宝支付（手机端，web端）","date":"2022-09-05T09:09:05.000Z","category_bar":true,"_content":"# Spring Boot & 自定义注解 实现从配置文件自选择redis db数据源\n\n---\n\n[toc]\n\n---\n\n### 一、 新建注解\n\n```\n@Target({ElementType.FIELD,ElementType.CONSTRUCTOR}) //声明应用在属性上\n@Retention(RetentionPolicy.RUNTIME) //运行期生效\n@Component\npublic @interface DB {\n    String value() default \"\";\n}\n```\n\n@Target：\n\n+ 说明了Annotation所修饰的对象范围：Annotation可被用于 packages、types（类、接口、枚举、Annotation类型）、类型成员（方法、构造方法、成员变量、枚举值）、方法参数和本地变量（如循环变量、catch参数）。在Annotation类型的声明中使用了target可更加明晰其修饰的目标。\n\n+ 作用：用于描述注解的使用范围（即：被描述的注解可以用在什么地方）\n\n+ 取值(ElementType)有：\n  1. CONSTRUCTOR:用于描述构造器\n  2. FIELD:用于描述域\n  3. LOCAL_VARIABLE:用于描述局部变量\n  4. METHOD:用于描述方法\n  5. PACKAGE:用于描述包\n  6. PARAMETER:用于描述参数\n  7. TYPE:用于描述类、接口(包括注解类型) 或enum声明\n\n@Retention：\n\n+ @Retention定义了该Annotation被保留的时间长短：某些Annotation仅出现在源代码中，而被编译器丢弃；而另一些却被编译在class文件中；编译在class文件中的Annotation可能会被虚拟机忽略，而另一些在class被装载时将被读取（请注意并不影响class的执行，因为Annotation与class在使用上是被分离的）。使用这个meta-Annotation可以对 Annotation的“生命周期”限制。\n+ 作用：表示需要在什么级别保存该注释信息，用于描述注解的生命周期（即：被描述的注解在什么范围内有效）\n+ 取值（RetentionPoicy）有：\n  1. SOURCE:在源文件中有效（即源文件保留）\n  2. CLASS:在class文件中有效（即class保留）\n  3. RUNTIME:在运行时有效（即运行时保留）\n\n### 二、通过Bean后置处理器自定义注解配置redis\n\n```\n@Component\npublic class RedisBeanPostProcessor implements BeanPostProcessor {\n    @Resource\n    Environment environment;\n    @Value(\"${spring.redis.host}\")\n    private String host;\n    @Value(\"${spring.redis.password}\")\n    private String password;\n    @Value(\"${spring.redis.port}\")\n    private int port;\n\n    @SneakyThrows\n    @Override\n    public Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException {\n        /**\n         * 利用Java反射机制注入属性\n         */\n        Field[] declaredFields = bean.getClass().getDeclaredFields();\n        for (Field declaredField : declaredFields) {\n            DB annotation = declaredField.getAnnotation(DB.class);\n            if (null == annotation) {\n                continue;\n            }\n            //从环境变量中获取值\n            String dbKey = ObjectUtil.defaultIfEmpty(annotation.value(), \"${spring.redis.database}\");\n            String dbIndex = environment.resolvePlaceholders(dbKey);\n            RedisUtils redisUtils = new RedisUtils(host, password, port, dbIndex);\n            try {\n                declaredField.setAccessible(true);\n                declaredField.set(bean, redisUtils);\n            } catch (IllegalAccessException e) {\n                e.printStackTrace();\n            }\n        }\n        return bean;\n    }\n\n    @Override\n    public Object postProcessAfterInitialization(Object o, String s) throws BeansException {\n        return o;\n    }\n}\n```\n\n![image-20220720104437102](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720104437102.png)\n\n### 三、RedisUtil\n\n```\n@Component\n@Data\n@Slf4j\n@NoArgsConstructor\npublic class RedisUtils {\n\t@Value(\"${spring.redis.host}\")\n\tprivate String host;\n\n\t@Value(\"${spring.redis.password}\")\n\tprivate String password;\n\n\t@Value(\"${spring.redis.port}\")\n\tprivate int port;\n\n\t@Value(\"${spring.redis.database}\")\n\tprivate int database;\n\n\t@Resource\n\tprivate StringRedisTemplate stringRedisTemplate;\n\n\tpublic RedisUtils(String host, String password, int port, String database) {\n\t\tthis.host = host;\n\t\tthis.password = password;\n\t\tthis.port = port;\n\t\tthis.database = Convert.toInt(database);\n\t\tthis.stringRedisTemplate = getTemTemplate();\n\t}\n\t/**\n\t * 实现命令：TTL key，以秒为单位，返回给定 key的剩余生存时间(TTL, time to live)。\n\t *\n\t * @param key\n\t * @return\n\t */\n\tpublic long ttl(String key) {\n\t\treturn stringRedisTemplate.getExpire(key);\n\t}\n\n\t/**\n\t * 实现命令：expire 设置过期时间，单位秒\n\t *\n\t * @param key\n\t * @return\n\t */\n\tpublic void expire(String key, long timeout) {\n\t\tstringRedisTemplate.expire(key, timeout, TimeUnit.SECONDS);\n\t}\n\n\t/**\n\t * 是否存在key\n\t *\n\t * @param key\n\t */\n\tpublic Boolean hasKey(String key) {\n\t\treturn stringRedisTemplate.hasKey(key);\n\t}\n\n\t/**\n\t * 实现命令：INCR key，增加key一次\n\t *\n\t * @param key\n\t * @return\n\t */\n\tpublic long incr(String key, long delta) {\n\t\treturn stringRedisTemplate.opsForValue().increment(key, delta);\n\t}\n\n\t/**\n\t * 实现命令：KEYS pattern，查找所有符合给定模式 pattern的 key\n\t */\n\tpublic Set<String> keys(String pattern) {\n\t\treturn stringRedisTemplate.keys(pattern);\n\t}\n\n\t/**\n\t * 实现命令：DEL key，删除一个key\n\t *\n\t * @param key\n\t */\n\tpublic void del(String key) {\n\t\tstringRedisTemplate.delete(key);\n\t}\n\n\t// String（字符串）\n\n\t/**\n\t * 实现命令：SET key value，设置一个key-value（将字符串值 value关联到 key）\n\t *\n\t * @param key\n\t * @param value\n\t */\n\tpublic void set(String key, String value) {\n\t\tstringRedisTemplate.opsForValue().set(key, value);\n\t}\n\n\t/**\n\t * 实现命令：SET key value EX seconds，设置key-value和超时时间（秒）\n\t *\n\t * @param key\n\t * @param value\n\t * @param timeout （以秒为单位）\n\t */\n\tpublic void set(String key, String value, long timeout) {\n\t\tstringRedisTemplate.opsForValue().set(key, value, timeout, TimeUnit.SECONDS);\n\t}\n\n\t/**\n\t * 实现命令：GET key，返回 key所关联的字符串值。\n\t *\n\t * @param key\n\t * @return value\n\t */\n\tpublic String get(String key) {\n\t\treturn (String) stringRedisTemplate.opsForValue().get(key);\n\t}\n\n\t/**\n\t * 批量查询，对应mget\n\t *\n\t * @param keys\n\t * @return\n\t */\n\tpublic List<String> mget(List<String> keys) {\n\t\treturn stringRedisTemplate.opsForValue().multiGet(keys);\n\t}\n\n\t/**\n\t * 批量查询，管道pipeline\n\t *\n\t * @param keys\n\t * @return\n\t */\n\tpublic List<Object> batchGet(List<String> keys) {\n\n\t\tList<Object> result = stringRedisTemplate.executePipelined(new RedisCallback<String>() {\n\t\t\t@Override\n\t\t\tpublic String doInRedis(RedisConnection connection) throws DataAccessException {\n\t\t\t\tStringRedisConnection src = (StringRedisConnection) connection;\n\n\t\t\t\tfor (String k : keys) {\n\t\t\t\t\tsrc.get(k);\n\t\t\t\t}\n\t\t\t\treturn null;\n\t\t\t}\n\t\t});\n\n\t\treturn result;\n\t}\n\n\n\t// Hash（哈希表）\n\n\t/**\n\t * 实现命令：HSET key field value，将哈希表 key中的域 field的值设为 value\n\t *\n\t * @param key\n\t * @param field\n\t * @param value\n\t */\n\tpublic void hset(String key, String field, Object value) {\n\t\tstringRedisTemplate.opsForHash().put(key, field, value);\n\t}\n\n\t/**\n\t * 实现命令：HGET key field，返回哈希表 key中给定域 field的值\n\t *\n\t * @param key\n\t * @param field\n\t * @return\n\t */\n\tpublic String hget(String key, String field) {\n\t\treturn (String) stringRedisTemplate.opsForHash().get(key, field);\n\t}\n\n\t/**\n\t * 实现命令：HDEL key field [field ...]，删除哈希表 key 中的一个或多个指定域，不存在的域将被忽略。\n\t *\n\t * @param key\n\t * @param fields\n\t */\n\tpublic void hdel(String key, Object... fields) {\n\t\tstringRedisTemplate.opsForHash().delete(key, fields);\n\t}\n\n\t/**\n\t * 实现命令：HGETALL key，返回哈希表 key中，所有的域和值。\n\t *\n\t * @param key\n\t * @return\n\t */\n\tpublic Map<Object, Object> hgetall(String key) {\n\t\treturn stringRedisTemplate.opsForHash().entries(key);\n\t}\n\n\t// List（列表）\n\n\t/**\n\t * 实现命令：LPUSH key value，将一个值 value插入到列表 key的表头\n\t *\n\t * @param key\n\t * @param value\n\t * @return 执行 LPUSH命令后，列表的长度。\n\t */\n\tpublic long lpush(String key, String value) {\n\t\treturn stringRedisTemplate.opsForList().leftPush(key, value);\n\t}\n\n\t/**\n\t * 实现命令：LPOP key，移除并返回列表 key的头元素。\n\t *\n\t * @param key\n\t * @return 列表key的头元素。\n\t */\n\tpublic String lpop(String key) {\n\t\treturn (String) stringRedisTemplate.opsForList().leftPop(key);\n\t}\n\n\t/**\n\t * 实现命令：RPUSH key value，将一个值 value插入到列表 key的表尾(最右边)。\n\t *\n\t * @param key\n\t * @param value\n\t * @return 执行 LPUSH命令后，列表的长度。\n\t */\n\tpublic long rpush(String key, String value) {\n\t\treturn stringRedisTemplate.opsForList().rightPush(key, value);\n\t}\n\n\t/**\n\t * 实现命令：RPOP key，移除并返回列表最右边的元素。\n\t *\n\t * @param key\n\t * @return 列表key的最右边元素。\n\t */\n\tpublic String rpop(String key) {\n\t\treturn (String) stringRedisTemplate.opsForList().rightPop(key);\n\t}\n\n\t/**\n\t * 实现命令：LINDEX key index\n\t *\n\t * @return index对应的值\n\t */\n\tpublic String lindex(String key, Integer index) {\n\t\treturn stringRedisTemplate.opsForList().index(key, index);\n\t}\n\n\t/**\n\t * 实现命令：LTRIM key start end 修剪list\n\t * 清空list：ltrim key 1 0（ltrim key start end 中的start要比end大即可，数值且都为正数。）\n\t */\n\tpublic void ltrim(String key, Long start, Long end) {\n\t\tstringRedisTemplate.opsForList().trim(key, start, end);\n\t}\n\n\n\t/**\n\t * 实现命令：LLEN key 获取list长度\n\t */\n\tpublic Long llen(String key) {\n\t\treturn stringRedisTemplate.opsForList().size(key);\n\t}\n\n\t/**\n\t * 如果key不存在那么放入value\n\t *\n\t * @param key\n\t * @param value\n\t * @param timeout\n\t * @return boolean\n\t * @return void\n\t * @author yabin.zhang\n\t * @date 2021/11/30 14:04\n\t */\n\tpublic Boolean setnx(String key, String value, long timeout) {\n\t\treturn stringRedisTemplate.opsForValue().setIfAbsent(key, value, timeout, TimeUnit.SECONDS);\n\t}\n\n\t/**\n\t * 向set中添加元素\n\t *\n\t * @param key   set的key\n\t * @param value set的value\n\t */\n\tpublic void sAdd(String key, String value) {\n\t\tstringRedisTemplate.opsForSet().add(key, value);\n\t}\n\n\t/**\n\t * set中所有数据\n\t *\n\t * @param key set的key\n\t * @return set中所有数据\n\t */\n\tpublic Set<String> sMembers(String key) {\n\t\treturn stringRedisTemplate.opsForSet().members(key);\n\t}\n\n\t/**\n\t * 删除并返回set中的一个元素\n\t *\n\t * @param key set的key\n\t * @return set中的一个元素\n\t */\n\tpublic String sPop(String key) {\n\t\treturn stringRedisTemplate.opsForSet().pop(key);\n\t}\n\n\t/**\n\t * 获取key的大小\n\t *\n\t * @param key set的key\n\t * @return key的大小\n\t */\n\tpublic Long sCard(String key) {\n\t\treturn stringRedisTemplate.opsForSet().size(key);\n\t}\n\n\tpublic StringRedisTemplate getTemTemplate(){\n\t\t// 构建工厂对象\n\t\tRedisStandaloneConfiguration config = new RedisStandaloneConfiguration();\n\t\tconfig.setDatabase(this.database);\n\t\tconfig.setHostName(host);\n\t\tconfig.setPort(port);\n\t\tconfig.setPassword(RedisPassword.of(password));\n\t\tLettuceConnectionFactory factory = new LettuceConnectionFactory(config,\n\t\t\t\tLettucePoolingClientConfiguration.builder().build());\n\t\t// 重新初始化工厂\n\t\tfactory.afterPropertiesSet();\n\t\treturn new StringRedisTemplate(factory);\n\t}\n}\n```\n\n![image-20220720104542631](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720104542631.png)\n\n### 四、yml配置\n\n```\nspring:\n  redis:\n    host: localhost # Redis服务器地址\n    database: 8 # Redis数据库索引（默认为0）\n    database2: 9 # Redis数据库索引2（默认为0）\n    port: 6379 # Redis服务器连接端口\n    password: root # Redis服务器连接密码（默认为空）\n    timeout: 3000ms # 连接超时时间（毫秒）\n```\n\n### 五、使用\n\n```\n@AllArgsConstructor\npublic class CommonTest {\n    private RedisUtils redisUtils;\n    @DB\n    private RedisUtils redisUtils2;\n    @DB(\"${spring.redis.database2}\")\n    private RedisUtils redisUtils3;\n\n    @GetMapping(\"/redis\")\n    public Result test() {\n        redisUtils.set(\"helloBoy1\", \"helloBoy\");\n        redisUtils2.set(\"helloBoy2\", \"helloBoy\");\n        redisUtils3.set(\"helloBoy3\", \"helloBoy\");\n        return Result.succeed(\"保存成功，请查看redis中的数据\");\n    }\n}\n```\n\n![image-20220720104628655](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720104628655.png)\n","source":"_posts/BookMark/Spring Boot/Spring Boot & 自定义注解 实现从配置文件自选择redis db数据源.md","raw":"---\ntitle: Spring Boot & 支付宝支付（手机端，web端）\ndate: 2022-09-05 17:09:05\ncategory_bar: true\ncategories: Spring Boot\ntags:\n- Spring Boot\n- 自定义注解\n- redis\n---\n# Spring Boot & 自定义注解 实现从配置文件自选择redis db数据源\n\n---\n\n[toc]\n\n---\n\n### 一、 新建注解\n\n```\n@Target({ElementType.FIELD,ElementType.CONSTRUCTOR}) //声明应用在属性上\n@Retention(RetentionPolicy.RUNTIME) //运行期生效\n@Component\npublic @interface DB {\n    String value() default \"\";\n}\n```\n\n@Target：\n\n+ 说明了Annotation所修饰的对象范围：Annotation可被用于 packages、types（类、接口、枚举、Annotation类型）、类型成员（方法、构造方法、成员变量、枚举值）、方法参数和本地变量（如循环变量、catch参数）。在Annotation类型的声明中使用了target可更加明晰其修饰的目标。\n\n+ 作用：用于描述注解的使用范围（即：被描述的注解可以用在什么地方）\n\n+ 取值(ElementType)有：\n  1. CONSTRUCTOR:用于描述构造器\n  2. FIELD:用于描述域\n  3. LOCAL_VARIABLE:用于描述局部变量\n  4. METHOD:用于描述方法\n  5. PACKAGE:用于描述包\n  6. PARAMETER:用于描述参数\n  7. TYPE:用于描述类、接口(包括注解类型) 或enum声明\n\n@Retention：\n\n+ @Retention定义了该Annotation被保留的时间长短：某些Annotation仅出现在源代码中，而被编译器丢弃；而另一些却被编译在class文件中；编译在class文件中的Annotation可能会被虚拟机忽略，而另一些在class被装载时将被读取（请注意并不影响class的执行，因为Annotation与class在使用上是被分离的）。使用这个meta-Annotation可以对 Annotation的“生命周期”限制。\n+ 作用：表示需要在什么级别保存该注释信息，用于描述注解的生命周期（即：被描述的注解在什么范围内有效）\n+ 取值（RetentionPoicy）有：\n  1. SOURCE:在源文件中有效（即源文件保留）\n  2. CLASS:在class文件中有效（即class保留）\n  3. RUNTIME:在运行时有效（即运行时保留）\n\n### 二、通过Bean后置处理器自定义注解配置redis\n\n```\n@Component\npublic class RedisBeanPostProcessor implements BeanPostProcessor {\n    @Resource\n    Environment environment;\n    @Value(\"${spring.redis.host}\")\n    private String host;\n    @Value(\"${spring.redis.password}\")\n    private String password;\n    @Value(\"${spring.redis.port}\")\n    private int port;\n\n    @SneakyThrows\n    @Override\n    public Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException {\n        /**\n         * 利用Java反射机制注入属性\n         */\n        Field[] declaredFields = bean.getClass().getDeclaredFields();\n        for (Field declaredField : declaredFields) {\n            DB annotation = declaredField.getAnnotation(DB.class);\n            if (null == annotation) {\n                continue;\n            }\n            //从环境变量中获取值\n            String dbKey = ObjectUtil.defaultIfEmpty(annotation.value(), \"${spring.redis.database}\");\n            String dbIndex = environment.resolvePlaceholders(dbKey);\n            RedisUtils redisUtils = new RedisUtils(host, password, port, dbIndex);\n            try {\n                declaredField.setAccessible(true);\n                declaredField.set(bean, redisUtils);\n            } catch (IllegalAccessException e) {\n                e.printStackTrace();\n            }\n        }\n        return bean;\n    }\n\n    @Override\n    public Object postProcessAfterInitialization(Object o, String s) throws BeansException {\n        return o;\n    }\n}\n```\n\n![image-20220720104437102](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720104437102.png)\n\n### 三、RedisUtil\n\n```\n@Component\n@Data\n@Slf4j\n@NoArgsConstructor\npublic class RedisUtils {\n\t@Value(\"${spring.redis.host}\")\n\tprivate String host;\n\n\t@Value(\"${spring.redis.password}\")\n\tprivate String password;\n\n\t@Value(\"${spring.redis.port}\")\n\tprivate int port;\n\n\t@Value(\"${spring.redis.database}\")\n\tprivate int database;\n\n\t@Resource\n\tprivate StringRedisTemplate stringRedisTemplate;\n\n\tpublic RedisUtils(String host, String password, int port, String database) {\n\t\tthis.host = host;\n\t\tthis.password = password;\n\t\tthis.port = port;\n\t\tthis.database = Convert.toInt(database);\n\t\tthis.stringRedisTemplate = getTemTemplate();\n\t}\n\t/**\n\t * 实现命令：TTL key，以秒为单位，返回给定 key的剩余生存时间(TTL, time to live)。\n\t *\n\t * @param key\n\t * @return\n\t */\n\tpublic long ttl(String key) {\n\t\treturn stringRedisTemplate.getExpire(key);\n\t}\n\n\t/**\n\t * 实现命令：expire 设置过期时间，单位秒\n\t *\n\t * @param key\n\t * @return\n\t */\n\tpublic void expire(String key, long timeout) {\n\t\tstringRedisTemplate.expire(key, timeout, TimeUnit.SECONDS);\n\t}\n\n\t/**\n\t * 是否存在key\n\t *\n\t * @param key\n\t */\n\tpublic Boolean hasKey(String key) {\n\t\treturn stringRedisTemplate.hasKey(key);\n\t}\n\n\t/**\n\t * 实现命令：INCR key，增加key一次\n\t *\n\t * @param key\n\t * @return\n\t */\n\tpublic long incr(String key, long delta) {\n\t\treturn stringRedisTemplate.opsForValue().increment(key, delta);\n\t}\n\n\t/**\n\t * 实现命令：KEYS pattern，查找所有符合给定模式 pattern的 key\n\t */\n\tpublic Set<String> keys(String pattern) {\n\t\treturn stringRedisTemplate.keys(pattern);\n\t}\n\n\t/**\n\t * 实现命令：DEL key，删除一个key\n\t *\n\t * @param key\n\t */\n\tpublic void del(String key) {\n\t\tstringRedisTemplate.delete(key);\n\t}\n\n\t// String（字符串）\n\n\t/**\n\t * 实现命令：SET key value，设置一个key-value（将字符串值 value关联到 key）\n\t *\n\t * @param key\n\t * @param value\n\t */\n\tpublic void set(String key, String value) {\n\t\tstringRedisTemplate.opsForValue().set(key, value);\n\t}\n\n\t/**\n\t * 实现命令：SET key value EX seconds，设置key-value和超时时间（秒）\n\t *\n\t * @param key\n\t * @param value\n\t * @param timeout （以秒为单位）\n\t */\n\tpublic void set(String key, String value, long timeout) {\n\t\tstringRedisTemplate.opsForValue().set(key, value, timeout, TimeUnit.SECONDS);\n\t}\n\n\t/**\n\t * 实现命令：GET key，返回 key所关联的字符串值。\n\t *\n\t * @param key\n\t * @return value\n\t */\n\tpublic String get(String key) {\n\t\treturn (String) stringRedisTemplate.opsForValue().get(key);\n\t}\n\n\t/**\n\t * 批量查询，对应mget\n\t *\n\t * @param keys\n\t * @return\n\t */\n\tpublic List<String> mget(List<String> keys) {\n\t\treturn stringRedisTemplate.opsForValue().multiGet(keys);\n\t}\n\n\t/**\n\t * 批量查询，管道pipeline\n\t *\n\t * @param keys\n\t * @return\n\t */\n\tpublic List<Object> batchGet(List<String> keys) {\n\n\t\tList<Object> result = stringRedisTemplate.executePipelined(new RedisCallback<String>() {\n\t\t\t@Override\n\t\t\tpublic String doInRedis(RedisConnection connection) throws DataAccessException {\n\t\t\t\tStringRedisConnection src = (StringRedisConnection) connection;\n\n\t\t\t\tfor (String k : keys) {\n\t\t\t\t\tsrc.get(k);\n\t\t\t\t}\n\t\t\t\treturn null;\n\t\t\t}\n\t\t});\n\n\t\treturn result;\n\t}\n\n\n\t// Hash（哈希表）\n\n\t/**\n\t * 实现命令：HSET key field value，将哈希表 key中的域 field的值设为 value\n\t *\n\t * @param key\n\t * @param field\n\t * @param value\n\t */\n\tpublic void hset(String key, String field, Object value) {\n\t\tstringRedisTemplate.opsForHash().put(key, field, value);\n\t}\n\n\t/**\n\t * 实现命令：HGET key field，返回哈希表 key中给定域 field的值\n\t *\n\t * @param key\n\t * @param field\n\t * @return\n\t */\n\tpublic String hget(String key, String field) {\n\t\treturn (String) stringRedisTemplate.opsForHash().get(key, field);\n\t}\n\n\t/**\n\t * 实现命令：HDEL key field [field ...]，删除哈希表 key 中的一个或多个指定域，不存在的域将被忽略。\n\t *\n\t * @param key\n\t * @param fields\n\t */\n\tpublic void hdel(String key, Object... fields) {\n\t\tstringRedisTemplate.opsForHash().delete(key, fields);\n\t}\n\n\t/**\n\t * 实现命令：HGETALL key，返回哈希表 key中，所有的域和值。\n\t *\n\t * @param key\n\t * @return\n\t */\n\tpublic Map<Object, Object> hgetall(String key) {\n\t\treturn stringRedisTemplate.opsForHash().entries(key);\n\t}\n\n\t// List（列表）\n\n\t/**\n\t * 实现命令：LPUSH key value，将一个值 value插入到列表 key的表头\n\t *\n\t * @param key\n\t * @param value\n\t * @return 执行 LPUSH命令后，列表的长度。\n\t */\n\tpublic long lpush(String key, String value) {\n\t\treturn stringRedisTemplate.opsForList().leftPush(key, value);\n\t}\n\n\t/**\n\t * 实现命令：LPOP key，移除并返回列表 key的头元素。\n\t *\n\t * @param key\n\t * @return 列表key的头元素。\n\t */\n\tpublic String lpop(String key) {\n\t\treturn (String) stringRedisTemplate.opsForList().leftPop(key);\n\t}\n\n\t/**\n\t * 实现命令：RPUSH key value，将一个值 value插入到列表 key的表尾(最右边)。\n\t *\n\t * @param key\n\t * @param value\n\t * @return 执行 LPUSH命令后，列表的长度。\n\t */\n\tpublic long rpush(String key, String value) {\n\t\treturn stringRedisTemplate.opsForList().rightPush(key, value);\n\t}\n\n\t/**\n\t * 实现命令：RPOP key，移除并返回列表最右边的元素。\n\t *\n\t * @param key\n\t * @return 列表key的最右边元素。\n\t */\n\tpublic String rpop(String key) {\n\t\treturn (String) stringRedisTemplate.opsForList().rightPop(key);\n\t}\n\n\t/**\n\t * 实现命令：LINDEX key index\n\t *\n\t * @return index对应的值\n\t */\n\tpublic String lindex(String key, Integer index) {\n\t\treturn stringRedisTemplate.opsForList().index(key, index);\n\t}\n\n\t/**\n\t * 实现命令：LTRIM key start end 修剪list\n\t * 清空list：ltrim key 1 0（ltrim key start end 中的start要比end大即可，数值且都为正数。）\n\t */\n\tpublic void ltrim(String key, Long start, Long end) {\n\t\tstringRedisTemplate.opsForList().trim(key, start, end);\n\t}\n\n\n\t/**\n\t * 实现命令：LLEN key 获取list长度\n\t */\n\tpublic Long llen(String key) {\n\t\treturn stringRedisTemplate.opsForList().size(key);\n\t}\n\n\t/**\n\t * 如果key不存在那么放入value\n\t *\n\t * @param key\n\t * @param value\n\t * @param timeout\n\t * @return boolean\n\t * @return void\n\t * @author yabin.zhang\n\t * @date 2021/11/30 14:04\n\t */\n\tpublic Boolean setnx(String key, String value, long timeout) {\n\t\treturn stringRedisTemplate.opsForValue().setIfAbsent(key, value, timeout, TimeUnit.SECONDS);\n\t}\n\n\t/**\n\t * 向set中添加元素\n\t *\n\t * @param key   set的key\n\t * @param value set的value\n\t */\n\tpublic void sAdd(String key, String value) {\n\t\tstringRedisTemplate.opsForSet().add(key, value);\n\t}\n\n\t/**\n\t * set中所有数据\n\t *\n\t * @param key set的key\n\t * @return set中所有数据\n\t */\n\tpublic Set<String> sMembers(String key) {\n\t\treturn stringRedisTemplate.opsForSet().members(key);\n\t}\n\n\t/**\n\t * 删除并返回set中的一个元素\n\t *\n\t * @param key set的key\n\t * @return set中的一个元素\n\t */\n\tpublic String sPop(String key) {\n\t\treturn stringRedisTemplate.opsForSet().pop(key);\n\t}\n\n\t/**\n\t * 获取key的大小\n\t *\n\t * @param key set的key\n\t * @return key的大小\n\t */\n\tpublic Long sCard(String key) {\n\t\treturn stringRedisTemplate.opsForSet().size(key);\n\t}\n\n\tpublic StringRedisTemplate getTemTemplate(){\n\t\t// 构建工厂对象\n\t\tRedisStandaloneConfiguration config = new RedisStandaloneConfiguration();\n\t\tconfig.setDatabase(this.database);\n\t\tconfig.setHostName(host);\n\t\tconfig.setPort(port);\n\t\tconfig.setPassword(RedisPassword.of(password));\n\t\tLettuceConnectionFactory factory = new LettuceConnectionFactory(config,\n\t\t\t\tLettucePoolingClientConfiguration.builder().build());\n\t\t// 重新初始化工厂\n\t\tfactory.afterPropertiesSet();\n\t\treturn new StringRedisTemplate(factory);\n\t}\n}\n```\n\n![image-20220720104542631](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720104542631.png)\n\n### 四、yml配置\n\n```\nspring:\n  redis:\n    host: localhost # Redis服务器地址\n    database: 8 # Redis数据库索引（默认为0）\n    database2: 9 # Redis数据库索引2（默认为0）\n    port: 6379 # Redis服务器连接端口\n    password: root # Redis服务器连接密码（默认为空）\n    timeout: 3000ms # 连接超时时间（毫秒）\n```\n\n### 五、使用\n\n```\n@AllArgsConstructor\npublic class CommonTest {\n    private RedisUtils redisUtils;\n    @DB\n    private RedisUtils redisUtils2;\n    @DB(\"${spring.redis.database2}\")\n    private RedisUtils redisUtils3;\n\n    @GetMapping(\"/redis\")\n    public Result test() {\n        redisUtils.set(\"helloBoy1\", \"helloBoy\");\n        redisUtils2.set(\"helloBoy2\", \"helloBoy\");\n        redisUtils3.set(\"helloBoy3\", \"helloBoy\");\n        return Result.succeed(\"保存成功，请查看redis中的数据\");\n    }\n}\n```\n\n![image-20220720104628655](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720104628655.png)\n","slug":"BookMark/Spring Boot/Spring Boot & 自定义注解 实现从配置文件自选择redis db数据源","published":1,"updated":"2022-09-06T07:08:49.874Z","_id":"cl7ptszom001laba59bg5dpox","comments":1,"layout":"post","photos":[],"link":"","content":"<h1><span id=\"spring-boot-amp-自定义注解-实现从配置文件自选择redis-db数据源\">Spring Boot &amp; 自定义注解 实现从配置文件自选择redis db数据源</span></h1><hr>\n<p>[toc]</p>\n<hr>\n<h3><span id=\"一-新建注解\">一、 新建注解</span></h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Target(&#123;ElementType.FIELD,ElementType.CONSTRUCTOR&#125;)</span> <span class=\"hljs-comment\">//声明应用在属性上</span><br><span class=\"hljs-meta\">@Retention(RetentionPolicy.RUNTIME)</span> <span class=\"hljs-comment\">//运行期生效</span><br><span class=\"hljs-meta\">@Component</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-meta\">@interface</span> DB &#123;<br>    String <span class=\"hljs-title function_\">value</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-string\">&quot;&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>@Target：</p>\n<ul>\n<li><p>说明了Annotation所修饰的对象范围：Annotation可被用于 packages、types（类、接口、枚举、Annotation类型）、类型成员（方法、构造方法、成员变量、枚举值）、方法参数和本地变量（如循环变量、catch参数）。在Annotation类型的声明中使用了target可更加明晰其修饰的目标。</p>\n</li>\n<li><p>作用：用于描述注解的使用范围（即：被描述的注解可以用在什么地方）</p>\n</li>\n<li><p>取值(ElementType)有：</p>\n<ol>\n<li>CONSTRUCTOR:用于描述构造器</li>\n<li>FIELD:用于描述域</li>\n<li>LOCAL_VARIABLE:用于描述局部变量</li>\n<li>METHOD:用于描述方法</li>\n<li>PACKAGE:用于描述包</li>\n<li>PARAMETER:用于描述参数</li>\n<li>TYPE:用于描述类、接口(包括注解类型) 或enum声明</li>\n</ol>\n</li>\n</ul>\n<p>@Retention：</p>\n<ul>\n<li>@Retention定义了该Annotation被保留的时间长短：某些Annotation仅出现在源代码中，而被编译器丢弃；而另一些却被编译在class文件中；编译在class文件中的Annotation可能会被虚拟机忽略，而另一些在class被装载时将被读取（请注意并不影响class的执行，因为Annotation与class在使用上是被分离的）。使用这个meta-Annotation可以对 Annotation的“生命周期”限制。</li>\n<li>作用：表示需要在什么级别保存该注释信息，用于描述注解的生命周期（即：被描述的注解在什么范围内有效）</li>\n<li>取值（RetentionPoicy）有：<ol>\n<li>SOURCE:在源文件中有效（即源文件保留）</li>\n<li>CLASS:在class文件中有效（即class保留）</li>\n<li>RUNTIME:在运行时有效（即运行时保留）</li>\n</ol>\n</li>\n</ul>\n<h3><span id=\"二-通过bean后置处理器自定义注解配置redis\">二、通过Bean后置处理器自定义注解配置redis</span></h3><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs kotlin\"><span class=\"hljs-meta\">@Component</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">RedisBeanPostProcessor</span> <span class=\"hljs-title\">implements</span> <span class=\"hljs-title\">BeanPostProcessor</span> &#123;<br>    <span class=\"hljs-meta\">@Resource</span><br>    Environment environment;<br>    <span class=\"hljs-meta\">@Value(<span class=\"hljs-string\">&quot;<span class=\"hljs-subst\">$&#123;spring.redis.host&#125;</span>&quot;</span>)</span><br>    <span class=\"hljs-keyword\">private</span> String host;<br>    <span class=\"hljs-meta\">@Value(<span class=\"hljs-string\">&quot;<span class=\"hljs-subst\">$&#123;spring.redis.password&#125;</span>&quot;</span>)</span><br>    <span class=\"hljs-keyword\">private</span> String password;<br>    <span class=\"hljs-meta\">@Value(<span class=\"hljs-string\">&quot;<span class=\"hljs-subst\">$&#123;spring.redis.port&#125;</span>&quot;</span>)</span><br>    <span class=\"hljs-keyword\">private</span> int port;<br><br>    <span class=\"hljs-meta\">@SneakyThrows</span><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException &#123;<br>        <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">         * 利用Java反射机制注入属性</span><br><span class=\"hljs-comment\">         */</span><br>        Field[] declaredFields = bean.getClass().getDeclaredFields();<br>        <span class=\"hljs-keyword\">for</span> (Field declaredField : declaredFields) &#123;<br>            DB <span class=\"hljs-keyword\">annotation</span> = declaredField.getAnnotation(DB.<span class=\"hljs-keyword\">class</span>);<br>            <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-literal\">null</span> == <span class=\"hljs-keyword\">annotation</span>) &#123;<br>                <span class=\"hljs-keyword\">continue</span>;<br>            &#125;<br>            <span class=\"hljs-comment\">//从环境变量中获取值</span><br>            String dbKey = ObjectUtil.defaultIfEmpty(<span class=\"hljs-keyword\">annotation</span>.value(), <span class=\"hljs-string\">&quot;<span class=\"hljs-subst\">$&#123;spring.redis.database&#125;</span>&quot;</span>);<br>            String dbIndex = environment.resolvePlaceholders(dbKey);<br>            RedisUtils redisUtils = new RedisUtils(host, password, port, dbIndex);<br>            <span class=\"hljs-keyword\">try</span> &#123;<br>                declaredField.setAccessible(<span class=\"hljs-literal\">true</span>);<br>                declaredField.<span class=\"hljs-keyword\">set</span>(bean, redisUtils);<br>            &#125; <span class=\"hljs-keyword\">catch</span> (IllegalAccessException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> bean;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> Object postProcessAfterInitialization(Object o, String s) throws BeansException &#123;<br>        <span class=\"hljs-keyword\">return</span> o;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720104437102.png\" alt=\"image-20220720104437102\"></p>\n<h3><span id=\"三-redisutil\">三、RedisUtil</span></h3><figure class=\"highlight wren\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs wren\">@<span class=\"hljs-title class_\">Component</span><br>@<span class=\"hljs-title class_\">Data</span><br>@<span class=\"hljs-title class_\">Slf</span>4j<br>@<span class=\"hljs-title class_\">NoArgsConstructor</span><br><span class=\"hljs-variable\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">RedisUtils</span> &#123;<br>\t@<span class=\"hljs-title class_\">Value</span>(<span class=\"hljs-string\">&quot;$&#123;spring.redis.host&#125;&quot;</span>)<br>\t<span class=\"hljs-variable\">private</span> <span class=\"hljs-title class_\">String</span> <span class=\"hljs-variable\">host</span>;<br><br>\t@<span class=\"hljs-title class_\">Value</span>(<span class=\"hljs-string\">&quot;$&#123;spring.redis.password&#125;&quot;</span>)<br>\t<span class=\"hljs-variable\">private</span> <span class=\"hljs-title class_\">String</span> <span class=\"hljs-variable\">password</span>;<br><br>\t@<span class=\"hljs-title class_\">Value</span>(<span class=\"hljs-string\">&quot;$&#123;spring.redis.port&#125;&quot;</span>)<br>\t<span class=\"hljs-variable\">private</span> int <span class=\"hljs-variable\">port</span>;<br><br>\t@<span class=\"hljs-title class_\">Value</span>(<span class=\"hljs-string\">&quot;$&#123;spring.redis.database&#125;&quot;</span>)<br>\t<span class=\"hljs-variable\">private</span> int <span class=\"hljs-variable\">database</span>;<br><br>\t@<span class=\"hljs-title class_\">Resource</span><br>\t<span class=\"hljs-variable\">private</span> <span class=\"hljs-title class_\">StringRedisTemplate</span> <span class=\"hljs-variable\">stringRedisTemplate</span>;<br><br>\t<span class=\"hljs-variable\">public</span> <span class=\"hljs-title class_\">RedisUtils</span>(<span class=\"hljs-title class_\">String</span> <span class=\"hljs-variable\">host</span>, <span class=\"hljs-title class_\">String</span> <span class=\"hljs-variable\">password</span>, int <span class=\"hljs-variable\">port</span>, <span class=\"hljs-title class_\">String</span> <span class=\"hljs-variable\">database</span>) &#123;<br>\t\t<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">host</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-variable\">host</span>;<br>\t\t<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">password</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-variable\">password</span>;<br>\t\t<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">port</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-variable\">port</span>;<br>\t\t<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">database</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-title class_\">Convert</span>.<span class=\"hljs-property\">toInt</span>(<span class=\"hljs-variable\">database</span>);<br>\t\t<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">stringRedisTemplate</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-title function_\">getTemTemplate</span>();<br>\t&#125;<br>\t<span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">\t * 实现命令：TTL key，以秒为单位，返回给定 key的剩余生存时间(TTL, time to live)。</span><br><span class=\"hljs-comment\">\t *</span><br><span class=\"hljs-comment\">\t * <span class=\"hljs-doctag\">@param</span> key</span><br><span class=\"hljs-comment\">\t * <span class=\"hljs-doctag\">@return</span></span><br><span class=\"hljs-comment\">\t */</span><br>\t<span class=\"hljs-variable\">public</span> <span class=\"hljs-variable\">long</span> <span class=\"hljs-title function_\">ttl</span>(<span class=\"hljs-params\">String</span> <span class=\"hljs-params\">key</span>) &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable\">stringRedisTemplate</span>.<span class=\"hljs-property\">getExpire</span>(<span class=\"hljs-variable\">key</span>);<br>\t&#125;<br><br>\t<span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">\t * 实现命令：expire 设置过期时间，单位秒</span><br><span class=\"hljs-comment\">\t *</span><br><span class=\"hljs-comment\">\t * <span class=\"hljs-doctag\">@param</span> key</span><br><span class=\"hljs-comment\">\t * <span class=\"hljs-doctag\">@return</span></span><br><span class=\"hljs-comment\">\t */</span><br>\t<span class=\"hljs-variable\">public</span> <span class=\"hljs-variable\">void</span> <span class=\"hljs-title function_\">expire</span>(<span class=\"hljs-params\">String</span> <span class=\"hljs-params\">key</span>, <span class=\"hljs-params\">long</span> <span class=\"hljs-params\">timeout</span>) &#123;<br>\t\t<span class=\"hljs-variable\">stringRedisTemplate</span>.<span class=\"hljs-property\">expire</span>(<span class=\"hljs-variable\">key</span>, <span class=\"hljs-variable\">timeout</span>, <span class=\"hljs-title class_\">TimeUnit</span>.<span class=\"hljs-property\">SECONDS</span>);<br>\t&#125;<br><br>\t<span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">\t * 是否存在key</span><br><span class=\"hljs-comment\">\t *</span><br><span class=\"hljs-comment\">\t * <span class=\"hljs-doctag\">@param</span> key</span><br><span class=\"hljs-comment\">\t */</span><br>\t<span class=\"hljs-variable\">public</span> <span class=\"hljs-title class_\">Boolean</span> <span class=\"hljs-title function_\">hasKey</span>(<span class=\"hljs-params\">String</span> <span class=\"hljs-params\">key</span>) &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable\">stringRedisTemplate</span>.<span class=\"hljs-property\">hasKey</span>(<span class=\"hljs-variable\">key</span>);<br>\t&#125;<br><br>\t<span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">\t * 实现命令：INCR key，增加key一次</span><br><span class=\"hljs-comment\">\t *</span><br><span class=\"hljs-comment\">\t * <span class=\"hljs-doctag\">@param</span> key</span><br><span class=\"hljs-comment\">\t * <span class=\"hljs-doctag\">@return</span></span><br><span class=\"hljs-comment\">\t */</span><br>\t<span class=\"hljs-variable\">public</span> <span class=\"hljs-variable\">long</span> <span class=\"hljs-title function_\">incr</span>(<span class=\"hljs-params\">String</span> <span class=\"hljs-params\">key</span>, <span class=\"hljs-params\">long</span> <span class=\"hljs-params\">delta</span>) &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable\">stringRedisTemplate</span>.<span class=\"hljs-property\">opsForValue</span>().<span class=\"hljs-property\">increment</span>(<span class=\"hljs-variable\">key</span>, <span class=\"hljs-variable\">delta</span>);<br>\t&#125;<br><br>\t<span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">\t * 实现命令：KEYS pattern，查找所有符合给定模式 pattern的 key</span><br><span class=\"hljs-comment\">\t */</span><br>\t<span class=\"hljs-variable\">public</span> <span class=\"hljs-title class_\">Set</span><span class=\"hljs-operator\">&lt;</span><span class=\"hljs-title class_\">String</span><span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-title function_\">keys</span>(<span class=\"hljs-params\">String</span> <span class=\"hljs-params\">pattern</span>) &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable\">stringRedisTemplate</span>.<span class=\"hljs-property\">keys</span>(<span class=\"hljs-variable\">pattern</span>);<br>\t&#125;<br><br>\t<span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">\t * 实现命令：DEL key，删除一个key</span><br><span class=\"hljs-comment\">\t *</span><br><span class=\"hljs-comment\">\t * <span class=\"hljs-doctag\">@param</span> key</span><br><span class=\"hljs-comment\">\t */</span><br>\t<span class=\"hljs-variable\">public</span> <span class=\"hljs-variable\">void</span> <span class=\"hljs-title function_\">del</span>(<span class=\"hljs-params\">String</span> <span class=\"hljs-params\">key</span>) &#123;<br>\t\t<span class=\"hljs-variable\">stringRedisTemplate</span>.<span class=\"hljs-property\">delete</span>(<span class=\"hljs-variable\">key</span>);<br>\t&#125;<br><br>\t<span class=\"hljs-comment\">// String（字符串）</span><br><br>\t<span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">\t * 实现命令：SET key value，设置一个key-value（将字符串值 value关联到 key）</span><br><span class=\"hljs-comment\">\t *</span><br><span class=\"hljs-comment\">\t * <span class=\"hljs-doctag\">@param</span> key</span><br><span class=\"hljs-comment\">\t * <span class=\"hljs-doctag\">@param</span> value</span><br><span class=\"hljs-comment\">\t */</span><br>\t<span class=\"hljs-variable\">public</span> <span class=\"hljs-variable\">void</span> <span class=\"hljs-title function_\">set</span>(<span class=\"hljs-params\">String</span> <span class=\"hljs-params\">key</span>, <span class=\"hljs-params\">String</span> <span class=\"hljs-params\">value</span>) &#123;<br>\t\t<span class=\"hljs-variable\">stringRedisTemplate</span>.<span class=\"hljs-property\">opsForValue</span>().<span class=\"hljs-property\">set</span>(<span class=\"hljs-variable\">key</span>, <span class=\"hljs-variable\">value</span>);<br>\t&#125;<br><br>\t<span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">\t * 实现命令：SET key value EX seconds，设置key-value和超时时间（秒）</span><br><span class=\"hljs-comment\">\t *</span><br><span class=\"hljs-comment\">\t * <span class=\"hljs-doctag\">@param</span> key</span><br><span class=\"hljs-comment\">\t * <span class=\"hljs-doctag\">@param</span> value</span><br><span class=\"hljs-comment\">\t * <span class=\"hljs-doctag\">@param</span> timeout （以秒为单位）</span><br><span class=\"hljs-comment\">\t */</span><br>\t<span class=\"hljs-variable\">public</span> <span class=\"hljs-variable\">void</span> <span class=\"hljs-title function_\">set</span>(<span class=\"hljs-params\">String</span> <span class=\"hljs-params\">key</span>, <span class=\"hljs-params\">String</span> <span class=\"hljs-params\">value</span>, <span class=\"hljs-params\">long</span> <span class=\"hljs-params\">timeout</span>) &#123;<br>\t\t<span class=\"hljs-variable\">stringRedisTemplate</span>.<span class=\"hljs-property\">opsForValue</span>().<span class=\"hljs-property\">set</span>(<span class=\"hljs-variable\">key</span>, <span class=\"hljs-variable\">value</span>, <span class=\"hljs-variable\">timeout</span>, <span class=\"hljs-title class_\">TimeUnit</span>.<span class=\"hljs-property\">SECONDS</span>);<br>\t&#125;<br><br>\t<span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">\t * 实现命令：GET key，返回 key所关联的字符串值。</span><br><span class=\"hljs-comment\">\t *</span><br><span class=\"hljs-comment\">\t * <span class=\"hljs-doctag\">@param</span> key</span><br><span class=\"hljs-comment\">\t * <span class=\"hljs-doctag\">@return</span> value</span><br><span class=\"hljs-comment\">\t */</span><br>\t<span class=\"hljs-variable\">public</span> <span class=\"hljs-title class_\">String</span> <span class=\"hljs-title function_\">get</span>(<span class=\"hljs-params\">String</span> <span class=\"hljs-params\">key</span>) &#123;<br>\t\t<span class=\"hljs-title function_\">return</span> (<span class=\"hljs-title class_\">String</span>) <span class=\"hljs-variable\">stringRedisTemplate</span>.<span class=\"hljs-property\">opsForValue</span>().<span class=\"hljs-property\">get</span>(<span class=\"hljs-variable\">key</span>);<br>\t&#125;<br><br>\t<span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">\t * 批量查询，对应mget</span><br><span class=\"hljs-comment\">\t *</span><br><span class=\"hljs-comment\">\t * <span class=\"hljs-doctag\">@param</span> keys</span><br><span class=\"hljs-comment\">\t * <span class=\"hljs-doctag\">@return</span></span><br><span class=\"hljs-comment\">\t */</span><br>\t<span class=\"hljs-variable\">public</span> <span class=\"hljs-title class_\">List</span><span class=\"hljs-operator\">&lt;</span><span class=\"hljs-title class_\">String</span><span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-title function_\">mget</span>(<span class=\"hljs-params\">List</span>&lt;<span class=\"hljs-params\">String</span>&gt; <span class=\"hljs-params\">keys</span>) &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable\">stringRedisTemplate</span>.<span class=\"hljs-property\">opsForValue</span>().<span class=\"hljs-property\">multiGet</span>(<span class=\"hljs-variable\">keys</span>);<br>\t&#125;<br><br>\t<span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">\t * 批量查询，管道pipeline</span><br><span class=\"hljs-comment\">\t *</span><br><span class=\"hljs-comment\">\t * <span class=\"hljs-doctag\">@param</span> keys</span><br><span class=\"hljs-comment\">\t * <span class=\"hljs-doctag\">@return</span></span><br><span class=\"hljs-comment\">\t */</span><br>\t<span class=\"hljs-variable\">public</span> <span class=\"hljs-title class_\">List</span><span class=\"hljs-operator\">&lt;</span><span class=\"hljs-title class_\">Object</span><span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-title function_\">batchGet</span>(<span class=\"hljs-params\">List</span>&lt;<span class=\"hljs-params\">String</span>&gt; <span class=\"hljs-params\">keys</span>) &#123;<br><br>\t\t<span class=\"hljs-title class_\">List</span><span class=\"hljs-operator\">&lt;</span><span class=\"hljs-title class_\">Object</span><span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-variable\">result</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-variable\">stringRedisTemplate</span>.<span class=\"hljs-property\">executePipelined</span>(<span class=\"hljs-variable\">new</span> <span class=\"hljs-title class_\">RedisCallback</span><span class=\"hljs-operator\">&lt;</span><span class=\"hljs-title class_\">String</span><span class=\"hljs-operator\">&gt;</span>() &#123;<br>\t\t\t@<span class=\"hljs-title class_\">Override</span><br>\t\t\t<span class=\"hljs-variable\">public</span> <span class=\"hljs-title class_\">String</span> <span class=\"hljs-title function_\">doInRedis</span>(<span class=\"hljs-title class_\">RedisConnection</span> <span class=\"hljs-variable\">connection</span>) <span class=\"hljs-variable\">throws</span> <span class=\"hljs-title class_\">DataAccessException</span> &#123;<br>\t\t\t\t<span class=\"hljs-title class_\">StringRedisConnection</span> <span class=\"hljs-variable\">src</span> <span class=\"hljs-operator\">=</span> (<span class=\"hljs-title class_\">StringRedisConnection</span>) <span class=\"hljs-variable\">connection</span>;<br><br>\t\t\t\t<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-title class_\">String</span> <span class=\"hljs-variable\">k</span> : <span class=\"hljs-variable\">keys</span>) &#123;<br>\t\t\t\t\t<span class=\"hljs-variable\">src</span>.<span class=\"hljs-property\">get</span>(<span class=\"hljs-variable\">k</span>);<br>\t\t\t\t&#125;<br>\t\t\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;<br>\t\t\t&#125;<br>\t\t&#125;);<br><br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable\">result</span>;<br>\t&#125;<br><br><br>\t<span class=\"hljs-comment\">// Hash（哈希表）</span><br><br>\t<span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">\t * 实现命令：HSET key field value，将哈希表 key中的域 field的值设为 value</span><br><span class=\"hljs-comment\">\t *</span><br><span class=\"hljs-comment\">\t * <span class=\"hljs-doctag\">@param</span> key</span><br><span class=\"hljs-comment\">\t * <span class=\"hljs-doctag\">@param</span> field</span><br><span class=\"hljs-comment\">\t * <span class=\"hljs-doctag\">@param</span> value</span><br><span class=\"hljs-comment\">\t */</span><br>\t<span class=\"hljs-variable\">public</span> <span class=\"hljs-variable\">void</span> <span class=\"hljs-title function_\">hset</span>(<span class=\"hljs-params\">String</span> <span class=\"hljs-params\">key</span>, <span class=\"hljs-params\">String</span> <span class=\"hljs-params\">field</span>, <span class=\"hljs-params\">Object</span> <span class=\"hljs-params\">value</span>) &#123;<br>\t\t<span class=\"hljs-variable\">stringRedisTemplate</span>.<span class=\"hljs-property\">opsForHash</span>().<span class=\"hljs-property\">put</span>(<span class=\"hljs-variable\">key</span>, <span class=\"hljs-variable\">field</span>, <span class=\"hljs-variable\">value</span>);<br>\t&#125;<br><br>\t<span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">\t * 实现命令：HGET key field，返回哈希表 key中给定域 field的值</span><br><span class=\"hljs-comment\">\t *</span><br><span class=\"hljs-comment\">\t * <span class=\"hljs-doctag\">@param</span> key</span><br><span class=\"hljs-comment\">\t * <span class=\"hljs-doctag\">@param</span> field</span><br><span class=\"hljs-comment\">\t * <span class=\"hljs-doctag\">@return</span></span><br><span class=\"hljs-comment\">\t */</span><br>\t<span class=\"hljs-variable\">public</span> <span class=\"hljs-title class_\">String</span> <span class=\"hljs-title function_\">hget</span>(<span class=\"hljs-params\">String</span> <span class=\"hljs-params\">key</span>, <span class=\"hljs-params\">String</span> <span class=\"hljs-params\">field</span>) &#123;<br>\t\t<span class=\"hljs-title function_\">return</span> (<span class=\"hljs-title class_\">String</span>) <span class=\"hljs-variable\">stringRedisTemplate</span>.<span class=\"hljs-property\">opsForHash</span>().<span class=\"hljs-property\">get</span>(<span class=\"hljs-variable\">key</span>, <span class=\"hljs-variable\">field</span>);<br>\t&#125;<br><br>\t<span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">\t * 实现命令：HDEL key field [field ...]，删除哈希表 key 中的一个或多个指定域，不存在的域将被忽略。</span><br><span class=\"hljs-comment\">\t *</span><br><span class=\"hljs-comment\">\t * <span class=\"hljs-doctag\">@param</span> key</span><br><span class=\"hljs-comment\">\t * <span class=\"hljs-doctag\">@param</span> fields</span><br><span class=\"hljs-comment\">\t */</span><br>\t<span class=\"hljs-variable\">public</span> <span class=\"hljs-variable\">void</span> <span class=\"hljs-title function_\">hdel</span>(<span class=\"hljs-params\">String</span> <span class=\"hljs-params\">key</span>, <span class=\"hljs-params\">Object</span>... <span class=\"hljs-params\">fields</span>) &#123;<br>\t\t<span class=\"hljs-variable\">stringRedisTemplate</span>.<span class=\"hljs-property\">opsForHash</span>().<span class=\"hljs-property\">delete</span>(<span class=\"hljs-variable\">key</span>, <span class=\"hljs-variable\">fields</span>);<br>\t&#125;<br><br>\t<span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">\t * 实现命令：HGETALL key，返回哈希表 key中，所有的域和值。</span><br><span class=\"hljs-comment\">\t *</span><br><span class=\"hljs-comment\">\t * <span class=\"hljs-doctag\">@param</span> key</span><br><span class=\"hljs-comment\">\t * <span class=\"hljs-doctag\">@return</span></span><br><span class=\"hljs-comment\">\t */</span><br>\t<span class=\"hljs-variable\">public</span> <span class=\"hljs-title class_\">Map</span><span class=\"hljs-operator\">&lt;</span><span class=\"hljs-title class_\">Object</span>, <span class=\"hljs-title class_\">Object</span><span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-title function_\">hgetall</span>(<span class=\"hljs-params\">String</span> <span class=\"hljs-params\">key</span>) &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable\">stringRedisTemplate</span>.<span class=\"hljs-property\">opsForHash</span>().<span class=\"hljs-property\">entries</span>(<span class=\"hljs-variable\">key</span>);<br>\t&#125;<br><br>\t<span class=\"hljs-comment\">// List（列表）</span><br><br>\t<span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">\t * 实现命令：LPUSH key value，将一个值 value插入到列表 key的表头</span><br><span class=\"hljs-comment\">\t *</span><br><span class=\"hljs-comment\">\t * <span class=\"hljs-doctag\">@param</span> key</span><br><span class=\"hljs-comment\">\t * <span class=\"hljs-doctag\">@param</span> value</span><br><span class=\"hljs-comment\">\t * <span class=\"hljs-doctag\">@return</span> 执行 LPUSH命令后，列表的长度。</span><br><span class=\"hljs-comment\">\t */</span><br>\t<span class=\"hljs-variable\">public</span> <span class=\"hljs-variable\">long</span> <span class=\"hljs-title function_\">lpush</span>(<span class=\"hljs-params\">String</span> <span class=\"hljs-params\">key</span>, <span class=\"hljs-params\">String</span> <span class=\"hljs-params\">value</span>) &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable\">stringRedisTemplate</span>.<span class=\"hljs-property\">opsForList</span>().<span class=\"hljs-property\">leftPush</span>(<span class=\"hljs-variable\">key</span>, <span class=\"hljs-variable\">value</span>);<br>\t&#125;<br><br>\t<span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">\t * 实现命令：LPOP key，移除并返回列表 key的头元素。</span><br><span class=\"hljs-comment\">\t *</span><br><span class=\"hljs-comment\">\t * <span class=\"hljs-doctag\">@param</span> key</span><br><span class=\"hljs-comment\">\t * <span class=\"hljs-doctag\">@return</span> 列表key的头元素。</span><br><span class=\"hljs-comment\">\t */</span><br>\t<span class=\"hljs-variable\">public</span> <span class=\"hljs-title class_\">String</span> <span class=\"hljs-title function_\">lpop</span>(<span class=\"hljs-params\">String</span> <span class=\"hljs-params\">key</span>) &#123;<br>\t\t<span class=\"hljs-title function_\">return</span> (<span class=\"hljs-title class_\">String</span>) <span class=\"hljs-variable\">stringRedisTemplate</span>.<span class=\"hljs-property\">opsForList</span>().<span class=\"hljs-property\">leftPop</span>(<span class=\"hljs-variable\">key</span>);<br>\t&#125;<br><br>\t<span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">\t * 实现命令：RPUSH key value，将一个值 value插入到列表 key的表尾(最右边)。</span><br><span class=\"hljs-comment\">\t *</span><br><span class=\"hljs-comment\">\t * <span class=\"hljs-doctag\">@param</span> key</span><br><span class=\"hljs-comment\">\t * <span class=\"hljs-doctag\">@param</span> value</span><br><span class=\"hljs-comment\">\t * <span class=\"hljs-doctag\">@return</span> 执行 LPUSH命令后，列表的长度。</span><br><span class=\"hljs-comment\">\t */</span><br>\t<span class=\"hljs-variable\">public</span> <span class=\"hljs-variable\">long</span> <span class=\"hljs-title function_\">rpush</span>(<span class=\"hljs-params\">String</span> <span class=\"hljs-params\">key</span>, <span class=\"hljs-params\">String</span> <span class=\"hljs-params\">value</span>) &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable\">stringRedisTemplate</span>.<span class=\"hljs-property\">opsForList</span>().<span class=\"hljs-property\">rightPush</span>(<span class=\"hljs-variable\">key</span>, <span class=\"hljs-variable\">value</span>);<br>\t&#125;<br><br>\t<span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">\t * 实现命令：RPOP key，移除并返回列表最右边的元素。</span><br><span class=\"hljs-comment\">\t *</span><br><span class=\"hljs-comment\">\t * <span class=\"hljs-doctag\">@param</span> key</span><br><span class=\"hljs-comment\">\t * <span class=\"hljs-doctag\">@return</span> 列表key的最右边元素。</span><br><span class=\"hljs-comment\">\t */</span><br>\t<span class=\"hljs-variable\">public</span> <span class=\"hljs-title class_\">String</span> <span class=\"hljs-title function_\">rpop</span>(<span class=\"hljs-params\">String</span> <span class=\"hljs-params\">key</span>) &#123;<br>\t\t<span class=\"hljs-title function_\">return</span> (<span class=\"hljs-title class_\">String</span>) <span class=\"hljs-variable\">stringRedisTemplate</span>.<span class=\"hljs-property\">opsForList</span>().<span class=\"hljs-property\">rightPop</span>(<span class=\"hljs-variable\">key</span>);<br>\t&#125;<br><br>\t<span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">\t * 实现命令：LINDEX key index</span><br><span class=\"hljs-comment\">\t *</span><br><span class=\"hljs-comment\">\t * <span class=\"hljs-doctag\">@return</span> index对应的值</span><br><span class=\"hljs-comment\">\t */</span><br>\t<span class=\"hljs-variable\">public</span> <span class=\"hljs-title class_\">String</span> <span class=\"hljs-title function_\">lindex</span>(<span class=\"hljs-params\">String</span> <span class=\"hljs-params\">key</span>, <span class=\"hljs-params\">Integer</span> <span class=\"hljs-params\">index</span>) &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable\">stringRedisTemplate</span>.<span class=\"hljs-property\">opsForList</span>().<span class=\"hljs-property\">index</span>(<span class=\"hljs-variable\">key</span>, index);<br>\t&#125;<br><br>\t<span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">\t * 实现命令：LTRIM key start end 修剪list</span><br><span class=\"hljs-comment\">\t * 清空list：ltrim key 1 0（ltrim key start end 中的start要比end大即可，数值且都为正数。）</span><br><span class=\"hljs-comment\">\t */</span><br>\t<span class=\"hljs-variable\">public</span> <span class=\"hljs-variable\">void</span> <span class=\"hljs-title function_\">ltrim</span>(<span class=\"hljs-params\">String</span> <span class=\"hljs-params\">key</span>, <span class=\"hljs-params\">Long</span> <span class=\"hljs-params\">start</span>, <span class=\"hljs-params\">Long</span> <span class=\"hljs-params\">end</span>) &#123;<br>\t\t<span class=\"hljs-variable\">stringRedisTemplate</span>.<span class=\"hljs-property\">opsForList</span>().<span class=\"hljs-property\">trim</span>(<span class=\"hljs-variable\">key</span>, <span class=\"hljs-variable\">start</span>, <span class=\"hljs-variable\">end</span>);<br>\t&#125;<br><br><br>\t<span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">\t * 实现命令：LLEN key 获取list长度</span><br><span class=\"hljs-comment\">\t */</span><br>\t<span class=\"hljs-variable\">public</span> <span class=\"hljs-title class_\">Long</span> <span class=\"hljs-title function_\">llen</span>(<span class=\"hljs-params\">String</span> <span class=\"hljs-params\">key</span>) &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable\">stringRedisTemplate</span>.<span class=\"hljs-property\">opsForList</span>().<span class=\"hljs-property\">size</span>(<span class=\"hljs-variable\">key</span>);<br>\t&#125;<br><br>\t<span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">\t * 如果key不存在那么放入value</span><br><span class=\"hljs-comment\">\t *</span><br><span class=\"hljs-comment\">\t * <span class=\"hljs-doctag\">@param</span> key</span><br><span class=\"hljs-comment\">\t * <span class=\"hljs-doctag\">@param</span> value</span><br><span class=\"hljs-comment\">\t * <span class=\"hljs-doctag\">@param</span> timeout</span><br><span class=\"hljs-comment\">\t * <span class=\"hljs-doctag\">@return</span> boolean</span><br><span class=\"hljs-comment\">\t * <span class=\"hljs-doctag\">@return</span> void</span><br><span class=\"hljs-comment\">\t * <span class=\"hljs-doctag\">@author</span> yabin.zhang</span><br><span class=\"hljs-comment\">\t * <span class=\"hljs-doctag\">@date</span> 2021/11/30 14:04</span><br><span class=\"hljs-comment\">\t */</span><br>\t<span class=\"hljs-variable\">public</span> <span class=\"hljs-title class_\">Boolean</span> <span class=\"hljs-title function_\">setnx</span>(<span class=\"hljs-params\">String</span> <span class=\"hljs-params\">key</span>, <span class=\"hljs-params\">String</span> <span class=\"hljs-params\">value</span>, <span class=\"hljs-params\">long</span> <span class=\"hljs-params\">timeout</span>) &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable\">stringRedisTemplate</span>.<span class=\"hljs-property\">opsForValue</span>().<span class=\"hljs-property\">setIfAbsent</span>(<span class=\"hljs-variable\">key</span>, <span class=\"hljs-variable\">value</span>, <span class=\"hljs-variable\">timeout</span>, <span class=\"hljs-title class_\">TimeUnit</span>.<span class=\"hljs-property\">SECONDS</span>);<br>\t&#125;<br><br>\t<span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">\t * 向set中添加元素</span><br><span class=\"hljs-comment\">\t *</span><br><span class=\"hljs-comment\">\t * <span class=\"hljs-doctag\">@param</span> key   set的key</span><br><span class=\"hljs-comment\">\t * <span class=\"hljs-doctag\">@param</span> value set的value</span><br><span class=\"hljs-comment\">\t */</span><br>\t<span class=\"hljs-variable\">public</span> <span class=\"hljs-variable\">void</span> <span class=\"hljs-title function_\">sAdd</span>(<span class=\"hljs-params\">String</span> <span class=\"hljs-params\">key</span>, <span class=\"hljs-params\">String</span> <span class=\"hljs-params\">value</span>) &#123;<br>\t\t<span class=\"hljs-variable\">stringRedisTemplate</span>.<span class=\"hljs-property\">opsForSet</span>().<span class=\"hljs-property\">add</span>(<span class=\"hljs-variable\">key</span>, <span class=\"hljs-variable\">value</span>);<br>\t&#125;<br><br>\t<span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">\t * set中所有数据</span><br><span class=\"hljs-comment\">\t *</span><br><span class=\"hljs-comment\">\t * <span class=\"hljs-doctag\">@param</span> key set的key</span><br><span class=\"hljs-comment\">\t * <span class=\"hljs-doctag\">@return</span> set中所有数据</span><br><span class=\"hljs-comment\">\t */</span><br>\t<span class=\"hljs-variable\">public</span> <span class=\"hljs-title class_\">Set</span><span class=\"hljs-operator\">&lt;</span><span class=\"hljs-title class_\">String</span><span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-title function_\">sMembers</span>(<span class=\"hljs-params\">String</span> <span class=\"hljs-params\">key</span>) &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable\">stringRedisTemplate</span>.<span class=\"hljs-property\">opsForSet</span>().<span class=\"hljs-property\">members</span>(<span class=\"hljs-variable\">key</span>);<br>\t&#125;<br><br>\t<span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">\t * 删除并返回set中的一个元素</span><br><span class=\"hljs-comment\">\t *</span><br><span class=\"hljs-comment\">\t * <span class=\"hljs-doctag\">@param</span> key set的key</span><br><span class=\"hljs-comment\">\t * <span class=\"hljs-doctag\">@return</span> set中的一个元素</span><br><span class=\"hljs-comment\">\t */</span><br>\t<span class=\"hljs-variable\">public</span> <span class=\"hljs-title class_\">String</span> <span class=\"hljs-title function_\">sPop</span>(<span class=\"hljs-params\">String</span> <span class=\"hljs-params\">key</span>) &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable\">stringRedisTemplate</span>.<span class=\"hljs-property\">opsForSet</span>().<span class=\"hljs-property\">pop</span>(<span class=\"hljs-variable\">key</span>);<br>\t&#125;<br><br>\t<span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">\t * 获取key的大小</span><br><span class=\"hljs-comment\">\t *</span><br><span class=\"hljs-comment\">\t * <span class=\"hljs-doctag\">@param</span> key set的key</span><br><span class=\"hljs-comment\">\t * <span class=\"hljs-doctag\">@return</span> key的大小</span><br><span class=\"hljs-comment\">\t */</span><br>\t<span class=\"hljs-variable\">public</span> <span class=\"hljs-title class_\">Long</span> <span class=\"hljs-title function_\">sCard</span>(<span class=\"hljs-params\">String</span> <span class=\"hljs-params\">key</span>) &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable\">stringRedisTemplate</span>.<span class=\"hljs-property\">opsForSet</span>().<span class=\"hljs-property\">size</span>(<span class=\"hljs-variable\">key</span>);<br>\t&#125;<br><br>\t<span class=\"hljs-variable\">public</span> <span class=\"hljs-title class_\">StringRedisTemplate</span> <span class=\"hljs-title function_\">getTemTemplate</span>()&#123;<br>\t\t<span class=\"hljs-comment\">// 构建工厂对象</span><br>\t\t<span class=\"hljs-title class_\">RedisStandaloneConfiguration</span> <span class=\"hljs-variable\">config</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-variable\">new</span> <span class=\"hljs-title class_\">RedisStandaloneConfiguration</span>();<br>\t\t<span class=\"hljs-variable\">config</span>.<span class=\"hljs-property\">setDatabase</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">database</span>);<br>\t\t<span class=\"hljs-variable\">config</span>.<span class=\"hljs-property\">setHostName</span>(<span class=\"hljs-variable\">host</span>);<br>\t\t<span class=\"hljs-variable\">config</span>.<span class=\"hljs-property\">setPort</span>(<span class=\"hljs-variable\">port</span>);<br>\t\t<span class=\"hljs-variable\">config</span>.<span class=\"hljs-property\">setPassword</span>(<span class=\"hljs-title class_\">RedisPassword</span>.<span class=\"hljs-property\">of</span>(<span class=\"hljs-variable\">password</span>));<br>\t\t<span class=\"hljs-title class_\">LettuceConnectionFactory</span> <span class=\"hljs-variable\">factory</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-variable\">new</span> <span class=\"hljs-title class_\">LettuceConnectionFactory</span>(<span class=\"hljs-variable\">config</span>,<br>\t\t\t\t<span class=\"hljs-title class_\">LettucePoolingClientConfiguration</span>.<span class=\"hljs-property\">builder</span>().<span class=\"hljs-property\">build</span>());<br>\t\t<span class=\"hljs-comment\">// 重新初始化工厂</span><br>\t\t<span class=\"hljs-variable\">factory</span>.<span class=\"hljs-property\">afterPropertiesSet</span>();<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable\">new</span> <span class=\"hljs-title class_\">StringRedisTemplate</span>(<span class=\"hljs-variable\">factory</span>);<br>\t&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720104542631.png\" alt=\"image-20220720104542631\"></p>\n<h3><span id=\"四-yml配置\">四、yml配置</span></h3><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">spring:</span><br>  <span class=\"hljs-attr\">redis:</span><br>    <span class=\"hljs-attr\">host:</span> <span class=\"hljs-string\">localhost</span> <span class=\"hljs-comment\"># Redis服务器地址</span><br>    <span class=\"hljs-attr\">database:</span> <span class=\"hljs-number\">8</span> <span class=\"hljs-comment\"># Redis数据库索引（默认为0）</span><br>    <span class=\"hljs-attr\">database2:</span> <span class=\"hljs-number\">9</span> <span class=\"hljs-comment\"># Redis数据库索引2（默认为0）</span><br>    <span class=\"hljs-attr\">port:</span> <span class=\"hljs-number\">6379</span> <span class=\"hljs-comment\"># Redis服务器连接端口</span><br>    <span class=\"hljs-attr\">password:</span> <span class=\"hljs-string\">root</span> <span class=\"hljs-comment\"># Redis服务器连接密码（默认为空）</span><br>    <span class=\"hljs-attr\">timeout:</span> <span class=\"hljs-string\">3000ms</span> <span class=\"hljs-comment\"># 连接超时时间（毫秒）</span><br></code></pre></td></tr></table></figure>\n\n<h3><span id=\"五-使用\">五、使用</span></h3><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs kotlin\"><span class=\"hljs-meta\">@AllArgsConstructor</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">CommonTest</span> &#123;<br>    <span class=\"hljs-keyword\">private</span> RedisUtils redisUtils;<br>    <span class=\"hljs-meta\">@DB</span><br>    <span class=\"hljs-keyword\">private</span> RedisUtils redisUtils2;<br>    <span class=\"hljs-meta\">@DB(<span class=\"hljs-string\">&quot;<span class=\"hljs-subst\">$&#123;spring.redis.database2&#125;</span>&quot;</span>)</span><br>    <span class=\"hljs-keyword\">private</span> RedisUtils redisUtils3;<br><br>    <span class=\"hljs-meta\">@GetMapping(<span class=\"hljs-string\">&quot;/redis&quot;</span>)</span><br>    <span class=\"hljs-keyword\">public</span> Result test() &#123;<br>        redisUtils.<span class=\"hljs-keyword\">set</span>(<span class=\"hljs-string\">&quot;helloBoy1&quot;</span>, <span class=\"hljs-string\">&quot;helloBoy&quot;</span>);<br>        redisUtils2.<span class=\"hljs-keyword\">set</span>(<span class=\"hljs-string\">&quot;helloBoy2&quot;</span>, <span class=\"hljs-string\">&quot;helloBoy&quot;</span>);<br>        redisUtils3.<span class=\"hljs-keyword\">set</span>(<span class=\"hljs-string\">&quot;helloBoy3&quot;</span>, <span class=\"hljs-string\">&quot;helloBoy&quot;</span>);<br>        <span class=\"hljs-keyword\">return</span> Result.succeed(<span class=\"hljs-string\">&quot;保存成功，请查看redis中的数据&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720104628655.png\" alt=\"image-20220720104628655\"></p>\n","site":{"data":{}},"wordcount":9679,"excerpt":"","more":"<h1 id=\"Spring-Boot-amp-自定义注解-实现从配置文件自选择redis-db数据源\"><a href=\"#Spring-Boot-amp-自定义注解-实现从配置文件自选择redis-db数据源\" class=\"headerlink\" title=\"Spring Boot &amp; 自定义注解 实现从配置文件自选择redis db数据源\"></a>Spring Boot &amp; 自定义注解 实现从配置文件自选择redis db数据源</h1><hr>\n<p>[toc]</p>\n<hr>\n<h3 id=\"一、-新建注解\"><a href=\"#一、-新建注解\" class=\"headerlink\" title=\"一、 新建注解\"></a>一、 新建注解</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Target(&#123;ElementType.FIELD,ElementType.CONSTRUCTOR&#125;)</span> <span class=\"hljs-comment\">//声明应用在属性上</span><br><span class=\"hljs-meta\">@Retention(RetentionPolicy.RUNTIME)</span> <span class=\"hljs-comment\">//运行期生效</span><br><span class=\"hljs-meta\">@Component</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-meta\">@interface</span> DB &#123;<br>    String <span class=\"hljs-title function_\">value</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-string\">&quot;&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>@Target：</p>\n<ul>\n<li><p>说明了Annotation所修饰的对象范围：Annotation可被用于 packages、types（类、接口、枚举、Annotation类型）、类型成员（方法、构造方法、成员变量、枚举值）、方法参数和本地变量（如循环变量、catch参数）。在Annotation类型的声明中使用了target可更加明晰其修饰的目标。</p>\n</li>\n<li><p>作用：用于描述注解的使用范围（即：被描述的注解可以用在什么地方）</p>\n</li>\n<li><p>取值(ElementType)有：</p>\n<ol>\n<li>CONSTRUCTOR:用于描述构造器</li>\n<li>FIELD:用于描述域</li>\n<li>LOCAL_VARIABLE:用于描述局部变量</li>\n<li>METHOD:用于描述方法</li>\n<li>PACKAGE:用于描述包</li>\n<li>PARAMETER:用于描述参数</li>\n<li>TYPE:用于描述类、接口(包括注解类型) 或enum声明</li>\n</ol>\n</li>\n</ul>\n<p>@Retention：</p>\n<ul>\n<li>@Retention定义了该Annotation被保留的时间长短：某些Annotation仅出现在源代码中，而被编译器丢弃；而另一些却被编译在class文件中；编译在class文件中的Annotation可能会被虚拟机忽略，而另一些在class被装载时将被读取（请注意并不影响class的执行，因为Annotation与class在使用上是被分离的）。使用这个meta-Annotation可以对 Annotation的“生命周期”限制。</li>\n<li>作用：表示需要在什么级别保存该注释信息，用于描述注解的生命周期（即：被描述的注解在什么范围内有效）</li>\n<li>取值（RetentionPoicy）有：<ol>\n<li>SOURCE:在源文件中有效（即源文件保留）</li>\n<li>CLASS:在class文件中有效（即class保留）</li>\n<li>RUNTIME:在运行时有效（即运行时保留）</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"二、通过Bean后置处理器自定义注解配置redis\"><a href=\"#二、通过Bean后置处理器自定义注解配置redis\" class=\"headerlink\" title=\"二、通过Bean后置处理器自定义注解配置redis\"></a>二、通过Bean后置处理器自定义注解配置redis</h3><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs kotlin\"><span class=\"hljs-meta\">@Component</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">RedisBeanPostProcessor</span> <span class=\"hljs-title\">implements</span> <span class=\"hljs-title\">BeanPostProcessor</span> &#123;<br>    <span class=\"hljs-meta\">@Resource</span><br>    Environment environment;<br>    <span class=\"hljs-meta\">@Value(<span class=\"hljs-string\">&quot;<span class=\"hljs-subst\">$&#123;spring.redis.host&#125;</span>&quot;</span>)</span><br>    <span class=\"hljs-keyword\">private</span> String host;<br>    <span class=\"hljs-meta\">@Value(<span class=\"hljs-string\">&quot;<span class=\"hljs-subst\">$&#123;spring.redis.password&#125;</span>&quot;</span>)</span><br>    <span class=\"hljs-keyword\">private</span> String password;<br>    <span class=\"hljs-meta\">@Value(<span class=\"hljs-string\">&quot;<span class=\"hljs-subst\">$&#123;spring.redis.port&#125;</span>&quot;</span>)</span><br>    <span class=\"hljs-keyword\">private</span> int port;<br><br>    <span class=\"hljs-meta\">@SneakyThrows</span><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException &#123;<br>        <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">         * 利用Java反射机制注入属性</span><br><span class=\"hljs-comment\">         */</span><br>        Field[] declaredFields = bean.getClass().getDeclaredFields();<br>        <span class=\"hljs-keyword\">for</span> (Field declaredField : declaredFields) &#123;<br>            DB <span class=\"hljs-keyword\">annotation</span> = declaredField.getAnnotation(DB.<span class=\"hljs-keyword\">class</span>);<br>            <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-literal\">null</span> == <span class=\"hljs-keyword\">annotation</span>) &#123;<br>                <span class=\"hljs-keyword\">continue</span>;<br>            &#125;<br>            <span class=\"hljs-comment\">//从环境变量中获取值</span><br>            String dbKey = ObjectUtil.defaultIfEmpty(<span class=\"hljs-keyword\">annotation</span>.value(), <span class=\"hljs-string\">&quot;<span class=\"hljs-subst\">$&#123;spring.redis.database&#125;</span>&quot;</span>);<br>            String dbIndex = environment.resolvePlaceholders(dbKey);<br>            RedisUtils redisUtils = new RedisUtils(host, password, port, dbIndex);<br>            <span class=\"hljs-keyword\">try</span> &#123;<br>                declaredField.setAccessible(<span class=\"hljs-literal\">true</span>);<br>                declaredField.<span class=\"hljs-keyword\">set</span>(bean, redisUtils);<br>            &#125; <span class=\"hljs-keyword\">catch</span> (IllegalAccessException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> bean;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> Object postProcessAfterInitialization(Object o, String s) throws BeansException &#123;<br>        <span class=\"hljs-keyword\">return</span> o;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720104437102.png\" alt=\"image-20220720104437102\"></p>\n<h3 id=\"三、RedisUtil\"><a href=\"#三、RedisUtil\" class=\"headerlink\" title=\"三、RedisUtil\"></a>三、RedisUtil</h3><figure class=\"highlight wren\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs wren\">@<span class=\"hljs-title class_\">Component</span><br>@<span class=\"hljs-title class_\">Data</span><br>@<span class=\"hljs-title class_\">Slf</span>4j<br>@<span class=\"hljs-title class_\">NoArgsConstructor</span><br><span class=\"hljs-variable\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">RedisUtils</span> &#123;<br>\t@<span class=\"hljs-title class_\">Value</span>(<span class=\"hljs-string\">&quot;$&#123;spring.redis.host&#125;&quot;</span>)<br>\t<span class=\"hljs-variable\">private</span> <span class=\"hljs-title class_\">String</span> <span class=\"hljs-variable\">host</span>;<br><br>\t@<span class=\"hljs-title class_\">Value</span>(<span class=\"hljs-string\">&quot;$&#123;spring.redis.password&#125;&quot;</span>)<br>\t<span class=\"hljs-variable\">private</span> <span class=\"hljs-title class_\">String</span> <span class=\"hljs-variable\">password</span>;<br><br>\t@<span class=\"hljs-title class_\">Value</span>(<span class=\"hljs-string\">&quot;$&#123;spring.redis.port&#125;&quot;</span>)<br>\t<span class=\"hljs-variable\">private</span> int <span class=\"hljs-variable\">port</span>;<br><br>\t@<span class=\"hljs-title class_\">Value</span>(<span class=\"hljs-string\">&quot;$&#123;spring.redis.database&#125;&quot;</span>)<br>\t<span class=\"hljs-variable\">private</span> int <span class=\"hljs-variable\">database</span>;<br><br>\t@<span class=\"hljs-title class_\">Resource</span><br>\t<span class=\"hljs-variable\">private</span> <span class=\"hljs-title class_\">StringRedisTemplate</span> <span class=\"hljs-variable\">stringRedisTemplate</span>;<br><br>\t<span class=\"hljs-variable\">public</span> <span class=\"hljs-title class_\">RedisUtils</span>(<span class=\"hljs-title class_\">String</span> <span class=\"hljs-variable\">host</span>, <span class=\"hljs-title class_\">String</span> <span class=\"hljs-variable\">password</span>, int <span class=\"hljs-variable\">port</span>, <span class=\"hljs-title class_\">String</span> <span class=\"hljs-variable\">database</span>) &#123;<br>\t\t<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">host</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-variable\">host</span>;<br>\t\t<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">password</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-variable\">password</span>;<br>\t\t<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">port</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-variable\">port</span>;<br>\t\t<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">database</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-title class_\">Convert</span>.<span class=\"hljs-property\">toInt</span>(<span class=\"hljs-variable\">database</span>);<br>\t\t<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">stringRedisTemplate</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-title function_\">getTemTemplate</span>();<br>\t&#125;<br>\t<span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">\t * 实现命令：TTL key，以秒为单位，返回给定 key的剩余生存时间(TTL, time to live)。</span><br><span class=\"hljs-comment\">\t *</span><br><span class=\"hljs-comment\">\t * <span class=\"hljs-doctag\">@param</span> key</span><br><span class=\"hljs-comment\">\t * <span class=\"hljs-doctag\">@return</span></span><br><span class=\"hljs-comment\">\t */</span><br>\t<span class=\"hljs-variable\">public</span> <span class=\"hljs-variable\">long</span> <span class=\"hljs-title function_\">ttl</span>(<span class=\"hljs-params\">String</span> <span class=\"hljs-params\">key</span>) &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable\">stringRedisTemplate</span>.<span class=\"hljs-property\">getExpire</span>(<span class=\"hljs-variable\">key</span>);<br>\t&#125;<br><br>\t<span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">\t * 实现命令：expire 设置过期时间，单位秒</span><br><span class=\"hljs-comment\">\t *</span><br><span class=\"hljs-comment\">\t * <span class=\"hljs-doctag\">@param</span> key</span><br><span class=\"hljs-comment\">\t * <span class=\"hljs-doctag\">@return</span></span><br><span class=\"hljs-comment\">\t */</span><br>\t<span class=\"hljs-variable\">public</span> <span class=\"hljs-variable\">void</span> <span class=\"hljs-title function_\">expire</span>(<span class=\"hljs-params\">String</span> <span class=\"hljs-params\">key</span>, <span class=\"hljs-params\">long</span> <span class=\"hljs-params\">timeout</span>) &#123;<br>\t\t<span class=\"hljs-variable\">stringRedisTemplate</span>.<span class=\"hljs-property\">expire</span>(<span class=\"hljs-variable\">key</span>, <span class=\"hljs-variable\">timeout</span>, <span class=\"hljs-title class_\">TimeUnit</span>.<span class=\"hljs-property\">SECONDS</span>);<br>\t&#125;<br><br>\t<span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">\t * 是否存在key</span><br><span class=\"hljs-comment\">\t *</span><br><span class=\"hljs-comment\">\t * <span class=\"hljs-doctag\">@param</span> key</span><br><span class=\"hljs-comment\">\t */</span><br>\t<span class=\"hljs-variable\">public</span> <span class=\"hljs-title class_\">Boolean</span> <span class=\"hljs-title function_\">hasKey</span>(<span class=\"hljs-params\">String</span> <span class=\"hljs-params\">key</span>) &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable\">stringRedisTemplate</span>.<span class=\"hljs-property\">hasKey</span>(<span class=\"hljs-variable\">key</span>);<br>\t&#125;<br><br>\t<span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">\t * 实现命令：INCR key，增加key一次</span><br><span class=\"hljs-comment\">\t *</span><br><span class=\"hljs-comment\">\t * <span class=\"hljs-doctag\">@param</span> key</span><br><span class=\"hljs-comment\">\t * <span class=\"hljs-doctag\">@return</span></span><br><span class=\"hljs-comment\">\t */</span><br>\t<span class=\"hljs-variable\">public</span> <span class=\"hljs-variable\">long</span> <span class=\"hljs-title function_\">incr</span>(<span class=\"hljs-params\">String</span> <span class=\"hljs-params\">key</span>, <span class=\"hljs-params\">long</span> <span class=\"hljs-params\">delta</span>) &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable\">stringRedisTemplate</span>.<span class=\"hljs-property\">opsForValue</span>().<span class=\"hljs-property\">increment</span>(<span class=\"hljs-variable\">key</span>, <span class=\"hljs-variable\">delta</span>);<br>\t&#125;<br><br>\t<span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">\t * 实现命令：KEYS pattern，查找所有符合给定模式 pattern的 key</span><br><span class=\"hljs-comment\">\t */</span><br>\t<span class=\"hljs-variable\">public</span> <span class=\"hljs-title class_\">Set</span><span class=\"hljs-operator\">&lt;</span><span class=\"hljs-title class_\">String</span><span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-title function_\">keys</span>(<span class=\"hljs-params\">String</span> <span class=\"hljs-params\">pattern</span>) &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable\">stringRedisTemplate</span>.<span class=\"hljs-property\">keys</span>(<span class=\"hljs-variable\">pattern</span>);<br>\t&#125;<br><br>\t<span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">\t * 实现命令：DEL key，删除一个key</span><br><span class=\"hljs-comment\">\t *</span><br><span class=\"hljs-comment\">\t * <span class=\"hljs-doctag\">@param</span> key</span><br><span class=\"hljs-comment\">\t */</span><br>\t<span class=\"hljs-variable\">public</span> <span class=\"hljs-variable\">void</span> <span class=\"hljs-title function_\">del</span>(<span class=\"hljs-params\">String</span> <span class=\"hljs-params\">key</span>) &#123;<br>\t\t<span class=\"hljs-variable\">stringRedisTemplate</span>.<span class=\"hljs-property\">delete</span>(<span class=\"hljs-variable\">key</span>);<br>\t&#125;<br><br>\t<span class=\"hljs-comment\">// String（字符串）</span><br><br>\t<span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">\t * 实现命令：SET key value，设置一个key-value（将字符串值 value关联到 key）</span><br><span class=\"hljs-comment\">\t *</span><br><span class=\"hljs-comment\">\t * <span class=\"hljs-doctag\">@param</span> key</span><br><span class=\"hljs-comment\">\t * <span class=\"hljs-doctag\">@param</span> value</span><br><span class=\"hljs-comment\">\t */</span><br>\t<span class=\"hljs-variable\">public</span> <span class=\"hljs-variable\">void</span> <span class=\"hljs-title function_\">set</span>(<span class=\"hljs-params\">String</span> <span class=\"hljs-params\">key</span>, <span class=\"hljs-params\">String</span> <span class=\"hljs-params\">value</span>) &#123;<br>\t\t<span class=\"hljs-variable\">stringRedisTemplate</span>.<span class=\"hljs-property\">opsForValue</span>().<span class=\"hljs-property\">set</span>(<span class=\"hljs-variable\">key</span>, <span class=\"hljs-variable\">value</span>);<br>\t&#125;<br><br>\t<span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">\t * 实现命令：SET key value EX seconds，设置key-value和超时时间（秒）</span><br><span class=\"hljs-comment\">\t *</span><br><span class=\"hljs-comment\">\t * <span class=\"hljs-doctag\">@param</span> key</span><br><span class=\"hljs-comment\">\t * <span class=\"hljs-doctag\">@param</span> value</span><br><span class=\"hljs-comment\">\t * <span class=\"hljs-doctag\">@param</span> timeout （以秒为单位）</span><br><span class=\"hljs-comment\">\t */</span><br>\t<span class=\"hljs-variable\">public</span> <span class=\"hljs-variable\">void</span> <span class=\"hljs-title function_\">set</span>(<span class=\"hljs-params\">String</span> <span class=\"hljs-params\">key</span>, <span class=\"hljs-params\">String</span> <span class=\"hljs-params\">value</span>, <span class=\"hljs-params\">long</span> <span class=\"hljs-params\">timeout</span>) &#123;<br>\t\t<span class=\"hljs-variable\">stringRedisTemplate</span>.<span class=\"hljs-property\">opsForValue</span>().<span class=\"hljs-property\">set</span>(<span class=\"hljs-variable\">key</span>, <span class=\"hljs-variable\">value</span>, <span class=\"hljs-variable\">timeout</span>, <span class=\"hljs-title class_\">TimeUnit</span>.<span class=\"hljs-property\">SECONDS</span>);<br>\t&#125;<br><br>\t<span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">\t * 实现命令：GET key，返回 key所关联的字符串值。</span><br><span class=\"hljs-comment\">\t *</span><br><span class=\"hljs-comment\">\t * <span class=\"hljs-doctag\">@param</span> key</span><br><span class=\"hljs-comment\">\t * <span class=\"hljs-doctag\">@return</span> value</span><br><span class=\"hljs-comment\">\t */</span><br>\t<span class=\"hljs-variable\">public</span> <span class=\"hljs-title class_\">String</span> <span class=\"hljs-title function_\">get</span>(<span class=\"hljs-params\">String</span> <span class=\"hljs-params\">key</span>) &#123;<br>\t\t<span class=\"hljs-title function_\">return</span> (<span class=\"hljs-title class_\">String</span>) <span class=\"hljs-variable\">stringRedisTemplate</span>.<span class=\"hljs-property\">opsForValue</span>().<span class=\"hljs-property\">get</span>(<span class=\"hljs-variable\">key</span>);<br>\t&#125;<br><br>\t<span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">\t * 批量查询，对应mget</span><br><span class=\"hljs-comment\">\t *</span><br><span class=\"hljs-comment\">\t * <span class=\"hljs-doctag\">@param</span> keys</span><br><span class=\"hljs-comment\">\t * <span class=\"hljs-doctag\">@return</span></span><br><span class=\"hljs-comment\">\t */</span><br>\t<span class=\"hljs-variable\">public</span> <span class=\"hljs-title class_\">List</span><span class=\"hljs-operator\">&lt;</span><span class=\"hljs-title class_\">String</span><span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-title function_\">mget</span>(<span class=\"hljs-params\">List</span>&lt;<span class=\"hljs-params\">String</span>&gt; <span class=\"hljs-params\">keys</span>) &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable\">stringRedisTemplate</span>.<span class=\"hljs-property\">opsForValue</span>().<span class=\"hljs-property\">multiGet</span>(<span class=\"hljs-variable\">keys</span>);<br>\t&#125;<br><br>\t<span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">\t * 批量查询，管道pipeline</span><br><span class=\"hljs-comment\">\t *</span><br><span class=\"hljs-comment\">\t * <span class=\"hljs-doctag\">@param</span> keys</span><br><span class=\"hljs-comment\">\t * <span class=\"hljs-doctag\">@return</span></span><br><span class=\"hljs-comment\">\t */</span><br>\t<span class=\"hljs-variable\">public</span> <span class=\"hljs-title class_\">List</span><span class=\"hljs-operator\">&lt;</span><span class=\"hljs-title class_\">Object</span><span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-title function_\">batchGet</span>(<span class=\"hljs-params\">List</span>&lt;<span class=\"hljs-params\">String</span>&gt; <span class=\"hljs-params\">keys</span>) &#123;<br><br>\t\t<span class=\"hljs-title class_\">List</span><span class=\"hljs-operator\">&lt;</span><span class=\"hljs-title class_\">Object</span><span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-variable\">result</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-variable\">stringRedisTemplate</span>.<span class=\"hljs-property\">executePipelined</span>(<span class=\"hljs-variable\">new</span> <span class=\"hljs-title class_\">RedisCallback</span><span class=\"hljs-operator\">&lt;</span><span class=\"hljs-title class_\">String</span><span class=\"hljs-operator\">&gt;</span>() &#123;<br>\t\t\t@<span class=\"hljs-title class_\">Override</span><br>\t\t\t<span class=\"hljs-variable\">public</span> <span class=\"hljs-title class_\">String</span> <span class=\"hljs-title function_\">doInRedis</span>(<span class=\"hljs-title class_\">RedisConnection</span> <span class=\"hljs-variable\">connection</span>) <span class=\"hljs-variable\">throws</span> <span class=\"hljs-title class_\">DataAccessException</span> &#123;<br>\t\t\t\t<span class=\"hljs-title class_\">StringRedisConnection</span> <span class=\"hljs-variable\">src</span> <span class=\"hljs-operator\">=</span> (<span class=\"hljs-title class_\">StringRedisConnection</span>) <span class=\"hljs-variable\">connection</span>;<br><br>\t\t\t\t<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-title class_\">String</span> <span class=\"hljs-variable\">k</span> : <span class=\"hljs-variable\">keys</span>) &#123;<br>\t\t\t\t\t<span class=\"hljs-variable\">src</span>.<span class=\"hljs-property\">get</span>(<span class=\"hljs-variable\">k</span>);<br>\t\t\t\t&#125;<br>\t\t\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;<br>\t\t\t&#125;<br>\t\t&#125;);<br><br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable\">result</span>;<br>\t&#125;<br><br><br>\t<span class=\"hljs-comment\">// Hash（哈希表）</span><br><br>\t<span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">\t * 实现命令：HSET key field value，将哈希表 key中的域 field的值设为 value</span><br><span class=\"hljs-comment\">\t *</span><br><span class=\"hljs-comment\">\t * <span class=\"hljs-doctag\">@param</span> key</span><br><span class=\"hljs-comment\">\t * <span class=\"hljs-doctag\">@param</span> field</span><br><span class=\"hljs-comment\">\t * <span class=\"hljs-doctag\">@param</span> value</span><br><span class=\"hljs-comment\">\t */</span><br>\t<span class=\"hljs-variable\">public</span> <span class=\"hljs-variable\">void</span> <span class=\"hljs-title function_\">hset</span>(<span class=\"hljs-params\">String</span> <span class=\"hljs-params\">key</span>, <span class=\"hljs-params\">String</span> <span class=\"hljs-params\">field</span>, <span class=\"hljs-params\">Object</span> <span class=\"hljs-params\">value</span>) &#123;<br>\t\t<span class=\"hljs-variable\">stringRedisTemplate</span>.<span class=\"hljs-property\">opsForHash</span>().<span class=\"hljs-property\">put</span>(<span class=\"hljs-variable\">key</span>, <span class=\"hljs-variable\">field</span>, <span class=\"hljs-variable\">value</span>);<br>\t&#125;<br><br>\t<span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">\t * 实现命令：HGET key field，返回哈希表 key中给定域 field的值</span><br><span class=\"hljs-comment\">\t *</span><br><span class=\"hljs-comment\">\t * <span class=\"hljs-doctag\">@param</span> key</span><br><span class=\"hljs-comment\">\t * <span class=\"hljs-doctag\">@param</span> field</span><br><span class=\"hljs-comment\">\t * <span class=\"hljs-doctag\">@return</span></span><br><span class=\"hljs-comment\">\t */</span><br>\t<span class=\"hljs-variable\">public</span> <span class=\"hljs-title class_\">String</span> <span class=\"hljs-title function_\">hget</span>(<span class=\"hljs-params\">String</span> <span class=\"hljs-params\">key</span>, <span class=\"hljs-params\">String</span> <span class=\"hljs-params\">field</span>) &#123;<br>\t\t<span class=\"hljs-title function_\">return</span> (<span class=\"hljs-title class_\">String</span>) <span class=\"hljs-variable\">stringRedisTemplate</span>.<span class=\"hljs-property\">opsForHash</span>().<span class=\"hljs-property\">get</span>(<span class=\"hljs-variable\">key</span>, <span class=\"hljs-variable\">field</span>);<br>\t&#125;<br><br>\t<span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">\t * 实现命令：HDEL key field [field ...]，删除哈希表 key 中的一个或多个指定域，不存在的域将被忽略。</span><br><span class=\"hljs-comment\">\t *</span><br><span class=\"hljs-comment\">\t * <span class=\"hljs-doctag\">@param</span> key</span><br><span class=\"hljs-comment\">\t * <span class=\"hljs-doctag\">@param</span> fields</span><br><span class=\"hljs-comment\">\t */</span><br>\t<span class=\"hljs-variable\">public</span> <span class=\"hljs-variable\">void</span> <span class=\"hljs-title function_\">hdel</span>(<span class=\"hljs-params\">String</span> <span class=\"hljs-params\">key</span>, <span class=\"hljs-params\">Object</span>... <span class=\"hljs-params\">fields</span>) &#123;<br>\t\t<span class=\"hljs-variable\">stringRedisTemplate</span>.<span class=\"hljs-property\">opsForHash</span>().<span class=\"hljs-property\">delete</span>(<span class=\"hljs-variable\">key</span>, <span class=\"hljs-variable\">fields</span>);<br>\t&#125;<br><br>\t<span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">\t * 实现命令：HGETALL key，返回哈希表 key中，所有的域和值。</span><br><span class=\"hljs-comment\">\t *</span><br><span class=\"hljs-comment\">\t * <span class=\"hljs-doctag\">@param</span> key</span><br><span class=\"hljs-comment\">\t * <span class=\"hljs-doctag\">@return</span></span><br><span class=\"hljs-comment\">\t */</span><br>\t<span class=\"hljs-variable\">public</span> <span class=\"hljs-title class_\">Map</span><span class=\"hljs-operator\">&lt;</span><span class=\"hljs-title class_\">Object</span>, <span class=\"hljs-title class_\">Object</span><span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-title function_\">hgetall</span>(<span class=\"hljs-params\">String</span> <span class=\"hljs-params\">key</span>) &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable\">stringRedisTemplate</span>.<span class=\"hljs-property\">opsForHash</span>().<span class=\"hljs-property\">entries</span>(<span class=\"hljs-variable\">key</span>);<br>\t&#125;<br><br>\t<span class=\"hljs-comment\">// List（列表）</span><br><br>\t<span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">\t * 实现命令：LPUSH key value，将一个值 value插入到列表 key的表头</span><br><span class=\"hljs-comment\">\t *</span><br><span class=\"hljs-comment\">\t * <span class=\"hljs-doctag\">@param</span> key</span><br><span class=\"hljs-comment\">\t * <span class=\"hljs-doctag\">@param</span> value</span><br><span class=\"hljs-comment\">\t * <span class=\"hljs-doctag\">@return</span> 执行 LPUSH命令后，列表的长度。</span><br><span class=\"hljs-comment\">\t */</span><br>\t<span class=\"hljs-variable\">public</span> <span class=\"hljs-variable\">long</span> <span class=\"hljs-title function_\">lpush</span>(<span class=\"hljs-params\">String</span> <span class=\"hljs-params\">key</span>, <span class=\"hljs-params\">String</span> <span class=\"hljs-params\">value</span>) &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable\">stringRedisTemplate</span>.<span class=\"hljs-property\">opsForList</span>().<span class=\"hljs-property\">leftPush</span>(<span class=\"hljs-variable\">key</span>, <span class=\"hljs-variable\">value</span>);<br>\t&#125;<br><br>\t<span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">\t * 实现命令：LPOP key，移除并返回列表 key的头元素。</span><br><span class=\"hljs-comment\">\t *</span><br><span class=\"hljs-comment\">\t * <span class=\"hljs-doctag\">@param</span> key</span><br><span class=\"hljs-comment\">\t * <span class=\"hljs-doctag\">@return</span> 列表key的头元素。</span><br><span class=\"hljs-comment\">\t */</span><br>\t<span class=\"hljs-variable\">public</span> <span class=\"hljs-title class_\">String</span> <span class=\"hljs-title function_\">lpop</span>(<span class=\"hljs-params\">String</span> <span class=\"hljs-params\">key</span>) &#123;<br>\t\t<span class=\"hljs-title function_\">return</span> (<span class=\"hljs-title class_\">String</span>) <span class=\"hljs-variable\">stringRedisTemplate</span>.<span class=\"hljs-property\">opsForList</span>().<span class=\"hljs-property\">leftPop</span>(<span class=\"hljs-variable\">key</span>);<br>\t&#125;<br><br>\t<span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">\t * 实现命令：RPUSH key value，将一个值 value插入到列表 key的表尾(最右边)。</span><br><span class=\"hljs-comment\">\t *</span><br><span class=\"hljs-comment\">\t * <span class=\"hljs-doctag\">@param</span> key</span><br><span class=\"hljs-comment\">\t * <span class=\"hljs-doctag\">@param</span> value</span><br><span class=\"hljs-comment\">\t * <span class=\"hljs-doctag\">@return</span> 执行 LPUSH命令后，列表的长度。</span><br><span class=\"hljs-comment\">\t */</span><br>\t<span class=\"hljs-variable\">public</span> <span class=\"hljs-variable\">long</span> <span class=\"hljs-title function_\">rpush</span>(<span class=\"hljs-params\">String</span> <span class=\"hljs-params\">key</span>, <span class=\"hljs-params\">String</span> <span class=\"hljs-params\">value</span>) &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable\">stringRedisTemplate</span>.<span class=\"hljs-property\">opsForList</span>().<span class=\"hljs-property\">rightPush</span>(<span class=\"hljs-variable\">key</span>, <span class=\"hljs-variable\">value</span>);<br>\t&#125;<br><br>\t<span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">\t * 实现命令：RPOP key，移除并返回列表最右边的元素。</span><br><span class=\"hljs-comment\">\t *</span><br><span class=\"hljs-comment\">\t * <span class=\"hljs-doctag\">@param</span> key</span><br><span class=\"hljs-comment\">\t * <span class=\"hljs-doctag\">@return</span> 列表key的最右边元素。</span><br><span class=\"hljs-comment\">\t */</span><br>\t<span class=\"hljs-variable\">public</span> <span class=\"hljs-title class_\">String</span> <span class=\"hljs-title function_\">rpop</span>(<span class=\"hljs-params\">String</span> <span class=\"hljs-params\">key</span>) &#123;<br>\t\t<span class=\"hljs-title function_\">return</span> (<span class=\"hljs-title class_\">String</span>) <span class=\"hljs-variable\">stringRedisTemplate</span>.<span class=\"hljs-property\">opsForList</span>().<span class=\"hljs-property\">rightPop</span>(<span class=\"hljs-variable\">key</span>);<br>\t&#125;<br><br>\t<span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">\t * 实现命令：LINDEX key index</span><br><span class=\"hljs-comment\">\t *</span><br><span class=\"hljs-comment\">\t * <span class=\"hljs-doctag\">@return</span> index对应的值</span><br><span class=\"hljs-comment\">\t */</span><br>\t<span class=\"hljs-variable\">public</span> <span class=\"hljs-title class_\">String</span> <span class=\"hljs-title function_\">lindex</span>(<span class=\"hljs-params\">String</span> <span class=\"hljs-params\">key</span>, <span class=\"hljs-params\">Integer</span> <span class=\"hljs-params\">index</span>) &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable\">stringRedisTemplate</span>.<span class=\"hljs-property\">opsForList</span>().<span class=\"hljs-property\">index</span>(<span class=\"hljs-variable\">key</span>, index);<br>\t&#125;<br><br>\t<span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">\t * 实现命令：LTRIM key start end 修剪list</span><br><span class=\"hljs-comment\">\t * 清空list：ltrim key 1 0（ltrim key start end 中的start要比end大即可，数值且都为正数。）</span><br><span class=\"hljs-comment\">\t */</span><br>\t<span class=\"hljs-variable\">public</span> <span class=\"hljs-variable\">void</span> <span class=\"hljs-title function_\">ltrim</span>(<span class=\"hljs-params\">String</span> <span class=\"hljs-params\">key</span>, <span class=\"hljs-params\">Long</span> <span class=\"hljs-params\">start</span>, <span class=\"hljs-params\">Long</span> <span class=\"hljs-params\">end</span>) &#123;<br>\t\t<span class=\"hljs-variable\">stringRedisTemplate</span>.<span class=\"hljs-property\">opsForList</span>().<span class=\"hljs-property\">trim</span>(<span class=\"hljs-variable\">key</span>, <span class=\"hljs-variable\">start</span>, <span class=\"hljs-variable\">end</span>);<br>\t&#125;<br><br><br>\t<span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">\t * 实现命令：LLEN key 获取list长度</span><br><span class=\"hljs-comment\">\t */</span><br>\t<span class=\"hljs-variable\">public</span> <span class=\"hljs-title class_\">Long</span> <span class=\"hljs-title function_\">llen</span>(<span class=\"hljs-params\">String</span> <span class=\"hljs-params\">key</span>) &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable\">stringRedisTemplate</span>.<span class=\"hljs-property\">opsForList</span>().<span class=\"hljs-property\">size</span>(<span class=\"hljs-variable\">key</span>);<br>\t&#125;<br><br>\t<span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">\t * 如果key不存在那么放入value</span><br><span class=\"hljs-comment\">\t *</span><br><span class=\"hljs-comment\">\t * <span class=\"hljs-doctag\">@param</span> key</span><br><span class=\"hljs-comment\">\t * <span class=\"hljs-doctag\">@param</span> value</span><br><span class=\"hljs-comment\">\t * <span class=\"hljs-doctag\">@param</span> timeout</span><br><span class=\"hljs-comment\">\t * <span class=\"hljs-doctag\">@return</span> boolean</span><br><span class=\"hljs-comment\">\t * <span class=\"hljs-doctag\">@return</span> void</span><br><span class=\"hljs-comment\">\t * <span class=\"hljs-doctag\">@author</span> yabin.zhang</span><br><span class=\"hljs-comment\">\t * <span class=\"hljs-doctag\">@date</span> 2021/11/30 14:04</span><br><span class=\"hljs-comment\">\t */</span><br>\t<span class=\"hljs-variable\">public</span> <span class=\"hljs-title class_\">Boolean</span> <span class=\"hljs-title function_\">setnx</span>(<span class=\"hljs-params\">String</span> <span class=\"hljs-params\">key</span>, <span class=\"hljs-params\">String</span> <span class=\"hljs-params\">value</span>, <span class=\"hljs-params\">long</span> <span class=\"hljs-params\">timeout</span>) &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable\">stringRedisTemplate</span>.<span class=\"hljs-property\">opsForValue</span>().<span class=\"hljs-property\">setIfAbsent</span>(<span class=\"hljs-variable\">key</span>, <span class=\"hljs-variable\">value</span>, <span class=\"hljs-variable\">timeout</span>, <span class=\"hljs-title class_\">TimeUnit</span>.<span class=\"hljs-property\">SECONDS</span>);<br>\t&#125;<br><br>\t<span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">\t * 向set中添加元素</span><br><span class=\"hljs-comment\">\t *</span><br><span class=\"hljs-comment\">\t * <span class=\"hljs-doctag\">@param</span> key   set的key</span><br><span class=\"hljs-comment\">\t * <span class=\"hljs-doctag\">@param</span> value set的value</span><br><span class=\"hljs-comment\">\t */</span><br>\t<span class=\"hljs-variable\">public</span> <span class=\"hljs-variable\">void</span> <span class=\"hljs-title function_\">sAdd</span>(<span class=\"hljs-params\">String</span> <span class=\"hljs-params\">key</span>, <span class=\"hljs-params\">String</span> <span class=\"hljs-params\">value</span>) &#123;<br>\t\t<span class=\"hljs-variable\">stringRedisTemplate</span>.<span class=\"hljs-property\">opsForSet</span>().<span class=\"hljs-property\">add</span>(<span class=\"hljs-variable\">key</span>, <span class=\"hljs-variable\">value</span>);<br>\t&#125;<br><br>\t<span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">\t * set中所有数据</span><br><span class=\"hljs-comment\">\t *</span><br><span class=\"hljs-comment\">\t * <span class=\"hljs-doctag\">@param</span> key set的key</span><br><span class=\"hljs-comment\">\t * <span class=\"hljs-doctag\">@return</span> set中所有数据</span><br><span class=\"hljs-comment\">\t */</span><br>\t<span class=\"hljs-variable\">public</span> <span class=\"hljs-title class_\">Set</span><span class=\"hljs-operator\">&lt;</span><span class=\"hljs-title class_\">String</span><span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-title function_\">sMembers</span>(<span class=\"hljs-params\">String</span> <span class=\"hljs-params\">key</span>) &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable\">stringRedisTemplate</span>.<span class=\"hljs-property\">opsForSet</span>().<span class=\"hljs-property\">members</span>(<span class=\"hljs-variable\">key</span>);<br>\t&#125;<br><br>\t<span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">\t * 删除并返回set中的一个元素</span><br><span class=\"hljs-comment\">\t *</span><br><span class=\"hljs-comment\">\t * <span class=\"hljs-doctag\">@param</span> key set的key</span><br><span class=\"hljs-comment\">\t * <span class=\"hljs-doctag\">@return</span> set中的一个元素</span><br><span class=\"hljs-comment\">\t */</span><br>\t<span class=\"hljs-variable\">public</span> <span class=\"hljs-title class_\">String</span> <span class=\"hljs-title function_\">sPop</span>(<span class=\"hljs-params\">String</span> <span class=\"hljs-params\">key</span>) &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable\">stringRedisTemplate</span>.<span class=\"hljs-property\">opsForSet</span>().<span class=\"hljs-property\">pop</span>(<span class=\"hljs-variable\">key</span>);<br>\t&#125;<br><br>\t<span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">\t * 获取key的大小</span><br><span class=\"hljs-comment\">\t *</span><br><span class=\"hljs-comment\">\t * <span class=\"hljs-doctag\">@param</span> key set的key</span><br><span class=\"hljs-comment\">\t * <span class=\"hljs-doctag\">@return</span> key的大小</span><br><span class=\"hljs-comment\">\t */</span><br>\t<span class=\"hljs-variable\">public</span> <span class=\"hljs-title class_\">Long</span> <span class=\"hljs-title function_\">sCard</span>(<span class=\"hljs-params\">String</span> <span class=\"hljs-params\">key</span>) &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable\">stringRedisTemplate</span>.<span class=\"hljs-property\">opsForSet</span>().<span class=\"hljs-property\">size</span>(<span class=\"hljs-variable\">key</span>);<br>\t&#125;<br><br>\t<span class=\"hljs-variable\">public</span> <span class=\"hljs-title class_\">StringRedisTemplate</span> <span class=\"hljs-title function_\">getTemTemplate</span>()&#123;<br>\t\t<span class=\"hljs-comment\">// 构建工厂对象</span><br>\t\t<span class=\"hljs-title class_\">RedisStandaloneConfiguration</span> <span class=\"hljs-variable\">config</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-variable\">new</span> <span class=\"hljs-title class_\">RedisStandaloneConfiguration</span>();<br>\t\t<span class=\"hljs-variable\">config</span>.<span class=\"hljs-property\">setDatabase</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">database</span>);<br>\t\t<span class=\"hljs-variable\">config</span>.<span class=\"hljs-property\">setHostName</span>(<span class=\"hljs-variable\">host</span>);<br>\t\t<span class=\"hljs-variable\">config</span>.<span class=\"hljs-property\">setPort</span>(<span class=\"hljs-variable\">port</span>);<br>\t\t<span class=\"hljs-variable\">config</span>.<span class=\"hljs-property\">setPassword</span>(<span class=\"hljs-title class_\">RedisPassword</span>.<span class=\"hljs-property\">of</span>(<span class=\"hljs-variable\">password</span>));<br>\t\t<span class=\"hljs-title class_\">LettuceConnectionFactory</span> <span class=\"hljs-variable\">factory</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-variable\">new</span> <span class=\"hljs-title class_\">LettuceConnectionFactory</span>(<span class=\"hljs-variable\">config</span>,<br>\t\t\t\t<span class=\"hljs-title class_\">LettucePoolingClientConfiguration</span>.<span class=\"hljs-property\">builder</span>().<span class=\"hljs-property\">build</span>());<br>\t\t<span class=\"hljs-comment\">// 重新初始化工厂</span><br>\t\t<span class=\"hljs-variable\">factory</span>.<span class=\"hljs-property\">afterPropertiesSet</span>();<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable\">new</span> <span class=\"hljs-title class_\">StringRedisTemplate</span>(<span class=\"hljs-variable\">factory</span>);<br>\t&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720104542631.png\" alt=\"image-20220720104542631\"></p>\n<h3 id=\"四、yml配置\"><a href=\"#四、yml配置\" class=\"headerlink\" title=\"四、yml配置\"></a>四、yml配置</h3><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">spring:</span><br>  <span class=\"hljs-attr\">redis:</span><br>    <span class=\"hljs-attr\">host:</span> <span class=\"hljs-string\">localhost</span> <span class=\"hljs-comment\"># Redis服务器地址</span><br>    <span class=\"hljs-attr\">database:</span> <span class=\"hljs-number\">8</span> <span class=\"hljs-comment\"># Redis数据库索引（默认为0）</span><br>    <span class=\"hljs-attr\">database2:</span> <span class=\"hljs-number\">9</span> <span class=\"hljs-comment\"># Redis数据库索引2（默认为0）</span><br>    <span class=\"hljs-attr\">port:</span> <span class=\"hljs-number\">6379</span> <span class=\"hljs-comment\"># Redis服务器连接端口</span><br>    <span class=\"hljs-attr\">password:</span> <span class=\"hljs-string\">root</span> <span class=\"hljs-comment\"># Redis服务器连接密码（默认为空）</span><br>    <span class=\"hljs-attr\">timeout:</span> <span class=\"hljs-string\">3000ms</span> <span class=\"hljs-comment\"># 连接超时时间（毫秒）</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"五、使用\"><a href=\"#五、使用\" class=\"headerlink\" title=\"五、使用\"></a>五、使用</h3><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs kotlin\"><span class=\"hljs-meta\">@AllArgsConstructor</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">CommonTest</span> &#123;<br>    <span class=\"hljs-keyword\">private</span> RedisUtils redisUtils;<br>    <span class=\"hljs-meta\">@DB</span><br>    <span class=\"hljs-keyword\">private</span> RedisUtils redisUtils2;<br>    <span class=\"hljs-meta\">@DB(<span class=\"hljs-string\">&quot;<span class=\"hljs-subst\">$&#123;spring.redis.database2&#125;</span>&quot;</span>)</span><br>    <span class=\"hljs-keyword\">private</span> RedisUtils redisUtils3;<br><br>    <span class=\"hljs-meta\">@GetMapping(<span class=\"hljs-string\">&quot;/redis&quot;</span>)</span><br>    <span class=\"hljs-keyword\">public</span> Result test() &#123;<br>        redisUtils.<span class=\"hljs-keyword\">set</span>(<span class=\"hljs-string\">&quot;helloBoy1&quot;</span>, <span class=\"hljs-string\">&quot;helloBoy&quot;</span>);<br>        redisUtils2.<span class=\"hljs-keyword\">set</span>(<span class=\"hljs-string\">&quot;helloBoy2&quot;</span>, <span class=\"hljs-string\">&quot;helloBoy&quot;</span>);<br>        redisUtils3.<span class=\"hljs-keyword\">set</span>(<span class=\"hljs-string\">&quot;helloBoy3&quot;</span>, <span class=\"hljs-string\">&quot;helloBoy&quot;</span>);<br>        <span class=\"hljs-keyword\">return</span> Result.succeed(<span class=\"hljs-string\">&quot;保存成功，请查看redis中的数据&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720104628655.png\" alt=\"image-20220720104628655\"></p>\n"},{"title":"Spring Boot & 过滤器 & 拦截器 & 注册","date":"2022-09-05T09:09:05.000Z","category_bar":true,"_content":"# Spring Boot & 过滤器 & 拦截器 & 注册\n\n---\n\n[toc]\n\n---\n## 一、过滤器\n```javascript?linenums\n@Component\npublic class UserFilter implements Filter {\n\n\t@Override\n\tpublic void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException {\n\t\tHttpServletRequest request2=(HttpServletRequest) request;\n\t\tHttpServletResponse response2=(HttpServletResponse) response;\n\t\t\n\t\tString url=request2.getScheme()+\"://\"+request2.getServerName()+\":\"+request2.getServerPort()+request2.getSession().getServletContext().getContextPath()+\"/\";\n\t\t\n\t\tObject o=request2.getSession().getAttribute(\"user\");\n\n\t\tSystem.out.println(\"进入过滤器！\"+o);\n\n\n        //得到当前页面所在目录下全名称\n\t\tString urlPattern=request2.getServletPath();\n\t\t\n\t\t//得到页面所在服务器的绝对路径\n\t\tString path = request2.getRequestURI();\n\n\t\n\t\tif(o==null){\t\t\n\t\t\tSystem.out.println(2);\n\t\t\tresponse2.sendRedirect(url+\"login.html\");\n\t\t}else{\n\t\t\tSystem.out.println(3);\n\t\t\tchain.doFilter(request, response);\n\t\t}\n\n\t}\n\n\t@Override\n\tpublic void destroy() {\n\t\t// TODO Auto-generated method stub\n\t\t\n\t}\n\n\t@Override\n\tpublic void init(FilterConfig arg0) throws ServletException {\n\t\t// TODO Auto-generated method stub\n\t\t\n\t}\n}\n\n\n```\n## 二、拦截器\n\n```javascript?linenums\n@Component\n@AllArgsConstructor\n@Slf4j\npublic class UserInterceptor implements HandlerInterceptor {\n    private RedisUtils redisUtils;\n\n    @Override\n    public void afterCompletion(HttpServletRequest arg0, HttpServletResponse arg1, Object arg2, Exception arg3)\n            throws Exception {\n\n    }\n\n    @Override\n    public void postHandle(HttpServletRequest arg0, HttpServletResponse arg1, Object arg2, ModelAndView arg3)\n            throws Exception {\n\n    }\n\n    @Override\n    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object arg2) throws Exception {\n        log.info(\"request url : {} 进行用户拦截校验\", request.getRequestURL().toString());\n        //redis里获取缓存用户\n        String jsonUser = redisUtils.get(String.format(RedisKey.USER_KEY, request.getHeader(SysConst.USER_TOKEN)));\n        User user = new Gson().fromJson(jsonUser, User.class);\n        if (ObjectUtil.isNotEmpty(user)) {\n            log.info(\"user:{}放行\", user.getName());\n            return true;\n        }\n        log.info(\"拦截\");\n        response.setCharacterEncoding(\"UTF-8\");\n        response.setContentType(\"application/json\");\n        response.getWriter().print(new Gson().toJson(Result.failed(ErrorEnum.E_202.getErrorMsg())));\n        return false;\n    }\n}\n```\n## 三、注册\n\n```javascript?linenums\n@Configuration\npublic class Config {\n    private UserInterceptor userInterceptor;\n\n    /**\n     * 拦截器\n     * */\n    @Bean\n    public WebMvcConfigurer WebMvcConfigurer() {\n        return new WebMvcConfigurer() {\n            @Override\n            public void addInterceptors(InterceptorRegistry registry) {\n                //排除无需拦截路径\n                List<String> excludeList=new ArrayList<>();\n                excludeList.add(\"/user/register\");\n                excludeList.add(\"/user/login\");\n                excludeList.add(\"/file/upload\");\n                excludeList.add(\"/file/list/**\");\n                //配置需要拦截路径/*\n                registry.addInterceptor(userInterceptor)\n                        .addPathPatterns(\"/file/**\")\n                        .addPathPatterns(\"/user/**\")\n                        .excludePathPatterns(excludeList);\n            }\n        };\n    }\n    /**\n     * 过滤器\n     * */\n    @Bean\n    public FilterRegistrationBean testFilterRegistration() {\n        FilterRegistrationBean registration = new FilterRegistrationBean(userFilter);\n        //配置需要过滤路径\n        registration.addUrlPatterns(\"/index/*\");\n        registration.addUrlPatterns(\"/hospital/*\");\n        registration.addUrlPatterns(\"/medicine/*\");\n        registration.addUrlPatterns(\"/registration/*\");\n        registration.addUrlPatterns(\"/Resource/*\");\n        registration.addUrlPatterns(\"/Role/*\");\n        registration.addUrlPatterns(\"/User/*\");\n        registration.addUrlPatterns(\"/index/*\");\n\n        registration.setName(\"userFilter\");\n        return registration;\n    }\n}\n```\n","source":"_posts/BookMark/Spring Boot/Spring Boot & 过滤器 & 拦截器 & 注册.md","raw":"---\ntitle: Spring Boot & 过滤器 & 拦截器 & 注册\ndate: 2022-09-05 17:09:05\ncategory_bar: true\ncategories: Spring Boot\ntags:\n- Spring Boot\n- 过滤器\n- 拦截器\n---\n# Spring Boot & 过滤器 & 拦截器 & 注册\n\n---\n\n[toc]\n\n---\n## 一、过滤器\n```javascript?linenums\n@Component\npublic class UserFilter implements Filter {\n\n\t@Override\n\tpublic void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException {\n\t\tHttpServletRequest request2=(HttpServletRequest) request;\n\t\tHttpServletResponse response2=(HttpServletResponse) response;\n\t\t\n\t\tString url=request2.getScheme()+\"://\"+request2.getServerName()+\":\"+request2.getServerPort()+request2.getSession().getServletContext().getContextPath()+\"/\";\n\t\t\n\t\tObject o=request2.getSession().getAttribute(\"user\");\n\n\t\tSystem.out.println(\"进入过滤器！\"+o);\n\n\n        //得到当前页面所在目录下全名称\n\t\tString urlPattern=request2.getServletPath();\n\t\t\n\t\t//得到页面所在服务器的绝对路径\n\t\tString path = request2.getRequestURI();\n\n\t\n\t\tif(o==null){\t\t\n\t\t\tSystem.out.println(2);\n\t\t\tresponse2.sendRedirect(url+\"login.html\");\n\t\t}else{\n\t\t\tSystem.out.println(3);\n\t\t\tchain.doFilter(request, response);\n\t\t}\n\n\t}\n\n\t@Override\n\tpublic void destroy() {\n\t\t// TODO Auto-generated method stub\n\t\t\n\t}\n\n\t@Override\n\tpublic void init(FilterConfig arg0) throws ServletException {\n\t\t// TODO Auto-generated method stub\n\t\t\n\t}\n}\n\n\n```\n## 二、拦截器\n\n```javascript?linenums\n@Component\n@AllArgsConstructor\n@Slf4j\npublic class UserInterceptor implements HandlerInterceptor {\n    private RedisUtils redisUtils;\n\n    @Override\n    public void afterCompletion(HttpServletRequest arg0, HttpServletResponse arg1, Object arg2, Exception arg3)\n            throws Exception {\n\n    }\n\n    @Override\n    public void postHandle(HttpServletRequest arg0, HttpServletResponse arg1, Object arg2, ModelAndView arg3)\n            throws Exception {\n\n    }\n\n    @Override\n    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object arg2) throws Exception {\n        log.info(\"request url : {} 进行用户拦截校验\", request.getRequestURL().toString());\n        //redis里获取缓存用户\n        String jsonUser = redisUtils.get(String.format(RedisKey.USER_KEY, request.getHeader(SysConst.USER_TOKEN)));\n        User user = new Gson().fromJson(jsonUser, User.class);\n        if (ObjectUtil.isNotEmpty(user)) {\n            log.info(\"user:{}放行\", user.getName());\n            return true;\n        }\n        log.info(\"拦截\");\n        response.setCharacterEncoding(\"UTF-8\");\n        response.setContentType(\"application/json\");\n        response.getWriter().print(new Gson().toJson(Result.failed(ErrorEnum.E_202.getErrorMsg())));\n        return false;\n    }\n}\n```\n## 三、注册\n\n```javascript?linenums\n@Configuration\npublic class Config {\n    private UserInterceptor userInterceptor;\n\n    /**\n     * 拦截器\n     * */\n    @Bean\n    public WebMvcConfigurer WebMvcConfigurer() {\n        return new WebMvcConfigurer() {\n            @Override\n            public void addInterceptors(InterceptorRegistry registry) {\n                //排除无需拦截路径\n                List<String> excludeList=new ArrayList<>();\n                excludeList.add(\"/user/register\");\n                excludeList.add(\"/user/login\");\n                excludeList.add(\"/file/upload\");\n                excludeList.add(\"/file/list/**\");\n                //配置需要拦截路径/*\n                registry.addInterceptor(userInterceptor)\n                        .addPathPatterns(\"/file/**\")\n                        .addPathPatterns(\"/user/**\")\n                        .excludePathPatterns(excludeList);\n            }\n        };\n    }\n    /**\n     * 过滤器\n     * */\n    @Bean\n    public FilterRegistrationBean testFilterRegistration() {\n        FilterRegistrationBean registration = new FilterRegistrationBean(userFilter);\n        //配置需要过滤路径\n        registration.addUrlPatterns(\"/index/*\");\n        registration.addUrlPatterns(\"/hospital/*\");\n        registration.addUrlPatterns(\"/medicine/*\");\n        registration.addUrlPatterns(\"/registration/*\");\n        registration.addUrlPatterns(\"/Resource/*\");\n        registration.addUrlPatterns(\"/Role/*\");\n        registration.addUrlPatterns(\"/User/*\");\n        registration.addUrlPatterns(\"/index/*\");\n\n        registration.setName(\"userFilter\");\n        return registration;\n    }\n}\n```\n","slug":"BookMark/Spring Boot/Spring Boot & 过滤器 & 拦截器 & 注册","published":1,"updated":"2022-09-06T07:08:49.888Z","_id":"cl7ptszom001maba55lixbjrf","comments":1,"layout":"post","photos":[],"link":"","content":"<h1><span id=\"spring-boot-amp-过滤器-amp-拦截器-amp-注册\">Spring Boot &amp; 过滤器 &amp; 拦截器 &amp; 注册</span></h1><hr>\n<p>[toc]</p>\n<hr>\n<h2><span id=\"一-过滤器\">一、过滤器</span></h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">@Component<br>public class UserFilter implements Filter &#123;<br><br>\t@Override<br>\tpublic void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException &#123;<br>\t\tHttpServletRequest request2=(HttpServletRequest) request;<br>\t\tHttpServletResponse response2=(HttpServletResponse) response;<br>\t\t<br>\t\tString url=request2.getScheme()+&quot;://&quot;+request2.getServerName()+&quot;:&quot;+request2.getServerPort()+request2.getSession().getServletContext().getContextPath()+&quot;/&quot;;<br>\t\t<br>\t\tObject o=request2.getSession().getAttribute(&quot;user&quot;);<br><br>\t\tSystem.out.println(&quot;进入过滤器！&quot;+o);<br><br><br>        //得到当前页面所在目录下全名称<br>\t\tString urlPattern=request2.getServletPath();<br>\t\t<br>\t\t//得到页面所在服务器的绝对路径<br>\t\tString path = request2.getRequestURI();<br><br>\t<br>\t\tif(o==null)&#123;\t\t<br>\t\t\tSystem.out.println(2);<br>\t\t\tresponse2.sendRedirect(url+&quot;login.html&quot;);<br>\t\t&#125;else&#123;<br>\t\t\tSystem.out.println(3);<br>\t\t\tchain.doFilter(request, response);<br>\t\t&#125;<br><br>\t&#125;<br><br>\t@Override<br>\tpublic void destroy() &#123;<br>\t\t// TODO Auto-generated method stub<br>\t\t<br>\t&#125;<br><br>\t@Override<br>\tpublic void init(FilterConfig arg0) throws ServletException &#123;<br>\t\t// TODO Auto-generated method stub<br>\t\t<br>\t&#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure>\n<h2><span id=\"二-拦截器\">二、拦截器</span></h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">@Component<br>@AllArgsConstructor<br>@Slf4j<br>public class UserInterceptor implements HandlerInterceptor &#123;<br>    private RedisUtils redisUtils;<br><br>    @Override<br>    public void afterCompletion(HttpServletRequest arg0, HttpServletResponse arg1, Object arg2, Exception arg3)<br>            throws Exception &#123;<br><br>    &#125;<br><br>    @Override<br>    public void postHandle(HttpServletRequest arg0, HttpServletResponse arg1, Object arg2, ModelAndView arg3)<br>            throws Exception &#123;<br><br>    &#125;<br><br>    @Override<br>    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object arg2) throws Exception &#123;<br>        log.info(&quot;request url : &#123;&#125; 进行用户拦截校验&quot;, request.getRequestURL().toString());<br>        //redis里获取缓存用户<br>        String jsonUser = redisUtils.get(String.format(RedisKey.USER_KEY, request.getHeader(SysConst.USER_TOKEN)));<br>        User user = new Gson().fromJson(jsonUser, User.class);<br>        if (ObjectUtil.isNotEmpty(user)) &#123;<br>            log.info(&quot;user:&#123;&#125;放行&quot;, user.getName());<br>            return true;<br>        &#125;<br>        log.info(&quot;拦截&quot;);<br>        response.setCharacterEncoding(&quot;UTF-8&quot;);<br>        response.setContentType(&quot;application/json&quot;);<br>        response.getWriter().print(new Gson().toJson(Result.failed(ErrorEnum.E_202.getErrorMsg())));<br>        return false;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h2><span id=\"三-注册\">三、注册</span></h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">@Configuration<br>public class Config &#123;<br>    private UserInterceptor userInterceptor;<br><br>    /**<br>     * 拦截器<br>     * */<br>    @Bean<br>    public WebMvcConfigurer WebMvcConfigurer() &#123;<br>        return new WebMvcConfigurer() &#123;<br>            @Override<br>            public void addInterceptors(InterceptorRegistry registry) &#123;<br>                //排除无需拦截路径<br>                List&lt;String&gt; excludeList=new ArrayList&lt;&gt;();<br>                excludeList.add(&quot;/user/register&quot;);<br>                excludeList.add(&quot;/user/login&quot;);<br>                excludeList.add(&quot;/file/upload&quot;);<br>                excludeList.add(&quot;/file/list/**&quot;);<br>                //配置需要拦截路径/*<br>                registry.addInterceptor(userInterceptor)<br>                        .addPathPatterns(&quot;/file/**&quot;)<br>                        .addPathPatterns(&quot;/user/**&quot;)<br>                        .excludePathPatterns(excludeList);<br>            &#125;<br>        &#125;;<br>    &#125;<br>    /**<br>     * 过滤器<br>     * */<br>    @Bean<br>    public FilterRegistrationBean testFilterRegistration() &#123;<br>        FilterRegistrationBean registration = new FilterRegistrationBean(userFilter);<br>        //配置需要过滤路径<br>        registration.addUrlPatterns(&quot;/index/*&quot;);<br>        registration.addUrlPatterns(&quot;/hospital/*&quot;);<br>        registration.addUrlPatterns(&quot;/medicine/*&quot;);<br>        registration.addUrlPatterns(&quot;/registration/*&quot;);<br>        registration.addUrlPatterns(&quot;/Resource/*&quot;);<br>        registration.addUrlPatterns(&quot;/Role/*&quot;);<br>        registration.addUrlPatterns(&quot;/User/*&quot;);<br>        registration.addUrlPatterns(&quot;/index/*&quot;);<br><br>        registration.setName(&quot;userFilter&quot;);<br>        return registration;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n","site":{"data":{}},"wordcount":3742,"excerpt":"","more":"<h1 id=\"Spring-Boot-amp-过滤器-amp-拦截器-amp-注册\"><a href=\"#Spring-Boot-amp-过滤器-amp-拦截器-amp-注册\" class=\"headerlink\" title=\"Spring Boot &amp; 过滤器 &amp; 拦截器 &amp; 注册\"></a>Spring Boot &amp; 过滤器 &amp; 拦截器 &amp; 注册</h1><hr>\n<p>[toc]</p>\n<hr>\n<h2 id=\"一、过滤器\"><a href=\"#一、过滤器\" class=\"headerlink\" title=\"一、过滤器\"></a>一、过滤器</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">@Component<br>public class UserFilter implements Filter &#123;<br><br>\t@Override<br>\tpublic void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException &#123;<br>\t\tHttpServletRequest request2=(HttpServletRequest) request;<br>\t\tHttpServletResponse response2=(HttpServletResponse) response;<br>\t\t<br>\t\tString url=request2.getScheme()+&quot;://&quot;+request2.getServerName()+&quot;:&quot;+request2.getServerPort()+request2.getSession().getServletContext().getContextPath()+&quot;/&quot;;<br>\t\t<br>\t\tObject o=request2.getSession().getAttribute(&quot;user&quot;);<br><br>\t\tSystem.out.println(&quot;进入过滤器！&quot;+o);<br><br><br>        //得到当前页面所在目录下全名称<br>\t\tString urlPattern=request2.getServletPath();<br>\t\t<br>\t\t//得到页面所在服务器的绝对路径<br>\t\tString path = request2.getRequestURI();<br><br>\t<br>\t\tif(o==null)&#123;\t\t<br>\t\t\tSystem.out.println(2);<br>\t\t\tresponse2.sendRedirect(url+&quot;login.html&quot;);<br>\t\t&#125;else&#123;<br>\t\t\tSystem.out.println(3);<br>\t\t\tchain.doFilter(request, response);<br>\t\t&#125;<br><br>\t&#125;<br><br>\t@Override<br>\tpublic void destroy() &#123;<br>\t\t// TODO Auto-generated method stub<br>\t\t<br>\t&#125;<br><br>\t@Override<br>\tpublic void init(FilterConfig arg0) throws ServletException &#123;<br>\t\t// TODO Auto-generated method stub<br>\t\t<br>\t&#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure>\n<h2 id=\"二、拦截器\"><a href=\"#二、拦截器\" class=\"headerlink\" title=\"二、拦截器\"></a>二、拦截器</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">@Component<br>@AllArgsConstructor<br>@Slf4j<br>public class UserInterceptor implements HandlerInterceptor &#123;<br>    private RedisUtils redisUtils;<br><br>    @Override<br>    public void afterCompletion(HttpServletRequest arg0, HttpServletResponse arg1, Object arg2, Exception arg3)<br>            throws Exception &#123;<br><br>    &#125;<br><br>    @Override<br>    public void postHandle(HttpServletRequest arg0, HttpServletResponse arg1, Object arg2, ModelAndView arg3)<br>            throws Exception &#123;<br><br>    &#125;<br><br>    @Override<br>    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object arg2) throws Exception &#123;<br>        log.info(&quot;request url : &#123;&#125; 进行用户拦截校验&quot;, request.getRequestURL().toString());<br>        //redis里获取缓存用户<br>        String jsonUser = redisUtils.get(String.format(RedisKey.USER_KEY, request.getHeader(SysConst.USER_TOKEN)));<br>        User user = new Gson().fromJson(jsonUser, User.class);<br>        if (ObjectUtil.isNotEmpty(user)) &#123;<br>            log.info(&quot;user:&#123;&#125;放行&quot;, user.getName());<br>            return true;<br>        &#125;<br>        log.info(&quot;拦截&quot;);<br>        response.setCharacterEncoding(&quot;UTF-8&quot;);<br>        response.setContentType(&quot;application/json&quot;);<br>        response.getWriter().print(new Gson().toJson(Result.failed(ErrorEnum.E_202.getErrorMsg())));<br>        return false;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h2 id=\"三、注册\"><a href=\"#三、注册\" class=\"headerlink\" title=\"三、注册\"></a>三、注册</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">@Configuration<br>public class Config &#123;<br>    private UserInterceptor userInterceptor;<br><br>    /**<br>     * 拦截器<br>     * */<br>    @Bean<br>    public WebMvcConfigurer WebMvcConfigurer() &#123;<br>        return new WebMvcConfigurer() &#123;<br>            @Override<br>            public void addInterceptors(InterceptorRegistry registry) &#123;<br>                //排除无需拦截路径<br>                List&lt;String&gt; excludeList=new ArrayList&lt;&gt;();<br>                excludeList.add(&quot;/user/register&quot;);<br>                excludeList.add(&quot;/user/login&quot;);<br>                excludeList.add(&quot;/file/upload&quot;);<br>                excludeList.add(&quot;/file/list/**&quot;);<br>                //配置需要拦截路径/*<br>                registry.addInterceptor(userInterceptor)<br>                        .addPathPatterns(&quot;/file/**&quot;)<br>                        .addPathPatterns(&quot;/user/**&quot;)<br>                        .excludePathPatterns(excludeList);<br>            &#125;<br>        &#125;;<br>    &#125;<br>    /**<br>     * 过滤器<br>     * */<br>    @Bean<br>    public FilterRegistrationBean testFilterRegistration() &#123;<br>        FilterRegistrationBean registration = new FilterRegistrationBean(userFilter);<br>        //配置需要过滤路径<br>        registration.addUrlPatterns(&quot;/index/*&quot;);<br>        registration.addUrlPatterns(&quot;/hospital/*&quot;);<br>        registration.addUrlPatterns(&quot;/medicine/*&quot;);<br>        registration.addUrlPatterns(&quot;/registration/*&quot;);<br>        registration.addUrlPatterns(&quot;/Resource/*&quot;);<br>        registration.addUrlPatterns(&quot;/Role/*&quot;);<br>        registration.addUrlPatterns(&quot;/User/*&quot;);<br>        registration.addUrlPatterns(&quot;/index/*&quot;);<br><br>        registration.setName(&quot;userFilter&quot;);<br>        return registration;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n"},{"title":"Spring Boot & 阿里OSS文件服务","date":"2022-09-05T09:09:05.000Z","category_bar":true,"_content":"# Spring Boot & 阿里OSS文件服务\n\n---\n\n[toc]\n\n---\n\n首先去阿里云官网获取`accessKeyId` ,`accessKeySecret`\n\n![image-20220721135147850](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721135147850.png)\n\n然后新建oss仓库，获取`bucketName` `endpoint`\n\n![image-20220721135321071](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721135321071.png)\n\n---\n\n## 一、application.yml\n\n```\nOSS:\n  accessKeyId: LTAI5tRbCbT6gBMVburLDkC4\n  accessKeySecret: BQsHbBTpPkjSFQdCg1N3h9Q2cbTl1M\n  bucketName: idse\n  endpoint: oss-cn-hangzhou.aliyuncs.com\n```\n\n## 二、pom.xml\n\n```\n<dependency>\n    <groupId>com.aliyun.oss</groupId>\n    <artifactId>aliyun-sdk-oss</artifactId>\n    <version>3.14.0</version>\n</dependency>\n```\n\n## 三、controller\n```javascript?linenums\n@PostMapping(value = \"/uploadToOSS\")\npublic String uploadToOSS(String bucketName, MultipartFile imgFile) {\n    return ossUtil1.uploadPreview(bucketName,imgFile);\n}\n```\n## 二、工具类\n```javascript?linenums\n@Component\n@Slf4j\npublic class OssUtil {\n    private static OSS ossClient;\n    @Value(\"${OSS.endpoint}\")\n    private String endpoint;\n    @Value(\"${OSS.accessKeyId}\")\n    private String accessKeyId;\n    @Value(\"${OSS.accessKeySecret}\")\n    private String accessKeySecret;\n    @Value(\"${OSS.bucketName}\")\n    private String bucketName;\n\n    @PostConstruct\n    public void init() {\n        try {\n            ossClient = new OSSClientBuilder().build(endpoint, accessKeyId, accessKeySecret);\n            ossClient.createBucket(bucketName);\n        } catch (Exception e) {\n            log.error(\"初始化oss配置异常: 【{}】\", e.getMessage());\n        }\n    }\n\n    /**\n     * 上传图片\n     *\n     * @param file\n     * @return\n     */\n    public String uploadPreview(String bucketName, MultipartFile file) {\n        String originalFilename = file.getOriginalFilename();\n        String newFileName = String.format(\"%s-%s.%s\", FileUtil.mainName(originalFilename), IdUtil.simpleUUID(), FileUtil.extName(originalFilename));\n        try {\n            upload(bucketName, file, newFileName);\n            return preview(newFileName);\n        } catch (Exception e) {\n            return \"上传失败\";\n        }\n    }\n\n    public static String getContentType(String FilenameExtension) {\n        if (FilenameExtension.equalsIgnoreCase(\".bmp\")) {\n            return \"image/bmp\";\n        }\n        if (FilenameExtension.equalsIgnoreCase(\".gif\")) {\n            return \"image/gif\";\n        }\n        if (FilenameExtension.equalsIgnoreCase(\".jpeg\") ||\n                FilenameExtension.equalsIgnoreCase(\".jpg\") ||\n                FilenameExtension.equalsIgnoreCase(\".png\")) {\n            return \"image/jpg\";\n        }\n        if (FilenameExtension.equalsIgnoreCase(\".html\")) {\n            return \"text/html\";\n        }\n        if (FilenameExtension.equalsIgnoreCase(\".txt\")) {\n            return \"text/plain\";\n        }\n        if (FilenameExtension.equalsIgnoreCase(\".vsd\")) {\n            return \"application/vnd.visio\";\n        }\n        if (FilenameExtension.equalsIgnoreCase(\".pptx\") ||\n                FilenameExtension.equalsIgnoreCase(\".ppt\")) {\n            return \"application/vnd.ms-powerpoint\";\n        }\n        if (FilenameExtension.equalsIgnoreCase(\".xls\") ||\n                FilenameExtension.equalsIgnoreCase(\".xlsx\")) {\n            return \"application/vnd.ms-excel\";\n        }\n        if (FilenameExtension.equalsIgnoreCase(\".docx\") ||\n                FilenameExtension.equalsIgnoreCase(\".doc\")) {\n            return \"application/msword\";\n        }\n        if (FilenameExtension.equalsIgnoreCase(\".xml\")) {\n            return \"text/xml\";\n        }\n        return \"image/jpg\";\n    }\n    /**\n     * 上传图片获取fileUrl\n     *\n     * @param file\n     * @param fileName\n     * @return\n     */\n    private Boolean upload(String bucketName, MultipartFile file, String fileName) throws IOException {\n        try {\n            //创建上传Object的Metadata\n            ObjectMetadata objectMetadata = new ObjectMetadata();\n            objectMetadata.setContentLength(file.getSize());\n            objectMetadata.setCacheControl(\"no-cache\");\n            objectMetadata.setHeader(\"Pragma\", \"no-cache\");\n            objectMetadata.setContentType(getContentType(fileName.substring(fileName.lastIndexOf(\".\"))));\n            objectMetadata.setContentDisposition(\"inline;filename=\" + fileName);\n            //上传文件\n            ossClient.putObject(bucketName, fileName, file.getInputStream(), objectMetadata);\n        } catch (Exception e) {\n            log.error(\"上传文件异常: 【{}】\", e.getMessage());\n            return false;\n        }\n        return true;\n    }\n\n    /**\n     * 获得url链接\n     *\n     * @return\n     */\n    public String preview(String fileName) {\n        // 生成URL\n        URL url = ossClient.generatePresignedUrl(bucketName, fileName, DateUtil.parse(\"2099-01-01\", \"yyyy-MM-dd\"));\n        String finalUrl = StrUtil.subBefore(url.toString(), \"?\", false);\n        log.info(\"文件路径预览：{}\", finalUrl);\n        return finalUrl;\n    }\n}\n```\n","source":"_posts/BookMark/Spring Boot/Spring Boot & 阿里OSS文件服务.md","raw":"---\ntitle: Spring Boot & 阿里OSS文件服务\ndate: 2022-09-05 17:09:05\ncategory_bar: true\ncategories: Spring Boot\ntags:\n- Spring Boot\n- 阿里OSS文件服务\n---\n# Spring Boot & 阿里OSS文件服务\n\n---\n\n[toc]\n\n---\n\n首先去阿里云官网获取`accessKeyId` ,`accessKeySecret`\n\n![image-20220721135147850](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721135147850.png)\n\n然后新建oss仓库，获取`bucketName` `endpoint`\n\n![image-20220721135321071](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721135321071.png)\n\n---\n\n## 一、application.yml\n\n```\nOSS:\n  accessKeyId: LTAI5tRbCbT6gBMVburLDkC4\n  accessKeySecret: BQsHbBTpPkjSFQdCg1N3h9Q2cbTl1M\n  bucketName: idse\n  endpoint: oss-cn-hangzhou.aliyuncs.com\n```\n\n## 二、pom.xml\n\n```\n<dependency>\n    <groupId>com.aliyun.oss</groupId>\n    <artifactId>aliyun-sdk-oss</artifactId>\n    <version>3.14.0</version>\n</dependency>\n```\n\n## 三、controller\n```javascript?linenums\n@PostMapping(value = \"/uploadToOSS\")\npublic String uploadToOSS(String bucketName, MultipartFile imgFile) {\n    return ossUtil1.uploadPreview(bucketName,imgFile);\n}\n```\n## 二、工具类\n```javascript?linenums\n@Component\n@Slf4j\npublic class OssUtil {\n    private static OSS ossClient;\n    @Value(\"${OSS.endpoint}\")\n    private String endpoint;\n    @Value(\"${OSS.accessKeyId}\")\n    private String accessKeyId;\n    @Value(\"${OSS.accessKeySecret}\")\n    private String accessKeySecret;\n    @Value(\"${OSS.bucketName}\")\n    private String bucketName;\n\n    @PostConstruct\n    public void init() {\n        try {\n            ossClient = new OSSClientBuilder().build(endpoint, accessKeyId, accessKeySecret);\n            ossClient.createBucket(bucketName);\n        } catch (Exception e) {\n            log.error(\"初始化oss配置异常: 【{}】\", e.getMessage());\n        }\n    }\n\n    /**\n     * 上传图片\n     *\n     * @param file\n     * @return\n     */\n    public String uploadPreview(String bucketName, MultipartFile file) {\n        String originalFilename = file.getOriginalFilename();\n        String newFileName = String.format(\"%s-%s.%s\", FileUtil.mainName(originalFilename), IdUtil.simpleUUID(), FileUtil.extName(originalFilename));\n        try {\n            upload(bucketName, file, newFileName);\n            return preview(newFileName);\n        } catch (Exception e) {\n            return \"上传失败\";\n        }\n    }\n\n    public static String getContentType(String FilenameExtension) {\n        if (FilenameExtension.equalsIgnoreCase(\".bmp\")) {\n            return \"image/bmp\";\n        }\n        if (FilenameExtension.equalsIgnoreCase(\".gif\")) {\n            return \"image/gif\";\n        }\n        if (FilenameExtension.equalsIgnoreCase(\".jpeg\") ||\n                FilenameExtension.equalsIgnoreCase(\".jpg\") ||\n                FilenameExtension.equalsIgnoreCase(\".png\")) {\n            return \"image/jpg\";\n        }\n        if (FilenameExtension.equalsIgnoreCase(\".html\")) {\n            return \"text/html\";\n        }\n        if (FilenameExtension.equalsIgnoreCase(\".txt\")) {\n            return \"text/plain\";\n        }\n        if (FilenameExtension.equalsIgnoreCase(\".vsd\")) {\n            return \"application/vnd.visio\";\n        }\n        if (FilenameExtension.equalsIgnoreCase(\".pptx\") ||\n                FilenameExtension.equalsIgnoreCase(\".ppt\")) {\n            return \"application/vnd.ms-powerpoint\";\n        }\n        if (FilenameExtension.equalsIgnoreCase(\".xls\") ||\n                FilenameExtension.equalsIgnoreCase(\".xlsx\")) {\n            return \"application/vnd.ms-excel\";\n        }\n        if (FilenameExtension.equalsIgnoreCase(\".docx\") ||\n                FilenameExtension.equalsIgnoreCase(\".doc\")) {\n            return \"application/msword\";\n        }\n        if (FilenameExtension.equalsIgnoreCase(\".xml\")) {\n            return \"text/xml\";\n        }\n        return \"image/jpg\";\n    }\n    /**\n     * 上传图片获取fileUrl\n     *\n     * @param file\n     * @param fileName\n     * @return\n     */\n    private Boolean upload(String bucketName, MultipartFile file, String fileName) throws IOException {\n        try {\n            //创建上传Object的Metadata\n            ObjectMetadata objectMetadata = new ObjectMetadata();\n            objectMetadata.setContentLength(file.getSize());\n            objectMetadata.setCacheControl(\"no-cache\");\n            objectMetadata.setHeader(\"Pragma\", \"no-cache\");\n            objectMetadata.setContentType(getContentType(fileName.substring(fileName.lastIndexOf(\".\"))));\n            objectMetadata.setContentDisposition(\"inline;filename=\" + fileName);\n            //上传文件\n            ossClient.putObject(bucketName, fileName, file.getInputStream(), objectMetadata);\n        } catch (Exception e) {\n            log.error(\"上传文件异常: 【{}】\", e.getMessage());\n            return false;\n        }\n        return true;\n    }\n\n    /**\n     * 获得url链接\n     *\n     * @return\n     */\n    public String preview(String fileName) {\n        // 生成URL\n        URL url = ossClient.generatePresignedUrl(bucketName, fileName, DateUtil.parse(\"2099-01-01\", \"yyyy-MM-dd\"));\n        String finalUrl = StrUtil.subBefore(url.toString(), \"?\", false);\n        log.info(\"文件路径预览：{}\", finalUrl);\n        return finalUrl;\n    }\n}\n```\n","slug":"BookMark/Spring Boot/Spring Boot & 阿里OSS文件服务","published":1,"updated":"2022-09-06T07:08:49.864Z","_id":"cl7ptszom001naba5cqmkh9ez","comments":1,"layout":"post","photos":[],"link":"","content":"<h1><span id=\"spring-boot-amp-阿里oss文件服务\">Spring Boot &amp; 阿里OSS文件服务</span></h1><hr>\n<p>[toc]</p>\n<hr>\n<p>首先去阿里云官网获取<code>accessKeyId</code> ,<code>accessKeySecret</code></p>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721135147850.png\" alt=\"image-20220721135147850\"></p>\n<p>然后新建oss仓库，获取<code>bucketName</code> <code>endpoint</code></p>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721135321071.png\" alt=\"image-20220721135321071\"></p>\n<hr>\n<h2><span id=\"一-applicationyml\">一、application.yml</span></h2><figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dts\"><span class=\"hljs-symbol\">OSS:</span><br><span class=\"hljs-symbol\">  accessKeyId:</span> LTAI5tRbCbT6gBMVburLDkC4<br><span class=\"hljs-symbol\">  accessKeySecret:</span> BQsHbBTpPkjSFQdCg1N3h9Q2cbTl1M<br><span class=\"hljs-symbol\">  bucketName:</span> idse<br><span class=\"hljs-symbol\">  endpoint:</span> oss-cn-hangzhou.aliyuncs.com<br></code></pre></td></tr></table></figure>\n\n<h2><span id=\"二-pomxml\">二、pom.xml</span></h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>com.aliyun.oss<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>aliyun-sdk-oss<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>3.14.0<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h2><span id=\"三-controller\">三、controller</span></h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">@PostMapping(value = &quot;/uploadToOSS&quot;)<br>public String uploadToOSS(String bucketName, MultipartFile imgFile) &#123;<br>    return ossUtil1.uploadPreview(bucketName,imgFile);<br>&#125;<br></code></pre></td></tr></table></figure>\n<h2><span id=\"二-工具类\">二、工具类</span></h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">@Component<br>@Slf4j<br>public class OssUtil &#123;<br>    private static OSS ossClient;<br>    @Value(&quot;$&#123;OSS.endpoint&#125;&quot;)<br>    private String endpoint;<br>    @Value(&quot;$&#123;OSS.accessKeyId&#125;&quot;)<br>    private String accessKeyId;<br>    @Value(&quot;$&#123;OSS.accessKeySecret&#125;&quot;)<br>    private String accessKeySecret;<br>    @Value(&quot;$&#123;OSS.bucketName&#125;&quot;)<br>    private String bucketName;<br><br>    @PostConstruct<br>    public void init() &#123;<br>        try &#123;<br>            ossClient = new OSSClientBuilder().build(endpoint, accessKeyId, accessKeySecret);<br>            ossClient.createBucket(bucketName);<br>        &#125; catch (Exception e) &#123;<br>            log.error(&quot;初始化oss配置异常: 【&#123;&#125;】&quot;, e.getMessage());<br>        &#125;<br>    &#125;<br><br>    /**<br>     * 上传图片<br>     *<br>     * @param file<br>     * @return<br>     */<br>    public String uploadPreview(String bucketName, MultipartFile file) &#123;<br>        String originalFilename = file.getOriginalFilename();<br>        String newFileName = String.format(&quot;%s-%s.%s&quot;, FileUtil.mainName(originalFilename), IdUtil.simpleUUID(), FileUtil.extName(originalFilename));<br>        try &#123;<br>            upload(bucketName, file, newFileName);<br>            return preview(newFileName);<br>        &#125; catch (Exception e) &#123;<br>            return &quot;上传失败&quot;;<br>        &#125;<br>    &#125;<br><br>    public static String getContentType(String FilenameExtension) &#123;<br>        if (FilenameExtension.equalsIgnoreCase(&quot;.bmp&quot;)) &#123;<br>            return &quot;image/bmp&quot;;<br>        &#125;<br>        if (FilenameExtension.equalsIgnoreCase(&quot;.gif&quot;)) &#123;<br>            return &quot;image/gif&quot;;<br>        &#125;<br>        if (FilenameExtension.equalsIgnoreCase(&quot;.jpeg&quot;) ||<br>                FilenameExtension.equalsIgnoreCase(&quot;.jpg&quot;) ||<br>                FilenameExtension.equalsIgnoreCase(&quot;.png&quot;)) &#123;<br>            return &quot;image/jpg&quot;;<br>        &#125;<br>        if (FilenameExtension.equalsIgnoreCase(&quot;.html&quot;)) &#123;<br>            return &quot;text/html&quot;;<br>        &#125;<br>        if (FilenameExtension.equalsIgnoreCase(&quot;.txt&quot;)) &#123;<br>            return &quot;text/plain&quot;;<br>        &#125;<br>        if (FilenameExtension.equalsIgnoreCase(&quot;.vsd&quot;)) &#123;<br>            return &quot;application/vnd.visio&quot;;<br>        &#125;<br>        if (FilenameExtension.equalsIgnoreCase(&quot;.pptx&quot;) ||<br>                FilenameExtension.equalsIgnoreCase(&quot;.ppt&quot;)) &#123;<br>            return &quot;application/vnd.ms-powerpoint&quot;;<br>        &#125;<br>        if (FilenameExtension.equalsIgnoreCase(&quot;.xls&quot;) ||<br>                FilenameExtension.equalsIgnoreCase(&quot;.xlsx&quot;)) &#123;<br>            return &quot;application/vnd.ms-excel&quot;;<br>        &#125;<br>        if (FilenameExtension.equalsIgnoreCase(&quot;.docx&quot;) ||<br>                FilenameExtension.equalsIgnoreCase(&quot;.doc&quot;)) &#123;<br>            return &quot;application/msword&quot;;<br>        &#125;<br>        if (FilenameExtension.equalsIgnoreCase(&quot;.xml&quot;)) &#123;<br>            return &quot;text/xml&quot;;<br>        &#125;<br>        return &quot;image/jpg&quot;;<br>    &#125;<br>    /**<br>     * 上传图片获取fileUrl<br>     *<br>     * @param file<br>     * @param fileName<br>     * @return<br>     */<br>    private Boolean upload(String bucketName, MultipartFile file, String fileName) throws IOException &#123;<br>        try &#123;<br>            //创建上传Object的Metadata<br>            ObjectMetadata objectMetadata = new ObjectMetadata();<br>            objectMetadata.setContentLength(file.getSize());<br>            objectMetadata.setCacheControl(&quot;no-cache&quot;);<br>            objectMetadata.setHeader(&quot;Pragma&quot;, &quot;no-cache&quot;);<br>            objectMetadata.setContentType(getContentType(fileName.substring(fileName.lastIndexOf(&quot;.&quot;))));<br>            objectMetadata.setContentDisposition(&quot;inline;filename=&quot; + fileName);<br>            //上传文件<br>            ossClient.putObject(bucketName, fileName, file.getInputStream(), objectMetadata);<br>        &#125; catch (Exception e) &#123;<br>            log.error(&quot;上传文件异常: 【&#123;&#125;】&quot;, e.getMessage());<br>            return false;<br>        &#125;<br>        return true;<br>    &#125;<br><br>    /**<br>     * 获得url链接<br>     *<br>     * @return<br>     */<br>    public String preview(String fileName) &#123;<br>        // 生成URL<br>        URL url = ossClient.generatePresignedUrl(bucketName, fileName, DateUtil.parse(&quot;2099-01-01&quot;, &quot;yyyy-MM-dd&quot;));<br>        String finalUrl = StrUtil.subBefore(url.toString(), &quot;?&quot;, false);<br>        log.info(&quot;文件路径预览：&#123;&#125;&quot;, finalUrl);<br>        return finalUrl;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n","site":{"data":{}},"wordcount":4422,"excerpt":"","more":"<h1 id=\"Spring-Boot-amp-阿里OSS文件服务\"><a href=\"#Spring-Boot-amp-阿里OSS文件服务\" class=\"headerlink\" title=\"Spring Boot &amp; 阿里OSS文件服务\"></a>Spring Boot &amp; 阿里OSS文件服务</h1><hr>\n<p>[toc]</p>\n<hr>\n<p>首先去阿里云官网获取<code>accessKeyId</code> ,<code>accessKeySecret</code></p>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721135147850.png\" alt=\"image-20220721135147850\"></p>\n<p>然后新建oss仓库，获取<code>bucketName</code> <code>endpoint</code></p>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721135321071.png\" alt=\"image-20220721135321071\"></p>\n<hr>\n<h2 id=\"一、application-yml\"><a href=\"#一、application-yml\" class=\"headerlink\" title=\"一、application.yml\"></a>一、application.yml</h2><figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dts\"><span class=\"hljs-symbol\">OSS:</span><br><span class=\"hljs-symbol\">  accessKeyId:</span> LTAI5tRbCbT6gBMVburLDkC4<br><span class=\"hljs-symbol\">  accessKeySecret:</span> BQsHbBTpPkjSFQdCg1N3h9Q2cbTl1M<br><span class=\"hljs-symbol\">  bucketName:</span> idse<br><span class=\"hljs-symbol\">  endpoint:</span> oss-cn-hangzhou.aliyuncs.com<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"二、pom-xml\"><a href=\"#二、pom-xml\" class=\"headerlink\" title=\"二、pom.xml\"></a>二、pom.xml</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>com.aliyun.oss<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>aliyun-sdk-oss<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>3.14.0<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"三、controller\"><a href=\"#三、controller\" class=\"headerlink\" title=\"三、controller\"></a>三、controller</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">@PostMapping(value = &quot;/uploadToOSS&quot;)<br>public String uploadToOSS(String bucketName, MultipartFile imgFile) &#123;<br>    return ossUtil1.uploadPreview(bucketName,imgFile);<br>&#125;<br></code></pre></td></tr></table></figure>\n<h2 id=\"二、工具类\"><a href=\"#二、工具类\" class=\"headerlink\" title=\"二、工具类\"></a>二、工具类</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">@Component<br>@Slf4j<br>public class OssUtil &#123;<br>    private static OSS ossClient;<br>    @Value(&quot;$&#123;OSS.endpoint&#125;&quot;)<br>    private String endpoint;<br>    @Value(&quot;$&#123;OSS.accessKeyId&#125;&quot;)<br>    private String accessKeyId;<br>    @Value(&quot;$&#123;OSS.accessKeySecret&#125;&quot;)<br>    private String accessKeySecret;<br>    @Value(&quot;$&#123;OSS.bucketName&#125;&quot;)<br>    private String bucketName;<br><br>    @PostConstruct<br>    public void init() &#123;<br>        try &#123;<br>            ossClient = new OSSClientBuilder().build(endpoint, accessKeyId, accessKeySecret);<br>            ossClient.createBucket(bucketName);<br>        &#125; catch (Exception e) &#123;<br>            log.error(&quot;初始化oss配置异常: 【&#123;&#125;】&quot;, e.getMessage());<br>        &#125;<br>    &#125;<br><br>    /**<br>     * 上传图片<br>     *<br>     * @param file<br>     * @return<br>     */<br>    public String uploadPreview(String bucketName, MultipartFile file) &#123;<br>        String originalFilename = file.getOriginalFilename();<br>        String newFileName = String.format(&quot;%s-%s.%s&quot;, FileUtil.mainName(originalFilename), IdUtil.simpleUUID(), FileUtil.extName(originalFilename));<br>        try &#123;<br>            upload(bucketName, file, newFileName);<br>            return preview(newFileName);<br>        &#125; catch (Exception e) &#123;<br>            return &quot;上传失败&quot;;<br>        &#125;<br>    &#125;<br><br>    public static String getContentType(String FilenameExtension) &#123;<br>        if (FilenameExtension.equalsIgnoreCase(&quot;.bmp&quot;)) &#123;<br>            return &quot;image/bmp&quot;;<br>        &#125;<br>        if (FilenameExtension.equalsIgnoreCase(&quot;.gif&quot;)) &#123;<br>            return &quot;image/gif&quot;;<br>        &#125;<br>        if (FilenameExtension.equalsIgnoreCase(&quot;.jpeg&quot;) ||<br>                FilenameExtension.equalsIgnoreCase(&quot;.jpg&quot;) ||<br>                FilenameExtension.equalsIgnoreCase(&quot;.png&quot;)) &#123;<br>            return &quot;image/jpg&quot;;<br>        &#125;<br>        if (FilenameExtension.equalsIgnoreCase(&quot;.html&quot;)) &#123;<br>            return &quot;text/html&quot;;<br>        &#125;<br>        if (FilenameExtension.equalsIgnoreCase(&quot;.txt&quot;)) &#123;<br>            return &quot;text/plain&quot;;<br>        &#125;<br>        if (FilenameExtension.equalsIgnoreCase(&quot;.vsd&quot;)) &#123;<br>            return &quot;application/vnd.visio&quot;;<br>        &#125;<br>        if (FilenameExtension.equalsIgnoreCase(&quot;.pptx&quot;) ||<br>                FilenameExtension.equalsIgnoreCase(&quot;.ppt&quot;)) &#123;<br>            return &quot;application/vnd.ms-powerpoint&quot;;<br>        &#125;<br>        if (FilenameExtension.equalsIgnoreCase(&quot;.xls&quot;) ||<br>                FilenameExtension.equalsIgnoreCase(&quot;.xlsx&quot;)) &#123;<br>            return &quot;application/vnd.ms-excel&quot;;<br>        &#125;<br>        if (FilenameExtension.equalsIgnoreCase(&quot;.docx&quot;) ||<br>                FilenameExtension.equalsIgnoreCase(&quot;.doc&quot;)) &#123;<br>            return &quot;application/msword&quot;;<br>        &#125;<br>        if (FilenameExtension.equalsIgnoreCase(&quot;.xml&quot;)) &#123;<br>            return &quot;text/xml&quot;;<br>        &#125;<br>        return &quot;image/jpg&quot;;<br>    &#125;<br>    /**<br>     * 上传图片获取fileUrl<br>     *<br>     * @param file<br>     * @param fileName<br>     * @return<br>     */<br>    private Boolean upload(String bucketName, MultipartFile file, String fileName) throws IOException &#123;<br>        try &#123;<br>            //创建上传Object的Metadata<br>            ObjectMetadata objectMetadata = new ObjectMetadata();<br>            objectMetadata.setContentLength(file.getSize());<br>            objectMetadata.setCacheControl(&quot;no-cache&quot;);<br>            objectMetadata.setHeader(&quot;Pragma&quot;, &quot;no-cache&quot;);<br>            objectMetadata.setContentType(getContentType(fileName.substring(fileName.lastIndexOf(&quot;.&quot;))));<br>            objectMetadata.setContentDisposition(&quot;inline;filename=&quot; + fileName);<br>            //上传文件<br>            ossClient.putObject(bucketName, fileName, file.getInputStream(), objectMetadata);<br>        &#125; catch (Exception e) &#123;<br>            log.error(&quot;上传文件异常: 【&#123;&#125;】&quot;, e.getMessage());<br>            return false;<br>        &#125;<br>        return true;<br>    &#125;<br><br>    /**<br>     * 获得url链接<br>     *<br>     * @return<br>     */<br>    public String preview(String fileName) &#123;<br>        // 生成URL<br>        URL url = ossClient.generatePresignedUrl(bucketName, fileName, DateUtil.parse(&quot;2099-01-01&quot;, &quot;yyyy-MM-dd&quot;));<br>        String finalUrl = StrUtil.subBefore(url.toString(), &quot;?&quot;, false);<br>        log.info(&quot;文件路径预览：&#123;&#125;&quot;, finalUrl);<br>        return finalUrl;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n"},{"title":"Spring Boot & 阿里短信服务（Redis+短信验证码）","date":"2022-09-05T09:09:05.000Z","category_bar":true,"_content":"# Spring Boot & 阿里短信服务（Redis+短信验证码）\n---\n\n[toc]\n\n---\n\n## 1. 创建签名\n+ 如下位置创建签名，等待审核通过\n![enter description here](https://img-1256282866.cos.ap-beijing.myqcloud.com/aHR0cDovL2hicS5pZHNlLnRvcC9ibG9nLzE1NzE3NTAxMzI2MjkucG5n.png)\n![enter description here](https://img-1256282866.cos.ap-beijing.myqcloud.com/aHR0cDovL2hicS5pZHNlLnRvcC9ibG9nLzE1NzE3NTAyMDA0NzMucG5n.png)\n## 2. 创建模板\n+ 如下位置创建模板，等待审核通过\n![enter description here](https://img-1256282866.cos.ap-beijing.myqcloud.com/aHR0cDovL2hicS5pZHNlLnRvcC9ibG9nLzE1NzE3NTAzNjcyNjUucG5n-20220901181234093.png)\n![enter description here](https://img-1256282866.cos.ap-beijing.myqcloud.com/aHR0cDovL2hicS5pZHNlLnRvcC9ibG9nLzE1NzE3NTA1NDEwODMucG5n-20220901181239935.png)\n## 3. 测试验证码功能\n+ 填写相关信息，测试发送\n![enter description here](https://img-1256282866.cos.ap-beijing.myqcloud.com/aHR0cDovL2hicS5pZHNlLnRvcC9ibG9nLzE1NzE3NTA4MDM4ODAucG5n-20220901181246773.png)\n![enter description here](https://img-1256282866.cos.ap-beijing.myqcloud.com/format,png-20220901181259065.png)\n<font color=red size=5>注：发送失败可能因为你余额不足。可以选择购买套餐。新号可去尝试下图位置领取免费短信。</font>\n+ 官网主页下拉最后\n+ ![enter description here](https://img-1256282866.cos.ap-beijing.myqcloud.com/aHR0cDovL2hicS5pZHNlLnRvcC9ibG9nLzE1NzE3NTExNzEyMjAucG5n-20220901181307940.png)\n+ ![enter description here](https://img-1256282866.cos.ap-beijing.myqcloud.com/aHR0cDovL2hicS5pZHNlLnRvcC9ibG9nLzE1NzE3NTExOTY4NjgucG5n-20220901181315014.png)\n## 4. 查看Api Demo\n+ ![enter description here](https://img-1256282866.cos.ap-beijing.myqcloud.com/aHR0cDovL2hicS5pZHNlLnRvcC9ibG9nLzE1NzE3NTEyMzUxNjUucG5n-20220901181320964.png)\n+ ![enter description here](https://img-1256282866.cos.ap-beijing.myqcloud.com/aHR0cDovL2hicS5pZHNlLnRvcC9ibG9nLzE1NzE3NTE0Mjc5MzkucG5n-20220901181328073.png)\n## 5. 获取AK信息\n+ ![enter description here](https://img-1256282866.cos.ap-beijing.myqcloud.com/aHR0cDovL2hicS5pZHNlLnRvcC9ibG9nLzE1NzE3NTE1MDAyMjYucG5n-20220901181333245.png)\n+ 创建AccessKey\n+ ![enter description here](https://imgconvert.csdnimg.cn/aHR0cDovL2hicS5pZHNlLnRvcC9ibG9nLzE1NzE3NTE1NTQ4NTUucG5n?x-oss-process=image/format,png)\n+ 保存一下AccessKeyId和AccessKeySecret\n+ ![enter description here](https://img-1256282866.cos.ap-beijing.myqcloud.com/aHR0cDovL2hicS5pZHNlLnRvcC9ibG9nLzE1NzE3NTE2MDQ5NjIucG5n-20220901181338869.png)\n+ 将其复制分别填到AccessKeyId和AccessKeySecret的位置\n+ ![enter description here](https://img-1256282866.cos.ap-beijing.myqcloud.com/aHR0cDovL2hicS5pZHNlLnRvcC9ibG9nLzE1NzE3NTE5MjQ2NjcucG5n-20220901181342922.png)\n## 6. pom.xml\n```\n<!-- 短信服务-->\n<dependency>\n    <groupId>com.aliyun</groupId>\n    <artifactId>dysmsapi20170525</artifactId>\n    <version>2.0.9</version>\n</dependency>\n```\n\n## 7.yml配置\n\n```\n#阿里短息配置\nali:\n  endpoint: dysmsapi.aliyuncs.com\n  accessKey: LT***C4\n  secretKey: BQ***1M\n  signName: IDSE\n  templateCode: SMS_***75\n  expireTime: 300\n```\n\n## 8.自建工具类\n\n```javascript?linenums\npackage com.hbq.cms.util;\n\n/**\n * @Author: huibq\n * @Date: 2022/5/6 15:33\n * @Description: 短信发送工具类\n */\n@Slf4j\n@Component\npublic class MessageUtil {\n    private static Client messageClient;\n\n    @Resource\n    private RedisUtils redisUtils;\n\n    @Value(\"${ali.endpoint}\")\n    private String endpoint;\n    @Value(\"${ali.accessKey}\")\n    private String accessKey;\n    @Value(\"${ali.secretKey}\")\n    private String secretKey;\n    @Value(\"${ali.signName}\")\n    private String signName;\n    @Value(\"${ali.templateCode}\")\n    private String templateCode;\n    @Value(\"${ali.expireTime}\")\n    private Long expireTime;\n\n    @PostConstruct\n    public void init() {\n        try {\n            Config config = new Config()\n                    // 您的AccessKey ID\n                    .setAccessKeyId(accessKey)\n                    // 您的AccessKey Secret\n                    .setAccessKeySecret(secretKey);\n            // 访问的域名\n            config.endpoint = endpoint;\n            messageClient = new Client(config);\n        } catch (Exception e) {\n            e.printStackTrace();\n            log.error(\"初始化messageClient配置异常: 【{}】\", e.fillInStackTrace());\n        }\n    }\n\n    /**\n     * 发送短信\n     *\n     * @param tel 手机号\n     */\n    public void sendMessage(String tel) {\n        String code = RandomUtil.randomNumbers(6);\n        SendSmsRequest sendSmsRequest = new SendSmsRequest()\n                .setSignName(signName)\n                .setTemplateCode(templateCode)\n                .setPhoneNumbers(tel)\n                .setTemplateParam(\"{\\\"code\\\":\\\"\" + code + \"\\\"}\");\n        try {\n            SendSmsResponse sendSmsResponse = messageClient.sendSms(sendSmsRequest);\n            String result = sendSmsResponse.getBody().getCode();\n            if (\"OK\".equals(result)) {\n                redisUtils.set(String.format(RedisKey.MESSAGE_KEY,tel), code, expireTime);\n            }\n        } catch (Exception e) {\n            log.error(\"发送短信异常:{}\", e.fillInStackTrace());\n        }\n    }\n\n    /**\n     * 验证短信验证码\n     * @param tel 手机号\n     * @param code 验证码\n     * @return 验证结果\n     */\n    public boolean isCode(String tel, String code) {\n        String resultCode = redisUtils.get(String.format(RedisKey.MESSAGE_KEY,tel));\n        if (resultCode != null && resultCode.equals(code)) {\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * 不是正确的验证码\n     * @param tel 手机号\n     * @param code 验证码\n     * @return 验证结果\n     */\n    public boolean isNotCode(String tel, String code) {\n        return !isCode(tel, code);\n    }\n}\n```\n\n","source":"_posts/BookMark/Spring Boot/Spring Boot & 阿里短信服务（Redis+短信验证码）.md","raw":"---\ntitle: Spring Boot & 阿里短信服务（Redis+短信验证码）\ndate: 2022-09-05 17:09:05\ncategory_bar: true\ncategories: Spring Boot\ntags:\n- Spring Boot\n- 阿里短信服务\n---\n# Spring Boot & 阿里短信服务（Redis+短信验证码）\n---\n\n[toc]\n\n---\n\n## 1. 创建签名\n+ 如下位置创建签名，等待审核通过\n![enter description here](https://img-1256282866.cos.ap-beijing.myqcloud.com/aHR0cDovL2hicS5pZHNlLnRvcC9ibG9nLzE1NzE3NTAxMzI2MjkucG5n.png)\n![enter description here](https://img-1256282866.cos.ap-beijing.myqcloud.com/aHR0cDovL2hicS5pZHNlLnRvcC9ibG9nLzE1NzE3NTAyMDA0NzMucG5n.png)\n## 2. 创建模板\n+ 如下位置创建模板，等待审核通过\n![enter description here](https://img-1256282866.cos.ap-beijing.myqcloud.com/aHR0cDovL2hicS5pZHNlLnRvcC9ibG9nLzE1NzE3NTAzNjcyNjUucG5n-20220901181234093.png)\n![enter description here](https://img-1256282866.cos.ap-beijing.myqcloud.com/aHR0cDovL2hicS5pZHNlLnRvcC9ibG9nLzE1NzE3NTA1NDEwODMucG5n-20220901181239935.png)\n## 3. 测试验证码功能\n+ 填写相关信息，测试发送\n![enter description here](https://img-1256282866.cos.ap-beijing.myqcloud.com/aHR0cDovL2hicS5pZHNlLnRvcC9ibG9nLzE1NzE3NTA4MDM4ODAucG5n-20220901181246773.png)\n![enter description here](https://img-1256282866.cos.ap-beijing.myqcloud.com/format,png-20220901181259065.png)\n<font color=red size=5>注：发送失败可能因为你余额不足。可以选择购买套餐。新号可去尝试下图位置领取免费短信。</font>\n+ 官网主页下拉最后\n+ ![enter description here](https://img-1256282866.cos.ap-beijing.myqcloud.com/aHR0cDovL2hicS5pZHNlLnRvcC9ibG9nLzE1NzE3NTExNzEyMjAucG5n-20220901181307940.png)\n+ ![enter description here](https://img-1256282866.cos.ap-beijing.myqcloud.com/aHR0cDovL2hicS5pZHNlLnRvcC9ibG9nLzE1NzE3NTExOTY4NjgucG5n-20220901181315014.png)\n## 4. 查看Api Demo\n+ ![enter description here](https://img-1256282866.cos.ap-beijing.myqcloud.com/aHR0cDovL2hicS5pZHNlLnRvcC9ibG9nLzE1NzE3NTEyMzUxNjUucG5n-20220901181320964.png)\n+ ![enter description here](https://img-1256282866.cos.ap-beijing.myqcloud.com/aHR0cDovL2hicS5pZHNlLnRvcC9ibG9nLzE1NzE3NTE0Mjc5MzkucG5n-20220901181328073.png)\n## 5. 获取AK信息\n+ ![enter description here](https://img-1256282866.cos.ap-beijing.myqcloud.com/aHR0cDovL2hicS5pZHNlLnRvcC9ibG9nLzE1NzE3NTE1MDAyMjYucG5n-20220901181333245.png)\n+ 创建AccessKey\n+ ![enter description here](https://imgconvert.csdnimg.cn/aHR0cDovL2hicS5pZHNlLnRvcC9ibG9nLzE1NzE3NTE1NTQ4NTUucG5n?x-oss-process=image/format,png)\n+ 保存一下AccessKeyId和AccessKeySecret\n+ ![enter description here](https://img-1256282866.cos.ap-beijing.myqcloud.com/aHR0cDovL2hicS5pZHNlLnRvcC9ibG9nLzE1NzE3NTE2MDQ5NjIucG5n-20220901181338869.png)\n+ 将其复制分别填到AccessKeyId和AccessKeySecret的位置\n+ ![enter description here](https://img-1256282866.cos.ap-beijing.myqcloud.com/aHR0cDovL2hicS5pZHNlLnRvcC9ibG9nLzE1NzE3NTE5MjQ2NjcucG5n-20220901181342922.png)\n## 6. pom.xml\n```\n<!-- 短信服务-->\n<dependency>\n    <groupId>com.aliyun</groupId>\n    <artifactId>dysmsapi20170525</artifactId>\n    <version>2.0.9</version>\n</dependency>\n```\n\n## 7.yml配置\n\n```\n#阿里短息配置\nali:\n  endpoint: dysmsapi.aliyuncs.com\n  accessKey: LT***C4\n  secretKey: BQ***1M\n  signName: IDSE\n  templateCode: SMS_***75\n  expireTime: 300\n```\n\n## 8.自建工具类\n\n```javascript?linenums\npackage com.hbq.cms.util;\n\n/**\n * @Author: huibq\n * @Date: 2022/5/6 15:33\n * @Description: 短信发送工具类\n */\n@Slf4j\n@Component\npublic class MessageUtil {\n    private static Client messageClient;\n\n    @Resource\n    private RedisUtils redisUtils;\n\n    @Value(\"${ali.endpoint}\")\n    private String endpoint;\n    @Value(\"${ali.accessKey}\")\n    private String accessKey;\n    @Value(\"${ali.secretKey}\")\n    private String secretKey;\n    @Value(\"${ali.signName}\")\n    private String signName;\n    @Value(\"${ali.templateCode}\")\n    private String templateCode;\n    @Value(\"${ali.expireTime}\")\n    private Long expireTime;\n\n    @PostConstruct\n    public void init() {\n        try {\n            Config config = new Config()\n                    // 您的AccessKey ID\n                    .setAccessKeyId(accessKey)\n                    // 您的AccessKey Secret\n                    .setAccessKeySecret(secretKey);\n            // 访问的域名\n            config.endpoint = endpoint;\n            messageClient = new Client(config);\n        } catch (Exception e) {\n            e.printStackTrace();\n            log.error(\"初始化messageClient配置异常: 【{}】\", e.fillInStackTrace());\n        }\n    }\n\n    /**\n     * 发送短信\n     *\n     * @param tel 手机号\n     */\n    public void sendMessage(String tel) {\n        String code = RandomUtil.randomNumbers(6);\n        SendSmsRequest sendSmsRequest = new SendSmsRequest()\n                .setSignName(signName)\n                .setTemplateCode(templateCode)\n                .setPhoneNumbers(tel)\n                .setTemplateParam(\"{\\\"code\\\":\\\"\" + code + \"\\\"}\");\n        try {\n            SendSmsResponse sendSmsResponse = messageClient.sendSms(sendSmsRequest);\n            String result = sendSmsResponse.getBody().getCode();\n            if (\"OK\".equals(result)) {\n                redisUtils.set(String.format(RedisKey.MESSAGE_KEY,tel), code, expireTime);\n            }\n        } catch (Exception e) {\n            log.error(\"发送短信异常:{}\", e.fillInStackTrace());\n        }\n    }\n\n    /**\n     * 验证短信验证码\n     * @param tel 手机号\n     * @param code 验证码\n     * @return 验证结果\n     */\n    public boolean isCode(String tel, String code) {\n        String resultCode = redisUtils.get(String.format(RedisKey.MESSAGE_KEY,tel));\n        if (resultCode != null && resultCode.equals(code)) {\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * 不是正确的验证码\n     * @param tel 手机号\n     * @param code 验证码\n     * @return 验证结果\n     */\n    public boolean isNotCode(String tel, String code) {\n        return !isCode(tel, code);\n    }\n}\n```\n\n","slug":"BookMark/Spring Boot/Spring Boot & 阿里短信服务（Redis+短信验证码）","published":1,"updated":"2022-09-06T07:08:49.883Z","_id":"cl7ptszom001oaba5en876g12","comments":1,"layout":"post","photos":[],"link":"","content":"<h1><span id=\"spring-boot-amp-阿里短信服务redis短信验证码\">Spring Boot &amp; 阿里短信服务（Redis+短信验证码）</span></h1><hr>\n<p>[toc]</p>\n<hr>\n<h2><span id=\"1-创建签名\">1. 创建签名</span></h2><ul>\n<li>如下位置创建签名，等待审核通过<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/aHR0cDovL2hicS5pZHNlLnRvcC9ibG9nLzE1NzE3NTAxMzI2MjkucG5n.png\" alt=\"enter description here\"><br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/aHR0cDovL2hicS5pZHNlLnRvcC9ibG9nLzE1NzE3NTAyMDA0NzMucG5n.png\" alt=\"enter description here\"></li>\n</ul>\n<h2><span id=\"2-创建模板\">2. 创建模板</span></h2><ul>\n<li>如下位置创建模板，等待审核通过<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/aHR0cDovL2hicS5pZHNlLnRvcC9ibG9nLzE1NzE3NTAzNjcyNjUucG5n-20220901181234093.png\" alt=\"enter description here\"><br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/aHR0cDovL2hicS5pZHNlLnRvcC9ibG9nLzE1NzE3NTA1NDEwODMucG5n-20220901181239935.png\" alt=\"enter description here\"></li>\n</ul>\n<h2><span id=\"3-测试验证码功能\">3. 测试验证码功能</span></h2><ul>\n<li>填写相关信息，测试发送<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/aHR0cDovL2hicS5pZHNlLnRvcC9ibG9nLzE1NzE3NTA4MDM4ODAucG5n-20220901181246773.png\" alt=\"enter description here\"><br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/format,png-20220901181259065.png\" alt=\"enter description here\"><br><font color=\"red\" size=\"5\">注：发送失败可能因为你余额不足。可以选择购买套餐。新号可去尝试下图位置领取免费短信。</font></li>\n<li>官网主页下拉最后</li>\n<li><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/aHR0cDovL2hicS5pZHNlLnRvcC9ibG9nLzE1NzE3NTExNzEyMjAucG5n-20220901181307940.png\" alt=\"enter description here\"></li>\n<li><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/aHR0cDovL2hicS5pZHNlLnRvcC9ibG9nLzE1NzE3NTExOTY4NjgucG5n-20220901181315014.png\" alt=\"enter description here\"></li>\n</ul>\n<h2><span id=\"4-查看api-demo\">4. 查看Api Demo</span></h2><ul>\n<li><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/aHR0cDovL2hicS5pZHNlLnRvcC9ibG9nLzE1NzE3NTEyMzUxNjUucG5n-20220901181320964.png\" alt=\"enter description here\"></li>\n<li><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/aHR0cDovL2hicS5pZHNlLnRvcC9ibG9nLzE1NzE3NTE0Mjc5MzkucG5n-20220901181328073.png\" alt=\"enter description here\"></li>\n</ul>\n<h2><span id=\"5-获取ak信息\">5. 获取AK信息</span></h2><ul>\n<li><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/aHR0cDovL2hicS5pZHNlLnRvcC9ibG9nLzE1NzE3NTE1MDAyMjYucG5n-20220901181333245.png\" alt=\"enter description here\"></li>\n<li>创建AccessKey</li>\n<li><img src=\"https://imgconvert.csdnimg.cn/aHR0cDovL2hicS5pZHNlLnRvcC9ibG9nLzE1NzE3NTE1NTQ4NTUucG5n?x-oss-process=image/format,png\" alt=\"enter description here\"></li>\n<li>保存一下AccessKeyId和AccessKeySecret</li>\n<li><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/aHR0cDovL2hicS5pZHNlLnRvcC9ibG9nLzE1NzE3NTE2MDQ5NjIucG5n-20220901181338869.png\" alt=\"enter description here\"></li>\n<li>将其复制分别填到AccessKeyId和AccessKeySecret的位置</li>\n<li><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/aHR0cDovL2hicS5pZHNlLnRvcC9ibG9nLzE1NzE3NTE5MjQ2NjcucG5n-20220901181342922.png\" alt=\"enter description here\"></li>\n</ul>\n<h2><span id=\"6-pomxml\">6. pom.xml</span></h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-comment\">&lt;!-- 短信服务--&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>com.aliyun<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>dysmsapi20170525<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>2.0.9<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h2><span id=\"7yml配置\">7.yml配置</span></h2><figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dts\"><span class=\"hljs-meta\">#阿里短息配置</span><br><span class=\"hljs-symbol\">ali:</span><br><span class=\"hljs-symbol\">  endpoint:</span> dysmsapi.aliyuncs.com<br><span class=\"hljs-symbol\">  accessKey:</span> LT***C4<br><span class=\"hljs-symbol\">  secretKey:</span> BQ***<span class=\"hljs-number\">1</span>M<br><span class=\"hljs-symbol\">  signName:</span> IDSE<br><span class=\"hljs-symbol\">  templateCode:</span> SMS_***<span class=\"hljs-number\">75</span><br><span class=\"hljs-symbol\">  expireTime:</span> <span class=\"hljs-number\">300</span><br></code></pre></td></tr></table></figure>\n\n<h2><span id=\"8自建工具类\">8.自建工具类</span></h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">package com.hbq.cms.util;<br><br>/**<br> * @Author: huibq<br> * @Date: 2022/5/6 15:33<br> * @Description: 短信发送工具类<br> */<br>@Slf4j<br>@Component<br>public class MessageUtil &#123;<br>    private static Client messageClient;<br><br>    @Resource<br>    private RedisUtils redisUtils;<br><br>    @Value(&quot;$&#123;ali.endpoint&#125;&quot;)<br>    private String endpoint;<br>    @Value(&quot;$&#123;ali.accessKey&#125;&quot;)<br>    private String accessKey;<br>    @Value(&quot;$&#123;ali.secretKey&#125;&quot;)<br>    private String secretKey;<br>    @Value(&quot;$&#123;ali.signName&#125;&quot;)<br>    private String signName;<br>    @Value(&quot;$&#123;ali.templateCode&#125;&quot;)<br>    private String templateCode;<br>    @Value(&quot;$&#123;ali.expireTime&#125;&quot;)<br>    private Long expireTime;<br><br>    @PostConstruct<br>    public void init() &#123;<br>        try &#123;<br>            Config config = new Config()<br>                    // 您的AccessKey ID<br>                    .setAccessKeyId(accessKey)<br>                    // 您的AccessKey Secret<br>                    .setAccessKeySecret(secretKey);<br>            // 访问的域名<br>            config.endpoint = endpoint;<br>            messageClient = new Client(config);<br>        &#125; catch (Exception e) &#123;<br>            e.printStackTrace();<br>            log.error(&quot;初始化messageClient配置异常: 【&#123;&#125;】&quot;, e.fillInStackTrace());<br>        &#125;<br>    &#125;<br><br>    /**<br>     * 发送短信<br>     *<br>     * @param tel 手机号<br>     */<br>    public void sendMessage(String tel) &#123;<br>        String code = RandomUtil.randomNumbers(6);<br>        SendSmsRequest sendSmsRequest = new SendSmsRequest()<br>                .setSignName(signName)<br>                .setTemplateCode(templateCode)<br>                .setPhoneNumbers(tel)<br>                .setTemplateParam(&quot;&#123;\\&quot;code\\&quot;:\\&quot;&quot; + code + &quot;\\&quot;&#125;&quot;);<br>        try &#123;<br>            SendSmsResponse sendSmsResponse = messageClient.sendSms(sendSmsRequest);<br>            String result = sendSmsResponse.getBody().getCode();<br>            if (&quot;OK&quot;.equals(result)) &#123;<br>                redisUtils.set(String.format(RedisKey.MESSAGE_KEY,tel), code, expireTime);<br>            &#125;<br>        &#125; catch (Exception e) &#123;<br>            log.error(&quot;发送短信异常:&#123;&#125;&quot;, e.fillInStackTrace());<br>        &#125;<br>    &#125;<br><br>    /**<br>     * 验证短信验证码<br>     * @param tel 手机号<br>     * @param code 验证码<br>     * @return 验证结果<br>     */<br>    public boolean isCode(String tel, String code) &#123;<br>        String resultCode = redisUtils.get(String.format(RedisKey.MESSAGE_KEY,tel));<br>        if (resultCode != null &amp;&amp; resultCode.equals(code)) &#123;<br>            return true;<br>        &#125;<br>        return false;<br>    &#125;<br><br>    /**<br>     * 不是正确的验证码<br>     * @param tel 手机号<br>     * @param code 验证码<br>     * @return 验证结果<br>     */<br>    public boolean isNotCode(String tel, String code) &#123;<br>        return !isCode(tel, code);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n","site":{"data":{}},"wordcount":2820,"excerpt":"","more":"<h1 id=\"Spring-Boot-amp-阿里短信服务（Redis-短信验证码）\"><a href=\"#Spring-Boot-amp-阿里短信服务（Redis-短信验证码）\" class=\"headerlink\" title=\"Spring Boot &amp; 阿里短信服务（Redis+短信验证码）\"></a>Spring Boot &amp; 阿里短信服务（Redis+短信验证码）</h1><hr>\n<p>[toc]</p>\n<hr>\n<h2 id=\"1-创建签名\"><a href=\"#1-创建签名\" class=\"headerlink\" title=\"1. 创建签名\"></a>1. 创建签名</h2><ul>\n<li>如下位置创建签名，等待审核通过<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/aHR0cDovL2hicS5pZHNlLnRvcC9ibG9nLzE1NzE3NTAxMzI2MjkucG5n.png\" alt=\"enter description here\"><br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/aHR0cDovL2hicS5pZHNlLnRvcC9ibG9nLzE1NzE3NTAyMDA0NzMucG5n.png\" alt=\"enter description here\"></li>\n</ul>\n<h2 id=\"2-创建模板\"><a href=\"#2-创建模板\" class=\"headerlink\" title=\"2. 创建模板\"></a>2. 创建模板</h2><ul>\n<li>如下位置创建模板，等待审核通过<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/aHR0cDovL2hicS5pZHNlLnRvcC9ibG9nLzE1NzE3NTAzNjcyNjUucG5n-20220901181234093.png\" alt=\"enter description here\"><br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/aHR0cDovL2hicS5pZHNlLnRvcC9ibG9nLzE1NzE3NTA1NDEwODMucG5n-20220901181239935.png\" alt=\"enter description here\"></li>\n</ul>\n<h2 id=\"3-测试验证码功能\"><a href=\"#3-测试验证码功能\" class=\"headerlink\" title=\"3. 测试验证码功能\"></a>3. 测试验证码功能</h2><ul>\n<li>填写相关信息，测试发送<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/aHR0cDovL2hicS5pZHNlLnRvcC9ibG9nLzE1NzE3NTA4MDM4ODAucG5n-20220901181246773.png\" alt=\"enter description here\"><br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/format,png-20220901181259065.png\" alt=\"enter description here\"><br><font color=red size=5>注：发送失败可能因为你余额不足。可以选择购买套餐。新号可去尝试下图位置领取免费短信。</font></li>\n<li>官网主页下拉最后</li>\n<li><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/aHR0cDovL2hicS5pZHNlLnRvcC9ibG9nLzE1NzE3NTExNzEyMjAucG5n-20220901181307940.png\" alt=\"enter description here\"></li>\n<li><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/aHR0cDovL2hicS5pZHNlLnRvcC9ibG9nLzE1NzE3NTExOTY4NjgucG5n-20220901181315014.png\" alt=\"enter description here\"></li>\n</ul>\n<h2 id=\"4-查看Api-Demo\"><a href=\"#4-查看Api-Demo\" class=\"headerlink\" title=\"4. 查看Api Demo\"></a>4. 查看Api Demo</h2><ul>\n<li><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/aHR0cDovL2hicS5pZHNlLnRvcC9ibG9nLzE1NzE3NTEyMzUxNjUucG5n-20220901181320964.png\" alt=\"enter description here\"></li>\n<li><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/aHR0cDovL2hicS5pZHNlLnRvcC9ibG9nLzE1NzE3NTE0Mjc5MzkucG5n-20220901181328073.png\" alt=\"enter description here\"></li>\n</ul>\n<h2 id=\"5-获取AK信息\"><a href=\"#5-获取AK信息\" class=\"headerlink\" title=\"5. 获取AK信息\"></a>5. 获取AK信息</h2><ul>\n<li><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/aHR0cDovL2hicS5pZHNlLnRvcC9ibG9nLzE1NzE3NTE1MDAyMjYucG5n-20220901181333245.png\" alt=\"enter description here\"></li>\n<li>创建AccessKey</li>\n<li><img src=\"https://imgconvert.csdnimg.cn/aHR0cDovL2hicS5pZHNlLnRvcC9ibG9nLzE1NzE3NTE1NTQ4NTUucG5n?x-oss-process=image/format,png\" alt=\"enter description here\"></li>\n<li>保存一下AccessKeyId和AccessKeySecret</li>\n<li><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/aHR0cDovL2hicS5pZHNlLnRvcC9ibG9nLzE1NzE3NTE2MDQ5NjIucG5n-20220901181338869.png\" alt=\"enter description here\"></li>\n<li>将其复制分别填到AccessKeyId和AccessKeySecret的位置</li>\n<li><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/aHR0cDovL2hicS5pZHNlLnRvcC9ibG9nLzE1NzE3NTE5MjQ2NjcucG5n-20220901181342922.png\" alt=\"enter description here\"></li>\n</ul>\n<h2 id=\"6-pom-xml\"><a href=\"#6-pom-xml\" class=\"headerlink\" title=\"6. pom.xml\"></a>6. pom.xml</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-comment\">&lt;!-- 短信服务--&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>com.aliyun<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>dysmsapi20170525<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>2.0.9<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"7-yml配置\"><a href=\"#7-yml配置\" class=\"headerlink\" title=\"7.yml配置\"></a>7.yml配置</h2><figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dts\"><span class=\"hljs-meta\">#阿里短息配置</span><br><span class=\"hljs-symbol\">ali:</span><br><span class=\"hljs-symbol\">  endpoint:</span> dysmsapi.aliyuncs.com<br><span class=\"hljs-symbol\">  accessKey:</span> LT***C4<br><span class=\"hljs-symbol\">  secretKey:</span> BQ***<span class=\"hljs-number\">1</span>M<br><span class=\"hljs-symbol\">  signName:</span> IDSE<br><span class=\"hljs-symbol\">  templateCode:</span> SMS_***<span class=\"hljs-number\">75</span><br><span class=\"hljs-symbol\">  expireTime:</span> <span class=\"hljs-number\">300</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"8-自建工具类\"><a href=\"#8-自建工具类\" class=\"headerlink\" title=\"8.自建工具类\"></a>8.自建工具类</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">package com.hbq.cms.util;<br><br>/**<br> * @Author: huibq<br> * @Date: 2022/5/6 15:33<br> * @Description: 短信发送工具类<br> */<br>@Slf4j<br>@Component<br>public class MessageUtil &#123;<br>    private static Client messageClient;<br><br>    @Resource<br>    private RedisUtils redisUtils;<br><br>    @Value(&quot;$&#123;ali.endpoint&#125;&quot;)<br>    private String endpoint;<br>    @Value(&quot;$&#123;ali.accessKey&#125;&quot;)<br>    private String accessKey;<br>    @Value(&quot;$&#123;ali.secretKey&#125;&quot;)<br>    private String secretKey;<br>    @Value(&quot;$&#123;ali.signName&#125;&quot;)<br>    private String signName;<br>    @Value(&quot;$&#123;ali.templateCode&#125;&quot;)<br>    private String templateCode;<br>    @Value(&quot;$&#123;ali.expireTime&#125;&quot;)<br>    private Long expireTime;<br><br>    @PostConstruct<br>    public void init() &#123;<br>        try &#123;<br>            Config config = new Config()<br>                    // 您的AccessKey ID<br>                    .setAccessKeyId(accessKey)<br>                    // 您的AccessKey Secret<br>                    .setAccessKeySecret(secretKey);<br>            // 访问的域名<br>            config.endpoint = endpoint;<br>            messageClient = new Client(config);<br>        &#125; catch (Exception e) &#123;<br>            e.printStackTrace();<br>            log.error(&quot;初始化messageClient配置异常: 【&#123;&#125;】&quot;, e.fillInStackTrace());<br>        &#125;<br>    &#125;<br><br>    /**<br>     * 发送短信<br>     *<br>     * @param tel 手机号<br>     */<br>    public void sendMessage(String tel) &#123;<br>        String code = RandomUtil.randomNumbers(6);<br>        SendSmsRequest sendSmsRequest = new SendSmsRequest()<br>                .setSignName(signName)<br>                .setTemplateCode(templateCode)<br>                .setPhoneNumbers(tel)<br>                .setTemplateParam(&quot;&#123;\\&quot;code\\&quot;:\\&quot;&quot; + code + &quot;\\&quot;&#125;&quot;);<br>        try &#123;<br>            SendSmsResponse sendSmsResponse = messageClient.sendSms(sendSmsRequest);<br>            String result = sendSmsResponse.getBody().getCode();<br>            if (&quot;OK&quot;.equals(result)) &#123;<br>                redisUtils.set(String.format(RedisKey.MESSAGE_KEY,tel), code, expireTime);<br>            &#125;<br>        &#125; catch (Exception e) &#123;<br>            log.error(&quot;发送短信异常:&#123;&#125;&quot;, e.fillInStackTrace());<br>        &#125;<br>    &#125;<br><br>    /**<br>     * 验证短信验证码<br>     * @param tel 手机号<br>     * @param code 验证码<br>     * @return 验证结果<br>     */<br>    public boolean isCode(String tel, String code) &#123;<br>        String resultCode = redisUtils.get(String.format(RedisKey.MESSAGE_KEY,tel));<br>        if (resultCode != null &amp;&amp; resultCode.equals(code)) &#123;<br>            return true;<br>        &#125;<br>        return false;<br>    &#125;<br><br>    /**<br>     * 不是正确的验证码<br>     * @param tel 手机号<br>     * @param code 验证码<br>     * @return 验证结果<br>     */<br>    public boolean isNotCode(String tel, String code) &#123;<br>        return !isCode(tel, code);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n"},{"title":"Spring Boot与Spring Clound 微服务项目搭建流程","date":"2022-09-05T09:09:05.000Z","category_bar":true,"_content":"# Spring Boot与Spring Clound 微服务项目搭建流程\n---\n[toc]\n\n---\n\n+ 前言：此博文用于记录Spring boot与Spring clound 项目搭建过程，包含简单数据库查询，逆向工程，常用pom依赖。完整配置Spring clound 项目微服务项目。\n<font color=red size=5>注：每次导入pom依赖后请install该module。</font>\n![image-20220720110412048](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720110412048.png)\n\n---\n\n## 一、创建父级parent提供基础jar包\n1. 创建maven的moudule\n![image-20220720110422141](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720110422141.png)\n2. 指定父类型都为pom类型，并添加相关依赖\n[parent依赖一（1）](https://blog.huijia.cf/archives/springboot-yu-springclound-xiang-mu-si-ceng-pom-yi-ji-ji-chu-pei-zhi-wen-jian)\n\n---\n## 二、创建common为项目提供公用jar包、实体类、工具类等\n1. 创建maven类型module\n![image-20220720110432351](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720110432351.png)\n2. 添加父类依赖引用以及项目需要jar包\n[common依赖一（2）](https://blog.huijia.cf/archives/springboot-yu-springclound-xiang-mu-si-ceng-pom-yi-ji-ji-chu-pei-zhi-wen-jian)\n3. 在resources下添加逆向工程配置文件generatorConfig.xml\n[generatorConfig.xml 二（1）](https://blog.huijia.cf/archives/springboot-yu-springclound-xiang-mu-si-ceng-pom-yi-ji-ji-chu-pei-zhi-wen-jian)\n![image-20220720110510285](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720110510285.png)\n4. 在resources下创建mappers目录用于存放mapper.xml。\n![image-20220720110521000](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720110521000.png)\n\n5. 如图位置运行逆向工程，得到mapper，pojo，mappers\n![image-20220720110530043](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720110530043.png)\n![image-20220720110541273](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720110541273.png)\n\n6. 添加所需工具类，如\n![image-20220720110550859](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720110550859.png)\n\n---\n## 三、创建server提供spring cloud服务\n1. 创建spring boot的module\n![image-20220720110600514](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720110600514.png)\n![image-20220720110609413](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720110609413.png)\n![image-20220720110619338](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720110619338.png)\n\n2. 添加pom依赖引入父类包\n[server依赖一（3）](https://blog.huijia.cf/archives/springboot-yu-springclound-xiang-mu-si-ceng-pom-yi-ji-ji-chu-pei-zhi-wen-jian)\n\n3. 运行主类添加@EnableEurekaServer 注解\n![image-20220720110629518](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720110629518.png)\n\n4. 配置application.properties服务\n\n```javascript?linenums\n#端口\nserver.port=8000\n#application.name\nspring.application.name=ttl_server\n\n#通过eureka.client.registerWithEureka：false和fetchRegistry：false来表明自己是一个eureka server.\neureka.instance.hostname=localhost\n#registerWithEureka表示是否注册自身到eureka服务器\neureka.client.register-with-eureka=false\n#fetchRegistry表示是否从eureka服务器获取注册信息。\neureka.client.fetch-registry=false\neureka.client.service-url.defaultZone=http://${eureka.instance.hostname}:${server.port}/eureka/\n\n```\n---\n## 四、创建api编写项目源码\n1. 创建spring boot的module（步骤同server创建）\n2. 添加pom，将common作为jar包引入\n[api依赖一（4）](https://blog.huijia.cf/archives/springboot-yu-springclound-xiang-mu-si-ceng-pom-yi-ji-ji-chu-pei-zhi-wen-jian)\n\n3. 运行主类添加client注解\n```javascript?linenums\n@EnableEurekaClient\n@EnableFeignClients\n@ComponentScan(\"com.zhiyou\")\n@MapperScan(\"com.zhiyou.mapper\")\n```\n![image-20220720110641415](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720110641415.png)\n\n4. 配置application.properties客户端\n```javascript?linenums\n#设置客户端\nserver.port=8001\nspring.application.name=ttl_api\neureka.client.service-url.defaultZone=http://localhost:8000/eureka/\n\n#连接数据库\nspring.datasource.url=jdbc:mysql://120.27.244.176:3306/hospital?useUnicode=true&characterEncoding=UTF-8&useSSL=false\nspring.datasource.username=root\nspring.datasource.password=HBQ521521cf*\nspring.datasource.driver-class-name=com.mysql.jdbc.Driver\n\n#设置mapper.xml文件扫描位置\nmybatis.mapper-locations=classpath:/mappers/*.xml\n\n#给实体类包起别名\nmybatis.type-aliases-package=com.zhiyou.pojo\n\n```\n---\n## 五、测试程序运行\n1. 编写测试程序，查询表中内容\n![image-20220720110651735](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720110651735.png)\n+ controller\n![image-20220720110704608](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720110704608.png)\n+ serviceImpl\n![image-20220720110716798](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720110716798.png)\n\n2. 先启动server，再启动api。\n3. 浏览器输入\"http://localhost:8001/found.action\"测试\n![image-20220720110737438](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720110737438.png)\n","source":"_posts/BookMark/Spring Boot/Spring Boot与Spring Clound 微服务项目搭建流程.md","raw":"---\ntitle: Spring Boot与Spring Clound 微服务项目搭建流程\ndate: 2022-09-05 17:09:05\ncategory_bar: true\ncategories: Spring Boot\ntags:\n- Spring Boot\n- Spring Clound\n---\n# Spring Boot与Spring Clound 微服务项目搭建流程\n---\n[toc]\n\n---\n\n+ 前言：此博文用于记录Spring boot与Spring clound 项目搭建过程，包含简单数据库查询，逆向工程，常用pom依赖。完整配置Spring clound 项目微服务项目。\n<font color=red size=5>注：每次导入pom依赖后请install该module。</font>\n![image-20220720110412048](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720110412048.png)\n\n---\n\n## 一、创建父级parent提供基础jar包\n1. 创建maven的moudule\n![image-20220720110422141](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720110422141.png)\n2. 指定父类型都为pom类型，并添加相关依赖\n[parent依赖一（1）](https://blog.huijia.cf/archives/springboot-yu-springclound-xiang-mu-si-ceng-pom-yi-ji-ji-chu-pei-zhi-wen-jian)\n\n---\n## 二、创建common为项目提供公用jar包、实体类、工具类等\n1. 创建maven类型module\n![image-20220720110432351](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720110432351.png)\n2. 添加父类依赖引用以及项目需要jar包\n[common依赖一（2）](https://blog.huijia.cf/archives/springboot-yu-springclound-xiang-mu-si-ceng-pom-yi-ji-ji-chu-pei-zhi-wen-jian)\n3. 在resources下添加逆向工程配置文件generatorConfig.xml\n[generatorConfig.xml 二（1）](https://blog.huijia.cf/archives/springboot-yu-springclound-xiang-mu-si-ceng-pom-yi-ji-ji-chu-pei-zhi-wen-jian)\n![image-20220720110510285](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720110510285.png)\n4. 在resources下创建mappers目录用于存放mapper.xml。\n![image-20220720110521000](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720110521000.png)\n\n5. 如图位置运行逆向工程，得到mapper，pojo，mappers\n![image-20220720110530043](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720110530043.png)\n![image-20220720110541273](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720110541273.png)\n\n6. 添加所需工具类，如\n![image-20220720110550859](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720110550859.png)\n\n---\n## 三、创建server提供spring cloud服务\n1. 创建spring boot的module\n![image-20220720110600514](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720110600514.png)\n![image-20220720110609413](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720110609413.png)\n![image-20220720110619338](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720110619338.png)\n\n2. 添加pom依赖引入父类包\n[server依赖一（3）](https://blog.huijia.cf/archives/springboot-yu-springclound-xiang-mu-si-ceng-pom-yi-ji-ji-chu-pei-zhi-wen-jian)\n\n3. 运行主类添加@EnableEurekaServer 注解\n![image-20220720110629518](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720110629518.png)\n\n4. 配置application.properties服务\n\n```javascript?linenums\n#端口\nserver.port=8000\n#application.name\nspring.application.name=ttl_server\n\n#通过eureka.client.registerWithEureka：false和fetchRegistry：false来表明自己是一个eureka server.\neureka.instance.hostname=localhost\n#registerWithEureka表示是否注册自身到eureka服务器\neureka.client.register-with-eureka=false\n#fetchRegistry表示是否从eureka服务器获取注册信息。\neureka.client.fetch-registry=false\neureka.client.service-url.defaultZone=http://${eureka.instance.hostname}:${server.port}/eureka/\n\n```\n---\n## 四、创建api编写项目源码\n1. 创建spring boot的module（步骤同server创建）\n2. 添加pom，将common作为jar包引入\n[api依赖一（4）](https://blog.huijia.cf/archives/springboot-yu-springclound-xiang-mu-si-ceng-pom-yi-ji-ji-chu-pei-zhi-wen-jian)\n\n3. 运行主类添加client注解\n```javascript?linenums\n@EnableEurekaClient\n@EnableFeignClients\n@ComponentScan(\"com.zhiyou\")\n@MapperScan(\"com.zhiyou.mapper\")\n```\n![image-20220720110641415](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720110641415.png)\n\n4. 配置application.properties客户端\n```javascript?linenums\n#设置客户端\nserver.port=8001\nspring.application.name=ttl_api\neureka.client.service-url.defaultZone=http://localhost:8000/eureka/\n\n#连接数据库\nspring.datasource.url=jdbc:mysql://120.27.244.176:3306/hospital?useUnicode=true&characterEncoding=UTF-8&useSSL=false\nspring.datasource.username=root\nspring.datasource.password=HBQ521521cf*\nspring.datasource.driver-class-name=com.mysql.jdbc.Driver\n\n#设置mapper.xml文件扫描位置\nmybatis.mapper-locations=classpath:/mappers/*.xml\n\n#给实体类包起别名\nmybatis.type-aliases-package=com.zhiyou.pojo\n\n```\n---\n## 五、测试程序运行\n1. 编写测试程序，查询表中内容\n![image-20220720110651735](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720110651735.png)\n+ controller\n![image-20220720110704608](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720110704608.png)\n+ serviceImpl\n![image-20220720110716798](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720110716798.png)\n\n2. 先启动server，再启动api。\n3. 浏览器输入\"http://localhost:8001/found.action\"测试\n![image-20220720110737438](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720110737438.png)\n","slug":"BookMark/Spring Boot/Spring Boot与Spring Clound 微服务项目搭建流程","published":1,"updated":"2022-09-06T07:08:49.880Z","_id":"cl7ptszom001paba5d45e9vz8","comments":1,"layout":"post","photos":[],"link":"","content":"<h1><span id=\"spring-boot与spring-clound-微服务项目搭建流程\">Spring Boot与Spring Clound 微服务项目搭建流程</span></h1><hr>\n<p>[toc]</p>\n<hr>\n<ul>\n<li>前言：此博文用于记录Spring boot与Spring clound 项目搭建过程，包含简单数据库查询，逆向工程，常用pom依赖。完整配置Spring clound 项目微服务项目。<br><font color=\"red\" size=\"5\">注：每次导入pom依赖后请install该module。</font><br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720110412048.png\" alt=\"image-20220720110412048\"></li>\n</ul>\n<hr>\n<h2><span id=\"一-创建父级parent提供基础jar包\">一、创建父级parent提供基础jar包</span></h2><ol>\n<li>创建maven的moudule<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720110422141.png\" alt=\"image-20220720110422141\"></li>\n<li>指定父类型都为pom类型，并添加相关依赖<br><a href=\"https://blog.huijia.cf/archives/springboot-yu-springclound-xiang-mu-si-ceng-pom-yi-ji-ji-chu-pei-zhi-wen-jian\">parent依赖一（1）</a></li>\n</ol>\n<hr>\n<h2><span id=\"二-创建common为项目提供公用jar包-实体类-工具类等\">二、创建common为项目提供公用jar包、实体类、工具类等</span></h2><ol>\n<li><p>创建maven类型module<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720110432351.png\" alt=\"image-20220720110432351\"></p>\n</li>\n<li><p>添加父类依赖引用以及项目需要jar包<br><a href=\"https://blog.huijia.cf/archives/springboot-yu-springclound-xiang-mu-si-ceng-pom-yi-ji-ji-chu-pei-zhi-wen-jian\">common依赖一（2）</a></p>\n</li>\n<li><p>在resources下添加逆向工程配置文件generatorConfig.xml<br><a href=\"https://blog.huijia.cf/archives/springboot-yu-springclound-xiang-mu-si-ceng-pom-yi-ji-ji-chu-pei-zhi-wen-jian\">generatorConfig.xml 二（1）</a><br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720110510285.png\" alt=\"image-20220720110510285\"></p>\n</li>\n<li><p>在resources下创建mappers目录用于存放mapper.xml。<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720110521000.png\" alt=\"image-20220720110521000\"></p>\n</li>\n<li><p>如图位置运行逆向工程，得到mapper，pojo，mappers<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720110530043.png\" alt=\"image-20220720110530043\"><br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720110541273.png\" alt=\"image-20220720110541273\"></p>\n</li>\n<li><p>添加所需工具类，如<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720110550859.png\" alt=\"image-20220720110550859\"></p>\n</li>\n</ol>\n<hr>\n<h2><span id=\"三-创建server提供spring-cloud服务\">三、创建server提供spring cloud服务</span></h2><ol>\n<li><p>创建spring boot的module<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720110600514.png\" alt=\"image-20220720110600514\"><br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720110609413.png\" alt=\"image-20220720110609413\"><br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720110619338.png\" alt=\"image-20220720110619338\"></p>\n</li>\n<li><p>添加pom依赖引入父类包<br><a href=\"https://blog.huijia.cf/archives/springboot-yu-springclound-xiang-mu-si-ceng-pom-yi-ji-ji-chu-pei-zhi-wen-jian\">server依赖一（3）</a></p>\n</li>\n<li><p>运行主类添加@EnableEurekaServer 注解<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720110629518.png\" alt=\"image-20220720110629518\"></p>\n</li>\n<li><p>配置application.properties服务</p>\n</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">#端口<br>server.port=8000<br>#application.name<br>spring.application.name=ttl_server<br><br>#通过eureka.client.registerWithEureka：false和fetchRegistry：false来表明自己是一个eureka server.<br>eureka.instance.hostname=localhost<br>#registerWithEureka表示是否注册自身到eureka服务器<br>eureka.client.register-with-eureka=false<br>#fetchRegistry表示是否从eureka服务器获取注册信息。<br>eureka.client.fetch-registry=false<br>eureka.client.service-url.defaultZone=http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/<br><br></code></pre></td></tr></table></figure>\n<hr>\n<h2><span id=\"四-创建api编写项目源码\">四、创建api编写项目源码</span></h2><ol>\n<li><p>创建spring boot的module（步骤同server创建）</p>\n</li>\n<li><p>添加pom，将common作为jar包引入<br><a href=\"https://blog.huijia.cf/archives/springboot-yu-springclound-xiang-mu-si-ceng-pom-yi-ji-ji-chu-pei-zhi-wen-jian\">api依赖一（4）</a></p>\n</li>\n<li><p>运行主类添加client注解</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">@EnableEurekaClient<br>@EnableFeignClients<br>@ComponentScan(&quot;com.zhiyou&quot;)<br>@MapperScan(&quot;com.zhiyou.mapper&quot;)<br></code></pre></td></tr></table></figure>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720110641415.png\" alt=\"image-20220720110641415\"></p>\n</li>\n<li><p>配置application.properties客户端</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">#设置客户端<br>server.port=8001<br>spring.application.name=ttl_api<br>eureka.client.service-url.defaultZone=http://localhost:8000/eureka/<br><br>#连接数据库<br>spring.datasource.url=jdbc:mysql://120.27.244.176:3306/hospital?useUnicode=true&amp;characterEncoding=UTF-8&amp;useSSL=false<br>spring.datasource.username=root<br>spring.datasource.password=HBQ521521cf*<br>spring.datasource.driver-class-name=com.mysql.jdbc.Driver<br><br>#设置mapper.xml文件扫描位置<br>mybatis.mapper-locations=classpath:/mappers/*.xml<br><br>#给实体类包起别名<br>mybatis.type-aliases-package=com.zhiyou.pojo<br><br></code></pre></td></tr></table></figure></li>\n</ol>\n<hr>\n<h2><span id=\"五-测试程序运行\">五、测试程序运行</span></h2><ol>\n<li>编写测试程序，查询表中内容<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720110651735.png\" alt=\"image-20220720110651735\"></li>\n</ol>\n<ul>\n<li>controller<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720110704608.png\" alt=\"image-20220720110704608\"></li>\n<li>serviceImpl<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720110716798.png\" alt=\"image-20220720110716798\"></li>\n</ul>\n<ol start=\"2\">\n<li>先启动server，再启动api。</li>\n<li>浏览器输入”<a href=\"http://localhost:8001/found.action&quot;%E6%B5%8B%E8%AF%95\">http://localhost:8001/found.action&quot;测试</a><br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720110737438.png\" alt=\"image-20220720110737438\"></li>\n</ol>\n","site":{"data":{}},"wordcount":1888,"excerpt":"","more":"<h1 id=\"Spring-Boot与Spring-Clound-微服务项目搭建流程\"><a href=\"#Spring-Boot与Spring-Clound-微服务项目搭建流程\" class=\"headerlink\" title=\"Spring Boot与Spring Clound 微服务项目搭建流程\"></a>Spring Boot与Spring Clound 微服务项目搭建流程</h1><hr>\n<p>[toc]</p>\n<hr>\n<ul>\n<li>前言：此博文用于记录Spring boot与Spring clound 项目搭建过程，包含简单数据库查询，逆向工程，常用pom依赖。完整配置Spring clound 项目微服务项目。<br><font color=red size=5>注：每次导入pom依赖后请install该module。</font><br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720110412048.png\" alt=\"image-20220720110412048\"></li>\n</ul>\n<hr>\n<h2 id=\"一、创建父级parent提供基础jar包\"><a href=\"#一、创建父级parent提供基础jar包\" class=\"headerlink\" title=\"一、创建父级parent提供基础jar包\"></a>一、创建父级parent提供基础jar包</h2><ol>\n<li>创建maven的moudule<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720110422141.png\" alt=\"image-20220720110422141\"></li>\n<li>指定父类型都为pom类型，并添加相关依赖<br><a href=\"https://blog.huijia.cf/archives/springboot-yu-springclound-xiang-mu-si-ceng-pom-yi-ji-ji-chu-pei-zhi-wen-jian\">parent依赖一（1）</a></li>\n</ol>\n<hr>\n<h2 id=\"二、创建common为项目提供公用jar包、实体类、工具类等\"><a href=\"#二、创建common为项目提供公用jar包、实体类、工具类等\" class=\"headerlink\" title=\"二、创建common为项目提供公用jar包、实体类、工具类等\"></a>二、创建common为项目提供公用jar包、实体类、工具类等</h2><ol>\n<li><p>创建maven类型module<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720110432351.png\" alt=\"image-20220720110432351\"></p>\n</li>\n<li><p>添加父类依赖引用以及项目需要jar包<br><a href=\"https://blog.huijia.cf/archives/springboot-yu-springclound-xiang-mu-si-ceng-pom-yi-ji-ji-chu-pei-zhi-wen-jian\">common依赖一（2）</a></p>\n</li>\n<li><p>在resources下添加逆向工程配置文件generatorConfig.xml<br><a href=\"https://blog.huijia.cf/archives/springboot-yu-springclound-xiang-mu-si-ceng-pom-yi-ji-ji-chu-pei-zhi-wen-jian\">generatorConfig.xml 二（1）</a><br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720110510285.png\" alt=\"image-20220720110510285\"></p>\n</li>\n<li><p>在resources下创建mappers目录用于存放mapper.xml。<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720110521000.png\" alt=\"image-20220720110521000\"></p>\n</li>\n<li><p>如图位置运行逆向工程，得到mapper，pojo，mappers<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720110530043.png\" alt=\"image-20220720110530043\"><br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720110541273.png\" alt=\"image-20220720110541273\"></p>\n</li>\n<li><p>添加所需工具类，如<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720110550859.png\" alt=\"image-20220720110550859\"></p>\n</li>\n</ol>\n<hr>\n<h2 id=\"三、创建server提供spring-cloud服务\"><a href=\"#三、创建server提供spring-cloud服务\" class=\"headerlink\" title=\"三、创建server提供spring cloud服务\"></a>三、创建server提供spring cloud服务</h2><ol>\n<li><p>创建spring boot的module<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720110600514.png\" alt=\"image-20220720110600514\"><br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720110609413.png\" alt=\"image-20220720110609413\"><br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720110619338.png\" alt=\"image-20220720110619338\"></p>\n</li>\n<li><p>添加pom依赖引入父类包<br><a href=\"https://blog.huijia.cf/archives/springboot-yu-springclound-xiang-mu-si-ceng-pom-yi-ji-ji-chu-pei-zhi-wen-jian\">server依赖一（3）</a></p>\n</li>\n<li><p>运行主类添加@EnableEurekaServer 注解<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720110629518.png\" alt=\"image-20220720110629518\"></p>\n</li>\n<li><p>配置application.properties服务</p>\n</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">#端口<br>server.port=8000<br>#application.name<br>spring.application.name=ttl_server<br><br>#通过eureka.client.registerWithEureka：false和fetchRegistry：false来表明自己是一个eureka server.<br>eureka.instance.hostname=localhost<br>#registerWithEureka表示是否注册自身到eureka服务器<br>eureka.client.register-with-eureka=false<br>#fetchRegistry表示是否从eureka服务器获取注册信息。<br>eureka.client.fetch-registry=false<br>eureka.client.service-url.defaultZone=http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/<br><br></code></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"四、创建api编写项目源码\"><a href=\"#四、创建api编写项目源码\" class=\"headerlink\" title=\"四、创建api编写项目源码\"></a>四、创建api编写项目源码</h2><ol>\n<li><p>创建spring boot的module（步骤同server创建）</p>\n</li>\n<li><p>添加pom，将common作为jar包引入<br><a href=\"https://blog.huijia.cf/archives/springboot-yu-springclound-xiang-mu-si-ceng-pom-yi-ji-ji-chu-pei-zhi-wen-jian\">api依赖一（4）</a></p>\n</li>\n<li><p>运行主类添加client注解</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">@EnableEurekaClient<br>@EnableFeignClients<br>@ComponentScan(&quot;com.zhiyou&quot;)<br>@MapperScan(&quot;com.zhiyou.mapper&quot;)<br></code></pre></td></tr></table></figure>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720110641415.png\" alt=\"image-20220720110641415\"></p>\n</li>\n<li><p>配置application.properties客户端</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">#设置客户端<br>server.port=8001<br>spring.application.name=ttl_api<br>eureka.client.service-url.defaultZone=http://localhost:8000/eureka/<br><br>#连接数据库<br>spring.datasource.url=jdbc:mysql://120.27.244.176:3306/hospital?useUnicode=true&amp;characterEncoding=UTF-8&amp;useSSL=false<br>spring.datasource.username=root<br>spring.datasource.password=HBQ521521cf*<br>spring.datasource.driver-class-name=com.mysql.jdbc.Driver<br><br>#设置mapper.xml文件扫描位置<br>mybatis.mapper-locations=classpath:/mappers/*.xml<br><br>#给实体类包起别名<br>mybatis.type-aliases-package=com.zhiyou.pojo<br><br></code></pre></td></tr></table></figure></li>\n</ol>\n<hr>\n<h2 id=\"五、测试程序运行\"><a href=\"#五、测试程序运行\" class=\"headerlink\" title=\"五、测试程序运行\"></a>五、测试程序运行</h2><ol>\n<li>编写测试程序，查询表中内容<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720110651735.png\" alt=\"image-20220720110651735\"></li>\n</ol>\n<ul>\n<li>controller<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720110704608.png\" alt=\"image-20220720110704608\"></li>\n<li>serviceImpl<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720110716798.png\" alt=\"image-20220720110716798\"></li>\n</ul>\n<ol start=\"2\">\n<li>先启动server，再启动api。</li>\n<li>浏览器输入”<a href=\"http://localhost:8001/found.action&quot;%E6%B5%8B%E8%AF%95\">http://localhost:8001/found.action&quot;测试</a><br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720110737438.png\" alt=\"image-20220720110737438\"></li>\n</ol>\n"},{"title":"Spring Boot与Spring Clound项目四层pom以及基础配置文件","date":"2022-09-05T09:09:05.000Z","category_bar":true,"_content":"# Spring Boot与Spring Clound项目四层pom以及基础配置文件\n\n---\n\n[toc]\n\n---\n## 一、pom\n### 1.parent\n```javascript?linenums\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>com.zhiyou</groupId>\n    <artifactId>parent</artifactId>\n    <version>1.0-SNAPSHOT</version>\n    <packaging>pom</packaging>\n\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>2.0.3.RELEASE</version>\n        <relativePath/>\n    </parent>\n\n    <properties>\n        <jaxb-api>2.3.0</jaxb-api>\n        <springfox-swagger-ui>2.8.0</springfox-swagger-ui>\n        <springfox-swagger2>2.8.0</springfox-swagger2>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n        <java.version>1.8</java.version>\n        <spring-cloud.version>Finchley.RELEASE</spring-cloud.version>\n    </properties>\n\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.cloud</groupId>\n            <artifactId>spring-cloud-starter-netflix-eureka-server</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <scope>test</scope>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.cloud</groupId>\n            <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.cloud</groupId>\n            <artifactId>spring-cloud-starter-openfeign</artifactId>\n        </dependency>\n\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.cloud</groupId>\n            <artifactId>spring-cloud-starter-netflix-hystrix</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-actuator</artifactId>\n        </dependency>\n\n        <dependency>\n            <groupId>io.springfox</groupId>\n            <artifactId>springfox-swagger2</artifactId>\n            <version>${springfox-swagger2}</version>\n        </dependency>\n        <dependency>\n            <groupId>io.springfox</groupId>\n            <artifactId>springfox-swagger-ui</artifactId>\n            <version>${springfox-swagger-ui}</version>\n        </dependency>\n\n        <dependency>\n            <groupId>javax.xml.bind</groupId>\n            <artifactId>jaxb-api</artifactId>\n            <version>${jaxb-api}</version>\n        </dependency>\n\n    </dependencies>\n    <dependencyManagement>\n        <dependencies>\n            <dependency>\n                <groupId>org.springframework.cloud</groupId>\n                <artifactId>spring-cloud-dependencies</artifactId>\n                <version>${spring-cloud.version}</version>\n                <type>pom</type>\n                <scope>import</scope>\n            </dependency>\n        </dependencies>\n    </dependencyManagement>\n</project>\n```\n---\n### 2.common\n```javascript?linenums\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n    <parent>\n        <groupId>com.zhiyou</groupId>\n        <artifactId>parent</artifactId>\n        <version>1.0-SNAPSHOT</version>\n    </parent>\n\n    <groupId>com.zhiyou</groupId>\n    <artifactId>common</artifactId>\n    <version>1.0-SNAPSHOT</version>\n\n    <properties>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n        <java.version>1.8</java.version>\n\n        <mysql.version>5.1.21</mysql.version>\n        <mybatis-spring.version>1.1.1</mybatis-spring.version>\n        <fastjson.version>1.2.56</fastjson.version>\n        <c3p0.version>0.9.1.2</c3p0.version>\n        <jedis.version>3.0.1</jedis.version>\n\n        <commons-fileupload.version>1.3.3</commons-fileupload.version>\n        <log4j.version>1.2.12</log4j.version>\n        <validation-api.version>1.0.0.GA</validation-api.version>\n        <tomcat-servlet-api.version>7.0.62</tomcat-servlet-api.version>\n        <poi.version>3.17</poi.version>\n\n        <jsqlparser>0.9.1</jsqlparser>\n        <pagehelper.version>1.2.5</pagehelper.version>\n\n        <spring-cloud.version>Finchley.RELEASE</spring-cloud.version>\n    </properties>\n\n    <dependencies>\n        <dependency>\n            <groupId>org.apache.tomcat.embed</groupId>\n            <artifactId>tomcat-embed-core</artifactId>\n        </dependency>\n\n        <!-- ******************************* 引入junit，做单元测试用，@Test注解需要它 ********************** -->\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <scope>test</scope>\n            <exclusions>\n                <exclusion>\n                    <groupId>org.junit.vintage</groupId>\n                    <artifactId>junit-vintage-engine</artifactId>\n                </exclusion>\n            </exclusions>\n        </dependency>\n\n        <!-- ******************************* 引入mybatis*********************************************** -->\n        <dependency>\n            <groupId>org.mybatis.spring.boot</groupId>\n            <artifactId>mybatis-spring-boot-starter</artifactId>\n            <version>${mybatis-spring.version}</version>\n        </dependency>\n        <!-- ******************************* 引入mybatis逆向工程*********************************************** -->\n        <dependency>\n            <groupId>org.mybatis.generator</groupId>\n            <artifactId>mybatis-generator-core</artifactId>\n            <version>1.3.5</version>\n        </dependency>\n\n        <!-- ******************************* 引入mysql *********************************************** -->\n        <dependency>\n            <groupId>mysql</groupId>\n            <artifactId>mysql-connector-java</artifactId>\n            <version>${mysql.version}</version>\n        </dependency>\n\n        <!-- ****************************************** 分页 ******************************************** -->\n        <dependency>\n            <groupId>com.github.pagehelper</groupId>\n            <artifactId>pagehelper-spring-boot-starter</artifactId>\n            <version>${pagehelper.version}</version>\n        </dependency>\n        <dependency>\n            <groupId>org.apache.commons</groupId>\n            <artifactId>commons-lang3</artifactId>\n            <version>3.7</version>\n        </dependency>\n\n        <!-- ******************************* c3p0连接池 *************************************************** -->\n        <dependency>\n            <groupId>c3p0</groupId>\n            <artifactId>c3p0</artifactId>\n            <!--suppress UnresolvedMavenProperty -->\n            <version>${c3p0.version}</version>\n        </dependency>\n\n        <!-- ******************************** jedis，Jedis是Redis官方推荐的Java连接开发工具。*********************** -->\n        <dependency>\n            <groupId>redis.clients</groupId>\n            <artifactId>jedis</artifactId>\n            <version>${jedis.version}</version>\n        </dependency>\n\n        <!-- ******************************* fastjson，把对象和json格式互转换时需要用到 ****************************** -->\n        <dependency>\n            <groupId>com.alibaba</groupId>\n            <artifactId>fastjson</artifactId>\n            <version>${fastjson.version}</version>\n        </dependency>\n\n        <!-- ***************************************** commons ************************************* -->\n        <dependency>\n            <groupId>commons-fileupload</groupId>\n            <artifactId>commons-fileupload</artifactId>\n            <version>${commons-fileupload.version}</version>\n        </dependency>\n        <dependency>\n            <groupId>commons-io</groupId>\n            <artifactId>commons-io</artifactId>\n            <version>2.4</version>\n        </dependency>\n        <!-- ***************************** 引入log4j，生成日志需要这个，log for java ，4是 for的近音  ************************ -->\n        <dependency>\n            <groupId>log4j</groupId>\n            <artifactId>log4j</artifactId>\n            <version>${log4j.version}</version>\n        </dependency>\n        <!-- ******************************* 权限 *********************************************** -->\n        <dependency>\n            <groupId>org.apache.shiro</groupId>\n            <artifactId>shiro-spring</artifactId>\n            <version>1.3.2</version>\n        </dependency>\n\n        <!-- ********************************** 阿里短信依赖 ************************************** -->\n        <dependency>\n            <groupId>com.aliyun</groupId>\n            <artifactId>aliyun-java-sdk-core</artifactId>\n            <version>3.7.0</version>\n        </dependency>\n        <dependency>\n            <groupId>com.aliyun</groupId>\n            <artifactId>aliyun-java-sdk-ecs</artifactId>\n            <version>4.11.0</version>\n        </dependency>\n\n\n        <!-- ****************************************** poi导出excel ************************************ -->\n        <dependency>\n            <groupId>org.apache.poi</groupId>\n            <artifactId>poi</artifactId>\n            <version>${poi.version}</version>\n        </dependency>\n        <dependency>\n            <groupId>org.apache.poi</groupId>\n            <artifactId>poi-ooxml</artifactId>\n            <version>${poi.version}</version>\n        </dependency>\n        <dependency>\n            <groupId>org.apache.poi</groupId>\n            <artifactId>poi-ooxml-schemas</artifactId>\n            <version>${poi.version}</version>\n        </dependency>\n\n        <!-- 防止 程序包javax.servlet.annotation不存在 -->\n        <dependency>\n            <groupId>org.apache.tomcat</groupId>\n            <artifactId>tomcat-servlet-api</artifactId>\n            <version>${tomcat-servlet-api.version}</version>\n        </dependency>\n\n        <!-- ******************************************* 校验器 ***************************************** -->\n        <dependency>\n            <groupId>javax.validation</groupId>\n            <artifactId>validation-api</artifactId>\n            <version>${validation-api.version}</version>\n        </dependency>\n\n        <!-- ******************************************* 文件服务器 ************************************** -->\n        <dependency>\n            <groupId>org.csource.fastdfs</groupId>\n            <artifactId>fastdfs</artifactId>\n            <version>1.2</version>\n        </dependency>\n        <!-- ******************************* jsql ********************** -->\n        <dependency>\n            <groupId>com.github.jsqlparser</groupId>\n            <artifactId>jsqlparser</artifactId>\n            <version>${jsqlparser}</version>\n        </dependency>\n\n\n        <!--\n         <dependency>\n            <groupId>org.apache.httpcomponents</groupId>\n            <artifactId>httpclient</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-jdbc</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>commons-beanutils</groupId>\n            <artifactId>commons-beanutils</artifactId>\n            <version>1.9.3</version>\n        </dependency>\n        -->\n    </dependencies>\n\n    <dependencyManagement>\n        <dependencies>\n            <dependency>\n                <groupId>org.springframework.cloud</groupId>\n                <artifactId>spring-cloud-dependencies</artifactId>\n                <version>${spring-cloud.version}</version>\n                <type>pom</type>\n                <scope>import</scope>\n            </dependency>\n            <!-- https://mvnrepository.com/artifact/commons-configuration/commons-configuration -->\n            <dependency>\n                <groupId>commons-configuration</groupId>\n                <artifactId>commons-configuration</artifactId>\n                <version>1.10</version>\n            </dependency>\n\n            <dependency>\n                <groupId>commons-beanutils</groupId>\n                <artifactId>commons-beanutils</artifactId>\n                <version>1.7.0</version>\n            </dependency>\n\n        </dependencies>\n    </dependencyManagement>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.mybatis.generator</groupId>\n                <artifactId>mybatis-generator-maven-plugin</artifactId>\n                <version>1.3.5</version>\n                <configuration>\n                    <configurationFile>\n                        ${basedir}/src/main/resources/generatorConfig.xml\n                    </configurationFile>\n                    <overwrite>true</overwrite>\n                    <verbose>true</verbose>\n                </configuration>\n            </plugin>\n        </plugins>\n    </build>\n\n\n</project>\n```\n---\n\n### 3. server\n```javascript?linenums\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>com.zhiyou</groupId>\n    <artifactId>server</artifactId>\n    <version>0.0.1-SNAPSHOT</version>\n    <name>server</name>\n    <description>Demo project for Spring Boot</description>\n    <parent>\n        <groupId>com.zhiyou</groupId>\n        <artifactId>parent</artifactId>\n        <version>1.0-SNAPSHOT</version>\n    </parent>\n\n\n</project>\n```\n---\n###  4. api\n```javascript?linenums\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>com.zhiyou</groupId>\n    <artifactId>api</artifactId>\n    <version>0.0.1-SNAPSHOT</version>\n    <name>api</name>\n    <parent>\n        <groupId>com.zhiyou</groupId>\n        <artifactId>parent</artifactId>\n        <version>1.0-SNAPSHOT</version>\n    </parent>\n    <dependencies>\n     <!--将common作为jar包引入-->\n        <dependency>\n            <groupId>com.zhiyou</groupId>\n            <artifactId>common</artifactId>\n            <version>1.0-SNAPSHOT</version>\n        </dependency>\n\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-thymeleaf</artifactId>\n            <version>2.1.3.RELEASE</version>\n        </dependency>\n        <dependency>\n            <groupId>org.apache.httpcomponents</groupId>\n            <artifactId>httpclient</artifactId>\n        </dependency>\n    </dependencies>\n\n</project>\n\n```\n## 二、常用类\n### 1. 逆向工程\n```javascript?linenums\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE generatorConfiguration\n        PUBLIC \"-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN\"\n        \"http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd\">\n\n<generatorConfiguration>\n    <!--mysql 连接数据库jar 这里选择自己本地位置-->\n    <classPathEntry location=\"E:\\mysql-connector-java-5.1.32-bin.jar\" />\n    <context id=\"testTables\" targetRuntime=\"MyBatis3\">\n        <commentGenerator>\n            <!-- 是否去除自动生成的注释 true：是 ： false:否 -->\n            <property name=\"suppressAllComments\" value=\"true\" />\n        </commentGenerator>\n        <!--数据库连接的信息：驱动类、连接地址、用户名、密码 -->\n        <jdbcConnection driverClass=\"com.mysql.jdbc.Driver\"\n                        connectionURL=\"jdbc:mysql://120.27.244.176:3306/hospital\" userId=\"root\"\n                        password=\"HBQ521521cf*\">\n        </jdbcConnection>\n        <!-- 默认false，把JDBC DECIMAL 和 NUMERIC 类型解析为 Integer，为 true时把JDBC DECIMAL 和\n           NUMERIC 类型解析为java.math.BigDecimal -->\n        <javaTypeResolver>\n            <property name=\"forceBigDecimals\" value=\"false\" />\n        </javaTypeResolver>\n\n        <!-- targetProject:生成PO类的位置 -->\n        <javaModelGenerator targetPackage=\"com.zhiyou.pojo\"\n                            targetProject=\"src/main/java\">\n            <!-- enableSubPackages:是否让schema作为包的后缀 -->\n            <property name=\"enableSubPackages\" value=\"false\" />\n            <!-- 从数据库返回的值被清理前后的空格 -->\n            <property name=\"trimStrings\" value=\"true\" />\n        </javaModelGenerator>\n        <!-- targetProject:mapper映射文件生成的位置\n           如果maven工程只是单独的一个工程，targetProject=\"src/main/java\"\n           若果maven工程是分模块的工程，targetProject=\"所属模块的名称\"，例如：\n           targetProject=\"ecps-manager-mapper\"，下同-->\n        <sqlMapGenerator targetPackage=\"mappers\"\n                         targetProject=\"src/main/resources/\">\n            <!-- enableSubPackages:是否让schema作为包的后缀 -->\n            <property name=\"enableSubPackages\" value=\"false\" />\n        </sqlMapGenerator>\n        <!-- targetPackage：mapper接口生成的位置 -->\n        <javaClientGenerator type=\"XMLMAPPER\"\n                             targetPackage=\"com.zhiyou.mapper\"\n                             targetProject=\"src/main/java\">\n            <!-- enableSubPackages:是否让schema作为包的后缀 -->\n            <property name=\"enableSubPackages\" value=\"false\" />\n        </javaClientGenerator>\n        <!-- 指定数据库表 -->\n        <table tableName=\"account\"></table>\n\n      <!--  <table tableName=\"loginAccount\"></table>-->\n      <!--  <table tableName=\"ttl_baodanhistory\"></table>-->\n\n    </context>\n</generatorConfiguration>\n```\n","source":"_posts/BookMark/Spring Boot/Spring Boot与Spring Clound项目四层pom以及基础配置文件.md","raw":"---\ntitle: Spring Boot与Spring Clound项目四层pom以及基础配置文件\ndate: 2022-09-05 17:09:05\ncategory_bar: true\ncategories: Spring Boot\ntags:\n- Spring Boot\n- Spring Clound\n---\n# Spring Boot与Spring Clound项目四层pom以及基础配置文件\n\n---\n\n[toc]\n\n---\n## 一、pom\n### 1.parent\n```javascript?linenums\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>com.zhiyou</groupId>\n    <artifactId>parent</artifactId>\n    <version>1.0-SNAPSHOT</version>\n    <packaging>pom</packaging>\n\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>2.0.3.RELEASE</version>\n        <relativePath/>\n    </parent>\n\n    <properties>\n        <jaxb-api>2.3.0</jaxb-api>\n        <springfox-swagger-ui>2.8.0</springfox-swagger-ui>\n        <springfox-swagger2>2.8.0</springfox-swagger2>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n        <java.version>1.8</java.version>\n        <spring-cloud.version>Finchley.RELEASE</spring-cloud.version>\n    </properties>\n\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.cloud</groupId>\n            <artifactId>spring-cloud-starter-netflix-eureka-server</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <scope>test</scope>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.cloud</groupId>\n            <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.cloud</groupId>\n            <artifactId>spring-cloud-starter-openfeign</artifactId>\n        </dependency>\n\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.cloud</groupId>\n            <artifactId>spring-cloud-starter-netflix-hystrix</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-actuator</artifactId>\n        </dependency>\n\n        <dependency>\n            <groupId>io.springfox</groupId>\n            <artifactId>springfox-swagger2</artifactId>\n            <version>${springfox-swagger2}</version>\n        </dependency>\n        <dependency>\n            <groupId>io.springfox</groupId>\n            <artifactId>springfox-swagger-ui</artifactId>\n            <version>${springfox-swagger-ui}</version>\n        </dependency>\n\n        <dependency>\n            <groupId>javax.xml.bind</groupId>\n            <artifactId>jaxb-api</artifactId>\n            <version>${jaxb-api}</version>\n        </dependency>\n\n    </dependencies>\n    <dependencyManagement>\n        <dependencies>\n            <dependency>\n                <groupId>org.springframework.cloud</groupId>\n                <artifactId>spring-cloud-dependencies</artifactId>\n                <version>${spring-cloud.version}</version>\n                <type>pom</type>\n                <scope>import</scope>\n            </dependency>\n        </dependencies>\n    </dependencyManagement>\n</project>\n```\n---\n### 2.common\n```javascript?linenums\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n    <parent>\n        <groupId>com.zhiyou</groupId>\n        <artifactId>parent</artifactId>\n        <version>1.0-SNAPSHOT</version>\n    </parent>\n\n    <groupId>com.zhiyou</groupId>\n    <artifactId>common</artifactId>\n    <version>1.0-SNAPSHOT</version>\n\n    <properties>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n        <java.version>1.8</java.version>\n\n        <mysql.version>5.1.21</mysql.version>\n        <mybatis-spring.version>1.1.1</mybatis-spring.version>\n        <fastjson.version>1.2.56</fastjson.version>\n        <c3p0.version>0.9.1.2</c3p0.version>\n        <jedis.version>3.0.1</jedis.version>\n\n        <commons-fileupload.version>1.3.3</commons-fileupload.version>\n        <log4j.version>1.2.12</log4j.version>\n        <validation-api.version>1.0.0.GA</validation-api.version>\n        <tomcat-servlet-api.version>7.0.62</tomcat-servlet-api.version>\n        <poi.version>3.17</poi.version>\n\n        <jsqlparser>0.9.1</jsqlparser>\n        <pagehelper.version>1.2.5</pagehelper.version>\n\n        <spring-cloud.version>Finchley.RELEASE</spring-cloud.version>\n    </properties>\n\n    <dependencies>\n        <dependency>\n            <groupId>org.apache.tomcat.embed</groupId>\n            <artifactId>tomcat-embed-core</artifactId>\n        </dependency>\n\n        <!-- ******************************* 引入junit，做单元测试用，@Test注解需要它 ********************** -->\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <scope>test</scope>\n            <exclusions>\n                <exclusion>\n                    <groupId>org.junit.vintage</groupId>\n                    <artifactId>junit-vintage-engine</artifactId>\n                </exclusion>\n            </exclusions>\n        </dependency>\n\n        <!-- ******************************* 引入mybatis*********************************************** -->\n        <dependency>\n            <groupId>org.mybatis.spring.boot</groupId>\n            <artifactId>mybatis-spring-boot-starter</artifactId>\n            <version>${mybatis-spring.version}</version>\n        </dependency>\n        <!-- ******************************* 引入mybatis逆向工程*********************************************** -->\n        <dependency>\n            <groupId>org.mybatis.generator</groupId>\n            <artifactId>mybatis-generator-core</artifactId>\n            <version>1.3.5</version>\n        </dependency>\n\n        <!-- ******************************* 引入mysql *********************************************** -->\n        <dependency>\n            <groupId>mysql</groupId>\n            <artifactId>mysql-connector-java</artifactId>\n            <version>${mysql.version}</version>\n        </dependency>\n\n        <!-- ****************************************** 分页 ******************************************** -->\n        <dependency>\n            <groupId>com.github.pagehelper</groupId>\n            <artifactId>pagehelper-spring-boot-starter</artifactId>\n            <version>${pagehelper.version}</version>\n        </dependency>\n        <dependency>\n            <groupId>org.apache.commons</groupId>\n            <artifactId>commons-lang3</artifactId>\n            <version>3.7</version>\n        </dependency>\n\n        <!-- ******************************* c3p0连接池 *************************************************** -->\n        <dependency>\n            <groupId>c3p0</groupId>\n            <artifactId>c3p0</artifactId>\n            <!--suppress UnresolvedMavenProperty -->\n            <version>${c3p0.version}</version>\n        </dependency>\n\n        <!-- ******************************** jedis，Jedis是Redis官方推荐的Java连接开发工具。*********************** -->\n        <dependency>\n            <groupId>redis.clients</groupId>\n            <artifactId>jedis</artifactId>\n            <version>${jedis.version}</version>\n        </dependency>\n\n        <!-- ******************************* fastjson，把对象和json格式互转换时需要用到 ****************************** -->\n        <dependency>\n            <groupId>com.alibaba</groupId>\n            <artifactId>fastjson</artifactId>\n            <version>${fastjson.version}</version>\n        </dependency>\n\n        <!-- ***************************************** commons ************************************* -->\n        <dependency>\n            <groupId>commons-fileupload</groupId>\n            <artifactId>commons-fileupload</artifactId>\n            <version>${commons-fileupload.version}</version>\n        </dependency>\n        <dependency>\n            <groupId>commons-io</groupId>\n            <artifactId>commons-io</artifactId>\n            <version>2.4</version>\n        </dependency>\n        <!-- ***************************** 引入log4j，生成日志需要这个，log for java ，4是 for的近音  ************************ -->\n        <dependency>\n            <groupId>log4j</groupId>\n            <artifactId>log4j</artifactId>\n            <version>${log4j.version}</version>\n        </dependency>\n        <!-- ******************************* 权限 *********************************************** -->\n        <dependency>\n            <groupId>org.apache.shiro</groupId>\n            <artifactId>shiro-spring</artifactId>\n            <version>1.3.2</version>\n        </dependency>\n\n        <!-- ********************************** 阿里短信依赖 ************************************** -->\n        <dependency>\n            <groupId>com.aliyun</groupId>\n            <artifactId>aliyun-java-sdk-core</artifactId>\n            <version>3.7.0</version>\n        </dependency>\n        <dependency>\n            <groupId>com.aliyun</groupId>\n            <artifactId>aliyun-java-sdk-ecs</artifactId>\n            <version>4.11.0</version>\n        </dependency>\n\n\n        <!-- ****************************************** poi导出excel ************************************ -->\n        <dependency>\n            <groupId>org.apache.poi</groupId>\n            <artifactId>poi</artifactId>\n            <version>${poi.version}</version>\n        </dependency>\n        <dependency>\n            <groupId>org.apache.poi</groupId>\n            <artifactId>poi-ooxml</artifactId>\n            <version>${poi.version}</version>\n        </dependency>\n        <dependency>\n            <groupId>org.apache.poi</groupId>\n            <artifactId>poi-ooxml-schemas</artifactId>\n            <version>${poi.version}</version>\n        </dependency>\n\n        <!-- 防止 程序包javax.servlet.annotation不存在 -->\n        <dependency>\n            <groupId>org.apache.tomcat</groupId>\n            <artifactId>tomcat-servlet-api</artifactId>\n            <version>${tomcat-servlet-api.version}</version>\n        </dependency>\n\n        <!-- ******************************************* 校验器 ***************************************** -->\n        <dependency>\n            <groupId>javax.validation</groupId>\n            <artifactId>validation-api</artifactId>\n            <version>${validation-api.version}</version>\n        </dependency>\n\n        <!-- ******************************************* 文件服务器 ************************************** -->\n        <dependency>\n            <groupId>org.csource.fastdfs</groupId>\n            <artifactId>fastdfs</artifactId>\n            <version>1.2</version>\n        </dependency>\n        <!-- ******************************* jsql ********************** -->\n        <dependency>\n            <groupId>com.github.jsqlparser</groupId>\n            <artifactId>jsqlparser</artifactId>\n            <version>${jsqlparser}</version>\n        </dependency>\n\n\n        <!--\n         <dependency>\n            <groupId>org.apache.httpcomponents</groupId>\n            <artifactId>httpclient</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-jdbc</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>commons-beanutils</groupId>\n            <artifactId>commons-beanutils</artifactId>\n            <version>1.9.3</version>\n        </dependency>\n        -->\n    </dependencies>\n\n    <dependencyManagement>\n        <dependencies>\n            <dependency>\n                <groupId>org.springframework.cloud</groupId>\n                <artifactId>spring-cloud-dependencies</artifactId>\n                <version>${spring-cloud.version}</version>\n                <type>pom</type>\n                <scope>import</scope>\n            </dependency>\n            <!-- https://mvnrepository.com/artifact/commons-configuration/commons-configuration -->\n            <dependency>\n                <groupId>commons-configuration</groupId>\n                <artifactId>commons-configuration</artifactId>\n                <version>1.10</version>\n            </dependency>\n\n            <dependency>\n                <groupId>commons-beanutils</groupId>\n                <artifactId>commons-beanutils</artifactId>\n                <version>1.7.0</version>\n            </dependency>\n\n        </dependencies>\n    </dependencyManagement>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.mybatis.generator</groupId>\n                <artifactId>mybatis-generator-maven-plugin</artifactId>\n                <version>1.3.5</version>\n                <configuration>\n                    <configurationFile>\n                        ${basedir}/src/main/resources/generatorConfig.xml\n                    </configurationFile>\n                    <overwrite>true</overwrite>\n                    <verbose>true</verbose>\n                </configuration>\n            </plugin>\n        </plugins>\n    </build>\n\n\n</project>\n```\n---\n\n### 3. server\n```javascript?linenums\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>com.zhiyou</groupId>\n    <artifactId>server</artifactId>\n    <version>0.0.1-SNAPSHOT</version>\n    <name>server</name>\n    <description>Demo project for Spring Boot</description>\n    <parent>\n        <groupId>com.zhiyou</groupId>\n        <artifactId>parent</artifactId>\n        <version>1.0-SNAPSHOT</version>\n    </parent>\n\n\n</project>\n```\n---\n###  4. api\n```javascript?linenums\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>com.zhiyou</groupId>\n    <artifactId>api</artifactId>\n    <version>0.0.1-SNAPSHOT</version>\n    <name>api</name>\n    <parent>\n        <groupId>com.zhiyou</groupId>\n        <artifactId>parent</artifactId>\n        <version>1.0-SNAPSHOT</version>\n    </parent>\n    <dependencies>\n     <!--将common作为jar包引入-->\n        <dependency>\n            <groupId>com.zhiyou</groupId>\n            <artifactId>common</artifactId>\n            <version>1.0-SNAPSHOT</version>\n        </dependency>\n\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-thymeleaf</artifactId>\n            <version>2.1.3.RELEASE</version>\n        </dependency>\n        <dependency>\n            <groupId>org.apache.httpcomponents</groupId>\n            <artifactId>httpclient</artifactId>\n        </dependency>\n    </dependencies>\n\n</project>\n\n```\n## 二、常用类\n### 1. 逆向工程\n```javascript?linenums\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE generatorConfiguration\n        PUBLIC \"-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN\"\n        \"http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd\">\n\n<generatorConfiguration>\n    <!--mysql 连接数据库jar 这里选择自己本地位置-->\n    <classPathEntry location=\"E:\\mysql-connector-java-5.1.32-bin.jar\" />\n    <context id=\"testTables\" targetRuntime=\"MyBatis3\">\n        <commentGenerator>\n            <!-- 是否去除自动生成的注释 true：是 ： false:否 -->\n            <property name=\"suppressAllComments\" value=\"true\" />\n        </commentGenerator>\n        <!--数据库连接的信息：驱动类、连接地址、用户名、密码 -->\n        <jdbcConnection driverClass=\"com.mysql.jdbc.Driver\"\n                        connectionURL=\"jdbc:mysql://120.27.244.176:3306/hospital\" userId=\"root\"\n                        password=\"HBQ521521cf*\">\n        </jdbcConnection>\n        <!-- 默认false，把JDBC DECIMAL 和 NUMERIC 类型解析为 Integer，为 true时把JDBC DECIMAL 和\n           NUMERIC 类型解析为java.math.BigDecimal -->\n        <javaTypeResolver>\n            <property name=\"forceBigDecimals\" value=\"false\" />\n        </javaTypeResolver>\n\n        <!-- targetProject:生成PO类的位置 -->\n        <javaModelGenerator targetPackage=\"com.zhiyou.pojo\"\n                            targetProject=\"src/main/java\">\n            <!-- enableSubPackages:是否让schema作为包的后缀 -->\n            <property name=\"enableSubPackages\" value=\"false\" />\n            <!-- 从数据库返回的值被清理前后的空格 -->\n            <property name=\"trimStrings\" value=\"true\" />\n        </javaModelGenerator>\n        <!-- targetProject:mapper映射文件生成的位置\n           如果maven工程只是单独的一个工程，targetProject=\"src/main/java\"\n           若果maven工程是分模块的工程，targetProject=\"所属模块的名称\"，例如：\n           targetProject=\"ecps-manager-mapper\"，下同-->\n        <sqlMapGenerator targetPackage=\"mappers\"\n                         targetProject=\"src/main/resources/\">\n            <!-- enableSubPackages:是否让schema作为包的后缀 -->\n            <property name=\"enableSubPackages\" value=\"false\" />\n        </sqlMapGenerator>\n        <!-- targetPackage：mapper接口生成的位置 -->\n        <javaClientGenerator type=\"XMLMAPPER\"\n                             targetPackage=\"com.zhiyou.mapper\"\n                             targetProject=\"src/main/java\">\n            <!-- enableSubPackages:是否让schema作为包的后缀 -->\n            <property name=\"enableSubPackages\" value=\"false\" />\n        </javaClientGenerator>\n        <!-- 指定数据库表 -->\n        <table tableName=\"account\"></table>\n\n      <!--  <table tableName=\"loginAccount\"></table>-->\n      <!--  <table tableName=\"ttl_baodanhistory\"></table>-->\n\n    </context>\n</generatorConfiguration>\n```\n","slug":"BookMark/Spring Boot/Spring Boot与Spring Clound项目四层pom以及基础配置文件","published":1,"updated":"2022-09-06T07:08:49.896Z","_id":"cl7ptszom001qaba55z7h9xko","comments":1,"layout":"post","photos":[],"link":"","content":"<h1><span id=\"spring-boot与spring-clound项目四层pom以及基础配置文件\">Spring Boot与Spring Clound项目四层pom以及基础配置文件</span></h1><hr>\n<p>[toc]</p>\n<hr>\n<h2><span id=\"一-pom\">一、pom</span></h2><h3><span id=\"1parent\">1.parent</span></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;<br>&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;<br>         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;<br>         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;<br>    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;<br><br>    &lt;groupId&gt;com.zhiyou&lt;/groupId&gt;<br>    &lt;artifactId&gt;parent&lt;/artifactId&gt;<br>    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;<br>    &lt;packaging&gt;pom&lt;/packaging&gt;<br><br>    &lt;parent&gt;<br>        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;<br>        &lt;version&gt;2.0.3.RELEASE&lt;/version&gt;<br>        &lt;relativePath/&gt;<br>    &lt;/parent&gt;<br><br>    &lt;properties&gt;<br>        &lt;jaxb-api&gt;2.3.0&lt;/jaxb-api&gt;<br>        &lt;springfox-swagger-ui&gt;2.8.0&lt;/springfox-swagger-ui&gt;<br>        &lt;springfox-swagger2&gt;2.8.0&lt;/springfox-swagger2&gt;<br>        &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;<br>        &lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt;<br>        &lt;java.version&gt;1.8&lt;/java.version&gt;<br>        &lt;spring-cloud.version&gt;Finchley.RELEASE&lt;/spring-cloud.version&gt;<br>    &lt;/properties&gt;<br><br>    &lt;dependencies&gt;<br>        &lt;dependency&gt;<br>            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;<br>            &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-server&lt;/artifactId&gt;<br>        &lt;/dependency&gt;<br>        &lt;dependency&gt;<br>            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;<br>            &lt;scope&gt;test&lt;/scope&gt;<br>        &lt;/dependency&gt;<br>        &lt;dependency&gt;<br>            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;<br>            &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;<br>        &lt;/dependency&gt;<br>        &lt;dependency&gt;<br>            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;<br>        &lt;/dependency&gt;<br>        &lt;dependency&gt;<br>            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;<br>            &lt;artifactId&gt;spring-cloud-starter-openfeign&lt;/artifactId&gt;<br>        &lt;/dependency&gt;<br><br>        &lt;dependency&gt;<br>            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;<br>        &lt;/dependency&gt;<br>        &lt;dependency&gt;<br>            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;<br>            &lt;artifactId&gt;spring-cloud-starter-netflix-hystrix&lt;/artifactId&gt;<br>        &lt;/dependency&gt;<br>        &lt;dependency&gt;<br>            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>            &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;<br>        &lt;/dependency&gt;<br><br>        &lt;dependency&gt;<br>            &lt;groupId&gt;io.springfox&lt;/groupId&gt;<br>            &lt;artifactId&gt;springfox-swagger2&lt;/artifactId&gt;<br>            &lt;version&gt;$&#123;springfox-swagger2&#125;&lt;/version&gt;<br>        &lt;/dependency&gt;<br>        &lt;dependency&gt;<br>            &lt;groupId&gt;io.springfox&lt;/groupId&gt;<br>            &lt;artifactId&gt;springfox-swagger-ui&lt;/artifactId&gt;<br>            &lt;version&gt;$&#123;springfox-swagger-ui&#125;&lt;/version&gt;<br>        &lt;/dependency&gt;<br><br>        &lt;dependency&gt;<br>            &lt;groupId&gt;javax.xml.bind&lt;/groupId&gt;<br>            &lt;artifactId&gt;jaxb-api&lt;/artifactId&gt;<br>            &lt;version&gt;$&#123;jaxb-api&#125;&lt;/version&gt;<br>        &lt;/dependency&gt;<br><br>    &lt;/dependencies&gt;<br>    &lt;dependencyManagement&gt;<br>        &lt;dependencies&gt;<br>            &lt;dependency&gt;<br>                &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;<br>                &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;<br>                &lt;version&gt;$&#123;spring-cloud.version&#125;&lt;/version&gt;<br>                &lt;type&gt;pom&lt;/type&gt;<br>                &lt;scope&gt;import&lt;/scope&gt;<br>            &lt;/dependency&gt;<br>        &lt;/dependencies&gt;<br>    &lt;/dependencyManagement&gt;<br>&lt;/project&gt;<br></code></pre></td></tr></table></figure>\n<hr>\n<h3><span id=\"2common\">2.common</span></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;<br>&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;<br>         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;<br>         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;<br>    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;<br>    &lt;parent&gt;<br>        &lt;groupId&gt;com.zhiyou&lt;/groupId&gt;<br>        &lt;artifactId&gt;parent&lt;/artifactId&gt;<br>        &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;<br>    &lt;/parent&gt;<br><br>    &lt;groupId&gt;com.zhiyou&lt;/groupId&gt;<br>    &lt;artifactId&gt;common&lt;/artifactId&gt;<br>    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;<br><br>    &lt;properties&gt;<br>        &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;<br>        &lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt;<br>        &lt;java.version&gt;1.8&lt;/java.version&gt;<br><br>        &lt;mysql.version&gt;5.1.21&lt;/mysql.version&gt;<br>        &lt;mybatis-spring.version&gt;1.1.1&lt;/mybatis-spring.version&gt;<br>        &lt;fastjson.version&gt;1.2.56&lt;/fastjson.version&gt;<br>        &lt;c3p0.version&gt;0.9.1.2&lt;/c3p0.version&gt;<br>        &lt;jedis.version&gt;3.0.1&lt;/jedis.version&gt;<br><br>        &lt;commons-fileupload.version&gt;1.3.3&lt;/commons-fileupload.version&gt;<br>        &lt;log4j.version&gt;1.2.12&lt;/log4j.version&gt;<br>        &lt;validation-api.version&gt;1.0.0.GA&lt;/validation-api.version&gt;<br>        &lt;tomcat-servlet-api.version&gt;7.0.62&lt;/tomcat-servlet-api.version&gt;<br>        &lt;poi.version&gt;3.17&lt;/poi.version&gt;<br><br>        &lt;jsqlparser&gt;0.9.1&lt;/jsqlparser&gt;<br>        &lt;pagehelper.version&gt;1.2.5&lt;/pagehelper.version&gt;<br><br>        &lt;spring-cloud.version&gt;Finchley.RELEASE&lt;/spring-cloud.version&gt;<br>    &lt;/properties&gt;<br><br>    &lt;dependencies&gt;<br>        &lt;dependency&gt;<br>            &lt;groupId&gt;org.apache.tomcat.embed&lt;/groupId&gt;<br>            &lt;artifactId&gt;tomcat-embed-core&lt;/artifactId&gt;<br>        &lt;/dependency&gt;<br><br>        &lt;!-- ******************************* 引入junit，做单元测试用，@Test注解需要它 ********************** --&gt;<br>        &lt;dependency&gt;<br>            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;<br>            &lt;scope&gt;test&lt;/scope&gt;<br>            &lt;exclusions&gt;<br>                &lt;exclusion&gt;<br>                    &lt;groupId&gt;org.junit.vintage&lt;/groupId&gt;<br>                    &lt;artifactId&gt;junit-vintage-engine&lt;/artifactId&gt;<br>                &lt;/exclusion&gt;<br>            &lt;/exclusions&gt;<br>        &lt;/dependency&gt;<br><br>        &lt;!-- ******************************* 引入mybatis*********************************************** --&gt;<br>        &lt;dependency&gt;<br>            &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt;<br>            &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt;<br>            &lt;version&gt;$&#123;mybatis-spring.version&#125;&lt;/version&gt;<br>        &lt;/dependency&gt;<br>        &lt;!-- ******************************* 引入mybatis逆向工程*********************************************** --&gt;<br>        &lt;dependency&gt;<br>            &lt;groupId&gt;org.mybatis.generator&lt;/groupId&gt;<br>            &lt;artifactId&gt;mybatis-generator-core&lt;/artifactId&gt;<br>            &lt;version&gt;1.3.5&lt;/version&gt;<br>        &lt;/dependency&gt;<br><br>        &lt;!-- ******************************* 引入mysql *********************************************** --&gt;<br>        &lt;dependency&gt;<br>            &lt;groupId&gt;mysql&lt;/groupId&gt;<br>            &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;<br>            &lt;version&gt;$&#123;mysql.version&#125;&lt;/version&gt;<br>        &lt;/dependency&gt;<br><br>        &lt;!-- ****************************************** 分页 ******************************************** --&gt;<br>        &lt;dependency&gt;<br>            &lt;groupId&gt;com.github.pagehelper&lt;/groupId&gt;<br>            &lt;artifactId&gt;pagehelper-spring-boot-starter&lt;/artifactId&gt;<br>            &lt;version&gt;$&#123;pagehelper.version&#125;&lt;/version&gt;<br>        &lt;/dependency&gt;<br>        &lt;dependency&gt;<br>            &lt;groupId&gt;org.apache.commons&lt;/groupId&gt;<br>            &lt;artifactId&gt;commons-lang3&lt;/artifactId&gt;<br>            &lt;version&gt;3.7&lt;/version&gt;<br>        &lt;/dependency&gt;<br><br>        &lt;!-- ******************************* c3p0连接池 *************************************************** --&gt;<br>        &lt;dependency&gt;<br>            &lt;groupId&gt;c3p0&lt;/groupId&gt;<br>            &lt;artifactId&gt;c3p0&lt;/artifactId&gt;<br>            &lt;!--suppress UnresolvedMavenProperty --&gt;<br>            &lt;version&gt;$&#123;c3p0.version&#125;&lt;/version&gt;<br>        &lt;/dependency&gt;<br><br>        &lt;!-- ******************************** jedis，Jedis是Redis官方推荐的Java连接开发工具。*********************** --&gt;<br>        &lt;dependency&gt;<br>            &lt;groupId&gt;redis.clients&lt;/groupId&gt;<br>            &lt;artifactId&gt;jedis&lt;/artifactId&gt;<br>            &lt;version&gt;$&#123;jedis.version&#125;&lt;/version&gt;<br>        &lt;/dependency&gt;<br><br>        &lt;!-- ******************************* fastjson，把对象和json格式互转换时需要用到 ****************************** --&gt;<br>        &lt;dependency&gt;<br>            &lt;groupId&gt;com.alibaba&lt;/groupId&gt;<br>            &lt;artifactId&gt;fastjson&lt;/artifactId&gt;<br>            &lt;version&gt;$&#123;fastjson.version&#125;&lt;/version&gt;<br>        &lt;/dependency&gt;<br><br>        &lt;!-- ***************************************** commons ************************************* --&gt;<br>        &lt;dependency&gt;<br>            &lt;groupId&gt;commons-fileupload&lt;/groupId&gt;<br>            &lt;artifactId&gt;commons-fileupload&lt;/artifactId&gt;<br>            &lt;version&gt;$&#123;commons-fileupload.version&#125;&lt;/version&gt;<br>        &lt;/dependency&gt;<br>        &lt;dependency&gt;<br>            &lt;groupId&gt;commons-io&lt;/groupId&gt;<br>            &lt;artifactId&gt;commons-io&lt;/artifactId&gt;<br>            &lt;version&gt;2.4&lt;/version&gt;<br>        &lt;/dependency&gt;<br>        &lt;!-- ***************************** 引入log4j，生成日志需要这个，log for java ，4是 for的近音  ************************ --&gt;<br>        &lt;dependency&gt;<br>            &lt;groupId&gt;log4j&lt;/groupId&gt;<br>            &lt;artifactId&gt;log4j&lt;/artifactId&gt;<br>            &lt;version&gt;$&#123;log4j.version&#125;&lt;/version&gt;<br>        &lt;/dependency&gt;<br>        &lt;!-- ******************************* 权限 *********************************************** --&gt;<br>        &lt;dependency&gt;<br>            &lt;groupId&gt;org.apache.shiro&lt;/groupId&gt;<br>            &lt;artifactId&gt;shiro-spring&lt;/artifactId&gt;<br>            &lt;version&gt;1.3.2&lt;/version&gt;<br>        &lt;/dependency&gt;<br><br>        &lt;!-- ********************************** 阿里短信依赖 ************************************** --&gt;<br>        &lt;dependency&gt;<br>            &lt;groupId&gt;com.aliyun&lt;/groupId&gt;<br>            &lt;artifactId&gt;aliyun-java-sdk-core&lt;/artifactId&gt;<br>            &lt;version&gt;3.7.0&lt;/version&gt;<br>        &lt;/dependency&gt;<br>        &lt;dependency&gt;<br>            &lt;groupId&gt;com.aliyun&lt;/groupId&gt;<br>            &lt;artifactId&gt;aliyun-java-sdk-ecs&lt;/artifactId&gt;<br>            &lt;version&gt;4.11.0&lt;/version&gt;<br>        &lt;/dependency&gt;<br><br><br>        &lt;!-- ****************************************** poi导出excel ************************************ --&gt;<br>        &lt;dependency&gt;<br>            &lt;groupId&gt;org.apache.poi&lt;/groupId&gt;<br>            &lt;artifactId&gt;poi&lt;/artifactId&gt;<br>            &lt;version&gt;$&#123;poi.version&#125;&lt;/version&gt;<br>        &lt;/dependency&gt;<br>        &lt;dependency&gt;<br>            &lt;groupId&gt;org.apache.poi&lt;/groupId&gt;<br>            &lt;artifactId&gt;poi-ooxml&lt;/artifactId&gt;<br>            &lt;version&gt;$&#123;poi.version&#125;&lt;/version&gt;<br>        &lt;/dependency&gt;<br>        &lt;dependency&gt;<br>            &lt;groupId&gt;org.apache.poi&lt;/groupId&gt;<br>            &lt;artifactId&gt;poi-ooxml-schemas&lt;/artifactId&gt;<br>            &lt;version&gt;$&#123;poi.version&#125;&lt;/version&gt;<br>        &lt;/dependency&gt;<br><br>        &lt;!-- 防止 程序包javax.servlet.annotation不存在 --&gt;<br>        &lt;dependency&gt;<br>            &lt;groupId&gt;org.apache.tomcat&lt;/groupId&gt;<br>            &lt;artifactId&gt;tomcat-servlet-api&lt;/artifactId&gt;<br>            &lt;version&gt;$&#123;tomcat-servlet-api.version&#125;&lt;/version&gt;<br>        &lt;/dependency&gt;<br><br>        &lt;!-- ******************************************* 校验器 ***************************************** --&gt;<br>        &lt;dependency&gt;<br>            &lt;groupId&gt;javax.validation&lt;/groupId&gt;<br>            &lt;artifactId&gt;validation-api&lt;/artifactId&gt;<br>            &lt;version&gt;$&#123;validation-api.version&#125;&lt;/version&gt;<br>        &lt;/dependency&gt;<br><br>        &lt;!-- ******************************************* 文件服务器 ************************************** --&gt;<br>        &lt;dependency&gt;<br>            &lt;groupId&gt;org.csource.fastdfs&lt;/groupId&gt;<br>            &lt;artifactId&gt;fastdfs&lt;/artifactId&gt;<br>            &lt;version&gt;1.2&lt;/version&gt;<br>        &lt;/dependency&gt;<br>        &lt;!-- ******************************* jsql ********************** --&gt;<br>        &lt;dependency&gt;<br>            &lt;groupId&gt;com.github.jsqlparser&lt;/groupId&gt;<br>            &lt;artifactId&gt;jsqlparser&lt;/artifactId&gt;<br>            &lt;version&gt;$&#123;jsqlparser&#125;&lt;/version&gt;<br>        &lt;/dependency&gt;<br><br><br>        &lt;!--<br>         &lt;dependency&gt;<br>            &lt;groupId&gt;org.apache.httpcomponents&lt;/groupId&gt;<br>            &lt;artifactId&gt;httpclient&lt;/artifactId&gt;<br>        &lt;/dependency&gt;<br>        &lt;dependency&gt;<br>            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>            &lt;artifactId&gt;spring-boot-starter-jdbc&lt;/artifactId&gt;<br>        &lt;/dependency&gt;<br>        &lt;dependency&gt;<br>            &lt;groupId&gt;commons-beanutils&lt;/groupId&gt;<br>            &lt;artifactId&gt;commons-beanutils&lt;/artifactId&gt;<br>            &lt;version&gt;1.9.3&lt;/version&gt;<br>        &lt;/dependency&gt;<br>        --&gt;<br>    &lt;/dependencies&gt;<br><br>    &lt;dependencyManagement&gt;<br>        &lt;dependencies&gt;<br>            &lt;dependency&gt;<br>                &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;<br>                &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;<br>                &lt;version&gt;$&#123;spring-cloud.version&#125;&lt;/version&gt;<br>                &lt;type&gt;pom&lt;/type&gt;<br>                &lt;scope&gt;import&lt;/scope&gt;<br>            &lt;/dependency&gt;<br>            &lt;!-- https://mvnrepository.com/artifact/commons-configuration/commons-configuration --&gt;<br>            &lt;dependency&gt;<br>                &lt;groupId&gt;commons-configuration&lt;/groupId&gt;<br>                &lt;artifactId&gt;commons-configuration&lt;/artifactId&gt;<br>                &lt;version&gt;1.10&lt;/version&gt;<br>            &lt;/dependency&gt;<br><br>            &lt;dependency&gt;<br>                &lt;groupId&gt;commons-beanutils&lt;/groupId&gt;<br>                &lt;artifactId&gt;commons-beanutils&lt;/artifactId&gt;<br>                &lt;version&gt;1.7.0&lt;/version&gt;<br>            &lt;/dependency&gt;<br><br>        &lt;/dependencies&gt;<br>    &lt;/dependencyManagement&gt;<br><br>    &lt;build&gt;<br>        &lt;plugins&gt;<br>            &lt;plugin&gt;<br>                &lt;groupId&gt;org.mybatis.generator&lt;/groupId&gt;<br>                &lt;artifactId&gt;mybatis-generator-maven-plugin&lt;/artifactId&gt;<br>                &lt;version&gt;1.3.5&lt;/version&gt;<br>                &lt;configuration&gt;<br>                    &lt;configurationFile&gt;<br>                        $&#123;basedir&#125;/src/main/resources/generatorConfig.xml<br>                    &lt;/configurationFile&gt;<br>                    &lt;overwrite&gt;true&lt;/overwrite&gt;<br>                    &lt;verbose&gt;true&lt;/verbose&gt;<br>                &lt;/configuration&gt;<br>            &lt;/plugin&gt;<br>        &lt;/plugins&gt;<br>    &lt;/build&gt;<br><br><br>&lt;/project&gt;<br></code></pre></td></tr></table></figure>\n<hr>\n<h3><span id=\"3-server\">3. server</span></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;<br>&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;<br>         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;<br>    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;<br><br>    &lt;groupId&gt;com.zhiyou&lt;/groupId&gt;<br>    &lt;artifactId&gt;server&lt;/artifactId&gt;<br>    &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;<br>    &lt;name&gt;server&lt;/name&gt;<br>    &lt;description&gt;Demo project for Spring Boot&lt;/description&gt;<br>    &lt;parent&gt;<br>        &lt;groupId&gt;com.zhiyou&lt;/groupId&gt;<br>        &lt;artifactId&gt;parent&lt;/artifactId&gt;<br>        &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;<br>    &lt;/parent&gt;<br><br><br>&lt;/project&gt;<br></code></pre></td></tr></table></figure>\n<hr>\n<h3><span id=\"4-api\">4. api</span></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;<br>&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;<br>         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;<br>    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;<br><br>    &lt;groupId&gt;com.zhiyou&lt;/groupId&gt;<br>    &lt;artifactId&gt;api&lt;/artifactId&gt;<br>    &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;<br>    &lt;name&gt;api&lt;/name&gt;<br>    &lt;parent&gt;<br>        &lt;groupId&gt;com.zhiyou&lt;/groupId&gt;<br>        &lt;artifactId&gt;parent&lt;/artifactId&gt;<br>        &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;<br>    &lt;/parent&gt;<br>    &lt;dependencies&gt;<br>     &lt;!--将common作为jar包引入--&gt;<br>        &lt;dependency&gt;<br>            &lt;groupId&gt;com.zhiyou&lt;/groupId&gt;<br>            &lt;artifactId&gt;common&lt;/artifactId&gt;<br>            &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;<br>        &lt;/dependency&gt;<br><br>        &lt;dependency&gt;<br>            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>            &lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;/artifactId&gt;<br>            &lt;version&gt;2.1.3.RELEASE&lt;/version&gt;<br>        &lt;/dependency&gt;<br>        &lt;dependency&gt;<br>            &lt;groupId&gt;org.apache.httpcomponents&lt;/groupId&gt;<br>            &lt;artifactId&gt;httpclient&lt;/artifactId&gt;<br>        &lt;/dependency&gt;<br>    &lt;/dependencies&gt;<br><br>&lt;/project&gt;<br><br></code></pre></td></tr></table></figure>\n<h2><span id=\"二-常用类\">二、常用类</span></h2><h3><span id=\"1-逆向工程\">1. 逆向工程</span></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;<br>&lt;!DOCTYPE generatorConfiguration<br>        PUBLIC &quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&quot;<br>        &quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&quot;&gt;<br><br>&lt;generatorConfiguration&gt;<br>    &lt;!--mysql 连接数据库jar 这里选择自己本地位置--&gt;<br>    &lt;classPathEntry location=&quot;E:\\mysql-connector-java-5.1.32-bin.jar&quot; /&gt;<br>    &lt;context id=&quot;testTables&quot; targetRuntime=&quot;MyBatis3&quot;&gt;<br>        &lt;commentGenerator&gt;<br>            &lt;!-- 是否去除自动生成的注释 true：是 ： false:否 --&gt;<br>            &lt;property name=&quot;suppressAllComments&quot; value=&quot;true&quot; /&gt;<br>        &lt;/commentGenerator&gt;<br>        &lt;!--数据库连接的信息：驱动类、连接地址、用户名、密码 --&gt;<br>        &lt;jdbcConnection driverClass=&quot;com.mysql.jdbc.Driver&quot;<br>                        connectionURL=&quot;jdbc:mysql://120.27.244.176:3306/hospital&quot; userId=&quot;root&quot;<br>                        password=&quot;HBQ521521cf*&quot;&gt;<br>        &lt;/jdbcConnection&gt;<br>        &lt;!-- 默认false，把JDBC DECIMAL 和 NUMERIC 类型解析为 Integer，为 true时把JDBC DECIMAL 和<br>           NUMERIC 类型解析为java.math.BigDecimal --&gt;<br>        &lt;javaTypeResolver&gt;<br>            &lt;property name=&quot;forceBigDecimals&quot; value=&quot;false&quot; /&gt;<br>        &lt;/javaTypeResolver&gt;<br><br>        &lt;!-- targetProject:生成PO类的位置 --&gt;<br>        &lt;javaModelGenerator targetPackage=&quot;com.zhiyou.pojo&quot;<br>                            targetProject=&quot;src/main/java&quot;&gt;<br>            &lt;!-- enableSubPackages:是否让schema作为包的后缀 --&gt;<br>            &lt;property name=&quot;enableSubPackages&quot; value=&quot;false&quot; /&gt;<br>            &lt;!-- 从数据库返回的值被清理前后的空格 --&gt;<br>            &lt;property name=&quot;trimStrings&quot; value=&quot;true&quot; /&gt;<br>        &lt;/javaModelGenerator&gt;<br>        &lt;!-- targetProject:mapper映射文件生成的位置<br>           如果maven工程只是单独的一个工程，targetProject=&quot;src/main/java&quot;<br>           若果maven工程是分模块的工程，targetProject=&quot;所属模块的名称&quot;，例如：<br>           targetProject=&quot;ecps-manager-mapper&quot;，下同--&gt;<br>        &lt;sqlMapGenerator targetPackage=&quot;mappers&quot;<br>                         targetProject=&quot;src/main/resources/&quot;&gt;<br>            &lt;!-- enableSubPackages:是否让schema作为包的后缀 --&gt;<br>            &lt;property name=&quot;enableSubPackages&quot; value=&quot;false&quot; /&gt;<br>        &lt;/sqlMapGenerator&gt;<br>        &lt;!-- targetPackage：mapper接口生成的位置 --&gt;<br>        &lt;javaClientGenerator type=&quot;XMLMAPPER&quot;<br>                             targetPackage=&quot;com.zhiyou.mapper&quot;<br>                             targetProject=&quot;src/main/java&quot;&gt;<br>            &lt;!-- enableSubPackages:是否让schema作为包的后缀 --&gt;<br>            &lt;property name=&quot;enableSubPackages&quot; value=&quot;false&quot; /&gt;<br>        &lt;/javaClientGenerator&gt;<br>        &lt;!-- 指定数据库表 --&gt;<br>        &lt;table tableName=&quot;account&quot;&gt;&lt;/table&gt;<br><br>      &lt;!--  &lt;table tableName=&quot;loginAccount&quot;&gt;&lt;/table&gt;--&gt;<br>      &lt;!--  &lt;table tableName=&quot;ttl_baodanhistory&quot;&gt;&lt;/table&gt;--&gt;<br><br>    &lt;/context&gt;<br>&lt;/generatorConfiguration&gt;<br></code></pre></td></tr></table></figure>\n","site":{"data":{}},"wordcount":18636,"excerpt":"","more":"<h1 id=\"Spring-Boot与Spring-Clound项目四层pom以及基础配置文件\"><a href=\"#Spring-Boot与Spring-Clound项目四层pom以及基础配置文件\" class=\"headerlink\" title=\"Spring Boot与Spring Clound项目四层pom以及基础配置文件\"></a>Spring Boot与Spring Clound项目四层pom以及基础配置文件</h1><hr>\n<p>[toc]</p>\n<hr>\n<h2 id=\"一、pom\"><a href=\"#一、pom\" class=\"headerlink\" title=\"一、pom\"></a>一、pom</h2><h3 id=\"1-parent\"><a href=\"#1-parent\" class=\"headerlink\" title=\"1.parent\"></a>1.parent</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;<br>&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;<br>         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;<br>         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;<br>    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;<br><br>    &lt;groupId&gt;com.zhiyou&lt;/groupId&gt;<br>    &lt;artifactId&gt;parent&lt;/artifactId&gt;<br>    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;<br>    &lt;packaging&gt;pom&lt;/packaging&gt;<br><br>    &lt;parent&gt;<br>        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;<br>        &lt;version&gt;2.0.3.RELEASE&lt;/version&gt;<br>        &lt;relativePath/&gt;<br>    &lt;/parent&gt;<br><br>    &lt;properties&gt;<br>        &lt;jaxb-api&gt;2.3.0&lt;/jaxb-api&gt;<br>        &lt;springfox-swagger-ui&gt;2.8.0&lt;/springfox-swagger-ui&gt;<br>        &lt;springfox-swagger2&gt;2.8.0&lt;/springfox-swagger2&gt;<br>        &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;<br>        &lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt;<br>        &lt;java.version&gt;1.8&lt;/java.version&gt;<br>        &lt;spring-cloud.version&gt;Finchley.RELEASE&lt;/spring-cloud.version&gt;<br>    &lt;/properties&gt;<br><br>    &lt;dependencies&gt;<br>        &lt;dependency&gt;<br>            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;<br>            &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-server&lt;/artifactId&gt;<br>        &lt;/dependency&gt;<br>        &lt;dependency&gt;<br>            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;<br>            &lt;scope&gt;test&lt;/scope&gt;<br>        &lt;/dependency&gt;<br>        &lt;dependency&gt;<br>            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;<br>            &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;<br>        &lt;/dependency&gt;<br>        &lt;dependency&gt;<br>            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;<br>        &lt;/dependency&gt;<br>        &lt;dependency&gt;<br>            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;<br>            &lt;artifactId&gt;spring-cloud-starter-openfeign&lt;/artifactId&gt;<br>        &lt;/dependency&gt;<br><br>        &lt;dependency&gt;<br>            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;<br>        &lt;/dependency&gt;<br>        &lt;dependency&gt;<br>            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;<br>            &lt;artifactId&gt;spring-cloud-starter-netflix-hystrix&lt;/artifactId&gt;<br>        &lt;/dependency&gt;<br>        &lt;dependency&gt;<br>            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>            &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;<br>        &lt;/dependency&gt;<br><br>        &lt;dependency&gt;<br>            &lt;groupId&gt;io.springfox&lt;/groupId&gt;<br>            &lt;artifactId&gt;springfox-swagger2&lt;/artifactId&gt;<br>            &lt;version&gt;$&#123;springfox-swagger2&#125;&lt;/version&gt;<br>        &lt;/dependency&gt;<br>        &lt;dependency&gt;<br>            &lt;groupId&gt;io.springfox&lt;/groupId&gt;<br>            &lt;artifactId&gt;springfox-swagger-ui&lt;/artifactId&gt;<br>            &lt;version&gt;$&#123;springfox-swagger-ui&#125;&lt;/version&gt;<br>        &lt;/dependency&gt;<br><br>        &lt;dependency&gt;<br>            &lt;groupId&gt;javax.xml.bind&lt;/groupId&gt;<br>            &lt;artifactId&gt;jaxb-api&lt;/artifactId&gt;<br>            &lt;version&gt;$&#123;jaxb-api&#125;&lt;/version&gt;<br>        &lt;/dependency&gt;<br><br>    &lt;/dependencies&gt;<br>    &lt;dependencyManagement&gt;<br>        &lt;dependencies&gt;<br>            &lt;dependency&gt;<br>                &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;<br>                &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;<br>                &lt;version&gt;$&#123;spring-cloud.version&#125;&lt;/version&gt;<br>                &lt;type&gt;pom&lt;/type&gt;<br>                &lt;scope&gt;import&lt;/scope&gt;<br>            &lt;/dependency&gt;<br>        &lt;/dependencies&gt;<br>    &lt;/dependencyManagement&gt;<br>&lt;/project&gt;<br></code></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"2-common\"><a href=\"#2-common\" class=\"headerlink\" title=\"2.common\"></a>2.common</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;<br>&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;<br>         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;<br>         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;<br>    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;<br>    &lt;parent&gt;<br>        &lt;groupId&gt;com.zhiyou&lt;/groupId&gt;<br>        &lt;artifactId&gt;parent&lt;/artifactId&gt;<br>        &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;<br>    &lt;/parent&gt;<br><br>    &lt;groupId&gt;com.zhiyou&lt;/groupId&gt;<br>    &lt;artifactId&gt;common&lt;/artifactId&gt;<br>    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;<br><br>    &lt;properties&gt;<br>        &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;<br>        &lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt;<br>        &lt;java.version&gt;1.8&lt;/java.version&gt;<br><br>        &lt;mysql.version&gt;5.1.21&lt;/mysql.version&gt;<br>        &lt;mybatis-spring.version&gt;1.1.1&lt;/mybatis-spring.version&gt;<br>        &lt;fastjson.version&gt;1.2.56&lt;/fastjson.version&gt;<br>        &lt;c3p0.version&gt;0.9.1.2&lt;/c3p0.version&gt;<br>        &lt;jedis.version&gt;3.0.1&lt;/jedis.version&gt;<br><br>        &lt;commons-fileupload.version&gt;1.3.3&lt;/commons-fileupload.version&gt;<br>        &lt;log4j.version&gt;1.2.12&lt;/log4j.version&gt;<br>        &lt;validation-api.version&gt;1.0.0.GA&lt;/validation-api.version&gt;<br>        &lt;tomcat-servlet-api.version&gt;7.0.62&lt;/tomcat-servlet-api.version&gt;<br>        &lt;poi.version&gt;3.17&lt;/poi.version&gt;<br><br>        &lt;jsqlparser&gt;0.9.1&lt;/jsqlparser&gt;<br>        &lt;pagehelper.version&gt;1.2.5&lt;/pagehelper.version&gt;<br><br>        &lt;spring-cloud.version&gt;Finchley.RELEASE&lt;/spring-cloud.version&gt;<br>    &lt;/properties&gt;<br><br>    &lt;dependencies&gt;<br>        &lt;dependency&gt;<br>            &lt;groupId&gt;org.apache.tomcat.embed&lt;/groupId&gt;<br>            &lt;artifactId&gt;tomcat-embed-core&lt;/artifactId&gt;<br>        &lt;/dependency&gt;<br><br>        &lt;!-- ******************************* 引入junit，做单元测试用，@Test注解需要它 ********************** --&gt;<br>        &lt;dependency&gt;<br>            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;<br>            &lt;scope&gt;test&lt;/scope&gt;<br>            &lt;exclusions&gt;<br>                &lt;exclusion&gt;<br>                    &lt;groupId&gt;org.junit.vintage&lt;/groupId&gt;<br>                    &lt;artifactId&gt;junit-vintage-engine&lt;/artifactId&gt;<br>                &lt;/exclusion&gt;<br>            &lt;/exclusions&gt;<br>        &lt;/dependency&gt;<br><br>        &lt;!-- ******************************* 引入mybatis*********************************************** --&gt;<br>        &lt;dependency&gt;<br>            &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt;<br>            &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt;<br>            &lt;version&gt;$&#123;mybatis-spring.version&#125;&lt;/version&gt;<br>        &lt;/dependency&gt;<br>        &lt;!-- ******************************* 引入mybatis逆向工程*********************************************** --&gt;<br>        &lt;dependency&gt;<br>            &lt;groupId&gt;org.mybatis.generator&lt;/groupId&gt;<br>            &lt;artifactId&gt;mybatis-generator-core&lt;/artifactId&gt;<br>            &lt;version&gt;1.3.5&lt;/version&gt;<br>        &lt;/dependency&gt;<br><br>        &lt;!-- ******************************* 引入mysql *********************************************** --&gt;<br>        &lt;dependency&gt;<br>            &lt;groupId&gt;mysql&lt;/groupId&gt;<br>            &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;<br>            &lt;version&gt;$&#123;mysql.version&#125;&lt;/version&gt;<br>        &lt;/dependency&gt;<br><br>        &lt;!-- ****************************************** 分页 ******************************************** --&gt;<br>        &lt;dependency&gt;<br>            &lt;groupId&gt;com.github.pagehelper&lt;/groupId&gt;<br>            &lt;artifactId&gt;pagehelper-spring-boot-starter&lt;/artifactId&gt;<br>            &lt;version&gt;$&#123;pagehelper.version&#125;&lt;/version&gt;<br>        &lt;/dependency&gt;<br>        &lt;dependency&gt;<br>            &lt;groupId&gt;org.apache.commons&lt;/groupId&gt;<br>            &lt;artifactId&gt;commons-lang3&lt;/artifactId&gt;<br>            &lt;version&gt;3.7&lt;/version&gt;<br>        &lt;/dependency&gt;<br><br>        &lt;!-- ******************************* c3p0连接池 *************************************************** --&gt;<br>        &lt;dependency&gt;<br>            &lt;groupId&gt;c3p0&lt;/groupId&gt;<br>            &lt;artifactId&gt;c3p0&lt;/artifactId&gt;<br>            &lt;!--suppress UnresolvedMavenProperty --&gt;<br>            &lt;version&gt;$&#123;c3p0.version&#125;&lt;/version&gt;<br>        &lt;/dependency&gt;<br><br>        &lt;!-- ******************************** jedis，Jedis是Redis官方推荐的Java连接开发工具。*********************** --&gt;<br>        &lt;dependency&gt;<br>            &lt;groupId&gt;redis.clients&lt;/groupId&gt;<br>            &lt;artifactId&gt;jedis&lt;/artifactId&gt;<br>            &lt;version&gt;$&#123;jedis.version&#125;&lt;/version&gt;<br>        &lt;/dependency&gt;<br><br>        &lt;!-- ******************************* fastjson，把对象和json格式互转换时需要用到 ****************************** --&gt;<br>        &lt;dependency&gt;<br>            &lt;groupId&gt;com.alibaba&lt;/groupId&gt;<br>            &lt;artifactId&gt;fastjson&lt;/artifactId&gt;<br>            &lt;version&gt;$&#123;fastjson.version&#125;&lt;/version&gt;<br>        &lt;/dependency&gt;<br><br>        &lt;!-- ***************************************** commons ************************************* --&gt;<br>        &lt;dependency&gt;<br>            &lt;groupId&gt;commons-fileupload&lt;/groupId&gt;<br>            &lt;artifactId&gt;commons-fileupload&lt;/artifactId&gt;<br>            &lt;version&gt;$&#123;commons-fileupload.version&#125;&lt;/version&gt;<br>        &lt;/dependency&gt;<br>        &lt;dependency&gt;<br>            &lt;groupId&gt;commons-io&lt;/groupId&gt;<br>            &lt;artifactId&gt;commons-io&lt;/artifactId&gt;<br>            &lt;version&gt;2.4&lt;/version&gt;<br>        &lt;/dependency&gt;<br>        &lt;!-- ***************************** 引入log4j，生成日志需要这个，log for java ，4是 for的近音  ************************ --&gt;<br>        &lt;dependency&gt;<br>            &lt;groupId&gt;log4j&lt;/groupId&gt;<br>            &lt;artifactId&gt;log4j&lt;/artifactId&gt;<br>            &lt;version&gt;$&#123;log4j.version&#125;&lt;/version&gt;<br>        &lt;/dependency&gt;<br>        &lt;!-- ******************************* 权限 *********************************************** --&gt;<br>        &lt;dependency&gt;<br>            &lt;groupId&gt;org.apache.shiro&lt;/groupId&gt;<br>            &lt;artifactId&gt;shiro-spring&lt;/artifactId&gt;<br>            &lt;version&gt;1.3.2&lt;/version&gt;<br>        &lt;/dependency&gt;<br><br>        &lt;!-- ********************************** 阿里短信依赖 ************************************** --&gt;<br>        &lt;dependency&gt;<br>            &lt;groupId&gt;com.aliyun&lt;/groupId&gt;<br>            &lt;artifactId&gt;aliyun-java-sdk-core&lt;/artifactId&gt;<br>            &lt;version&gt;3.7.0&lt;/version&gt;<br>        &lt;/dependency&gt;<br>        &lt;dependency&gt;<br>            &lt;groupId&gt;com.aliyun&lt;/groupId&gt;<br>            &lt;artifactId&gt;aliyun-java-sdk-ecs&lt;/artifactId&gt;<br>            &lt;version&gt;4.11.0&lt;/version&gt;<br>        &lt;/dependency&gt;<br><br><br>        &lt;!-- ****************************************** poi导出excel ************************************ --&gt;<br>        &lt;dependency&gt;<br>            &lt;groupId&gt;org.apache.poi&lt;/groupId&gt;<br>            &lt;artifactId&gt;poi&lt;/artifactId&gt;<br>            &lt;version&gt;$&#123;poi.version&#125;&lt;/version&gt;<br>        &lt;/dependency&gt;<br>        &lt;dependency&gt;<br>            &lt;groupId&gt;org.apache.poi&lt;/groupId&gt;<br>            &lt;artifactId&gt;poi-ooxml&lt;/artifactId&gt;<br>            &lt;version&gt;$&#123;poi.version&#125;&lt;/version&gt;<br>        &lt;/dependency&gt;<br>        &lt;dependency&gt;<br>            &lt;groupId&gt;org.apache.poi&lt;/groupId&gt;<br>            &lt;artifactId&gt;poi-ooxml-schemas&lt;/artifactId&gt;<br>            &lt;version&gt;$&#123;poi.version&#125;&lt;/version&gt;<br>        &lt;/dependency&gt;<br><br>        &lt;!-- 防止 程序包javax.servlet.annotation不存在 --&gt;<br>        &lt;dependency&gt;<br>            &lt;groupId&gt;org.apache.tomcat&lt;/groupId&gt;<br>            &lt;artifactId&gt;tomcat-servlet-api&lt;/artifactId&gt;<br>            &lt;version&gt;$&#123;tomcat-servlet-api.version&#125;&lt;/version&gt;<br>        &lt;/dependency&gt;<br><br>        &lt;!-- ******************************************* 校验器 ***************************************** --&gt;<br>        &lt;dependency&gt;<br>            &lt;groupId&gt;javax.validation&lt;/groupId&gt;<br>            &lt;artifactId&gt;validation-api&lt;/artifactId&gt;<br>            &lt;version&gt;$&#123;validation-api.version&#125;&lt;/version&gt;<br>        &lt;/dependency&gt;<br><br>        &lt;!-- ******************************************* 文件服务器 ************************************** --&gt;<br>        &lt;dependency&gt;<br>            &lt;groupId&gt;org.csource.fastdfs&lt;/groupId&gt;<br>            &lt;artifactId&gt;fastdfs&lt;/artifactId&gt;<br>            &lt;version&gt;1.2&lt;/version&gt;<br>        &lt;/dependency&gt;<br>        &lt;!-- ******************************* jsql ********************** --&gt;<br>        &lt;dependency&gt;<br>            &lt;groupId&gt;com.github.jsqlparser&lt;/groupId&gt;<br>            &lt;artifactId&gt;jsqlparser&lt;/artifactId&gt;<br>            &lt;version&gt;$&#123;jsqlparser&#125;&lt;/version&gt;<br>        &lt;/dependency&gt;<br><br><br>        &lt;!--<br>         &lt;dependency&gt;<br>            &lt;groupId&gt;org.apache.httpcomponents&lt;/groupId&gt;<br>            &lt;artifactId&gt;httpclient&lt;/artifactId&gt;<br>        &lt;/dependency&gt;<br>        &lt;dependency&gt;<br>            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>            &lt;artifactId&gt;spring-boot-starter-jdbc&lt;/artifactId&gt;<br>        &lt;/dependency&gt;<br>        &lt;dependency&gt;<br>            &lt;groupId&gt;commons-beanutils&lt;/groupId&gt;<br>            &lt;artifactId&gt;commons-beanutils&lt;/artifactId&gt;<br>            &lt;version&gt;1.9.3&lt;/version&gt;<br>        &lt;/dependency&gt;<br>        --&gt;<br>    &lt;/dependencies&gt;<br><br>    &lt;dependencyManagement&gt;<br>        &lt;dependencies&gt;<br>            &lt;dependency&gt;<br>                &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;<br>                &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;<br>                &lt;version&gt;$&#123;spring-cloud.version&#125;&lt;/version&gt;<br>                &lt;type&gt;pom&lt;/type&gt;<br>                &lt;scope&gt;import&lt;/scope&gt;<br>            &lt;/dependency&gt;<br>            &lt;!-- https://mvnrepository.com/artifact/commons-configuration/commons-configuration --&gt;<br>            &lt;dependency&gt;<br>                &lt;groupId&gt;commons-configuration&lt;/groupId&gt;<br>                &lt;artifactId&gt;commons-configuration&lt;/artifactId&gt;<br>                &lt;version&gt;1.10&lt;/version&gt;<br>            &lt;/dependency&gt;<br><br>            &lt;dependency&gt;<br>                &lt;groupId&gt;commons-beanutils&lt;/groupId&gt;<br>                &lt;artifactId&gt;commons-beanutils&lt;/artifactId&gt;<br>                &lt;version&gt;1.7.0&lt;/version&gt;<br>            &lt;/dependency&gt;<br><br>        &lt;/dependencies&gt;<br>    &lt;/dependencyManagement&gt;<br><br>    &lt;build&gt;<br>        &lt;plugins&gt;<br>            &lt;plugin&gt;<br>                &lt;groupId&gt;org.mybatis.generator&lt;/groupId&gt;<br>                &lt;artifactId&gt;mybatis-generator-maven-plugin&lt;/artifactId&gt;<br>                &lt;version&gt;1.3.5&lt;/version&gt;<br>                &lt;configuration&gt;<br>                    &lt;configurationFile&gt;<br>                        $&#123;basedir&#125;/src/main/resources/generatorConfig.xml<br>                    &lt;/configurationFile&gt;<br>                    &lt;overwrite&gt;true&lt;/overwrite&gt;<br>                    &lt;verbose&gt;true&lt;/verbose&gt;<br>                &lt;/configuration&gt;<br>            &lt;/plugin&gt;<br>        &lt;/plugins&gt;<br>    &lt;/build&gt;<br><br><br>&lt;/project&gt;<br></code></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"3-server\"><a href=\"#3-server\" class=\"headerlink\" title=\"3. server\"></a>3. server</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;<br>&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;<br>         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;<br>    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;<br><br>    &lt;groupId&gt;com.zhiyou&lt;/groupId&gt;<br>    &lt;artifactId&gt;server&lt;/artifactId&gt;<br>    &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;<br>    &lt;name&gt;server&lt;/name&gt;<br>    &lt;description&gt;Demo project for Spring Boot&lt;/description&gt;<br>    &lt;parent&gt;<br>        &lt;groupId&gt;com.zhiyou&lt;/groupId&gt;<br>        &lt;artifactId&gt;parent&lt;/artifactId&gt;<br>        &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;<br>    &lt;/parent&gt;<br><br><br>&lt;/project&gt;<br></code></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"4-api\"><a href=\"#4-api\" class=\"headerlink\" title=\"4. api\"></a>4. api</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;<br>&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;<br>         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;<br>    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;<br><br>    &lt;groupId&gt;com.zhiyou&lt;/groupId&gt;<br>    &lt;artifactId&gt;api&lt;/artifactId&gt;<br>    &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;<br>    &lt;name&gt;api&lt;/name&gt;<br>    &lt;parent&gt;<br>        &lt;groupId&gt;com.zhiyou&lt;/groupId&gt;<br>        &lt;artifactId&gt;parent&lt;/artifactId&gt;<br>        &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;<br>    &lt;/parent&gt;<br>    &lt;dependencies&gt;<br>     &lt;!--将common作为jar包引入--&gt;<br>        &lt;dependency&gt;<br>            &lt;groupId&gt;com.zhiyou&lt;/groupId&gt;<br>            &lt;artifactId&gt;common&lt;/artifactId&gt;<br>            &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;<br>        &lt;/dependency&gt;<br><br>        &lt;dependency&gt;<br>            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>            &lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;/artifactId&gt;<br>            &lt;version&gt;2.1.3.RELEASE&lt;/version&gt;<br>        &lt;/dependency&gt;<br>        &lt;dependency&gt;<br>            &lt;groupId&gt;org.apache.httpcomponents&lt;/groupId&gt;<br>            &lt;artifactId&gt;httpclient&lt;/artifactId&gt;<br>        &lt;/dependency&gt;<br>    &lt;/dependencies&gt;<br><br>&lt;/project&gt;<br><br></code></pre></td></tr></table></figure>\n<h2 id=\"二、常用类\"><a href=\"#二、常用类\" class=\"headerlink\" title=\"二、常用类\"></a>二、常用类</h2><h3 id=\"1-逆向工程\"><a href=\"#1-逆向工程\" class=\"headerlink\" title=\"1. 逆向工程\"></a>1. 逆向工程</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;<br>&lt;!DOCTYPE generatorConfiguration<br>        PUBLIC &quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&quot;<br>        &quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&quot;&gt;<br><br>&lt;generatorConfiguration&gt;<br>    &lt;!--mysql 连接数据库jar 这里选择自己本地位置--&gt;<br>    &lt;classPathEntry location=&quot;E:\\mysql-connector-java-5.1.32-bin.jar&quot; /&gt;<br>    &lt;context id=&quot;testTables&quot; targetRuntime=&quot;MyBatis3&quot;&gt;<br>        &lt;commentGenerator&gt;<br>            &lt;!-- 是否去除自动生成的注释 true：是 ： false:否 --&gt;<br>            &lt;property name=&quot;suppressAllComments&quot; value=&quot;true&quot; /&gt;<br>        &lt;/commentGenerator&gt;<br>        &lt;!--数据库连接的信息：驱动类、连接地址、用户名、密码 --&gt;<br>        &lt;jdbcConnection driverClass=&quot;com.mysql.jdbc.Driver&quot;<br>                        connectionURL=&quot;jdbc:mysql://120.27.244.176:3306/hospital&quot; userId=&quot;root&quot;<br>                        password=&quot;HBQ521521cf*&quot;&gt;<br>        &lt;/jdbcConnection&gt;<br>        &lt;!-- 默认false，把JDBC DECIMAL 和 NUMERIC 类型解析为 Integer，为 true时把JDBC DECIMAL 和<br>           NUMERIC 类型解析为java.math.BigDecimal --&gt;<br>        &lt;javaTypeResolver&gt;<br>            &lt;property name=&quot;forceBigDecimals&quot; value=&quot;false&quot; /&gt;<br>        &lt;/javaTypeResolver&gt;<br><br>        &lt;!-- targetProject:生成PO类的位置 --&gt;<br>        &lt;javaModelGenerator targetPackage=&quot;com.zhiyou.pojo&quot;<br>                            targetProject=&quot;src/main/java&quot;&gt;<br>            &lt;!-- enableSubPackages:是否让schema作为包的后缀 --&gt;<br>            &lt;property name=&quot;enableSubPackages&quot; value=&quot;false&quot; /&gt;<br>            &lt;!-- 从数据库返回的值被清理前后的空格 --&gt;<br>            &lt;property name=&quot;trimStrings&quot; value=&quot;true&quot; /&gt;<br>        &lt;/javaModelGenerator&gt;<br>        &lt;!-- targetProject:mapper映射文件生成的位置<br>           如果maven工程只是单独的一个工程，targetProject=&quot;src/main/java&quot;<br>           若果maven工程是分模块的工程，targetProject=&quot;所属模块的名称&quot;，例如：<br>           targetProject=&quot;ecps-manager-mapper&quot;，下同--&gt;<br>        &lt;sqlMapGenerator targetPackage=&quot;mappers&quot;<br>                         targetProject=&quot;src/main/resources/&quot;&gt;<br>            &lt;!-- enableSubPackages:是否让schema作为包的后缀 --&gt;<br>            &lt;property name=&quot;enableSubPackages&quot; value=&quot;false&quot; /&gt;<br>        &lt;/sqlMapGenerator&gt;<br>        &lt;!-- targetPackage：mapper接口生成的位置 --&gt;<br>        &lt;javaClientGenerator type=&quot;XMLMAPPER&quot;<br>                             targetPackage=&quot;com.zhiyou.mapper&quot;<br>                             targetProject=&quot;src/main/java&quot;&gt;<br>            &lt;!-- enableSubPackages:是否让schema作为包的后缀 --&gt;<br>            &lt;property name=&quot;enableSubPackages&quot; value=&quot;false&quot; /&gt;<br>        &lt;/javaClientGenerator&gt;<br>        &lt;!-- 指定数据库表 --&gt;<br>        &lt;table tableName=&quot;account&quot;&gt;&lt;/table&gt;<br><br>      &lt;!--  &lt;table tableName=&quot;loginAccount&quot;&gt;&lt;/table&gt;--&gt;<br>      &lt;!--  &lt;table tableName=&quot;ttl_baodanhistory&quot;&gt;&lt;/table&gt;--&gt;<br><br>    &lt;/context&gt;<br>&lt;/generatorConfiguration&gt;<br></code></pre></td></tr></table></figure>\n"},{"title":"Spring Boot项目maven分环境打包","date":"2022-09-05T09:09:05.000Z","category_bar":true,"_content":"# Spring Boot项目maven分环境打包\n\n---\n\n[toc]\n\n---\n\n## 一、环境配置\n![image-20220720100426358](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720100426358.png)\n## 二、pom添加“repackage”打包插件和“profiles”配置\n```javascript?linenums\n//添加插件\n<build>\n    <plugins>\n        <plugin>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-maven-plugin</artifactId>\n            <executions>\n                <execution>\n                    <goals>\n                        <goal>repackage</goal>\n                    </goals>\n                </execution>\n            </executions>\n        </plugin>\n    </plugins>\n</build>\n//添加profiles\n <profiles>\n        <profile>\n            <id>local</id>\n            <activation>\n                <activeByDefault>true</activeByDefault>\n            </activation>\n            <properties>\n                <spring.profiles.active>local</spring.profiles.active>\n                <profileActive>local</profileActive>\n            </properties>\n        </profile>\n        <profile>\n            <id>dev</id>\n            <properties>\n                <spring.profiles.active>dev</spring.profiles.active>\n                <profileActive>dev</profileActive>\n            </properties>\n        </profile>\n        <profile>\n            <id>pro</id>\n            <properties>\n                <spring.profiles.active>pro</spring.profiles.active>\n                <profileActive>pro</profileActive>\n            </properties>\n        </profile>\n    </profiles>\n```\n## 三、application.yml配置\n```javascript?linenums\nspring:\n  profiles:\n    active: @profileActive@\n```\n## 四、打包\n```javascript?linenums\n//默认local\nmvn clean package\n//dev环境\nmvn clean package -P dev\n//pro环境\nmvn clean package -P pro\n```\n\n","source":"_posts/BookMark/Spring Boot/Spring Boot项目maven分环境打包.md","raw":"---\ntitle: Spring Boot项目maven分环境打包\ndate: 2022-09-05 17:09:05\ncategory_bar: true\ncategories: Spring Boot\ntags:\n- Spring Boot\n- maven\n---\n# Spring Boot项目maven分环境打包\n\n---\n\n[toc]\n\n---\n\n## 一、环境配置\n![image-20220720100426358](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720100426358.png)\n## 二、pom添加“repackage”打包插件和“profiles”配置\n```javascript?linenums\n//添加插件\n<build>\n    <plugins>\n        <plugin>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-maven-plugin</artifactId>\n            <executions>\n                <execution>\n                    <goals>\n                        <goal>repackage</goal>\n                    </goals>\n                </execution>\n            </executions>\n        </plugin>\n    </plugins>\n</build>\n//添加profiles\n <profiles>\n        <profile>\n            <id>local</id>\n            <activation>\n                <activeByDefault>true</activeByDefault>\n            </activation>\n            <properties>\n                <spring.profiles.active>local</spring.profiles.active>\n                <profileActive>local</profileActive>\n            </properties>\n        </profile>\n        <profile>\n            <id>dev</id>\n            <properties>\n                <spring.profiles.active>dev</spring.profiles.active>\n                <profileActive>dev</profileActive>\n            </properties>\n        </profile>\n        <profile>\n            <id>pro</id>\n            <properties>\n                <spring.profiles.active>pro</spring.profiles.active>\n                <profileActive>pro</profileActive>\n            </properties>\n        </profile>\n    </profiles>\n```\n## 三、application.yml配置\n```javascript?linenums\nspring:\n  profiles:\n    active: @profileActive@\n```\n## 四、打包\n```javascript?linenums\n//默认local\nmvn clean package\n//dev环境\nmvn clean package -P dev\n//pro环境\nmvn clean package -P pro\n```\n\n","slug":"BookMark/Spring Boot/Spring Boot项目maven分环境打包","published":1,"updated":"2022-09-06T07:08:49.885Z","_id":"cl7ptszon001raba5b673dh5y","comments":1,"layout":"post","photos":[],"link":"","content":"<h1><span id=\"spring-boot项目maven分环境打包\">Spring Boot项目maven分环境打包</span></h1><hr>\n<p>[toc]</p>\n<hr>\n<h2><span id=\"一-环境配置\">一、环境配置</span></h2><p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720100426358.png\" alt=\"image-20220720100426358\"></p>\n<h2><span id=\"二-pom添加repackage打包插件和profiles配置\">二、pom添加“repackage”打包插件和“profiles”配置</span></h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">//添加插件<br>&lt;build&gt;<br>    &lt;plugins&gt;<br>        &lt;plugin&gt;<br>            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>            &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;<br>            &lt;executions&gt;<br>                &lt;execution&gt;<br>                    &lt;goals&gt;<br>                        &lt;goal&gt;repackage&lt;/goal&gt;<br>                    &lt;/goals&gt;<br>                &lt;/execution&gt;<br>            &lt;/executions&gt;<br>        &lt;/plugin&gt;<br>    &lt;/plugins&gt;<br>&lt;/build&gt;<br>//添加profiles<br> &lt;profiles&gt;<br>        &lt;profile&gt;<br>            &lt;id&gt;local&lt;/id&gt;<br>            &lt;activation&gt;<br>                &lt;activeByDefault&gt;true&lt;/activeByDefault&gt;<br>            &lt;/activation&gt;<br>            &lt;properties&gt;<br>                &lt;spring.profiles.active&gt;local&lt;/spring.profiles.active&gt;<br>                &lt;profileActive&gt;local&lt;/profileActive&gt;<br>            &lt;/properties&gt;<br>        &lt;/profile&gt;<br>        &lt;profile&gt;<br>            &lt;id&gt;dev&lt;/id&gt;<br>            &lt;properties&gt;<br>                &lt;spring.profiles.active&gt;dev&lt;/spring.profiles.active&gt;<br>                &lt;profileActive&gt;dev&lt;/profileActive&gt;<br>            &lt;/properties&gt;<br>        &lt;/profile&gt;<br>        &lt;profile&gt;<br>            &lt;id&gt;pro&lt;/id&gt;<br>            &lt;properties&gt;<br>                &lt;spring.profiles.active&gt;pro&lt;/spring.profiles.active&gt;<br>                &lt;profileActive&gt;pro&lt;/profileActive&gt;<br>            &lt;/properties&gt;<br>        &lt;/profile&gt;<br>    &lt;/profiles&gt;<br></code></pre></td></tr></table></figure>\n<h2><span id=\"三-applicationyml配置\">三、application.yml配置</span></h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">spring:<br>  profiles:<br>    active: @profileActive@<br></code></pre></td></tr></table></figure>\n<h2><span id=\"四-打包\">四、打包</span></h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">//默认local<br>mvn clean package<br>//dev环境<br>mvn clean package -P dev<br>//pro环境<br>mvn clean package -P pro<br></code></pre></td></tr></table></figure>\n\n","site":{"data":{}},"wordcount":1380,"excerpt":"","more":"<h1 id=\"Spring-Boot项目maven分环境打包\"><a href=\"#Spring-Boot项目maven分环境打包\" class=\"headerlink\" title=\"Spring Boot项目maven分环境打包\"></a>Spring Boot项目maven分环境打包</h1><hr>\n<p>[toc]</p>\n<hr>\n<h2 id=\"一、环境配置\"><a href=\"#一、环境配置\" class=\"headerlink\" title=\"一、环境配置\"></a>一、环境配置</h2><p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220720100426358.png\" alt=\"image-20220720100426358\"></p>\n<h2 id=\"二、pom添加“repackage”打包插件和“profiles”配置\"><a href=\"#二、pom添加“repackage”打包插件和“profiles”配置\" class=\"headerlink\" title=\"二、pom添加“repackage”打包插件和“profiles”配置\"></a>二、pom添加“repackage”打包插件和“profiles”配置</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">//添加插件<br>&lt;build&gt;<br>    &lt;plugins&gt;<br>        &lt;plugin&gt;<br>            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>            &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;<br>            &lt;executions&gt;<br>                &lt;execution&gt;<br>                    &lt;goals&gt;<br>                        &lt;goal&gt;repackage&lt;/goal&gt;<br>                    &lt;/goals&gt;<br>                &lt;/execution&gt;<br>            &lt;/executions&gt;<br>        &lt;/plugin&gt;<br>    &lt;/plugins&gt;<br>&lt;/build&gt;<br>//添加profiles<br> &lt;profiles&gt;<br>        &lt;profile&gt;<br>            &lt;id&gt;local&lt;/id&gt;<br>            &lt;activation&gt;<br>                &lt;activeByDefault&gt;true&lt;/activeByDefault&gt;<br>            &lt;/activation&gt;<br>            &lt;properties&gt;<br>                &lt;spring.profiles.active&gt;local&lt;/spring.profiles.active&gt;<br>                &lt;profileActive&gt;local&lt;/profileActive&gt;<br>            &lt;/properties&gt;<br>        &lt;/profile&gt;<br>        &lt;profile&gt;<br>            &lt;id&gt;dev&lt;/id&gt;<br>            &lt;properties&gt;<br>                &lt;spring.profiles.active&gt;dev&lt;/spring.profiles.active&gt;<br>                &lt;profileActive&gt;dev&lt;/profileActive&gt;<br>            &lt;/properties&gt;<br>        &lt;/profile&gt;<br>        &lt;profile&gt;<br>            &lt;id&gt;pro&lt;/id&gt;<br>            &lt;properties&gt;<br>                &lt;spring.profiles.active&gt;pro&lt;/spring.profiles.active&gt;<br>                &lt;profileActive&gt;pro&lt;/profileActive&gt;<br>            &lt;/properties&gt;<br>        &lt;/profile&gt;<br>    &lt;/profiles&gt;<br></code></pre></td></tr></table></figure>\n<h2 id=\"三、application-yml配置\"><a href=\"#三、application-yml配置\" class=\"headerlink\" title=\"三、application.yml配置\"></a>三、application.yml配置</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">spring:<br>  profiles:<br>    active: @profileActive@<br></code></pre></td></tr></table></figure>\n<h2 id=\"四、打包\"><a href=\"#四、打包\" class=\"headerlink\" title=\"四、打包\"></a>四、打包</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">//默认local<br>mvn clean package<br>//dev环境<br>mvn clean package -P dev<br>//pro环境<br>mvn clean package -P pro<br></code></pre></td></tr></table></figure>\n\n"},{"title":"idea新建一个Spring Boot项目+项目目录简单介绍+项目打包运行+导入Module项目无法识别问题（全部报红或灰色）解决","date":"2022-09-05T09:09:05.000Z","category_bar":true,"_content":"\n# idea新建一个Spring Boot项目+项目目录简单介绍+项目打包运行+导入Module项目无法识别问题（全部报红或灰色）解决\n\n---\n\n[toc]\n\n+ 本文主要记录首次使用idea创建Spring Boot项目过程以及常见问题，适合初学者。在此之前使用eclipse，打包一般为war包，使用外部tomcat方式部署项目。\n  另外spring boot项目内置tomcat，可以将项目打成jar包直接部署。\n+ 首先建议更改自己的maven仓库，更快下载所需jar包：[修改maven仓库秒下依赖](https://blog.huijia.cf/archives/xiu-gai-maven-cang-ku-dao-zi-ding-yi-wei-zhi--tian-jia-a-li-yi-lai-miao-xia-jar-bao-eclipseidea)\n\n---\n\n## 一、新建Spring Boot jar包项目\n\n1. ![image-20220430165217870](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430165217870.png)\n2. ![image-20220430165224591](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430165224591.png)\n3. ![image-20220430165233112](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430165233112.png)\n\n---\n\n## 二、 新建Spring Boot war包项目\n\n+ ![image-20220430165238795](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430165238795.png)新建项目选项不同处： ![image-20220430165248817](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430165248817.png)\n+ 添加外部tomcat的pom依赖\n\n```javascript?linenums\n<dependency>\n   <groupId>org.springframework.boot</groupId>\n   <artifactId>spring-boot-starter-tomcat</artifactId>\n   <scope>provided</scope>\n</dependency>\n```\n\n+ 新建web.xml\n\n1. ![image-20220430165308426](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430165308426.png)\n2. 然后选择Modules，点击web（如果没有就点击左上角的加号新建一个），接着双击下方的Web Resource Directory中的第一项，这里是来设置webapp的路径，一般是自动设置好了的，直接点ok，然后点yes。\n   ![image-20220430165324886](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430165324886.png)\n3. 最后点击上面的加号新建web.xml\n   ![image-20220430165331877](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430165331877.png)\n4. 这里要注意路径，要放到刚才创建的webapp文件夹内。点击ok，然后再点击ok，web.xml就创建好了。\n   ![image-20220430165345116](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430165345116.png)\n\n+ 到此war包项目创建完毕，war包项目可使用外部tomcat运行。\n\n---\n\n## 三、项目目录简单介绍\n\n![image-20220430165350127](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430165350127.png)\n\n---\n\n## 四、项目打包运行\n\n1. 右侧maven，找到项目，install\n   ![image-20220430165404671](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430165404671.png)\n2. jar包运行（主机有jdk）\n\n```javascript?linenums\njava -jar 包名\n//Linux中后台运行\nnohup java -jar 包名 &\n```\n\n3. war包运行（tomcat的webapps文件夹下）\n   ![image-20220430165417686](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430165417686.png)\n\n---\n\n## 五、新手常见问题--module转移后项目全部变灰色或报错。\n\n+ 现象如图\n  ![image-20220430165424262](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430165424262.png)\n+ 解决\n\n1. 在idea右侧找到maven\n   ![image-20220430165435006](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430165435006.png)\n2. 发现此处没有该module\n   ![image-20220430165448018](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430165448018.png)\n3. 添加该module的pom.xml\n   ![image-20220430165453164](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430165453164.png)\n\n+ ![image-20220430165500622](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430165500622.png)问题解决\n  \n  ","source":"_posts/BookMark/Spring Boot/idea新建一个Spring Boot项目+项目目录简单介绍+项目打包运行+导入Module项目无法识别问题（全部报红或灰色）解决 --菜鸟小回.md","raw":"---\ntitle: idea新建一个Spring Boot项目+项目目录简单介绍+项目打包运行+导入Module项目无法识别问题（全部报红或灰色）解决\ndate: 2022-09-05 17:09:05\ncategory_bar: true\ncategories: Spring Boot\ntags:\n  - Spring Boot\n  - idea\n---\n\n# idea新建一个Spring Boot项目+项目目录简单介绍+项目打包运行+导入Module项目无法识别问题（全部报红或灰色）解决\n\n---\n\n[toc]\n\n+ 本文主要记录首次使用idea创建Spring Boot项目过程以及常见问题，适合初学者。在此之前使用eclipse，打包一般为war包，使用外部tomcat方式部署项目。\n  另外spring boot项目内置tomcat，可以将项目打成jar包直接部署。\n+ 首先建议更改自己的maven仓库，更快下载所需jar包：[修改maven仓库秒下依赖](https://blog.huijia.cf/archives/xiu-gai-maven-cang-ku-dao-zi-ding-yi-wei-zhi--tian-jia-a-li-yi-lai-miao-xia-jar-bao-eclipseidea)\n\n---\n\n## 一、新建Spring Boot jar包项目\n\n1. ![image-20220430165217870](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430165217870.png)\n2. ![image-20220430165224591](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430165224591.png)\n3. ![image-20220430165233112](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430165233112.png)\n\n---\n\n## 二、 新建Spring Boot war包项目\n\n+ ![image-20220430165238795](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430165238795.png)新建项目选项不同处： ![image-20220430165248817](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430165248817.png)\n+ 添加外部tomcat的pom依赖\n\n```javascript?linenums\n<dependency>\n   <groupId>org.springframework.boot</groupId>\n   <artifactId>spring-boot-starter-tomcat</artifactId>\n   <scope>provided</scope>\n</dependency>\n```\n\n+ 新建web.xml\n\n1. ![image-20220430165308426](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430165308426.png)\n2. 然后选择Modules，点击web（如果没有就点击左上角的加号新建一个），接着双击下方的Web Resource Directory中的第一项，这里是来设置webapp的路径，一般是自动设置好了的，直接点ok，然后点yes。\n   ![image-20220430165324886](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430165324886.png)\n3. 最后点击上面的加号新建web.xml\n   ![image-20220430165331877](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430165331877.png)\n4. 这里要注意路径，要放到刚才创建的webapp文件夹内。点击ok，然后再点击ok，web.xml就创建好了。\n   ![image-20220430165345116](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430165345116.png)\n\n+ 到此war包项目创建完毕，war包项目可使用外部tomcat运行。\n\n---\n\n## 三、项目目录简单介绍\n\n![image-20220430165350127](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430165350127.png)\n\n---\n\n## 四、项目打包运行\n\n1. 右侧maven，找到项目，install\n   ![image-20220430165404671](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430165404671.png)\n2. jar包运行（主机有jdk）\n\n```javascript?linenums\njava -jar 包名\n//Linux中后台运行\nnohup java -jar 包名 &\n```\n\n3. war包运行（tomcat的webapps文件夹下）\n   ![image-20220430165417686](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430165417686.png)\n\n---\n\n## 五、新手常见问题--module转移后项目全部变灰色或报错。\n\n+ 现象如图\n  ![image-20220430165424262](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430165424262.png)\n+ 解决\n\n1. 在idea右侧找到maven\n   ![image-20220430165435006](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430165435006.png)\n2. 发现此处没有该module\n   ![image-20220430165448018](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430165448018.png)\n3. 添加该module的pom.xml\n   ![image-20220430165453164](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430165453164.png)\n\n+ ![image-20220430165500622](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430165500622.png)问题解决\n  \n  ","slug":"BookMark/Spring Boot/idea新建一个Spring Boot项目+项目目录简单介绍+项目打包运行+导入Module项目无法识别问题（全部报红或灰色）解决 --菜鸟小回","published":1,"updated":"2022-09-06T06:28:10.146Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl7ptszon001saba5eove57iy","content":"<h1><span id=\"idea新建一个spring-boot项目项目目录简单介绍项目打包运行导入module项目无法识别问题全部报红或灰色解决\">idea新建一个Spring Boot项目+项目目录简单介绍+项目打包运行+导入Module项目无法识别问题（全部报红或灰色）解决</span></h1><hr>\n<p>[toc]</p>\n<ul>\n<li>本文主要记录首次使用idea创建Spring Boot项目过程以及常见问题，适合初学者。在此之前使用eclipse，打包一般为war包，使用外部tomcat方式部署项目。<br>另外spring boot项目内置tomcat，可以将项目打成jar包直接部署。</li>\n<li>首先建议更改自己的maven仓库，更快下载所需jar包：<a href=\"https://blog.huijia.cf/archives/xiu-gai-maven-cang-ku-dao-zi-ding-yi-wei-zhi--tian-jia-a-li-yi-lai-miao-xia-jar-bao-eclipseidea\">修改maven仓库秒下依赖</a></li>\n</ul>\n<hr>\n<h2><span id=\"一-新建spring-boot-jar包项目\">一、新建Spring Boot jar包项目</span></h2><ol>\n<li><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430165217870.png\" alt=\"image-20220430165217870\"></li>\n<li><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430165224591.png\" alt=\"image-20220430165224591\"></li>\n<li><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430165233112.png\" alt=\"image-20220430165233112\"></li>\n</ol>\n<hr>\n<h2><span id=\"二-新建spring-boot-war包项目\">二、 新建Spring Boot war包项目</span></h2><ul>\n<li><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430165238795.png\" alt=\"image-20220430165238795\">新建项目选项不同处： <img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430165248817.png\" alt=\"image-20220430165248817\"></li>\n<li>添加外部tomcat的pom依赖</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">&lt;dependency&gt;<br>   &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>   &lt;artifactId&gt;spring-boot-starter-tomcat&lt;/artifactId&gt;<br>   &lt;scope&gt;provided&lt;/scope&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>新建web.xml</li>\n</ul>\n<ol>\n<li><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430165308426.png\" alt=\"image-20220430165308426\"></li>\n<li>然后选择Modules，点击web（如果没有就点击左上角的加号新建一个），接着双击下方的Web Resource Directory中的第一项，这里是来设置webapp的路径，一般是自动设置好了的，直接点ok，然后点yes。<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430165324886.png\" alt=\"image-20220430165324886\"></li>\n<li>最后点击上面的加号新建web.xml<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430165331877.png\" alt=\"image-20220430165331877\"></li>\n<li>这里要注意路径，要放到刚才创建的webapp文件夹内。点击ok，然后再点击ok，web.xml就创建好了。<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430165345116.png\" alt=\"image-20220430165345116\"></li>\n</ol>\n<ul>\n<li>到此war包项目创建完毕，war包项目可使用外部tomcat运行。</li>\n</ul>\n<hr>\n<h2><span id=\"三-项目目录简单介绍\">三、项目目录简单介绍</span></h2><p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430165350127.png\" alt=\"image-20220430165350127\"></p>\n<hr>\n<h2><span id=\"四-项目打包运行\">四、项目打包运行</span></h2><ol>\n<li>右侧maven，找到项目，install<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430165404671.png\" alt=\"image-20220430165404671\"></li>\n<li>jar包运行（主机有jdk）</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">java -jar 包名<br>//Linux中后台运行<br>nohup java -jar 包名 &amp;<br></code></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>war包运行（tomcat的webapps文件夹下）<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430165417686.png\" alt=\"image-20220430165417686\"></li>\n</ol>\n<hr>\n<h2><span id=\"五-新手常见问题module转移后项目全部变灰色或报错\">五、新手常见问题–module转移后项目全部变灰色或报错。</span></h2><ul>\n<li>现象如图<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430165424262.png\" alt=\"image-20220430165424262\"></li>\n<li>解决</li>\n</ul>\n<ol>\n<li>在idea右侧找到maven<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430165435006.png\" alt=\"image-20220430165435006\"></li>\n<li>发现此处没有该module<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430165448018.png\" alt=\"image-20220430165448018\"></li>\n<li>添加该module的pom.xml<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430165453164.png\" alt=\"image-20220430165453164\"></li>\n</ol>\n<ul>\n<li><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430165500622.png\" alt=\"image-20220430165500622\">问题解决</li>\n</ul>\n","site":{"data":{}},"wordcount":923,"excerpt":"","more":"<h1 id=\"idea新建一个Spring-Boot项目-项目目录简单介绍-项目打包运行-导入Module项目无法识别问题（全部报红或灰色）解决\"><a href=\"#idea新建一个Spring-Boot项目-项目目录简单介绍-项目打包运行-导入Module项目无法识别问题（全部报红或灰色）解决\" class=\"headerlink\" title=\"idea新建一个Spring Boot项目+项目目录简单介绍+项目打包运行+导入Module项目无法识别问题（全部报红或灰色）解决\"></a>idea新建一个Spring Boot项目+项目目录简单介绍+项目打包运行+导入Module项目无法识别问题（全部报红或灰色）解决</h1><hr>\n<p>[toc]</p>\n<ul>\n<li>本文主要记录首次使用idea创建Spring Boot项目过程以及常见问题，适合初学者。在此之前使用eclipse，打包一般为war包，使用外部tomcat方式部署项目。<br>另外spring boot项目内置tomcat，可以将项目打成jar包直接部署。</li>\n<li>首先建议更改自己的maven仓库，更快下载所需jar包：<a href=\"https://blog.huijia.cf/archives/xiu-gai-maven-cang-ku-dao-zi-ding-yi-wei-zhi--tian-jia-a-li-yi-lai-miao-xia-jar-bao-eclipseidea\">修改maven仓库秒下依赖</a></li>\n</ul>\n<hr>\n<h2 id=\"一、新建Spring-Boot-jar包项目\"><a href=\"#一、新建Spring-Boot-jar包项目\" class=\"headerlink\" title=\"一、新建Spring Boot jar包项目\"></a>一、新建Spring Boot jar包项目</h2><ol>\n<li><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430165217870.png\" alt=\"image-20220430165217870\"></li>\n<li><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430165224591.png\" alt=\"image-20220430165224591\"></li>\n<li><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430165233112.png\" alt=\"image-20220430165233112\"></li>\n</ol>\n<hr>\n<h2 id=\"二、-新建Spring-Boot-war包项目\"><a href=\"#二、-新建Spring-Boot-war包项目\" class=\"headerlink\" title=\"二、 新建Spring Boot war包项目\"></a>二、 新建Spring Boot war包项目</h2><ul>\n<li><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430165238795.png\" alt=\"image-20220430165238795\">新建项目选项不同处： <img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430165248817.png\" alt=\"image-20220430165248817\"></li>\n<li>添加外部tomcat的pom依赖</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">&lt;dependency&gt;<br>   &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>   &lt;artifactId&gt;spring-boot-starter-tomcat&lt;/artifactId&gt;<br>   &lt;scope&gt;provided&lt;/scope&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>新建web.xml</li>\n</ul>\n<ol>\n<li><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430165308426.png\" alt=\"image-20220430165308426\"></li>\n<li>然后选择Modules，点击web（如果没有就点击左上角的加号新建一个），接着双击下方的Web Resource Directory中的第一项，这里是来设置webapp的路径，一般是自动设置好了的，直接点ok，然后点yes。<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430165324886.png\" alt=\"image-20220430165324886\"></li>\n<li>最后点击上面的加号新建web.xml<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430165331877.png\" alt=\"image-20220430165331877\"></li>\n<li>这里要注意路径，要放到刚才创建的webapp文件夹内。点击ok，然后再点击ok，web.xml就创建好了。<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430165345116.png\" alt=\"image-20220430165345116\"></li>\n</ol>\n<ul>\n<li>到此war包项目创建完毕，war包项目可使用外部tomcat运行。</li>\n</ul>\n<hr>\n<h2 id=\"三、项目目录简单介绍\"><a href=\"#三、项目目录简单介绍\" class=\"headerlink\" title=\"三、项目目录简单介绍\"></a>三、项目目录简单介绍</h2><p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430165350127.png\" alt=\"image-20220430165350127\"></p>\n<hr>\n<h2 id=\"四、项目打包运行\"><a href=\"#四、项目打包运行\" class=\"headerlink\" title=\"四、项目打包运行\"></a>四、项目打包运行</h2><ol>\n<li>右侧maven，找到项目，install<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430165404671.png\" alt=\"image-20220430165404671\"></li>\n<li>jar包运行（主机有jdk）</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">java -jar 包名<br>//Linux中后台运行<br>nohup java -jar 包名 &amp;<br></code></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>war包运行（tomcat的webapps文件夹下）<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430165417686.png\" alt=\"image-20220430165417686\"></li>\n</ol>\n<hr>\n<h2 id=\"五、新手常见问题–module转移后项目全部变灰色或报错。\"><a href=\"#五、新手常见问题–module转移后项目全部变灰色或报错。\" class=\"headerlink\" title=\"五、新手常见问题–module转移后项目全部变灰色或报错。\"></a>五、新手常见问题–module转移后项目全部变灰色或报错。</h2><ul>\n<li>现象如图<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430165424262.png\" alt=\"image-20220430165424262\"></li>\n<li>解决</li>\n</ul>\n<ol>\n<li>在idea右侧找到maven<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430165435006.png\" alt=\"image-20220430165435006\"></li>\n<li>发现此处没有该module<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430165448018.png\" alt=\"image-20220430165448018\"></li>\n<li>添加该module的pom.xml<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430165453164.png\" alt=\"image-20220430165453164\"></li>\n</ol>\n<ul>\n<li><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430165500622.png\" alt=\"image-20220430165500622\">问题解决</li>\n</ul>\n"},{"_content":"# 异常解决\n1.  Unknown column 'update_time' in 'field list'\n解决：实体类取消继承extends SuperEntity；并添加主键id。\n\n2. mybatis plus，生成代码sql异常\nYou have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'describe‘\n解决：@TableField(\"`describe`\")使用表中字段注解，再添加``反引号。\n常见mysql关键字：\n```javascript?linenums\nsystem \ndescribe\n```\n3. 网关访问未访问到本项目，需本地访问。\n4. RequestBody接收数据时传入普通参数显示找不到（第一个实体类）参数。应更换为json字符串类型参数。\n5. 数据库字段类型修改，请重新生成代码\n6. feign发生参数错误，\n```javascript?linenums\n@RequestParam(\"customerId\") Long customerId\n```\n7. feign发生调用失败 可用\n```javascript?linenums\n//1.打印日志\nlog.error(\"/packageDetail/deduct/请求失败-->{}-->{}-->{}\",customerId,productId,count);\n//2.重启项目，防止缓存\n```\n# 异常排查\n1. sql语法异常：粘贴报错sql在数据中建立查询。","source":"_posts/BookMark/异常/项目异常.md","raw":"# 异常解决\n1.  Unknown column 'update_time' in 'field list'\n解决：实体类取消继承extends SuperEntity；并添加主键id。\n\n2. mybatis plus，生成代码sql异常\nYou have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'describe‘\n解决：@TableField(\"`describe`\")使用表中字段注解，再添加``反引号。\n常见mysql关键字：\n```javascript?linenums\nsystem \ndescribe\n```\n3. 网关访问未访问到本项目，需本地访问。\n4. RequestBody接收数据时传入普通参数显示找不到（第一个实体类）参数。应更换为json字符串类型参数。\n5. 数据库字段类型修改，请重新生成代码\n6. feign发生参数错误，\n```javascript?linenums\n@RequestParam(\"customerId\") Long customerId\n```\n7. feign发生调用失败 可用\n```javascript?linenums\n//1.打印日志\nlog.error(\"/packageDetail/deduct/请求失败-->{}-->{}-->{}\",customerId,productId,count);\n//2.重启项目，防止缓存\n```\n# 异常排查\n1. sql语法异常：粘贴报错sql在数据中建立查询。","slug":"BookMark/异常/项目异常","published":1,"date":"2022-07-25T05:51:38.000Z","updated":"2022-07-25T05:51:38.000Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cl7ptszon001taba5fkx28kjn","content":"<h1><span id=\"异常解决\">异常解决</span></h1><ol>\n<li><p>Unknown column ‘update_time’ in ‘field list’<br>解决：实体类取消继承extends SuperEntity；并添加主键id。</p>\n</li>\n<li><p>mybatis plus，生成代码sql异常<br>You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near ‘describe‘<br>解决：@TableField(“<code>describe</code>“)使用表中字段注解，再添加&#96;&#96;反引号。<br>常见mysql关键字：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">system <br>describe<br></code></pre></td></tr></table></figure></li>\n<li><p>网关访问未访问到本项目，需本地访问。</p>\n</li>\n<li><p>RequestBody接收数据时传入普通参数显示找不到（第一个实体类）参数。应更换为json字符串类型参数。</p>\n</li>\n<li><p>数据库字段类型修改，请重新生成代码</p>\n</li>\n<li><p>feign发生参数错误，</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">@RequestParam(&quot;customerId&quot;) Long customerId<br></code></pre></td></tr></table></figure></li>\n<li><p>feign发生调用失败 可用</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">//1.打印日志<br>log.error(&quot;/packageDetail/deduct/请求失败--&gt;&#123;&#125;--&gt;&#123;&#125;--&gt;&#123;&#125;&quot;,customerId,productId,count);<br>//2.重启项目，防止缓存<br></code></pre></td></tr></table></figure></li>\n</ol>\n<h1><span id=\"异常排查\">异常排查</span></h1><ol>\n<li>sql语法异常：粘贴报错sql在数据中建立查询。</li>\n</ol>\n","site":{"data":{}},"wordcount":648,"excerpt":"","more":"<h1 id=\"异常解决\"><a href=\"#异常解决\" class=\"headerlink\" title=\"异常解决\"></a>异常解决</h1><ol>\n<li><p>Unknown column ‘update_time’ in ‘field list’<br>解决：实体类取消继承extends SuperEntity；并添加主键id。</p>\n</li>\n<li><p>mybatis plus，生成代码sql异常<br>You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near ‘describe‘<br>解决：@TableField(“<code>describe</code>“)使用表中字段注解，再添加&#96;&#96;反引号。<br>常见mysql关键字：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">system <br>describe<br></code></pre></td></tr></table></figure></li>\n<li><p>网关访问未访问到本项目，需本地访问。</p>\n</li>\n<li><p>RequestBody接收数据时传入普通参数显示找不到（第一个实体类）参数。应更换为json字符串类型参数。</p>\n</li>\n<li><p>数据库字段类型修改，请重新生成代码</p>\n</li>\n<li><p>feign发生参数错误，</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">@RequestParam(&quot;customerId&quot;) Long customerId<br></code></pre></td></tr></table></figure></li>\n<li><p>feign发生调用失败 可用</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">//1.打印日志<br>log.error(&quot;/packageDetail/deduct/请求失败--&gt;&#123;&#125;--&gt;&#123;&#125;--&gt;&#123;&#125;&quot;,customerId,productId,count);<br>//2.重启项目，防止缓存<br></code></pre></td></tr></table></figure></li>\n</ol>\n<h1 id=\"异常排查\"><a href=\"#异常排查\" class=\"headerlink\" title=\"异常排查\"></a>异常排查</h1><ol>\n<li>sql语法异常：粘贴报错sql在数据中建立查询。</li>\n</ol>\n"},{"_content":"# 解决：Error:java: 无效的源发行版: 12\n## 一、 spring cloud项目启动。遇到问题：\n![image-20220721144811246](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721144811246.png)\n## 二、 解决，共两个地方。\n### 第一个位置：\n1. Project Structure   \n  ![image-20220721144822451](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721144822451.png)\n\n2. Modules选择你的项目（以及父级项目，如果有的话）->选择8（你的jdk版本） 如图：\n\n   ![image-20220721144843419](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721144843419.png)\n### 第二个位置\n1.Setting：\n![image-20220721144851114](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721144851114.png)\n2.查找java compiler->Target bytecode version 修改为8（你的jdk版本，同样注意父级项目）：\n\n![image-20220721144903945](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721144903945.png)\n\n3.重新启动吧\n\n![image-20220721144916608](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721144916608.png)\n","source":"_posts/BookMark/异常/解决：Error java 无效的源发行版 12 --菜鸟小回.md","raw":"# 解决：Error:java: 无效的源发行版: 12\n## 一、 spring cloud项目启动。遇到问题：\n![image-20220721144811246](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721144811246.png)\n## 二、 解决，共两个地方。\n### 第一个位置：\n1. Project Structure   \n  ![image-20220721144822451](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721144822451.png)\n\n2. Modules选择你的项目（以及父级项目，如果有的话）->选择8（你的jdk版本） 如图：\n\n   ![image-20220721144843419](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721144843419.png)\n### 第二个位置\n1.Setting：\n![image-20220721144851114](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721144851114.png)\n2.查找java compiler->Target bytecode version 修改为8（你的jdk版本，同样注意父级项目）：\n\n![image-20220721144903945](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721144903945.png)\n\n3.重新启动吧\n\n![image-20220721144916608](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721144916608.png)\n","slug":"BookMark/异常/解决：Error java 无效的源发行版 12 --菜鸟小回","published":1,"date":"2022-07-25T05:51:38.000Z","updated":"2022-09-01T10:02:40.527Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cl7ptszon001waba58frh5375","content":"<h1><span id=\"解决errorjava-无效的源发行版-12\">解决：Error:java: 无效的源发行版: 12</span></h1><h2><span id=\"一-spring-cloud项目启动-遇到问题\">一、 spring cloud项目启动。遇到问题：</span></h2><p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721144811246.png\" alt=\"image-20220721144811246\"></p>\n<h2><span id=\"二-解决共两个地方\">二、 解决，共两个地方。</span></h2><h3><span id=\"第一个位置\">第一个位置：</span></h3><ol>\n<li><p>Project Structure<br>  <img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721144822451.png\" alt=\"image-20220721144822451\"></p>\n</li>\n<li><p>Modules选择你的项目（以及父级项目，如果有的话）-&gt;选择8（你的jdk版本） 如图：</p>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721144843419.png\" alt=\"image-20220721144843419\"></p>\n</li>\n</ol>\n<h3><span id=\"第二个位置\">第二个位置</span></h3><p>1.Setting：<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721144851114.png\" alt=\"image-20220721144851114\"><br>2.查找java compiler-&gt;Target bytecode version 修改为8（你的jdk版本，同样注意父级项目）：</p>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721144903945.png\" alt=\"image-20220721144903945\"></p>\n<p>3.重新启动吧</p>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721144916608.png\" alt=\"image-20220721144916608\"></p>\n","site":{"data":{}},"wordcount":214,"excerpt":"","more":"<h1 id=\"解决：Error-java-无效的源发行版-12\"><a href=\"#解决：Error-java-无效的源发行版-12\" class=\"headerlink\" title=\"解决：Error:java: 无效的源发行版: 12\"></a>解决：Error:java: 无效的源发行版: 12</h1><h2 id=\"一、-spring-cloud项目启动。遇到问题：\"><a href=\"#一、-spring-cloud项目启动。遇到问题：\" class=\"headerlink\" title=\"一、 spring cloud项目启动。遇到问题：\"></a>一、 spring cloud项目启动。遇到问题：</h2><p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721144811246.png\" alt=\"image-20220721144811246\"></p>\n<h2 id=\"二、-解决，共两个地方。\"><a href=\"#二、-解决，共两个地方。\" class=\"headerlink\" title=\"二、 解决，共两个地方。\"></a>二、 解决，共两个地方。</h2><h3 id=\"第一个位置：\"><a href=\"#第一个位置：\" class=\"headerlink\" title=\"第一个位置：\"></a>第一个位置：</h3><ol>\n<li><p>Project Structure<br>  <img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721144822451.png\" alt=\"image-20220721144822451\"></p>\n</li>\n<li><p>Modules选择你的项目（以及父级项目，如果有的话）-&gt;选择8（你的jdk版本） 如图：</p>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721144843419.png\" alt=\"image-20220721144843419\"></p>\n</li>\n</ol>\n<h3 id=\"第二个位置\"><a href=\"#第二个位置\" class=\"headerlink\" title=\"第二个位置\"></a>第二个位置</h3><p>1.Setting：<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721144851114.png\" alt=\"image-20220721144851114\"><br>2.查找java compiler-&gt;Target bytecode version 修改为8（你的jdk版本，同样注意父级项目）：</p>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721144903945.png\" alt=\"image-20220721144903945\"></p>\n<p>3.重新启动吧</p>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721144916608.png\" alt=\"image-20220721144916608\"></p>\n"},{"_content":"# Java中使用图片验证码\n---\n## 一、第一种方式\n1. 工具类\n```javascript?linenums\n@WebServlet(\"/BufferImage\")\npublic class BufferImage extends HttpServlet {\n    public static final int WIDTH = 120;//生成图片的宽度\n    public static final int HEIGHT = 30;//生成图片的高度\n    public static final int WORDS_NUMBER = 4;//验证码中字符的个数\n    \n    @Override\n    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n        // TODO Auto-generated method stub\n        this.doPost(req, resp);\n    }\n\n    @Override\n    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n    \t\n    \treq.setCharacterEncoding(\"utf-8\");\n\t\tresp.setContentType(\"text/html;charset=utf-8\");\n\t\t\n    \t// TODO Auto-generated method stub\n        String createTypeFlag = req.getParameter(\"createTypeFlag\");//接收客户端传递的createTypeFlag标识\n        //在内存中创建一张图片\n        BufferedImage bi = new BufferedImage(WIDTH,HEIGHT,BufferedImage.TYPE_3BYTE_BGR);\n        //得到图片\n        Graphics g = bi.getGraphics();\n        //设置图片的背景色\n        setBackGround(g);\n        //设置图片的边框\n        setBorder(g);\n        //在图片上画干扰线\n        drawRandomLine(g);\n        //在图片上放上随机字符\n        String randomString = this.drawRandomNum((Graphics2D)g, createTypeFlag);\n        System.out.println(randomString);\n        //将随机数存在session中\n        req.getSession().setAttribute(\"checkcode\", randomString);\n        \n        //设置响应头通知浏览器以图片的形式打开\n        resp.setContentType(\"image/jpeg\");\n        \n        //设置响应头控制浏览器不要缓存\n        resp.setDateHeader(\"expries\", -1);\n        resp.setHeader(\"Cache-Control\", \"no-cache\");\n        resp.setHeader(\"Pragma\", \"no-cache\");\n        \n        //将图片传给浏览器\n        ImageIO.write(bi, \"jpg\", resp.getOutputStream());\n    }\n    \n    //设置图片背景色\n    //@param g\n    private void setBackGround(Graphics g) {\n        //设置颜色\n        g.setColor(Color.WHITE);\n        //填充区域\n        g.fillRect(0, 0, WIDTH, HEIGHT);\n    }\n    \n    /*\n     * 设置图片的边框\n     * @param g\n     * */\n    \n    private void setBorder(Graphics g) {\n        //设置边框颜色\n        g.setColor(Color.BLUE);\n        //边框区域\n        g.drawRect(1, 1, WIDTH - 2, HEIGHT -2);\n    }\n    \n    /*\n     * 在图片上画随机线条 \n     * @param g\n     * */\n    private void drawRandomLine(Graphics g) {\n        //设置颜色\n        g.setColor(Color.GREEN);\n        //设置线条个数并画线\n        for ( int i = 0 ; i < 7 ; i++ ) {\n            int x1 = new Random().nextInt(WIDTH);\n            int y1 = new Random().nextInt(HEIGHT);\n            int x2 = new Random().nextInt(WIDTH);\n            int y2 = new Random().nextInt(HEIGHT);\n            g.drawLine(x1, y1, x2, y2);\n        }\n    }\n    \n    /*\n     * 在图片上画随机字符\n     * @param g\n     * @param createTypeFlag\n     * @return String\n     * */\n    private String drawRandomNum(Graphics g,String createTypeFlag) {\n        //设置颜色\n        g.setColor(Color.BLUE);\n        g.setFont(new Font(\"宋体\",Font.BOLD,20));\n        \n        //数字字母的组合\n        String baseNumLetter = \"0123456789ABCDEFGHJKLMNOPQRSTUVWXYZ\";\n        String baseNum = \"0123456789\";\n        String baseLetter = \"ABCDEFGHJKLMNOPQRSTUVWXYZ\";\n        if ( createTypeFlag != null  && createTypeFlag.length() > 0 ) {\n            if( createTypeFlag.equals(\"nl\") ) {\n                //截取数字和字母的组合\n                return createRandomChar((Graphics2D) g,baseNumLetter);\n            } else if ( createTypeFlag.equals(\"n\") ) {\n                //截取数字的组合\n                return createRandomChar((Graphics2D) g,baseNum);\n            } else if ( createTypeFlag.equals(\"l\") ) {\n                //截取字母的组合\n                return createRandomChar((Graphics2D) g,baseLetter);\n            }\n        } else {\n            //截取数字和字母的组合\n            return createRandomChar((Graphics2D) g,baseNumLetter);\n        }\n        return \"\";\n    }\n    \n    /*\n     * 创建随机字符\n     * @param g\n     * @param baseChar\n     * @return String\n     * */\n    private String createRandomChar(Graphics2D g , String baseChar) {\n        StringBuffer b = new StringBuffer();\n        int x = 5;\n        String ch = \"\";\n        for ( int i = 0 ; i < WORDS_NUMBER ; i++ ) {\n            //设置字体的旋转角度\n            int degree = new Random().nextInt() % 30;\n            ch = baseChar.charAt(new Random().nextInt(baseChar.length())) + \"\";\n            b.append(ch);\n            \n            //正向角度\n            g.rotate(degree  * Math.PI / 180 , x,20);\n            g.drawString(ch, x, 20);\n            //反向角度\n            g.rotate(-degree  * Math.PI / 180 , x,20);\n            x+=30;\n        }\n        return b.toString();\n    }\n}\n```\n2. 后端\n```javascript?linenums\n    @RequestMapping(value=\"/userLogin.do\")\n\n\tpublic void userLogin(String code,HttpSession session){\n\t\tString cht=(String)session.getAttribute(\"checkcode\");\n\t\tif(code.equalsIgnoreCase(cht)){\n\t\t\tSystem.out.println(\"验证码正确\");\n\t\t}\n\t}\n```\n3. 前端\n```javascript?linenums\n<form>\n<img src=\"BufferImage\" onclick=\"this.src='BufferImage?'+new Date().getTime()\">看不清换一张<br><br>\n验证码： <input type=\"text\" id=\"verify\" class=\"input-medium\" placeholder=\"验证码\">\n<input type=\"submit\" value=\"提交\">\n</form>\n```\n\n## 二、第二种方式（Spring Boot框架使用）\n1. 工具类\n```javascript?linenums\npackage com.zhiyou.util;\n\n\nimport javax.imageio.ImageIO;\nimport java.awt.*;\nimport java.awt.image.BufferedImage;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.OutputStream;\nimport java.util.Random;\n\npublic final class BufferImage {\n\n    // 验证码字符集\n    private static final char[] chars = {\n            '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',\n            'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N',\n            'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'};\n    // 字符数量\n    private static final int SIZE = 4;\n    // 干扰线数量\n    private static final int LINES = 8;\n    // 宽度\n    private static final int WIDTH = 100;\n    // 高度\n    private static final int HEIGHT = 32;\n    // 字体大小\n    private static final int FONT_SIZE = 25;\n\n    /**\n     * 生成随机验证码及图片\n     * 数组中[验证码，图片]\n     */\n    public static Object[] createImage() {\n        StringBuffer sb = new StringBuffer();\n        // 1.创建空白图片\n        BufferedImage image = new BufferedImage(\n                WIDTH, HEIGHT, BufferedImage.TYPE_INT_RGB);\n        // 2.获取图片画笔\n        Graphics graphic = image.getGraphics();\n        // 3.设置画笔颜色\n        graphic.setColor(new Color(216, 172, 203, 241));\n        // 4.绘制矩形背景\n        graphic.fillRect(0, 0, WIDTH, HEIGHT);\n\n        // 5.画随机字符\n        Random ran = new Random();\n        for (int i = 0; i <SIZE; i++) {\n            // 取随机字符索引\n            int n = ran.nextInt(chars.length);\n            // 设置随机颜色\n            graphic.setColor(getRandomColor());\n            // 设置字体大小\n            graphic.setFont(new Font(\n                    null, Font.BOLD + Font.ITALIC, FONT_SIZE));\n            // 画字符\n            graphic.drawString(\n                    chars[n] + \"\", i * WIDTH / SIZE, HEIGHT/2+HEIGHT/8);\n            // 记录字符\n            sb.append(chars[n]);\n        }\n        // 6.画干扰线\n        for (int i = 0; i < LINES; i++) {\n\n            graphic.setColor(getRandomColor());\n            // 随机画线\n            graphic.drawLine(ran.nextInt(WIDTH), ran.nextInt(HEIGHT),\n                    ran.nextInt(WIDTH), ran.nextInt(HEIGHT));\n        }\n        // 7.返回验证码和图片\n        return new Object[]{sb.toString(), image};\n    }\n\n    /**\n     * 随机取色\n     */\n    public static Color getRandomColor() {\n        Random ran = new Random();\n        Color color = new Color(ran.nextInt(256),\n                ran.nextInt(256), ran.nextInt(256));\n        return color;\n    }\n\n    public static void main(String[] args) throws IOException {\n        Object[] objs = createImage();\n        BufferedImage image = (BufferedImage) objs[1];\n        OutputStream os = new FileOutputStream(\"src/main/resources/static/picture/eb1ccd3d99794795bc99553b0b762e73.gif\");\n        ImageIO.write(image, \"png\", os);\n        os.close();\n    }\n\n}\n\n```\n2. 后台controller\n```javascript?linenums\n/* **********************************图片验证码************************************* */\n\t@RequestMapping(value = \"/BufferImage\")\n\tprotected void createImg(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException {\n\t\t//1.生成随机的验证码及图片\n\t\tObject[] objs = BufferImage.createImage();\n\t\t//2.将验证码存入session\n\t\tString imgcode = (String) objs[0];\n\t\tHttpSession session = req.getSession();\n\t\tsession.setAttribute(\"checkcode\", imgcode);\n\t\t//3.将图片输出给浏览器\n\t\tBufferedImage img = (BufferedImage) objs[1];\n\t\tres.setContentType(\"image/png\");\n\t\t//服务器自动创建输出流，目标指向浏览器\n\t\tOutputStream os = res.getOutputStream();\n\t\tImageIO.write(img, \"png\", os);\n\t\tos.close();\n\t}\n```\n3. 验证和前台方式不变\n","source":"_posts/BookMark/学习笔记/Java中使用图片验证码 --菜鸟小回.md","raw":"# Java中使用图片验证码\n---\n## 一、第一种方式\n1. 工具类\n```javascript?linenums\n@WebServlet(\"/BufferImage\")\npublic class BufferImage extends HttpServlet {\n    public static final int WIDTH = 120;//生成图片的宽度\n    public static final int HEIGHT = 30;//生成图片的高度\n    public static final int WORDS_NUMBER = 4;//验证码中字符的个数\n    \n    @Override\n    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n        // TODO Auto-generated method stub\n        this.doPost(req, resp);\n    }\n\n    @Override\n    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n    \t\n    \treq.setCharacterEncoding(\"utf-8\");\n\t\tresp.setContentType(\"text/html;charset=utf-8\");\n\t\t\n    \t// TODO Auto-generated method stub\n        String createTypeFlag = req.getParameter(\"createTypeFlag\");//接收客户端传递的createTypeFlag标识\n        //在内存中创建一张图片\n        BufferedImage bi = new BufferedImage(WIDTH,HEIGHT,BufferedImage.TYPE_3BYTE_BGR);\n        //得到图片\n        Graphics g = bi.getGraphics();\n        //设置图片的背景色\n        setBackGround(g);\n        //设置图片的边框\n        setBorder(g);\n        //在图片上画干扰线\n        drawRandomLine(g);\n        //在图片上放上随机字符\n        String randomString = this.drawRandomNum((Graphics2D)g, createTypeFlag);\n        System.out.println(randomString);\n        //将随机数存在session中\n        req.getSession().setAttribute(\"checkcode\", randomString);\n        \n        //设置响应头通知浏览器以图片的形式打开\n        resp.setContentType(\"image/jpeg\");\n        \n        //设置响应头控制浏览器不要缓存\n        resp.setDateHeader(\"expries\", -1);\n        resp.setHeader(\"Cache-Control\", \"no-cache\");\n        resp.setHeader(\"Pragma\", \"no-cache\");\n        \n        //将图片传给浏览器\n        ImageIO.write(bi, \"jpg\", resp.getOutputStream());\n    }\n    \n    //设置图片背景色\n    //@param g\n    private void setBackGround(Graphics g) {\n        //设置颜色\n        g.setColor(Color.WHITE);\n        //填充区域\n        g.fillRect(0, 0, WIDTH, HEIGHT);\n    }\n    \n    /*\n     * 设置图片的边框\n     * @param g\n     * */\n    \n    private void setBorder(Graphics g) {\n        //设置边框颜色\n        g.setColor(Color.BLUE);\n        //边框区域\n        g.drawRect(1, 1, WIDTH - 2, HEIGHT -2);\n    }\n    \n    /*\n     * 在图片上画随机线条 \n     * @param g\n     * */\n    private void drawRandomLine(Graphics g) {\n        //设置颜色\n        g.setColor(Color.GREEN);\n        //设置线条个数并画线\n        for ( int i = 0 ; i < 7 ; i++ ) {\n            int x1 = new Random().nextInt(WIDTH);\n            int y1 = new Random().nextInt(HEIGHT);\n            int x2 = new Random().nextInt(WIDTH);\n            int y2 = new Random().nextInt(HEIGHT);\n            g.drawLine(x1, y1, x2, y2);\n        }\n    }\n    \n    /*\n     * 在图片上画随机字符\n     * @param g\n     * @param createTypeFlag\n     * @return String\n     * */\n    private String drawRandomNum(Graphics g,String createTypeFlag) {\n        //设置颜色\n        g.setColor(Color.BLUE);\n        g.setFont(new Font(\"宋体\",Font.BOLD,20));\n        \n        //数字字母的组合\n        String baseNumLetter = \"0123456789ABCDEFGHJKLMNOPQRSTUVWXYZ\";\n        String baseNum = \"0123456789\";\n        String baseLetter = \"ABCDEFGHJKLMNOPQRSTUVWXYZ\";\n        if ( createTypeFlag != null  && createTypeFlag.length() > 0 ) {\n            if( createTypeFlag.equals(\"nl\") ) {\n                //截取数字和字母的组合\n                return createRandomChar((Graphics2D) g,baseNumLetter);\n            } else if ( createTypeFlag.equals(\"n\") ) {\n                //截取数字的组合\n                return createRandomChar((Graphics2D) g,baseNum);\n            } else if ( createTypeFlag.equals(\"l\") ) {\n                //截取字母的组合\n                return createRandomChar((Graphics2D) g,baseLetter);\n            }\n        } else {\n            //截取数字和字母的组合\n            return createRandomChar((Graphics2D) g,baseNumLetter);\n        }\n        return \"\";\n    }\n    \n    /*\n     * 创建随机字符\n     * @param g\n     * @param baseChar\n     * @return String\n     * */\n    private String createRandomChar(Graphics2D g , String baseChar) {\n        StringBuffer b = new StringBuffer();\n        int x = 5;\n        String ch = \"\";\n        for ( int i = 0 ; i < WORDS_NUMBER ; i++ ) {\n            //设置字体的旋转角度\n            int degree = new Random().nextInt() % 30;\n            ch = baseChar.charAt(new Random().nextInt(baseChar.length())) + \"\";\n            b.append(ch);\n            \n            //正向角度\n            g.rotate(degree  * Math.PI / 180 , x,20);\n            g.drawString(ch, x, 20);\n            //反向角度\n            g.rotate(-degree  * Math.PI / 180 , x,20);\n            x+=30;\n        }\n        return b.toString();\n    }\n}\n```\n2. 后端\n```javascript?linenums\n    @RequestMapping(value=\"/userLogin.do\")\n\n\tpublic void userLogin(String code,HttpSession session){\n\t\tString cht=(String)session.getAttribute(\"checkcode\");\n\t\tif(code.equalsIgnoreCase(cht)){\n\t\t\tSystem.out.println(\"验证码正确\");\n\t\t}\n\t}\n```\n3. 前端\n```javascript?linenums\n<form>\n<img src=\"BufferImage\" onclick=\"this.src='BufferImage?'+new Date().getTime()\">看不清换一张<br><br>\n验证码： <input type=\"text\" id=\"verify\" class=\"input-medium\" placeholder=\"验证码\">\n<input type=\"submit\" value=\"提交\">\n</form>\n```\n\n## 二、第二种方式（Spring Boot框架使用）\n1. 工具类\n```javascript?linenums\npackage com.zhiyou.util;\n\n\nimport javax.imageio.ImageIO;\nimport java.awt.*;\nimport java.awt.image.BufferedImage;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.OutputStream;\nimport java.util.Random;\n\npublic final class BufferImage {\n\n    // 验证码字符集\n    private static final char[] chars = {\n            '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',\n            'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N',\n            'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'};\n    // 字符数量\n    private static final int SIZE = 4;\n    // 干扰线数量\n    private static final int LINES = 8;\n    // 宽度\n    private static final int WIDTH = 100;\n    // 高度\n    private static final int HEIGHT = 32;\n    // 字体大小\n    private static final int FONT_SIZE = 25;\n\n    /**\n     * 生成随机验证码及图片\n     * 数组中[验证码，图片]\n     */\n    public static Object[] createImage() {\n        StringBuffer sb = new StringBuffer();\n        // 1.创建空白图片\n        BufferedImage image = new BufferedImage(\n                WIDTH, HEIGHT, BufferedImage.TYPE_INT_RGB);\n        // 2.获取图片画笔\n        Graphics graphic = image.getGraphics();\n        // 3.设置画笔颜色\n        graphic.setColor(new Color(216, 172, 203, 241));\n        // 4.绘制矩形背景\n        graphic.fillRect(0, 0, WIDTH, HEIGHT);\n\n        // 5.画随机字符\n        Random ran = new Random();\n        for (int i = 0; i <SIZE; i++) {\n            // 取随机字符索引\n            int n = ran.nextInt(chars.length);\n            // 设置随机颜色\n            graphic.setColor(getRandomColor());\n            // 设置字体大小\n            graphic.setFont(new Font(\n                    null, Font.BOLD + Font.ITALIC, FONT_SIZE));\n            // 画字符\n            graphic.drawString(\n                    chars[n] + \"\", i * WIDTH / SIZE, HEIGHT/2+HEIGHT/8);\n            // 记录字符\n            sb.append(chars[n]);\n        }\n        // 6.画干扰线\n        for (int i = 0; i < LINES; i++) {\n\n            graphic.setColor(getRandomColor());\n            // 随机画线\n            graphic.drawLine(ran.nextInt(WIDTH), ran.nextInt(HEIGHT),\n                    ran.nextInt(WIDTH), ran.nextInt(HEIGHT));\n        }\n        // 7.返回验证码和图片\n        return new Object[]{sb.toString(), image};\n    }\n\n    /**\n     * 随机取色\n     */\n    public static Color getRandomColor() {\n        Random ran = new Random();\n        Color color = new Color(ran.nextInt(256),\n                ran.nextInt(256), ran.nextInt(256));\n        return color;\n    }\n\n    public static void main(String[] args) throws IOException {\n        Object[] objs = createImage();\n        BufferedImage image = (BufferedImage) objs[1];\n        OutputStream os = new FileOutputStream(\"src/main/resources/static/picture/eb1ccd3d99794795bc99553b0b762e73.gif\");\n        ImageIO.write(image, \"png\", os);\n        os.close();\n    }\n\n}\n\n```\n2. 后台controller\n```javascript?linenums\n/* **********************************图片验证码************************************* */\n\t@RequestMapping(value = \"/BufferImage\")\n\tprotected void createImg(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException {\n\t\t//1.生成随机的验证码及图片\n\t\tObject[] objs = BufferImage.createImage();\n\t\t//2.将验证码存入session\n\t\tString imgcode = (String) objs[0];\n\t\tHttpSession session = req.getSession();\n\t\tsession.setAttribute(\"checkcode\", imgcode);\n\t\t//3.将图片输出给浏览器\n\t\tBufferedImage img = (BufferedImage) objs[1];\n\t\tres.setContentType(\"image/png\");\n\t\t//服务器自动创建输出流，目标指向浏览器\n\t\tOutputStream os = res.getOutputStream();\n\t\tImageIO.write(img, \"png\", os);\n\t\tos.close();\n\t}\n```\n3. 验证和前台方式不变\n","slug":"BookMark/学习笔记/Java中使用图片验证码 --菜鸟小回","published":1,"date":"2022-07-18T09:51:09.000Z","updated":"2022-07-18T09:51:09.000Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cl7ptszon001xaba52e81cj59","content":"<h1><span id=\"java中使用图片验证码\">Java中使用图片验证码</span></h1><hr>\n<h2><span id=\"一-第一种方式\">一、第一种方式</span></h2><ol>\n<li>工具类<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">@WebServlet(&quot;/BufferImage&quot;)<br>public class BufferImage extends HttpServlet &#123;<br>    public static final int WIDTH = 120;//生成图片的宽度<br>    public static final int HEIGHT = 30;//生成图片的高度<br>    public static final int WORDS_NUMBER = 4;//验证码中字符的个数<br>    <br>    @Override<br>    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;<br>        // TODO Auto-generated method stub<br>        this.doPost(req, resp);<br>    &#125;<br><br>    @Override<br>    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;<br>    \t<br>    \treq.setCharacterEncoding(&quot;utf-8&quot;);<br>\t\tresp.setContentType(&quot;text/html;charset=utf-8&quot;);<br>\t\t<br>    \t// TODO Auto-generated method stub<br>        String createTypeFlag = req.getParameter(&quot;createTypeFlag&quot;);//接收客户端传递的createTypeFlag标识<br>        //在内存中创建一张图片<br>        BufferedImage bi = new BufferedImage(WIDTH,HEIGHT,BufferedImage.TYPE_3BYTE_BGR);<br>        //得到图片<br>        Graphics g = bi.getGraphics();<br>        //设置图片的背景色<br>        setBackGround(g);<br>        //设置图片的边框<br>        setBorder(g);<br>        //在图片上画干扰线<br>        drawRandomLine(g);<br>        //在图片上放上随机字符<br>        String randomString = this.drawRandomNum((Graphics2D)g, createTypeFlag);<br>        System.out.println(randomString);<br>        //将随机数存在session中<br>        req.getSession().setAttribute(&quot;checkcode&quot;, randomString);<br>        <br>        //设置响应头通知浏览器以图片的形式打开<br>        resp.setContentType(&quot;image/jpeg&quot;);<br>        <br>        //设置响应头控制浏览器不要缓存<br>        resp.setDateHeader(&quot;expries&quot;, -1);<br>        resp.setHeader(&quot;Cache-Control&quot;, &quot;no-cache&quot;);<br>        resp.setHeader(&quot;Pragma&quot;, &quot;no-cache&quot;);<br>        <br>        //将图片传给浏览器<br>        ImageIO.write(bi, &quot;jpg&quot;, resp.getOutputStream());<br>    &#125;<br>    <br>    //设置图片背景色<br>    //@param g<br>    private void setBackGround(Graphics g) &#123;<br>        //设置颜色<br>        g.setColor(Color.WHITE);<br>        //填充区域<br>        g.fillRect(0, 0, WIDTH, HEIGHT);<br>    &#125;<br>    <br>    /*<br>     * 设置图片的边框<br>     * @param g<br>     * */<br>    <br>    private void setBorder(Graphics g) &#123;<br>        //设置边框颜色<br>        g.setColor(Color.BLUE);<br>        //边框区域<br>        g.drawRect(1, 1, WIDTH - 2, HEIGHT -2);<br>    &#125;<br>    <br>    /*<br>     * 在图片上画随机线条 <br>     * @param g<br>     * */<br>    private void drawRandomLine(Graphics g) &#123;<br>        //设置颜色<br>        g.setColor(Color.GREEN);<br>        //设置线条个数并画线<br>        for ( int i = 0 ; i &lt; 7 ; i++ ) &#123;<br>            int x1 = new Random().nextInt(WIDTH);<br>            int y1 = new Random().nextInt(HEIGHT);<br>            int x2 = new Random().nextInt(WIDTH);<br>            int y2 = new Random().nextInt(HEIGHT);<br>            g.drawLine(x1, y1, x2, y2);<br>        &#125;<br>    &#125;<br>    <br>    /*<br>     * 在图片上画随机字符<br>     * @param g<br>     * @param createTypeFlag<br>     * @return String<br>     * */<br>    private String drawRandomNum(Graphics g,String createTypeFlag) &#123;<br>        //设置颜色<br>        g.setColor(Color.BLUE);<br>        g.setFont(new Font(&quot;宋体&quot;,Font.BOLD,20));<br>        <br>        //数字字母的组合<br>        String baseNumLetter = &quot;0123456789ABCDEFGHJKLMNOPQRSTUVWXYZ&quot;;<br>        String baseNum = &quot;0123456789&quot;;<br>        String baseLetter = &quot;ABCDEFGHJKLMNOPQRSTUVWXYZ&quot;;<br>        if ( createTypeFlag != null  &amp;&amp; createTypeFlag.length() &gt; 0 ) &#123;<br>            if( createTypeFlag.equals(&quot;nl&quot;) ) &#123;<br>                //截取数字和字母的组合<br>                return createRandomChar((Graphics2D) g,baseNumLetter);<br>            &#125; else if ( createTypeFlag.equals(&quot;n&quot;) ) &#123;<br>                //截取数字的组合<br>                return createRandomChar((Graphics2D) g,baseNum);<br>            &#125; else if ( createTypeFlag.equals(&quot;l&quot;) ) &#123;<br>                //截取字母的组合<br>                return createRandomChar((Graphics2D) g,baseLetter);<br>            &#125;<br>        &#125; else &#123;<br>            //截取数字和字母的组合<br>            return createRandomChar((Graphics2D) g,baseNumLetter);<br>        &#125;<br>        return &quot;&quot;;<br>    &#125;<br>    <br>    /*<br>     * 创建随机字符<br>     * @param g<br>     * @param baseChar<br>     * @return String<br>     * */<br>    private String createRandomChar(Graphics2D g , String baseChar) &#123;<br>        StringBuffer b = new StringBuffer();<br>        int x = 5;<br>        String ch = &quot;&quot;;<br>        for ( int i = 0 ; i &lt; WORDS_NUMBER ; i++ ) &#123;<br>            //设置字体的旋转角度<br>            int degree = new Random().nextInt() % 30;<br>            ch = baseChar.charAt(new Random().nextInt(baseChar.length())) + &quot;&quot;;<br>            b.append(ch);<br>            <br>            //正向角度<br>            g.rotate(degree  * Math.PI / 180 , x,20);<br>            g.drawString(ch, x, 20);<br>            //反向角度<br>            g.rotate(-degree  * Math.PI / 180 , x,20);<br>            x+=30;<br>        &#125;<br>        return b.toString();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li>\n<li>后端<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">   @RequestMapping(value=&quot;/userLogin.do&quot;)<br><br>public void userLogin(String code,HttpSession session)&#123;<br>\tString cht=(String)session.getAttribute(&quot;checkcode&quot;);<br>\tif(code.equalsIgnoreCase(cht))&#123;<br>\t\tSystem.out.println(&quot;验证码正确&quot;);<br>\t&#125;<br>&#125;<br></code></pre></td></tr></table></figure></li>\n<li>前端<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">&lt;form&gt;<br>&lt;img src=&quot;BufferImage&quot; onclick=&quot;this.src=&#x27;BufferImage?&#x27;+new Date().getTime()&quot;&gt;看不清换一张&lt;br&gt;&lt;br&gt;<br>验证码： &lt;input type=&quot;text&quot; id=&quot;verify&quot; class=&quot;input-medium&quot; placeholder=&quot;验证码&quot;&gt;<br>&lt;input type=&quot;submit&quot; value=&quot;提交&quot;&gt;<br>&lt;/form&gt;<br></code></pre></td></tr></table></figure></li>\n</ol>\n<h2><span id=\"二-第二种方式spring-boot框架使用\">二、第二种方式（Spring Boot框架使用）</span></h2><ol>\n<li>工具类<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">package com.zhiyou.util;<br><br><br>import javax.imageio.ImageIO;<br>import java.awt.*;<br>import java.awt.image.BufferedImage;<br>import java.io.FileOutputStream;<br>import java.io.IOException;<br>import java.io.OutputStream;<br>import java.util.Random;<br><br>public final class BufferImage &#123;<br><br>    // 验证码字符集<br>    private static final char[] chars = &#123;<br>            &#x27;0&#x27;, &#x27;1&#x27;, &#x27;2&#x27;, &#x27;3&#x27;, &#x27;4&#x27;, &#x27;5&#x27;, &#x27;6&#x27;, &#x27;7&#x27;, &#x27;8&#x27;, &#x27;9&#x27;,<br>            &#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;, &#x27;D&#x27;, &#x27;E&#x27;, &#x27;F&#x27;, &#x27;G&#x27;, &#x27;H&#x27;, &#x27;I&#x27;, &#x27;J&#x27;, &#x27;K&#x27;, &#x27;L&#x27;, &#x27;M&#x27;, &#x27;N&#x27;,<br>            &#x27;O&#x27;, &#x27;P&#x27;, &#x27;Q&#x27;, &#x27;R&#x27;, &#x27;S&#x27;, &#x27;T&#x27;, &#x27;U&#x27;, &#x27;V&#x27;, &#x27;W&#x27;, &#x27;X&#x27;, &#x27;Y&#x27;, &#x27;Z&#x27;&#125;;<br>    // 字符数量<br>    private static final int SIZE = 4;<br>    // 干扰线数量<br>    private static final int LINES = 8;<br>    // 宽度<br>    private static final int WIDTH = 100;<br>    // 高度<br>    private static final int HEIGHT = 32;<br>    // 字体大小<br>    private static final int FONT_SIZE = 25;<br><br>    /**<br>     * 生成随机验证码及图片<br>     * 数组中[验证码，图片]<br>     */<br>    public static Object[] createImage() &#123;<br>        StringBuffer sb = new StringBuffer();<br>        // 1.创建空白图片<br>        BufferedImage image = new BufferedImage(<br>                WIDTH, HEIGHT, BufferedImage.TYPE_INT_RGB);<br>        // 2.获取图片画笔<br>        Graphics graphic = image.getGraphics();<br>        // 3.设置画笔颜色<br>        graphic.setColor(new Color(216, 172, 203, 241));<br>        // 4.绘制矩形背景<br>        graphic.fillRect(0, 0, WIDTH, HEIGHT);<br><br>        // 5.画随机字符<br>        Random ran = new Random();<br>        for (int i = 0; i &lt;SIZE; i++) &#123;<br>            // 取随机字符索引<br>            int n = ran.nextInt(chars.length);<br>            // 设置随机颜色<br>            graphic.setColor(getRandomColor());<br>            // 设置字体大小<br>            graphic.setFont(new Font(<br>                    null, Font.BOLD + Font.ITALIC, FONT_SIZE));<br>            // 画字符<br>            graphic.drawString(<br>                    chars[n] + &quot;&quot;, i * WIDTH / SIZE, HEIGHT/2+HEIGHT/8);<br>            // 记录字符<br>            sb.append(chars[n]);<br>        &#125;<br>        // 6.画干扰线<br>        for (int i = 0; i &lt; LINES; i++) &#123;<br><br>            graphic.setColor(getRandomColor());<br>            // 随机画线<br>            graphic.drawLine(ran.nextInt(WIDTH), ran.nextInt(HEIGHT),<br>                    ran.nextInt(WIDTH), ran.nextInt(HEIGHT));<br>        &#125;<br>        // 7.返回验证码和图片<br>        return new Object[]&#123;sb.toString(), image&#125;;<br>    &#125;<br><br>    /**<br>     * 随机取色<br>     */<br>    public static Color getRandomColor() &#123;<br>        Random ran = new Random();<br>        Color color = new Color(ran.nextInt(256),<br>                ran.nextInt(256), ran.nextInt(256));<br>        return color;<br>    &#125;<br><br>    public static void main(String[] args) throws IOException &#123;<br>        Object[] objs = createImage();<br>        BufferedImage image = (BufferedImage) objs[1];<br>        OutputStream os = new FileOutputStream(&quot;src/main/resources/static/picture/eb1ccd3d99794795bc99553b0b762e73.gif&quot;);<br>        ImageIO.write(image, &quot;png&quot;, os);<br>        os.close();<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure></li>\n<li>后台controller<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">/* **********************************图片验证码************************************* */<br>\t@RequestMapping(value = &quot;/BufferImage&quot;)<br>\tprotected void createImg(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException &#123;<br>\t\t//1.生成随机的验证码及图片<br>\t\tObject[] objs = BufferImage.createImage();<br>\t\t//2.将验证码存入session<br>\t\tString imgcode = (String) objs[0];<br>\t\tHttpSession session = req.getSession();<br>\t\tsession.setAttribute(&quot;checkcode&quot;, imgcode);<br>\t\t//3.将图片输出给浏览器<br>\t\tBufferedImage img = (BufferedImage) objs[1];<br>\t\tres.setContentType(&quot;image/png&quot;);<br>\t\t//服务器自动创建输出流，目标指向浏览器<br>\t\tOutputStream os = res.getOutputStream();<br>\t\tImageIO.write(img, &quot;png&quot;, os);<br>\t\tos.close();<br>\t&#125;<br></code></pre></td></tr></table></figure></li>\n<li>验证和前台方式不变</li>\n</ol>\n","site":{"data":{}},"wordcount":7557,"excerpt":"","more":"<h1 id=\"Java中使用图片验证码\"><a href=\"#Java中使用图片验证码\" class=\"headerlink\" title=\"Java中使用图片验证码\"></a>Java中使用图片验证码</h1><hr>\n<h2 id=\"一、第一种方式\"><a href=\"#一、第一种方式\" class=\"headerlink\" title=\"一、第一种方式\"></a>一、第一种方式</h2><ol>\n<li>工具类<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">@WebServlet(&quot;/BufferImage&quot;)<br>public class BufferImage extends HttpServlet &#123;<br>    public static final int WIDTH = 120;//生成图片的宽度<br>    public static final int HEIGHT = 30;//生成图片的高度<br>    public static final int WORDS_NUMBER = 4;//验证码中字符的个数<br>    <br>    @Override<br>    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;<br>        // TODO Auto-generated method stub<br>        this.doPost(req, resp);<br>    &#125;<br><br>    @Override<br>    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;<br>    \t<br>    \treq.setCharacterEncoding(&quot;utf-8&quot;);<br>\t\tresp.setContentType(&quot;text/html;charset=utf-8&quot;);<br>\t\t<br>    \t// TODO Auto-generated method stub<br>        String createTypeFlag = req.getParameter(&quot;createTypeFlag&quot;);//接收客户端传递的createTypeFlag标识<br>        //在内存中创建一张图片<br>        BufferedImage bi = new BufferedImage(WIDTH,HEIGHT,BufferedImage.TYPE_3BYTE_BGR);<br>        //得到图片<br>        Graphics g = bi.getGraphics();<br>        //设置图片的背景色<br>        setBackGround(g);<br>        //设置图片的边框<br>        setBorder(g);<br>        //在图片上画干扰线<br>        drawRandomLine(g);<br>        //在图片上放上随机字符<br>        String randomString = this.drawRandomNum((Graphics2D)g, createTypeFlag);<br>        System.out.println(randomString);<br>        //将随机数存在session中<br>        req.getSession().setAttribute(&quot;checkcode&quot;, randomString);<br>        <br>        //设置响应头通知浏览器以图片的形式打开<br>        resp.setContentType(&quot;image/jpeg&quot;);<br>        <br>        //设置响应头控制浏览器不要缓存<br>        resp.setDateHeader(&quot;expries&quot;, -1);<br>        resp.setHeader(&quot;Cache-Control&quot;, &quot;no-cache&quot;);<br>        resp.setHeader(&quot;Pragma&quot;, &quot;no-cache&quot;);<br>        <br>        //将图片传给浏览器<br>        ImageIO.write(bi, &quot;jpg&quot;, resp.getOutputStream());<br>    &#125;<br>    <br>    //设置图片背景色<br>    //@param g<br>    private void setBackGround(Graphics g) &#123;<br>        //设置颜色<br>        g.setColor(Color.WHITE);<br>        //填充区域<br>        g.fillRect(0, 0, WIDTH, HEIGHT);<br>    &#125;<br>    <br>    /*<br>     * 设置图片的边框<br>     * @param g<br>     * */<br>    <br>    private void setBorder(Graphics g) &#123;<br>        //设置边框颜色<br>        g.setColor(Color.BLUE);<br>        //边框区域<br>        g.drawRect(1, 1, WIDTH - 2, HEIGHT -2);<br>    &#125;<br>    <br>    /*<br>     * 在图片上画随机线条 <br>     * @param g<br>     * */<br>    private void drawRandomLine(Graphics g) &#123;<br>        //设置颜色<br>        g.setColor(Color.GREEN);<br>        //设置线条个数并画线<br>        for ( int i = 0 ; i &lt; 7 ; i++ ) &#123;<br>            int x1 = new Random().nextInt(WIDTH);<br>            int y1 = new Random().nextInt(HEIGHT);<br>            int x2 = new Random().nextInt(WIDTH);<br>            int y2 = new Random().nextInt(HEIGHT);<br>            g.drawLine(x1, y1, x2, y2);<br>        &#125;<br>    &#125;<br>    <br>    /*<br>     * 在图片上画随机字符<br>     * @param g<br>     * @param createTypeFlag<br>     * @return String<br>     * */<br>    private String drawRandomNum(Graphics g,String createTypeFlag) &#123;<br>        //设置颜色<br>        g.setColor(Color.BLUE);<br>        g.setFont(new Font(&quot;宋体&quot;,Font.BOLD,20));<br>        <br>        //数字字母的组合<br>        String baseNumLetter = &quot;0123456789ABCDEFGHJKLMNOPQRSTUVWXYZ&quot;;<br>        String baseNum = &quot;0123456789&quot;;<br>        String baseLetter = &quot;ABCDEFGHJKLMNOPQRSTUVWXYZ&quot;;<br>        if ( createTypeFlag != null  &amp;&amp; createTypeFlag.length() &gt; 0 ) &#123;<br>            if( createTypeFlag.equals(&quot;nl&quot;) ) &#123;<br>                //截取数字和字母的组合<br>                return createRandomChar((Graphics2D) g,baseNumLetter);<br>            &#125; else if ( createTypeFlag.equals(&quot;n&quot;) ) &#123;<br>                //截取数字的组合<br>                return createRandomChar((Graphics2D) g,baseNum);<br>            &#125; else if ( createTypeFlag.equals(&quot;l&quot;) ) &#123;<br>                //截取字母的组合<br>                return createRandomChar((Graphics2D) g,baseLetter);<br>            &#125;<br>        &#125; else &#123;<br>            //截取数字和字母的组合<br>            return createRandomChar((Graphics2D) g,baseNumLetter);<br>        &#125;<br>        return &quot;&quot;;<br>    &#125;<br>    <br>    /*<br>     * 创建随机字符<br>     * @param g<br>     * @param baseChar<br>     * @return String<br>     * */<br>    private String createRandomChar(Graphics2D g , String baseChar) &#123;<br>        StringBuffer b = new StringBuffer();<br>        int x = 5;<br>        String ch = &quot;&quot;;<br>        for ( int i = 0 ; i &lt; WORDS_NUMBER ; i++ ) &#123;<br>            //设置字体的旋转角度<br>            int degree = new Random().nextInt() % 30;<br>            ch = baseChar.charAt(new Random().nextInt(baseChar.length())) + &quot;&quot;;<br>            b.append(ch);<br>            <br>            //正向角度<br>            g.rotate(degree  * Math.PI / 180 , x,20);<br>            g.drawString(ch, x, 20);<br>            //反向角度<br>            g.rotate(-degree  * Math.PI / 180 , x,20);<br>            x+=30;<br>        &#125;<br>        return b.toString();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li>\n<li>后端<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">   @RequestMapping(value=&quot;/userLogin.do&quot;)<br><br>public void userLogin(String code,HttpSession session)&#123;<br>\tString cht=(String)session.getAttribute(&quot;checkcode&quot;);<br>\tif(code.equalsIgnoreCase(cht))&#123;<br>\t\tSystem.out.println(&quot;验证码正确&quot;);<br>\t&#125;<br>&#125;<br></code></pre></td></tr></table></figure></li>\n<li>前端<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">&lt;form&gt;<br>&lt;img src=&quot;BufferImage&quot; onclick=&quot;this.src=&#x27;BufferImage?&#x27;+new Date().getTime()&quot;&gt;看不清换一张&lt;br&gt;&lt;br&gt;<br>验证码： &lt;input type=&quot;text&quot; id=&quot;verify&quot; class=&quot;input-medium&quot; placeholder=&quot;验证码&quot;&gt;<br>&lt;input type=&quot;submit&quot; value=&quot;提交&quot;&gt;<br>&lt;/form&gt;<br></code></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"二、第二种方式（Spring-Boot框架使用）\"><a href=\"#二、第二种方式（Spring-Boot框架使用）\" class=\"headerlink\" title=\"二、第二种方式（Spring Boot框架使用）\"></a>二、第二种方式（Spring Boot框架使用）</h2><ol>\n<li>工具类<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">package com.zhiyou.util;<br><br><br>import javax.imageio.ImageIO;<br>import java.awt.*;<br>import java.awt.image.BufferedImage;<br>import java.io.FileOutputStream;<br>import java.io.IOException;<br>import java.io.OutputStream;<br>import java.util.Random;<br><br>public final class BufferImage &#123;<br><br>    // 验证码字符集<br>    private static final char[] chars = &#123;<br>            &#x27;0&#x27;, &#x27;1&#x27;, &#x27;2&#x27;, &#x27;3&#x27;, &#x27;4&#x27;, &#x27;5&#x27;, &#x27;6&#x27;, &#x27;7&#x27;, &#x27;8&#x27;, &#x27;9&#x27;,<br>            &#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;, &#x27;D&#x27;, &#x27;E&#x27;, &#x27;F&#x27;, &#x27;G&#x27;, &#x27;H&#x27;, &#x27;I&#x27;, &#x27;J&#x27;, &#x27;K&#x27;, &#x27;L&#x27;, &#x27;M&#x27;, &#x27;N&#x27;,<br>            &#x27;O&#x27;, &#x27;P&#x27;, &#x27;Q&#x27;, &#x27;R&#x27;, &#x27;S&#x27;, &#x27;T&#x27;, &#x27;U&#x27;, &#x27;V&#x27;, &#x27;W&#x27;, &#x27;X&#x27;, &#x27;Y&#x27;, &#x27;Z&#x27;&#125;;<br>    // 字符数量<br>    private static final int SIZE = 4;<br>    // 干扰线数量<br>    private static final int LINES = 8;<br>    // 宽度<br>    private static final int WIDTH = 100;<br>    // 高度<br>    private static final int HEIGHT = 32;<br>    // 字体大小<br>    private static final int FONT_SIZE = 25;<br><br>    /**<br>     * 生成随机验证码及图片<br>     * 数组中[验证码，图片]<br>     */<br>    public static Object[] createImage() &#123;<br>        StringBuffer sb = new StringBuffer();<br>        // 1.创建空白图片<br>        BufferedImage image = new BufferedImage(<br>                WIDTH, HEIGHT, BufferedImage.TYPE_INT_RGB);<br>        // 2.获取图片画笔<br>        Graphics graphic = image.getGraphics();<br>        // 3.设置画笔颜色<br>        graphic.setColor(new Color(216, 172, 203, 241));<br>        // 4.绘制矩形背景<br>        graphic.fillRect(0, 0, WIDTH, HEIGHT);<br><br>        // 5.画随机字符<br>        Random ran = new Random();<br>        for (int i = 0; i &lt;SIZE; i++) &#123;<br>            // 取随机字符索引<br>            int n = ran.nextInt(chars.length);<br>            // 设置随机颜色<br>            graphic.setColor(getRandomColor());<br>            // 设置字体大小<br>            graphic.setFont(new Font(<br>                    null, Font.BOLD + Font.ITALIC, FONT_SIZE));<br>            // 画字符<br>            graphic.drawString(<br>                    chars[n] + &quot;&quot;, i * WIDTH / SIZE, HEIGHT/2+HEIGHT/8);<br>            // 记录字符<br>            sb.append(chars[n]);<br>        &#125;<br>        // 6.画干扰线<br>        for (int i = 0; i &lt; LINES; i++) &#123;<br><br>            graphic.setColor(getRandomColor());<br>            // 随机画线<br>            graphic.drawLine(ran.nextInt(WIDTH), ran.nextInt(HEIGHT),<br>                    ran.nextInt(WIDTH), ran.nextInt(HEIGHT));<br>        &#125;<br>        // 7.返回验证码和图片<br>        return new Object[]&#123;sb.toString(), image&#125;;<br>    &#125;<br><br>    /**<br>     * 随机取色<br>     */<br>    public static Color getRandomColor() &#123;<br>        Random ran = new Random();<br>        Color color = new Color(ran.nextInt(256),<br>                ran.nextInt(256), ran.nextInt(256));<br>        return color;<br>    &#125;<br><br>    public static void main(String[] args) throws IOException &#123;<br>        Object[] objs = createImage();<br>        BufferedImage image = (BufferedImage) objs[1];<br>        OutputStream os = new FileOutputStream(&quot;src/main/resources/static/picture/eb1ccd3d99794795bc99553b0b762e73.gif&quot;);<br>        ImageIO.write(image, &quot;png&quot;, os);<br>        os.close();<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure></li>\n<li>后台controller<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">/* **********************************图片验证码************************************* */<br>\t@RequestMapping(value = &quot;/BufferImage&quot;)<br>\tprotected void createImg(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException &#123;<br>\t\t//1.生成随机的验证码及图片<br>\t\tObject[] objs = BufferImage.createImage();<br>\t\t//2.将验证码存入session<br>\t\tString imgcode = (String) objs[0];<br>\t\tHttpSession session = req.getSession();<br>\t\tsession.setAttribute(&quot;checkcode&quot;, imgcode);<br>\t\t//3.将图片输出给浏览器<br>\t\tBufferedImage img = (BufferedImage) objs[1];<br>\t\tres.setContentType(&quot;image/png&quot;);<br>\t\t//服务器自动创建输出流，目标指向浏览器<br>\t\tOutputStream os = res.getOutputStream();<br>\t\tImageIO.write(img, &quot;png&quot;, os);<br>\t\tos.close();<br>\t&#125;<br></code></pre></td></tr></table></figure></li>\n<li>验证和前台方式不变</li>\n</ol>\n"},{"_content":"# 项目测试环境启动教程\n1. 访问地址`192.168.50.96:8000`，账号`root`，密码`root`\n ![image-20220721145059799](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721145059799.png)\n2. 依次启动1,2,3\n ![image-20220721145112088](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721145112088.png)\n3. 查看\"构建执行状态\"\n![image-20220721145124170](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721145124170.png)\n4. 连续点击此构建连接可看到\"控制台输出\"\n![image-20220721145133619](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721145133619.png)\n5. 看到地球图标即启动成功\n![image-20220721145145625](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721145145625.png)\n6. mes启动同理，启动mes的ui和java项目\n ![image-20220721145155219](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721145155219.png)","source":"_posts/BookMark/学习笔记/Jenkins项目启动教程.md","raw":"# 项目测试环境启动教程\n1. 访问地址`192.168.50.96:8000`，账号`root`，密码`root`\n ![image-20220721145059799](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721145059799.png)\n2. 依次启动1,2,3\n ![image-20220721145112088](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721145112088.png)\n3. 查看\"构建执行状态\"\n![image-20220721145124170](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721145124170.png)\n4. 连续点击此构建连接可看到\"控制台输出\"\n![image-20220721145133619](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721145133619.png)\n5. 看到地球图标即启动成功\n![image-20220721145145625](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721145145625.png)\n6. mes启动同理，启动mes的ui和java项目\n ![image-20220721145155219](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721145155219.png)","slug":"BookMark/学习笔记/Jenkins项目启动教程","published":1,"date":"2022-07-21T06:53:01.000Z","updated":"2022-09-01T10:02:40.569Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cl7ptszon001yaba50naibr02","content":"<h1><span id=\"项目测试环境启动教程\">项目测试环境启动教程</span></h1><ol>\n<li>访问地址<code>192.168.50.96:8000</code>，账号<code>root</code>，密码<code>root</code><br> <img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721145059799.png\" alt=\"image-20220721145059799\"></li>\n<li>依次启动1,2,3<br> <img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721145112088.png\" alt=\"image-20220721145112088\"></li>\n<li>查看”构建执行状态”<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721145124170.png\" alt=\"image-20220721145124170\"></li>\n<li>连续点击此构建连接可看到”控制台输出”<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721145133619.png\" alt=\"image-20220721145133619\"></li>\n<li>看到地球图标即启动成功<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721145145625.png\" alt=\"image-20220721145145625\"></li>\n<li>mes启动同理，启动mes的ui和java项目<br> <img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721145155219.png\" alt=\"image-20220721145155219\"></li>\n</ol>\n","site":{"data":{}},"wordcount":118,"excerpt":"","more":"<h1 id=\"项目测试环境启动教程\"><a href=\"#项目测试环境启动教程\" class=\"headerlink\" title=\"项目测试环境启动教程\"></a>项目测试环境启动教程</h1><ol>\n<li>访问地址<code>192.168.50.96:8000</code>，账号<code>root</code>，密码<code>root</code><br> <img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721145059799.png\" alt=\"image-20220721145059799\"></li>\n<li>依次启动1,2,3<br> <img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721145112088.png\" alt=\"image-20220721145112088\"></li>\n<li>查看”构建执行状态”<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721145124170.png\" alt=\"image-20220721145124170\"></li>\n<li>连续点击此构建连接可看到”控制台输出”<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721145133619.png\" alt=\"image-20220721145133619\"></li>\n<li>看到地球图标即启动成功<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721145145625.png\" alt=\"image-20220721145145625\"></li>\n<li>mes启动同理，启动mes的ui和java项目<br> <img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721145155219.png\" alt=\"image-20220721145155219\"></li>\n</ol>\n"},{"_content":"# java中使用fastDFS上传图片(前端ajax+后端ssm)\n---\n+ 准备：下载jar包\n链接: [fastDFS_client](https://pan.baidu.com/s/1-GGIE1lTqO5L1J4xfnwhIA&shfl=shareset) \n提取码: 63m7 \n\n---\n1. 配置maven环境变量，与jdk配置方法相同。不再赘述：[参考Windows中maven配置](https://jingyan.baidu.com/article/ce09321ba734f02bff858fcf.html)\n2. 找到你下载的jar包，直接在该路径下输入cmd回车\n![image-20220721145019137](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721145019137.png)\n3. 打包\n```javascript?linenums\n//打包命令\nmvn install:install-file -DgroupId=org.csource.fastdfs -DartifactId=fastdfs  -Dversion=1.2 -Dpackaging=jar -Dfile=fastdfs_client_v1.20.jar\n```\n![image-20220721145026074](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721145026074.png)\n\n4. 引入jar包\n```javascript?linenums\n//maven项目jar包依赖\n<!-- 文件服务器 -->\n<dependency>\n\t<groupId>org.csource.fastdfs</groupId>\n\t<artifactId>fastdfs</artifactId>\n\t<version>1.2</version>\n</dependency>\n```\n5. 加入配置文件，命名：“fastdfs.properties”，注意你的ip和端口\n```javascript?linenums\ncharset=UTF-8\ntracker_server=120.27.244.176:22122\nhttp.tracker_http_port=80\n```\n![image-20220721145036597](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721145036597.png)\n\n6. 项目加入上传图片工具类\n```javascript?linenums\npublic class UploadImg {\n\tpublic static String imgUpload(MultipartFile imgFile) throws FileNotFoundException, IOException, Exception{\n\t\t//1.加载配置文件ip端口\n\t\tString properties_path = Thread.currentThread().getContextClassLoader().getResource(\"fastdfs.properties\").getPath();\n\t\tSystem.out.println(properties_path);\n\t\tClientGlobal.init(properties_path);\n\t\t//2.创建管理端对象\n\t\tTrackerClient trackerClient=new TrackerClient();\n\t\t//3.获取连接\n\t\tTrackerServer trackerServer=trackerClient.getConnection();\n\t\t//4.创建储存端对象\n\t\tStorageClient1 storageClient1=new StorageClient1(trackerServer, null);\n\t\t//5.创建文件属性-对象数组\n\t\tNameValuePair[] meta_list=new NameValuePair[1];\n\t\tmeta_list[0]=new NameValuePair(\"filename\",imgFile.getOriginalFilename());\n\t\t//6.上传文件\n\t\tString path=storageClient1.upload_file1(imgFile.getBytes(), \"jpg\", meta_list);\n\t\t//拼接fastdfs的IP前缀得到图片真实地址，注意修改你的ip\n\t\tpath=\"http://120.27.244.176/\"+path;\n\t\t\n\t\tSystem.out.println(path);\n\t\t//返回一个真实地址\t\t\t\n\t\treturn path;\n\t}\n}\n\n```\n7. 前端html\n```javascript?linenums\n//ajax\n//上传图片\n $(\"#m_image_addr\").live(\"change\",function(){\n\t    //注意这里不能写错。。。\n\t    var file=$(\"#m_image_addr\")[0].files[0];\n\t    var formData = new FormData();\n\t    formData.append(\"m_image_addr\",file);\n\t    //对文件类型进行判断\n\t    var index=file.name.lastIndexOf(\".\");\n\t    var type=file.name.substring(index);\n\t    if(type!=\".jpg\"&&type!=\".png\"){\n\t        alert(\"只能上传jpg和png格式的图片！！\");\n\t        return;\n\t    }\n\t    $.ajax({\n\t        url:\"../upload.do\",\n\t        data:formData,\n\t        dataType:\"text\",\n\t        type:\"post\",\n\t        //这两个属性必须设置！！！！\n\t        contentType: false,\n\t        processData: false, //设置为true时，ajax提交的时候不会序列化data，而是直接使用data\n\t        success:function (path) {\n\t   \t\t\t$(\"#yulan\").attr(\"src\",path);\n\t        }\n\t    })\t\n})\n//form\n<!--enctype=\"multipart/form-data\"不可省略-->\n<form id=\"fm1\" class=\"definewidth m20\" enctype=\"multipart/form-data\">\n    <table class=\"table table-bordered table-hover definewidth m10\">\n        <tr>\n            <td width=\"10%\" class=\"tableleft\">图片</td>\n            <td>\n                <input type=\"file\" id=\"m_image_addr\"  name=\"file\" />\n                <image id=\"yulan\" width=\"100px\" height=\"80px\" src=\"\"></image>\n            </td>\n        </tr>\n    </table>\n</form>\n    \n```\n8. 后端controller\n```javascript?linenums\n@RequestMapping(value=\"/upload.do\",method={RequestMethod.POST,RequestMethod.GET})\n@ResponseBody\npublic String upload(MultipartFile m_image_addr) throws Exception{\n\treturn UploadImg.imgUpload(m_image_addr);\n}\n```\n\n9. 启动项目测试上传，图片自动显示到预览框\n","source":"_posts/BookMark/学习笔记/java中使用fastDFS上传图片(前端ajax+后端ssm) --菜鸟小回.md","raw":"# java中使用fastDFS上传图片(前端ajax+后端ssm)\n---\n+ 准备：下载jar包\n链接: [fastDFS_client](https://pan.baidu.com/s/1-GGIE1lTqO5L1J4xfnwhIA&shfl=shareset) \n提取码: 63m7 \n\n---\n1. 配置maven环境变量，与jdk配置方法相同。不再赘述：[参考Windows中maven配置](https://jingyan.baidu.com/article/ce09321ba734f02bff858fcf.html)\n2. 找到你下载的jar包，直接在该路径下输入cmd回车\n![image-20220721145019137](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721145019137.png)\n3. 打包\n```javascript?linenums\n//打包命令\nmvn install:install-file -DgroupId=org.csource.fastdfs -DartifactId=fastdfs  -Dversion=1.2 -Dpackaging=jar -Dfile=fastdfs_client_v1.20.jar\n```\n![image-20220721145026074](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721145026074.png)\n\n4. 引入jar包\n```javascript?linenums\n//maven项目jar包依赖\n<!-- 文件服务器 -->\n<dependency>\n\t<groupId>org.csource.fastdfs</groupId>\n\t<artifactId>fastdfs</artifactId>\n\t<version>1.2</version>\n</dependency>\n```\n5. 加入配置文件，命名：“fastdfs.properties”，注意你的ip和端口\n```javascript?linenums\ncharset=UTF-8\ntracker_server=120.27.244.176:22122\nhttp.tracker_http_port=80\n```\n![image-20220721145036597](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721145036597.png)\n\n6. 项目加入上传图片工具类\n```javascript?linenums\npublic class UploadImg {\n\tpublic static String imgUpload(MultipartFile imgFile) throws FileNotFoundException, IOException, Exception{\n\t\t//1.加载配置文件ip端口\n\t\tString properties_path = Thread.currentThread().getContextClassLoader().getResource(\"fastdfs.properties\").getPath();\n\t\tSystem.out.println(properties_path);\n\t\tClientGlobal.init(properties_path);\n\t\t//2.创建管理端对象\n\t\tTrackerClient trackerClient=new TrackerClient();\n\t\t//3.获取连接\n\t\tTrackerServer trackerServer=trackerClient.getConnection();\n\t\t//4.创建储存端对象\n\t\tStorageClient1 storageClient1=new StorageClient1(trackerServer, null);\n\t\t//5.创建文件属性-对象数组\n\t\tNameValuePair[] meta_list=new NameValuePair[1];\n\t\tmeta_list[0]=new NameValuePair(\"filename\",imgFile.getOriginalFilename());\n\t\t//6.上传文件\n\t\tString path=storageClient1.upload_file1(imgFile.getBytes(), \"jpg\", meta_list);\n\t\t//拼接fastdfs的IP前缀得到图片真实地址，注意修改你的ip\n\t\tpath=\"http://120.27.244.176/\"+path;\n\t\t\n\t\tSystem.out.println(path);\n\t\t//返回一个真实地址\t\t\t\n\t\treturn path;\n\t}\n}\n\n```\n7. 前端html\n```javascript?linenums\n//ajax\n//上传图片\n $(\"#m_image_addr\").live(\"change\",function(){\n\t    //注意这里不能写错。。。\n\t    var file=$(\"#m_image_addr\")[0].files[0];\n\t    var formData = new FormData();\n\t    formData.append(\"m_image_addr\",file);\n\t    //对文件类型进行判断\n\t    var index=file.name.lastIndexOf(\".\");\n\t    var type=file.name.substring(index);\n\t    if(type!=\".jpg\"&&type!=\".png\"){\n\t        alert(\"只能上传jpg和png格式的图片！！\");\n\t        return;\n\t    }\n\t    $.ajax({\n\t        url:\"../upload.do\",\n\t        data:formData,\n\t        dataType:\"text\",\n\t        type:\"post\",\n\t        //这两个属性必须设置！！！！\n\t        contentType: false,\n\t        processData: false, //设置为true时，ajax提交的时候不会序列化data，而是直接使用data\n\t        success:function (path) {\n\t   \t\t\t$(\"#yulan\").attr(\"src\",path);\n\t        }\n\t    })\t\n})\n//form\n<!--enctype=\"multipart/form-data\"不可省略-->\n<form id=\"fm1\" class=\"definewidth m20\" enctype=\"multipart/form-data\">\n    <table class=\"table table-bordered table-hover definewidth m10\">\n        <tr>\n            <td width=\"10%\" class=\"tableleft\">图片</td>\n            <td>\n                <input type=\"file\" id=\"m_image_addr\"  name=\"file\" />\n                <image id=\"yulan\" width=\"100px\" height=\"80px\" src=\"\"></image>\n            </td>\n        </tr>\n    </table>\n</form>\n    \n```\n8. 后端controller\n```javascript?linenums\n@RequestMapping(value=\"/upload.do\",method={RequestMethod.POST,RequestMethod.GET})\n@ResponseBody\npublic String upload(MultipartFile m_image_addr) throws Exception{\n\treturn UploadImg.imgUpload(m_image_addr);\n}\n```\n\n9. 启动项目测试上传，图片自动显示到预览框\n","slug":"BookMark/学习笔记/java中使用fastDFS上传图片(前端ajax+后端ssm) --菜鸟小回","published":1,"date":"2022-07-25T05:51:38.000Z","updated":"2022-09-01T10:02:40.507Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cl7ptszoo0020aba54w98f3zw","content":"<h1><span id=\"java中使用fastdfs上传图片前端ajax后端ssm\">java中使用fastDFS上传图片(前端ajax+后端ssm)</span></h1><hr>\n<ul>\n<li>准备：下载jar包<br>链接: <a href=\"https://pan.baidu.com/s/1-GGIE1lTqO5L1J4xfnwhIA&shfl=shareset\">fastDFS_client</a><br>提取码: 63m7</li>\n</ul>\n<hr>\n<ol>\n<li><p>配置maven环境变量，与jdk配置方法相同。不再赘述：<a href=\"https://jingyan.baidu.com/article/ce09321ba734f02bff858fcf.html\">参考Windows中maven配置</a></p>\n</li>\n<li><p>找到你下载的jar包，直接在该路径下输入cmd回车<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721145019137.png\" alt=\"image-20220721145019137\"></p>\n</li>\n<li><p>打包</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">//打包命令<br>mvn install:install-file -DgroupId=org.csource.fastdfs -DartifactId=fastdfs  -Dversion=1.2 -Dpackaging=jar -Dfile=fastdfs_client_v1.20.jar<br></code></pre></td></tr></table></figure>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721145026074.png\" alt=\"image-20220721145026074\"></p>\n</li>\n<li><p>引入jar包</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">//maven项目jar包依赖<br>&lt;!-- 文件服务器 --&gt;<br>&lt;dependency&gt;<br>\t&lt;groupId&gt;org.csource.fastdfs&lt;/groupId&gt;<br>\t&lt;artifactId&gt;fastdfs&lt;/artifactId&gt;<br>\t&lt;version&gt;1.2&lt;/version&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure></li>\n<li><p>加入配置文件，命名：“fastdfs.properties”，注意你的ip和端口</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">charset=UTF-8<br>tracker_server=120.27.244.176:22122<br>http.tracker_http_port=80<br></code></pre></td></tr></table></figure>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721145036597.png\" alt=\"image-20220721145036597\"></p>\n</li>\n<li><p>项目加入上传图片工具类</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">public class UploadImg &#123;<br>\tpublic static String imgUpload(MultipartFile imgFile) throws FileNotFoundException, IOException, Exception&#123;<br>\t\t//1.加载配置文件ip端口<br>\t\tString properties_path = Thread.currentThread().getContextClassLoader().getResource(&quot;fastdfs.properties&quot;).getPath();<br>\t\tSystem.out.println(properties_path);<br>\t\tClientGlobal.init(properties_path);<br>\t\t//2.创建管理端对象<br>\t\tTrackerClient trackerClient=new TrackerClient();<br>\t\t//3.获取连接<br>\t\tTrackerServer trackerServer=trackerClient.getConnection();<br>\t\t//4.创建储存端对象<br>\t\tStorageClient1 storageClient1=new StorageClient1(trackerServer, null);<br>\t\t//5.创建文件属性-对象数组<br>\t\tNameValuePair[] meta_list=new NameValuePair[1];<br>\t\tmeta_list[0]=new NameValuePair(&quot;filename&quot;,imgFile.getOriginalFilename());<br>\t\t//6.上传文件<br>\t\tString path=storageClient1.upload_file1(imgFile.getBytes(), &quot;jpg&quot;, meta_list);<br>\t\t//拼接fastdfs的IP前缀得到图片真实地址，注意修改你的ip<br>\t\tpath=&quot;http://120.27.244.176/&quot;+path;<br>\t\t<br>\t\tSystem.out.println(path);<br>\t\t//返回一个真实地址\t\t\t<br>\t\treturn path;<br>\t&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></li>\n<li><p>前端html</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">//ajax<br>//上传图片<br> $(&quot;#m_image_addr&quot;).live(&quot;change&quot;,function()&#123;<br>\t    //注意这里不能写错。。。<br>\t    var file=$(&quot;#m_image_addr&quot;)[0].files[0];<br>\t    var formData = new FormData();<br>\t    formData.append(&quot;m_image_addr&quot;,file);<br>\t    //对文件类型进行判断<br>\t    var index=file.name.lastIndexOf(&quot;.&quot;);<br>\t    var type=file.name.substring(index);<br>\t    if(type!=&quot;.jpg&quot;&amp;&amp;type!=&quot;.png&quot;)&#123;<br>\t        alert(&quot;只能上传jpg和png格式的图片！！&quot;);<br>\t        return;<br>\t    &#125;<br>\t    $.ajax(&#123;<br>\t        url:&quot;../upload.do&quot;,<br>\t        data:formData,<br>\t        dataType:&quot;text&quot;,<br>\t        type:&quot;post&quot;,<br>\t        //这两个属性必须设置！！！！<br>\t        contentType: false,<br>\t        processData: false, //设置为true时，ajax提交的时候不会序列化data，而是直接使用data<br>\t        success:function (path) &#123;<br>\t   \t\t\t$(&quot;#yulan&quot;).attr(&quot;src&quot;,path);<br>\t        &#125;<br>\t    &#125;)\t<br>&#125;)<br>//form<br>&lt;!--enctype=&quot;multipart/form-data&quot;不可省略--&gt;<br>&lt;form id=&quot;fm1&quot; class=&quot;definewidth m20&quot; enctype=&quot;multipart/form-data&quot;&gt;<br>    &lt;table class=&quot;table table-bordered table-hover definewidth m10&quot;&gt;<br>        &lt;tr&gt;<br>            &lt;td width=&quot;10%&quot; class=&quot;tableleft&quot;&gt;图片&lt;/td&gt;<br>            &lt;td&gt;<br>                &lt;input type=&quot;file&quot; id=&quot;m_image_addr&quot;  name=&quot;file&quot; /&gt;<br>                &lt;image id=&quot;yulan&quot; width=&quot;100px&quot; height=&quot;80px&quot; src=&quot;&quot;&gt;&lt;/image&gt;<br>            &lt;/td&gt;<br>        &lt;/tr&gt;<br>    &lt;/table&gt;<br>&lt;/form&gt;<br>    <br></code></pre></td></tr></table></figure></li>\n<li><p>后端controller</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">@RequestMapping(value=&quot;/upload.do&quot;,method=&#123;RequestMethod.POST,RequestMethod.GET&#125;)<br>@ResponseBody<br>public String upload(MultipartFile m_image_addr) throws Exception&#123;<br>\treturn UploadImg.imgUpload(m_image_addr);<br>&#125;<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>启动项目测试上传，图片自动显示到预览框</p>\n</li>\n</ol>\n","site":{"data":{}},"wordcount":3193,"excerpt":"","more":"<h1 id=\"java中使用fastDFS上传图片-前端ajax-后端ssm\"><a href=\"#java中使用fastDFS上传图片-前端ajax-后端ssm\" class=\"headerlink\" title=\"java中使用fastDFS上传图片(前端ajax+后端ssm)\"></a>java中使用fastDFS上传图片(前端ajax+后端ssm)</h1><hr>\n<ul>\n<li>准备：下载jar包<br>链接: <a href=\"https://pan.baidu.com/s/1-GGIE1lTqO5L1J4xfnwhIA&shfl=shareset\">fastDFS_client</a><br>提取码: 63m7</li>\n</ul>\n<hr>\n<ol>\n<li><p>配置maven环境变量，与jdk配置方法相同。不再赘述：<a href=\"https://jingyan.baidu.com/article/ce09321ba734f02bff858fcf.html\">参考Windows中maven配置</a></p>\n</li>\n<li><p>找到你下载的jar包，直接在该路径下输入cmd回车<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721145019137.png\" alt=\"image-20220721145019137\"></p>\n</li>\n<li><p>打包</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">//打包命令<br>mvn install:install-file -DgroupId=org.csource.fastdfs -DartifactId=fastdfs  -Dversion=1.2 -Dpackaging=jar -Dfile=fastdfs_client_v1.20.jar<br></code></pre></td></tr></table></figure>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721145026074.png\" alt=\"image-20220721145026074\"></p>\n</li>\n<li><p>引入jar包</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">//maven项目jar包依赖<br>&lt;!-- 文件服务器 --&gt;<br>&lt;dependency&gt;<br>\t&lt;groupId&gt;org.csource.fastdfs&lt;/groupId&gt;<br>\t&lt;artifactId&gt;fastdfs&lt;/artifactId&gt;<br>\t&lt;version&gt;1.2&lt;/version&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure></li>\n<li><p>加入配置文件，命名：“fastdfs.properties”，注意你的ip和端口</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">charset=UTF-8<br>tracker_server=120.27.244.176:22122<br>http.tracker_http_port=80<br></code></pre></td></tr></table></figure>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721145036597.png\" alt=\"image-20220721145036597\"></p>\n</li>\n<li><p>项目加入上传图片工具类</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">public class UploadImg &#123;<br>\tpublic static String imgUpload(MultipartFile imgFile) throws FileNotFoundException, IOException, Exception&#123;<br>\t\t//1.加载配置文件ip端口<br>\t\tString properties_path = Thread.currentThread().getContextClassLoader().getResource(&quot;fastdfs.properties&quot;).getPath();<br>\t\tSystem.out.println(properties_path);<br>\t\tClientGlobal.init(properties_path);<br>\t\t//2.创建管理端对象<br>\t\tTrackerClient trackerClient=new TrackerClient();<br>\t\t//3.获取连接<br>\t\tTrackerServer trackerServer=trackerClient.getConnection();<br>\t\t//4.创建储存端对象<br>\t\tStorageClient1 storageClient1=new StorageClient1(trackerServer, null);<br>\t\t//5.创建文件属性-对象数组<br>\t\tNameValuePair[] meta_list=new NameValuePair[1];<br>\t\tmeta_list[0]=new NameValuePair(&quot;filename&quot;,imgFile.getOriginalFilename());<br>\t\t//6.上传文件<br>\t\tString path=storageClient1.upload_file1(imgFile.getBytes(), &quot;jpg&quot;, meta_list);<br>\t\t//拼接fastdfs的IP前缀得到图片真实地址，注意修改你的ip<br>\t\tpath=&quot;http://120.27.244.176/&quot;+path;<br>\t\t<br>\t\tSystem.out.println(path);<br>\t\t//返回一个真实地址\t\t\t<br>\t\treturn path;<br>\t&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></li>\n<li><p>前端html</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">//ajax<br>//上传图片<br> $(&quot;#m_image_addr&quot;).live(&quot;change&quot;,function()&#123;<br>\t    //注意这里不能写错。。。<br>\t    var file=$(&quot;#m_image_addr&quot;)[0].files[0];<br>\t    var formData = new FormData();<br>\t    formData.append(&quot;m_image_addr&quot;,file);<br>\t    //对文件类型进行判断<br>\t    var index=file.name.lastIndexOf(&quot;.&quot;);<br>\t    var type=file.name.substring(index);<br>\t    if(type!=&quot;.jpg&quot;&amp;&amp;type!=&quot;.png&quot;)&#123;<br>\t        alert(&quot;只能上传jpg和png格式的图片！！&quot;);<br>\t        return;<br>\t    &#125;<br>\t    $.ajax(&#123;<br>\t        url:&quot;../upload.do&quot;,<br>\t        data:formData,<br>\t        dataType:&quot;text&quot;,<br>\t        type:&quot;post&quot;,<br>\t        //这两个属性必须设置！！！！<br>\t        contentType: false,<br>\t        processData: false, //设置为true时，ajax提交的时候不会序列化data，而是直接使用data<br>\t        success:function (path) &#123;<br>\t   \t\t\t$(&quot;#yulan&quot;).attr(&quot;src&quot;,path);<br>\t        &#125;<br>\t    &#125;)\t<br>&#125;)<br>//form<br>&lt;!--enctype=&quot;multipart/form-data&quot;不可省略--&gt;<br>&lt;form id=&quot;fm1&quot; class=&quot;definewidth m20&quot; enctype=&quot;multipart/form-data&quot;&gt;<br>    &lt;table class=&quot;table table-bordered table-hover definewidth m10&quot;&gt;<br>        &lt;tr&gt;<br>            &lt;td width=&quot;10%&quot; class=&quot;tableleft&quot;&gt;图片&lt;/td&gt;<br>            &lt;td&gt;<br>                &lt;input type=&quot;file&quot; id=&quot;m_image_addr&quot;  name=&quot;file&quot; /&gt;<br>                &lt;image id=&quot;yulan&quot; width=&quot;100px&quot; height=&quot;80px&quot; src=&quot;&quot;&gt;&lt;/image&gt;<br>            &lt;/td&gt;<br>        &lt;/tr&gt;<br>    &lt;/table&gt;<br>&lt;/form&gt;<br>    <br></code></pre></td></tr></table></figure></li>\n<li><p>后端controller</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">@RequestMapping(value=&quot;/upload.do&quot;,method=&#123;RequestMethod.POST,RequestMethod.GET&#125;)<br>@ResponseBody<br>public String upload(MultipartFile m_image_addr) throws Exception&#123;<br>\treturn UploadImg.imgUpload(m_image_addr);<br>&#125;<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>启动项目测试上传，图片自动显示到预览框</p>\n</li>\n</ol>\n"},{"_content":"# java中使用redis（含json类型与java类型装换）\n1. pom依赖\n```javascript?linenums\n<!-- https://mvnrepository.com/artifact/redis.clients/jedis -->\n<dependency>\n    <groupId>redis.clients</groupId>\n    <artifactId>jedis</artifactId>\n    <version>3.0.1</version>\n</dependency>\n<!-- https://mvnrepository.com/artifact/com.alibaba/fastjson -->\n<dependency>\n    <groupId>com.alibaba</groupId>\n    <artifactId>fastjson</artifactId>\n    <version>1.2.56</version>\n</dependency>\n\n```\n2. 工具类，用于连接redis\n```javascript?linenums\npublic class JedisConnect {\n\tpublic static Jedis Conn(){\n\t\tJedis jedis=new Jedis(\"120.27.244.176\");\n\t\treturn jedis;\n\t}\n}\n```\n3. 存放一个redis，此处模拟session共享\n```javascript?linenums\n//连接\nJedis jedis=JedisConnect.Conn();\n//对象转json字符串\nString json_user=JSONObject.toJSONString(user);\n/*\n集合转换成json集合\nString JList=JSONArray.toJSONString(list); \n*/\n//放入redis\njedis.set(\"user\",json_user);\n//设置存活时间\njedis.expire(\"user\", 300);\n```\n4. 获取redis\n```javascript?linenums\n//连接\nJedis jedis=JedisConnect.Conn();\n//获取redis中的user（json字符串形式）\nString json_user=jedis.get(\"user\");\n//json字符串转对象\nUser user=JSONObject.parseObject(json_user, User.class);\n```\n5. 模拟数据库添加灵活使用\n```javascript?linenums\n//连接\nJedis jedis=JedisConnect.Conn();\n//对象转json字符串\nString reward_json=JSONObject.toJSONString(reward);\n/*\n字符串转json对象\nJSONObject json_object=JSONObject.parseObject({\"Message\":\"OK\"});\njson集合转java集合\nList<Goods>\tlist2=\tJSONArray.parseArray(JList, Goods.class);\n*/\n//存入的时候使用“表名:主键名:主键值”形式存储将自动生成分级目录\njedis.set(\"reward:r_id:\"+reward.getR_id(), reward_json);\n```\n![image-20220721145048260](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721145048260.png)\n","source":"_posts/BookMark/学习笔记/java中使用redis（含json类型与java类型装换） --菜鸟小回.md","raw":"# java中使用redis（含json类型与java类型装换）\n1. pom依赖\n```javascript?linenums\n<!-- https://mvnrepository.com/artifact/redis.clients/jedis -->\n<dependency>\n    <groupId>redis.clients</groupId>\n    <artifactId>jedis</artifactId>\n    <version>3.0.1</version>\n</dependency>\n<!-- https://mvnrepository.com/artifact/com.alibaba/fastjson -->\n<dependency>\n    <groupId>com.alibaba</groupId>\n    <artifactId>fastjson</artifactId>\n    <version>1.2.56</version>\n</dependency>\n\n```\n2. 工具类，用于连接redis\n```javascript?linenums\npublic class JedisConnect {\n\tpublic static Jedis Conn(){\n\t\tJedis jedis=new Jedis(\"120.27.244.176\");\n\t\treturn jedis;\n\t}\n}\n```\n3. 存放一个redis，此处模拟session共享\n```javascript?linenums\n//连接\nJedis jedis=JedisConnect.Conn();\n//对象转json字符串\nString json_user=JSONObject.toJSONString(user);\n/*\n集合转换成json集合\nString JList=JSONArray.toJSONString(list); \n*/\n//放入redis\njedis.set(\"user\",json_user);\n//设置存活时间\njedis.expire(\"user\", 300);\n```\n4. 获取redis\n```javascript?linenums\n//连接\nJedis jedis=JedisConnect.Conn();\n//获取redis中的user（json字符串形式）\nString json_user=jedis.get(\"user\");\n//json字符串转对象\nUser user=JSONObject.parseObject(json_user, User.class);\n```\n5. 模拟数据库添加灵活使用\n```javascript?linenums\n//连接\nJedis jedis=JedisConnect.Conn();\n//对象转json字符串\nString reward_json=JSONObject.toJSONString(reward);\n/*\n字符串转json对象\nJSONObject json_object=JSONObject.parseObject({\"Message\":\"OK\"});\njson集合转java集合\nList<Goods>\tlist2=\tJSONArray.parseArray(JList, Goods.class);\n*/\n//存入的时候使用“表名:主键名:主键值”形式存储将自动生成分级目录\njedis.set(\"reward:r_id:\"+reward.getR_id(), reward_json);\n```\n![image-20220721145048260](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721145048260.png)\n","slug":"BookMark/学习笔记/java中使用redis（含json类型与java类型装换） --菜鸟小回","published":1,"date":"2022-07-21T06:51:54.000Z","updated":"2022-09-01T10:02:40.529Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cl7ptszoo0021aba5hzzaee6f","content":"<h1><span id=\"java中使用redis含json类型与java类型装换\">java中使用redis（含json类型与java类型装换）</span></h1><ol>\n<li>pom依赖<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">&lt;!-- https://mvnrepository.com/artifact/redis.clients/jedis --&gt;<br>&lt;dependency&gt;<br>    &lt;groupId&gt;redis.clients&lt;/groupId&gt;<br>    &lt;artifactId&gt;jedis&lt;/artifactId&gt;<br>    &lt;version&gt;3.0.1&lt;/version&gt;<br>&lt;/dependency&gt;<br>&lt;!-- https://mvnrepository.com/artifact/com.alibaba/fastjson --&gt;<br>&lt;dependency&gt;<br>    &lt;groupId&gt;com.alibaba&lt;/groupId&gt;<br>    &lt;artifactId&gt;fastjson&lt;/artifactId&gt;<br>    &lt;version&gt;1.2.56&lt;/version&gt;<br>&lt;/dependency&gt;<br><br></code></pre></td></tr></table></figure></li>\n<li>工具类，用于连接redis<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">public class JedisConnect &#123;<br>\tpublic static Jedis Conn()&#123;<br>\t\tJedis jedis=new Jedis(&quot;120.27.244.176&quot;);<br>\t\treturn jedis;<br>\t&#125;<br>&#125;<br></code></pre></td></tr></table></figure></li>\n<li>存放一个redis，此处模拟session共享<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">//连接<br>Jedis jedis=JedisConnect.Conn();<br>//对象转json字符串<br>String json_user=JSONObject.toJSONString(user);<br>/*<br>集合转换成json集合<br>String JList=JSONArray.toJSONString(list); <br>*/<br>//放入redis<br>jedis.set(&quot;user&quot;,json_user);<br>//设置存活时间<br>jedis.expire(&quot;user&quot;, 300);<br></code></pre></td></tr></table></figure></li>\n<li>获取redis<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">//连接<br>Jedis jedis=JedisConnect.Conn();<br>//获取redis中的user（json字符串形式）<br>String json_user=jedis.get(&quot;user&quot;);<br>//json字符串转对象<br>User user=JSONObject.parseObject(json_user, User.class);<br></code></pre></td></tr></table></figure></li>\n<li>模拟数据库添加灵活使用<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">//连接<br>Jedis jedis=JedisConnect.Conn();<br>//对象转json字符串<br>String reward_json=JSONObject.toJSONString(reward);<br>/*<br>字符串转json对象<br>JSONObject json_object=JSONObject.parseObject(&#123;&quot;Message&quot;:&quot;OK&quot;&#125;);<br>json集合转java集合<br>List&lt;Goods&gt;\tlist2=\tJSONArray.parseArray(JList, Goods.class);<br>*/<br>//存入的时候使用“表名:主键名:主键值”形式存储将自动生成分级目录<br>jedis.set(&quot;reward:r_id:&quot;+reward.getR_id(), reward_json);<br></code></pre></td></tr></table></figure>\n<img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721145048260.png\" alt=\"image-20220721145048260\"></li>\n</ol>\n","site":{"data":{}},"wordcount":1522,"excerpt":"","more":"<h1 id=\"java中使用redis（含json类型与java类型装换）\"><a href=\"#java中使用redis（含json类型与java类型装换）\" class=\"headerlink\" title=\"java中使用redis（含json类型与java类型装换）\"></a>java中使用redis（含json类型与java类型装换）</h1><ol>\n<li>pom依赖<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">&lt;!-- https://mvnrepository.com/artifact/redis.clients/jedis --&gt;<br>&lt;dependency&gt;<br>    &lt;groupId&gt;redis.clients&lt;/groupId&gt;<br>    &lt;artifactId&gt;jedis&lt;/artifactId&gt;<br>    &lt;version&gt;3.0.1&lt;/version&gt;<br>&lt;/dependency&gt;<br>&lt;!-- https://mvnrepository.com/artifact/com.alibaba/fastjson --&gt;<br>&lt;dependency&gt;<br>    &lt;groupId&gt;com.alibaba&lt;/groupId&gt;<br>    &lt;artifactId&gt;fastjson&lt;/artifactId&gt;<br>    &lt;version&gt;1.2.56&lt;/version&gt;<br>&lt;/dependency&gt;<br><br></code></pre></td></tr></table></figure></li>\n<li>工具类，用于连接redis<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">public class JedisConnect &#123;<br>\tpublic static Jedis Conn()&#123;<br>\t\tJedis jedis=new Jedis(&quot;120.27.244.176&quot;);<br>\t\treturn jedis;<br>\t&#125;<br>&#125;<br></code></pre></td></tr></table></figure></li>\n<li>存放一个redis，此处模拟session共享<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">//连接<br>Jedis jedis=JedisConnect.Conn();<br>//对象转json字符串<br>String json_user=JSONObject.toJSONString(user);<br>/*<br>集合转换成json集合<br>String JList=JSONArray.toJSONString(list); <br>*/<br>//放入redis<br>jedis.set(&quot;user&quot;,json_user);<br>//设置存活时间<br>jedis.expire(&quot;user&quot;, 300);<br></code></pre></td></tr></table></figure></li>\n<li>获取redis<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">//连接<br>Jedis jedis=JedisConnect.Conn();<br>//获取redis中的user（json字符串形式）<br>String json_user=jedis.get(&quot;user&quot;);<br>//json字符串转对象<br>User user=JSONObject.parseObject(json_user, User.class);<br></code></pre></td></tr></table></figure></li>\n<li>模拟数据库添加灵活使用<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">//连接<br>Jedis jedis=JedisConnect.Conn();<br>//对象转json字符串<br>String reward_json=JSONObject.toJSONString(reward);<br>/*<br>字符串转json对象<br>JSONObject json_object=JSONObject.parseObject(&#123;&quot;Message&quot;:&quot;OK&quot;&#125;);<br>json集合转java集合<br>List&lt;Goods&gt;\tlist2=\tJSONArray.parseArray(JList, Goods.class);<br>*/<br>//存入的时候使用“表名:主键名:主键值”形式存储将自动生成分级目录<br>jedis.set(&quot;reward:r_id:&quot;+reward.getR_id(), reward_json);<br></code></pre></td></tr></table></figure>\n<img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721145048260.png\" alt=\"image-20220721145048260\"></li>\n</ol>\n"},{"_content":"# mes 学习笔记\n1. 集合中不改变顺序，对重复对象保留一个去重。\n`List list=(List) umsPermissionVOS.stream().distinct().collect(Collectors.toList());`\n2. 保留四位补充0\n`String.format(\"%4d\",aLong+1).replace(\" \",\"0\")`\n3. 异常处理\n ```javascript?linenums\n @Transactional(rollbackFor = Exception.class)\ntry{\n\t//代码段\n}\ncatch (Exception e){\n\t// 事务回滚\n\tlog.error(\"异常：\",e);\n\tTransactionAspectSupport.currentTransactionStatus().setRollbackOnly();\n\treturn Result.failed( e,\"保存失败,请联系管理员\");\n}\n ```\n4. 集合中流过滤的使用\n ```javascript?linenums\n//过滤出不包含2的数据\nlist=list.stream().filter(v ->!v.toString().contains(\"2\")).collect(Collectors.toList());\n//过滤出小于15的数据\ntaskExecuteInfos=taskExecuteInfos.stream().filter(u->u.getTaskId()<=15L).collect(Collectors.toList());\n//找出最大的state(max.orElse是当Optional为null时赋新值)\nOptional<TaskExecuteInfo> max = taskExecuteInfos.stream().max(Comparator.comparing(u -> u.getState()));\nTaskExecuteInfo maxTaskExecuteInfo = max.orElse(new TaskExecuteInfo());\n//按照state分组\nMap<Integer, List<TaskExecuteInfo>> collect = taskExecuteInfos.stream().collect(Collectors.groupingBy(u -> u.getState()));\n//拼接流中的EcnNo（“，”为分割；“【”前缀；“】”后缀）\nString s1 = taskExecuteInfos.stream().map(TaskExecuteInfo::getEcnNo).collect(Collectors.joining(\",\", \"[\", \"]\"));\n//TaskExecuteInfo::getEcnNo与u->u.getEcnNo效果相同\n//取出集合中的某字段作为新集合\nList<String> tos=new ArrayList<>();\ntos=depaUsers.stream().map(u->u.getEmail()).collect(Collectors.toList());\n ```\n5. 集合中流遍历赋值\n ```javascript?linenums\ntaskExecuteInfos.forEach(u->u.setCreateTime(new Date()));\n ```\n6. 时间类型为空时的更新\n```javascript?linenums\n@TableField(strategy = FieldStrategy.IGNORED)\n```\n7. 通过前缀+串号生成下一串号\n ```javascript?linenums\n/**\n     * 根据单号前缀生成当前单号\n     * @param prefix 前缀\n     * @return\n     */\nprivate String getNewDocNum(String prefix){\n\tString newDocNum=prefix+\"0001\";\n\tSmsWmsReceiveDoc one = getOne(new QueryWrapper<SmsWmsReceiveDoc>()\n\t\t\t.last(\"where WR_DOC_NUM like '\"+prefix+\"%' order by WR_DOC_NUM desc limit 1\"));\n\tif (one != null) {\n\t\tLong aLong = Convert.toLong(StrUtil.removePrefix(one.getWrDocNum(), prefix));\n\t\tnewDocNum=prefix+String.format(\"%4d\",aLong+1).replace(\" \",\"0\");\n\t}\n\treturn newDocNum;\n}\n ```\n8. json_string转map\n ```javascript?linenums\n1. Map result =(Map) JSON.parse(mapString);\n2. Map map = JSON.parseObject(result, Map.class);\n//数据转小驼峰\nMap map = MapUtil.toCamelCaseMap(parse);\n ```\n9. json字符串转l对象集合\n  ```javascript?linenums\nList<EccMaterialDetail> eccMaterialDetails = JSONArray.parseArray(result, EccMaterialDetail.class);\n  ```\n10. 对象为null时转换为某默认值\n `Objects.toString(boxInfo.getBatch(),\"\")`\n\n11. List<Map<String, Object>> params数组转化为json数组\n```javascript?linenums\nJSON.toJSONString(params);\n```\n---\n12. 获取前后缀进行截断（可能存在多个\"-\"后缀，只获取最后一个）\n  ```javascript?linenums\nString[] split = custFixNo.split(\"-\");\nString suffix = split[split.length - 1];\nString prefix = StrUtil.removeSuffix(custFixNo, suffix);\n  ```\n13. 父子级类表格递归查询\n + 数据库设计\n ![image-20220628110059492](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220628110059492.png)\n + 返回实体结构\n```javascript?linenums\n@Data\npublic class PermissionTreeVO {\n    /** 主键 */\n    private Long id;\n    /** 权限名 */\n    private String perName;\n    /** 权限路径 */\n    private String perUrl;\n    /** 权限类型 例如 0 菜单 1按钮 */\n    private Integer perType;\n    /** 父级权限 默认 0  */\n    private Long parentId;\n    /** 图标 */\n    private String icon;\n    /** 状态 0 禁用 1 启用 */\n    private Boolean status;\n    /** 描述 */\n    private String remark;\n    /** 子权限 */\n    private List<PermissionTreeVO> childs;\n}\n```\n + 具体实现\n```javascript?linenums\n//controller\n    /**\n     * 通过parentId递归查询权限树（查询全部传0）\n     */\n    @ApiOperation(value = \"通过parentId递归查询权限树（查询全部传0）\")\n    @PostMapping(\"/umsPermission/selectPermissionTreeByParentId/{parentId}\")\n    public Result selectPermissionTreeByParentId(@PathVariable Long parentId) {\n        List<PermissionTreeVO> permissionTreeVOS = umsPermissionService.selectPermissionTreeByParentId(parentId);\n        return Result.succeed(permissionTreeVOS, \"查询成功\");\n    }\n\t\n// serviceImpl\n    /**\n     * @Description: 以输入的父级id寻找下级目录，只要下级目录不为空，就继续向下探寻，然后封装至上级的childs字段中\n     * @param parentId\n     * @return\n     */\n    @Override\n    public List<PermissionTreeVO> selectPermissionTreeByParentId(Long parentId) {\n        List<PermissionTreeVO> permissionList = umsPermissionMapper.selectPermissionTreeByParentId(parentId);\n        if(permissionList!=null){\n            for (PermissionTreeVO permission : permissionList) {\n                permission.setChilds(selectPermissionTreeByParentId(permission.getId()));\n            }\n        }\n        return permissionList;\n    }\n\t\n// mapper.xml\n    <select id=\"selectPermissionTreeByParentId\" resultType=\"com.yk.i_wms.vo.PermissionTreeVO\" parameterType=\"long\">\n        SELECT DISTINCT\n            t.id id,\n            t.per_name perName,\n            t.per_url perUrl,\n            t.per_type perType,\n            t.icon icon,\n            t.status status,\n            t.remark remark,\n            t.parent_id parentId\n        FROM\n            ums_permission t\n        WHERE\n            t.parent_id = #{parentId}\n        order by t.id\n    </select>\n```\n14. 分页列表查询后的处理\n```javascript?linenums\n    @ApiOperation(value = \"查询列表\")\n    @PostMapping(\"/umsRole/list\")\n    public Result<PageResult> list(@RequestBody Map<String, Object> params) {\n        Page<Map> list= umsRoleService.findList(params);\n        List<Map> records = list.getRecords();\n        List<Map> results = new ArrayList<>();\n        for (Map record : records) {\n            Long roleId = MapUtil.getLong(record, \"id\");\n            List<UmsRolePer> umsRolePers = umsRolePerService.list(new LambdaQueryWrapper<UmsRolePer>()\n                    .eq(UmsRolePer::getRoleId, roleId));\n            List<Long> perIds=umsRolePers.stream().map(u->u.getPerId()).collect(Collectors.toList());\n            record.put(\"perIds\",perIds);\n            results.add(record);\n        }\n        list.setRecords(results);\n        return Result.succeed(PageResult.restPage(list),\"查询成功\");\n    }\n```\n\n","source":"_posts/BookMark/学习笔记/mes学习笔记.md","raw":"# mes 学习笔记\n1. 集合中不改变顺序，对重复对象保留一个去重。\n`List list=(List) umsPermissionVOS.stream().distinct().collect(Collectors.toList());`\n2. 保留四位补充0\n`String.format(\"%4d\",aLong+1).replace(\" \",\"0\")`\n3. 异常处理\n ```javascript?linenums\n @Transactional(rollbackFor = Exception.class)\ntry{\n\t//代码段\n}\ncatch (Exception e){\n\t// 事务回滚\n\tlog.error(\"异常：\",e);\n\tTransactionAspectSupport.currentTransactionStatus().setRollbackOnly();\n\treturn Result.failed( e,\"保存失败,请联系管理员\");\n}\n ```\n4. 集合中流过滤的使用\n ```javascript?linenums\n//过滤出不包含2的数据\nlist=list.stream().filter(v ->!v.toString().contains(\"2\")).collect(Collectors.toList());\n//过滤出小于15的数据\ntaskExecuteInfos=taskExecuteInfos.stream().filter(u->u.getTaskId()<=15L).collect(Collectors.toList());\n//找出最大的state(max.orElse是当Optional为null时赋新值)\nOptional<TaskExecuteInfo> max = taskExecuteInfos.stream().max(Comparator.comparing(u -> u.getState()));\nTaskExecuteInfo maxTaskExecuteInfo = max.orElse(new TaskExecuteInfo());\n//按照state分组\nMap<Integer, List<TaskExecuteInfo>> collect = taskExecuteInfos.stream().collect(Collectors.groupingBy(u -> u.getState()));\n//拼接流中的EcnNo（“，”为分割；“【”前缀；“】”后缀）\nString s1 = taskExecuteInfos.stream().map(TaskExecuteInfo::getEcnNo).collect(Collectors.joining(\",\", \"[\", \"]\"));\n//TaskExecuteInfo::getEcnNo与u->u.getEcnNo效果相同\n//取出集合中的某字段作为新集合\nList<String> tos=new ArrayList<>();\ntos=depaUsers.stream().map(u->u.getEmail()).collect(Collectors.toList());\n ```\n5. 集合中流遍历赋值\n ```javascript?linenums\ntaskExecuteInfos.forEach(u->u.setCreateTime(new Date()));\n ```\n6. 时间类型为空时的更新\n```javascript?linenums\n@TableField(strategy = FieldStrategy.IGNORED)\n```\n7. 通过前缀+串号生成下一串号\n ```javascript?linenums\n/**\n     * 根据单号前缀生成当前单号\n     * @param prefix 前缀\n     * @return\n     */\nprivate String getNewDocNum(String prefix){\n\tString newDocNum=prefix+\"0001\";\n\tSmsWmsReceiveDoc one = getOne(new QueryWrapper<SmsWmsReceiveDoc>()\n\t\t\t.last(\"where WR_DOC_NUM like '\"+prefix+\"%' order by WR_DOC_NUM desc limit 1\"));\n\tif (one != null) {\n\t\tLong aLong = Convert.toLong(StrUtil.removePrefix(one.getWrDocNum(), prefix));\n\t\tnewDocNum=prefix+String.format(\"%4d\",aLong+1).replace(\" \",\"0\");\n\t}\n\treturn newDocNum;\n}\n ```\n8. json_string转map\n ```javascript?linenums\n1. Map result =(Map) JSON.parse(mapString);\n2. Map map = JSON.parseObject(result, Map.class);\n//数据转小驼峰\nMap map = MapUtil.toCamelCaseMap(parse);\n ```\n9. json字符串转l对象集合\n  ```javascript?linenums\nList<EccMaterialDetail> eccMaterialDetails = JSONArray.parseArray(result, EccMaterialDetail.class);\n  ```\n10. 对象为null时转换为某默认值\n `Objects.toString(boxInfo.getBatch(),\"\")`\n\n11. List<Map<String, Object>> params数组转化为json数组\n```javascript?linenums\nJSON.toJSONString(params);\n```\n---\n12. 获取前后缀进行截断（可能存在多个\"-\"后缀，只获取最后一个）\n  ```javascript?linenums\nString[] split = custFixNo.split(\"-\");\nString suffix = split[split.length - 1];\nString prefix = StrUtil.removeSuffix(custFixNo, suffix);\n  ```\n13. 父子级类表格递归查询\n + 数据库设计\n ![image-20220628110059492](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220628110059492.png)\n + 返回实体结构\n```javascript?linenums\n@Data\npublic class PermissionTreeVO {\n    /** 主键 */\n    private Long id;\n    /** 权限名 */\n    private String perName;\n    /** 权限路径 */\n    private String perUrl;\n    /** 权限类型 例如 0 菜单 1按钮 */\n    private Integer perType;\n    /** 父级权限 默认 0  */\n    private Long parentId;\n    /** 图标 */\n    private String icon;\n    /** 状态 0 禁用 1 启用 */\n    private Boolean status;\n    /** 描述 */\n    private String remark;\n    /** 子权限 */\n    private List<PermissionTreeVO> childs;\n}\n```\n + 具体实现\n```javascript?linenums\n//controller\n    /**\n     * 通过parentId递归查询权限树（查询全部传0）\n     */\n    @ApiOperation(value = \"通过parentId递归查询权限树（查询全部传0）\")\n    @PostMapping(\"/umsPermission/selectPermissionTreeByParentId/{parentId}\")\n    public Result selectPermissionTreeByParentId(@PathVariable Long parentId) {\n        List<PermissionTreeVO> permissionTreeVOS = umsPermissionService.selectPermissionTreeByParentId(parentId);\n        return Result.succeed(permissionTreeVOS, \"查询成功\");\n    }\n\t\n// serviceImpl\n    /**\n     * @Description: 以输入的父级id寻找下级目录，只要下级目录不为空，就继续向下探寻，然后封装至上级的childs字段中\n     * @param parentId\n     * @return\n     */\n    @Override\n    public List<PermissionTreeVO> selectPermissionTreeByParentId(Long parentId) {\n        List<PermissionTreeVO> permissionList = umsPermissionMapper.selectPermissionTreeByParentId(parentId);\n        if(permissionList!=null){\n            for (PermissionTreeVO permission : permissionList) {\n                permission.setChilds(selectPermissionTreeByParentId(permission.getId()));\n            }\n        }\n        return permissionList;\n    }\n\t\n// mapper.xml\n    <select id=\"selectPermissionTreeByParentId\" resultType=\"com.yk.i_wms.vo.PermissionTreeVO\" parameterType=\"long\">\n        SELECT DISTINCT\n            t.id id,\n            t.per_name perName,\n            t.per_url perUrl,\n            t.per_type perType,\n            t.icon icon,\n            t.status status,\n            t.remark remark,\n            t.parent_id parentId\n        FROM\n            ums_permission t\n        WHERE\n            t.parent_id = #{parentId}\n        order by t.id\n    </select>\n```\n14. 分页列表查询后的处理\n```javascript?linenums\n    @ApiOperation(value = \"查询列表\")\n    @PostMapping(\"/umsRole/list\")\n    public Result<PageResult> list(@RequestBody Map<String, Object> params) {\n        Page<Map> list= umsRoleService.findList(params);\n        List<Map> records = list.getRecords();\n        List<Map> results = new ArrayList<>();\n        for (Map record : records) {\n            Long roleId = MapUtil.getLong(record, \"id\");\n            List<UmsRolePer> umsRolePers = umsRolePerService.list(new LambdaQueryWrapper<UmsRolePer>()\n                    .eq(UmsRolePer::getRoleId, roleId));\n            List<Long> perIds=umsRolePers.stream().map(u->u.getPerId()).collect(Collectors.toList());\n            record.put(\"perIds\",perIds);\n            results.add(record);\n        }\n        list.setRecords(results);\n        return Result.succeed(PageResult.restPage(list),\"查询成功\");\n    }\n```\n\n","slug":"BookMark/学习笔记/mes学习笔记","published":1,"date":"2022-07-18T09:51:16.000Z","updated":"2022-09-01T10:02:40.509Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cl7ptszoo0023aba50k97bklg","content":"<h1><span id=\"mes-学习笔记\">mes 学习笔记</span></h1><ol>\n<li><p>集合中不改变顺序，对重复对象保留一个去重。<br><code>List list=(List) umsPermissionVOS.stream().distinct().collect(Collectors.toList());</code></p>\n</li>\n<li><p>保留四位补充0<br><code>String.format(&quot;%4d&quot;,aLong+1).replace(&quot; &quot;,&quot;0&quot;)</code></p>\n</li>\n<li><p>异常处理</p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\"> @Transactional(rollbackFor = Exception.class)<br>try&#123;<br>\t//代码段<br>&#125;<br>catch (Exception e)&#123;<br>\t// 事务回滚<br>\tlog.error(&quot;异常：&quot;,e);<br>\tTransactionAspectSupport.currentTransactionStatus().setRollbackOnly();<br>\treturn Result.failed( e,&quot;保存失败,请联系管理员&quot;);<br>&#125;<br></code></pre></td></tr></table></figure></li>\n<li><p>集合中流过滤的使用</p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">//过滤出不包含2的数据<br>list=list.stream().filter(v -&gt;!v.toString().contains(&quot;2&quot;)).collect(Collectors.toList());<br>//过滤出小于15的数据<br>taskExecuteInfos=taskExecuteInfos.stream().filter(u-&gt;u.getTaskId()&lt;=15L).collect(Collectors.toList());<br>//找出最大的state(max.orElse是当Optional为null时赋新值)<br>Optional&lt;TaskExecuteInfo&gt; max = taskExecuteInfos.stream().max(Comparator.comparing(u -&gt; u.getState()));<br>TaskExecuteInfo maxTaskExecuteInfo = max.orElse(new TaskExecuteInfo());<br>//按照state分组<br>Map&lt;Integer, List&lt;TaskExecuteInfo&gt;&gt; collect = taskExecuteInfos.stream().collect(Collectors.groupingBy(u -&gt; u.getState()));<br>//拼接流中的EcnNo（“，”为分割；“【”前缀；“】”后缀）<br>String s1 = taskExecuteInfos.stream().map(TaskExecuteInfo::getEcnNo).collect(Collectors.joining(&quot;,&quot;, &quot;[&quot;, &quot;]&quot;));<br>//TaskExecuteInfo::getEcnNo与u-&gt;u.getEcnNo效果相同<br>//取出集合中的某字段作为新集合<br>List&lt;String&gt; tos=new ArrayList&lt;&gt;();<br>tos=depaUsers.stream().map(u-&gt;u.getEmail()).collect(Collectors.toList());<br></code></pre></td></tr></table></figure></li>\n<li><p>集合中流遍历赋值</p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">taskExecuteInfos.forEach(u-&gt;u.setCreateTime(new Date()));<br></code></pre></td></tr></table></figure></li>\n<li><p>时间类型为空时的更新</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">@TableField(strategy = FieldStrategy.IGNORED)<br></code></pre></td></tr></table></figure></li>\n<li><p>通过前缀+串号生成下一串号</p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">/**<br>     * 根据单号前缀生成当前单号<br>     * @param prefix 前缀<br>     * @return<br>     */<br>private String getNewDocNum(String prefix)&#123;<br>\tString newDocNum=prefix+&quot;0001&quot;;<br>\tSmsWmsReceiveDoc one = getOne(new QueryWrapper&lt;SmsWmsReceiveDoc&gt;()<br>\t\t\t.last(&quot;where WR_DOC_NUM like &#x27;&quot;+prefix+&quot;%&#x27; order by WR_DOC_NUM desc limit 1&quot;));<br>\tif (one != null) &#123;<br>\t\tLong aLong = Convert.toLong(StrUtil.removePrefix(one.getWrDocNum(), prefix));<br>\t\tnewDocNum=prefix+String.format(&quot;%4d&quot;,aLong+1).replace(&quot; &quot;,&quot;0&quot;);<br>\t&#125;<br>\treturn newDocNum;<br>&#125;<br></code></pre></td></tr></table></figure></li>\n<li><p>json_string转map</p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">1. Map result =(Map) JSON.parse(mapString);<br>2. Map map = JSON.parseObject(result, Map.class);<br>//数据转小驼峰<br>Map map = MapUtil.toCamelCaseMap(parse);<br></code></pre></td></tr></table></figure></li>\n<li><p>json字符串转l对象集合</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">List&lt;EccMaterialDetail&gt; eccMaterialDetails = JSONArray.parseArray(result, EccMaterialDetail.class);<br></code></pre></td></tr></table></figure></li>\n<li><p>对象为null时转换为某默认值<br> <code>Objects.toString(boxInfo.getBatch(),&quot;&quot;)</code></p>\n</li>\n<li><p>List&lt;Map&lt;String, Object&gt;&gt; params数组转化为json数组</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">JSON.toJSONString(params);<br></code></pre></td></tr></table></figure></li>\n</ol>\n<hr>\n<ol start=\"12\">\n<li>获取前后缀进行截断（可能存在多个”-“后缀，只获取最后一个）  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">String[] split = custFixNo.split(&quot;-&quot;);<br>String suffix = split[split.length - 1];<br>String prefix = StrUtil.removeSuffix(custFixNo, suffix);<br></code></pre></td></tr></table></figure></li>\n<li>父子级类表格递归查询</li>\n</ol>\n<ul>\n<li>数据库设计<br> <img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220628110059492.png\" alt=\"image-20220628110059492\"></li>\n<li>返回实体结构<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">@Data<br>public class PermissionTreeVO &#123;<br>    /** 主键 */<br>    private Long id;<br>    /** 权限名 */<br>    private String perName;<br>    /** 权限路径 */<br>    private String perUrl;<br>    /** 权限类型 例如 0 菜单 1按钮 */<br>    private Integer perType;<br>    /** 父级权限 默认 0  */<br>    private Long parentId;<br>    /** 图标 */<br>    private String icon;<br>    /** 状态 0 禁用 1 启用 */<br>    private Boolean status;<br>    /** 描述 */<br>    private String remark;<br>    /** 子权限 */<br>    private List&lt;PermissionTreeVO&gt; childs;<br>&#125;<br></code></pre></td></tr></table></figure></li>\n<li>具体实现<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">//controller<br>    /**<br>     * 通过parentId递归查询权限树（查询全部传0）<br>     */<br>    @ApiOperation(value = &quot;通过parentId递归查询权限树（查询全部传0）&quot;)<br>    @PostMapping(&quot;/umsPermission/selectPermissionTreeByParentId/&#123;parentId&#125;&quot;)<br>    public Result selectPermissionTreeByParentId(@PathVariable Long parentId) &#123;<br>        List&lt;PermissionTreeVO&gt; permissionTreeVOS = umsPermissionService.selectPermissionTreeByParentId(parentId);<br>        return Result.succeed(permissionTreeVOS, &quot;查询成功&quot;);<br>    &#125;<br>\t<br>// serviceImpl<br>    /**<br>     * @Description: 以输入的父级id寻找下级目录，只要下级目录不为空，就继续向下探寻，然后封装至上级的childs字段中<br>     * @param parentId<br>     * @return<br>     */<br>    @Override<br>    public List&lt;PermissionTreeVO&gt; selectPermissionTreeByParentId(Long parentId) &#123;<br>        List&lt;PermissionTreeVO&gt; permissionList = umsPermissionMapper.selectPermissionTreeByParentId(parentId);<br>        if(permissionList!=null)&#123;<br>            for (PermissionTreeVO permission : permissionList) &#123;<br>                permission.setChilds(selectPermissionTreeByParentId(permission.getId()));<br>            &#125;<br>        &#125;<br>        return permissionList;<br>    &#125;<br>\t<br>// mapper.xml<br>    &lt;select id=&quot;selectPermissionTreeByParentId&quot; resultType=&quot;com.yk.i_wms.vo.PermissionTreeVO&quot; parameterType=&quot;long&quot;&gt;<br>        SELECT DISTINCT<br>            t.id id,<br>            t.per_name perName,<br>            t.per_url perUrl,<br>            t.per_type perType,<br>            t.icon icon,<br>            t.status status,<br>            t.remark remark,<br>            t.parent_id parentId<br>        FROM<br>            ums_permission t<br>        WHERE<br>            t.parent_id = #&#123;parentId&#125;<br>        order by t.id<br>    &lt;/select&gt;<br></code></pre></td></tr></table></figure></li>\n</ul>\n<ol start=\"14\">\n<li>分页列表查询后的处理<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">@ApiOperation(value = &quot;查询列表&quot;)<br>@PostMapping(&quot;/umsRole/list&quot;)<br>public Result&lt;PageResult&gt; list(@RequestBody Map&lt;String, Object&gt; params) &#123;<br>    Page&lt;Map&gt; list= umsRoleService.findList(params);<br>    List&lt;Map&gt; records = list.getRecords();<br>    List&lt;Map&gt; results = new ArrayList&lt;&gt;();<br>    for (Map record : records) &#123;<br>        Long roleId = MapUtil.getLong(record, &quot;id&quot;);<br>        List&lt;UmsRolePer&gt; umsRolePers = umsRolePerService.list(new LambdaQueryWrapper&lt;UmsRolePer&gt;()<br>                .eq(UmsRolePer::getRoleId, roleId));<br>        List&lt;Long&gt; perIds=umsRolePers.stream().map(u-&gt;u.getPerId()).collect(Collectors.toList());<br>        record.put(&quot;perIds&quot;,perIds);<br>        results.add(record);<br>    &#125;<br>    list.setRecords(results);<br>    return Result.succeed(PageResult.restPage(list),&quot;查询成功&quot;);<br>&#125;<br></code></pre></td></tr></table></figure></li>\n</ol>\n","site":{"data":{}},"wordcount":5235,"excerpt":"","more":"<h1 id=\"mes-学习笔记\"><a href=\"#mes-学习笔记\" class=\"headerlink\" title=\"mes 学习笔记\"></a>mes 学习笔记</h1><ol>\n<li><p>集合中不改变顺序，对重复对象保留一个去重。<br><code>List list=(List) umsPermissionVOS.stream().distinct().collect(Collectors.toList());</code></p>\n</li>\n<li><p>保留四位补充0<br><code>String.format(&quot;%4d&quot;,aLong+1).replace(&quot; &quot;,&quot;0&quot;)</code></p>\n</li>\n<li><p>异常处理</p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\"> @Transactional(rollbackFor = Exception.class)<br>try&#123;<br>\t//代码段<br>&#125;<br>catch (Exception e)&#123;<br>\t// 事务回滚<br>\tlog.error(&quot;异常：&quot;,e);<br>\tTransactionAspectSupport.currentTransactionStatus().setRollbackOnly();<br>\treturn Result.failed( e,&quot;保存失败,请联系管理员&quot;);<br>&#125;<br></code></pre></td></tr></table></figure></li>\n<li><p>集合中流过滤的使用</p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">//过滤出不包含2的数据<br>list=list.stream().filter(v -&gt;!v.toString().contains(&quot;2&quot;)).collect(Collectors.toList());<br>//过滤出小于15的数据<br>taskExecuteInfos=taskExecuteInfos.stream().filter(u-&gt;u.getTaskId()&lt;=15L).collect(Collectors.toList());<br>//找出最大的state(max.orElse是当Optional为null时赋新值)<br>Optional&lt;TaskExecuteInfo&gt; max = taskExecuteInfos.stream().max(Comparator.comparing(u -&gt; u.getState()));<br>TaskExecuteInfo maxTaskExecuteInfo = max.orElse(new TaskExecuteInfo());<br>//按照state分组<br>Map&lt;Integer, List&lt;TaskExecuteInfo&gt;&gt; collect = taskExecuteInfos.stream().collect(Collectors.groupingBy(u -&gt; u.getState()));<br>//拼接流中的EcnNo（“，”为分割；“【”前缀；“】”后缀）<br>String s1 = taskExecuteInfos.stream().map(TaskExecuteInfo::getEcnNo).collect(Collectors.joining(&quot;,&quot;, &quot;[&quot;, &quot;]&quot;));<br>//TaskExecuteInfo::getEcnNo与u-&gt;u.getEcnNo效果相同<br>//取出集合中的某字段作为新集合<br>List&lt;String&gt; tos=new ArrayList&lt;&gt;();<br>tos=depaUsers.stream().map(u-&gt;u.getEmail()).collect(Collectors.toList());<br></code></pre></td></tr></table></figure></li>\n<li><p>集合中流遍历赋值</p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">taskExecuteInfos.forEach(u-&gt;u.setCreateTime(new Date()));<br></code></pre></td></tr></table></figure></li>\n<li><p>时间类型为空时的更新</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">@TableField(strategy = FieldStrategy.IGNORED)<br></code></pre></td></tr></table></figure></li>\n<li><p>通过前缀+串号生成下一串号</p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">/**<br>     * 根据单号前缀生成当前单号<br>     * @param prefix 前缀<br>     * @return<br>     */<br>private String getNewDocNum(String prefix)&#123;<br>\tString newDocNum=prefix+&quot;0001&quot;;<br>\tSmsWmsReceiveDoc one = getOne(new QueryWrapper&lt;SmsWmsReceiveDoc&gt;()<br>\t\t\t.last(&quot;where WR_DOC_NUM like &#x27;&quot;+prefix+&quot;%&#x27; order by WR_DOC_NUM desc limit 1&quot;));<br>\tif (one != null) &#123;<br>\t\tLong aLong = Convert.toLong(StrUtil.removePrefix(one.getWrDocNum(), prefix));<br>\t\tnewDocNum=prefix+String.format(&quot;%4d&quot;,aLong+1).replace(&quot; &quot;,&quot;0&quot;);<br>\t&#125;<br>\treturn newDocNum;<br>&#125;<br></code></pre></td></tr></table></figure></li>\n<li><p>json_string转map</p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">1. Map result =(Map) JSON.parse(mapString);<br>2. Map map = JSON.parseObject(result, Map.class);<br>//数据转小驼峰<br>Map map = MapUtil.toCamelCaseMap(parse);<br></code></pre></td></tr></table></figure></li>\n<li><p>json字符串转l对象集合</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">List&lt;EccMaterialDetail&gt; eccMaterialDetails = JSONArray.parseArray(result, EccMaterialDetail.class);<br></code></pre></td></tr></table></figure></li>\n<li><p>对象为null时转换为某默认值<br> <code>Objects.toString(boxInfo.getBatch(),&quot;&quot;)</code></p>\n</li>\n<li><p>List&lt;Map&lt;String, Object&gt;&gt; params数组转化为json数组</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">JSON.toJSONString(params);<br></code></pre></td></tr></table></figure></li>\n</ol>\n<hr>\n<ol start=\"12\">\n<li>获取前后缀进行截断（可能存在多个”-“后缀，只获取最后一个）  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">String[] split = custFixNo.split(&quot;-&quot;);<br>String suffix = split[split.length - 1];<br>String prefix = StrUtil.removeSuffix(custFixNo, suffix);<br></code></pre></td></tr></table></figure></li>\n<li>父子级类表格递归查询</li>\n</ol>\n<ul>\n<li>数据库设计<br> <img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220628110059492.png\" alt=\"image-20220628110059492\"></li>\n<li>返回实体结构<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">@Data<br>public class PermissionTreeVO &#123;<br>    /** 主键 */<br>    private Long id;<br>    /** 权限名 */<br>    private String perName;<br>    /** 权限路径 */<br>    private String perUrl;<br>    /** 权限类型 例如 0 菜单 1按钮 */<br>    private Integer perType;<br>    /** 父级权限 默认 0  */<br>    private Long parentId;<br>    /** 图标 */<br>    private String icon;<br>    /** 状态 0 禁用 1 启用 */<br>    private Boolean status;<br>    /** 描述 */<br>    private String remark;<br>    /** 子权限 */<br>    private List&lt;PermissionTreeVO&gt; childs;<br>&#125;<br></code></pre></td></tr></table></figure></li>\n<li>具体实现<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">//controller<br>    /**<br>     * 通过parentId递归查询权限树（查询全部传0）<br>     */<br>    @ApiOperation(value = &quot;通过parentId递归查询权限树（查询全部传0）&quot;)<br>    @PostMapping(&quot;/umsPermission/selectPermissionTreeByParentId/&#123;parentId&#125;&quot;)<br>    public Result selectPermissionTreeByParentId(@PathVariable Long parentId) &#123;<br>        List&lt;PermissionTreeVO&gt; permissionTreeVOS = umsPermissionService.selectPermissionTreeByParentId(parentId);<br>        return Result.succeed(permissionTreeVOS, &quot;查询成功&quot;);<br>    &#125;<br>\t<br>// serviceImpl<br>    /**<br>     * @Description: 以输入的父级id寻找下级目录，只要下级目录不为空，就继续向下探寻，然后封装至上级的childs字段中<br>     * @param parentId<br>     * @return<br>     */<br>    @Override<br>    public List&lt;PermissionTreeVO&gt; selectPermissionTreeByParentId(Long parentId) &#123;<br>        List&lt;PermissionTreeVO&gt; permissionList = umsPermissionMapper.selectPermissionTreeByParentId(parentId);<br>        if(permissionList!=null)&#123;<br>            for (PermissionTreeVO permission : permissionList) &#123;<br>                permission.setChilds(selectPermissionTreeByParentId(permission.getId()));<br>            &#125;<br>        &#125;<br>        return permissionList;<br>    &#125;<br>\t<br>// mapper.xml<br>    &lt;select id=&quot;selectPermissionTreeByParentId&quot; resultType=&quot;com.yk.i_wms.vo.PermissionTreeVO&quot; parameterType=&quot;long&quot;&gt;<br>        SELECT DISTINCT<br>            t.id id,<br>            t.per_name perName,<br>            t.per_url perUrl,<br>            t.per_type perType,<br>            t.icon icon,<br>            t.status status,<br>            t.remark remark,<br>            t.parent_id parentId<br>        FROM<br>            ums_permission t<br>        WHERE<br>            t.parent_id = #&#123;parentId&#125;<br>        order by t.id<br>    &lt;/select&gt;<br></code></pre></td></tr></table></figure></li>\n</ul>\n<ol start=\"14\">\n<li>分页列表查询后的处理<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">@ApiOperation(value = &quot;查询列表&quot;)<br>@PostMapping(&quot;/umsRole/list&quot;)<br>public Result&lt;PageResult&gt; list(@RequestBody Map&lt;String, Object&gt; params) &#123;<br>    Page&lt;Map&gt; list= umsRoleService.findList(params);<br>    List&lt;Map&gt; records = list.getRecords();<br>    List&lt;Map&gt; results = new ArrayList&lt;&gt;();<br>    for (Map record : records) &#123;<br>        Long roleId = MapUtil.getLong(record, &quot;id&quot;);<br>        List&lt;UmsRolePer&gt; umsRolePers = umsRolePerService.list(new LambdaQueryWrapper&lt;UmsRolePer&gt;()<br>                .eq(UmsRolePer::getRoleId, roleId));<br>        List&lt;Long&gt; perIds=umsRolePers.stream().map(u-&gt;u.getPerId()).collect(Collectors.toList());<br>        record.put(&quot;perIds&quot;,perIds);<br>        results.add(record);<br>    &#125;<br>    list.setRecords(results);<br>    return Result.succeed(PageResult.restPage(list),&quot;查询成功&quot;);<br>&#125;<br></code></pre></td></tr></table></figure></li>\n</ol>\n"},{"_content":"# ssm框架完整pom依赖（附加 redis、fastDFS、阿里短信验证、poi、hadoop）\n```javascript?linenums\n<?xml version=\"1.0\" encoding=\"UTF-8\"?><!--指定xml文档的版本和编码方式 -->\n<!--project是所有pom.xml的根元素， 它还声明了一些POM相关的命名空间及xsd元素， 虽然这些属性不是必须的， 但使用这些属性能够让第三方工具 \n\t(如：IDE中的xml编辑器)帮助我们快速编辑POM -->\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n\txsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n\t<!--指定了当前POM模型的版本，对于maven2及maven3来说，它只能是4.0.0。 这段代码中最重要的是包含groupId,artifactId和version的三行。 \n\t\t这三个元素定义了一个项目基本的坐标，在maven的世界， 任何的jar,pom或者war都是以基于这些基本的坐标进行区分的。 -->\n\t<modelVersion>4.0.0</modelVersion>\n\n\t<groupId>com.yun</groupId><!--填写你的组织名例如 -->\n\t<artifactId>test</artifactId><!--项目名字 -->\n\t<version>1.0-SNAPSHOT</version><!--项目的版本 snapshot为快照意思，代表当前为测试版， 开发版，相对的为release，意味发行版本，代表稳定版 -->\n\t<packaging>war</packaging><!--问你项目需要打成什么包？pom jar war？一般javaWeb项目填war -->\n\t<name>ssm Maven Webapp</name>\n\t<!-- FIXME change it to the project's website -->\n\t<url>http://www.example.com</url>\n\n\t<!-- 集中定义常用依赖版本号 -->\n\t<properties>\n\t\t<junit.version>4.11</junit.version>\n\t\t<servlet-api.version>3.1</servlet-api.version>\n\t\t<jsp-api.version>2.2</jsp-api.version>\n\t\t<jstl.version>1.2</jstl.version>\n\t\t<mysql.version>8.0.17</mysql.version>\n\t\t<mybatis.version>3.2.7</mybatis.version>\n\n\t\t<spring.version>4.2.4.RELEASE</spring.version>\n\t\t<fastjson.version>1.2.56</fastjson.version>\n\t\t<c3p0.version>0.9.1.2</c3p0.version>\n\t\t<jedis.version>3.0.1</jedis.version>\n\t\t<commons-fileupload.version>1.3.3</commons-fileupload.version>\n\n\t\t<log4j.version>1.2.12</log4j.version>\n\t\t<mybatis-spring.version>1.2.2</mybatis-spring.version>\n\t\t<mybatis-ehcache.version>1.0.2</mybatis-ehcache.version>\n\t\t<jsqlparser>0.9.1</jsqlparser>\n\t\t<pagehelper.version>3.4.2</pagehelper.version>\n\n\t\t<validation-api.version>1.0.0.GA</validation-api.version>\n\t\t<tomcat-servlet-api.version>7.0.62</tomcat-servlet-api.version>\n\t\t<poi.version>3.17</poi.version>\n\t\t<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n\t\t<hadoop.version>2.7.3</hadoop.version>\n\t\t<maven.compiler.source>1.7</maven.compiler.source>\n\t\t<maven.compiler.target>1.7</maven.compiler.target>\n\t</properties>\n\t<dependencies>\n\n\t\t<!-- ******************************************** spring *************************** -->\n\t\t<!--提供对AspectJ的支持 -->\n\t\t<dependency>\n\t\t\t<groupId>org.springframework</groupId>\n\t\t\t<artifactId>spring-aspects</artifactId>\n\t\t\t<version>${spring.version}</version>\n\t\t</dependency>\n\t\t<!--这个jar 文件包含在应用中使用Spring 的AOP 特性时所需的类和源码级元数据支持。使用基于AOP 的Spring特性， 如声明型事务管理（Declarative \n\t\t\tTransaction Management），也要在应用里包含这个jar包。 -->\n\t\t<dependency>\n\t\t\t<groupId>org.springframework</groupId>\n\t\t\t<artifactId>spring-aop</artifactId>\n\t\t\t<version>${spring.version}</version>\n\t\t</dependency>\n\t\t<!--这个jar 文件包含对Spring 对JDBC 数据访问进行封装的所有类。 -->\n\t\t<dependency>\n\t\t\t<groupId>org.springframework</groupId>\n\t\t\t<artifactId>spring-jdbc</artifactId>\n\t\t\t<version>${spring.version}</version>\n\t\t</dependency>\n\t\t<!--基于tx的事务管理需要 -->\n\t\t<dependency>\n\t\t\t<groupId>org.springframework</groupId>\n\t\t\t<artifactId>spring-tx</artifactId>\n\t\t\t<version>${spring.version}</version>\n\t\t</dependency>\n\t\t<!--这个jar 文件是所有应用都要用到的，它包含访问配置文件、 创建和管理bean 以及进行Inversion of Control / \n\t\t\tDependency Injection（IoC/DI）操作相关的所有类。 如果应用只需基本的IoC/DI 支持，引入spring-core.jar \n\t\t\t及spring-beans.jar 文件就可以了。 外部依赖spring-core -->\n\t\t<dependency>\n\t\t\t<groupId>org.springframework</groupId>\n\t\t\t<artifactId>spring-beans</artifactId>\n\t\t\t<version>${spring.version}</version>\n\t\t</dependency>\n\t\t<!--这个jar 文件包含支持UI模版（Velocity，FreeMarker，JasperReports）， 邮件服务，脚本服务(JRuby)，缓存Cache（EHCache）， \n\t\t\t任务计划Scheduling（uartz）方面的类。 外部依赖spring-context, (spring-jdbc, Velocity, FreeMarker, \n\t\t\tJasperReports, BSH, Groovy, JRuby, Quartz, EHCache) -->\n\t\t<dependency>\n\t\t\t<groupId>org.springframework</groupId>\n\t\t\t<artifactId>spring-context-support</artifactId>\n\t\t\t<version>${spring.version}</version>\n\t\t</dependency>\n\t\t<!--spring表达式语言 -->\n\t\t<dependency>\n\t\t\t<groupId>org.springframework</groupId>\n\t\t\t<artifactId>spring-expression</artifactId>\n\t\t\t<version>${spring.version}</version>\n\t\t</dependency>\n\t\t<!--基础web功能，如文件上传 -->\n\t\t<dependency>\n\t\t\t<groupId>org.springframework</groupId>\n\t\t\t<artifactId>spring-web</artifactId>\n\t\t\t<version>${spring.version}</version>\n\t\t</dependency>\n\t\t<!--spring测试，提供junit与mock测试功能 -->\n\t\t<dependency>\n\t\t\t<groupId>org.springframework</groupId>\n\t\t\t<artifactId>spring-test</artifactId>\n\t\t\t<version>${spring.version}</version>\n\t\t\t<scope>test</scope>\n\t\t</dependency>\n\t\t<!--commons-lang3 -->\n\t\t<dependency>\n\t\t\t<groupId>org.apache.commons</groupId>\n\t\t\t<artifactId>commons-lang3</artifactId>\n\t\t\t<version>3.4</version>\n\t\t</dependency>\n\t\t<!-- ****************************** 引入springmvc，mvc实现*************************************** -->\n\t\t<dependency>\n\t\t\t<groupId>org.springframework</groupId>\n\t\t\t<artifactId>spring-webmvc</artifactId>\n\t\t\t<version>${spring.version}</version>\n\t\t</dependency>\n\n\t\t<!-- ******************************* 引入junit，做单元测试用，@Test注解需要它 ********************** -->\n\t\t<dependency>\n\t\t\t<groupId>junit</groupId>\n\t\t\t<artifactId>junit</artifactId>\n\t\t\t<version>${junit.version}</version>\n\t\t\t<scope>test</scope>\n\t\t</dependency>\n\n\t\t<!-- ******************************* 引入mysql *********************************************** -->\n\t\t<dependency>\n\t\t\t<groupId>mysql</groupId>\n\t\t\t<artifactId>mysql-connector-java</artifactId>\n\t\t\t<version>${mysql.version}</version>\n\t\t</dependency>\n\t\t<!-- ******************************* 引入mybatis ********************************************* -->\n\t\t<dependency>\n\t\t\t<groupId>org.mybatis</groupId>\n\t\t\t<artifactId>mybatis</artifactId>\n\t\t\t<version>${mybatis.version}</version>\n\t\t</dependency>\n\n\t\t<!-- ****************************************** 分页 ******************************************** -->\n\t\t<dependency>\n\t\t\t<groupId>com.github.jsqlparser</groupId>\n\t\t\t<artifactId>jsqlparser</artifactId>\n\t\t\t<version>${jsqlparser}</version>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>com.github.pagehelper</groupId>\n\t\t\t<artifactId>pagehelper</artifactId>\n\t\t\t<version>${pagehelper.version}</version>\n\t\t</dependency>\n\t\t<!-- ******************************* c3p0连接池 *************************************************** -->\n\t\t<dependency>\n\t\t\t<groupId>c3p0</groupId>\n\t\t\t<artifactId>c3p0</artifactId>\n\t\t\t<version>${c3p0.version}</version>\n\t\t</dependency>\n\n\t\t<!-- ******************************** jedis，Jedis是Redis官方推荐的Java连接开发工具。*********************** -->\n\t\t<dependency>\n\t\t\t<groupId>redis.clients</groupId>\n\t\t\t<artifactId>jedis</artifactId>\n\t\t\t<version>${jedis.version}</version>\n\t\t</dependency>\n\n\t\t<!-- ******************************* fastjson，把对象和json格式互转换时需要用到 ****************************** -->\n\t\t<dependency>\n\t\t\t<groupId>com.alibaba</groupId>\n\t\t\t<artifactId>fastjson</artifactId>\n\t\t\t<version>${fastjson.version}</version>\n\t\t</dependency>\n\n\t\t<!-- ***************************************** commons ************************************* -->\n\t\t<dependency>\n\t\t\t<groupId>commons-fileupload</groupId>\n\t\t\t<artifactId>commons-fileupload</artifactId>\n\t\t\t<version>${commons-fileupload.version}</version>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>commons-io</groupId>\n\t\t\t<artifactId>commons-io</artifactId>\n\t\t\t<version>2.4</version>\n\t\t</dependency>\n\n\t\t<!-- ***************************** 引入log4j，生成日志需要这个，log for java ，4是 for的近音  ************************ -->\n\t\t<dependency>\n\t\t\t<groupId>log4j</groupId>\n\t\t\t<artifactId>log4j</artifactId>\n\t\t\t<version>${log4j.version}</version>\n\t\t</dependency>\n\n\n\t\t<!-- ****************************************** 引入mybatis和spring ***************************** -->\n\t\t<dependency>\n\t\t\t<groupId>org.mybatis</groupId>\n\t\t\t<artifactId>mybatis-spring</artifactId>\n\t\t\t<version>${mybatis-spring.version}</version>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>org.mybatis.caches</groupId>\n\t\t\t<artifactId>mybatis-ehcache</artifactId>\n\t\t\t<version>${mybatis-ehcache.version}</version>\n\t\t</dependency>\n\n\t\t<!-- ****************************************** poi导出excel ************************************ -->\n\t\t<dependency>\n\t\t\t<groupId>org.apache.poi</groupId>\n\t\t\t<artifactId>poi</artifactId>\n\t\t\t<version>${poi.version}</version>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>org.apache.poi</groupId>\n\t\t\t<artifactId>poi-ooxml</artifactId>\n\t\t\t<version>${poi.version}</version>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>org.apache.poi</groupId>\n\t\t\t<artifactId>poi-ooxml-schemas</artifactId>\n\t\t\t<version>${poi.version}</version>\n\t\t</dependency>\n\t\t<!-- 防止 程序包javax.servlet.annotation不存在 -->\n\t\t<dependency>\n\t\t\t<groupId>org.apache.tomcat</groupId>\n\t\t\t<artifactId>tomcat-servlet-api</artifactId>\n\t\t\t<version>${tomcat-servlet-api.version}</version>\n\t\t</dependency>\n\n\t\t<!-- ******************************************* 校验器 ***************************************** -->\n\t\t<dependency>\n\t\t\t<groupId>javax.validation</groupId>\n\t\t\t<artifactId>validation-api</artifactId>\n\t\t\t<version>${validation-api.version}</version>\n\t\t</dependency>\n\n\t\t<!-- ******************************************* 文件服务器 ************************************** -->\n\t\t<dependency>\n\t\t\t<groupId>org.csource.fastdfs</groupId>\n\t\t\t<artifactId>fastdfs</artifactId>\n\t\t\t<version>1.2</version>\n\t\t</dependency>\n\n\n\t\t<!-- ********************************** 阿里短信依赖 ************************************** -->\n\t\t<dependency>\n\t\t\t<groupId>com.aliyun</groupId>\n\t\t\t<artifactId>aliyun-java-sdk-core</artifactId>\n\t\t\t<version>3.7.0</version>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>com.aliyun</groupId>\n\t\t\t<artifactId>aliyun-java-sdk-ecs</artifactId>\n\t\t\t<version>4.11.0</version>\n\t\t</dependency>\n\n\t\t<!-- ********************************** hadoop **************************************** -->\n\t\t<dependency>\n\t\t\t<groupId>org.apache.hadoop</groupId>\n\t\t\t<artifactId>hadoop-common</artifactId>\n\t\t\t<version>${hadoop.version}</version>\n\t\t</dependency>\n\n\t\t<!-- https://mvnrepository.com/artifact/org.apache.hadoop/hadoop-client -->\n\t\t<dependency>\n\t\t\t<groupId>org.apache.hadoop</groupId>\n\t\t\t<artifactId>hadoop-client</artifactId>\n\t\t\t<version>${hadoop.version}</version>\n\t\t</dependency>\n\n\t\t<!-- https://mvnrepository.com/artifact/org.apache.hadoop/hadoop-hdfs -->\n\t\t<dependency>\n\t\t\t<groupId>org.apache.hadoop</groupId>\n\t\t\t<artifactId>hadoop-hdfs</artifactId>\n\t\t\t<version>${hadoop.version}</version>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>jdk.tools</groupId>\n\t\t\t<artifactId>jdk.tools</artifactId>\n\t\t\t<version>1.8</version>\n\t\t\t<scope>system</scope>\n\t\t\t<systemPath>${JAVA_HOME}/lib/tools.jar</systemPath>\n\t\t</dependency>\n\t\t<!-- ******************************** servlet-api******************************************* -->\n\t\t<dependency>\n\t\t\t<groupId>javax.servlet</groupId>\n\t\t\t<artifactId>javax.servlet-api</artifactId>\n\t\t\t<version>3.0.1</version>\n\t\t\t<scope>provided</scope>\n\t\t</dependency>\n\n\t\t<!-- 暂时没用上 -->\n\n\t\t<!-- ******************************** jsp的依赖 ********************************************** -->\n\t\t<dependency>\n\t\t\t<groupId>javax.servlet.jsp</groupId>\n\t\t\t<artifactId>jsp-api</artifactId>\n\t\t\t<version>${jsp-api.version}</version>\n\t\t\t<scope>provided</scope>\n\t\t</dependency>\n\n\t\t\n\t\t<!-- ******************************** 引入jstl，书写jstl时要用到 ********************************* -->\n\t\t<dependency>\n\t\t\t<groupId>javax.servlet</groupId>\n\t\t\t<artifactId>jstl</artifactId>\n\t\t\t<version>${jstl.version}</version>\n\t\t</dependency>\n\t\t<!--ueditor，一个富文本编辑器 -->\n\t\t<dependency>\n\t\t\t<groupId>com.gitee.qdbp.thirdparty</groupId>\n\t\t\t<artifactId>ueditor</artifactId>\n\t\t\t<version>1.4.3.3</version>\n\t\t</dependency>\n\t\t<!--jackson，把对象和json格式互转换时需要用到 -->\n\t\t<dependency>\n\t\t\t<groupId>com.fasterxml.jackson.core</groupId>\n\t\t\t<artifactId>jackson-databind</artifactId>\n\t\t\t<version>2.9.7</version>\n\t\t</dependency>\n\t\t\n\t\t<!--dbcp，还记得数据库连接池么？？还有C3P0，druid这些 -->\n\t\t<dependency>\n\t\t\t<groupId>commons-dbcp</groupId>\n\t\t\t<artifactId>commons-dbcp</artifactId>\n\t\t\t<version>1.4</version>\n\t\t</dependency>\n\t\t<!--set get方法使用注解开发时需要它 -->\n\t\t<dependency>\n\t\t\t<groupId>org.projectlombok</groupId>\n\t\t\t<artifactId>lombok</artifactId>\n\t\t\t<version>1.18.4</version>\n\t\t\t<scope>provided</scope>\n\t\t</dependency>\n\t\t\n\n\t</dependencies>\n\t<build>\n\t\t<finalName>ssm</finalName><!--改项目名的时候改这里 -->\n\n\t\t<plugins>\n\t\t\t<!-- maven插件控制 -->\n\t\t\t<plugin>\n\t\t\t\t<groupId>org.apache.maven.plugins</groupId>\n\t\t\t\t<artifactId>maven-compiler-plugin</artifactId>\n\t\t\t\t<version>3.1</version>\n\t\t\t\t<configuration>\n\t\t\t\t\t<source>1.8</source>\n\t\t\t\t\t<target>1.8</target>\n\t\t\t\t\t<encoding>utf-8</encoding>\n\t\t\t\t</configuration>\n\t\t\t</plugin>\n\t\t\t<plugin>\n\t\t\t\t<groupId>org.apache.tomcat.maven</groupId>\n\t\t\t\t<artifactId>tomcat7-maven-plugin</artifactId>\n\t\t\t\t<version>2.2</version>\n\t\t\t\t<configuration>\n\t\t\t\t\t<!--端口控制 -->\n\t\t\t\t\t<port>8080</port>\n\t\t\t\t\t<!--项目路径控制意味着http://localhost:8080/abc -->\n\t\t\t\t\t<!-- <path>/abc</path> -->\n\t\t\t\t\t<!--编码 -->\n\t\t\t\t\t<uriEncoding>UTF-8</uriEncoding>\n\t\t\t\t</configuration>\n\t\t\t</plugin>\n\t\t</plugins>\n\t\t<resources>\n\t\t\t<resource>\n\t\t\t\t<directory>src/main/java</directory>\n\t\t\t\t<includes>\n\t\t\t\t\t<include>**/*.xml</include>\n\t\t\t\t</includes>\n\t\t\t\t<filtering>true</filtering>\n\t\t\t</resource>\n\t\t\t<resource>\n\t\t\t\t<directory>src/main/resources</directory>\n\t\t\t\t<includes>\n\t\t\t\t\t<include>**/*.xml</include>\n\t\t\t\t\t<include>**/*.properties</include>\n\t\t\t\t</includes>\n\t\t\t</resource>\n\n\t\t</resources>\n\n\t</build>\n\n</project>\n```\n","source":"_posts/BookMark/学习笔记/ssm框架完整pom依赖（附加 redis、fastDFS、阿里短信验证、poi、hadoop） --菜鸟小回.md","raw":"# ssm框架完整pom依赖（附加 redis、fastDFS、阿里短信验证、poi、hadoop）\n```javascript?linenums\n<?xml version=\"1.0\" encoding=\"UTF-8\"?><!--指定xml文档的版本和编码方式 -->\n<!--project是所有pom.xml的根元素， 它还声明了一些POM相关的命名空间及xsd元素， 虽然这些属性不是必须的， 但使用这些属性能够让第三方工具 \n\t(如：IDE中的xml编辑器)帮助我们快速编辑POM -->\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n\txsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n\t<!--指定了当前POM模型的版本，对于maven2及maven3来说，它只能是4.0.0。 这段代码中最重要的是包含groupId,artifactId和version的三行。 \n\t\t这三个元素定义了一个项目基本的坐标，在maven的世界， 任何的jar,pom或者war都是以基于这些基本的坐标进行区分的。 -->\n\t<modelVersion>4.0.0</modelVersion>\n\n\t<groupId>com.yun</groupId><!--填写你的组织名例如 -->\n\t<artifactId>test</artifactId><!--项目名字 -->\n\t<version>1.0-SNAPSHOT</version><!--项目的版本 snapshot为快照意思，代表当前为测试版， 开发版，相对的为release，意味发行版本，代表稳定版 -->\n\t<packaging>war</packaging><!--问你项目需要打成什么包？pom jar war？一般javaWeb项目填war -->\n\t<name>ssm Maven Webapp</name>\n\t<!-- FIXME change it to the project's website -->\n\t<url>http://www.example.com</url>\n\n\t<!-- 集中定义常用依赖版本号 -->\n\t<properties>\n\t\t<junit.version>4.11</junit.version>\n\t\t<servlet-api.version>3.1</servlet-api.version>\n\t\t<jsp-api.version>2.2</jsp-api.version>\n\t\t<jstl.version>1.2</jstl.version>\n\t\t<mysql.version>8.0.17</mysql.version>\n\t\t<mybatis.version>3.2.7</mybatis.version>\n\n\t\t<spring.version>4.2.4.RELEASE</spring.version>\n\t\t<fastjson.version>1.2.56</fastjson.version>\n\t\t<c3p0.version>0.9.1.2</c3p0.version>\n\t\t<jedis.version>3.0.1</jedis.version>\n\t\t<commons-fileupload.version>1.3.3</commons-fileupload.version>\n\n\t\t<log4j.version>1.2.12</log4j.version>\n\t\t<mybatis-spring.version>1.2.2</mybatis-spring.version>\n\t\t<mybatis-ehcache.version>1.0.2</mybatis-ehcache.version>\n\t\t<jsqlparser>0.9.1</jsqlparser>\n\t\t<pagehelper.version>3.4.2</pagehelper.version>\n\n\t\t<validation-api.version>1.0.0.GA</validation-api.version>\n\t\t<tomcat-servlet-api.version>7.0.62</tomcat-servlet-api.version>\n\t\t<poi.version>3.17</poi.version>\n\t\t<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n\t\t<hadoop.version>2.7.3</hadoop.version>\n\t\t<maven.compiler.source>1.7</maven.compiler.source>\n\t\t<maven.compiler.target>1.7</maven.compiler.target>\n\t</properties>\n\t<dependencies>\n\n\t\t<!-- ******************************************** spring *************************** -->\n\t\t<!--提供对AspectJ的支持 -->\n\t\t<dependency>\n\t\t\t<groupId>org.springframework</groupId>\n\t\t\t<artifactId>spring-aspects</artifactId>\n\t\t\t<version>${spring.version}</version>\n\t\t</dependency>\n\t\t<!--这个jar 文件包含在应用中使用Spring 的AOP 特性时所需的类和源码级元数据支持。使用基于AOP 的Spring特性， 如声明型事务管理（Declarative \n\t\t\tTransaction Management），也要在应用里包含这个jar包。 -->\n\t\t<dependency>\n\t\t\t<groupId>org.springframework</groupId>\n\t\t\t<artifactId>spring-aop</artifactId>\n\t\t\t<version>${spring.version}</version>\n\t\t</dependency>\n\t\t<!--这个jar 文件包含对Spring 对JDBC 数据访问进行封装的所有类。 -->\n\t\t<dependency>\n\t\t\t<groupId>org.springframework</groupId>\n\t\t\t<artifactId>spring-jdbc</artifactId>\n\t\t\t<version>${spring.version}</version>\n\t\t</dependency>\n\t\t<!--基于tx的事务管理需要 -->\n\t\t<dependency>\n\t\t\t<groupId>org.springframework</groupId>\n\t\t\t<artifactId>spring-tx</artifactId>\n\t\t\t<version>${spring.version}</version>\n\t\t</dependency>\n\t\t<!--这个jar 文件是所有应用都要用到的，它包含访问配置文件、 创建和管理bean 以及进行Inversion of Control / \n\t\t\tDependency Injection（IoC/DI）操作相关的所有类。 如果应用只需基本的IoC/DI 支持，引入spring-core.jar \n\t\t\t及spring-beans.jar 文件就可以了。 外部依赖spring-core -->\n\t\t<dependency>\n\t\t\t<groupId>org.springframework</groupId>\n\t\t\t<artifactId>spring-beans</artifactId>\n\t\t\t<version>${spring.version}</version>\n\t\t</dependency>\n\t\t<!--这个jar 文件包含支持UI模版（Velocity，FreeMarker，JasperReports）， 邮件服务，脚本服务(JRuby)，缓存Cache（EHCache）， \n\t\t\t任务计划Scheduling（uartz）方面的类。 外部依赖spring-context, (spring-jdbc, Velocity, FreeMarker, \n\t\t\tJasperReports, BSH, Groovy, JRuby, Quartz, EHCache) -->\n\t\t<dependency>\n\t\t\t<groupId>org.springframework</groupId>\n\t\t\t<artifactId>spring-context-support</artifactId>\n\t\t\t<version>${spring.version}</version>\n\t\t</dependency>\n\t\t<!--spring表达式语言 -->\n\t\t<dependency>\n\t\t\t<groupId>org.springframework</groupId>\n\t\t\t<artifactId>spring-expression</artifactId>\n\t\t\t<version>${spring.version}</version>\n\t\t</dependency>\n\t\t<!--基础web功能，如文件上传 -->\n\t\t<dependency>\n\t\t\t<groupId>org.springframework</groupId>\n\t\t\t<artifactId>spring-web</artifactId>\n\t\t\t<version>${spring.version}</version>\n\t\t</dependency>\n\t\t<!--spring测试，提供junit与mock测试功能 -->\n\t\t<dependency>\n\t\t\t<groupId>org.springframework</groupId>\n\t\t\t<artifactId>spring-test</artifactId>\n\t\t\t<version>${spring.version}</version>\n\t\t\t<scope>test</scope>\n\t\t</dependency>\n\t\t<!--commons-lang3 -->\n\t\t<dependency>\n\t\t\t<groupId>org.apache.commons</groupId>\n\t\t\t<artifactId>commons-lang3</artifactId>\n\t\t\t<version>3.4</version>\n\t\t</dependency>\n\t\t<!-- ****************************** 引入springmvc，mvc实现*************************************** -->\n\t\t<dependency>\n\t\t\t<groupId>org.springframework</groupId>\n\t\t\t<artifactId>spring-webmvc</artifactId>\n\t\t\t<version>${spring.version}</version>\n\t\t</dependency>\n\n\t\t<!-- ******************************* 引入junit，做单元测试用，@Test注解需要它 ********************** -->\n\t\t<dependency>\n\t\t\t<groupId>junit</groupId>\n\t\t\t<artifactId>junit</artifactId>\n\t\t\t<version>${junit.version}</version>\n\t\t\t<scope>test</scope>\n\t\t</dependency>\n\n\t\t<!-- ******************************* 引入mysql *********************************************** -->\n\t\t<dependency>\n\t\t\t<groupId>mysql</groupId>\n\t\t\t<artifactId>mysql-connector-java</artifactId>\n\t\t\t<version>${mysql.version}</version>\n\t\t</dependency>\n\t\t<!-- ******************************* 引入mybatis ********************************************* -->\n\t\t<dependency>\n\t\t\t<groupId>org.mybatis</groupId>\n\t\t\t<artifactId>mybatis</artifactId>\n\t\t\t<version>${mybatis.version}</version>\n\t\t</dependency>\n\n\t\t<!-- ****************************************** 分页 ******************************************** -->\n\t\t<dependency>\n\t\t\t<groupId>com.github.jsqlparser</groupId>\n\t\t\t<artifactId>jsqlparser</artifactId>\n\t\t\t<version>${jsqlparser}</version>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>com.github.pagehelper</groupId>\n\t\t\t<artifactId>pagehelper</artifactId>\n\t\t\t<version>${pagehelper.version}</version>\n\t\t</dependency>\n\t\t<!-- ******************************* c3p0连接池 *************************************************** -->\n\t\t<dependency>\n\t\t\t<groupId>c3p0</groupId>\n\t\t\t<artifactId>c3p0</artifactId>\n\t\t\t<version>${c3p0.version}</version>\n\t\t</dependency>\n\n\t\t<!-- ******************************** jedis，Jedis是Redis官方推荐的Java连接开发工具。*********************** -->\n\t\t<dependency>\n\t\t\t<groupId>redis.clients</groupId>\n\t\t\t<artifactId>jedis</artifactId>\n\t\t\t<version>${jedis.version}</version>\n\t\t</dependency>\n\n\t\t<!-- ******************************* fastjson，把对象和json格式互转换时需要用到 ****************************** -->\n\t\t<dependency>\n\t\t\t<groupId>com.alibaba</groupId>\n\t\t\t<artifactId>fastjson</artifactId>\n\t\t\t<version>${fastjson.version}</version>\n\t\t</dependency>\n\n\t\t<!-- ***************************************** commons ************************************* -->\n\t\t<dependency>\n\t\t\t<groupId>commons-fileupload</groupId>\n\t\t\t<artifactId>commons-fileupload</artifactId>\n\t\t\t<version>${commons-fileupload.version}</version>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>commons-io</groupId>\n\t\t\t<artifactId>commons-io</artifactId>\n\t\t\t<version>2.4</version>\n\t\t</dependency>\n\n\t\t<!-- ***************************** 引入log4j，生成日志需要这个，log for java ，4是 for的近音  ************************ -->\n\t\t<dependency>\n\t\t\t<groupId>log4j</groupId>\n\t\t\t<artifactId>log4j</artifactId>\n\t\t\t<version>${log4j.version}</version>\n\t\t</dependency>\n\n\n\t\t<!-- ****************************************** 引入mybatis和spring ***************************** -->\n\t\t<dependency>\n\t\t\t<groupId>org.mybatis</groupId>\n\t\t\t<artifactId>mybatis-spring</artifactId>\n\t\t\t<version>${mybatis-spring.version}</version>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>org.mybatis.caches</groupId>\n\t\t\t<artifactId>mybatis-ehcache</artifactId>\n\t\t\t<version>${mybatis-ehcache.version}</version>\n\t\t</dependency>\n\n\t\t<!-- ****************************************** poi导出excel ************************************ -->\n\t\t<dependency>\n\t\t\t<groupId>org.apache.poi</groupId>\n\t\t\t<artifactId>poi</artifactId>\n\t\t\t<version>${poi.version}</version>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>org.apache.poi</groupId>\n\t\t\t<artifactId>poi-ooxml</artifactId>\n\t\t\t<version>${poi.version}</version>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>org.apache.poi</groupId>\n\t\t\t<artifactId>poi-ooxml-schemas</artifactId>\n\t\t\t<version>${poi.version}</version>\n\t\t</dependency>\n\t\t<!-- 防止 程序包javax.servlet.annotation不存在 -->\n\t\t<dependency>\n\t\t\t<groupId>org.apache.tomcat</groupId>\n\t\t\t<artifactId>tomcat-servlet-api</artifactId>\n\t\t\t<version>${tomcat-servlet-api.version}</version>\n\t\t</dependency>\n\n\t\t<!-- ******************************************* 校验器 ***************************************** -->\n\t\t<dependency>\n\t\t\t<groupId>javax.validation</groupId>\n\t\t\t<artifactId>validation-api</artifactId>\n\t\t\t<version>${validation-api.version}</version>\n\t\t</dependency>\n\n\t\t<!-- ******************************************* 文件服务器 ************************************** -->\n\t\t<dependency>\n\t\t\t<groupId>org.csource.fastdfs</groupId>\n\t\t\t<artifactId>fastdfs</artifactId>\n\t\t\t<version>1.2</version>\n\t\t</dependency>\n\n\n\t\t<!-- ********************************** 阿里短信依赖 ************************************** -->\n\t\t<dependency>\n\t\t\t<groupId>com.aliyun</groupId>\n\t\t\t<artifactId>aliyun-java-sdk-core</artifactId>\n\t\t\t<version>3.7.0</version>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>com.aliyun</groupId>\n\t\t\t<artifactId>aliyun-java-sdk-ecs</artifactId>\n\t\t\t<version>4.11.0</version>\n\t\t</dependency>\n\n\t\t<!-- ********************************** hadoop **************************************** -->\n\t\t<dependency>\n\t\t\t<groupId>org.apache.hadoop</groupId>\n\t\t\t<artifactId>hadoop-common</artifactId>\n\t\t\t<version>${hadoop.version}</version>\n\t\t</dependency>\n\n\t\t<!-- https://mvnrepository.com/artifact/org.apache.hadoop/hadoop-client -->\n\t\t<dependency>\n\t\t\t<groupId>org.apache.hadoop</groupId>\n\t\t\t<artifactId>hadoop-client</artifactId>\n\t\t\t<version>${hadoop.version}</version>\n\t\t</dependency>\n\n\t\t<!-- https://mvnrepository.com/artifact/org.apache.hadoop/hadoop-hdfs -->\n\t\t<dependency>\n\t\t\t<groupId>org.apache.hadoop</groupId>\n\t\t\t<artifactId>hadoop-hdfs</artifactId>\n\t\t\t<version>${hadoop.version}</version>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>jdk.tools</groupId>\n\t\t\t<artifactId>jdk.tools</artifactId>\n\t\t\t<version>1.8</version>\n\t\t\t<scope>system</scope>\n\t\t\t<systemPath>${JAVA_HOME}/lib/tools.jar</systemPath>\n\t\t</dependency>\n\t\t<!-- ******************************** servlet-api******************************************* -->\n\t\t<dependency>\n\t\t\t<groupId>javax.servlet</groupId>\n\t\t\t<artifactId>javax.servlet-api</artifactId>\n\t\t\t<version>3.0.1</version>\n\t\t\t<scope>provided</scope>\n\t\t</dependency>\n\n\t\t<!-- 暂时没用上 -->\n\n\t\t<!-- ******************************** jsp的依赖 ********************************************** -->\n\t\t<dependency>\n\t\t\t<groupId>javax.servlet.jsp</groupId>\n\t\t\t<artifactId>jsp-api</artifactId>\n\t\t\t<version>${jsp-api.version}</version>\n\t\t\t<scope>provided</scope>\n\t\t</dependency>\n\n\t\t\n\t\t<!-- ******************************** 引入jstl，书写jstl时要用到 ********************************* -->\n\t\t<dependency>\n\t\t\t<groupId>javax.servlet</groupId>\n\t\t\t<artifactId>jstl</artifactId>\n\t\t\t<version>${jstl.version}</version>\n\t\t</dependency>\n\t\t<!--ueditor，一个富文本编辑器 -->\n\t\t<dependency>\n\t\t\t<groupId>com.gitee.qdbp.thirdparty</groupId>\n\t\t\t<artifactId>ueditor</artifactId>\n\t\t\t<version>1.4.3.3</version>\n\t\t</dependency>\n\t\t<!--jackson，把对象和json格式互转换时需要用到 -->\n\t\t<dependency>\n\t\t\t<groupId>com.fasterxml.jackson.core</groupId>\n\t\t\t<artifactId>jackson-databind</artifactId>\n\t\t\t<version>2.9.7</version>\n\t\t</dependency>\n\t\t\n\t\t<!--dbcp，还记得数据库连接池么？？还有C3P0，druid这些 -->\n\t\t<dependency>\n\t\t\t<groupId>commons-dbcp</groupId>\n\t\t\t<artifactId>commons-dbcp</artifactId>\n\t\t\t<version>1.4</version>\n\t\t</dependency>\n\t\t<!--set get方法使用注解开发时需要它 -->\n\t\t<dependency>\n\t\t\t<groupId>org.projectlombok</groupId>\n\t\t\t<artifactId>lombok</artifactId>\n\t\t\t<version>1.18.4</version>\n\t\t\t<scope>provided</scope>\n\t\t</dependency>\n\t\t\n\n\t</dependencies>\n\t<build>\n\t\t<finalName>ssm</finalName><!--改项目名的时候改这里 -->\n\n\t\t<plugins>\n\t\t\t<!-- maven插件控制 -->\n\t\t\t<plugin>\n\t\t\t\t<groupId>org.apache.maven.plugins</groupId>\n\t\t\t\t<artifactId>maven-compiler-plugin</artifactId>\n\t\t\t\t<version>3.1</version>\n\t\t\t\t<configuration>\n\t\t\t\t\t<source>1.8</source>\n\t\t\t\t\t<target>1.8</target>\n\t\t\t\t\t<encoding>utf-8</encoding>\n\t\t\t\t</configuration>\n\t\t\t</plugin>\n\t\t\t<plugin>\n\t\t\t\t<groupId>org.apache.tomcat.maven</groupId>\n\t\t\t\t<artifactId>tomcat7-maven-plugin</artifactId>\n\t\t\t\t<version>2.2</version>\n\t\t\t\t<configuration>\n\t\t\t\t\t<!--端口控制 -->\n\t\t\t\t\t<port>8080</port>\n\t\t\t\t\t<!--项目路径控制意味着http://localhost:8080/abc -->\n\t\t\t\t\t<!-- <path>/abc</path> -->\n\t\t\t\t\t<!--编码 -->\n\t\t\t\t\t<uriEncoding>UTF-8</uriEncoding>\n\t\t\t\t</configuration>\n\t\t\t</plugin>\n\t\t</plugins>\n\t\t<resources>\n\t\t\t<resource>\n\t\t\t\t<directory>src/main/java</directory>\n\t\t\t\t<includes>\n\t\t\t\t\t<include>**/*.xml</include>\n\t\t\t\t</includes>\n\t\t\t\t<filtering>true</filtering>\n\t\t\t</resource>\n\t\t\t<resource>\n\t\t\t\t<directory>src/main/resources</directory>\n\t\t\t\t<includes>\n\t\t\t\t\t<include>**/*.xml</include>\n\t\t\t\t\t<include>**/*.properties</include>\n\t\t\t\t</includes>\n\t\t\t</resource>\n\n\t\t</resources>\n\n\t</build>\n\n</project>\n```\n","slug":"BookMark/学习笔记/ssm框架完整pom依赖（附加 redis、fastDFS、阿里短信验证、poi、hadoop） --菜鸟小回","published":1,"date":"2022-07-18T09:51:13.000Z","updated":"2022-07-18T09:51:13.000Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cl7ptszoo0025aba5djf80j4m","content":"<h1><span id=\"ssm框架完整pom依赖附加-redis-fastdfs-阿里短信验证-poi-hadoop\">ssm框架完整pom依赖（附加 redis、fastDFS、阿里短信验证、poi、hadoop）</span></h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br><span class=\"line\">339</span><br><span class=\"line\">340</span><br><span class=\"line\">341</span><br><span class=\"line\">342</span><br><span class=\"line\">343</span><br><span class=\"line\">344</span><br><span class=\"line\">345</span><br><span class=\"line\">346</span><br><span class=\"line\">347</span><br><span class=\"line\">348</span><br><span class=\"line\">349</span><br><span class=\"line\">350</span><br><span class=\"line\">351</span><br><span class=\"line\">352</span><br><span class=\"line\">353</span><br><span class=\"line\">354</span><br><span class=\"line\">355</span><br><span class=\"line\">356</span><br><span class=\"line\">357</span><br><span class=\"line\">358</span><br><span class=\"line\">359</span><br><span class=\"line\">360</span><br><span class=\"line\">361</span><br><span class=\"line\">362</span><br><span class=\"line\">363</span><br><span class=\"line\">364</span><br><span class=\"line\">365</span><br><span class=\"line\">366</span><br><span class=\"line\">367</span><br><span class=\"line\">368</span><br><span class=\"line\">369</span><br><span class=\"line\">370</span><br><span class=\"line\">371</span><br><span class=\"line\">372</span><br><span class=\"line\">373</span><br><span class=\"line\">374</span><br><span class=\"line\">375</span><br><span class=\"line\">376</span><br><span class=\"line\">377</span><br><span class=\"line\">378</span><br><span class=\"line\">379</span><br><span class=\"line\">380</span><br><span class=\"line\">381</span><br><span class=\"line\">382</span><br><span class=\"line\">383</span><br><span class=\"line\">384</span><br><span class=\"line\">385</span><br><span class=\"line\">386</span><br><span class=\"line\">387</span><br><span class=\"line\">388</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;!--指定xml文档的版本和编码方式 --&gt;<br>&lt;!--project是所有pom.xml的根元素， 它还声明了一些POM相关的命名空间及xsd元素， 虽然这些属性不是必须的， 但使用这些属性能够让第三方工具 <br>\t(如：IDE中的xml编辑器)帮助我们快速编辑POM --&gt;<br>&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;<br>\txsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;<br>\t&lt;!--指定了当前POM模型的版本，对于maven2及maven3来说，它只能是4.0.0。 这段代码中最重要的是包含groupId,artifactId和version的三行。 <br>\t\t这三个元素定义了一个项目基本的坐标，在maven的世界， 任何的jar,pom或者war都是以基于这些基本的坐标进行区分的。 --&gt;<br>\t&lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;<br><br>\t&lt;groupId&gt;com.yun&lt;/groupId&gt;&lt;!--填写你的组织名例如 --&gt;<br>\t&lt;artifactId&gt;test&lt;/artifactId&gt;&lt;!--项目名字 --&gt;<br>\t&lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;&lt;!--项目的版本 snapshot为快照意思，代表当前为测试版， 开发版，相对的为release，意味发行版本，代表稳定版 --&gt;<br>\t&lt;packaging&gt;war&lt;/packaging&gt;&lt;!--问你项目需要打成什么包？pom jar war？一般javaWeb项目填war --&gt;<br>\t&lt;name&gt;ssm Maven Webapp&lt;/name&gt;<br>\t&lt;!-- FIXME change it to the project&#x27;s website --&gt;<br>\t&lt;url&gt;http://www.example.com&lt;/url&gt;<br><br>\t&lt;!-- 集中定义常用依赖版本号 --&gt;<br>\t&lt;properties&gt;<br>\t\t&lt;junit.version&gt;4.11&lt;/junit.version&gt;<br>\t\t&lt;servlet-api.version&gt;3.1&lt;/servlet-api.version&gt;<br>\t\t&lt;jsp-api.version&gt;2.2&lt;/jsp-api.version&gt;<br>\t\t&lt;jstl.version&gt;1.2&lt;/jstl.version&gt;<br>\t\t&lt;mysql.version&gt;8.0.17&lt;/mysql.version&gt;<br>\t\t&lt;mybatis.version&gt;3.2.7&lt;/mybatis.version&gt;<br><br>\t\t&lt;spring.version&gt;4.2.4.RELEASE&lt;/spring.version&gt;<br>\t\t&lt;fastjson.version&gt;1.2.56&lt;/fastjson.version&gt;<br>\t\t&lt;c3p0.version&gt;0.9.1.2&lt;/c3p0.version&gt;<br>\t\t&lt;jedis.version&gt;3.0.1&lt;/jedis.version&gt;<br>\t\t&lt;commons-fileupload.version&gt;1.3.3&lt;/commons-fileupload.version&gt;<br><br>\t\t&lt;log4j.version&gt;1.2.12&lt;/log4j.version&gt;<br>\t\t&lt;mybatis-spring.version&gt;1.2.2&lt;/mybatis-spring.version&gt;<br>\t\t&lt;mybatis-ehcache.version&gt;1.0.2&lt;/mybatis-ehcache.version&gt;<br>\t\t&lt;jsqlparser&gt;0.9.1&lt;/jsqlparser&gt;<br>\t\t&lt;pagehelper.version&gt;3.4.2&lt;/pagehelper.version&gt;<br><br>\t\t&lt;validation-api.version&gt;1.0.0.GA&lt;/validation-api.version&gt;<br>\t\t&lt;tomcat-servlet-api.version&gt;7.0.62&lt;/tomcat-servlet-api.version&gt;<br>\t\t&lt;poi.version&gt;3.17&lt;/poi.version&gt;<br>\t\t&lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;<br>\t\t&lt;hadoop.version&gt;2.7.3&lt;/hadoop.version&gt;<br>\t\t&lt;maven.compiler.source&gt;1.7&lt;/maven.compiler.source&gt;<br>\t\t&lt;maven.compiler.target&gt;1.7&lt;/maven.compiler.target&gt;<br>\t&lt;/properties&gt;<br>\t&lt;dependencies&gt;<br><br>\t\t&lt;!-- ******************************************** spring *************************** --&gt;<br>\t\t&lt;!--提供对AspectJ的支持 --&gt;<br>\t\t&lt;dependency&gt;<br>\t\t\t&lt;groupId&gt;org.springframework&lt;/groupId&gt;<br>\t\t\t&lt;artifactId&gt;spring-aspects&lt;/artifactId&gt;<br>\t\t\t&lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;<br>\t\t&lt;/dependency&gt;<br>\t\t&lt;!--这个jar 文件包含在应用中使用Spring 的AOP 特性时所需的类和源码级元数据支持。使用基于AOP 的Spring特性， 如声明型事务管理（Declarative <br>\t\t\tTransaction Management），也要在应用里包含这个jar包。 --&gt;<br>\t\t&lt;dependency&gt;<br>\t\t\t&lt;groupId&gt;org.springframework&lt;/groupId&gt;<br>\t\t\t&lt;artifactId&gt;spring-aop&lt;/artifactId&gt;<br>\t\t\t&lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;<br>\t\t&lt;/dependency&gt;<br>\t\t&lt;!--这个jar 文件包含对Spring 对JDBC 数据访问进行封装的所有类。 --&gt;<br>\t\t&lt;dependency&gt;<br>\t\t\t&lt;groupId&gt;org.springframework&lt;/groupId&gt;<br>\t\t\t&lt;artifactId&gt;spring-jdbc&lt;/artifactId&gt;<br>\t\t\t&lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;<br>\t\t&lt;/dependency&gt;<br>\t\t&lt;!--基于tx的事务管理需要 --&gt;<br>\t\t&lt;dependency&gt;<br>\t\t\t&lt;groupId&gt;org.springframework&lt;/groupId&gt;<br>\t\t\t&lt;artifactId&gt;spring-tx&lt;/artifactId&gt;<br>\t\t\t&lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;<br>\t\t&lt;/dependency&gt;<br>\t\t&lt;!--这个jar 文件是所有应用都要用到的，它包含访问配置文件、 创建和管理bean 以及进行Inversion of Control / <br>\t\t\tDependency Injection（IoC/DI）操作相关的所有类。 如果应用只需基本的IoC/DI 支持，引入spring-core.jar <br>\t\t\t及spring-beans.jar 文件就可以了。 外部依赖spring-core --&gt;<br>\t\t&lt;dependency&gt;<br>\t\t\t&lt;groupId&gt;org.springframework&lt;/groupId&gt;<br>\t\t\t&lt;artifactId&gt;spring-beans&lt;/artifactId&gt;<br>\t\t\t&lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;<br>\t\t&lt;/dependency&gt;<br>\t\t&lt;!--这个jar 文件包含支持UI模版（Velocity，FreeMarker，JasperReports）， 邮件服务，脚本服务(JRuby)，缓存Cache（EHCache）， <br>\t\t\t任务计划Scheduling（uartz）方面的类。 外部依赖spring-context, (spring-jdbc, Velocity, FreeMarker, <br>\t\t\tJasperReports, BSH, Groovy, JRuby, Quartz, EHCache) --&gt;<br>\t\t&lt;dependency&gt;<br>\t\t\t&lt;groupId&gt;org.springframework&lt;/groupId&gt;<br>\t\t\t&lt;artifactId&gt;spring-context-support&lt;/artifactId&gt;<br>\t\t\t&lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;<br>\t\t&lt;/dependency&gt;<br>\t\t&lt;!--spring表达式语言 --&gt;<br>\t\t&lt;dependency&gt;<br>\t\t\t&lt;groupId&gt;org.springframework&lt;/groupId&gt;<br>\t\t\t&lt;artifactId&gt;spring-expression&lt;/artifactId&gt;<br>\t\t\t&lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;<br>\t\t&lt;/dependency&gt;<br>\t\t&lt;!--基础web功能，如文件上传 --&gt;<br>\t\t&lt;dependency&gt;<br>\t\t\t&lt;groupId&gt;org.springframework&lt;/groupId&gt;<br>\t\t\t&lt;artifactId&gt;spring-web&lt;/artifactId&gt;<br>\t\t\t&lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;<br>\t\t&lt;/dependency&gt;<br>\t\t&lt;!--spring测试，提供junit与mock测试功能 --&gt;<br>\t\t&lt;dependency&gt;<br>\t\t\t&lt;groupId&gt;org.springframework&lt;/groupId&gt;<br>\t\t\t&lt;artifactId&gt;spring-test&lt;/artifactId&gt;<br>\t\t\t&lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;<br>\t\t\t&lt;scope&gt;test&lt;/scope&gt;<br>\t\t&lt;/dependency&gt;<br>\t\t&lt;!--commons-lang3 --&gt;<br>\t\t&lt;dependency&gt;<br>\t\t\t&lt;groupId&gt;org.apache.commons&lt;/groupId&gt;<br>\t\t\t&lt;artifactId&gt;commons-lang3&lt;/artifactId&gt;<br>\t\t\t&lt;version&gt;3.4&lt;/version&gt;<br>\t\t&lt;/dependency&gt;<br>\t\t&lt;!-- ****************************** 引入springmvc，mvc实现*************************************** --&gt;<br>\t\t&lt;dependency&gt;<br>\t\t\t&lt;groupId&gt;org.springframework&lt;/groupId&gt;<br>\t\t\t&lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt;<br>\t\t\t&lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;<br>\t\t&lt;/dependency&gt;<br><br>\t\t&lt;!-- ******************************* 引入junit，做单元测试用，@Test注解需要它 ********************** --&gt;<br>\t\t&lt;dependency&gt;<br>\t\t\t&lt;groupId&gt;junit&lt;/groupId&gt;<br>\t\t\t&lt;artifactId&gt;junit&lt;/artifactId&gt;<br>\t\t\t&lt;version&gt;$&#123;junit.version&#125;&lt;/version&gt;<br>\t\t\t&lt;scope&gt;test&lt;/scope&gt;<br>\t\t&lt;/dependency&gt;<br><br>\t\t&lt;!-- ******************************* 引入mysql *********************************************** --&gt;<br>\t\t&lt;dependency&gt;<br>\t\t\t&lt;groupId&gt;mysql&lt;/groupId&gt;<br>\t\t\t&lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;<br>\t\t\t&lt;version&gt;$&#123;mysql.version&#125;&lt;/version&gt;<br>\t\t&lt;/dependency&gt;<br>\t\t&lt;!-- ******************************* 引入mybatis ********************************************* --&gt;<br>\t\t&lt;dependency&gt;<br>\t\t\t&lt;groupId&gt;org.mybatis&lt;/groupId&gt;<br>\t\t\t&lt;artifactId&gt;mybatis&lt;/artifactId&gt;<br>\t\t\t&lt;version&gt;$&#123;mybatis.version&#125;&lt;/version&gt;<br>\t\t&lt;/dependency&gt;<br><br>\t\t&lt;!-- ****************************************** 分页 ******************************************** --&gt;<br>\t\t&lt;dependency&gt;<br>\t\t\t&lt;groupId&gt;com.github.jsqlparser&lt;/groupId&gt;<br>\t\t\t&lt;artifactId&gt;jsqlparser&lt;/artifactId&gt;<br>\t\t\t&lt;version&gt;$&#123;jsqlparser&#125;&lt;/version&gt;<br>\t\t&lt;/dependency&gt;<br>\t\t&lt;dependency&gt;<br>\t\t\t&lt;groupId&gt;com.github.pagehelper&lt;/groupId&gt;<br>\t\t\t&lt;artifactId&gt;pagehelper&lt;/artifactId&gt;<br>\t\t\t&lt;version&gt;$&#123;pagehelper.version&#125;&lt;/version&gt;<br>\t\t&lt;/dependency&gt;<br>\t\t&lt;!-- ******************************* c3p0连接池 *************************************************** --&gt;<br>\t\t&lt;dependency&gt;<br>\t\t\t&lt;groupId&gt;c3p0&lt;/groupId&gt;<br>\t\t\t&lt;artifactId&gt;c3p0&lt;/artifactId&gt;<br>\t\t\t&lt;version&gt;$&#123;c3p0.version&#125;&lt;/version&gt;<br>\t\t&lt;/dependency&gt;<br><br>\t\t&lt;!-- ******************************** jedis，Jedis是Redis官方推荐的Java连接开发工具。*********************** --&gt;<br>\t\t&lt;dependency&gt;<br>\t\t\t&lt;groupId&gt;redis.clients&lt;/groupId&gt;<br>\t\t\t&lt;artifactId&gt;jedis&lt;/artifactId&gt;<br>\t\t\t&lt;version&gt;$&#123;jedis.version&#125;&lt;/version&gt;<br>\t\t&lt;/dependency&gt;<br><br>\t\t&lt;!-- ******************************* fastjson，把对象和json格式互转换时需要用到 ****************************** --&gt;<br>\t\t&lt;dependency&gt;<br>\t\t\t&lt;groupId&gt;com.alibaba&lt;/groupId&gt;<br>\t\t\t&lt;artifactId&gt;fastjson&lt;/artifactId&gt;<br>\t\t\t&lt;version&gt;$&#123;fastjson.version&#125;&lt;/version&gt;<br>\t\t&lt;/dependency&gt;<br><br>\t\t&lt;!-- ***************************************** commons ************************************* --&gt;<br>\t\t&lt;dependency&gt;<br>\t\t\t&lt;groupId&gt;commons-fileupload&lt;/groupId&gt;<br>\t\t\t&lt;artifactId&gt;commons-fileupload&lt;/artifactId&gt;<br>\t\t\t&lt;version&gt;$&#123;commons-fileupload.version&#125;&lt;/version&gt;<br>\t\t&lt;/dependency&gt;<br>\t\t&lt;dependency&gt;<br>\t\t\t&lt;groupId&gt;commons-io&lt;/groupId&gt;<br>\t\t\t&lt;artifactId&gt;commons-io&lt;/artifactId&gt;<br>\t\t\t&lt;version&gt;2.4&lt;/version&gt;<br>\t\t&lt;/dependency&gt;<br><br>\t\t&lt;!-- ***************************** 引入log4j，生成日志需要这个，log for java ，4是 for的近音  ************************ --&gt;<br>\t\t&lt;dependency&gt;<br>\t\t\t&lt;groupId&gt;log4j&lt;/groupId&gt;<br>\t\t\t&lt;artifactId&gt;log4j&lt;/artifactId&gt;<br>\t\t\t&lt;version&gt;$&#123;log4j.version&#125;&lt;/version&gt;<br>\t\t&lt;/dependency&gt;<br><br><br>\t\t&lt;!-- ****************************************** 引入mybatis和spring ***************************** --&gt;<br>\t\t&lt;dependency&gt;<br>\t\t\t&lt;groupId&gt;org.mybatis&lt;/groupId&gt;<br>\t\t\t&lt;artifactId&gt;mybatis-spring&lt;/artifactId&gt;<br>\t\t\t&lt;version&gt;$&#123;mybatis-spring.version&#125;&lt;/version&gt;<br>\t\t&lt;/dependency&gt;<br>\t\t&lt;dependency&gt;<br>\t\t\t&lt;groupId&gt;org.mybatis.caches&lt;/groupId&gt;<br>\t\t\t&lt;artifactId&gt;mybatis-ehcache&lt;/artifactId&gt;<br>\t\t\t&lt;version&gt;$&#123;mybatis-ehcache.version&#125;&lt;/version&gt;<br>\t\t&lt;/dependency&gt;<br><br>\t\t&lt;!-- ****************************************** poi导出excel ************************************ --&gt;<br>\t\t&lt;dependency&gt;<br>\t\t\t&lt;groupId&gt;org.apache.poi&lt;/groupId&gt;<br>\t\t\t&lt;artifactId&gt;poi&lt;/artifactId&gt;<br>\t\t\t&lt;version&gt;$&#123;poi.version&#125;&lt;/version&gt;<br>\t\t&lt;/dependency&gt;<br>\t\t&lt;dependency&gt;<br>\t\t\t&lt;groupId&gt;org.apache.poi&lt;/groupId&gt;<br>\t\t\t&lt;artifactId&gt;poi-ooxml&lt;/artifactId&gt;<br>\t\t\t&lt;version&gt;$&#123;poi.version&#125;&lt;/version&gt;<br>\t\t&lt;/dependency&gt;<br>\t\t&lt;dependency&gt;<br>\t\t\t&lt;groupId&gt;org.apache.poi&lt;/groupId&gt;<br>\t\t\t&lt;artifactId&gt;poi-ooxml-schemas&lt;/artifactId&gt;<br>\t\t\t&lt;version&gt;$&#123;poi.version&#125;&lt;/version&gt;<br>\t\t&lt;/dependency&gt;<br>\t\t&lt;!-- 防止 程序包javax.servlet.annotation不存在 --&gt;<br>\t\t&lt;dependency&gt;<br>\t\t\t&lt;groupId&gt;org.apache.tomcat&lt;/groupId&gt;<br>\t\t\t&lt;artifactId&gt;tomcat-servlet-api&lt;/artifactId&gt;<br>\t\t\t&lt;version&gt;$&#123;tomcat-servlet-api.version&#125;&lt;/version&gt;<br>\t\t&lt;/dependency&gt;<br><br>\t\t&lt;!-- ******************************************* 校验器 ***************************************** --&gt;<br>\t\t&lt;dependency&gt;<br>\t\t\t&lt;groupId&gt;javax.validation&lt;/groupId&gt;<br>\t\t\t&lt;artifactId&gt;validation-api&lt;/artifactId&gt;<br>\t\t\t&lt;version&gt;$&#123;validation-api.version&#125;&lt;/version&gt;<br>\t\t&lt;/dependency&gt;<br><br>\t\t&lt;!-- ******************************************* 文件服务器 ************************************** --&gt;<br>\t\t&lt;dependency&gt;<br>\t\t\t&lt;groupId&gt;org.csource.fastdfs&lt;/groupId&gt;<br>\t\t\t&lt;artifactId&gt;fastdfs&lt;/artifactId&gt;<br>\t\t\t&lt;version&gt;1.2&lt;/version&gt;<br>\t\t&lt;/dependency&gt;<br><br><br>\t\t&lt;!-- ********************************** 阿里短信依赖 ************************************** --&gt;<br>\t\t&lt;dependency&gt;<br>\t\t\t&lt;groupId&gt;com.aliyun&lt;/groupId&gt;<br>\t\t\t&lt;artifactId&gt;aliyun-java-sdk-core&lt;/artifactId&gt;<br>\t\t\t&lt;version&gt;3.7.0&lt;/version&gt;<br>\t\t&lt;/dependency&gt;<br>\t\t&lt;dependency&gt;<br>\t\t\t&lt;groupId&gt;com.aliyun&lt;/groupId&gt;<br>\t\t\t&lt;artifactId&gt;aliyun-java-sdk-ecs&lt;/artifactId&gt;<br>\t\t\t&lt;version&gt;4.11.0&lt;/version&gt;<br>\t\t&lt;/dependency&gt;<br><br>\t\t&lt;!-- ********************************** hadoop **************************************** --&gt;<br>\t\t&lt;dependency&gt;<br>\t\t\t&lt;groupId&gt;org.apache.hadoop&lt;/groupId&gt;<br>\t\t\t&lt;artifactId&gt;hadoop-common&lt;/artifactId&gt;<br>\t\t\t&lt;version&gt;$&#123;hadoop.version&#125;&lt;/version&gt;<br>\t\t&lt;/dependency&gt;<br><br>\t\t&lt;!-- https://mvnrepository.com/artifact/org.apache.hadoop/hadoop-client --&gt;<br>\t\t&lt;dependency&gt;<br>\t\t\t&lt;groupId&gt;org.apache.hadoop&lt;/groupId&gt;<br>\t\t\t&lt;artifactId&gt;hadoop-client&lt;/artifactId&gt;<br>\t\t\t&lt;version&gt;$&#123;hadoop.version&#125;&lt;/version&gt;<br>\t\t&lt;/dependency&gt;<br><br>\t\t&lt;!-- https://mvnrepository.com/artifact/org.apache.hadoop/hadoop-hdfs --&gt;<br>\t\t&lt;dependency&gt;<br>\t\t\t&lt;groupId&gt;org.apache.hadoop&lt;/groupId&gt;<br>\t\t\t&lt;artifactId&gt;hadoop-hdfs&lt;/artifactId&gt;<br>\t\t\t&lt;version&gt;$&#123;hadoop.version&#125;&lt;/version&gt;<br>\t\t&lt;/dependency&gt;<br>\t\t&lt;dependency&gt;<br>\t\t\t&lt;groupId&gt;jdk.tools&lt;/groupId&gt;<br>\t\t\t&lt;artifactId&gt;jdk.tools&lt;/artifactId&gt;<br>\t\t\t&lt;version&gt;1.8&lt;/version&gt;<br>\t\t\t&lt;scope&gt;system&lt;/scope&gt;<br>\t\t\t&lt;systemPath&gt;$&#123;JAVA_HOME&#125;/lib/tools.jar&lt;/systemPath&gt;<br>\t\t&lt;/dependency&gt;<br>\t\t&lt;!-- ******************************** servlet-api******************************************* --&gt;<br>\t\t&lt;dependency&gt;<br>\t\t\t&lt;groupId&gt;javax.servlet&lt;/groupId&gt;<br>\t\t\t&lt;artifactId&gt;javax.servlet-api&lt;/artifactId&gt;<br>\t\t\t&lt;version&gt;3.0.1&lt;/version&gt;<br>\t\t\t&lt;scope&gt;provided&lt;/scope&gt;<br>\t\t&lt;/dependency&gt;<br><br>\t\t&lt;!-- 暂时没用上 --&gt;<br><br>\t\t&lt;!-- ******************************** jsp的依赖 ********************************************** --&gt;<br>\t\t&lt;dependency&gt;<br>\t\t\t&lt;groupId&gt;javax.servlet.jsp&lt;/groupId&gt;<br>\t\t\t&lt;artifactId&gt;jsp-api&lt;/artifactId&gt;<br>\t\t\t&lt;version&gt;$&#123;jsp-api.version&#125;&lt;/version&gt;<br>\t\t\t&lt;scope&gt;provided&lt;/scope&gt;<br>\t\t&lt;/dependency&gt;<br><br>\t\t<br>\t\t&lt;!-- ******************************** 引入jstl，书写jstl时要用到 ********************************* --&gt;<br>\t\t&lt;dependency&gt;<br>\t\t\t&lt;groupId&gt;javax.servlet&lt;/groupId&gt;<br>\t\t\t&lt;artifactId&gt;jstl&lt;/artifactId&gt;<br>\t\t\t&lt;version&gt;$&#123;jstl.version&#125;&lt;/version&gt;<br>\t\t&lt;/dependency&gt;<br>\t\t&lt;!--ueditor，一个富文本编辑器 --&gt;<br>\t\t&lt;dependency&gt;<br>\t\t\t&lt;groupId&gt;com.gitee.qdbp.thirdparty&lt;/groupId&gt;<br>\t\t\t&lt;artifactId&gt;ueditor&lt;/artifactId&gt;<br>\t\t\t&lt;version&gt;1.4.3.3&lt;/version&gt;<br>\t\t&lt;/dependency&gt;<br>\t\t&lt;!--jackson，把对象和json格式互转换时需要用到 --&gt;<br>\t\t&lt;dependency&gt;<br>\t\t\t&lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;<br>\t\t\t&lt;artifactId&gt;jackson-databind&lt;/artifactId&gt;<br>\t\t\t&lt;version&gt;2.9.7&lt;/version&gt;<br>\t\t&lt;/dependency&gt;<br>\t\t<br>\t\t&lt;!--dbcp，还记得数据库连接池么？？还有C3P0，druid这些 --&gt;<br>\t\t&lt;dependency&gt;<br>\t\t\t&lt;groupId&gt;commons-dbcp&lt;/groupId&gt;<br>\t\t\t&lt;artifactId&gt;commons-dbcp&lt;/artifactId&gt;<br>\t\t\t&lt;version&gt;1.4&lt;/version&gt;<br>\t\t&lt;/dependency&gt;<br>\t\t&lt;!--set get方法使用注解开发时需要它 --&gt;<br>\t\t&lt;dependency&gt;<br>\t\t\t&lt;groupId&gt;org.projectlombok&lt;/groupId&gt;<br>\t\t\t&lt;artifactId&gt;lombok&lt;/artifactId&gt;<br>\t\t\t&lt;version&gt;1.18.4&lt;/version&gt;<br>\t\t\t&lt;scope&gt;provided&lt;/scope&gt;<br>\t\t&lt;/dependency&gt;<br>\t\t<br><br>\t&lt;/dependencies&gt;<br>\t&lt;build&gt;<br>\t\t&lt;finalName&gt;ssm&lt;/finalName&gt;&lt;!--改项目名的时候改这里 --&gt;<br><br>\t\t&lt;plugins&gt;<br>\t\t\t&lt;!-- maven插件控制 --&gt;<br>\t\t\t&lt;plugin&gt;<br>\t\t\t\t&lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;<br>\t\t\t\t&lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;<br>\t\t\t\t&lt;version&gt;3.1&lt;/version&gt;<br>\t\t\t\t&lt;configuration&gt;<br>\t\t\t\t\t&lt;source&gt;1.8&lt;/source&gt;<br>\t\t\t\t\t&lt;target&gt;1.8&lt;/target&gt;<br>\t\t\t\t\t&lt;encoding&gt;utf-8&lt;/encoding&gt;<br>\t\t\t\t&lt;/configuration&gt;<br>\t\t\t&lt;/plugin&gt;<br>\t\t\t&lt;plugin&gt;<br>\t\t\t\t&lt;groupId&gt;org.apache.tomcat.maven&lt;/groupId&gt;<br>\t\t\t\t&lt;artifactId&gt;tomcat7-maven-plugin&lt;/artifactId&gt;<br>\t\t\t\t&lt;version&gt;2.2&lt;/version&gt;<br>\t\t\t\t&lt;configuration&gt;<br>\t\t\t\t\t&lt;!--端口控制 --&gt;<br>\t\t\t\t\t&lt;port&gt;8080&lt;/port&gt;<br>\t\t\t\t\t&lt;!--项目路径控制意味着http://localhost:8080/abc --&gt;<br>\t\t\t\t\t&lt;!-- &lt;path&gt;/abc&lt;/path&gt; --&gt;<br>\t\t\t\t\t&lt;!--编码 --&gt;<br>\t\t\t\t\t&lt;uriEncoding&gt;UTF-8&lt;/uriEncoding&gt;<br>\t\t\t\t&lt;/configuration&gt;<br>\t\t\t&lt;/plugin&gt;<br>\t\t&lt;/plugins&gt;<br>\t\t&lt;resources&gt;<br>\t\t\t&lt;resource&gt;<br>\t\t\t\t&lt;directory&gt;src/main/java&lt;/directory&gt;<br>\t\t\t\t&lt;includes&gt;<br>\t\t\t\t\t&lt;include&gt;**/*.xml&lt;/include&gt;<br>\t\t\t\t&lt;/includes&gt;<br>\t\t\t\t&lt;filtering&gt;true&lt;/filtering&gt;<br>\t\t\t&lt;/resource&gt;<br>\t\t\t&lt;resource&gt;<br>\t\t\t\t&lt;directory&gt;src/main/resources&lt;/directory&gt;<br>\t\t\t\t&lt;includes&gt;<br>\t\t\t\t\t&lt;include&gt;**/*.xml&lt;/include&gt;<br>\t\t\t\t\t&lt;include&gt;**/*.properties&lt;/include&gt;<br>\t\t\t\t&lt;/includes&gt;<br>\t\t\t&lt;/resource&gt;<br><br>\t\t&lt;/resources&gt;<br><br>\t&lt;/build&gt;<br><br>&lt;/project&gt;<br></code></pre></td></tr></table></figure>\n","site":{"data":{}},"wordcount":16213,"excerpt":"","more":"<h1 id=\"ssm框架完整pom依赖（附加-redis、fastDFS、阿里短信验证、poi、hadoop）\"><a href=\"#ssm框架完整pom依赖（附加-redis、fastDFS、阿里短信验证、poi、hadoop）\" class=\"headerlink\" title=\"ssm框架完整pom依赖（附加 redis、fastDFS、阿里短信验证、poi、hadoop）\"></a>ssm框架完整pom依赖（附加 redis、fastDFS、阿里短信验证、poi、hadoop）</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br><span class=\"line\">339</span><br><span class=\"line\">340</span><br><span class=\"line\">341</span><br><span class=\"line\">342</span><br><span class=\"line\">343</span><br><span class=\"line\">344</span><br><span class=\"line\">345</span><br><span class=\"line\">346</span><br><span class=\"line\">347</span><br><span class=\"line\">348</span><br><span class=\"line\">349</span><br><span class=\"line\">350</span><br><span class=\"line\">351</span><br><span class=\"line\">352</span><br><span class=\"line\">353</span><br><span class=\"line\">354</span><br><span class=\"line\">355</span><br><span class=\"line\">356</span><br><span class=\"line\">357</span><br><span class=\"line\">358</span><br><span class=\"line\">359</span><br><span class=\"line\">360</span><br><span class=\"line\">361</span><br><span class=\"line\">362</span><br><span class=\"line\">363</span><br><span class=\"line\">364</span><br><span class=\"line\">365</span><br><span class=\"line\">366</span><br><span class=\"line\">367</span><br><span class=\"line\">368</span><br><span class=\"line\">369</span><br><span class=\"line\">370</span><br><span class=\"line\">371</span><br><span class=\"line\">372</span><br><span class=\"line\">373</span><br><span class=\"line\">374</span><br><span class=\"line\">375</span><br><span class=\"line\">376</span><br><span class=\"line\">377</span><br><span class=\"line\">378</span><br><span class=\"line\">379</span><br><span class=\"line\">380</span><br><span class=\"line\">381</span><br><span class=\"line\">382</span><br><span class=\"line\">383</span><br><span class=\"line\">384</span><br><span class=\"line\">385</span><br><span class=\"line\">386</span><br><span class=\"line\">387</span><br><span class=\"line\">388</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;!--指定xml文档的版本和编码方式 --&gt;<br>&lt;!--project是所有pom.xml的根元素， 它还声明了一些POM相关的命名空间及xsd元素， 虽然这些属性不是必须的， 但使用这些属性能够让第三方工具 <br>\t(如：IDE中的xml编辑器)帮助我们快速编辑POM --&gt;<br>&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;<br>\txsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;<br>\t&lt;!--指定了当前POM模型的版本，对于maven2及maven3来说，它只能是4.0.0。 这段代码中最重要的是包含groupId,artifactId和version的三行。 <br>\t\t这三个元素定义了一个项目基本的坐标，在maven的世界， 任何的jar,pom或者war都是以基于这些基本的坐标进行区分的。 --&gt;<br>\t&lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;<br><br>\t&lt;groupId&gt;com.yun&lt;/groupId&gt;&lt;!--填写你的组织名例如 --&gt;<br>\t&lt;artifactId&gt;test&lt;/artifactId&gt;&lt;!--项目名字 --&gt;<br>\t&lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;&lt;!--项目的版本 snapshot为快照意思，代表当前为测试版， 开发版，相对的为release，意味发行版本，代表稳定版 --&gt;<br>\t&lt;packaging&gt;war&lt;/packaging&gt;&lt;!--问你项目需要打成什么包？pom jar war？一般javaWeb项目填war --&gt;<br>\t&lt;name&gt;ssm Maven Webapp&lt;/name&gt;<br>\t&lt;!-- FIXME change it to the project&#x27;s website --&gt;<br>\t&lt;url&gt;http://www.example.com&lt;/url&gt;<br><br>\t&lt;!-- 集中定义常用依赖版本号 --&gt;<br>\t&lt;properties&gt;<br>\t\t&lt;junit.version&gt;4.11&lt;/junit.version&gt;<br>\t\t&lt;servlet-api.version&gt;3.1&lt;/servlet-api.version&gt;<br>\t\t&lt;jsp-api.version&gt;2.2&lt;/jsp-api.version&gt;<br>\t\t&lt;jstl.version&gt;1.2&lt;/jstl.version&gt;<br>\t\t&lt;mysql.version&gt;8.0.17&lt;/mysql.version&gt;<br>\t\t&lt;mybatis.version&gt;3.2.7&lt;/mybatis.version&gt;<br><br>\t\t&lt;spring.version&gt;4.2.4.RELEASE&lt;/spring.version&gt;<br>\t\t&lt;fastjson.version&gt;1.2.56&lt;/fastjson.version&gt;<br>\t\t&lt;c3p0.version&gt;0.9.1.2&lt;/c3p0.version&gt;<br>\t\t&lt;jedis.version&gt;3.0.1&lt;/jedis.version&gt;<br>\t\t&lt;commons-fileupload.version&gt;1.3.3&lt;/commons-fileupload.version&gt;<br><br>\t\t&lt;log4j.version&gt;1.2.12&lt;/log4j.version&gt;<br>\t\t&lt;mybatis-spring.version&gt;1.2.2&lt;/mybatis-spring.version&gt;<br>\t\t&lt;mybatis-ehcache.version&gt;1.0.2&lt;/mybatis-ehcache.version&gt;<br>\t\t&lt;jsqlparser&gt;0.9.1&lt;/jsqlparser&gt;<br>\t\t&lt;pagehelper.version&gt;3.4.2&lt;/pagehelper.version&gt;<br><br>\t\t&lt;validation-api.version&gt;1.0.0.GA&lt;/validation-api.version&gt;<br>\t\t&lt;tomcat-servlet-api.version&gt;7.0.62&lt;/tomcat-servlet-api.version&gt;<br>\t\t&lt;poi.version&gt;3.17&lt;/poi.version&gt;<br>\t\t&lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;<br>\t\t&lt;hadoop.version&gt;2.7.3&lt;/hadoop.version&gt;<br>\t\t&lt;maven.compiler.source&gt;1.7&lt;/maven.compiler.source&gt;<br>\t\t&lt;maven.compiler.target&gt;1.7&lt;/maven.compiler.target&gt;<br>\t&lt;/properties&gt;<br>\t&lt;dependencies&gt;<br><br>\t\t&lt;!-- ******************************************** spring *************************** --&gt;<br>\t\t&lt;!--提供对AspectJ的支持 --&gt;<br>\t\t&lt;dependency&gt;<br>\t\t\t&lt;groupId&gt;org.springframework&lt;/groupId&gt;<br>\t\t\t&lt;artifactId&gt;spring-aspects&lt;/artifactId&gt;<br>\t\t\t&lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;<br>\t\t&lt;/dependency&gt;<br>\t\t&lt;!--这个jar 文件包含在应用中使用Spring 的AOP 特性时所需的类和源码级元数据支持。使用基于AOP 的Spring特性， 如声明型事务管理（Declarative <br>\t\t\tTransaction Management），也要在应用里包含这个jar包。 --&gt;<br>\t\t&lt;dependency&gt;<br>\t\t\t&lt;groupId&gt;org.springframework&lt;/groupId&gt;<br>\t\t\t&lt;artifactId&gt;spring-aop&lt;/artifactId&gt;<br>\t\t\t&lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;<br>\t\t&lt;/dependency&gt;<br>\t\t&lt;!--这个jar 文件包含对Spring 对JDBC 数据访问进行封装的所有类。 --&gt;<br>\t\t&lt;dependency&gt;<br>\t\t\t&lt;groupId&gt;org.springframework&lt;/groupId&gt;<br>\t\t\t&lt;artifactId&gt;spring-jdbc&lt;/artifactId&gt;<br>\t\t\t&lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;<br>\t\t&lt;/dependency&gt;<br>\t\t&lt;!--基于tx的事务管理需要 --&gt;<br>\t\t&lt;dependency&gt;<br>\t\t\t&lt;groupId&gt;org.springframework&lt;/groupId&gt;<br>\t\t\t&lt;artifactId&gt;spring-tx&lt;/artifactId&gt;<br>\t\t\t&lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;<br>\t\t&lt;/dependency&gt;<br>\t\t&lt;!--这个jar 文件是所有应用都要用到的，它包含访问配置文件、 创建和管理bean 以及进行Inversion of Control / <br>\t\t\tDependency Injection（IoC/DI）操作相关的所有类。 如果应用只需基本的IoC/DI 支持，引入spring-core.jar <br>\t\t\t及spring-beans.jar 文件就可以了。 外部依赖spring-core --&gt;<br>\t\t&lt;dependency&gt;<br>\t\t\t&lt;groupId&gt;org.springframework&lt;/groupId&gt;<br>\t\t\t&lt;artifactId&gt;spring-beans&lt;/artifactId&gt;<br>\t\t\t&lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;<br>\t\t&lt;/dependency&gt;<br>\t\t&lt;!--这个jar 文件包含支持UI模版（Velocity，FreeMarker，JasperReports）， 邮件服务，脚本服务(JRuby)，缓存Cache（EHCache）， <br>\t\t\t任务计划Scheduling（uartz）方面的类。 外部依赖spring-context, (spring-jdbc, Velocity, FreeMarker, <br>\t\t\tJasperReports, BSH, Groovy, JRuby, Quartz, EHCache) --&gt;<br>\t\t&lt;dependency&gt;<br>\t\t\t&lt;groupId&gt;org.springframework&lt;/groupId&gt;<br>\t\t\t&lt;artifactId&gt;spring-context-support&lt;/artifactId&gt;<br>\t\t\t&lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;<br>\t\t&lt;/dependency&gt;<br>\t\t&lt;!--spring表达式语言 --&gt;<br>\t\t&lt;dependency&gt;<br>\t\t\t&lt;groupId&gt;org.springframework&lt;/groupId&gt;<br>\t\t\t&lt;artifactId&gt;spring-expression&lt;/artifactId&gt;<br>\t\t\t&lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;<br>\t\t&lt;/dependency&gt;<br>\t\t&lt;!--基础web功能，如文件上传 --&gt;<br>\t\t&lt;dependency&gt;<br>\t\t\t&lt;groupId&gt;org.springframework&lt;/groupId&gt;<br>\t\t\t&lt;artifactId&gt;spring-web&lt;/artifactId&gt;<br>\t\t\t&lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;<br>\t\t&lt;/dependency&gt;<br>\t\t&lt;!--spring测试，提供junit与mock测试功能 --&gt;<br>\t\t&lt;dependency&gt;<br>\t\t\t&lt;groupId&gt;org.springframework&lt;/groupId&gt;<br>\t\t\t&lt;artifactId&gt;spring-test&lt;/artifactId&gt;<br>\t\t\t&lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;<br>\t\t\t&lt;scope&gt;test&lt;/scope&gt;<br>\t\t&lt;/dependency&gt;<br>\t\t&lt;!--commons-lang3 --&gt;<br>\t\t&lt;dependency&gt;<br>\t\t\t&lt;groupId&gt;org.apache.commons&lt;/groupId&gt;<br>\t\t\t&lt;artifactId&gt;commons-lang3&lt;/artifactId&gt;<br>\t\t\t&lt;version&gt;3.4&lt;/version&gt;<br>\t\t&lt;/dependency&gt;<br>\t\t&lt;!-- ****************************** 引入springmvc，mvc实现*************************************** --&gt;<br>\t\t&lt;dependency&gt;<br>\t\t\t&lt;groupId&gt;org.springframework&lt;/groupId&gt;<br>\t\t\t&lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt;<br>\t\t\t&lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;<br>\t\t&lt;/dependency&gt;<br><br>\t\t&lt;!-- ******************************* 引入junit，做单元测试用，@Test注解需要它 ********************** --&gt;<br>\t\t&lt;dependency&gt;<br>\t\t\t&lt;groupId&gt;junit&lt;/groupId&gt;<br>\t\t\t&lt;artifactId&gt;junit&lt;/artifactId&gt;<br>\t\t\t&lt;version&gt;$&#123;junit.version&#125;&lt;/version&gt;<br>\t\t\t&lt;scope&gt;test&lt;/scope&gt;<br>\t\t&lt;/dependency&gt;<br><br>\t\t&lt;!-- ******************************* 引入mysql *********************************************** --&gt;<br>\t\t&lt;dependency&gt;<br>\t\t\t&lt;groupId&gt;mysql&lt;/groupId&gt;<br>\t\t\t&lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;<br>\t\t\t&lt;version&gt;$&#123;mysql.version&#125;&lt;/version&gt;<br>\t\t&lt;/dependency&gt;<br>\t\t&lt;!-- ******************************* 引入mybatis ********************************************* --&gt;<br>\t\t&lt;dependency&gt;<br>\t\t\t&lt;groupId&gt;org.mybatis&lt;/groupId&gt;<br>\t\t\t&lt;artifactId&gt;mybatis&lt;/artifactId&gt;<br>\t\t\t&lt;version&gt;$&#123;mybatis.version&#125;&lt;/version&gt;<br>\t\t&lt;/dependency&gt;<br><br>\t\t&lt;!-- ****************************************** 分页 ******************************************** --&gt;<br>\t\t&lt;dependency&gt;<br>\t\t\t&lt;groupId&gt;com.github.jsqlparser&lt;/groupId&gt;<br>\t\t\t&lt;artifactId&gt;jsqlparser&lt;/artifactId&gt;<br>\t\t\t&lt;version&gt;$&#123;jsqlparser&#125;&lt;/version&gt;<br>\t\t&lt;/dependency&gt;<br>\t\t&lt;dependency&gt;<br>\t\t\t&lt;groupId&gt;com.github.pagehelper&lt;/groupId&gt;<br>\t\t\t&lt;artifactId&gt;pagehelper&lt;/artifactId&gt;<br>\t\t\t&lt;version&gt;$&#123;pagehelper.version&#125;&lt;/version&gt;<br>\t\t&lt;/dependency&gt;<br>\t\t&lt;!-- ******************************* c3p0连接池 *************************************************** --&gt;<br>\t\t&lt;dependency&gt;<br>\t\t\t&lt;groupId&gt;c3p0&lt;/groupId&gt;<br>\t\t\t&lt;artifactId&gt;c3p0&lt;/artifactId&gt;<br>\t\t\t&lt;version&gt;$&#123;c3p0.version&#125;&lt;/version&gt;<br>\t\t&lt;/dependency&gt;<br><br>\t\t&lt;!-- ******************************** jedis，Jedis是Redis官方推荐的Java连接开发工具。*********************** --&gt;<br>\t\t&lt;dependency&gt;<br>\t\t\t&lt;groupId&gt;redis.clients&lt;/groupId&gt;<br>\t\t\t&lt;artifactId&gt;jedis&lt;/artifactId&gt;<br>\t\t\t&lt;version&gt;$&#123;jedis.version&#125;&lt;/version&gt;<br>\t\t&lt;/dependency&gt;<br><br>\t\t&lt;!-- ******************************* fastjson，把对象和json格式互转换时需要用到 ****************************** --&gt;<br>\t\t&lt;dependency&gt;<br>\t\t\t&lt;groupId&gt;com.alibaba&lt;/groupId&gt;<br>\t\t\t&lt;artifactId&gt;fastjson&lt;/artifactId&gt;<br>\t\t\t&lt;version&gt;$&#123;fastjson.version&#125;&lt;/version&gt;<br>\t\t&lt;/dependency&gt;<br><br>\t\t&lt;!-- ***************************************** commons ************************************* --&gt;<br>\t\t&lt;dependency&gt;<br>\t\t\t&lt;groupId&gt;commons-fileupload&lt;/groupId&gt;<br>\t\t\t&lt;artifactId&gt;commons-fileupload&lt;/artifactId&gt;<br>\t\t\t&lt;version&gt;$&#123;commons-fileupload.version&#125;&lt;/version&gt;<br>\t\t&lt;/dependency&gt;<br>\t\t&lt;dependency&gt;<br>\t\t\t&lt;groupId&gt;commons-io&lt;/groupId&gt;<br>\t\t\t&lt;artifactId&gt;commons-io&lt;/artifactId&gt;<br>\t\t\t&lt;version&gt;2.4&lt;/version&gt;<br>\t\t&lt;/dependency&gt;<br><br>\t\t&lt;!-- ***************************** 引入log4j，生成日志需要这个，log for java ，4是 for的近音  ************************ --&gt;<br>\t\t&lt;dependency&gt;<br>\t\t\t&lt;groupId&gt;log4j&lt;/groupId&gt;<br>\t\t\t&lt;artifactId&gt;log4j&lt;/artifactId&gt;<br>\t\t\t&lt;version&gt;$&#123;log4j.version&#125;&lt;/version&gt;<br>\t\t&lt;/dependency&gt;<br><br><br>\t\t&lt;!-- ****************************************** 引入mybatis和spring ***************************** --&gt;<br>\t\t&lt;dependency&gt;<br>\t\t\t&lt;groupId&gt;org.mybatis&lt;/groupId&gt;<br>\t\t\t&lt;artifactId&gt;mybatis-spring&lt;/artifactId&gt;<br>\t\t\t&lt;version&gt;$&#123;mybatis-spring.version&#125;&lt;/version&gt;<br>\t\t&lt;/dependency&gt;<br>\t\t&lt;dependency&gt;<br>\t\t\t&lt;groupId&gt;org.mybatis.caches&lt;/groupId&gt;<br>\t\t\t&lt;artifactId&gt;mybatis-ehcache&lt;/artifactId&gt;<br>\t\t\t&lt;version&gt;$&#123;mybatis-ehcache.version&#125;&lt;/version&gt;<br>\t\t&lt;/dependency&gt;<br><br>\t\t&lt;!-- ****************************************** poi导出excel ************************************ --&gt;<br>\t\t&lt;dependency&gt;<br>\t\t\t&lt;groupId&gt;org.apache.poi&lt;/groupId&gt;<br>\t\t\t&lt;artifactId&gt;poi&lt;/artifactId&gt;<br>\t\t\t&lt;version&gt;$&#123;poi.version&#125;&lt;/version&gt;<br>\t\t&lt;/dependency&gt;<br>\t\t&lt;dependency&gt;<br>\t\t\t&lt;groupId&gt;org.apache.poi&lt;/groupId&gt;<br>\t\t\t&lt;artifactId&gt;poi-ooxml&lt;/artifactId&gt;<br>\t\t\t&lt;version&gt;$&#123;poi.version&#125;&lt;/version&gt;<br>\t\t&lt;/dependency&gt;<br>\t\t&lt;dependency&gt;<br>\t\t\t&lt;groupId&gt;org.apache.poi&lt;/groupId&gt;<br>\t\t\t&lt;artifactId&gt;poi-ooxml-schemas&lt;/artifactId&gt;<br>\t\t\t&lt;version&gt;$&#123;poi.version&#125;&lt;/version&gt;<br>\t\t&lt;/dependency&gt;<br>\t\t&lt;!-- 防止 程序包javax.servlet.annotation不存在 --&gt;<br>\t\t&lt;dependency&gt;<br>\t\t\t&lt;groupId&gt;org.apache.tomcat&lt;/groupId&gt;<br>\t\t\t&lt;artifactId&gt;tomcat-servlet-api&lt;/artifactId&gt;<br>\t\t\t&lt;version&gt;$&#123;tomcat-servlet-api.version&#125;&lt;/version&gt;<br>\t\t&lt;/dependency&gt;<br><br>\t\t&lt;!-- ******************************************* 校验器 ***************************************** --&gt;<br>\t\t&lt;dependency&gt;<br>\t\t\t&lt;groupId&gt;javax.validation&lt;/groupId&gt;<br>\t\t\t&lt;artifactId&gt;validation-api&lt;/artifactId&gt;<br>\t\t\t&lt;version&gt;$&#123;validation-api.version&#125;&lt;/version&gt;<br>\t\t&lt;/dependency&gt;<br><br>\t\t&lt;!-- ******************************************* 文件服务器 ************************************** --&gt;<br>\t\t&lt;dependency&gt;<br>\t\t\t&lt;groupId&gt;org.csource.fastdfs&lt;/groupId&gt;<br>\t\t\t&lt;artifactId&gt;fastdfs&lt;/artifactId&gt;<br>\t\t\t&lt;version&gt;1.2&lt;/version&gt;<br>\t\t&lt;/dependency&gt;<br><br><br>\t\t&lt;!-- ********************************** 阿里短信依赖 ************************************** --&gt;<br>\t\t&lt;dependency&gt;<br>\t\t\t&lt;groupId&gt;com.aliyun&lt;/groupId&gt;<br>\t\t\t&lt;artifactId&gt;aliyun-java-sdk-core&lt;/artifactId&gt;<br>\t\t\t&lt;version&gt;3.7.0&lt;/version&gt;<br>\t\t&lt;/dependency&gt;<br>\t\t&lt;dependency&gt;<br>\t\t\t&lt;groupId&gt;com.aliyun&lt;/groupId&gt;<br>\t\t\t&lt;artifactId&gt;aliyun-java-sdk-ecs&lt;/artifactId&gt;<br>\t\t\t&lt;version&gt;4.11.0&lt;/version&gt;<br>\t\t&lt;/dependency&gt;<br><br>\t\t&lt;!-- ********************************** hadoop **************************************** --&gt;<br>\t\t&lt;dependency&gt;<br>\t\t\t&lt;groupId&gt;org.apache.hadoop&lt;/groupId&gt;<br>\t\t\t&lt;artifactId&gt;hadoop-common&lt;/artifactId&gt;<br>\t\t\t&lt;version&gt;$&#123;hadoop.version&#125;&lt;/version&gt;<br>\t\t&lt;/dependency&gt;<br><br>\t\t&lt;!-- https://mvnrepository.com/artifact/org.apache.hadoop/hadoop-client --&gt;<br>\t\t&lt;dependency&gt;<br>\t\t\t&lt;groupId&gt;org.apache.hadoop&lt;/groupId&gt;<br>\t\t\t&lt;artifactId&gt;hadoop-client&lt;/artifactId&gt;<br>\t\t\t&lt;version&gt;$&#123;hadoop.version&#125;&lt;/version&gt;<br>\t\t&lt;/dependency&gt;<br><br>\t\t&lt;!-- https://mvnrepository.com/artifact/org.apache.hadoop/hadoop-hdfs --&gt;<br>\t\t&lt;dependency&gt;<br>\t\t\t&lt;groupId&gt;org.apache.hadoop&lt;/groupId&gt;<br>\t\t\t&lt;artifactId&gt;hadoop-hdfs&lt;/artifactId&gt;<br>\t\t\t&lt;version&gt;$&#123;hadoop.version&#125;&lt;/version&gt;<br>\t\t&lt;/dependency&gt;<br>\t\t&lt;dependency&gt;<br>\t\t\t&lt;groupId&gt;jdk.tools&lt;/groupId&gt;<br>\t\t\t&lt;artifactId&gt;jdk.tools&lt;/artifactId&gt;<br>\t\t\t&lt;version&gt;1.8&lt;/version&gt;<br>\t\t\t&lt;scope&gt;system&lt;/scope&gt;<br>\t\t\t&lt;systemPath&gt;$&#123;JAVA_HOME&#125;/lib/tools.jar&lt;/systemPath&gt;<br>\t\t&lt;/dependency&gt;<br>\t\t&lt;!-- ******************************** servlet-api******************************************* --&gt;<br>\t\t&lt;dependency&gt;<br>\t\t\t&lt;groupId&gt;javax.servlet&lt;/groupId&gt;<br>\t\t\t&lt;artifactId&gt;javax.servlet-api&lt;/artifactId&gt;<br>\t\t\t&lt;version&gt;3.0.1&lt;/version&gt;<br>\t\t\t&lt;scope&gt;provided&lt;/scope&gt;<br>\t\t&lt;/dependency&gt;<br><br>\t\t&lt;!-- 暂时没用上 --&gt;<br><br>\t\t&lt;!-- ******************************** jsp的依赖 ********************************************** --&gt;<br>\t\t&lt;dependency&gt;<br>\t\t\t&lt;groupId&gt;javax.servlet.jsp&lt;/groupId&gt;<br>\t\t\t&lt;artifactId&gt;jsp-api&lt;/artifactId&gt;<br>\t\t\t&lt;version&gt;$&#123;jsp-api.version&#125;&lt;/version&gt;<br>\t\t\t&lt;scope&gt;provided&lt;/scope&gt;<br>\t\t&lt;/dependency&gt;<br><br>\t\t<br>\t\t&lt;!-- ******************************** 引入jstl，书写jstl时要用到 ********************************* --&gt;<br>\t\t&lt;dependency&gt;<br>\t\t\t&lt;groupId&gt;javax.servlet&lt;/groupId&gt;<br>\t\t\t&lt;artifactId&gt;jstl&lt;/artifactId&gt;<br>\t\t\t&lt;version&gt;$&#123;jstl.version&#125;&lt;/version&gt;<br>\t\t&lt;/dependency&gt;<br>\t\t&lt;!--ueditor，一个富文本编辑器 --&gt;<br>\t\t&lt;dependency&gt;<br>\t\t\t&lt;groupId&gt;com.gitee.qdbp.thirdparty&lt;/groupId&gt;<br>\t\t\t&lt;artifactId&gt;ueditor&lt;/artifactId&gt;<br>\t\t\t&lt;version&gt;1.4.3.3&lt;/version&gt;<br>\t\t&lt;/dependency&gt;<br>\t\t&lt;!--jackson，把对象和json格式互转换时需要用到 --&gt;<br>\t\t&lt;dependency&gt;<br>\t\t\t&lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;<br>\t\t\t&lt;artifactId&gt;jackson-databind&lt;/artifactId&gt;<br>\t\t\t&lt;version&gt;2.9.7&lt;/version&gt;<br>\t\t&lt;/dependency&gt;<br>\t\t<br>\t\t&lt;!--dbcp，还记得数据库连接池么？？还有C3P0，druid这些 --&gt;<br>\t\t&lt;dependency&gt;<br>\t\t\t&lt;groupId&gt;commons-dbcp&lt;/groupId&gt;<br>\t\t\t&lt;artifactId&gt;commons-dbcp&lt;/artifactId&gt;<br>\t\t\t&lt;version&gt;1.4&lt;/version&gt;<br>\t\t&lt;/dependency&gt;<br>\t\t&lt;!--set get方法使用注解开发时需要它 --&gt;<br>\t\t&lt;dependency&gt;<br>\t\t\t&lt;groupId&gt;org.projectlombok&lt;/groupId&gt;<br>\t\t\t&lt;artifactId&gt;lombok&lt;/artifactId&gt;<br>\t\t\t&lt;version&gt;1.18.4&lt;/version&gt;<br>\t\t\t&lt;scope&gt;provided&lt;/scope&gt;<br>\t\t&lt;/dependency&gt;<br>\t\t<br><br>\t&lt;/dependencies&gt;<br>\t&lt;build&gt;<br>\t\t&lt;finalName&gt;ssm&lt;/finalName&gt;&lt;!--改项目名的时候改这里 --&gt;<br><br>\t\t&lt;plugins&gt;<br>\t\t\t&lt;!-- maven插件控制 --&gt;<br>\t\t\t&lt;plugin&gt;<br>\t\t\t\t&lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;<br>\t\t\t\t&lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;<br>\t\t\t\t&lt;version&gt;3.1&lt;/version&gt;<br>\t\t\t\t&lt;configuration&gt;<br>\t\t\t\t\t&lt;source&gt;1.8&lt;/source&gt;<br>\t\t\t\t\t&lt;target&gt;1.8&lt;/target&gt;<br>\t\t\t\t\t&lt;encoding&gt;utf-8&lt;/encoding&gt;<br>\t\t\t\t&lt;/configuration&gt;<br>\t\t\t&lt;/plugin&gt;<br>\t\t\t&lt;plugin&gt;<br>\t\t\t\t&lt;groupId&gt;org.apache.tomcat.maven&lt;/groupId&gt;<br>\t\t\t\t&lt;artifactId&gt;tomcat7-maven-plugin&lt;/artifactId&gt;<br>\t\t\t\t&lt;version&gt;2.2&lt;/version&gt;<br>\t\t\t\t&lt;configuration&gt;<br>\t\t\t\t\t&lt;!--端口控制 --&gt;<br>\t\t\t\t\t&lt;port&gt;8080&lt;/port&gt;<br>\t\t\t\t\t&lt;!--项目路径控制意味着http://localhost:8080/abc --&gt;<br>\t\t\t\t\t&lt;!-- &lt;path&gt;/abc&lt;/path&gt; --&gt;<br>\t\t\t\t\t&lt;!--编码 --&gt;<br>\t\t\t\t\t&lt;uriEncoding&gt;UTF-8&lt;/uriEncoding&gt;<br>\t\t\t\t&lt;/configuration&gt;<br>\t\t\t&lt;/plugin&gt;<br>\t\t&lt;/plugins&gt;<br>\t\t&lt;resources&gt;<br>\t\t\t&lt;resource&gt;<br>\t\t\t\t&lt;directory&gt;src/main/java&lt;/directory&gt;<br>\t\t\t\t&lt;includes&gt;<br>\t\t\t\t\t&lt;include&gt;**/*.xml&lt;/include&gt;<br>\t\t\t\t&lt;/includes&gt;<br>\t\t\t\t&lt;filtering&gt;true&lt;/filtering&gt;<br>\t\t\t&lt;/resource&gt;<br>\t\t\t&lt;resource&gt;<br>\t\t\t\t&lt;directory&gt;src/main/resources&lt;/directory&gt;<br>\t\t\t\t&lt;includes&gt;<br>\t\t\t\t\t&lt;include&gt;**/*.xml&lt;/include&gt;<br>\t\t\t\t\t&lt;include&gt;**/*.properties&lt;/include&gt;<br>\t\t\t\t&lt;/includes&gt;<br>\t\t\t&lt;/resource&gt;<br><br>\t\t&lt;/resources&gt;<br><br>\t&lt;/build&gt;<br><br>&lt;/project&gt;<br></code></pre></td></tr></table></figure>\n"},{"_content":"# 业务清单\n\n## 一、主营业务\n\n+ 接毕设、私人项目、远程开发，运维，上线；\n\n+ 程序+文档+运行调试+项目云部署（毕设类短期免费提供）\n\n## 二、项目经验\n\n+ 内容管理系统CMS：如博客、论坛、朋友圈类\n+ 仓储管理系统WMS：如工厂，器械，物料管理\n+ 电商类系统：如类京东、淘宝可支付购物平台\n+ 活动广告类系统，各种管理类系统\n+ ...\n\n## 三、项目类别\n\n+ APP\n+ 微信小程序\n+ Web\n\n## 四、后端语言及技术架构（包运维上线）\n\n- 语言：Java\n- 项目框架：Spring Boot、Spring Mvc\n- 数据库：MySql、Redis、mongDb 等\n- 资源管理：阿里、腾讯、七牛等对象存储；自搭建minio、fastDFS等\n- 支付：支付宝、微信等支付对接\n- 消息推送：小程序消息推送、短信、邮箱等\n\n## 五、前端语言及架构：\n\n+ 安卓\n+ 微信小程序\n\n+ HTML5\n+ VUE\n+ react \n+ element \n+ Ant Design \n\n## 六、运维部署\n\n+ 本地 Linux；Windows Service\n+ 阿里、腾讯等云服务器、Jenkins自动化，Docker容器化部署\n+ 可支持云服务、域名、商标、商户号、证书申请备案等指导\n\n## 七、已有项目展示\n\n1. 仓储管理系统WMS（企业）：\n\n![image-20220721145841335](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721145841335.png)\n\n![image-20220721145849353](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721145849353.png)\n\n![image-20220721145857087](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721145857087.png)\n\n![image-20220721145908464](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721145908464.png)\n\n2. 内容管理系统CMS（毕业设计）\n\n![image-20220721145920627](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721145920627.png)\n\n3. 商城类（企业）\n\n![image-20220721145937110](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721145937110.png)\n\n![image-20220721145946087](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721145946087.png)\n\n4. 管理类（毕业设计）\n   + 体验网址：https://teacher.service.cf/\n   + 账号/密码：admin/admin\n   + ![image-20220721145955781](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721145955781.png)\n   + ![image-20220721150005524](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721150005524.png)","source":"_posts/BookMark/学习笔记/业务清单.md","raw":"# 业务清单\n\n## 一、主营业务\n\n+ 接毕设、私人项目、远程开发，运维，上线；\n\n+ 程序+文档+运行调试+项目云部署（毕设类短期免费提供）\n\n## 二、项目经验\n\n+ 内容管理系统CMS：如博客、论坛、朋友圈类\n+ 仓储管理系统WMS：如工厂，器械，物料管理\n+ 电商类系统：如类京东、淘宝可支付购物平台\n+ 活动广告类系统，各种管理类系统\n+ ...\n\n## 三、项目类别\n\n+ APP\n+ 微信小程序\n+ Web\n\n## 四、后端语言及技术架构（包运维上线）\n\n- 语言：Java\n- 项目框架：Spring Boot、Spring Mvc\n- 数据库：MySql、Redis、mongDb 等\n- 资源管理：阿里、腾讯、七牛等对象存储；自搭建minio、fastDFS等\n- 支付：支付宝、微信等支付对接\n- 消息推送：小程序消息推送、短信、邮箱等\n\n## 五、前端语言及架构：\n\n+ 安卓\n+ 微信小程序\n\n+ HTML5\n+ VUE\n+ react \n+ element \n+ Ant Design \n\n## 六、运维部署\n\n+ 本地 Linux；Windows Service\n+ 阿里、腾讯等云服务器、Jenkins自动化，Docker容器化部署\n+ 可支持云服务、域名、商标、商户号、证书申请备案等指导\n\n## 七、已有项目展示\n\n1. 仓储管理系统WMS（企业）：\n\n![image-20220721145841335](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721145841335.png)\n\n![image-20220721145849353](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721145849353.png)\n\n![image-20220721145857087](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721145857087.png)\n\n![image-20220721145908464](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721145908464.png)\n\n2. 内容管理系统CMS（毕业设计）\n\n![image-20220721145920627](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721145920627.png)\n\n3. 商城类（企业）\n\n![image-20220721145937110](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721145937110.png)\n\n![image-20220721145946087](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721145946087.png)\n\n4. 管理类（毕业设计）\n   + 体验网址：https://teacher.service.cf/\n   + 账号/密码：admin/admin\n   + ![image-20220721145955781](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721145955781.png)\n   + ![image-20220721150005524](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721150005524.png)","slug":"BookMark/学习笔记/业务清单","published":1,"date":"2022-07-21T07:01:11.000Z","updated":"2022-09-01T10:02:40.571Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cl7ptszoo0027aba55dn310l8","content":"<h1><span id=\"业务清单\">业务清单</span></h1><h2><span id=\"一-主营业务\">一、主营业务</span></h2><ul>\n<li><p>接毕设、私人项目、远程开发，运维，上线；</p>\n</li>\n<li><p>程序+文档+运行调试+项目云部署（毕设类短期免费提供）</p>\n</li>\n</ul>\n<h2><span id=\"二-项目经验\">二、项目经验</span></h2><ul>\n<li>内容管理系统CMS：如博客、论坛、朋友圈类</li>\n<li>仓储管理系统WMS：如工厂，器械，物料管理</li>\n<li>电商类系统：如类京东、淘宝可支付购物平台</li>\n<li>活动广告类系统，各种管理类系统</li>\n<li>…</li>\n</ul>\n<h2><span id=\"三-项目类别\">三、项目类别</span></h2><ul>\n<li>APP</li>\n<li>微信小程序</li>\n<li>Web</li>\n</ul>\n<h2><span id=\"四-后端语言及技术架构包运维上线\">四、后端语言及技术架构（包运维上线）</span></h2><ul>\n<li>语言：Java</li>\n<li>项目框架：Spring Boot、Spring Mvc</li>\n<li>数据库：MySql、Redis、mongDb 等</li>\n<li>资源管理：阿里、腾讯、七牛等对象存储；自搭建minio、fastDFS等</li>\n<li>支付：支付宝、微信等支付对接</li>\n<li>消息推送：小程序消息推送、短信、邮箱等</li>\n</ul>\n<h2><span id=\"五-前端语言及架构\">五、前端语言及架构：</span></h2><ul>\n<li><p>安卓</p>\n</li>\n<li><p>微信小程序</p>\n</li>\n<li><p>HTML5</p>\n</li>\n<li><p>VUE</p>\n</li>\n<li><p>react </p>\n</li>\n<li><p>element </p>\n</li>\n<li><p>Ant Design</p>\n</li>\n</ul>\n<h2><span id=\"六-运维部署\">六、运维部署</span></h2><ul>\n<li>本地 Linux；Windows Service</li>\n<li>阿里、腾讯等云服务器、Jenkins自动化，Docker容器化部署</li>\n<li>可支持云服务、域名、商标、商户号、证书申请备案等指导</li>\n</ul>\n<h2><span id=\"七-已有项目展示\">七、已有项目展示</span></h2><ol>\n<li>仓储管理系统WMS（企业）：</li>\n</ol>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721145841335.png\" alt=\"image-20220721145841335\"></p>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721145849353.png\" alt=\"image-20220721145849353\"></p>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721145857087.png\" alt=\"image-20220721145857087\"></p>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721145908464.png\" alt=\"image-20220721145908464\"></p>\n<ol start=\"2\">\n<li>内容管理系统CMS（毕业设计）</li>\n</ol>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721145920627.png\" alt=\"image-20220721145920627\"></p>\n<ol start=\"3\">\n<li>商城类（企业）</li>\n</ol>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721145937110.png\" alt=\"image-20220721145937110\"></p>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721145946087.png\" alt=\"image-20220721145946087\"></p>\n<ol start=\"4\">\n<li>管理类（毕业设计）<ul>\n<li>体验网址：<a href=\"https://teacher.service.cf/\">https://teacher.service.cf/</a></li>\n<li>账号&#x2F;密码：admin&#x2F;admin</li>\n<li><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721145955781.png\" alt=\"image-20220721145955781\"></li>\n<li><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721150005524.png\" alt=\"image-20220721150005524\"></li>\n</ul>\n</li>\n</ol>\n","site":{"data":{}},"wordcount":545,"excerpt":"","more":"<h1 id=\"业务清单\"><a href=\"#业务清单\" class=\"headerlink\" title=\"业务清单\"></a>业务清单</h1><h2 id=\"一、主营业务\"><a href=\"#一、主营业务\" class=\"headerlink\" title=\"一、主营业务\"></a>一、主营业务</h2><ul>\n<li><p>接毕设、私人项目、远程开发，运维，上线；</p>\n</li>\n<li><p>程序+文档+运行调试+项目云部署（毕设类短期免费提供）</p>\n</li>\n</ul>\n<h2 id=\"二、项目经验\"><a href=\"#二、项目经验\" class=\"headerlink\" title=\"二、项目经验\"></a>二、项目经验</h2><ul>\n<li>内容管理系统CMS：如博客、论坛、朋友圈类</li>\n<li>仓储管理系统WMS：如工厂，器械，物料管理</li>\n<li>电商类系统：如类京东、淘宝可支付购物平台</li>\n<li>活动广告类系统，各种管理类系统</li>\n<li>…</li>\n</ul>\n<h2 id=\"三、项目类别\"><a href=\"#三、项目类别\" class=\"headerlink\" title=\"三、项目类别\"></a>三、项目类别</h2><ul>\n<li>APP</li>\n<li>微信小程序</li>\n<li>Web</li>\n</ul>\n<h2 id=\"四、后端语言及技术架构（包运维上线）\"><a href=\"#四、后端语言及技术架构（包运维上线）\" class=\"headerlink\" title=\"四、后端语言及技术架构（包运维上线）\"></a>四、后端语言及技术架构（包运维上线）</h2><ul>\n<li>语言：Java</li>\n<li>项目框架：Spring Boot、Spring Mvc</li>\n<li>数据库：MySql、Redis、mongDb 等</li>\n<li>资源管理：阿里、腾讯、七牛等对象存储；自搭建minio、fastDFS等</li>\n<li>支付：支付宝、微信等支付对接</li>\n<li>消息推送：小程序消息推送、短信、邮箱等</li>\n</ul>\n<h2 id=\"五、前端语言及架构：\"><a href=\"#五、前端语言及架构：\" class=\"headerlink\" title=\"五、前端语言及架构：\"></a>五、前端语言及架构：</h2><ul>\n<li><p>安卓</p>\n</li>\n<li><p>微信小程序</p>\n</li>\n<li><p>HTML5</p>\n</li>\n<li><p>VUE</p>\n</li>\n<li><p>react </p>\n</li>\n<li><p>element </p>\n</li>\n<li><p>Ant Design</p>\n</li>\n</ul>\n<h2 id=\"六、运维部署\"><a href=\"#六、运维部署\" class=\"headerlink\" title=\"六、运维部署\"></a>六、运维部署</h2><ul>\n<li>本地 Linux；Windows Service</li>\n<li>阿里、腾讯等云服务器、Jenkins自动化，Docker容器化部署</li>\n<li>可支持云服务、域名、商标、商户号、证书申请备案等指导</li>\n</ul>\n<h2 id=\"七、已有项目展示\"><a href=\"#七、已有项目展示\" class=\"headerlink\" title=\"七、已有项目展示\"></a>七、已有项目展示</h2><ol>\n<li>仓储管理系统WMS（企业）：</li>\n</ol>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721145841335.png\" alt=\"image-20220721145841335\"></p>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721145849353.png\" alt=\"image-20220721145849353\"></p>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721145857087.png\" alt=\"image-20220721145857087\"></p>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721145908464.png\" alt=\"image-20220721145908464\"></p>\n<ol start=\"2\">\n<li>内容管理系统CMS（毕业设计）</li>\n</ol>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721145920627.png\" alt=\"image-20220721145920627\"></p>\n<ol start=\"3\">\n<li>商城类（企业）</li>\n</ol>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721145937110.png\" alt=\"image-20220721145937110\"></p>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721145946087.png\" alt=\"image-20220721145946087\"></p>\n<ol start=\"4\">\n<li>管理类（毕业设计）<ul>\n<li>体验网址：<a href=\"https://teacher.service.cf/\">https://teacher.service.cf/</a></li>\n<li>账号&#x2F;密码：admin&#x2F;admin</li>\n<li><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721145955781.png\" alt=\"image-20220721145955781\"></li>\n<li><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721150005524.png\" alt=\"image-20220721150005524\"></li>\n</ul>\n</li>\n</ol>\n"},{"_content":"# 公司学习笔记\n1. Mysql 让主键 归0: 　TRUNCATE TABLE TableName \n2. 代码生成类使用：\n+ ![1](http://hbq.idse.top/blog/1.png)\n+ ![2](http://hbq.idse.top/blog/2.png)\n3. token生成\n+ 设置Authorization，\n![4](http://hbq.idse.top/blog/4.png)\n+ 设置账号密码send\n![5](http://hbq.idse.top/blog/5.png)\n4. 复制正确的token\n![6](http://hbq.idse.top/blog/6.png)\n5. 访问需要访问的页面和参数，bearer token中加入token\n![7](http://hbq.idse.top/blog/7.png)\n6. 数量类，金额类字段类型设计设计为decimal，防止丢失精度，在java中对应bigdecimal\n7.  ```javascript?linenums\n\t//主键\n\t@TableId\n\tprivate Long id;\n\t//自动添加时间\n\t@TableField(fill = FieldFill.INSERT)\n\tprivate Date createTime;\n\t//自动更新时间\n\t@TableField(fill = FieldFill.INSERT_UPDATE)\n\tprivate Date updateTime;\n\n\t```\n8. 跨服务调取\n在bms项目中查询customer中的数据库信息\n```javascript?linenums\n//BMS中\n//CustomerVipService\n@FeignClient(name = ServiceNameConstants.CUSTOMER_SERVICE, fallbackFactory = CustomerManagerServiceFallbackFactory.class, decode404 = true)\npublic interface CustomerVipService {\n    @GetMapping(\"/vipCustomer/vip\")\n    Integer getVipLimitByCustomerId(@RequestParam(\"customerId\") Integer customerId);\n}\n//CustomerVipServiceFallbackFactory\npublic class CustomerVipServiceFallbackFactory implements FallbackFactory<CustomerVipService> {\n    @Override\n    public CustomerVipService create(Throwable throwable) {\n        return new CustomerVipService() {\n            @Override\n            public Integer getVipLimitByCustomerId(Integer customerId) {\n                return 0;\n            }\n        };\n    }\n}\n//customer中\n @ApiOperation(value = \"根据用户ID查询vip限制合同下载份数\")\n    @GetMapping(\"/vipCustomer/vip\")\n    public Integer findVipLimitByUid(@RequestParam(\"customerId\") Integer customerId) {\n        VipCustomer vipCustomer = vipCustomerService.getOne(new QueryWrapper<VipCustomer>().eq(\"customer_id\", customerId).eq(\"is_del\", false));\n\n        if(vipCustomer==null){\n            return 0;\n        }\n        Vip vip=new Vip();\n        vip.setId(Long.valueOf(vipCustomer.getVipId()));\n        vip=vipService.getById(vip);\n        return vip.getDayLimit();\n    }\n```\n9. redis使用\n```javascript?linenums\n      redisRepository.setExpire(\"file_customer:date_\"+DateUtil.format(new Date(),\"yyyy-MM-dd\")+\":c_id_\"+fileCustomerList.getCustomerId(),i,86400);\n```\n10. 格式化时间：` DateUtil.format(new Date(),\"yyyy-MM-dd\")`\n11. 含有service的方法如果不写在service中，需要写在方法所调类中\n12. 同时传入多个参数，有可不传入的，应放弃resultful风格。\n13. map流遍历：\n```javascript?linenums\n Collection<OrderProduct> orderProducts = orderProductService.list(new QueryWrapper<OrderProduct>().eq(\"order_id\",order.getId()));\n                Long finalCustomerIdTemp = customerIdTemp;\n                List<Map<String,Object>> list = orderProducts.stream().map(orderProduct -> {\n                    Map<String,Object> packageDetail =  new HashMap<String,Object>();\n                    packageDetail.put(\"customerId\", finalCustomerIdTemp);\n                    packageDetail.put(\"productId\",orderProduct.getProductId());\n                    packageDetail.put(\"productName\",orderProduct.getProductName());\n                    packageDetail.put(\"isSend\",orderProduct.isSend());\n                    packageDetail.put(\"unit\",orderProduct.getUnit());\n                    packageDetail.put(\"num\",orderProduct.getNum());\n                    return packageDetail;\n                }).collect(Collectors.toList());\n```","source":"_posts/BookMark/学习笔记/法务部学习笔记.md","raw":"# 公司学习笔记\n1. Mysql 让主键 归0: 　TRUNCATE TABLE TableName \n2. 代码生成类使用：\n+ ![1](http://hbq.idse.top/blog/1.png)\n+ ![2](http://hbq.idse.top/blog/2.png)\n3. token生成\n+ 设置Authorization，\n![4](http://hbq.idse.top/blog/4.png)\n+ 设置账号密码send\n![5](http://hbq.idse.top/blog/5.png)\n4. 复制正确的token\n![6](http://hbq.idse.top/blog/6.png)\n5. 访问需要访问的页面和参数，bearer token中加入token\n![7](http://hbq.idse.top/blog/7.png)\n6. 数量类，金额类字段类型设计设计为decimal，防止丢失精度，在java中对应bigdecimal\n7.  ```javascript?linenums\n\t//主键\n\t@TableId\n\tprivate Long id;\n\t//自动添加时间\n\t@TableField(fill = FieldFill.INSERT)\n\tprivate Date createTime;\n\t//自动更新时间\n\t@TableField(fill = FieldFill.INSERT_UPDATE)\n\tprivate Date updateTime;\n\n\t```\n8. 跨服务调取\n在bms项目中查询customer中的数据库信息\n```javascript?linenums\n//BMS中\n//CustomerVipService\n@FeignClient(name = ServiceNameConstants.CUSTOMER_SERVICE, fallbackFactory = CustomerManagerServiceFallbackFactory.class, decode404 = true)\npublic interface CustomerVipService {\n    @GetMapping(\"/vipCustomer/vip\")\n    Integer getVipLimitByCustomerId(@RequestParam(\"customerId\") Integer customerId);\n}\n//CustomerVipServiceFallbackFactory\npublic class CustomerVipServiceFallbackFactory implements FallbackFactory<CustomerVipService> {\n    @Override\n    public CustomerVipService create(Throwable throwable) {\n        return new CustomerVipService() {\n            @Override\n            public Integer getVipLimitByCustomerId(Integer customerId) {\n                return 0;\n            }\n        };\n    }\n}\n//customer中\n @ApiOperation(value = \"根据用户ID查询vip限制合同下载份数\")\n    @GetMapping(\"/vipCustomer/vip\")\n    public Integer findVipLimitByUid(@RequestParam(\"customerId\") Integer customerId) {\n        VipCustomer vipCustomer = vipCustomerService.getOne(new QueryWrapper<VipCustomer>().eq(\"customer_id\", customerId).eq(\"is_del\", false));\n\n        if(vipCustomer==null){\n            return 0;\n        }\n        Vip vip=new Vip();\n        vip.setId(Long.valueOf(vipCustomer.getVipId()));\n        vip=vipService.getById(vip);\n        return vip.getDayLimit();\n    }\n```\n9. redis使用\n```javascript?linenums\n      redisRepository.setExpire(\"file_customer:date_\"+DateUtil.format(new Date(),\"yyyy-MM-dd\")+\":c_id_\"+fileCustomerList.getCustomerId(),i,86400);\n```\n10. 格式化时间：` DateUtil.format(new Date(),\"yyyy-MM-dd\")`\n11. 含有service的方法如果不写在service中，需要写在方法所调类中\n12. 同时传入多个参数，有可不传入的，应放弃resultful风格。\n13. map流遍历：\n```javascript?linenums\n Collection<OrderProduct> orderProducts = orderProductService.list(new QueryWrapper<OrderProduct>().eq(\"order_id\",order.getId()));\n                Long finalCustomerIdTemp = customerIdTemp;\n                List<Map<String,Object>> list = orderProducts.stream().map(orderProduct -> {\n                    Map<String,Object> packageDetail =  new HashMap<String,Object>();\n                    packageDetail.put(\"customerId\", finalCustomerIdTemp);\n                    packageDetail.put(\"productId\",orderProduct.getProductId());\n                    packageDetail.put(\"productName\",orderProduct.getProductName());\n                    packageDetail.put(\"isSend\",orderProduct.isSend());\n                    packageDetail.put(\"unit\",orderProduct.getUnit());\n                    packageDetail.put(\"num\",orderProduct.getNum());\n                    return packageDetail;\n                }).collect(Collectors.toList());\n```","slug":"BookMark/学习笔记/法务部学习笔记","published":1,"date":"2022-07-18T09:51:17.000Z","updated":"2022-07-18T09:51:17.000Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cl7ptszop0028aba5a58uh1ko","content":"<h1><span id=\"公司学习笔记\">公司学习笔记</span></h1><ol>\n<li>Mysql 让主键 归0: 　TRUNCATE TABLE TableName </li>\n<li>代码生成类使用：</li>\n</ol>\n<ul>\n<li><img src=\"http://hbq.idse.top/blog/1.png\" alt=\"1\"></li>\n<li><img src=\"http://hbq.idse.top/blog/2.png\" alt=\"2\"></li>\n</ul>\n<ol start=\"3\">\n<li>token生成</li>\n</ol>\n<ul>\n<li>设置Authorization，<br><img src=\"http://hbq.idse.top/blog/4.png\" alt=\"4\"></li>\n<li>设置账号密码send<br><img src=\"http://hbq.idse.top/blog/5.png\" alt=\"5\"></li>\n</ul>\n<ol start=\"4\">\n<li><p>复制正确的token<br><img src=\"http://hbq.idse.top/blog/6.png\" alt=\"6\"></p>\n</li>\n<li><p>访问需要访问的页面和参数，bearer token中加入token<br><img src=\"http://hbq.idse.top/blog/7.png\" alt=\"7\"></p>\n</li>\n<li><p>数量类，金额类字段类型设计设计为decimal，防止丢失精度，在java中对应bigdecimal</p>\n</li>\n<li><p>&#96;&#96;&#96;javascript?linenums<br>&#x2F;&#x2F;主键<br>@TableId<br>private Long id;<br>&#x2F;&#x2F;自动添加时间<br>@TableField(fill &#x3D; FieldFill.INSERT)<br>private Date createTime;<br>&#x2F;&#x2F;自动更新时间<br>@TableField(fill &#x3D; FieldFill.INSERT_UPDATE)<br>private Date updateTime;</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs kotlin\"><span class=\"hljs-number\">8.</span> 跨服务调取<br>在bms项目中查询customer中的数据库信息<br>```javascript?linenums<br><span class=\"hljs-comment\">//BMS中</span><br><span class=\"hljs-comment\">//CustomerVipService</span><br><span class=\"hljs-meta\">@FeignClient(name = ServiceNameConstants.CUSTOMER_SERVICE, fallbackFactory = CustomerManagerServiceFallbackFactory.class, decode404 = true)</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">CustomerVipService</span> &#123;<br>    <span class=\"hljs-meta\">@GetMapping(<span class=\"hljs-string\">&quot;/vipCustomer/vip&quot;</span>)</span><br>    Integer getVipLimitByCustomerId(<span class=\"hljs-meta\">@RequestParam(<span class=\"hljs-string\">&quot;customerId&quot;</span>)</span> Integer customerId);<br>&#125;<br><span class=\"hljs-comment\">//CustomerVipServiceFallbackFactory</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">CustomerVipServiceFallbackFactory</span> <span class=\"hljs-title\">implements</span> <span class=\"hljs-title\">FallbackFactory</span>&lt;<span class=\"hljs-type\">CustomerVipService</span>&gt; &#123;<br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> CustomerVipService create(Throwable throwable) &#123;<br>        <span class=\"hljs-keyword\">return</span> new CustomerVipService() &#123;<br>            <span class=\"hljs-meta\">@Override</span><br>            <span class=\"hljs-keyword\">public</span> Integer getVipLimitByCustomerId(Integer customerId) &#123;<br>                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>            &#125;<br>        &#125;;<br>    &#125;<br>&#125;<br><span class=\"hljs-comment\">//customer中</span><br> <span class=\"hljs-meta\">@ApiOperation(value = <span class=\"hljs-string\">&quot;根据用户ID查询vip限制合同下载份数&quot;</span>)</span><br>    <span class=\"hljs-meta\">@GetMapping(<span class=\"hljs-string\">&quot;/vipCustomer/vip&quot;</span>)</span><br>    <span class=\"hljs-keyword\">public</span> Integer findVipLimitByUid(<span class=\"hljs-meta\">@RequestParam(<span class=\"hljs-string\">&quot;customerId&quot;</span>)</span> Integer customerId) &#123;<br>        VipCustomer vipCustomer = vipCustomerService.getOne(new QueryWrapper&lt;VipCustomer&gt;().eq(<span class=\"hljs-string\">&quot;customer_id&quot;</span>, customerId).eq(<span class=\"hljs-string\">&quot;is_del&quot;</span>, <span class=\"hljs-literal\">false</span>));<br><br>        <span class=\"hljs-keyword\">if</span>(vipCustomer==<span class=\"hljs-literal\">null</span>)&#123;<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>        &#125;<br>        Vip vip=new Vip();<br>        vip.setId(<span class=\"hljs-built_in\">Long</span>.valueOf(vipCustomer.getVipId()));<br>        vip=vipService.getById(vip);<br>        <span class=\"hljs-keyword\">return</span> vip.getDayLimit();<br>    &#125;<br></code></pre></td></tr></table></figure></li>\n<li><p>redis使用</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">redisRepository.setExpire(&quot;file_customer:date_&quot;+DateUtil.format(new Date(),&quot;yyyy-MM-dd&quot;)+&quot;:c_id_&quot;+fileCustomerList.getCustomerId(),i,86400);<br></code></pre></td></tr></table></figure></li>\n<li><p>格式化时间：<code> DateUtil.format(new Date(),&quot;yyyy-MM-dd&quot;)</code></p>\n</li>\n<li><p>含有service的方法如果不写在service中，需要写在方法所调类中</p>\n</li>\n<li><p>同时传入多个参数，有可不传入的，应放弃resultful风格。</p>\n</li>\n<li><p>map流遍历：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">Collection&lt;OrderProduct&gt; orderProducts = orderProductService.list(new QueryWrapper&lt;OrderProduct&gt;().eq(&quot;order_id&quot;,order.getId()));<br>               Long finalCustomerIdTemp = customerIdTemp;<br>               List&lt;Map&lt;String,Object&gt;&gt; list = orderProducts.stream().map(orderProduct -&gt; &#123;<br>                   Map&lt;String,Object&gt; packageDetail =  new HashMap&lt;String,Object&gt;();<br>                   packageDetail.put(&quot;customerId&quot;, finalCustomerIdTemp);<br>                   packageDetail.put(&quot;productId&quot;,orderProduct.getProductId());<br>                   packageDetail.put(&quot;productName&quot;,orderProduct.getProductName());<br>                   packageDetail.put(&quot;isSend&quot;,orderProduct.isSend());<br>                   packageDetail.put(&quot;unit&quot;,orderProduct.getUnit());<br>                   packageDetail.put(&quot;num&quot;,orderProduct.getNum());<br>                   return packageDetail;<br>               &#125;).collect(Collectors.toList());<br></code></pre></td></tr></table></figure></li>\n</ol>\n","site":{"data":{}},"wordcount":2812,"excerpt":"","more":"<h1 id=\"公司学习笔记\"><a href=\"#公司学习笔记\" class=\"headerlink\" title=\"公司学习笔记\"></a>公司学习笔记</h1><ol>\n<li>Mysql 让主键 归0: 　TRUNCATE TABLE TableName </li>\n<li>代码生成类使用：</li>\n</ol>\n<ul>\n<li><img src=\"http://hbq.idse.top/blog/1.png\" alt=\"1\"></li>\n<li><img src=\"http://hbq.idse.top/blog/2.png\" alt=\"2\"></li>\n</ul>\n<ol start=\"3\">\n<li>token生成</li>\n</ol>\n<ul>\n<li>设置Authorization，<br><img src=\"http://hbq.idse.top/blog/4.png\" alt=\"4\"></li>\n<li>设置账号密码send<br><img src=\"http://hbq.idse.top/blog/5.png\" alt=\"5\"></li>\n</ul>\n<ol start=\"4\">\n<li><p>复制正确的token<br><img src=\"http://hbq.idse.top/blog/6.png\" alt=\"6\"></p>\n</li>\n<li><p>访问需要访问的页面和参数，bearer token中加入token<br><img src=\"http://hbq.idse.top/blog/7.png\" alt=\"7\"></p>\n</li>\n<li><p>数量类，金额类字段类型设计设计为decimal，防止丢失精度，在java中对应bigdecimal</p>\n</li>\n<li><p>&#96;&#96;&#96;javascript?linenums<br>&#x2F;&#x2F;主键<br>@TableId<br>private Long id;<br>&#x2F;&#x2F;自动添加时间<br>@TableField(fill &#x3D; FieldFill.INSERT)<br>private Date createTime;<br>&#x2F;&#x2F;自动更新时间<br>@TableField(fill &#x3D; FieldFill.INSERT_UPDATE)<br>private Date updateTime;</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs kotlin\"><span class=\"hljs-number\">8.</span> 跨服务调取<br>在bms项目中查询customer中的数据库信息<br>```javascript?linenums<br><span class=\"hljs-comment\">//BMS中</span><br><span class=\"hljs-comment\">//CustomerVipService</span><br><span class=\"hljs-meta\">@FeignClient(name = ServiceNameConstants.CUSTOMER_SERVICE, fallbackFactory = CustomerManagerServiceFallbackFactory.class, decode404 = true)</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">CustomerVipService</span> &#123;<br>    <span class=\"hljs-meta\">@GetMapping(<span class=\"hljs-string\">&quot;/vipCustomer/vip&quot;</span>)</span><br>    Integer getVipLimitByCustomerId(<span class=\"hljs-meta\">@RequestParam(<span class=\"hljs-string\">&quot;customerId&quot;</span>)</span> Integer customerId);<br>&#125;<br><span class=\"hljs-comment\">//CustomerVipServiceFallbackFactory</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">CustomerVipServiceFallbackFactory</span> <span class=\"hljs-title\">implements</span> <span class=\"hljs-title\">FallbackFactory</span>&lt;<span class=\"hljs-type\">CustomerVipService</span>&gt; &#123;<br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> CustomerVipService create(Throwable throwable) &#123;<br>        <span class=\"hljs-keyword\">return</span> new CustomerVipService() &#123;<br>            <span class=\"hljs-meta\">@Override</span><br>            <span class=\"hljs-keyword\">public</span> Integer getVipLimitByCustomerId(Integer customerId) &#123;<br>                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>            &#125;<br>        &#125;;<br>    &#125;<br>&#125;<br><span class=\"hljs-comment\">//customer中</span><br> <span class=\"hljs-meta\">@ApiOperation(value = <span class=\"hljs-string\">&quot;根据用户ID查询vip限制合同下载份数&quot;</span>)</span><br>    <span class=\"hljs-meta\">@GetMapping(<span class=\"hljs-string\">&quot;/vipCustomer/vip&quot;</span>)</span><br>    <span class=\"hljs-keyword\">public</span> Integer findVipLimitByUid(<span class=\"hljs-meta\">@RequestParam(<span class=\"hljs-string\">&quot;customerId&quot;</span>)</span> Integer customerId) &#123;<br>        VipCustomer vipCustomer = vipCustomerService.getOne(new QueryWrapper&lt;VipCustomer&gt;().eq(<span class=\"hljs-string\">&quot;customer_id&quot;</span>, customerId).eq(<span class=\"hljs-string\">&quot;is_del&quot;</span>, <span class=\"hljs-literal\">false</span>));<br><br>        <span class=\"hljs-keyword\">if</span>(vipCustomer==<span class=\"hljs-literal\">null</span>)&#123;<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>        &#125;<br>        Vip vip=new Vip();<br>        vip.setId(<span class=\"hljs-built_in\">Long</span>.valueOf(vipCustomer.getVipId()));<br>        vip=vipService.getById(vip);<br>        <span class=\"hljs-keyword\">return</span> vip.getDayLimit();<br>    &#125;<br></code></pre></td></tr></table></figure></li>\n<li><p>redis使用</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">redisRepository.setExpire(&quot;file_customer:date_&quot;+DateUtil.format(new Date(),&quot;yyyy-MM-dd&quot;)+&quot;:c_id_&quot;+fileCustomerList.getCustomerId(),i,86400);<br></code></pre></td></tr></table></figure></li>\n<li><p>格式化时间：<code> DateUtil.format(new Date(),&quot;yyyy-MM-dd&quot;)</code></p>\n</li>\n<li><p>含有service的方法如果不写在service中，需要写在方法所调类中</p>\n</li>\n<li><p>同时传入多个参数，有可不传入的，应放弃resultful风格。</p>\n</li>\n<li><p>map流遍历：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">Collection&lt;OrderProduct&gt; orderProducts = orderProductService.list(new QueryWrapper&lt;OrderProduct&gt;().eq(&quot;order_id&quot;,order.getId()));<br>               Long finalCustomerIdTemp = customerIdTemp;<br>               List&lt;Map&lt;String,Object&gt;&gt; list = orderProducts.stream().map(orderProduct -&gt; &#123;<br>                   Map&lt;String,Object&gt; packageDetail =  new HashMap&lt;String,Object&gt;();<br>                   packageDetail.put(&quot;customerId&quot;, finalCustomerIdTemp);<br>                   packageDetail.put(&quot;productId&quot;,orderProduct.getProductId());<br>                   packageDetail.put(&quot;productName&quot;,orderProduct.getProductName());<br>                   packageDetail.put(&quot;isSend&quot;,orderProduct.isSend());<br>                   packageDetail.put(&quot;unit&quot;,orderProduct.getUnit());<br>                   packageDetail.put(&quot;num&quot;,orderProduct.getNum());<br>                   return packageDetail;<br>               &#125;).collect(Collectors.toList());<br></code></pre></td></tr></table></figure></li>\n</ol>\n"},{"_content":"# 阶段一模块二学习笔记-Spring高级框架\n[toc]\n## 一、自定义Ioc&AOP框架\n## 1. spring概述\n+  Spring 简介：Spring 是分层的 full-stack（全栈） 轻量级开源框架，以 IoC 和 AOP 为内核，提供了展现层 SpringMVC 和业务层事务管理等众多的企业级应⽤技术，还能整合开源世界众多著名的第三⽅框架和类库，已经成为使⽤最多的 Java EE 企业应⽤开源框架。\n+ Spring 的优势\n\t+ ⽅便解耦，简化开发\n\t+ AOP编程的⽀持\n\t+ 声明式事务的⽀持\n\t+ ⽅便程序的测试\n\t+ ⽅便集成各种优秀框架\n\t+ 降低JavaEE API的使⽤难度\n\t+ 源码是经典的 Java 学习范例\n\n## 2. 核心思想\n### 2.1 Ioc\n+ 什么是IOC： IoC Inversion of Control (控制反转/反转控制)，注意它是⼀个技术思想，不是⼀个技术实现\n描述的事情：Java开发领域对象的创建，管理的问题\n传统开发⽅式：⽐如类A依赖于类B，往往会在类A中new⼀个B的对象\nIoC思想下开发⽅式：我们不⽤⾃⼰去new对象了，⽽是由IoC容器（Spring框架）去帮助我们实例化对象并且管理它，我们需要使⽤哪个对象，去问IoC容器要即可\n![enter description here](https://img-1256282866.cos.ap-beijing.myqcloud.com/1627713407734.png)\n+  IOC的作用\nIoC解决对象之间的耦合问题\n![enter description here](https://img-1256282866.cos.ap-beijing.myqcloud.com/1627713793120.png)\n+  IOC和DI的区别\nIOC和DI描述的是同一件事情(对象实例化及依赖关系维护这件事情)，只不过角度不同罢了\nIOC是站在对象的角度：对象实例化及其管理的权利交给了（反转)给了容器\nDI是站在容器的角度：容器会把对象依赖的其他对象注入(送进去)，比如A对象实例化过程中因为声明了一个B类型的属性，那么就需要容器把B对象注入给A\n### 2.2 AOP\n+ 先了解OOP\nOOP三⼤特征：封装、继承和多态\noop是⼀种垂直继承体系\n![enter description here](https://img-1256282866.cos.ap-beijing.myqcloud.com/1627715098188.png)\n+ OOP问题：\n\tOOP编程思想可以解决⼤多数的代码重复问题，但是有⼀些情况是处理不了的，⽐如下⾯的在顶级⽗类\n\tAnimal中的多个⽅法中相同位置出现了重复代码，OOP就解决不了，如图的横切逻辑\n\t![enter description here](https://img-1256282866.cos.ap-beijing.myqcloud.com/1627715138038.png)\n\t![enter description here](https://img-1256282866.cos.ap-beijing.myqcloud.com/1627715181331.png)\n\t+ 横切代码重复问题\n\t+ 横切逻辑代码和业务代码混杂在⼀起，代码臃肿，维护不⽅便\n## 3.手写IOC和AOP\n+ 提到工厂模式和单例模式\n+ 工厂模式：从自己手动创建对象，到自己只传递想要的参数给工厂，由工厂创建对象。\n+ 单例模式，应用在全局只有一个实例对象时，将自身实例化并赋值给一个属性，加载到此类时直接调用其静态实例。分为懒汉和饿汉式\n\t+ 饿汉：![enter description here](https://img-1256282866.cos.ap-beijing.myqcloud.com/1627722518688.png)\n\t+ 懒汉：![enter description here](https://img-1256282866.cos.ap-beijing.myqcloud.com/1627722551848.png)\n+ 代理模式：实现对方法的前后增强，相当于委托给代理实现想要的功能，代理可以在实现功能的前后实现自己的需求。\n\t+ jdk动态代理（需要委托对象实现接口）：![enter description here](https://img-1256282866.cos.ap-beijing.myqcloud.com/1627787295618.png)\n\t+ 使用：![enter description here](https://img-1256282866.cos.ap-beijing.myqcloud.com/1627787463646.png)\n### 3.1银行转账的工厂模式实现\n工厂模式生产，在xml中获取实现的全路径进行反射\n+ 工厂：读取解析xml，通过反射技术实例化对象并且存储待用（map集合）；对外提供获取实例对象的接口（根据id获取）\n![enter description here](https://img-1256282866.cos.ap-beijing.myqcloud.com/1627736383616.png)\n+ 存放需要实例化的对象全路径\n![enter description here](https://img-1256282866.cos.ap-beijing.myqcloud.com/1627736399409.png)\n+ 使用工厂中的方法并传入相应参数\n![enter description here](https://img-1256282866.cos.ap-beijing.myqcloud.com/1627736425603.png)\n+ 源码：`git clone -b master1 https://gitee.com/idse666666/my_spring.git`\n+ 存在问题：仍需要从工厂获取bean\n+ 解决：![enter description here](https://img-1256282866.cos.ap-beijing.myqcloud.com/1627737614000.png)\n ![enter description here](https://img-1256282866.cos.ap-beijing.myqcloud.com/1627737680109.png)\n + 源码：`git clone -b master2 https://gitee.com/idse666666/my_spring.git`\n ### 3.2事务控制\n + 如图：如果不对service层进行事务控制，将会存在前者转账，后者接收不到的问题。\n ![enter description here](https://img-1256282866.cos.ap-beijing.myqcloud.com/1627785714172.png)\n + 而现有的事务控制是对于每一个数据库连接，我们需要将数据库连接存放到线程中，单个线程只有一个数据库连接，也就是单例模式。\n ![enter description here](https://img-1256282866.cos.ap-beijing.myqcloud.com/1627785664518.png)\n+ 经过以上事务控制的拦截，我们捕获存在异常则回滚事务。保证了数据正确。\n ![enter description here](https://img-1256282866.cos.ap-beijing.myqcloud.com/1627801093181.png)\n+ 源码：`git clone -b master3 https://gitee.com/idse666666/my_spring.git`\n+ 仍存在问题：我们的每个方法都需要添加开启事务，提交事务，回滚以及try..catch...代码块。应使用代理模式在方法的前后进行增强，将固定的try...catch...代码块提取至jdk动态代理里。\n ![enter description here](https://img-1256282866.cos.ap-beijing.myqcloud.com/1627801348308.png)\n   ![enter description here](https://img-1256282866.cos.ap-beijing.myqcloud.com/1627801429789.png)\n  + 源码：`git clone -b master4 https://gitee.com/idse666666/my_spring.git`\n ### 3.3将所有用到的工具类等以bean形式封装到xml中。\n ![enter description here](https://img-1256282866.cos.ap-beijing.myqcloud.com/1627806613202.png)\n+  源码：`git clone -b master5 https://gitee.com/idse666666/my_spring.git`\n\n### 3.4 手写IOC与AOP示意图\n ![enter description here](https://img-1256282866.cos.ap-beijing.myqcloud.com/1627806602644.png)\n\n## 二、 spring IOC应用\n![enter description here](https://img-1256282866.cos.ap-beijing.myqcloud.com/1627973066835.png)\n### 1. BeanFactory与ApplicationContext区别\n+ BeanFactory是Spring框架中IoC容器的顶层接⼝,它只是⽤来定义⼀些基础功能,定义⼀些基础规范,⽽ApplicationContext是它的⼀个⼦接⼝，所以ApplicationContext是具备BeanFactory提供的全部功能的。我们称BeanFactory为SpringIOC的基础容器，ApplicationContext是容器的⾼级接⼝，比BeanFactory要拥有更多的功能\n### 2. 启动IOC的方式\n#### 2.1 Java环境下\n + ClassPathXmlApplicationContext 从类的根路径下加载配置⽂件（推荐使⽤）\n + AnnotationConfigApplicationContext 纯注解模式下启动Spring容器\n#### 2.2 Web环境下启动IoC容器\n + Web环境下启动IoC容器\n ```javascript?linenums\n<!DOCTYPE web-app PUBLIC\n \"-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN\"\n \"http://java.sun.com/dtd/web-app_2_3.dtd\" >\n\n<web-app>\n  <display-name>Archetype Created Web Application</display-name>\n  <!--配置Spring ioc容器的配置文件-->\n  <context-param>\n    <param-name>contextConfigLocation</param-name>\n    <param-value>classpath:applicationContext.xml</param-value>\n  </context-param>\n  <!--使用监听器启动Spring的IOC容器-->\n  <listener>\n    <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>\n  </listener>\n</web-app>\n ```\n###  3. 使用spring ioc xml形式注入Bean改造手写的ioc和aop\n#### 3.1 常见的bean标签：\n+ id属性： ⽤于给bean提供⼀个唯⼀标识。在⼀个标签内部，标识必须唯⼀。\n+ class属性：⽤于指定创建Bean对象的全限定类名。\n+ name属性：⽤于给bean提供⼀个或多个名称。多个名称⽤空格分隔。\n+ factory-bean属性：⽤于指定创建当前bean对象的⼯⼚bean的唯⼀标识。当指定了此属性之后，class属性失效。\n+ factory-method属性：⽤于指定创建当前bean对象的⼯⼚⽅法，如配合factory-bean属性使⽤，则class属性失效。如配合class属性使⽤，则⽅法必须是static的。\n+ scope属性：⽤于指定bean对象的作⽤范围。通常情况下就是singleton。当要⽤到多例模式时，可以配置为prototype。\n+ init-method属性：⽤于指定bean对象的初始化⽅法，此⽅法会在bean对象装配后调⽤。必须是⼀个⽆参⽅法。\n+ destory-method属性：⽤于指定bean对象的销毁⽅法，此⽅法会在bean对象销毁前执⾏。它只能为scope是singleton时起作⽤。\n#### 3.2 实例化bean的几种方式\n```javascript?linenums\n<!--Spring ioc 实例化Bean的三种方式-->\n<!--方式一：使用无参构造器（推荐）-->\n<bean id=\"connectionUtils\" class=\"com.lagou.edu.utils.ConnectionUtils\"></bean>\n<!--另外两种方式是为了我们自己new的对象加入到SpringIOC容器管理-->\n<!--方式二：静态方法-->\n<bean id=\"connectionUtils\" class=\"com.lagou.edu.factory.CreateBeanFactory\" factory-method=\"getInstanceStatic\"/>\n<!--方式三：实例化方法-->\n<bean id=\"createBeanFactory\" class=\"com.lagou.edu.factory.CreateBeanFactory\"></bean>\n<bean id=\"connectionUtils\" factory-bean=\"createBeanFactory\" factory-method=\"getInstance\"/>\n```\n#### 3.3 DI依赖注入\n```javascript?linenums\n<property name=\"ConnectionUtils\" ref=\"connectionUtils\"/>\n<property name=\"name\" value=\"zhangsan\"/>\n<property name=\"sex\" value=\"1\"/>\n<property name=\"money\" value=\"100.3\"/>--> \n```\n+  源码：`git clone -b master6 https://gitee.com/idse666666/my_spring.git`\n\n### 4. xml与注解相结合模式\n#### 4.1注意事项\n+ 实际企业开发中，纯xml模式使⽤已经很少了\n+ 引⼊注解功能，不需要引⼊额外的jar\n+ xml+注解结合模式，xml⽂件依然存在，所以，spring IOC容器的启动仍然从加载xml开始\n#### 4.2xml中标签与注解的对应（IoC）\n![enter description here](https://img-1256282866.cos.ap-beijing.myqcloud.com/1627985840559.png)\nDI 依赖注⼊的注解实现⽅式:@Autowired（推荐使⽤）\n![enter description here](https://img-1256282866.cos.ap-beijing.myqcloud.com/1627987084431.png)\n\n+  源码：`git clone -b master7 https://gitee.com/idse666666/my_spring.git`\n\n### 5.全注解形式\n#### 5.1常用注解\n@Configuration 注解，表名当前类是⼀个配置类\n@ComponentScan 注解，替代 context:component-scan\n@PropertySource，引⼊外部属性配置⽂件\n@Import 引⼊其他配置类\n@Value 对变量赋值，可以直接赋值，也可以使⽤ ${} 读取资源配置⽂件中的信息\n@Bean 将⽅法返回对象加⼊ SpringIOC 容器\n#### 5.2 具体迁移所对应形式\n![enter description here](https://img-1256282866.cos.ap-beijing.myqcloud.com/1627988397856.png)\n+  源码：`git clone -b master8 https://gitee.com/idse666666/my_spring.git`\n\n### 6. 延迟加载\n#### 6.1概念\nApplicationContext 容器的默认⾏为是在启动服务器时将所有 singleton bean 提前进⾏实例化。提前\n实例化意味着作为初始化过程的⼀部分，ApplicationContext 实例会创建并配置所有的singleton\nbean。\n#### 6.2使用\n```javascript?linenums\n//xml\n//单个\n<bean id=\"testBean\" calss=\"cn.lagou.LazyBean\" lazy-init=\"true\" />\n//全部\n<beans default-lazy-init=\"true\"></beans>\n```\n#### 6.3 使用场景\n+ 开启延迟加载⼀定程度提⾼容器启动和运转性能\n+ 对于不常使⽤的 Bean 设置延迟加载，这样偶尔使⽤的时候再加载，不必要从⼀开始该 Bean 就占⽤资源\n\n### 7. FactoryBean 和 BeanFactory\n#### 7.1概念\n+ BeanFactory接⼝是容器的顶级接⼝，定义了容器的⼀些基础⾏为，负责⽣产和管理Bean的⼀个⼯⼚，具体使⽤它下⾯的⼦接⼝类型，⽐如ApplicationContext；此处我们重点分析FactoryBean\n+ Spring中Bean有两种，⼀种是普通Bean，⼀种是⼯⼚Bean（FactoryBean），FactoryBean可以⽣成某⼀个类型的Bean实例（返回给我们），也就是说我们可以借助于它⾃定义Bean的创建过程。\n+ Bean创建的三种⽅式中的静态⽅法和实例化⽅法和FactoryBean作⽤类似，FactoryBean使⽤较多，尤其在Spring框架⼀些组件中会使⽤，还有其他框架和Spring框架整合时使⽤\n#### 7.2 使用\n![enter description here](https://img-1256282866.cos.ap-beijing.myqcloud.com/1627993291758.png)\n![enter description here](https://img-1256282866.cos.ap-beijing.myqcloud.com/1627993314180.png)\n\n## 二、 spring AOP应用\n+ AOP的本质：在不改变原有业务逻辑的情况下增强横切逻辑，横切逻辑代码往往是权限校验代码、⽇志代码、事务控制代码、性能监控代码。\n+ ![1](https://img-1256282866.cos.ap-beijing.myqcloud.com/1.png)\n### 1. AOP相关术语\n+ 连接点：⽅法开始时、结束时、正常运⾏完毕时、⽅法异常时等这些特殊的时机点，我们称之为连接 点，项⽬中每个⽅法都有连接点，连接点是⼀种候选点\n+ 切⼊点：指定AOP思想想要影响的具体⽅法是哪些，描述感兴趣的⽅法 Advice增强：\n\t+ 第⼀个层次：指的是横切逻辑\n\t+ 第⼆个层次：⽅位点（在某⼀些连接点上加⼊横切逻辑，那么这些连接点就叫做⽅位点，描述的是具体 的特殊时机）\n+ Aspect切⾯：切⾯概念是对上述概念的⼀个综合 Aspect切⾯= 切⼊点+增强= 切⼊点（锁定⽅法） + ⽅位点（锁定⽅法中的特殊时机）+ 横切逻辑 众多的概念，⽬的就是为了锁定要在哪个地⽅插⼊什么横切逻辑代码\n### 2.Spring中AOP的代理选择\n+ Spring 实现AOP思想使⽤的是动态代理技术\n+ 默认情况下，Spring会根据被代理对象是否实现接⼝来选择使⽤JDK还是CGLIB。当被代理对象没有实现任何接⼝时，Spring会选择CGLIB。当被代理对象实现了接⼝，Spring会选择JDK官⽅的代理技术，不过我们可以通过配置的⽅式，让Spring强制使⽤CGLIB。\n### 3. AOP的xml实现\n```javascript?linenums\n    <!--aop注解模式-->\n    <!--aspect   =    切入点（锁定方法） + 方位点（锁定方法中的特殊时机）+ 横切逻辑-->\n    <aop:config>\n        <!--横切逻辑类名-->\n        <aop:aspect id=\"lagAspect\" ref=\"logUtils\">\n            <!--切入点：切入我们感兴趣的方法，使用aspectj表达式-->\n            <aop:pointcut id=\"pt1\" expression=\"execution(public void com.lagou.edu.service.impl.TransferServiceImpl.transfer(java.lang.String , java.lang.String , int ))\"/>\n\n            <!--aop:before方位点-->\n\t\t\t<!--method具体横切逻辑-->\n            <!--aop:before前置通知/增强-->\n            <!--<aop:before method=\"beforeMethod\" pointcut-ref=\"pt1\"/>-->\n            <!--aop:after，最终通知，无论如何都执行-->\n            <!--aop:after-returnning，正常执行通知-->\n            <!--<aop:after-returning method=\"successMethod\" returning=\"retValue\"/>-->\n            <!--aop:after-throwing，异常通知-->\n            <aop:around method=\"arroundMethod\" pointcut-ref=\"pt1\"/>\n        </aop:aspect>\n    </aop:config>\n```\n![enter description here](https://img-1256282866.cos.ap-beijing.myqcloud.com/1628085817082.png)\n+  源码：`git clone -b master9 https://gitee.com/idse666666/my_spring.git`\n### 4.AOP的xml+anno形式实现\n![enter description here](https://img-1256282866.cos.ap-beijing.myqcloud.com/1628087356985.png)\n+  源码：`git clone -b master10 https://gitee.com/idse666666/my_spring.git`\n### 5. AOP的anno模式实现\n![enter description here](https://img-1256282866.cos.ap-beijing.myqcloud.com/1628125966009.png)\n+  源码：`git clone -b master11 https://gitee.com/idse666666/my_spring.git`\n### 6. 声明式事务的⽀持\n#### 6.1概念\n事务指逻辑上的⼀组操作，组成这组操作的各个单元，要么全部成功，要么全部不成功。从⽽确保了数据的准确与安全。又分为\n+ 编程式事务：在业务代码中添加事务控制代码，这样的事务控制机制就叫做编程式事务\n+ 声明式事务：通过xml或者注解配置的⽅式达到事务控制的⽬的，叫做声明式事务\n#### 6.2事务的四大特性\n+ 原⼦性（Atomicity） 原⼦性是指事务是⼀个不可分割的⼯作单位，事务中的操作要么都发⽣，要么都不发⽣。从操作的⻆度来描述，事务中的各个操作要么都成功要么都失败\n+ ⼀致性（Consistency） 事务必须使数据库从⼀个⼀致性状态变换到另外⼀个⼀致性状态。⼀致性是从数据的⻆度来说的，\n+ 隔离性（Isolation） 事务的隔离性是多个⽤户并发访问数据库时，数据库为每⼀个⽤户开启的事务，每个事务不能被其他事务的操作数据所⼲扰，多个并发事务之间要相互隔离。\n+ 持久性（Durability） 持久性是指⼀个事务⼀旦被提交，它对数据库中数据的改变就是永久性的，接下来即使数据库发⽣故障也不应该对其有任何影响。\n## 三、 事务\n### 1 事务的隔离级别\n 不考虑隔离级别会出现：\n+ 脏读：⼀个线程中的事务读到了另外⼀个线程中未提交的数据。\n+ 不可重复读：⼀个线程中的事务读到了另外⼀个线程中已经提交的update的数据（前后内容不⼀样）\n+ 虚读（幻读）：⼀个线程中的事务读到了另外⼀个线程中已经提交的insert或者delete的数据（前后条数不⼀样）\n四种隔离级别\n+ Serializable（串⾏化）：可避免脏读、不可重复读、虚读情况的发⽣。（串⾏化） \n+ Repeatable read（可重复读）：可避免脏读、不可重复读情况的发⽣。(幻读有可能发⽣) 该机制下会对要update的⾏进⾏加锁\n+ Read committed（读已提交）：可避免脏读情况发⽣。不可重复读和幻读⼀定会发⽣。 \n+ Read uncommitted（读未提交）：最低级别，以上情况均⽆法保证。(读未提交) \n注意：级别依次升⾼，效率依次降低\n### 2.事务的传播性\n+ 事务往往在service层进⾏控制，如果出现service层⽅法A调⽤了另外⼀个service层⽅法B，A和B⽅法本身都已经被添加了事务控制，那么A调⽤B的时候，就需要进⾏事务的⼀些协商，这就叫做事务的传播⾏为。A调⽤B，我们站在B的⻆度来观察来定义事务的传播⾏为\n![enter description here](https://img-1256282866.cos.ap-beijing.myqcloud.com/1628127266368.png)\n\n### 3. spring xml实现事务\n```javascript?linenums\n<!--spring声明式事务配置，声明式事务无非就是配置一个aop，只不过有些标签不一样罢了-->\n<!--横切逻辑-->\n<bean id=\"transactionManager\" class=\"org.springframework.jdbc.datasource.DataSourceTransactionManager\">\n\t<constructor-arg name=\"dataSource\" ref=\"dataSource\"></constructor-arg>\n</bean>\n\n<tx:advice id=\"txAdvice\" transaction-manager=\"transactionManager\">\n\t<!--定制事务细节，传播行为、隔离级别等-->\n\t<tx:attributes>\n\t\t<!--一般性配置-->\n\t\t<tx:method name=\"*\" read-only=\"false\" propagation=\"REQUIRED\" isolation=\"DEFAULT\" timeout=\"-1\"/>\n\t\t<!--针对查询的覆盖性配置-->\n\t\t<tx:method name=\"query*\" read-only=\"true\" propagation=\"SUPPORTS\"/>\n\t</tx:attributes>\n</tx:advice>\n<aop:config>\n\t<!--advice-ref指向增强=横切逻辑+方位&-->\n\t<aop:advisor advice-ref=\"txAdvice\" pointcut=\"execution(* com.lagou.edu.service.impl.TransferServiceImpl.*(..))\"/>\n</aop:config>\n```\n### 4. spring xml+anno实现事务\n```javascript?linenums\n//xml\n<!--声明式事务的注解驱动-->\n<tx:annotation-driven transaction-manager=\"transactionManager\"/>\n//anno\n@Transactional\n```\n### 5. 纯注解\n```javascript?linenums\n@EnableTransactionManagement\n@Transactional\n```\n+  源码：`git clone -b master12 https://gitee.com/idse666666/my_spring.git`\n\n","source":"_posts/BookMark/拉勾笔记/1-2.IoC容器设计实现及Spring源码分析.md","raw":"# 阶段一模块二学习笔记-Spring高级框架\n[toc]\n## 一、自定义Ioc&AOP框架\n## 1. spring概述\n+  Spring 简介：Spring 是分层的 full-stack（全栈） 轻量级开源框架，以 IoC 和 AOP 为内核，提供了展现层 SpringMVC 和业务层事务管理等众多的企业级应⽤技术，还能整合开源世界众多著名的第三⽅框架和类库，已经成为使⽤最多的 Java EE 企业应⽤开源框架。\n+ Spring 的优势\n\t+ ⽅便解耦，简化开发\n\t+ AOP编程的⽀持\n\t+ 声明式事务的⽀持\n\t+ ⽅便程序的测试\n\t+ ⽅便集成各种优秀框架\n\t+ 降低JavaEE API的使⽤难度\n\t+ 源码是经典的 Java 学习范例\n\n## 2. 核心思想\n### 2.1 Ioc\n+ 什么是IOC： IoC Inversion of Control (控制反转/反转控制)，注意它是⼀个技术思想，不是⼀个技术实现\n描述的事情：Java开发领域对象的创建，管理的问题\n传统开发⽅式：⽐如类A依赖于类B，往往会在类A中new⼀个B的对象\nIoC思想下开发⽅式：我们不⽤⾃⼰去new对象了，⽽是由IoC容器（Spring框架）去帮助我们实例化对象并且管理它，我们需要使⽤哪个对象，去问IoC容器要即可\n![enter description here](https://img-1256282866.cos.ap-beijing.myqcloud.com/1627713407734.png)\n+  IOC的作用\nIoC解决对象之间的耦合问题\n![enter description here](https://img-1256282866.cos.ap-beijing.myqcloud.com/1627713793120.png)\n+  IOC和DI的区别\nIOC和DI描述的是同一件事情(对象实例化及依赖关系维护这件事情)，只不过角度不同罢了\nIOC是站在对象的角度：对象实例化及其管理的权利交给了（反转)给了容器\nDI是站在容器的角度：容器会把对象依赖的其他对象注入(送进去)，比如A对象实例化过程中因为声明了一个B类型的属性，那么就需要容器把B对象注入给A\n### 2.2 AOP\n+ 先了解OOP\nOOP三⼤特征：封装、继承和多态\noop是⼀种垂直继承体系\n![enter description here](https://img-1256282866.cos.ap-beijing.myqcloud.com/1627715098188.png)\n+ OOP问题：\n\tOOP编程思想可以解决⼤多数的代码重复问题，但是有⼀些情况是处理不了的，⽐如下⾯的在顶级⽗类\n\tAnimal中的多个⽅法中相同位置出现了重复代码，OOP就解决不了，如图的横切逻辑\n\t![enter description here](https://img-1256282866.cos.ap-beijing.myqcloud.com/1627715138038.png)\n\t![enter description here](https://img-1256282866.cos.ap-beijing.myqcloud.com/1627715181331.png)\n\t+ 横切代码重复问题\n\t+ 横切逻辑代码和业务代码混杂在⼀起，代码臃肿，维护不⽅便\n## 3.手写IOC和AOP\n+ 提到工厂模式和单例模式\n+ 工厂模式：从自己手动创建对象，到自己只传递想要的参数给工厂，由工厂创建对象。\n+ 单例模式，应用在全局只有一个实例对象时，将自身实例化并赋值给一个属性，加载到此类时直接调用其静态实例。分为懒汉和饿汉式\n\t+ 饿汉：![enter description here](https://img-1256282866.cos.ap-beijing.myqcloud.com/1627722518688.png)\n\t+ 懒汉：![enter description here](https://img-1256282866.cos.ap-beijing.myqcloud.com/1627722551848.png)\n+ 代理模式：实现对方法的前后增强，相当于委托给代理实现想要的功能，代理可以在实现功能的前后实现自己的需求。\n\t+ jdk动态代理（需要委托对象实现接口）：![enter description here](https://img-1256282866.cos.ap-beijing.myqcloud.com/1627787295618.png)\n\t+ 使用：![enter description here](https://img-1256282866.cos.ap-beijing.myqcloud.com/1627787463646.png)\n### 3.1银行转账的工厂模式实现\n工厂模式生产，在xml中获取实现的全路径进行反射\n+ 工厂：读取解析xml，通过反射技术实例化对象并且存储待用（map集合）；对外提供获取实例对象的接口（根据id获取）\n![enter description here](https://img-1256282866.cos.ap-beijing.myqcloud.com/1627736383616.png)\n+ 存放需要实例化的对象全路径\n![enter description here](https://img-1256282866.cos.ap-beijing.myqcloud.com/1627736399409.png)\n+ 使用工厂中的方法并传入相应参数\n![enter description here](https://img-1256282866.cos.ap-beijing.myqcloud.com/1627736425603.png)\n+ 源码：`git clone -b master1 https://gitee.com/idse666666/my_spring.git`\n+ 存在问题：仍需要从工厂获取bean\n+ 解决：![enter description here](https://img-1256282866.cos.ap-beijing.myqcloud.com/1627737614000.png)\n ![enter description here](https://img-1256282866.cos.ap-beijing.myqcloud.com/1627737680109.png)\n + 源码：`git clone -b master2 https://gitee.com/idse666666/my_spring.git`\n ### 3.2事务控制\n + 如图：如果不对service层进行事务控制，将会存在前者转账，后者接收不到的问题。\n ![enter description here](https://img-1256282866.cos.ap-beijing.myqcloud.com/1627785714172.png)\n + 而现有的事务控制是对于每一个数据库连接，我们需要将数据库连接存放到线程中，单个线程只有一个数据库连接，也就是单例模式。\n ![enter description here](https://img-1256282866.cos.ap-beijing.myqcloud.com/1627785664518.png)\n+ 经过以上事务控制的拦截，我们捕获存在异常则回滚事务。保证了数据正确。\n ![enter description here](https://img-1256282866.cos.ap-beijing.myqcloud.com/1627801093181.png)\n+ 源码：`git clone -b master3 https://gitee.com/idse666666/my_spring.git`\n+ 仍存在问题：我们的每个方法都需要添加开启事务，提交事务，回滚以及try..catch...代码块。应使用代理模式在方法的前后进行增强，将固定的try...catch...代码块提取至jdk动态代理里。\n ![enter description here](https://img-1256282866.cos.ap-beijing.myqcloud.com/1627801348308.png)\n   ![enter description here](https://img-1256282866.cos.ap-beijing.myqcloud.com/1627801429789.png)\n  + 源码：`git clone -b master4 https://gitee.com/idse666666/my_spring.git`\n ### 3.3将所有用到的工具类等以bean形式封装到xml中。\n ![enter description here](https://img-1256282866.cos.ap-beijing.myqcloud.com/1627806613202.png)\n+  源码：`git clone -b master5 https://gitee.com/idse666666/my_spring.git`\n\n### 3.4 手写IOC与AOP示意图\n ![enter description here](https://img-1256282866.cos.ap-beijing.myqcloud.com/1627806602644.png)\n\n## 二、 spring IOC应用\n![enter description here](https://img-1256282866.cos.ap-beijing.myqcloud.com/1627973066835.png)\n### 1. BeanFactory与ApplicationContext区别\n+ BeanFactory是Spring框架中IoC容器的顶层接⼝,它只是⽤来定义⼀些基础功能,定义⼀些基础规范,⽽ApplicationContext是它的⼀个⼦接⼝，所以ApplicationContext是具备BeanFactory提供的全部功能的。我们称BeanFactory为SpringIOC的基础容器，ApplicationContext是容器的⾼级接⼝，比BeanFactory要拥有更多的功能\n### 2. 启动IOC的方式\n#### 2.1 Java环境下\n + ClassPathXmlApplicationContext 从类的根路径下加载配置⽂件（推荐使⽤）\n + AnnotationConfigApplicationContext 纯注解模式下启动Spring容器\n#### 2.2 Web环境下启动IoC容器\n + Web环境下启动IoC容器\n ```javascript?linenums\n<!DOCTYPE web-app PUBLIC\n \"-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN\"\n \"http://java.sun.com/dtd/web-app_2_3.dtd\" >\n\n<web-app>\n  <display-name>Archetype Created Web Application</display-name>\n  <!--配置Spring ioc容器的配置文件-->\n  <context-param>\n    <param-name>contextConfigLocation</param-name>\n    <param-value>classpath:applicationContext.xml</param-value>\n  </context-param>\n  <!--使用监听器启动Spring的IOC容器-->\n  <listener>\n    <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>\n  </listener>\n</web-app>\n ```\n###  3. 使用spring ioc xml形式注入Bean改造手写的ioc和aop\n#### 3.1 常见的bean标签：\n+ id属性： ⽤于给bean提供⼀个唯⼀标识。在⼀个标签内部，标识必须唯⼀。\n+ class属性：⽤于指定创建Bean对象的全限定类名。\n+ name属性：⽤于给bean提供⼀个或多个名称。多个名称⽤空格分隔。\n+ factory-bean属性：⽤于指定创建当前bean对象的⼯⼚bean的唯⼀标识。当指定了此属性之后，class属性失效。\n+ factory-method属性：⽤于指定创建当前bean对象的⼯⼚⽅法，如配合factory-bean属性使⽤，则class属性失效。如配合class属性使⽤，则⽅法必须是static的。\n+ scope属性：⽤于指定bean对象的作⽤范围。通常情况下就是singleton。当要⽤到多例模式时，可以配置为prototype。\n+ init-method属性：⽤于指定bean对象的初始化⽅法，此⽅法会在bean对象装配后调⽤。必须是⼀个⽆参⽅法。\n+ destory-method属性：⽤于指定bean对象的销毁⽅法，此⽅法会在bean对象销毁前执⾏。它只能为scope是singleton时起作⽤。\n#### 3.2 实例化bean的几种方式\n```javascript?linenums\n<!--Spring ioc 实例化Bean的三种方式-->\n<!--方式一：使用无参构造器（推荐）-->\n<bean id=\"connectionUtils\" class=\"com.lagou.edu.utils.ConnectionUtils\"></bean>\n<!--另外两种方式是为了我们自己new的对象加入到SpringIOC容器管理-->\n<!--方式二：静态方法-->\n<bean id=\"connectionUtils\" class=\"com.lagou.edu.factory.CreateBeanFactory\" factory-method=\"getInstanceStatic\"/>\n<!--方式三：实例化方法-->\n<bean id=\"createBeanFactory\" class=\"com.lagou.edu.factory.CreateBeanFactory\"></bean>\n<bean id=\"connectionUtils\" factory-bean=\"createBeanFactory\" factory-method=\"getInstance\"/>\n```\n#### 3.3 DI依赖注入\n```javascript?linenums\n<property name=\"ConnectionUtils\" ref=\"connectionUtils\"/>\n<property name=\"name\" value=\"zhangsan\"/>\n<property name=\"sex\" value=\"1\"/>\n<property name=\"money\" value=\"100.3\"/>--> \n```\n+  源码：`git clone -b master6 https://gitee.com/idse666666/my_spring.git`\n\n### 4. xml与注解相结合模式\n#### 4.1注意事项\n+ 实际企业开发中，纯xml模式使⽤已经很少了\n+ 引⼊注解功能，不需要引⼊额外的jar\n+ xml+注解结合模式，xml⽂件依然存在，所以，spring IOC容器的启动仍然从加载xml开始\n#### 4.2xml中标签与注解的对应（IoC）\n![enter description here](https://img-1256282866.cos.ap-beijing.myqcloud.com/1627985840559.png)\nDI 依赖注⼊的注解实现⽅式:@Autowired（推荐使⽤）\n![enter description here](https://img-1256282866.cos.ap-beijing.myqcloud.com/1627987084431.png)\n\n+  源码：`git clone -b master7 https://gitee.com/idse666666/my_spring.git`\n\n### 5.全注解形式\n#### 5.1常用注解\n@Configuration 注解，表名当前类是⼀个配置类\n@ComponentScan 注解，替代 context:component-scan\n@PropertySource，引⼊外部属性配置⽂件\n@Import 引⼊其他配置类\n@Value 对变量赋值，可以直接赋值，也可以使⽤ ${} 读取资源配置⽂件中的信息\n@Bean 将⽅法返回对象加⼊ SpringIOC 容器\n#### 5.2 具体迁移所对应形式\n![enter description here](https://img-1256282866.cos.ap-beijing.myqcloud.com/1627988397856.png)\n+  源码：`git clone -b master8 https://gitee.com/idse666666/my_spring.git`\n\n### 6. 延迟加载\n#### 6.1概念\nApplicationContext 容器的默认⾏为是在启动服务器时将所有 singleton bean 提前进⾏实例化。提前\n实例化意味着作为初始化过程的⼀部分，ApplicationContext 实例会创建并配置所有的singleton\nbean。\n#### 6.2使用\n```javascript?linenums\n//xml\n//单个\n<bean id=\"testBean\" calss=\"cn.lagou.LazyBean\" lazy-init=\"true\" />\n//全部\n<beans default-lazy-init=\"true\"></beans>\n```\n#### 6.3 使用场景\n+ 开启延迟加载⼀定程度提⾼容器启动和运转性能\n+ 对于不常使⽤的 Bean 设置延迟加载，这样偶尔使⽤的时候再加载，不必要从⼀开始该 Bean 就占⽤资源\n\n### 7. FactoryBean 和 BeanFactory\n#### 7.1概念\n+ BeanFactory接⼝是容器的顶级接⼝，定义了容器的⼀些基础⾏为，负责⽣产和管理Bean的⼀个⼯⼚，具体使⽤它下⾯的⼦接⼝类型，⽐如ApplicationContext；此处我们重点分析FactoryBean\n+ Spring中Bean有两种，⼀种是普通Bean，⼀种是⼯⼚Bean（FactoryBean），FactoryBean可以⽣成某⼀个类型的Bean实例（返回给我们），也就是说我们可以借助于它⾃定义Bean的创建过程。\n+ Bean创建的三种⽅式中的静态⽅法和实例化⽅法和FactoryBean作⽤类似，FactoryBean使⽤较多，尤其在Spring框架⼀些组件中会使⽤，还有其他框架和Spring框架整合时使⽤\n#### 7.2 使用\n![enter description here](https://img-1256282866.cos.ap-beijing.myqcloud.com/1627993291758.png)\n![enter description here](https://img-1256282866.cos.ap-beijing.myqcloud.com/1627993314180.png)\n\n## 二、 spring AOP应用\n+ AOP的本质：在不改变原有业务逻辑的情况下增强横切逻辑，横切逻辑代码往往是权限校验代码、⽇志代码、事务控制代码、性能监控代码。\n+ ![1](https://img-1256282866.cos.ap-beijing.myqcloud.com/1.png)\n### 1. AOP相关术语\n+ 连接点：⽅法开始时、结束时、正常运⾏完毕时、⽅法异常时等这些特殊的时机点，我们称之为连接 点，项⽬中每个⽅法都有连接点，连接点是⼀种候选点\n+ 切⼊点：指定AOP思想想要影响的具体⽅法是哪些，描述感兴趣的⽅法 Advice增强：\n\t+ 第⼀个层次：指的是横切逻辑\n\t+ 第⼆个层次：⽅位点（在某⼀些连接点上加⼊横切逻辑，那么这些连接点就叫做⽅位点，描述的是具体 的特殊时机）\n+ Aspect切⾯：切⾯概念是对上述概念的⼀个综合 Aspect切⾯= 切⼊点+增强= 切⼊点（锁定⽅法） + ⽅位点（锁定⽅法中的特殊时机）+ 横切逻辑 众多的概念，⽬的就是为了锁定要在哪个地⽅插⼊什么横切逻辑代码\n### 2.Spring中AOP的代理选择\n+ Spring 实现AOP思想使⽤的是动态代理技术\n+ 默认情况下，Spring会根据被代理对象是否实现接⼝来选择使⽤JDK还是CGLIB。当被代理对象没有实现任何接⼝时，Spring会选择CGLIB。当被代理对象实现了接⼝，Spring会选择JDK官⽅的代理技术，不过我们可以通过配置的⽅式，让Spring强制使⽤CGLIB。\n### 3. AOP的xml实现\n```javascript?linenums\n    <!--aop注解模式-->\n    <!--aspect   =    切入点（锁定方法） + 方位点（锁定方法中的特殊时机）+ 横切逻辑-->\n    <aop:config>\n        <!--横切逻辑类名-->\n        <aop:aspect id=\"lagAspect\" ref=\"logUtils\">\n            <!--切入点：切入我们感兴趣的方法，使用aspectj表达式-->\n            <aop:pointcut id=\"pt1\" expression=\"execution(public void com.lagou.edu.service.impl.TransferServiceImpl.transfer(java.lang.String , java.lang.String , int ))\"/>\n\n            <!--aop:before方位点-->\n\t\t\t<!--method具体横切逻辑-->\n            <!--aop:before前置通知/增强-->\n            <!--<aop:before method=\"beforeMethod\" pointcut-ref=\"pt1\"/>-->\n            <!--aop:after，最终通知，无论如何都执行-->\n            <!--aop:after-returnning，正常执行通知-->\n            <!--<aop:after-returning method=\"successMethod\" returning=\"retValue\"/>-->\n            <!--aop:after-throwing，异常通知-->\n            <aop:around method=\"arroundMethod\" pointcut-ref=\"pt1\"/>\n        </aop:aspect>\n    </aop:config>\n```\n![enter description here](https://img-1256282866.cos.ap-beijing.myqcloud.com/1628085817082.png)\n+  源码：`git clone -b master9 https://gitee.com/idse666666/my_spring.git`\n### 4.AOP的xml+anno形式实现\n![enter description here](https://img-1256282866.cos.ap-beijing.myqcloud.com/1628087356985.png)\n+  源码：`git clone -b master10 https://gitee.com/idse666666/my_spring.git`\n### 5. AOP的anno模式实现\n![enter description here](https://img-1256282866.cos.ap-beijing.myqcloud.com/1628125966009.png)\n+  源码：`git clone -b master11 https://gitee.com/idse666666/my_spring.git`\n### 6. 声明式事务的⽀持\n#### 6.1概念\n事务指逻辑上的⼀组操作，组成这组操作的各个单元，要么全部成功，要么全部不成功。从⽽确保了数据的准确与安全。又分为\n+ 编程式事务：在业务代码中添加事务控制代码，这样的事务控制机制就叫做编程式事务\n+ 声明式事务：通过xml或者注解配置的⽅式达到事务控制的⽬的，叫做声明式事务\n#### 6.2事务的四大特性\n+ 原⼦性（Atomicity） 原⼦性是指事务是⼀个不可分割的⼯作单位，事务中的操作要么都发⽣，要么都不发⽣。从操作的⻆度来描述，事务中的各个操作要么都成功要么都失败\n+ ⼀致性（Consistency） 事务必须使数据库从⼀个⼀致性状态变换到另外⼀个⼀致性状态。⼀致性是从数据的⻆度来说的，\n+ 隔离性（Isolation） 事务的隔离性是多个⽤户并发访问数据库时，数据库为每⼀个⽤户开启的事务，每个事务不能被其他事务的操作数据所⼲扰，多个并发事务之间要相互隔离。\n+ 持久性（Durability） 持久性是指⼀个事务⼀旦被提交，它对数据库中数据的改变就是永久性的，接下来即使数据库发⽣故障也不应该对其有任何影响。\n## 三、 事务\n### 1 事务的隔离级别\n 不考虑隔离级别会出现：\n+ 脏读：⼀个线程中的事务读到了另外⼀个线程中未提交的数据。\n+ 不可重复读：⼀个线程中的事务读到了另外⼀个线程中已经提交的update的数据（前后内容不⼀样）\n+ 虚读（幻读）：⼀个线程中的事务读到了另外⼀个线程中已经提交的insert或者delete的数据（前后条数不⼀样）\n四种隔离级别\n+ Serializable（串⾏化）：可避免脏读、不可重复读、虚读情况的发⽣。（串⾏化） \n+ Repeatable read（可重复读）：可避免脏读、不可重复读情况的发⽣。(幻读有可能发⽣) 该机制下会对要update的⾏进⾏加锁\n+ Read committed（读已提交）：可避免脏读情况发⽣。不可重复读和幻读⼀定会发⽣。 \n+ Read uncommitted（读未提交）：最低级别，以上情况均⽆法保证。(读未提交) \n注意：级别依次升⾼，效率依次降低\n### 2.事务的传播性\n+ 事务往往在service层进⾏控制，如果出现service层⽅法A调⽤了另外⼀个service层⽅法B，A和B⽅法本身都已经被添加了事务控制，那么A调⽤B的时候，就需要进⾏事务的⼀些协商，这就叫做事务的传播⾏为。A调⽤B，我们站在B的⻆度来观察来定义事务的传播⾏为\n![enter description here](https://img-1256282866.cos.ap-beijing.myqcloud.com/1628127266368.png)\n\n### 3. spring xml实现事务\n```javascript?linenums\n<!--spring声明式事务配置，声明式事务无非就是配置一个aop，只不过有些标签不一样罢了-->\n<!--横切逻辑-->\n<bean id=\"transactionManager\" class=\"org.springframework.jdbc.datasource.DataSourceTransactionManager\">\n\t<constructor-arg name=\"dataSource\" ref=\"dataSource\"></constructor-arg>\n</bean>\n\n<tx:advice id=\"txAdvice\" transaction-manager=\"transactionManager\">\n\t<!--定制事务细节，传播行为、隔离级别等-->\n\t<tx:attributes>\n\t\t<!--一般性配置-->\n\t\t<tx:method name=\"*\" read-only=\"false\" propagation=\"REQUIRED\" isolation=\"DEFAULT\" timeout=\"-1\"/>\n\t\t<!--针对查询的覆盖性配置-->\n\t\t<tx:method name=\"query*\" read-only=\"true\" propagation=\"SUPPORTS\"/>\n\t</tx:attributes>\n</tx:advice>\n<aop:config>\n\t<!--advice-ref指向增强=横切逻辑+方位&-->\n\t<aop:advisor advice-ref=\"txAdvice\" pointcut=\"execution(* com.lagou.edu.service.impl.TransferServiceImpl.*(..))\"/>\n</aop:config>\n```\n### 4. spring xml+anno实现事务\n```javascript?linenums\n//xml\n<!--声明式事务的注解驱动-->\n<tx:annotation-driven transaction-manager=\"transactionManager\"/>\n//anno\n@Transactional\n```\n### 5. 纯注解\n```javascript?linenums\n@EnableTransactionManagement\n@Transactional\n```\n+  源码：`git clone -b master12 https://gitee.com/idse666666/my_spring.git`\n\n","slug":"BookMark/拉勾笔记/1-2.IoC容器设计实现及Spring源码分析","published":1,"date":"2022-07-25T05:51:38.000Z","updated":"2022-09-05T06:57:55.601Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cl7ptszop0029aba59fp53cs2","content":"<h1><span id=\"阶段一模块二学习笔记-spring高级框架\">阶段一模块二学习笔记-Spring高级框架</span></h1><p>[toc]</p>\n<h2><span id=\"一-自定义iocampaop框架\">一、自定义Ioc&amp;AOP框架</span></h2><h2><span id=\"1-spring概述\">1. spring概述</span></h2><ul>\n<li>Spring 简介：Spring 是分层的 full-stack（全栈） 轻量级开源框架，以 IoC 和 AOP 为内核，提供了展现层 SpringMVC 和业务层事务管理等众多的企业级应⽤技术，还能整合开源世界众多著名的第三⽅框架和类库，已经成为使⽤最多的 Java EE 企业应⽤开源框架。</li>\n<li>Spring 的优势<ul>\n<li>⽅便解耦，简化开发</li>\n<li>AOP编程的⽀持</li>\n<li>声明式事务的⽀持</li>\n<li>⽅便程序的测试</li>\n<li>⽅便集成各种优秀框架</li>\n<li>降低JavaEE API的使⽤难度</li>\n<li>源码是经典的 Java 学习范例</li>\n</ul>\n</li>\n</ul>\n<h2><span id=\"2-核心思想\">2. 核心思想</span></h2><h3><span id=\"21-ioc\">2.1 Ioc</span></h3><ul>\n<li>什么是IOC： IoC Inversion of Control (控制反转&#x2F;反转控制)，注意它是⼀个技术思想，不是⼀个技术实现<br>描述的事情：Java开发领域对象的创建，管理的问题<br>传统开发⽅式：⽐如类A依赖于类B，往往会在类A中new⼀个B的对象<br>IoC思想下开发⽅式：我们不⽤⾃⼰去new对象了，⽽是由IoC容器（Spring框架）去帮助我们实例化对象并且管理它，我们需要使⽤哪个对象，去问IoC容器要即可<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/1627713407734.png\" alt=\"enter description here\"></li>\n<li>IOC的作用<br>IoC解决对象之间的耦合问题<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/1627713793120.png\" alt=\"enter description here\"></li>\n<li>IOC和DI的区别<br>IOC和DI描述的是同一件事情(对象实例化及依赖关系维护这件事情)，只不过角度不同罢了<br>IOC是站在对象的角度：对象实例化及其管理的权利交给了（反转)给了容器<br>DI是站在容器的角度：容器会把对象依赖的其他对象注入(送进去)，比如A对象实例化过程中因为声明了一个B类型的属性，那么就需要容器把B对象注入给A</li>\n</ul>\n<h3><span id=\"22-aop\">2.2 AOP</span></h3><ul>\n<li>先了解OOP<br>OOP三⼤特征：封装、继承和多态<br>oop是⼀种垂直继承体系<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/1627715098188.png\" alt=\"enter description here\"></li>\n<li>OOP问题：<br>  OOP编程思想可以解决⼤多数的代码重复问题，但是有⼀些情况是处理不了的，⽐如下⾯的在顶级⽗类<br>  Animal中的多个⽅法中相同位置出现了重复代码，OOP就解决不了，如图的横切逻辑<br>  <img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/1627715138038.png\" alt=\"enter description here\"><br>  <img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/1627715181331.png\" alt=\"enter description here\"><ul>\n<li>横切代码重复问题</li>\n<li>横切逻辑代码和业务代码混杂在⼀起，代码臃肿，维护不⽅便</li>\n</ul>\n</li>\n</ul>\n<h2><span id=\"3手写ioc和aop\">3.手写IOC和AOP</span></h2><ul>\n<li>提到工厂模式和单例模式</li>\n<li>工厂模式：从自己手动创建对象，到自己只传递想要的参数给工厂，由工厂创建对象。</li>\n<li>单例模式，应用在全局只有一个实例对象时，将自身实例化并赋值给一个属性，加载到此类时直接调用其静态实例。分为懒汉和饿汉式<ul>\n<li>饿汉：<img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/1627722518688.png\" alt=\"enter description here\"></li>\n<li>懒汉：<img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/1627722551848.png\" alt=\"enter description here\"></li>\n</ul>\n</li>\n<li>代理模式：实现对方法的前后增强，相当于委托给代理实现想要的功能，代理可以在实现功能的前后实现自己的需求。<ul>\n<li>jdk动态代理（需要委托对象实现接口）：<img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/1627787295618.png\" alt=\"enter description here\"></li>\n<li>使用：<img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/1627787463646.png\" alt=\"enter description here\"></li>\n</ul>\n</li>\n</ul>\n<h3><span id=\"31银行转账的工厂模式实现\">3.1银行转账的工厂模式实现</span></h3><p>工厂模式生产，在xml中获取实现的全路径进行反射</p>\n<ul>\n<li>工厂：读取解析xml，通过反射技术实例化对象并且存储待用（map集合）；对外提供获取实例对象的接口（根据id获取）<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/1627736383616.png\" alt=\"enter description here\"></li>\n<li>存放需要实例化的对象全路径<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/1627736399409.png\" alt=\"enter description here\"></li>\n<li>使用工厂中的方法并传入相应参数<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/1627736425603.png\" alt=\"enter description here\"></li>\n<li>源码：<code>git clone -b master1 https://gitee.com/idse666666/my_spring.git</code></li>\n<li>存在问题：仍需要从工厂获取bean</li>\n<li>解决：<img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/1627737614000.png\" alt=\"enter description here\"><br> <img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/1627737680109.png\" alt=\"enter description here\"></li>\n<li>源码：<code>git clone -b master2 https://gitee.com/idse666666/my_spring.git</code></li>\n</ul>\n<h3><span id=\"32事务控制\">3.2事务控制</span></h3><ul>\n<li>如图：如果不对service层进行事务控制，将会存在前者转账，后者接收不到的问题。<br> <img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/1627785714172.png\" alt=\"enter description here\"></li>\n<li>而现有的事务控制是对于每一个数据库连接，我们需要将数据库连接存放到线程中，单个线程只有一个数据库连接，也就是单例模式。<br> <img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/1627785664518.png\" alt=\"enter description here\"></li>\n<li>经过以上事务控制的拦截，我们捕获存在异常则回滚事务。保证了数据正确。<br> <img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/1627801093181.png\" alt=\"enter description here\"></li>\n<li>源码：<code>git clone -b master3 https://gitee.com/idse666666/my_spring.git</code></li>\n<li>仍存在问题：我们的每个方法都需要添加开启事务，提交事务，回滚以及try..catch…代码块。应使用代理模式在方法的前后进行增强，将固定的try…catch…代码块提取至jdk动态代理里。<br> <img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/1627801348308.png\" alt=\"enter description here\"><br> <img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/1627801429789.png\" alt=\"enter description here\"><ul>\n<li>源码：<code>git clone -b master4 https://gitee.com/idse666666/my_spring.git</code></li>\n</ul>\n</li>\n</ul>\n<h3><span id=\"33将所有用到的工具类等以bean形式封装到xml中\">3.3将所有用到的工具类等以bean形式封装到xml中。</span></h3><p> <img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/1627806613202.png\" alt=\"enter description here\"></p>\n<ul>\n<li>源码：<code>git clone -b master5 https://gitee.com/idse666666/my_spring.git</code></li>\n</ul>\n<h3><span id=\"34-手写ioc与aop示意图\">3.4 手写IOC与AOP示意图</span></h3><p> <img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/1627806602644.png\" alt=\"enter description here\"></p>\n<h2><span id=\"二-spring-ioc应用\">二、 spring IOC应用</span></h2><p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/1627973066835.png\" alt=\"enter description here\"></p>\n<h3><span id=\"1-beanfactory与applicationcontext区别\">1. BeanFactory与ApplicationContext区别</span></h3><ul>\n<li>BeanFactory是Spring框架中IoC容器的顶层接⼝,它只是⽤来定义⼀些基础功能,定义⼀些基础规范,⽽ApplicationContext是它的⼀个⼦接⼝，所以ApplicationContext是具备BeanFactory提供的全部功能的。我们称BeanFactory为SpringIOC的基础容器，ApplicationContext是容器的⾼级接⼝，比BeanFactory要拥有更多的功能</li>\n</ul>\n<h3><span id=\"2-启动ioc的方式\">2. 启动IOC的方式</span></h3><h4><span id=\"21-java环境下\">2.1 Java环境下</span></h4><ul>\n<li>ClassPathXmlApplicationContext 从类的根路径下加载配置⽂件（推荐使⽤）</li>\n<li>AnnotationConfigApplicationContext 纯注解模式下启动Spring容器</li>\n</ul>\n<h4><span id=\"22-web环境下启动ioc容器\">2.2 Web环境下启动IoC容器</span></h4><ul>\n<li>Web环境下启动IoC容器 <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">&lt;!DOCTYPE web-app PUBLIC<br> &quot;-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN&quot;<br> &quot;http://java.sun.com/dtd/web-app_2_3.dtd&quot; &gt;<br><br>&lt;web-app&gt;<br>  &lt;display-name&gt;Archetype Created Web Application&lt;/display-name&gt;<br>  &lt;!--配置Spring ioc容器的配置文件--&gt;<br>  &lt;context-param&gt;<br>    &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;<br>    &lt;param-value&gt;classpath:applicationContext.xml&lt;/param-value&gt;<br>  &lt;/context-param&gt;<br>  &lt;!--使用监听器启动Spring的IOC容器--&gt;<br>  &lt;listener&gt;<br>    &lt;listener-class&gt;org.springframework.web.context.ContextLoaderListener&lt;/listener-class&gt;<br>  &lt;/listener&gt;<br>&lt;/web-app&gt;<br></code></pre></td></tr></table></figure></li>\n</ul>\n<h3><span id=\"3-使用spring-ioc-xml形式注入bean改造手写的ioc和aop\">3. 使用spring ioc xml形式注入Bean改造手写的ioc和aop</span></h3><h4><span id=\"31-常见的bean标签\">3.1 常见的bean标签：</span></h4><ul>\n<li>id属性： ⽤于给bean提供⼀个唯⼀标识。在⼀个标签内部，标识必须唯⼀。</li>\n<li>class属性：⽤于指定创建Bean对象的全限定类名。</li>\n<li>name属性：⽤于给bean提供⼀个或多个名称。多个名称⽤空格分隔。</li>\n<li>factory-bean属性：⽤于指定创建当前bean对象的⼯⼚bean的唯⼀标识。当指定了此属性之后，class属性失效。</li>\n<li>factory-method属性：⽤于指定创建当前bean对象的⼯⼚⽅法，如配合factory-bean属性使⽤，则class属性失效。如配合class属性使⽤，则⽅法必须是static的。</li>\n<li>scope属性：⽤于指定bean对象的作⽤范围。通常情况下就是singleton。当要⽤到多例模式时，可以配置为prototype。</li>\n<li>init-method属性：⽤于指定bean对象的初始化⽅法，此⽅法会在bean对象装配后调⽤。必须是⼀个⽆参⽅法。</li>\n<li>destory-method属性：⽤于指定bean对象的销毁⽅法，此⽅法会在bean对象销毁前执⾏。它只能为scope是singleton时起作⽤。</li>\n</ul>\n<h4><span id=\"32-实例化bean的几种方式\">3.2 实例化bean的几种方式</span></h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">&lt;!--Spring ioc 实例化Bean的三种方式--&gt;<br>&lt;!--方式一：使用无参构造器（推荐）--&gt;<br>&lt;bean id=&quot;connectionUtils&quot; class=&quot;com.lagou.edu.utils.ConnectionUtils&quot;&gt;&lt;/bean&gt;<br>&lt;!--另外两种方式是为了我们自己new的对象加入到SpringIOC容器管理--&gt;<br>&lt;!--方式二：静态方法--&gt;<br>&lt;bean id=&quot;connectionUtils&quot; class=&quot;com.lagou.edu.factory.CreateBeanFactory&quot; factory-method=&quot;getInstanceStatic&quot;/&gt;<br>&lt;!--方式三：实例化方法--&gt;<br>&lt;bean id=&quot;createBeanFactory&quot; class=&quot;com.lagou.edu.factory.CreateBeanFactory&quot;&gt;&lt;/bean&gt;<br>&lt;bean id=&quot;connectionUtils&quot; factory-bean=&quot;createBeanFactory&quot; factory-method=&quot;getInstance&quot;/&gt;<br></code></pre></td></tr></table></figure>\n<h4><span id=\"33-di依赖注入\">3.3 DI依赖注入</span></h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">&lt;property name=&quot;ConnectionUtils&quot; ref=&quot;connectionUtils&quot;/&gt;<br>&lt;property name=&quot;name&quot; value=&quot;zhangsan&quot;/&gt;<br>&lt;property name=&quot;sex&quot; value=&quot;1&quot;/&gt;<br>&lt;property name=&quot;money&quot; value=&quot;100.3&quot;/&gt;--&gt; <br></code></pre></td></tr></table></figure>\n<ul>\n<li>源码：<code>git clone -b master6 https://gitee.com/idse666666/my_spring.git</code></li>\n</ul>\n<h3><span id=\"4-xml与注解相结合模式\">4. xml与注解相结合模式</span></h3><h4><span id=\"41注意事项\">4.1注意事项</span></h4><ul>\n<li>实际企业开发中，纯xml模式使⽤已经很少了</li>\n<li>引⼊注解功能，不需要引⼊额外的jar</li>\n<li>xml+注解结合模式，xml⽂件依然存在，所以，spring IOC容器的启动仍然从加载xml开始</li>\n</ul>\n<h4><span id=\"42xml中标签与注解的对应ioc\">4.2xml中标签与注解的对应（IoC）</span></h4><p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/1627985840559.png\" alt=\"enter description here\"><br>DI 依赖注⼊的注解实现⽅式:@Autowired（推荐使⽤）<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/1627987084431.png\" alt=\"enter description here\"></p>\n<ul>\n<li>源码：<code>git clone -b master7 https://gitee.com/idse666666/my_spring.git</code></li>\n</ul>\n<h3><span id=\"5全注解形式\">5.全注解形式</span></h3><h4><span id=\"51常用注解\">5.1常用注解</span></h4><p>@Configuration 注解，表名当前类是⼀个配置类<br>@ComponentScan 注解，替代 context:component-scan<br>@PropertySource，引⼊外部属性配置⽂件<br>@Import 引⼊其他配置类<br>@Value 对变量赋值，可以直接赋值，也可以使⽤ ${} 读取资源配置⽂件中的信息<br>@Bean 将⽅法返回对象加⼊ SpringIOC 容器</p>\n<h4><span id=\"52-具体迁移所对应形式\">5.2 具体迁移所对应形式</span></h4><p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/1627988397856.png\" alt=\"enter description here\"></p>\n<ul>\n<li>源码：<code>git clone -b master8 https://gitee.com/idse666666/my_spring.git</code></li>\n</ul>\n<h3><span id=\"6-延迟加载\">6. 延迟加载</span></h3><h4><span id=\"61概念\">6.1概念</span></h4><p>ApplicationContext 容器的默认⾏为是在启动服务器时将所有 singleton bean 提前进⾏实例化。提前<br>实例化意味着作为初始化过程的⼀部分，ApplicationContext 实例会创建并配置所有的singleton<br>bean。</p>\n<h4><span id=\"62使用\">6.2使用</span></h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">//xml<br>//单个<br>&lt;bean id=&quot;testBean&quot; calss=&quot;cn.lagou.LazyBean&quot; lazy-init=&quot;true&quot; /&gt;<br>//全部<br>&lt;beans default-lazy-init=&quot;true&quot;&gt;&lt;/beans&gt;<br></code></pre></td></tr></table></figure>\n<h4><span id=\"63-使用场景\">6.3 使用场景</span></h4><ul>\n<li>开启延迟加载⼀定程度提⾼容器启动和运转性能</li>\n<li>对于不常使⽤的 Bean 设置延迟加载，这样偶尔使⽤的时候再加载，不必要从⼀开始该 Bean 就占⽤资源</li>\n</ul>\n<h3><span id=\"7-factorybean-和-beanfactory\">7. FactoryBean 和 BeanFactory</span></h3><h4><span id=\"71概念\">7.1概念</span></h4><ul>\n<li>BeanFactory接⼝是容器的顶级接⼝，定义了容器的⼀些基础⾏为，负责⽣产和管理Bean的⼀个⼯⼚，具体使⽤它下⾯的⼦接⼝类型，⽐如ApplicationContext；此处我们重点分析FactoryBean</li>\n<li>Spring中Bean有两种，⼀种是普通Bean，⼀种是⼯⼚Bean（FactoryBean），FactoryBean可以⽣成某⼀个类型的Bean实例（返回给我们），也就是说我们可以借助于它⾃定义Bean的创建过程。</li>\n<li>Bean创建的三种⽅式中的静态⽅法和实例化⽅法和FactoryBean作⽤类似，FactoryBean使⽤较多，尤其在Spring框架⼀些组件中会使⽤，还有其他框架和Spring框架整合时使⽤</li>\n</ul>\n<h4><span id=\"72-使用\">7.2 使用</span></h4><p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/1627993291758.png\" alt=\"enter description here\"><br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/1627993314180.png\" alt=\"enter description here\"></p>\n<h2><span id=\"二-spring-aop应用\">二、 spring AOP应用</span></h2><ul>\n<li>AOP的本质：在不改变原有业务逻辑的情况下增强横切逻辑，横切逻辑代码往往是权限校验代码、⽇志代码、事务控制代码、性能监控代码。</li>\n<li><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/1.png\" alt=\"1\"></li>\n</ul>\n<h3><span id=\"1-aop相关术语\">1. AOP相关术语</span></h3><ul>\n<li>连接点：⽅法开始时、结束时、正常运⾏完毕时、⽅法异常时等这些特殊的时机点，我们称之为连接 点，项⽬中每个⽅法都有连接点，连接点是⼀种候选点</li>\n<li>切⼊点：指定AOP思想想要影响的具体⽅法是哪些，描述感兴趣的⽅法 Advice增强：<ul>\n<li>第⼀个层次：指的是横切逻辑</li>\n<li>第⼆个层次：⽅位点（在某⼀些连接点上加⼊横切逻辑，那么这些连接点就叫做⽅位点，描述的是具体 的特殊时机）</li>\n</ul>\n</li>\n<li>Aspect切⾯：切⾯概念是对上述概念的⼀个综合 Aspect切⾯&#x3D; 切⼊点+增强&#x3D; 切⼊点（锁定⽅法） + ⽅位点（锁定⽅法中的特殊时机）+ 横切逻辑 众多的概念，⽬的就是为了锁定要在哪个地⽅插⼊什么横切逻辑代码</li>\n</ul>\n<h3><span id=\"2spring中aop的代理选择\">2.Spring中AOP的代理选择</span></h3><ul>\n<li>Spring 实现AOP思想使⽤的是动态代理技术</li>\n<li>默认情况下，Spring会根据被代理对象是否实现接⼝来选择使⽤JDK还是CGLIB。当被代理对象没有实现任何接⼝时，Spring会选择CGLIB。当被代理对象实现了接⼝，Spring会选择JDK官⽅的代理技术，不过我们可以通过配置的⽅式，让Spring强制使⽤CGLIB。</li>\n</ul>\n<h3><span id=\"3-aop的xml实现\">3. AOP的xml实现</span></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\"> &lt;!--aop注解模式--&gt;<br> &lt;!--aspect   =    切入点（锁定方法） + 方位点（锁定方法中的特殊时机）+ 横切逻辑--&gt;<br> &lt;aop:config&gt;<br>     &lt;!--横切逻辑类名--&gt;<br>     &lt;aop:aspect id=&quot;lagAspect&quot; ref=&quot;logUtils&quot;&gt;<br>         &lt;!--切入点：切入我们感兴趣的方法，使用aspectj表达式--&gt;<br>         &lt;aop:pointcut id=&quot;pt1&quot; expression=&quot;execution(public void com.lagou.edu.service.impl.TransferServiceImpl.transfer(java.lang.String , java.lang.String , int ))&quot;/&gt;<br><br>         &lt;!--aop:before方位点--&gt;<br>&lt;!--method具体横切逻辑--&gt;<br>         &lt;!--aop:before前置通知/增强--&gt;<br>         &lt;!--&lt;aop:before method=&quot;beforeMethod&quot; pointcut-ref=&quot;pt1&quot;/&gt;--&gt;<br>         &lt;!--aop:after，最终通知，无论如何都执行--&gt;<br>         &lt;!--aop:after-returnning，正常执行通知--&gt;<br>         &lt;!--&lt;aop:after-returning method=&quot;successMethod&quot; returning=&quot;retValue&quot;/&gt;--&gt;<br>         &lt;!--aop:after-throwing，异常通知--&gt;<br>         &lt;aop:around method=&quot;arroundMethod&quot; pointcut-ref=&quot;pt1&quot;/&gt;<br>     &lt;/aop:aspect&gt;<br> &lt;/aop:config&gt;<br></code></pre></td></tr></table></figure>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/1628085817082.png\" alt=\"enter description here\"></p>\n<ul>\n<li>源码：<code>git clone -b master9 https://gitee.com/idse666666/my_spring.git</code></li>\n</ul>\n<h3><span id=\"4aop的xmlanno形式实现\">4.AOP的xml+anno形式实现</span></h3><p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/1628087356985.png\" alt=\"enter description here\"></p>\n<ul>\n<li>源码：<code>git clone -b master10 https://gitee.com/idse666666/my_spring.git</code></li>\n</ul>\n<h3><span id=\"5-aop的anno模式实现\">5. AOP的anno模式实现</span></h3><p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/1628125966009.png\" alt=\"enter description here\"></p>\n<ul>\n<li>源码：<code>git clone -b master11 https://gitee.com/idse666666/my_spring.git</code></li>\n</ul>\n<h3><span id=\"6-声明式事务的支持\">6. 声明式事务的⽀持</span></h3><h4><span id=\"61概念\">6.1概念</span></h4><p>事务指逻辑上的⼀组操作，组成这组操作的各个单元，要么全部成功，要么全部不成功。从⽽确保了数据的准确与安全。又分为</p>\n<ul>\n<li>编程式事务：在业务代码中添加事务控制代码，这样的事务控制机制就叫做编程式事务</li>\n<li>声明式事务：通过xml或者注解配置的⽅式达到事务控制的⽬的，叫做声明式事务</li>\n</ul>\n<h4><span id=\"62事务的四大特性\">6.2事务的四大特性</span></h4><ul>\n<li>原⼦性（Atomicity） 原⼦性是指事务是⼀个不可分割的⼯作单位，事务中的操作要么都发⽣，要么都不发⽣。从操作的⻆度来描述，事务中的各个操作要么都成功要么都失败</li>\n<li>⼀致性（Consistency） 事务必须使数据库从⼀个⼀致性状态变换到另外⼀个⼀致性状态。⼀致性是从数据的⻆度来说的，</li>\n<li>隔离性（Isolation） 事务的隔离性是多个⽤户并发访问数据库时，数据库为每⼀个⽤户开启的事务，每个事务不能被其他事务的操作数据所⼲扰，多个并发事务之间要相互隔离。</li>\n<li>持久性（Durability） 持久性是指⼀个事务⼀旦被提交，它对数据库中数据的改变就是永久性的，接下来即使数据库发⽣故障也不应该对其有任何影响。</li>\n</ul>\n<h2><span id=\"三-事务\">三、 事务</span></h2><h3><span id=\"1-事务的隔离级别\">1 事务的隔离级别</span></h3><p> 不考虑隔离级别会出现：</p>\n<ul>\n<li>脏读：⼀个线程中的事务读到了另外⼀个线程中未提交的数据。</li>\n<li>不可重复读：⼀个线程中的事务读到了另外⼀个线程中已经提交的update的数据（前后内容不⼀样）</li>\n<li>虚读（幻读）：⼀个线程中的事务读到了另外⼀个线程中已经提交的insert或者delete的数据（前后条数不⼀样）<br>四种隔离级别</li>\n<li>Serializable（串⾏化）：可避免脏读、不可重复读、虚读情况的发⽣。（串⾏化） </li>\n<li>Repeatable read（可重复读）：可避免脏读、不可重复读情况的发⽣。(幻读有可能发⽣) 该机制下会对要update的⾏进⾏加锁</li>\n<li>Read committed（读已提交）：可避免脏读情况发⽣。不可重复读和幻读⼀定会发⽣。 </li>\n<li>Read uncommitted（读未提交）：最低级别，以上情况均⽆法保证。(读未提交)<br>注意：级别依次升⾼，效率依次降低</li>\n</ul>\n<h3><span id=\"2事务的传播性\">2.事务的传播性</span></h3><ul>\n<li>事务往往在service层进⾏控制，如果出现service层⽅法A调⽤了另外⼀个service层⽅法B，A和B⽅法本身都已经被添加了事务控制，那么A调⽤B的时候，就需要进⾏事务的⼀些协商，这就叫做事务的传播⾏为。A调⽤B，我们站在B的⻆度来观察来定义事务的传播⾏为<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/1628127266368.png\" alt=\"enter description here\"></li>\n</ul>\n<h3><span id=\"3-spring-xml实现事务\">3. spring xml实现事务</span></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">&lt;!--spring声明式事务配置，声明式事务无非就是配置一个aop，只不过有些标签不一样罢了--&gt;<br>&lt;!--横切逻辑--&gt;<br>&lt;bean id=&quot;transactionManager&quot; class=&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;&gt;<br>\t&lt;constructor-arg name=&quot;dataSource&quot; ref=&quot;dataSource&quot;&gt;&lt;/constructor-arg&gt;<br>&lt;/bean&gt;<br><br>&lt;tx:advice id=&quot;txAdvice&quot; transaction-manager=&quot;transactionManager&quot;&gt;<br>\t&lt;!--定制事务细节，传播行为、隔离级别等--&gt;<br>\t&lt;tx:attributes&gt;<br>\t\t&lt;!--一般性配置--&gt;<br>\t\t&lt;tx:method name=&quot;*&quot; read-only=&quot;false&quot; propagation=&quot;REQUIRED&quot; isolation=&quot;DEFAULT&quot; timeout=&quot;-1&quot;/&gt;<br>\t\t&lt;!--针对查询的覆盖性配置--&gt;<br>\t\t&lt;tx:method name=&quot;query*&quot; read-only=&quot;true&quot; propagation=&quot;SUPPORTS&quot;/&gt;<br>\t&lt;/tx:attributes&gt;<br>&lt;/tx:advice&gt;<br>&lt;aop:config&gt;<br>\t&lt;!--advice-ref指向增强=横切逻辑+方位&amp;--&gt;<br>\t&lt;aop:advisor advice-ref=&quot;txAdvice&quot; pointcut=&quot;execution(* com.lagou.edu.service.impl.TransferServiceImpl.*(..))&quot;/&gt;<br>&lt;/aop:config&gt;<br></code></pre></td></tr></table></figure>\n<h3><span id=\"4-spring-xmlanno实现事务\">4. spring xml+anno实现事务</span></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">//xml<br>&lt;!--声明式事务的注解驱动--&gt;<br>&lt;tx:annotation-driven transaction-manager=&quot;transactionManager&quot;/&gt;<br>//anno<br>@Transactional<br></code></pre></td></tr></table></figure>\n<h3><span id=\"5-纯注解\">5. 纯注解</span></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">@EnableTransactionManagement<br>@Transactional<br></code></pre></td></tr></table></figure>\n<ul>\n<li>源码：<code>git clone -b master12 https://gitee.com/idse666666/my_spring.git</code></li>\n</ul>\n","site":{"data":{}},"wordcount":9475,"excerpt":"","more":"<h1 id=\"阶段一模块二学习笔记-Spring高级框架\"><a href=\"#阶段一模块二学习笔记-Spring高级框架\" class=\"headerlink\" title=\"阶段一模块二学习笔记-Spring高级框架\"></a>阶段一模块二学习笔记-Spring高级框架</h1><p>[toc]</p>\n<h2 id=\"一、自定义Ioc-amp-AOP框架\"><a href=\"#一、自定义Ioc-amp-AOP框架\" class=\"headerlink\" title=\"一、自定义Ioc&amp;AOP框架\"></a>一、自定义Ioc&amp;AOP框架</h2><h2 id=\"1-spring概述\"><a href=\"#1-spring概述\" class=\"headerlink\" title=\"1. spring概述\"></a>1. spring概述</h2><ul>\n<li>Spring 简介：Spring 是分层的 full-stack（全栈） 轻量级开源框架，以 IoC 和 AOP 为内核，提供了展现层 SpringMVC 和业务层事务管理等众多的企业级应⽤技术，还能整合开源世界众多著名的第三⽅框架和类库，已经成为使⽤最多的 Java EE 企业应⽤开源框架。</li>\n<li>Spring 的优势<ul>\n<li>⽅便解耦，简化开发</li>\n<li>AOP编程的⽀持</li>\n<li>声明式事务的⽀持</li>\n<li>⽅便程序的测试</li>\n<li>⽅便集成各种优秀框架</li>\n<li>降低JavaEE API的使⽤难度</li>\n<li>源码是经典的 Java 学习范例</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"2-核心思想\"><a href=\"#2-核心思想\" class=\"headerlink\" title=\"2. 核心思想\"></a>2. 核心思想</h2><h3 id=\"2-1-Ioc\"><a href=\"#2-1-Ioc\" class=\"headerlink\" title=\"2.1 Ioc\"></a>2.1 Ioc</h3><ul>\n<li>什么是IOC： IoC Inversion of Control (控制反转&#x2F;反转控制)，注意它是⼀个技术思想，不是⼀个技术实现<br>描述的事情：Java开发领域对象的创建，管理的问题<br>传统开发⽅式：⽐如类A依赖于类B，往往会在类A中new⼀个B的对象<br>IoC思想下开发⽅式：我们不⽤⾃⼰去new对象了，⽽是由IoC容器（Spring框架）去帮助我们实例化对象并且管理它，我们需要使⽤哪个对象，去问IoC容器要即可<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/1627713407734.png\" alt=\"enter description here\"></li>\n<li>IOC的作用<br>IoC解决对象之间的耦合问题<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/1627713793120.png\" alt=\"enter description here\"></li>\n<li>IOC和DI的区别<br>IOC和DI描述的是同一件事情(对象实例化及依赖关系维护这件事情)，只不过角度不同罢了<br>IOC是站在对象的角度：对象实例化及其管理的权利交给了（反转)给了容器<br>DI是站在容器的角度：容器会把对象依赖的其他对象注入(送进去)，比如A对象实例化过程中因为声明了一个B类型的属性，那么就需要容器把B对象注入给A</li>\n</ul>\n<h3 id=\"2-2-AOP\"><a href=\"#2-2-AOP\" class=\"headerlink\" title=\"2.2 AOP\"></a>2.2 AOP</h3><ul>\n<li>先了解OOP<br>OOP三⼤特征：封装、继承和多态<br>oop是⼀种垂直继承体系<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/1627715098188.png\" alt=\"enter description here\"></li>\n<li>OOP问题：<br>  OOP编程思想可以解决⼤多数的代码重复问题，但是有⼀些情况是处理不了的，⽐如下⾯的在顶级⽗类<br>  Animal中的多个⽅法中相同位置出现了重复代码，OOP就解决不了，如图的横切逻辑<br>  <img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/1627715138038.png\" alt=\"enter description here\"><br>  <img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/1627715181331.png\" alt=\"enter description here\"><ul>\n<li>横切代码重复问题</li>\n<li>横切逻辑代码和业务代码混杂在⼀起，代码臃肿，维护不⽅便</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"3-手写IOC和AOP\"><a href=\"#3-手写IOC和AOP\" class=\"headerlink\" title=\"3.手写IOC和AOP\"></a>3.手写IOC和AOP</h2><ul>\n<li>提到工厂模式和单例模式</li>\n<li>工厂模式：从自己手动创建对象，到自己只传递想要的参数给工厂，由工厂创建对象。</li>\n<li>单例模式，应用在全局只有一个实例对象时，将自身实例化并赋值给一个属性，加载到此类时直接调用其静态实例。分为懒汉和饿汉式<ul>\n<li>饿汉：<img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/1627722518688.png\" alt=\"enter description here\"></li>\n<li>懒汉：<img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/1627722551848.png\" alt=\"enter description here\"></li>\n</ul>\n</li>\n<li>代理模式：实现对方法的前后增强，相当于委托给代理实现想要的功能，代理可以在实现功能的前后实现自己的需求。<ul>\n<li>jdk动态代理（需要委托对象实现接口）：<img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/1627787295618.png\" alt=\"enter description here\"></li>\n<li>使用：<img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/1627787463646.png\" alt=\"enter description here\"></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"3-1银行转账的工厂模式实现\"><a href=\"#3-1银行转账的工厂模式实现\" class=\"headerlink\" title=\"3.1银行转账的工厂模式实现\"></a>3.1银行转账的工厂模式实现</h3><p>工厂模式生产，在xml中获取实现的全路径进行反射</p>\n<ul>\n<li>工厂：读取解析xml，通过反射技术实例化对象并且存储待用（map集合）；对外提供获取实例对象的接口（根据id获取）<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/1627736383616.png\" alt=\"enter description here\"></li>\n<li>存放需要实例化的对象全路径<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/1627736399409.png\" alt=\"enter description here\"></li>\n<li>使用工厂中的方法并传入相应参数<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/1627736425603.png\" alt=\"enter description here\"></li>\n<li>源码：<code>git clone -b master1 https://gitee.com/idse666666/my_spring.git</code></li>\n<li>存在问题：仍需要从工厂获取bean</li>\n<li>解决：<img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/1627737614000.png\" alt=\"enter description here\"><br> <img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/1627737680109.png\" alt=\"enter description here\"></li>\n<li>源码：<code>git clone -b master2 https://gitee.com/idse666666/my_spring.git</code></li>\n</ul>\n<h3 id=\"3-2事务控制\"><a href=\"#3-2事务控制\" class=\"headerlink\" title=\"3.2事务控制\"></a>3.2事务控制</h3><ul>\n<li>如图：如果不对service层进行事务控制，将会存在前者转账，后者接收不到的问题。<br> <img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/1627785714172.png\" alt=\"enter description here\"></li>\n<li>而现有的事务控制是对于每一个数据库连接，我们需要将数据库连接存放到线程中，单个线程只有一个数据库连接，也就是单例模式。<br> <img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/1627785664518.png\" alt=\"enter description here\"></li>\n<li>经过以上事务控制的拦截，我们捕获存在异常则回滚事务。保证了数据正确。<br> <img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/1627801093181.png\" alt=\"enter description here\"></li>\n<li>源码：<code>git clone -b master3 https://gitee.com/idse666666/my_spring.git</code></li>\n<li>仍存在问题：我们的每个方法都需要添加开启事务，提交事务，回滚以及try..catch…代码块。应使用代理模式在方法的前后进行增强，将固定的try…catch…代码块提取至jdk动态代理里。<br> <img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/1627801348308.png\" alt=\"enter description here\"><br> <img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/1627801429789.png\" alt=\"enter description here\"><ul>\n<li>源码：<code>git clone -b master4 https://gitee.com/idse666666/my_spring.git</code></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"3-3将所有用到的工具类等以bean形式封装到xml中。\"><a href=\"#3-3将所有用到的工具类等以bean形式封装到xml中。\" class=\"headerlink\" title=\"3.3将所有用到的工具类等以bean形式封装到xml中。\"></a>3.3将所有用到的工具类等以bean形式封装到xml中。</h3><p> <img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/1627806613202.png\" alt=\"enter description here\"></p>\n<ul>\n<li>源码：<code>git clone -b master5 https://gitee.com/idse666666/my_spring.git</code></li>\n</ul>\n<h3 id=\"3-4-手写IOC与AOP示意图\"><a href=\"#3-4-手写IOC与AOP示意图\" class=\"headerlink\" title=\"3.4 手写IOC与AOP示意图\"></a>3.4 手写IOC与AOP示意图</h3><p> <img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/1627806602644.png\" alt=\"enter description here\"></p>\n<h2 id=\"二、-spring-IOC应用\"><a href=\"#二、-spring-IOC应用\" class=\"headerlink\" title=\"二、 spring IOC应用\"></a>二、 spring IOC应用</h2><p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/1627973066835.png\" alt=\"enter description here\"></p>\n<h3 id=\"1-BeanFactory与ApplicationContext区别\"><a href=\"#1-BeanFactory与ApplicationContext区别\" class=\"headerlink\" title=\"1. BeanFactory与ApplicationContext区别\"></a>1. BeanFactory与ApplicationContext区别</h3><ul>\n<li>BeanFactory是Spring框架中IoC容器的顶层接⼝,它只是⽤来定义⼀些基础功能,定义⼀些基础规范,⽽ApplicationContext是它的⼀个⼦接⼝，所以ApplicationContext是具备BeanFactory提供的全部功能的。我们称BeanFactory为SpringIOC的基础容器，ApplicationContext是容器的⾼级接⼝，比BeanFactory要拥有更多的功能</li>\n</ul>\n<h3 id=\"2-启动IOC的方式\"><a href=\"#2-启动IOC的方式\" class=\"headerlink\" title=\"2. 启动IOC的方式\"></a>2. 启动IOC的方式</h3><h4 id=\"2-1-Java环境下\"><a href=\"#2-1-Java环境下\" class=\"headerlink\" title=\"2.1 Java环境下\"></a>2.1 Java环境下</h4><ul>\n<li>ClassPathXmlApplicationContext 从类的根路径下加载配置⽂件（推荐使⽤）</li>\n<li>AnnotationConfigApplicationContext 纯注解模式下启动Spring容器</li>\n</ul>\n<h4 id=\"2-2-Web环境下启动IoC容器\"><a href=\"#2-2-Web环境下启动IoC容器\" class=\"headerlink\" title=\"2.2 Web环境下启动IoC容器\"></a>2.2 Web环境下启动IoC容器</h4><ul>\n<li>Web环境下启动IoC容器 <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">&lt;!DOCTYPE web-app PUBLIC<br> &quot;-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN&quot;<br> &quot;http://java.sun.com/dtd/web-app_2_3.dtd&quot; &gt;<br><br>&lt;web-app&gt;<br>  &lt;display-name&gt;Archetype Created Web Application&lt;/display-name&gt;<br>  &lt;!--配置Spring ioc容器的配置文件--&gt;<br>  &lt;context-param&gt;<br>    &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;<br>    &lt;param-value&gt;classpath:applicationContext.xml&lt;/param-value&gt;<br>  &lt;/context-param&gt;<br>  &lt;!--使用监听器启动Spring的IOC容器--&gt;<br>  &lt;listener&gt;<br>    &lt;listener-class&gt;org.springframework.web.context.ContextLoaderListener&lt;/listener-class&gt;<br>  &lt;/listener&gt;<br>&lt;/web-app&gt;<br></code></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"3-使用spring-ioc-xml形式注入Bean改造手写的ioc和aop\"><a href=\"#3-使用spring-ioc-xml形式注入Bean改造手写的ioc和aop\" class=\"headerlink\" title=\"3. 使用spring ioc xml形式注入Bean改造手写的ioc和aop\"></a>3. 使用spring ioc xml形式注入Bean改造手写的ioc和aop</h3><h4 id=\"3-1-常见的bean标签：\"><a href=\"#3-1-常见的bean标签：\" class=\"headerlink\" title=\"3.1 常见的bean标签：\"></a>3.1 常见的bean标签：</h4><ul>\n<li>id属性： ⽤于给bean提供⼀个唯⼀标识。在⼀个标签内部，标识必须唯⼀。</li>\n<li>class属性：⽤于指定创建Bean对象的全限定类名。</li>\n<li>name属性：⽤于给bean提供⼀个或多个名称。多个名称⽤空格分隔。</li>\n<li>factory-bean属性：⽤于指定创建当前bean对象的⼯⼚bean的唯⼀标识。当指定了此属性之后，class属性失效。</li>\n<li>factory-method属性：⽤于指定创建当前bean对象的⼯⼚⽅法，如配合factory-bean属性使⽤，则class属性失效。如配合class属性使⽤，则⽅法必须是static的。</li>\n<li>scope属性：⽤于指定bean对象的作⽤范围。通常情况下就是singleton。当要⽤到多例模式时，可以配置为prototype。</li>\n<li>init-method属性：⽤于指定bean对象的初始化⽅法，此⽅法会在bean对象装配后调⽤。必须是⼀个⽆参⽅法。</li>\n<li>destory-method属性：⽤于指定bean对象的销毁⽅法，此⽅法会在bean对象销毁前执⾏。它只能为scope是singleton时起作⽤。</li>\n</ul>\n<h4 id=\"3-2-实例化bean的几种方式\"><a href=\"#3-2-实例化bean的几种方式\" class=\"headerlink\" title=\"3.2 实例化bean的几种方式\"></a>3.2 实例化bean的几种方式</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">&lt;!--Spring ioc 实例化Bean的三种方式--&gt;<br>&lt;!--方式一：使用无参构造器（推荐）--&gt;<br>&lt;bean id=&quot;connectionUtils&quot; class=&quot;com.lagou.edu.utils.ConnectionUtils&quot;&gt;&lt;/bean&gt;<br>&lt;!--另外两种方式是为了我们自己new的对象加入到SpringIOC容器管理--&gt;<br>&lt;!--方式二：静态方法--&gt;<br>&lt;bean id=&quot;connectionUtils&quot; class=&quot;com.lagou.edu.factory.CreateBeanFactory&quot; factory-method=&quot;getInstanceStatic&quot;/&gt;<br>&lt;!--方式三：实例化方法--&gt;<br>&lt;bean id=&quot;createBeanFactory&quot; class=&quot;com.lagou.edu.factory.CreateBeanFactory&quot;&gt;&lt;/bean&gt;<br>&lt;bean id=&quot;connectionUtils&quot; factory-bean=&quot;createBeanFactory&quot; factory-method=&quot;getInstance&quot;/&gt;<br></code></pre></td></tr></table></figure>\n<h4 id=\"3-3-DI依赖注入\"><a href=\"#3-3-DI依赖注入\" class=\"headerlink\" title=\"3.3 DI依赖注入\"></a>3.3 DI依赖注入</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">&lt;property name=&quot;ConnectionUtils&quot; ref=&quot;connectionUtils&quot;/&gt;<br>&lt;property name=&quot;name&quot; value=&quot;zhangsan&quot;/&gt;<br>&lt;property name=&quot;sex&quot; value=&quot;1&quot;/&gt;<br>&lt;property name=&quot;money&quot; value=&quot;100.3&quot;/&gt;--&gt; <br></code></pre></td></tr></table></figure>\n<ul>\n<li>源码：<code>git clone -b master6 https://gitee.com/idse666666/my_spring.git</code></li>\n</ul>\n<h3 id=\"4-xml与注解相结合模式\"><a href=\"#4-xml与注解相结合模式\" class=\"headerlink\" title=\"4. xml与注解相结合模式\"></a>4. xml与注解相结合模式</h3><h4 id=\"4-1注意事项\"><a href=\"#4-1注意事项\" class=\"headerlink\" title=\"4.1注意事项\"></a>4.1注意事项</h4><ul>\n<li>实际企业开发中，纯xml模式使⽤已经很少了</li>\n<li>引⼊注解功能，不需要引⼊额外的jar</li>\n<li>xml+注解结合模式，xml⽂件依然存在，所以，spring IOC容器的启动仍然从加载xml开始</li>\n</ul>\n<h4 id=\"4-2xml中标签与注解的对应（IoC）\"><a href=\"#4-2xml中标签与注解的对应（IoC）\" class=\"headerlink\" title=\"4.2xml中标签与注解的对应（IoC）\"></a>4.2xml中标签与注解的对应（IoC）</h4><p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/1627985840559.png\" alt=\"enter description here\"><br>DI 依赖注⼊的注解实现⽅式:@Autowired（推荐使⽤）<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/1627987084431.png\" alt=\"enter description here\"></p>\n<ul>\n<li>源码：<code>git clone -b master7 https://gitee.com/idse666666/my_spring.git</code></li>\n</ul>\n<h3 id=\"5-全注解形式\"><a href=\"#5-全注解形式\" class=\"headerlink\" title=\"5.全注解形式\"></a>5.全注解形式</h3><h4 id=\"5-1常用注解\"><a href=\"#5-1常用注解\" class=\"headerlink\" title=\"5.1常用注解\"></a>5.1常用注解</h4><p>@Configuration 注解，表名当前类是⼀个配置类<br>@ComponentScan 注解，替代 context:component-scan<br>@PropertySource，引⼊外部属性配置⽂件<br>@Import 引⼊其他配置类<br>@Value 对变量赋值，可以直接赋值，也可以使⽤ ${} 读取资源配置⽂件中的信息<br>@Bean 将⽅法返回对象加⼊ SpringIOC 容器</p>\n<h4 id=\"5-2-具体迁移所对应形式\"><a href=\"#5-2-具体迁移所对应形式\" class=\"headerlink\" title=\"5.2 具体迁移所对应形式\"></a>5.2 具体迁移所对应形式</h4><p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/1627988397856.png\" alt=\"enter description here\"></p>\n<ul>\n<li>源码：<code>git clone -b master8 https://gitee.com/idse666666/my_spring.git</code></li>\n</ul>\n<h3 id=\"6-延迟加载\"><a href=\"#6-延迟加载\" class=\"headerlink\" title=\"6. 延迟加载\"></a>6. 延迟加载</h3><h4 id=\"6-1概念\"><a href=\"#6-1概念\" class=\"headerlink\" title=\"6.1概念\"></a>6.1概念</h4><p>ApplicationContext 容器的默认⾏为是在启动服务器时将所有 singleton bean 提前进⾏实例化。提前<br>实例化意味着作为初始化过程的⼀部分，ApplicationContext 实例会创建并配置所有的singleton<br>bean。</p>\n<h4 id=\"6-2使用\"><a href=\"#6-2使用\" class=\"headerlink\" title=\"6.2使用\"></a>6.2使用</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">//xml<br>//单个<br>&lt;bean id=&quot;testBean&quot; calss=&quot;cn.lagou.LazyBean&quot; lazy-init=&quot;true&quot; /&gt;<br>//全部<br>&lt;beans default-lazy-init=&quot;true&quot;&gt;&lt;/beans&gt;<br></code></pre></td></tr></table></figure>\n<h4 id=\"6-3-使用场景\"><a href=\"#6-3-使用场景\" class=\"headerlink\" title=\"6.3 使用场景\"></a>6.3 使用场景</h4><ul>\n<li>开启延迟加载⼀定程度提⾼容器启动和运转性能</li>\n<li>对于不常使⽤的 Bean 设置延迟加载，这样偶尔使⽤的时候再加载，不必要从⼀开始该 Bean 就占⽤资源</li>\n</ul>\n<h3 id=\"7-FactoryBean-和-BeanFactory\"><a href=\"#7-FactoryBean-和-BeanFactory\" class=\"headerlink\" title=\"7. FactoryBean 和 BeanFactory\"></a>7. FactoryBean 和 BeanFactory</h3><h4 id=\"7-1概念\"><a href=\"#7-1概念\" class=\"headerlink\" title=\"7.1概念\"></a>7.1概念</h4><ul>\n<li>BeanFactory接⼝是容器的顶级接⼝，定义了容器的⼀些基础⾏为，负责⽣产和管理Bean的⼀个⼯⼚，具体使⽤它下⾯的⼦接⼝类型，⽐如ApplicationContext；此处我们重点分析FactoryBean</li>\n<li>Spring中Bean有两种，⼀种是普通Bean，⼀种是⼯⼚Bean（FactoryBean），FactoryBean可以⽣成某⼀个类型的Bean实例（返回给我们），也就是说我们可以借助于它⾃定义Bean的创建过程。</li>\n<li>Bean创建的三种⽅式中的静态⽅法和实例化⽅法和FactoryBean作⽤类似，FactoryBean使⽤较多，尤其在Spring框架⼀些组件中会使⽤，还有其他框架和Spring框架整合时使⽤</li>\n</ul>\n<h4 id=\"7-2-使用\"><a href=\"#7-2-使用\" class=\"headerlink\" title=\"7.2 使用\"></a>7.2 使用</h4><p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/1627993291758.png\" alt=\"enter description here\"><br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/1627993314180.png\" alt=\"enter description here\"></p>\n<h2 id=\"二、-spring-AOP应用\"><a href=\"#二、-spring-AOP应用\" class=\"headerlink\" title=\"二、 spring AOP应用\"></a>二、 spring AOP应用</h2><ul>\n<li>AOP的本质：在不改变原有业务逻辑的情况下增强横切逻辑，横切逻辑代码往往是权限校验代码、⽇志代码、事务控制代码、性能监控代码。</li>\n<li><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/1.png\" alt=\"1\"></li>\n</ul>\n<h3 id=\"1-AOP相关术语\"><a href=\"#1-AOP相关术语\" class=\"headerlink\" title=\"1. AOP相关术语\"></a>1. AOP相关术语</h3><ul>\n<li>连接点：⽅法开始时、结束时、正常运⾏完毕时、⽅法异常时等这些特殊的时机点，我们称之为连接 点，项⽬中每个⽅法都有连接点，连接点是⼀种候选点</li>\n<li>切⼊点：指定AOP思想想要影响的具体⽅法是哪些，描述感兴趣的⽅法 Advice增强：<ul>\n<li>第⼀个层次：指的是横切逻辑</li>\n<li>第⼆个层次：⽅位点（在某⼀些连接点上加⼊横切逻辑，那么这些连接点就叫做⽅位点，描述的是具体 的特殊时机）</li>\n</ul>\n</li>\n<li>Aspect切⾯：切⾯概念是对上述概念的⼀个综合 Aspect切⾯&#x3D; 切⼊点+增强&#x3D; 切⼊点（锁定⽅法） + ⽅位点（锁定⽅法中的特殊时机）+ 横切逻辑 众多的概念，⽬的就是为了锁定要在哪个地⽅插⼊什么横切逻辑代码</li>\n</ul>\n<h3 id=\"2-Spring中AOP的代理选择\"><a href=\"#2-Spring中AOP的代理选择\" class=\"headerlink\" title=\"2.Spring中AOP的代理选择\"></a>2.Spring中AOP的代理选择</h3><ul>\n<li>Spring 实现AOP思想使⽤的是动态代理技术</li>\n<li>默认情况下，Spring会根据被代理对象是否实现接⼝来选择使⽤JDK还是CGLIB。当被代理对象没有实现任何接⼝时，Spring会选择CGLIB。当被代理对象实现了接⼝，Spring会选择JDK官⽅的代理技术，不过我们可以通过配置的⽅式，让Spring强制使⽤CGLIB。</li>\n</ul>\n<h3 id=\"3-AOP的xml实现\"><a href=\"#3-AOP的xml实现\" class=\"headerlink\" title=\"3. AOP的xml实现\"></a>3. AOP的xml实现</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\"> &lt;!--aop注解模式--&gt;<br> &lt;!--aspect   =    切入点（锁定方法） + 方位点（锁定方法中的特殊时机）+ 横切逻辑--&gt;<br> &lt;aop:config&gt;<br>     &lt;!--横切逻辑类名--&gt;<br>     &lt;aop:aspect id=&quot;lagAspect&quot; ref=&quot;logUtils&quot;&gt;<br>         &lt;!--切入点：切入我们感兴趣的方法，使用aspectj表达式--&gt;<br>         &lt;aop:pointcut id=&quot;pt1&quot; expression=&quot;execution(public void com.lagou.edu.service.impl.TransferServiceImpl.transfer(java.lang.String , java.lang.String , int ))&quot;/&gt;<br><br>         &lt;!--aop:before方位点--&gt;<br>&lt;!--method具体横切逻辑--&gt;<br>         &lt;!--aop:before前置通知/增强--&gt;<br>         &lt;!--&lt;aop:before method=&quot;beforeMethod&quot; pointcut-ref=&quot;pt1&quot;/&gt;--&gt;<br>         &lt;!--aop:after，最终通知，无论如何都执行--&gt;<br>         &lt;!--aop:after-returnning，正常执行通知--&gt;<br>         &lt;!--&lt;aop:after-returning method=&quot;successMethod&quot; returning=&quot;retValue&quot;/&gt;--&gt;<br>         &lt;!--aop:after-throwing，异常通知--&gt;<br>         &lt;aop:around method=&quot;arroundMethod&quot; pointcut-ref=&quot;pt1&quot;/&gt;<br>     &lt;/aop:aspect&gt;<br> &lt;/aop:config&gt;<br></code></pre></td></tr></table></figure>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/1628085817082.png\" alt=\"enter description here\"></p>\n<ul>\n<li>源码：<code>git clone -b master9 https://gitee.com/idse666666/my_spring.git</code></li>\n</ul>\n<h3 id=\"4-AOP的xml-anno形式实现\"><a href=\"#4-AOP的xml-anno形式实现\" class=\"headerlink\" title=\"4.AOP的xml+anno形式实现\"></a>4.AOP的xml+anno形式实现</h3><p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/1628087356985.png\" alt=\"enter description here\"></p>\n<ul>\n<li>源码：<code>git clone -b master10 https://gitee.com/idse666666/my_spring.git</code></li>\n</ul>\n<h3 id=\"5-AOP的anno模式实现\"><a href=\"#5-AOP的anno模式实现\" class=\"headerlink\" title=\"5. AOP的anno模式实现\"></a>5. AOP的anno模式实现</h3><p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/1628125966009.png\" alt=\"enter description here\"></p>\n<ul>\n<li>源码：<code>git clone -b master11 https://gitee.com/idse666666/my_spring.git</code></li>\n</ul>\n<h3 id=\"6-声明式事务的⽀持\"><a href=\"#6-声明式事务的⽀持\" class=\"headerlink\" title=\"6. 声明式事务的⽀持\"></a>6. 声明式事务的⽀持</h3><h4 id=\"6-1概念-1\"><a href=\"#6-1概念-1\" class=\"headerlink\" title=\"6.1概念\"></a>6.1概念</h4><p>事务指逻辑上的⼀组操作，组成这组操作的各个单元，要么全部成功，要么全部不成功。从⽽确保了数据的准确与安全。又分为</p>\n<ul>\n<li>编程式事务：在业务代码中添加事务控制代码，这样的事务控制机制就叫做编程式事务</li>\n<li>声明式事务：通过xml或者注解配置的⽅式达到事务控制的⽬的，叫做声明式事务</li>\n</ul>\n<h4 id=\"6-2事务的四大特性\"><a href=\"#6-2事务的四大特性\" class=\"headerlink\" title=\"6.2事务的四大特性\"></a>6.2事务的四大特性</h4><ul>\n<li>原⼦性（Atomicity） 原⼦性是指事务是⼀个不可分割的⼯作单位，事务中的操作要么都发⽣，要么都不发⽣。从操作的⻆度来描述，事务中的各个操作要么都成功要么都失败</li>\n<li>⼀致性（Consistency） 事务必须使数据库从⼀个⼀致性状态变换到另外⼀个⼀致性状态。⼀致性是从数据的⻆度来说的，</li>\n<li>隔离性（Isolation） 事务的隔离性是多个⽤户并发访问数据库时，数据库为每⼀个⽤户开启的事务，每个事务不能被其他事务的操作数据所⼲扰，多个并发事务之间要相互隔离。</li>\n<li>持久性（Durability） 持久性是指⼀个事务⼀旦被提交，它对数据库中数据的改变就是永久性的，接下来即使数据库发⽣故障也不应该对其有任何影响。</li>\n</ul>\n<h2 id=\"三、-事务\"><a href=\"#三、-事务\" class=\"headerlink\" title=\"三、 事务\"></a>三、 事务</h2><h3 id=\"1-事务的隔离级别\"><a href=\"#1-事务的隔离级别\" class=\"headerlink\" title=\"1 事务的隔离级别\"></a>1 事务的隔离级别</h3><p> 不考虑隔离级别会出现：</p>\n<ul>\n<li>脏读：⼀个线程中的事务读到了另外⼀个线程中未提交的数据。</li>\n<li>不可重复读：⼀个线程中的事务读到了另外⼀个线程中已经提交的update的数据（前后内容不⼀样）</li>\n<li>虚读（幻读）：⼀个线程中的事务读到了另外⼀个线程中已经提交的insert或者delete的数据（前后条数不⼀样）<br>四种隔离级别</li>\n<li>Serializable（串⾏化）：可避免脏读、不可重复读、虚读情况的发⽣。（串⾏化） </li>\n<li>Repeatable read（可重复读）：可避免脏读、不可重复读情况的发⽣。(幻读有可能发⽣) 该机制下会对要update的⾏进⾏加锁</li>\n<li>Read committed（读已提交）：可避免脏读情况发⽣。不可重复读和幻读⼀定会发⽣。 </li>\n<li>Read uncommitted（读未提交）：最低级别，以上情况均⽆法保证。(读未提交)<br>注意：级别依次升⾼，效率依次降低</li>\n</ul>\n<h3 id=\"2-事务的传播性\"><a href=\"#2-事务的传播性\" class=\"headerlink\" title=\"2.事务的传播性\"></a>2.事务的传播性</h3><ul>\n<li>事务往往在service层进⾏控制，如果出现service层⽅法A调⽤了另外⼀个service层⽅法B，A和B⽅法本身都已经被添加了事务控制，那么A调⽤B的时候，就需要进⾏事务的⼀些协商，这就叫做事务的传播⾏为。A调⽤B，我们站在B的⻆度来观察来定义事务的传播⾏为<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/1628127266368.png\" alt=\"enter description here\"></li>\n</ul>\n<h3 id=\"3-spring-xml实现事务\"><a href=\"#3-spring-xml实现事务\" class=\"headerlink\" title=\"3. spring xml实现事务\"></a>3. spring xml实现事务</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">&lt;!--spring声明式事务配置，声明式事务无非就是配置一个aop，只不过有些标签不一样罢了--&gt;<br>&lt;!--横切逻辑--&gt;<br>&lt;bean id=&quot;transactionManager&quot; class=&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;&gt;<br>\t&lt;constructor-arg name=&quot;dataSource&quot; ref=&quot;dataSource&quot;&gt;&lt;/constructor-arg&gt;<br>&lt;/bean&gt;<br><br>&lt;tx:advice id=&quot;txAdvice&quot; transaction-manager=&quot;transactionManager&quot;&gt;<br>\t&lt;!--定制事务细节，传播行为、隔离级别等--&gt;<br>\t&lt;tx:attributes&gt;<br>\t\t&lt;!--一般性配置--&gt;<br>\t\t&lt;tx:method name=&quot;*&quot; read-only=&quot;false&quot; propagation=&quot;REQUIRED&quot; isolation=&quot;DEFAULT&quot; timeout=&quot;-1&quot;/&gt;<br>\t\t&lt;!--针对查询的覆盖性配置--&gt;<br>\t\t&lt;tx:method name=&quot;query*&quot; read-only=&quot;true&quot; propagation=&quot;SUPPORTS&quot;/&gt;<br>\t&lt;/tx:attributes&gt;<br>&lt;/tx:advice&gt;<br>&lt;aop:config&gt;<br>\t&lt;!--advice-ref指向增强=横切逻辑+方位&amp;--&gt;<br>\t&lt;aop:advisor advice-ref=&quot;txAdvice&quot; pointcut=&quot;execution(* com.lagou.edu.service.impl.TransferServiceImpl.*(..))&quot;/&gt;<br>&lt;/aop:config&gt;<br></code></pre></td></tr></table></figure>\n<h3 id=\"4-spring-xml-anno实现事务\"><a href=\"#4-spring-xml-anno实现事务\" class=\"headerlink\" title=\"4. spring xml+anno实现事务\"></a>4. spring xml+anno实现事务</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">//xml<br>&lt;!--声明式事务的注解驱动--&gt;<br>&lt;tx:annotation-driven transaction-manager=&quot;transactionManager&quot;/&gt;<br>//anno<br>@Transactional<br></code></pre></td></tr></table></figure>\n<h3 id=\"5-纯注解\"><a href=\"#5-纯注解\" class=\"headerlink\" title=\"5. 纯注解\"></a>5. 纯注解</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">@EnableTransactionManagement<br>@Transactional<br></code></pre></td></tr></table></figure>\n<ul>\n<li>源码：<code>git clone -b master12 https://gitee.com/idse666666/my_spring.git</code></li>\n</ul>\n"},{"_content":"# 通过房屋租赁流程理解设计模式（单例模式，代理模式，工厂模式）\n---\n[toc]\n\n---\n源码:[design-pattern ](https://gitee.com/idse666666/design-pattern.git)\n\n---\n## 一、单例模式\n### 1. 相关概念\n * 单例模式：应用在全局只有一个实例对象时，将自身实例化并赋值给一个属性，加载到此类时直接调用其静态实例。分为懒汉和饿汉式，此处展示饿汉式\n * 实现思路：此类为静态，只暴露getInstance方法，jvm启动过程只加载一次\n * 主要用途：整个项目只要一种配置，基本固定的值，仅实例化一次；如数据库的连接信息\n### 2. 演示思路\n+ 假设某地区房产中介只有一个Tom，完全垄断租房中介产业。张三Z和李四L都想在北京租房，只能找Tom。Tom不需要打太多广告，只需要把自己的名字和代理费用打印成一张名片。\n### 3. 代码实现\n+ 中介Tom（忽略get，set，toString）\n```javascript?linenums\npublic class Agent {\n    //无参构造\n    private Agent(){};\n    //实例化\n    private static Agent agent=new Agent();\n    //提供实例化后的对象以便使用（Tom印制自己的名片，准备发放）\n    public static Agent getInstance(){\n        System.out.println(\"单例模式，只有我一个代理！代理权被我Tom垄断了....\");\n        return agent;\n    }\n\t\n    private String name;\n    private Integer fee;\n\t\n    static {\n        agent.setName(\"tom\");\n        agent.setFee(500);\n    }\n}\n```\n+ 租户张三：\n```javascript?linenums\npublic class Tenant_Z {\n    public static void main(String[] args) {\n        System.out.println(\"张三想要租房....\");\n        //（找到中介公司，只有一个中介）\n        Agent agent=Agent.getInstance();\n        System.out.println(agent);\n    }\n}\n\n```\n+ 租户李四：\n```javascript?linenums\npublic class Tenant_L {\n    public static void main(String[] args) {\n        System.out.println(\"李四想要租房....\");\n\t\t//（找到中介公司，只有一个中介）\n        Agent agent=Agent.getInstance();\n        System.out.println(agent);\n    }\n}\n```\n### 4. 结果演示\n![enter description here](https://img-1256282866.cos.ap-beijing.myqcloud.com/1627825408671.png)\n![enter description here](https://img-1256282866.cos.ap-beijing.myqcloud.com/1627825434528.png)\n\n## 二、代理模式\n### 1. 相关概念\n* 给某一个对象提供一个代理，并由代理对象控制对原对象的引用。代理模式 的英文叫做Proxy，它是一种对象结构型模式，代理模式分为静态代理和动态代理，此处演示JDK动态代理\n* 实现思路：使用JDK自带的动态代理\n* 主要用途：在多个业务逻辑的前后有固定的非业务方法，做出提取，代理该方法并实现加强。比如JDBC操作中，每次连接数据库进行操作都需要创建连接，最后释放连接，与实际的业务掺杂在一起。\n### 2. 演示思路\n仍然是租赁房屋，但风水轮流转，这次张三Z和李四L是代理，租房给Tom，不但是租赁前收取你的代理费用，还在你租赁完成后售出你的个人信息。赚两份钱，并且他还不想让你知道。只要你找他租赁，就默默的在成功给你租到房后售出信息。\n### 3. 代码实现\n + 租赁行为（也就是待加强的方法，JDK动态代理代理对象必须是接口实现类）\n```javascript?linenums\n// 租赁接口\npublic interface IRenting {\n    void rent(String name);\n}\n//接口实现\npublic class RentingImpl implements IRenting {\n    public void rent(String name) {\n        System.out.println(name+\"作为代理租赁了出一套房子\");\n    }\n}\n```\n+ JDK动态代理加强方法\n```javascript?linenums\npublic class JDKProxy {\n    public static Object getJDKProxy(Object o){\n        return Proxy.newProxyInstance(o.getClass().getClassLoader(), o.getClass().getInterfaces(), new InvocationHandler() {\n            @Override\n            public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n                Object result;\n                System.out.println(\"先收取代理费用500元\");\n                result = method.invoke(o, args);\n                System.out.println(\"最后卖出客户信息5元\");\n                return result;\n            }\n        });\n    }\n}\n```\n+ Tom找张三租赁\n```javascript?linenums\npublic class Agent_Z {\n    public static void main(String[] args) {\n        System.out.println(\"Tom想要租房....再找张三代理...\");\n        IRenting renting=(IRenting)JDKProxy.getJDKProxy(new RentingImpl());\n        renting.rent(\"张三\");\n    }\n}\n```\n+ Tom找李四租赁\n```javascript?linenums\npublic class Agent_L {\n    public static void main(String[] args) {\n        System.out.println(\"Tom想要租房....先找李四代理...\");\n        IRenting renting=(IRenting)JDKProxy.getJDKProxy(new RentingImpl());\n        renting.rent(\"李四\");\n    }\n}\n```\n### 4. 结果演示\n+ ![enter description here](https://img-1256282866.cos.ap-beijing.myqcloud.com/1627830083514.png)\n+ ![enter description here](https://img-1256282866.cos.ap-beijing.myqcloud.com/1627830102262.png)\n\n## 三、工厂模式\n### 1. 相关概念\n在简单工厂模式中，可以根据参数的不同返回不同类的实例。简单工厂模式专门定义一个类来负责创建其他类的实例，被创建的实例通常都具有共同的父类\n### 2. 演示思路\n张三Z和李四L通过双份收入获得了第一桶金，也开启了各自的代理分公司。他们业务还是按照原来的总公司的租赁业务，但各自在租赁时开始打上自己的服务口号....\n### 3. 代码实现\n+ 租赁行为的总工厂以及具体实现的分工厂\n```javascript?linenums\n//总工厂\npublic interface IRentingFactory {\n    void rent();\n}\n//张三实现工厂\npublic class RentingFactory_Z implements IRentingFactory {\n    public void rent() {\n        System.out.println(\"张三租赁公司分公司为您服务...\");\n    }\n}\n//李四实现工厂\npublic class RentingFactory_L implements IRentingFactory {\n    @Override\n    public void rent() {\n        System.out.println(\"李四租赁公司分公司为您服务...\");\n    }\n}\n```\n+ Tom找张三分公司代理\n```javascript?linenums\npublic class Tenant_Tom_To_Z {\n    public static void main(String[] args) {\n        System.out.println(\"Tom想要租房....找张三分公司代理...\");\n        IRentingFactory renting=new RentingFactory_Z();\n        renting.rent();\n    }\n}\n```\n+ Tom找李四分公司代理\n```javascript?linenums\npublic class Tenant_Tom_To_L {\n    public static void main(String[] args) {\n        System.out.println(\"Tom想要租房....找李四分公司代理...\");\n        IRentingFactory renting=new RentingFactory_L();\n        renting.rent();\n    }\n}\n```\n### 4. 结果演示\n+ ![enter description here](https://img-1256282866.cos.ap-beijing.myqcloud.com/1627865477291.png)\n+ ![enter description here](https://img-1256282866.cos.ap-beijing.myqcloud.com/1627865453058.png)\n\n## 四、融合三种设计模式（选读）\n### 1. 演示思路\n张三Z和李四L两人的公司越开越大，分别占领了该地区的南北两大地区。从此单人垄断变成双人联合垄断，各自打印各自名片，只对自己所属地区进行发放。与此同时，上级公司任然挂名，他们也仍像以前一样收取代理费后，售卖个人信息。\n### 2. 代码实现\n+ 租赁行为的总工厂以及具体实现的分工厂\n```javascript?linenums\n//总工厂\npublic interface IRentingFactory {\n    void rent();\n}\n//张三实现工厂\npublic class RentingFactory_Z implements IRentingFactory {\n    public void rent() {\n        System.out.println(\"张三租赁公司分公司为您服务...\");\n    }\n}\n//李四实现工厂\npublic class RentingFactory_L implements IRentingFactory {\n    @Override\n    public void rent() {\n        System.out.println(\"李四租赁公司分公司为您服务...\");\n    }\n}\n```\n+ 张三的名片\n```javascript?linenums\npublic class Agent_Z {\n    //无参构造\n    private Agent_Z(){};\n    //实例化\n    private static Agent_Z agent=new Agent_Z();\n    //提供已经实例化的对象方便调用（张三印制自己的名片，准备发放）\n    public static Agent_Z getInstance(){\n        System.out.println(\"单例模式，本地区只有我张三一个代理！\");\n        return agent;\n    }\n\n    private String name;\n    private Integer fee;\n\n    static {\n        agent.setName(\"张三\");\n        agent.setFee(500);\n    }\n}\n```\n+ 李四的名片\n```javascript?linenums\npublic class Agent_L {\n    //无参构造\n    private Agent_L(){};\n    //实例化\n    private static Agent_L agent=new Agent_L();\n    //提供已经实例化的对象方便调用（李四印制自己的名片，准备发放）\n    public static Agent_L getInstance(){\n        System.out.println(\"单例模式，本地区只有我李四一个代理！\");\n        return agent;\n    }\n\n    private String name;\n    private Integer fee;\n\n    static {\n        agent.setName(\"李四\");\n        agent.setFee(500);\n    }\n}\n```\n+ JDK动态代理加强方法\n```javascript?linenums\npublic class JDKProxy {\n    public static Object getJDKProxy(Object o){\n        return Proxy.newProxyInstance(o.getClass().getClassLoader(), o.getClass().getInterfaces(), new InvocationHandler() {\n            @Override\n            public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n                Object result;\n                System.out.println(\"先收取代理费用500元\");\n                result = method.invoke(o, args);\n                System.out.println(\"最后卖出客户信息5元\");\n                return result;\n            }\n        });\n    }\n}\n```\n+ Tom分别找两个代理公司租房\n```javascript?linenums\npublic class Tenant_Tom {\n    public static void main(String[] args) {\n        System.out.println(\"Tom在南方地区想要租房...\");\n        Agent_Z agent_z = Agent_Z.getInstance();\n        System.out.println(\"获取名片：\"+agent_z);\n        IRentingFactory rentingFactory_Z=(IRentingFactory)JDKProxy.getJDKProxy(new RentingFactory_Z());\n        rentingFactory_Z.rent();\n\n        System.out.println(\"---------------------\");\n        System.out.println(\"Tom在北方地区想要租房...\");\n        Agent_L agent_l = Agent_L.getInstance();\n        System.out.println(\"获取名片：\"+agent_l);\n        IRentingFactory rentingFactory_L=(IRentingFactory)JDKProxy.getJDKProxy(new RentingFactory_L());\n        rentingFactory_L.rent();\n    }\n}\n```\n### 4. 结果演示\n+ ![enter description here](https://img-1256282866.cos.ap-beijing.myqcloud.com/1627867501321.png)","source":"_posts/BookMark/拉勾笔记/通过房屋租赁流程理解设计模式（单例模式，代理模式，工厂模式）.md","raw":"# 通过房屋租赁流程理解设计模式（单例模式，代理模式，工厂模式）\n---\n[toc]\n\n---\n源码:[design-pattern ](https://gitee.com/idse666666/design-pattern.git)\n\n---\n## 一、单例模式\n### 1. 相关概念\n * 单例模式：应用在全局只有一个实例对象时，将自身实例化并赋值给一个属性，加载到此类时直接调用其静态实例。分为懒汉和饿汉式，此处展示饿汉式\n * 实现思路：此类为静态，只暴露getInstance方法，jvm启动过程只加载一次\n * 主要用途：整个项目只要一种配置，基本固定的值，仅实例化一次；如数据库的连接信息\n### 2. 演示思路\n+ 假设某地区房产中介只有一个Tom，完全垄断租房中介产业。张三Z和李四L都想在北京租房，只能找Tom。Tom不需要打太多广告，只需要把自己的名字和代理费用打印成一张名片。\n### 3. 代码实现\n+ 中介Tom（忽略get，set，toString）\n```javascript?linenums\npublic class Agent {\n    //无参构造\n    private Agent(){};\n    //实例化\n    private static Agent agent=new Agent();\n    //提供实例化后的对象以便使用（Tom印制自己的名片，准备发放）\n    public static Agent getInstance(){\n        System.out.println(\"单例模式，只有我一个代理！代理权被我Tom垄断了....\");\n        return agent;\n    }\n\t\n    private String name;\n    private Integer fee;\n\t\n    static {\n        agent.setName(\"tom\");\n        agent.setFee(500);\n    }\n}\n```\n+ 租户张三：\n```javascript?linenums\npublic class Tenant_Z {\n    public static void main(String[] args) {\n        System.out.println(\"张三想要租房....\");\n        //（找到中介公司，只有一个中介）\n        Agent agent=Agent.getInstance();\n        System.out.println(agent);\n    }\n}\n\n```\n+ 租户李四：\n```javascript?linenums\npublic class Tenant_L {\n    public static void main(String[] args) {\n        System.out.println(\"李四想要租房....\");\n\t\t//（找到中介公司，只有一个中介）\n        Agent agent=Agent.getInstance();\n        System.out.println(agent);\n    }\n}\n```\n### 4. 结果演示\n![enter description here](https://img-1256282866.cos.ap-beijing.myqcloud.com/1627825408671.png)\n![enter description here](https://img-1256282866.cos.ap-beijing.myqcloud.com/1627825434528.png)\n\n## 二、代理模式\n### 1. 相关概念\n* 给某一个对象提供一个代理，并由代理对象控制对原对象的引用。代理模式 的英文叫做Proxy，它是一种对象结构型模式，代理模式分为静态代理和动态代理，此处演示JDK动态代理\n* 实现思路：使用JDK自带的动态代理\n* 主要用途：在多个业务逻辑的前后有固定的非业务方法，做出提取，代理该方法并实现加强。比如JDBC操作中，每次连接数据库进行操作都需要创建连接，最后释放连接，与实际的业务掺杂在一起。\n### 2. 演示思路\n仍然是租赁房屋，但风水轮流转，这次张三Z和李四L是代理，租房给Tom，不但是租赁前收取你的代理费用，还在你租赁完成后售出你的个人信息。赚两份钱，并且他还不想让你知道。只要你找他租赁，就默默的在成功给你租到房后售出信息。\n### 3. 代码实现\n + 租赁行为（也就是待加强的方法，JDK动态代理代理对象必须是接口实现类）\n```javascript?linenums\n// 租赁接口\npublic interface IRenting {\n    void rent(String name);\n}\n//接口实现\npublic class RentingImpl implements IRenting {\n    public void rent(String name) {\n        System.out.println(name+\"作为代理租赁了出一套房子\");\n    }\n}\n```\n+ JDK动态代理加强方法\n```javascript?linenums\npublic class JDKProxy {\n    public static Object getJDKProxy(Object o){\n        return Proxy.newProxyInstance(o.getClass().getClassLoader(), o.getClass().getInterfaces(), new InvocationHandler() {\n            @Override\n            public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n                Object result;\n                System.out.println(\"先收取代理费用500元\");\n                result = method.invoke(o, args);\n                System.out.println(\"最后卖出客户信息5元\");\n                return result;\n            }\n        });\n    }\n}\n```\n+ Tom找张三租赁\n```javascript?linenums\npublic class Agent_Z {\n    public static void main(String[] args) {\n        System.out.println(\"Tom想要租房....再找张三代理...\");\n        IRenting renting=(IRenting)JDKProxy.getJDKProxy(new RentingImpl());\n        renting.rent(\"张三\");\n    }\n}\n```\n+ Tom找李四租赁\n```javascript?linenums\npublic class Agent_L {\n    public static void main(String[] args) {\n        System.out.println(\"Tom想要租房....先找李四代理...\");\n        IRenting renting=(IRenting)JDKProxy.getJDKProxy(new RentingImpl());\n        renting.rent(\"李四\");\n    }\n}\n```\n### 4. 结果演示\n+ ![enter description here](https://img-1256282866.cos.ap-beijing.myqcloud.com/1627830083514.png)\n+ ![enter description here](https://img-1256282866.cos.ap-beijing.myqcloud.com/1627830102262.png)\n\n## 三、工厂模式\n### 1. 相关概念\n在简单工厂模式中，可以根据参数的不同返回不同类的实例。简单工厂模式专门定义一个类来负责创建其他类的实例，被创建的实例通常都具有共同的父类\n### 2. 演示思路\n张三Z和李四L通过双份收入获得了第一桶金，也开启了各自的代理分公司。他们业务还是按照原来的总公司的租赁业务，但各自在租赁时开始打上自己的服务口号....\n### 3. 代码实现\n+ 租赁行为的总工厂以及具体实现的分工厂\n```javascript?linenums\n//总工厂\npublic interface IRentingFactory {\n    void rent();\n}\n//张三实现工厂\npublic class RentingFactory_Z implements IRentingFactory {\n    public void rent() {\n        System.out.println(\"张三租赁公司分公司为您服务...\");\n    }\n}\n//李四实现工厂\npublic class RentingFactory_L implements IRentingFactory {\n    @Override\n    public void rent() {\n        System.out.println(\"李四租赁公司分公司为您服务...\");\n    }\n}\n```\n+ Tom找张三分公司代理\n```javascript?linenums\npublic class Tenant_Tom_To_Z {\n    public static void main(String[] args) {\n        System.out.println(\"Tom想要租房....找张三分公司代理...\");\n        IRentingFactory renting=new RentingFactory_Z();\n        renting.rent();\n    }\n}\n```\n+ Tom找李四分公司代理\n```javascript?linenums\npublic class Tenant_Tom_To_L {\n    public static void main(String[] args) {\n        System.out.println(\"Tom想要租房....找李四分公司代理...\");\n        IRentingFactory renting=new RentingFactory_L();\n        renting.rent();\n    }\n}\n```\n### 4. 结果演示\n+ ![enter description here](https://img-1256282866.cos.ap-beijing.myqcloud.com/1627865477291.png)\n+ ![enter description here](https://img-1256282866.cos.ap-beijing.myqcloud.com/1627865453058.png)\n\n## 四、融合三种设计模式（选读）\n### 1. 演示思路\n张三Z和李四L两人的公司越开越大，分别占领了该地区的南北两大地区。从此单人垄断变成双人联合垄断，各自打印各自名片，只对自己所属地区进行发放。与此同时，上级公司任然挂名，他们也仍像以前一样收取代理费后，售卖个人信息。\n### 2. 代码实现\n+ 租赁行为的总工厂以及具体实现的分工厂\n```javascript?linenums\n//总工厂\npublic interface IRentingFactory {\n    void rent();\n}\n//张三实现工厂\npublic class RentingFactory_Z implements IRentingFactory {\n    public void rent() {\n        System.out.println(\"张三租赁公司分公司为您服务...\");\n    }\n}\n//李四实现工厂\npublic class RentingFactory_L implements IRentingFactory {\n    @Override\n    public void rent() {\n        System.out.println(\"李四租赁公司分公司为您服务...\");\n    }\n}\n```\n+ 张三的名片\n```javascript?linenums\npublic class Agent_Z {\n    //无参构造\n    private Agent_Z(){};\n    //实例化\n    private static Agent_Z agent=new Agent_Z();\n    //提供已经实例化的对象方便调用（张三印制自己的名片，准备发放）\n    public static Agent_Z getInstance(){\n        System.out.println(\"单例模式，本地区只有我张三一个代理！\");\n        return agent;\n    }\n\n    private String name;\n    private Integer fee;\n\n    static {\n        agent.setName(\"张三\");\n        agent.setFee(500);\n    }\n}\n```\n+ 李四的名片\n```javascript?linenums\npublic class Agent_L {\n    //无参构造\n    private Agent_L(){};\n    //实例化\n    private static Agent_L agent=new Agent_L();\n    //提供已经实例化的对象方便调用（李四印制自己的名片，准备发放）\n    public static Agent_L getInstance(){\n        System.out.println(\"单例模式，本地区只有我李四一个代理！\");\n        return agent;\n    }\n\n    private String name;\n    private Integer fee;\n\n    static {\n        agent.setName(\"李四\");\n        agent.setFee(500);\n    }\n}\n```\n+ JDK动态代理加强方法\n```javascript?linenums\npublic class JDKProxy {\n    public static Object getJDKProxy(Object o){\n        return Proxy.newProxyInstance(o.getClass().getClassLoader(), o.getClass().getInterfaces(), new InvocationHandler() {\n            @Override\n            public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n                Object result;\n                System.out.println(\"先收取代理费用500元\");\n                result = method.invoke(o, args);\n                System.out.println(\"最后卖出客户信息5元\");\n                return result;\n            }\n        });\n    }\n}\n```\n+ Tom分别找两个代理公司租房\n```javascript?linenums\npublic class Tenant_Tom {\n    public static void main(String[] args) {\n        System.out.println(\"Tom在南方地区想要租房...\");\n        Agent_Z agent_z = Agent_Z.getInstance();\n        System.out.println(\"获取名片：\"+agent_z);\n        IRentingFactory rentingFactory_Z=(IRentingFactory)JDKProxy.getJDKProxy(new RentingFactory_Z());\n        rentingFactory_Z.rent();\n\n        System.out.println(\"---------------------\");\n        System.out.println(\"Tom在北方地区想要租房...\");\n        Agent_L agent_l = Agent_L.getInstance();\n        System.out.println(\"获取名片：\"+agent_l);\n        IRentingFactory rentingFactory_L=(IRentingFactory)JDKProxy.getJDKProxy(new RentingFactory_L());\n        rentingFactory_L.rent();\n    }\n}\n```\n### 4. 结果演示\n+ ![enter description here](https://img-1256282866.cos.ap-beijing.myqcloud.com/1627867501321.png)","slug":"BookMark/拉勾笔记/通过房屋租赁流程理解设计模式（单例模式，代理模式，工厂模式）","published":1,"date":"2022-07-25T05:51:38.000Z","updated":"2022-09-01T10:20:22.854Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cl7ptszop002aaba5b7kg64w9","content":"<h1><span id=\"通过房屋租赁流程理解设计模式单例模式代理模式工厂模式\">通过房屋租赁流程理解设计模式（单例模式，代理模式，工厂模式）</span></h1><hr>\n<p>[toc]</p>\n<hr>\n<p>源码:<a href=\"https://gitee.com/idse666666/design-pattern.git\">design-pattern </a></p>\n<hr>\n<h2><span id=\"一-单例模式\">一、单例模式</span></h2><h3><span id=\"1-相关概念\">1. 相关概念</span></h3><ul>\n<li>单例模式：应用在全局只有一个实例对象时，将自身实例化并赋值给一个属性，加载到此类时直接调用其静态实例。分为懒汉和饿汉式，此处展示饿汉式</li>\n<li>实现思路：此类为静态，只暴露getInstance方法，jvm启动过程只加载一次</li>\n<li>主要用途：整个项目只要一种配置，基本固定的值，仅实例化一次；如数据库的连接信息</li>\n</ul>\n<h3><span id=\"2-演示思路\">2. 演示思路</span></h3><ul>\n<li>假设某地区房产中介只有一个Tom，完全垄断租房中介产业。张三Z和李四L都想在北京租房，只能找Tom。Tom不需要打太多广告，只需要把自己的名字和代理费用打印成一张名片。</li>\n</ul>\n<h3><span id=\"3-代码实现\">3. 代码实现</span></h3><ul>\n<li>中介Tom（忽略get，set，toString）<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">public class Agent &#123;<br>    //无参构造<br>    private Agent()&#123;&#125;;<br>    //实例化<br>    private static Agent agent=new Agent();<br>    //提供实例化后的对象以便使用（Tom印制自己的名片，准备发放）<br>    public static Agent getInstance()&#123;<br>        System.out.println(&quot;单例模式，只有我一个代理！代理权被我Tom垄断了....&quot;);<br>        return agent;<br>    &#125;<br>\t<br>    private String name;<br>    private Integer fee;<br>\t<br>    static &#123;<br>        agent.setName(&quot;tom&quot;);<br>        agent.setFee(500);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li>\n<li>租户张三：<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">public class Tenant_Z &#123;<br>    public static void main(String[] args) &#123;<br>        System.out.println(&quot;张三想要租房....&quot;);<br>        //（找到中介公司，只有一个中介）<br>        Agent agent=Agent.getInstance();<br>        System.out.println(agent);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></li>\n<li>租户李四：<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">public class Tenant_L &#123;<br>    public static void main(String[] args) &#123;<br>        System.out.println(&quot;李四想要租房....&quot;);<br>\t\t//（找到中介公司，只有一个中介）<br>        Agent agent=Agent.getInstance();<br>        System.out.println(agent);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li>\n</ul>\n<h3><span id=\"4-结果演示\">4. 结果演示</span></h3><p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/1627825408671.png\" alt=\"enter description here\"><br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/1627825434528.png\" alt=\"enter description here\"></p>\n<h2><span id=\"二-代理模式\">二、代理模式</span></h2><h3><span id=\"1-相关概念\">1. 相关概念</span></h3><ul>\n<li>给某一个对象提供一个代理，并由代理对象控制对原对象的引用。代理模式 的英文叫做Proxy，它是一种对象结构型模式，代理模式分为静态代理和动态代理，此处演示JDK动态代理</li>\n<li>实现思路：使用JDK自带的动态代理</li>\n<li>主要用途：在多个业务逻辑的前后有固定的非业务方法，做出提取，代理该方法并实现加强。比如JDBC操作中，每次连接数据库进行操作都需要创建连接，最后释放连接，与实际的业务掺杂在一起。</li>\n</ul>\n<h3><span id=\"2-演示思路\">2. 演示思路</span></h3><p>仍然是租赁房屋，但风水轮流转，这次张三Z和李四L是代理，租房给Tom，不但是租赁前收取你的代理费用，还在你租赁完成后售出你的个人信息。赚两份钱，并且他还不想让你知道。只要你找他租赁，就默默的在成功给你租到房后售出信息。</p>\n<h3><span id=\"3-代码实现\">3. 代码实现</span></h3><ul>\n<li>租赁行为（也就是待加强的方法，JDK动态代理代理对象必须是接口实现类）<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">// 租赁接口<br>public interface IRenting &#123;<br>    void rent(String name);<br>&#125;<br>//接口实现<br>public class RentingImpl implements IRenting &#123;<br>    public void rent(String name) &#123;<br>        System.out.println(name+&quot;作为代理租赁了出一套房子&quot;);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li>\n<li>JDK动态代理加强方法<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">public class JDKProxy &#123;<br>    public static Object getJDKProxy(Object o)&#123;<br>        return Proxy.newProxyInstance(o.getClass().getClassLoader(), o.getClass().getInterfaces(), new InvocationHandler() &#123;<br>            @Override<br>            public Object invoke(Object proxy, Method method, Object[] args) throws Throwable &#123;<br>                Object result;<br>                System.out.println(&quot;先收取代理费用500元&quot;);<br>                result = method.invoke(o, args);<br>                System.out.println(&quot;最后卖出客户信息5元&quot;);<br>                return result;<br>            &#125;<br>        &#125;);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li>\n<li>Tom找张三租赁<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">public class Agent_Z &#123;<br>    public static void main(String[] args) &#123;<br>        System.out.println(&quot;Tom想要租房....再找张三代理...&quot;);<br>        IRenting renting=(IRenting)JDKProxy.getJDKProxy(new RentingImpl());<br>        renting.rent(&quot;张三&quot;);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li>\n<li>Tom找李四租赁<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">public class Agent_L &#123;<br>    public static void main(String[] args) &#123;<br>        System.out.println(&quot;Tom想要租房....先找李四代理...&quot;);<br>        IRenting renting=(IRenting)JDKProxy.getJDKProxy(new RentingImpl());<br>        renting.rent(&quot;李四&quot;);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li>\n</ul>\n<h3><span id=\"4-结果演示\">4. 结果演示</span></h3><ul>\n<li><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/1627830083514.png\" alt=\"enter description here\"></li>\n<li><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/1627830102262.png\" alt=\"enter description here\"></li>\n</ul>\n<h2><span id=\"三-工厂模式\">三、工厂模式</span></h2><h3><span id=\"1-相关概念\">1. 相关概念</span></h3><p>在简单工厂模式中，可以根据参数的不同返回不同类的实例。简单工厂模式专门定义一个类来负责创建其他类的实例，被创建的实例通常都具有共同的父类</p>\n<h3><span id=\"2-演示思路\">2. 演示思路</span></h3><p>张三Z和李四L通过双份收入获得了第一桶金，也开启了各自的代理分公司。他们业务还是按照原来的总公司的租赁业务，但各自在租赁时开始打上自己的服务口号….</p>\n<h3><span id=\"3-代码实现\">3. 代码实现</span></h3><ul>\n<li>租赁行为的总工厂以及具体实现的分工厂<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">//总工厂<br>public interface IRentingFactory &#123;<br>    void rent();<br>&#125;<br>//张三实现工厂<br>public class RentingFactory_Z implements IRentingFactory &#123;<br>    public void rent() &#123;<br>        System.out.println(&quot;张三租赁公司分公司为您服务...&quot;);<br>    &#125;<br>&#125;<br>//李四实现工厂<br>public class RentingFactory_L implements IRentingFactory &#123;<br>    @Override<br>    public void rent() &#123;<br>        System.out.println(&quot;李四租赁公司分公司为您服务...&quot;);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li>\n<li>Tom找张三分公司代理<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">public class Tenant_Tom_To_Z &#123;<br>    public static void main(String[] args) &#123;<br>        System.out.println(&quot;Tom想要租房....找张三分公司代理...&quot;);<br>        IRentingFactory renting=new RentingFactory_Z();<br>        renting.rent();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li>\n<li>Tom找李四分公司代理<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">public class Tenant_Tom_To_L &#123;<br>    public static void main(String[] args) &#123;<br>        System.out.println(&quot;Tom想要租房....找李四分公司代理...&quot;);<br>        IRentingFactory renting=new RentingFactory_L();<br>        renting.rent();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li>\n</ul>\n<h3><span id=\"4-结果演示\">4. 结果演示</span></h3><ul>\n<li><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/1627865477291.png\" alt=\"enter description here\"></li>\n<li><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/1627865453058.png\" alt=\"enter description here\"></li>\n</ul>\n<h2><span id=\"四-融合三种设计模式选读\">四、融合三种设计模式（选读）</span></h2><h3><span id=\"1-演示思路\">1. 演示思路</span></h3><p>张三Z和李四L两人的公司越开越大，分别占领了该地区的南北两大地区。从此单人垄断变成双人联合垄断，各自打印各自名片，只对自己所属地区进行发放。与此同时，上级公司任然挂名，他们也仍像以前一样收取代理费后，售卖个人信息。</p>\n<h3><span id=\"2-代码实现\">2. 代码实现</span></h3><ul>\n<li>租赁行为的总工厂以及具体实现的分工厂<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">//总工厂<br>public interface IRentingFactory &#123;<br>    void rent();<br>&#125;<br>//张三实现工厂<br>public class RentingFactory_Z implements IRentingFactory &#123;<br>    public void rent() &#123;<br>        System.out.println(&quot;张三租赁公司分公司为您服务...&quot;);<br>    &#125;<br>&#125;<br>//李四实现工厂<br>public class RentingFactory_L implements IRentingFactory &#123;<br>    @Override<br>    public void rent() &#123;<br>        System.out.println(&quot;李四租赁公司分公司为您服务...&quot;);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li>\n<li>张三的名片<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">public class Agent_Z &#123;<br>    //无参构造<br>    private Agent_Z()&#123;&#125;;<br>    //实例化<br>    private static Agent_Z agent=new Agent_Z();<br>    //提供已经实例化的对象方便调用（张三印制自己的名片，准备发放）<br>    public static Agent_Z getInstance()&#123;<br>        System.out.println(&quot;单例模式，本地区只有我张三一个代理！&quot;);<br>        return agent;<br>    &#125;<br><br>    private String name;<br>    private Integer fee;<br><br>    static &#123;<br>        agent.setName(&quot;张三&quot;);<br>        agent.setFee(500);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li>\n<li>李四的名片<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">public class Agent_L &#123;<br>    //无参构造<br>    private Agent_L()&#123;&#125;;<br>    //实例化<br>    private static Agent_L agent=new Agent_L();<br>    //提供已经实例化的对象方便调用（李四印制自己的名片，准备发放）<br>    public static Agent_L getInstance()&#123;<br>        System.out.println(&quot;单例模式，本地区只有我李四一个代理！&quot;);<br>        return agent;<br>    &#125;<br><br>    private String name;<br>    private Integer fee;<br><br>    static &#123;<br>        agent.setName(&quot;李四&quot;);<br>        agent.setFee(500);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li>\n<li>JDK动态代理加强方法<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">public class JDKProxy &#123;<br>    public static Object getJDKProxy(Object o)&#123;<br>        return Proxy.newProxyInstance(o.getClass().getClassLoader(), o.getClass().getInterfaces(), new InvocationHandler() &#123;<br>            @Override<br>            public Object invoke(Object proxy, Method method, Object[] args) throws Throwable &#123;<br>                Object result;<br>                System.out.println(&quot;先收取代理费用500元&quot;);<br>                result = method.invoke(o, args);<br>                System.out.println(&quot;最后卖出客户信息5元&quot;);<br>                return result;<br>            &#125;<br>        &#125;);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li>\n<li>Tom分别找两个代理公司租房<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">public class Tenant_Tom &#123;<br>    public static void main(String[] args) &#123;<br>        System.out.println(&quot;Tom在南方地区想要租房...&quot;);<br>        Agent_Z agent_z = Agent_Z.getInstance();<br>        System.out.println(&quot;获取名片：&quot;+agent_z);<br>        IRentingFactory rentingFactory_Z=(IRentingFactory)JDKProxy.getJDKProxy(new RentingFactory_Z());<br>        rentingFactory_Z.rent();<br><br>        System.out.println(&quot;---------------------&quot;);<br>        System.out.println(&quot;Tom在北方地区想要租房...&quot;);<br>        Agent_L agent_l = Agent_L.getInstance();<br>        System.out.println(&quot;获取名片：&quot;+agent_l);<br>        IRentingFactory rentingFactory_L=(IRentingFactory)JDKProxy.getJDKProxy(new RentingFactory_L());<br>        rentingFactory_L.rent();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li>\n</ul>\n<h3><span id=\"4-结果演示\">4. 结果演示</span></h3><ul>\n<li><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/1627867501321.png\" alt=\"enter description here\"></li>\n</ul>\n","site":{"data":{}},"wordcount":6125,"excerpt":"","more":"<h1 id=\"通过房屋租赁流程理解设计模式（单例模式，代理模式，工厂模式）\"><a href=\"#通过房屋租赁流程理解设计模式（单例模式，代理模式，工厂模式）\" class=\"headerlink\" title=\"通过房屋租赁流程理解设计模式（单例模式，代理模式，工厂模式）\"></a>通过房屋租赁流程理解设计模式（单例模式，代理模式，工厂模式）</h1><hr>\n<p>[toc]</p>\n<hr>\n<p>源码:<a href=\"https://gitee.com/idse666666/design-pattern.git\">design-pattern </a></p>\n<hr>\n<h2 id=\"一、单例模式\"><a href=\"#一、单例模式\" class=\"headerlink\" title=\"一、单例模式\"></a>一、单例模式</h2><h3 id=\"1-相关概念\"><a href=\"#1-相关概念\" class=\"headerlink\" title=\"1. 相关概念\"></a>1. 相关概念</h3><ul>\n<li>单例模式：应用在全局只有一个实例对象时，将自身实例化并赋值给一个属性，加载到此类时直接调用其静态实例。分为懒汉和饿汉式，此处展示饿汉式</li>\n<li>实现思路：此类为静态，只暴露getInstance方法，jvm启动过程只加载一次</li>\n<li>主要用途：整个项目只要一种配置，基本固定的值，仅实例化一次；如数据库的连接信息</li>\n</ul>\n<h3 id=\"2-演示思路\"><a href=\"#2-演示思路\" class=\"headerlink\" title=\"2. 演示思路\"></a>2. 演示思路</h3><ul>\n<li>假设某地区房产中介只有一个Tom，完全垄断租房中介产业。张三Z和李四L都想在北京租房，只能找Tom。Tom不需要打太多广告，只需要把自己的名字和代理费用打印成一张名片。</li>\n</ul>\n<h3 id=\"3-代码实现\"><a href=\"#3-代码实现\" class=\"headerlink\" title=\"3. 代码实现\"></a>3. 代码实现</h3><ul>\n<li>中介Tom（忽略get，set，toString）<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">public class Agent &#123;<br>    //无参构造<br>    private Agent()&#123;&#125;;<br>    //实例化<br>    private static Agent agent=new Agent();<br>    //提供实例化后的对象以便使用（Tom印制自己的名片，准备发放）<br>    public static Agent getInstance()&#123;<br>        System.out.println(&quot;单例模式，只有我一个代理！代理权被我Tom垄断了....&quot;);<br>        return agent;<br>    &#125;<br>\t<br>    private String name;<br>    private Integer fee;<br>\t<br>    static &#123;<br>        agent.setName(&quot;tom&quot;);<br>        agent.setFee(500);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li>\n<li>租户张三：<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">public class Tenant_Z &#123;<br>    public static void main(String[] args) &#123;<br>        System.out.println(&quot;张三想要租房....&quot;);<br>        //（找到中介公司，只有一个中介）<br>        Agent agent=Agent.getInstance();<br>        System.out.println(agent);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></li>\n<li>租户李四：<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">public class Tenant_L &#123;<br>    public static void main(String[] args) &#123;<br>        System.out.println(&quot;李四想要租房....&quot;);<br>\t\t//（找到中介公司，只有一个中介）<br>        Agent agent=Agent.getInstance();<br>        System.out.println(agent);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"4-结果演示\"><a href=\"#4-结果演示\" class=\"headerlink\" title=\"4. 结果演示\"></a>4. 结果演示</h3><p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/1627825408671.png\" alt=\"enter description here\"><br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/1627825434528.png\" alt=\"enter description here\"></p>\n<h2 id=\"二、代理模式\"><a href=\"#二、代理模式\" class=\"headerlink\" title=\"二、代理模式\"></a>二、代理模式</h2><h3 id=\"1-相关概念-1\"><a href=\"#1-相关概念-1\" class=\"headerlink\" title=\"1. 相关概念\"></a>1. 相关概念</h3><ul>\n<li>给某一个对象提供一个代理，并由代理对象控制对原对象的引用。代理模式 的英文叫做Proxy，它是一种对象结构型模式，代理模式分为静态代理和动态代理，此处演示JDK动态代理</li>\n<li>实现思路：使用JDK自带的动态代理</li>\n<li>主要用途：在多个业务逻辑的前后有固定的非业务方法，做出提取，代理该方法并实现加强。比如JDBC操作中，每次连接数据库进行操作都需要创建连接，最后释放连接，与实际的业务掺杂在一起。</li>\n</ul>\n<h3 id=\"2-演示思路-1\"><a href=\"#2-演示思路-1\" class=\"headerlink\" title=\"2. 演示思路\"></a>2. 演示思路</h3><p>仍然是租赁房屋，但风水轮流转，这次张三Z和李四L是代理，租房给Tom，不但是租赁前收取你的代理费用，还在你租赁完成后售出你的个人信息。赚两份钱，并且他还不想让你知道。只要你找他租赁，就默默的在成功给你租到房后售出信息。</p>\n<h3 id=\"3-代码实现-1\"><a href=\"#3-代码实现-1\" class=\"headerlink\" title=\"3. 代码实现\"></a>3. 代码实现</h3><ul>\n<li>租赁行为（也就是待加强的方法，JDK动态代理代理对象必须是接口实现类）<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">// 租赁接口<br>public interface IRenting &#123;<br>    void rent(String name);<br>&#125;<br>//接口实现<br>public class RentingImpl implements IRenting &#123;<br>    public void rent(String name) &#123;<br>        System.out.println(name+&quot;作为代理租赁了出一套房子&quot;);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li>\n<li>JDK动态代理加强方法<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">public class JDKProxy &#123;<br>    public static Object getJDKProxy(Object o)&#123;<br>        return Proxy.newProxyInstance(o.getClass().getClassLoader(), o.getClass().getInterfaces(), new InvocationHandler() &#123;<br>            @Override<br>            public Object invoke(Object proxy, Method method, Object[] args) throws Throwable &#123;<br>                Object result;<br>                System.out.println(&quot;先收取代理费用500元&quot;);<br>                result = method.invoke(o, args);<br>                System.out.println(&quot;最后卖出客户信息5元&quot;);<br>                return result;<br>            &#125;<br>        &#125;);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li>\n<li>Tom找张三租赁<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">public class Agent_Z &#123;<br>    public static void main(String[] args) &#123;<br>        System.out.println(&quot;Tom想要租房....再找张三代理...&quot;);<br>        IRenting renting=(IRenting)JDKProxy.getJDKProxy(new RentingImpl());<br>        renting.rent(&quot;张三&quot;);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li>\n<li>Tom找李四租赁<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">public class Agent_L &#123;<br>    public static void main(String[] args) &#123;<br>        System.out.println(&quot;Tom想要租房....先找李四代理...&quot;);<br>        IRenting renting=(IRenting)JDKProxy.getJDKProxy(new RentingImpl());<br>        renting.rent(&quot;李四&quot;);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"4-结果演示-1\"><a href=\"#4-结果演示-1\" class=\"headerlink\" title=\"4. 结果演示\"></a>4. 结果演示</h3><ul>\n<li><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/1627830083514.png\" alt=\"enter description here\"></li>\n<li><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/1627830102262.png\" alt=\"enter description here\"></li>\n</ul>\n<h2 id=\"三、工厂模式\"><a href=\"#三、工厂模式\" class=\"headerlink\" title=\"三、工厂模式\"></a>三、工厂模式</h2><h3 id=\"1-相关概念-2\"><a href=\"#1-相关概念-2\" class=\"headerlink\" title=\"1. 相关概念\"></a>1. 相关概念</h3><p>在简单工厂模式中，可以根据参数的不同返回不同类的实例。简单工厂模式专门定义一个类来负责创建其他类的实例，被创建的实例通常都具有共同的父类</p>\n<h3 id=\"2-演示思路-2\"><a href=\"#2-演示思路-2\" class=\"headerlink\" title=\"2. 演示思路\"></a>2. 演示思路</h3><p>张三Z和李四L通过双份收入获得了第一桶金，也开启了各自的代理分公司。他们业务还是按照原来的总公司的租赁业务，但各自在租赁时开始打上自己的服务口号….</p>\n<h3 id=\"3-代码实现-2\"><a href=\"#3-代码实现-2\" class=\"headerlink\" title=\"3. 代码实现\"></a>3. 代码实现</h3><ul>\n<li>租赁行为的总工厂以及具体实现的分工厂<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">//总工厂<br>public interface IRentingFactory &#123;<br>    void rent();<br>&#125;<br>//张三实现工厂<br>public class RentingFactory_Z implements IRentingFactory &#123;<br>    public void rent() &#123;<br>        System.out.println(&quot;张三租赁公司分公司为您服务...&quot;);<br>    &#125;<br>&#125;<br>//李四实现工厂<br>public class RentingFactory_L implements IRentingFactory &#123;<br>    @Override<br>    public void rent() &#123;<br>        System.out.println(&quot;李四租赁公司分公司为您服务...&quot;);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li>\n<li>Tom找张三分公司代理<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">public class Tenant_Tom_To_Z &#123;<br>    public static void main(String[] args) &#123;<br>        System.out.println(&quot;Tom想要租房....找张三分公司代理...&quot;);<br>        IRentingFactory renting=new RentingFactory_Z();<br>        renting.rent();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li>\n<li>Tom找李四分公司代理<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">public class Tenant_Tom_To_L &#123;<br>    public static void main(String[] args) &#123;<br>        System.out.println(&quot;Tom想要租房....找李四分公司代理...&quot;);<br>        IRentingFactory renting=new RentingFactory_L();<br>        renting.rent();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"4-结果演示-2\"><a href=\"#4-结果演示-2\" class=\"headerlink\" title=\"4. 结果演示\"></a>4. 结果演示</h3><ul>\n<li><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/1627865477291.png\" alt=\"enter description here\"></li>\n<li><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/1627865453058.png\" alt=\"enter description here\"></li>\n</ul>\n<h2 id=\"四、融合三种设计模式（选读）\"><a href=\"#四、融合三种设计模式（选读）\" class=\"headerlink\" title=\"四、融合三种设计模式（选读）\"></a>四、融合三种设计模式（选读）</h2><h3 id=\"1-演示思路\"><a href=\"#1-演示思路\" class=\"headerlink\" title=\"1. 演示思路\"></a>1. 演示思路</h3><p>张三Z和李四L两人的公司越开越大，分别占领了该地区的南北两大地区。从此单人垄断变成双人联合垄断，各自打印各自名片，只对自己所属地区进行发放。与此同时，上级公司任然挂名，他们也仍像以前一样收取代理费后，售卖个人信息。</p>\n<h3 id=\"2-代码实现\"><a href=\"#2-代码实现\" class=\"headerlink\" title=\"2. 代码实现\"></a>2. 代码实现</h3><ul>\n<li>租赁行为的总工厂以及具体实现的分工厂<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">//总工厂<br>public interface IRentingFactory &#123;<br>    void rent();<br>&#125;<br>//张三实现工厂<br>public class RentingFactory_Z implements IRentingFactory &#123;<br>    public void rent() &#123;<br>        System.out.println(&quot;张三租赁公司分公司为您服务...&quot;);<br>    &#125;<br>&#125;<br>//李四实现工厂<br>public class RentingFactory_L implements IRentingFactory &#123;<br>    @Override<br>    public void rent() &#123;<br>        System.out.println(&quot;李四租赁公司分公司为您服务...&quot;);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li>\n<li>张三的名片<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">public class Agent_Z &#123;<br>    //无参构造<br>    private Agent_Z()&#123;&#125;;<br>    //实例化<br>    private static Agent_Z agent=new Agent_Z();<br>    //提供已经实例化的对象方便调用（张三印制自己的名片，准备发放）<br>    public static Agent_Z getInstance()&#123;<br>        System.out.println(&quot;单例模式，本地区只有我张三一个代理！&quot;);<br>        return agent;<br>    &#125;<br><br>    private String name;<br>    private Integer fee;<br><br>    static &#123;<br>        agent.setName(&quot;张三&quot;);<br>        agent.setFee(500);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li>\n<li>李四的名片<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">public class Agent_L &#123;<br>    //无参构造<br>    private Agent_L()&#123;&#125;;<br>    //实例化<br>    private static Agent_L agent=new Agent_L();<br>    //提供已经实例化的对象方便调用（李四印制自己的名片，准备发放）<br>    public static Agent_L getInstance()&#123;<br>        System.out.println(&quot;单例模式，本地区只有我李四一个代理！&quot;);<br>        return agent;<br>    &#125;<br><br>    private String name;<br>    private Integer fee;<br><br>    static &#123;<br>        agent.setName(&quot;李四&quot;);<br>        agent.setFee(500);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li>\n<li>JDK动态代理加强方法<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">public class JDKProxy &#123;<br>    public static Object getJDKProxy(Object o)&#123;<br>        return Proxy.newProxyInstance(o.getClass().getClassLoader(), o.getClass().getInterfaces(), new InvocationHandler() &#123;<br>            @Override<br>            public Object invoke(Object proxy, Method method, Object[] args) throws Throwable &#123;<br>                Object result;<br>                System.out.println(&quot;先收取代理费用500元&quot;);<br>                result = method.invoke(o, args);<br>                System.out.println(&quot;最后卖出客户信息5元&quot;);<br>                return result;<br>            &#125;<br>        &#125;);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li>\n<li>Tom分别找两个代理公司租房<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">public class Tenant_Tom &#123;<br>    public static void main(String[] args) &#123;<br>        System.out.println(&quot;Tom在南方地区想要租房...&quot;);<br>        Agent_Z agent_z = Agent_Z.getInstance();<br>        System.out.println(&quot;获取名片：&quot;+agent_z);<br>        IRentingFactory rentingFactory_Z=(IRentingFactory)JDKProxy.getJDKProxy(new RentingFactory_Z());<br>        rentingFactory_Z.rent();<br><br>        System.out.println(&quot;---------------------&quot;);<br>        System.out.println(&quot;Tom在北方地区想要租房...&quot;);<br>        Agent_L agent_l = Agent_L.getInstance();<br>        System.out.println(&quot;获取名片：&quot;+agent_l);<br>        IRentingFactory rentingFactory_L=(IRentingFactory)JDKProxy.getJDKProxy(new RentingFactory_L());<br>        rentingFactory_L.rent();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"4-结果演示-3\"><a href=\"#4-结果演示-3\" class=\"headerlink\" title=\"4. 结果演示\"></a>4. 结果演示</h3><ul>\n<li><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/1627867501321.png\" alt=\"enter description here\"></li>\n</ul>\n"},{"_content":"# miui12.5 最简单快捷root刷面具+线刷降级+卡米解决教程（测试机小米10至尊版）\n---\n[toc]\n\n前言：本人在2019年发布过原创[《框架玩机》小米手机玩机教程 ](https://blog.csdn.net/qq_39231769/article/details/96366590?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522162035309516780271581145%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&request_id=162035309516780271581145&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v2~rank_v29-1-96366590.nonecase&utm_term=%E5%B0%8F%E7%B1%B3)\n时隔两年，突发奇想像看看2021年的搞机是否有新花样。\n此次搞机经历一次降级，两次卡米。（因为第三方rec刷机玩的不熟，miui12.5的第三方rec并未成熟）\n最后找到最简单最直接的root方式：感谢b站 up：\"可爱的小潇潇\"\n参考[无twrp和root刷面具教程 修补boot的方法适用于任何版本任何手机](https://www.bilibili.com/video/BV1EX4y1M7aM)\n\n---\n+ 本教程正常情况无需双清或重装系统，可以进行OTA升级。升级后重复教程即可重新root。\n但还是要记得备份数据后进行以下操作。\n<font color=red size=5>注：刷机有风险，玩机需谨慎。 操作不当所造成后果与菜鸟小回无关！！！  </font>\n\n---\n## 一、本教程适合开发或稳定版miui系统。需解BL锁，教程参考[小米官网](https://www.miui.com/unlock/index.html)；[相关文件](https://pan.baidu.com/s/1lc8sDTkFb6DFxyqWQD1UKA)分享，密码：6666；这里展示我的机型信息及成功截图\n\n![image-20220721153844232](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721153844232.png)\n![image-20220721153857445](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721153857445.png)\n![image-20220721153909873](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721153909873.png)\n\n## 二、使用magisk制作修补文件。\n\n1. 点击下载最新完整包（需要和你当前手机版本一致，不一致请先升级）。\n2. 更新页面取消下载。去浏览器继续下载剩余部分。（防止自动解密）\n\n![image-20220721154014584](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721154014584.png)\n\n3. 解压下载好的安装包找到`boot.img`文件，位置如图\n![image-20220721154003081](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721154003081.png)\n4. 下载并安装magisk，酷安下载或者从我的百度网盘取。->>\n + 安装\n![image-20220721154027005](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721154027005.png)\n + 选择一个修补文件（无root时没有直接安装选项，此处演示手机已root）\n![image-20220721154039420](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721154039420.png)\n + 选择`boot.img`\n ![image-20220721154050158](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721154050158.png)\n + 在download目录下生成文件，修改后缀为`magisk.img`\n    ![image-20220721154112647](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721154112647.png) \n + 上传至电脑\n\n## 三、使用`adb命令包`安装magisk\n\n1. 解压文件`adb_Magisk.zip`，并将magisk.img放至此目录。\n ![image-20220721154125609](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721154125609.png)\n\n2. 手机开发者模式，USB调试连接电脑（连接不上可能是没有安卓驱动可能要下载）。关机并按住`音量下键`和`开机键`。进入`FastBoot`模式。\n\n3. 双击`双击安装Magisk.bat`。等待ok后自动重启即可。\n\n+ 至此，ROOT完成，可以看到magisk中有了直接安装选项。\n![image-20220721154136802](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721154136802.png)\n\n## 四、如果需要安装magisk的相关模块，只需点击直接安装然后重启手机即可。\n\n---\n## 五、后续，如果刷机卡米、死机，亦或你想降级miui。继续下方教程：\n\n1. 恢复教程访问小米官网线刷：[官网地址](http://www.miui.com/shuaji-393.html)\n2. 可能遇到错误 `update sparse crc list failed`\n解决：\n+ 查看右下角你刷机要调用的bat文件。\n ![image-20220721154209786](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721154209786.png)\n+ 从解压的rom中找到该文件\n ![image-20220721154147360](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721154147360.png)\n+  打开找到下面两句并删除\n ```javascript?linenums\nfastboot %* flash crclist %~dp0images\\crclist.txt || @echo \"Flash crclist error\" && exit /B 1\n\nfastboot %* flash sparsecrclist %~dp0images\\sparsecrclist.txt || @echo \"Flash sparsecrclist error\" && exit /B 1\n ```\n![image-20220721154157654](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721154157654.png)\n+ 重新刷机即可","source":"_posts/BookMark/翻墙刷机/miui12.5 root刷面具+线刷降级+卡米教程（测试机小米10至尊版）.md","raw":"# miui12.5 最简单快捷root刷面具+线刷降级+卡米解决教程（测试机小米10至尊版）\n---\n[toc]\n\n前言：本人在2019年发布过原创[《框架玩机》小米手机玩机教程 ](https://blog.csdn.net/qq_39231769/article/details/96366590?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522162035309516780271581145%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&request_id=162035309516780271581145&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v2~rank_v29-1-96366590.nonecase&utm_term=%E5%B0%8F%E7%B1%B3)\n时隔两年，突发奇想像看看2021年的搞机是否有新花样。\n此次搞机经历一次降级，两次卡米。（因为第三方rec刷机玩的不熟，miui12.5的第三方rec并未成熟）\n最后找到最简单最直接的root方式：感谢b站 up：\"可爱的小潇潇\"\n参考[无twrp和root刷面具教程 修补boot的方法适用于任何版本任何手机](https://www.bilibili.com/video/BV1EX4y1M7aM)\n\n---\n+ 本教程正常情况无需双清或重装系统，可以进行OTA升级。升级后重复教程即可重新root。\n但还是要记得备份数据后进行以下操作。\n<font color=red size=5>注：刷机有风险，玩机需谨慎。 操作不当所造成后果与菜鸟小回无关！！！  </font>\n\n---\n## 一、本教程适合开发或稳定版miui系统。需解BL锁，教程参考[小米官网](https://www.miui.com/unlock/index.html)；[相关文件](https://pan.baidu.com/s/1lc8sDTkFb6DFxyqWQD1UKA)分享，密码：6666；这里展示我的机型信息及成功截图\n\n![image-20220721153844232](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721153844232.png)\n![image-20220721153857445](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721153857445.png)\n![image-20220721153909873](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721153909873.png)\n\n## 二、使用magisk制作修补文件。\n\n1. 点击下载最新完整包（需要和你当前手机版本一致，不一致请先升级）。\n2. 更新页面取消下载。去浏览器继续下载剩余部分。（防止自动解密）\n\n![image-20220721154014584](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721154014584.png)\n\n3. 解压下载好的安装包找到`boot.img`文件，位置如图\n![image-20220721154003081](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721154003081.png)\n4. 下载并安装magisk，酷安下载或者从我的百度网盘取。->>\n + 安装\n![image-20220721154027005](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721154027005.png)\n + 选择一个修补文件（无root时没有直接安装选项，此处演示手机已root）\n![image-20220721154039420](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721154039420.png)\n + 选择`boot.img`\n ![image-20220721154050158](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721154050158.png)\n + 在download目录下生成文件，修改后缀为`magisk.img`\n    ![image-20220721154112647](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721154112647.png) \n + 上传至电脑\n\n## 三、使用`adb命令包`安装magisk\n\n1. 解压文件`adb_Magisk.zip`，并将magisk.img放至此目录。\n ![image-20220721154125609](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721154125609.png)\n\n2. 手机开发者模式，USB调试连接电脑（连接不上可能是没有安卓驱动可能要下载）。关机并按住`音量下键`和`开机键`。进入`FastBoot`模式。\n\n3. 双击`双击安装Magisk.bat`。等待ok后自动重启即可。\n\n+ 至此，ROOT完成，可以看到magisk中有了直接安装选项。\n![image-20220721154136802](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721154136802.png)\n\n## 四、如果需要安装magisk的相关模块，只需点击直接安装然后重启手机即可。\n\n---\n## 五、后续，如果刷机卡米、死机，亦或你想降级miui。继续下方教程：\n\n1. 恢复教程访问小米官网线刷：[官网地址](http://www.miui.com/shuaji-393.html)\n2. 可能遇到错误 `update sparse crc list failed`\n解决：\n+ 查看右下角你刷机要调用的bat文件。\n ![image-20220721154209786](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721154209786.png)\n+ 从解压的rom中找到该文件\n ![image-20220721154147360](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721154147360.png)\n+  打开找到下面两句并删除\n ```javascript?linenums\nfastboot %* flash crclist %~dp0images\\crclist.txt || @echo \"Flash crclist error\" && exit /B 1\n\nfastboot %* flash sparsecrclist %~dp0images\\sparsecrclist.txt || @echo \"Flash sparsecrclist error\" && exit /B 1\n ```\n![image-20220721154157654](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721154157654.png)\n+ 重新刷机即可","slug":"BookMark/翻墙刷机/miui12.5 root刷面具+线刷降级+卡米教程（测试机小米10至尊版）","published":1,"date":"2022-07-21T07:44:14.000Z","updated":"2022-09-01T10:02:40.500Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cl7ptszop002baba5a5yh6d5p","content":"<h1><span id=\"miui125-最简单快捷root刷面具线刷降级卡米解决教程测试机小米10至尊版\">miui12.5 最简单快捷root刷面具+线刷降级+卡米解决教程（测试机小米10至尊版）</span></h1><hr>\n<p>[toc]</p>\n<p>前言：本人在2019年发布过原创<a href=\"https://blog.csdn.net/qq_39231769/article/details/96366590?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522162035309516780271581145%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&request_id=162035309516780271581145&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v2~rank_v29-1-96366590.nonecase&utm_term=%E5%B0%8F%E7%B1%B3\">《框架玩机》小米手机玩机教程 </a><br>时隔两年，突发奇想像看看2021年的搞机是否有新花样。<br>此次搞机经历一次降级，两次卡米。（因为第三方rec刷机玩的不熟，miui12.5的第三方rec并未成熟）<br>最后找到最简单最直接的root方式：感谢b站 up：”可爱的小潇潇”<br>参考<a href=\"https://www.bilibili.com/video/BV1EX4y1M7aM\">无twrp和root刷面具教程 修补boot的方法适用于任何版本任何手机</a></p>\n<hr>\n<ul>\n<li>本教程正常情况无需双清或重装系统，可以进行OTA升级。升级后重复教程即可重新root。<br>但还是要记得备份数据后进行以下操作。<br><font color=\"red\" size=\"5\">注：刷机有风险，玩机需谨慎。 操作不当所造成后果与菜鸟小回无关！！！  </font></li>\n</ul>\n<hr>\n<h2><span id=\"一-本教程适合开发或稳定版miui系统-需解bl锁教程参考小米官网相关文件分享密码6666这里展示我的机型信息及成功截图\">一、本教程适合开发或稳定版miui系统。需解BL锁，教程参考；分享，密码：6666；这里展示我的机型信息及成功截图</span></h2><p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721153844232.png\" alt=\"image-20220721153844232\"><br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721153857445.png\" alt=\"image-20220721153857445\"><br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721153909873.png\" alt=\"image-20220721153909873\"></p>\n<h2><span id=\"二-使用magisk制作修补文件\">二、使用magisk制作修补文件。</span></h2><ol>\n<li>点击下载最新完整包（需要和你当前手机版本一致，不一致请先升级）。</li>\n<li>更新页面取消下载。去浏览器继续下载剩余部分。（防止自动解密）</li>\n</ol>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721154014584.png\" alt=\"image-20220721154014584\"></p>\n<ol start=\"3\">\n<li>解压下载好的安装包找到<code>boot.img</code>文件，位置如图<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721154003081.png\" alt=\"image-20220721154003081\"></li>\n<li>下载并安装magisk，酷安下载或者从我的百度网盘取。-&gt;&gt;</li>\n</ol>\n<ul>\n<li>安装<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721154027005.png\" alt=\"image-20220721154027005\"></li>\n<li>选择一个修补文件（无root时没有直接安装选项，此处演示手机已root）<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721154039420.png\" alt=\"image-20220721154039420\"></li>\n<li>选择<code>boot.img</code><br> <img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721154050158.png\" alt=\"image-20220721154050158\"></li>\n<li>在download目录下生成文件，修改后缀为<code>magisk.img</code><br> <img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721154112647.png\" alt=\"image-20220721154112647\"> </li>\n<li>上传至电脑</li>\n</ul>\n<h2><span id=\"三-使用adb命令包安装magisk\">三、使用<code>adb命令包</code>安装magisk</span></h2><ol>\n<li><p>解压文件<code>adb_Magisk.zip</code>，并将magisk.img放至此目录。<br> <img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721154125609.png\" alt=\"image-20220721154125609\"></p>\n</li>\n<li><p>手机开发者模式，USB调试连接电脑（连接不上可能是没有安卓驱动可能要下载）。关机并按住<code>音量下键</code>和<code>开机键</code>。进入<code>FastBoot</code>模式。</p>\n</li>\n<li><p>双击<code>双击安装Magisk.bat</code>。等待ok后自动重启即可。</p>\n</li>\n</ol>\n<ul>\n<li>至此，ROOT完成，可以看到magisk中有了直接安装选项。<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721154136802.png\" alt=\"image-20220721154136802\"></li>\n</ul>\n<h2><span id=\"四-如果需要安装magisk的相关模块只需点击直接安装然后重启手机即可\">四、如果需要安装magisk的相关模块，只需点击直接安装然后重启手机即可。</span></h2><hr>\n<h2><span id=\"五-后续如果刷机卡米-死机亦或你想降级miui-继续下方教程\">五、后续，如果刷机卡米、死机，亦或你想降级miui。继续下方教程：</span></h2><ol>\n<li>恢复教程访问小米官网线刷：<a href=\"http://www.miui.com/shuaji-393.html\">官网地址</a></li>\n<li>可能遇到错误 <code>update sparse crc list failed</code><br>解决：</li>\n</ol>\n<ul>\n<li>查看右下角你刷机要调用的bat文件。<br> <img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721154209786.png\" alt=\"image-20220721154209786\"></li>\n<li>从解压的rom中找到该文件<br> <img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721154147360.png\" alt=\"image-20220721154147360\"></li>\n<li>打开找到下面两句并删除 <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">fastboot %* flash crclist %~dp0images\\crclist.txt || @echo &quot;Flash crclist error&quot; &amp;&amp; exit /B 1<br><br>fastboot %* flash sparsecrclist %~dp0images\\sparsecrclist.txt || @echo &quot;Flash sparsecrclist error&quot; &amp;&amp; exit /B 1<br></code></pre></td></tr></table></figure>\n<img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721154157654.png\" alt=\"image-20220721154157654\"></li>\n<li>重新刷机即可</li>\n</ul>\n","site":{"data":{}},"wordcount":1178,"excerpt":"","more":"<h1 id=\"miui12-5-最简单快捷root刷面具-线刷降级-卡米解决教程（测试机小米10至尊版）\"><a href=\"#miui12-5-最简单快捷root刷面具-线刷降级-卡米解决教程（测试机小米10至尊版）\" class=\"headerlink\" title=\"miui12.5 最简单快捷root刷面具+线刷降级+卡米解决教程（测试机小米10至尊版）\"></a>miui12.5 最简单快捷root刷面具+线刷降级+卡米解决教程（测试机小米10至尊版）</h1><hr>\n<p>[toc]</p>\n<p>前言：本人在2019年发布过原创<a href=\"https://blog.csdn.net/qq_39231769/article/details/96366590?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522162035309516780271581145%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&request_id=162035309516780271581145&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v2~rank_v29-1-96366590.nonecase&utm_term=%E5%B0%8F%E7%B1%B3\">《框架玩机》小米手机玩机教程 </a><br>时隔两年，突发奇想像看看2021年的搞机是否有新花样。<br>此次搞机经历一次降级，两次卡米。（因为第三方rec刷机玩的不熟，miui12.5的第三方rec并未成熟）<br>最后找到最简单最直接的root方式：感谢b站 up：”可爱的小潇潇”<br>参考<a href=\"https://www.bilibili.com/video/BV1EX4y1M7aM\">无twrp和root刷面具教程 修补boot的方法适用于任何版本任何手机</a></p>\n<hr>\n<ul>\n<li>本教程正常情况无需双清或重装系统，可以进行OTA升级。升级后重复教程即可重新root。<br>但还是要记得备份数据后进行以下操作。<br><font color=red size=5>注：刷机有风险，玩机需谨慎。 操作不当所造成后果与菜鸟小回无关！！！  </font></li>\n</ul>\n<hr>\n<h2 id=\"一、本教程适合开发或稳定版miui系统。需解BL锁，教程参考小米官网；相关文件分享，密码：6666；这里展示我的机型信息及成功截图\"><a href=\"#一、本教程适合开发或稳定版miui系统。需解BL锁，教程参考小米官网；相关文件分享，密码：6666；这里展示我的机型信息及成功截图\" class=\"headerlink\" title=\"一、本教程适合开发或稳定版miui系统。需解BL锁，教程参考小米官网；相关文件分享，密码：6666；这里展示我的机型信息及成功截图\"></a>一、本教程适合开发或稳定版miui系统。需解BL锁，教程参考<a href=\"https://www.miui.com/unlock/index.html\">小米官网</a>；<a href=\"https://pan.baidu.com/s/1lc8sDTkFb6DFxyqWQD1UKA\">相关文件</a>分享，密码：6666；这里展示我的机型信息及成功截图</h2><p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721153844232.png\" alt=\"image-20220721153844232\"><br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721153857445.png\" alt=\"image-20220721153857445\"><br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721153909873.png\" alt=\"image-20220721153909873\"></p>\n<h2 id=\"二、使用magisk制作修补文件。\"><a href=\"#二、使用magisk制作修补文件。\" class=\"headerlink\" title=\"二、使用magisk制作修补文件。\"></a>二、使用magisk制作修补文件。</h2><ol>\n<li>点击下载最新完整包（需要和你当前手机版本一致，不一致请先升级）。</li>\n<li>更新页面取消下载。去浏览器继续下载剩余部分。（防止自动解密）</li>\n</ol>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721154014584.png\" alt=\"image-20220721154014584\"></p>\n<ol start=\"3\">\n<li>解压下载好的安装包找到<code>boot.img</code>文件，位置如图<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721154003081.png\" alt=\"image-20220721154003081\"></li>\n<li>下载并安装magisk，酷安下载或者从我的百度网盘取。-&gt;&gt;</li>\n</ol>\n<ul>\n<li>安装<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721154027005.png\" alt=\"image-20220721154027005\"></li>\n<li>选择一个修补文件（无root时没有直接安装选项，此处演示手机已root）<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721154039420.png\" alt=\"image-20220721154039420\"></li>\n<li>选择<code>boot.img</code><br> <img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721154050158.png\" alt=\"image-20220721154050158\"></li>\n<li>在download目录下生成文件，修改后缀为<code>magisk.img</code><br> <img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721154112647.png\" alt=\"image-20220721154112647\"> </li>\n<li>上传至电脑</li>\n</ul>\n<h2 id=\"三、使用adb命令包安装magisk\"><a href=\"#三、使用adb命令包安装magisk\" class=\"headerlink\" title=\"三、使用adb命令包安装magisk\"></a>三、使用<code>adb命令包</code>安装magisk</h2><ol>\n<li><p>解压文件<code>adb_Magisk.zip</code>，并将magisk.img放至此目录。<br> <img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721154125609.png\" alt=\"image-20220721154125609\"></p>\n</li>\n<li><p>手机开发者模式，USB调试连接电脑（连接不上可能是没有安卓驱动可能要下载）。关机并按住<code>音量下键</code>和<code>开机键</code>。进入<code>FastBoot</code>模式。</p>\n</li>\n<li><p>双击<code>双击安装Magisk.bat</code>。等待ok后自动重启即可。</p>\n</li>\n</ol>\n<ul>\n<li>至此，ROOT完成，可以看到magisk中有了直接安装选项。<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721154136802.png\" alt=\"image-20220721154136802\"></li>\n</ul>\n<h2 id=\"四、如果需要安装magisk的相关模块，只需点击直接安装然后重启手机即可。\"><a href=\"#四、如果需要安装magisk的相关模块，只需点击直接安装然后重启手机即可。\" class=\"headerlink\" title=\"四、如果需要安装magisk的相关模块，只需点击直接安装然后重启手机即可。\"></a>四、如果需要安装magisk的相关模块，只需点击直接安装然后重启手机即可。</h2><hr>\n<h2 id=\"五、后续，如果刷机卡米、死机，亦或你想降级miui。继续下方教程：\"><a href=\"#五、后续，如果刷机卡米、死机，亦或你想降级miui。继续下方教程：\" class=\"headerlink\" title=\"五、后续，如果刷机卡米、死机，亦或你想降级miui。继续下方教程：\"></a>五、后续，如果刷机卡米、死机，亦或你想降级miui。继续下方教程：</h2><ol>\n<li>恢复教程访问小米官网线刷：<a href=\"http://www.miui.com/shuaji-393.html\">官网地址</a></li>\n<li>可能遇到错误 <code>update sparse crc list failed</code><br>解决：</li>\n</ol>\n<ul>\n<li>查看右下角你刷机要调用的bat文件。<br> <img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721154209786.png\" alt=\"image-20220721154209786\"></li>\n<li>从解压的rom中找到该文件<br> <img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721154147360.png\" alt=\"image-20220721154147360\"></li>\n<li>打开找到下面两句并删除 <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">fastboot %* flash crclist %~dp0images\\crclist.txt || @echo &quot;Flash crclist error&quot; &amp;&amp; exit /B 1<br><br>fastboot %* flash sparsecrclist %~dp0images\\sparsecrclist.txt || @echo &quot;Flash sparsecrclist error&quot; &amp;&amp; exit /B 1<br></code></pre></td></tr></table></figure>\n<img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721154157654.png\" alt=\"image-20220721154157654\"></li>\n<li>重新刷机即可</li>\n</ul>\n"},{"_content":"# 手写XML或自定义注解IOC,AOP实现类spring功能\n---\n前言：spring手写之路上，为了充分了解IOC和AOP特性以及实现过程。手写实现spring的ioc和aop功能。\n+ 两种形式：\n\t+ 1.基于xml：使用dom4j技术，解析xml文件。获取全类名，反射获取类并实例化。同时以无参构造形式注入依赖。\n\t+ 2.基于注解：解析到注解类后，使用reflections.getTypesAnnotatedWith方法获取类集合，然后实例化并注入依赖。\n\n---\n\n+ IOC：控制反转；将bean的实例化交给容器。\n+ AOP：面向切面；补充oop面向对象，解决横向切入问题。\n+ DI：依赖注入：与IOC实现功能类似；不同在于站在容器的角度，如果A对象实例化过程中因为声明了一个B类型的属性，那么就需要容器把B对象注入给A\n---\n## 一、下载源码\n源码地址：[ lagou-transfer ](https://gitee.com/idse666666/my_spring/tree/master/lagou-transfer)\n## 二、beans.xml编写xml\n![enter description here](https://img-1256282866.cos.ap-beijing.myqcloud.com/1628254605637.png)\n## 三、BeanFactory解析xml\n+ 任务一：扫描包，通过反射技术实例化对象并且存储待用（map集合）\n+ 任务二：对外提供获取实例对象的接口（根据id获取）\n+ 解析bean并实例化\n![enter description here](https://img-1256282866.cos.ap-beijing.myqcloud.com/1628254732278.png)\n+ “set方法”.invoke(“父级对象”,“实例化后对象”）使用set方法注入实例化后的对象\n![enter description here](https://img-1256282866.cos.ap-beijing.myqcloud.com/1628254964125.png)\n\n## 四、下载源码\n源码地址：[lagou-transfer-work](https://gitee.com/idse666666/lagou-work/tree/master/%E9%98%B6%E6%AE%B5%E4%B8%80%E6%A8%A1%E5%9D%97%E4%BA%8C%E4%BD%9C%E4%B8%9A/code/)\n## 五、注解的定义\n+ @Target：\n@Target说明了Annotation所修饰的对象范围：Annotation可被用于 packages、types（类、接口、枚举、Annotation类型）、类型成员（方法、构造方法、成员变量、枚举值）、方法参数和本地变量（如循环变量、catch参数）。在Annotation类型的声明中使用了target可更加明晰其修饰的目标。\n\n作用：用于描述注解的使用范围（即：被描述的注解可以用在什么地方）\n\n取值(ElementType)有：\n1. CONSTRUCTOR:用于描述构造器\n2. FIELD:用于描述域\n3. LOCAL_VARIABLE:用于描述局部变量\n4. METHOD:用于描述方法\n5. PACKAGE:用于描述包\n6. PARAMETER:用于描述参数\n7. TYPE:用于描述类、接口(包括注解类型) 或enum声明\n\n+ @Retention：\n\n@Retention定义了该Annotation被保留的时间长短：某些Annotation仅出现在源代码中，而被编译器丢弃；而另一些却被编译在class文件中；编译在class文件中的Annotation可能会被虚拟机忽略，而另一些在class被装载时将被读取（请注意并不影响class的执行，因为Annotation与class在使用上是被分离的）。使用这个meta-Annotation可以对 Annotation的“生命周期”限制。\n　　\n作用：表示需要在什么级别保存该注释信息，用于描述注解的生命周期（即：被描述的注解在什么范围内有效）\n\n取值（RetentionPoicy）有：\n1. SOURCE:在源文件中有效（即源文件保留）\n2. CLASS:在class文件中有效（即class保留）\n3. RUNTIME:在运行时有效（即运行时保留）\n\n说明：Column注解的的RetentionPolicy的属性值是RUTIME,这样注解处理器可以通过反射，获取到该注解的属性值，从而去做一些运行时的逻辑处理\n\n源码：myAnno\n@Service\n```javascript?linenums\n//用在描述类\n@Target(ElementType.TYPE)\n//运行时有效\n@Retention(RetentionPolicy.RUNTIME)\npublic @interface Service {\n    String value() default \"\";\n}\n```\n@Autowired\n```javascript?linenums\n//用在字段上\n@Target(ElementType.FIELD)\n//运行时有效\n@Retention(RetentionPolicy.RUNTIME)\npublic @interface Autowired {\n    boolean required() default true;\n}\n```\n@Transactional\n```javascript?linenums\n//用在描述类\n@Target(ElementType.TYPE)\n//运行时有效\n@Retention(RetentionPolicy.RUNTIME)\npublic @interface Transactional {\n    String value() default \"\";\n}\n```\n## 六、工厂类AnnoBeanFactory（扫描注解，利用反射技术和动态代理技术实现类实例化和事务控制）\n![enter description here](https://img-1256282866.cos.ap-beijing.myqcloud.com/1628252560478.png)\n+ 任务一：扫描包，通过反射技术实例化对象并且存储待用（map集合）\n+ 任务二：对外提供获取实例对象的接口（根据id获取）\n+ 解析@Service注解：只需要获取其类实例化，然后放入map集合中\n![enter description here](https://img-1256282866.cos.ap-beijing.myqcloud.com/1628252306337.png)\n+ 解析@Autowired注解：注解用在字段上，用于注入实例化后的值。\n![enter description here](https://img-1256282866.cos.ap-beijing.myqcloud.com/1628253372265.png)\n+ 解析@Transactional注解\n ![enter description here](https://img-1256282866.cos.ap-beijing.myqcloud.com/1628253843196.png)\n\n ## 七、AOP的实现（ProxyFactory）\n 利用JDK动态代理或者CGLIB动态代理\n 关于动态代理的知识可以参考我的另一篇博文：[通过房屋租赁流程理解设计模式](https://blog.csdn.net/qq_39231769/article/details/119317869?spm=1001.2014.3001.5501)\n ```javascript?linenums\n    public Object getJdkProxy(Object o){\n        return Proxy.newProxyInstance(o.getClass().getClassLoader(), o.getClass().getInterfaces(), new InvocationHandler() {\n            @Override\n            public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n                Object result=null;\n                try {\n                    //开启事务（关闭事务自动提交）\n                    transactionManager.beginTransaction();\n                    result = method.invoke(o, args);\n                    //提交事务\n                    transactionManager.commit();\n                }catch (Exception e){\n                    e.printStackTrace();\n                    //回滚\n                    transactionManager.rollback();\n                    //抛出异常以便于上层servlet获取\n                    throw e;\n                }\n                return result;\n            }\n        });\n    }\n    /**\n     * 使用cglib动态代理生成代理对象\n     * @param obj 委托对象\n     * @return\n     */\n    public Object getCglibProxy(Object obj) {\n        return  Enhancer.create(obj.getClass(), new MethodInterceptor() {\n            @Override\n            public Object intercept(Object o, Method method, Object[] objects, MethodProxy methodProxy) throws Throwable {\n                Object result = null;\n                try{\n                    // 开启事务(关闭事务的自动提交)\n                    transactionManager.beginTransaction();\n\n                    result = method.invoke(obj,objects);\n\n                    // 提交事务\n\n                    transactionManager.commit();\n                }catch (Exception e) {\n                    e.printStackTrace();\n                    // 回滚事务\n                    transactionManager.rollback();\n\n                    // 抛出异常便于上层servlet捕获\n                    throw e;\n\n                }\n                return result;\n            }\n        });\n    }\n}\n ```","source":"_posts/BookMark/拉勾笔记/记一次手写IOC,AOP实现类spring 功能.md","raw":"# 手写XML或自定义注解IOC,AOP实现类spring功能\n---\n前言：spring手写之路上，为了充分了解IOC和AOP特性以及实现过程。手写实现spring的ioc和aop功能。\n+ 两种形式：\n\t+ 1.基于xml：使用dom4j技术，解析xml文件。获取全类名，反射获取类并实例化。同时以无参构造形式注入依赖。\n\t+ 2.基于注解：解析到注解类后，使用reflections.getTypesAnnotatedWith方法获取类集合，然后实例化并注入依赖。\n\n---\n\n+ IOC：控制反转；将bean的实例化交给容器。\n+ AOP：面向切面；补充oop面向对象，解决横向切入问题。\n+ DI：依赖注入：与IOC实现功能类似；不同在于站在容器的角度，如果A对象实例化过程中因为声明了一个B类型的属性，那么就需要容器把B对象注入给A\n---\n## 一、下载源码\n源码地址：[ lagou-transfer ](https://gitee.com/idse666666/my_spring/tree/master/lagou-transfer)\n## 二、beans.xml编写xml\n![enter description here](https://img-1256282866.cos.ap-beijing.myqcloud.com/1628254605637.png)\n## 三、BeanFactory解析xml\n+ 任务一：扫描包，通过反射技术实例化对象并且存储待用（map集合）\n+ 任务二：对外提供获取实例对象的接口（根据id获取）\n+ 解析bean并实例化\n![enter description here](https://img-1256282866.cos.ap-beijing.myqcloud.com/1628254732278.png)\n+ “set方法”.invoke(“父级对象”,“实例化后对象”）使用set方法注入实例化后的对象\n![enter description here](https://img-1256282866.cos.ap-beijing.myqcloud.com/1628254964125.png)\n\n## 四、下载源码\n源码地址：[lagou-transfer-work](https://gitee.com/idse666666/lagou-work/tree/master/%E9%98%B6%E6%AE%B5%E4%B8%80%E6%A8%A1%E5%9D%97%E4%BA%8C%E4%BD%9C%E4%B8%9A/code/)\n## 五、注解的定义\n+ @Target：\n@Target说明了Annotation所修饰的对象范围：Annotation可被用于 packages、types（类、接口、枚举、Annotation类型）、类型成员（方法、构造方法、成员变量、枚举值）、方法参数和本地变量（如循环变量、catch参数）。在Annotation类型的声明中使用了target可更加明晰其修饰的目标。\n\n作用：用于描述注解的使用范围（即：被描述的注解可以用在什么地方）\n\n取值(ElementType)有：\n1. CONSTRUCTOR:用于描述构造器\n2. FIELD:用于描述域\n3. LOCAL_VARIABLE:用于描述局部变量\n4. METHOD:用于描述方法\n5. PACKAGE:用于描述包\n6. PARAMETER:用于描述参数\n7. TYPE:用于描述类、接口(包括注解类型) 或enum声明\n\n+ @Retention：\n\n@Retention定义了该Annotation被保留的时间长短：某些Annotation仅出现在源代码中，而被编译器丢弃；而另一些却被编译在class文件中；编译在class文件中的Annotation可能会被虚拟机忽略，而另一些在class被装载时将被读取（请注意并不影响class的执行，因为Annotation与class在使用上是被分离的）。使用这个meta-Annotation可以对 Annotation的“生命周期”限制。\n　　\n作用：表示需要在什么级别保存该注释信息，用于描述注解的生命周期（即：被描述的注解在什么范围内有效）\n\n取值（RetentionPoicy）有：\n1. SOURCE:在源文件中有效（即源文件保留）\n2. CLASS:在class文件中有效（即class保留）\n3. RUNTIME:在运行时有效（即运行时保留）\n\n说明：Column注解的的RetentionPolicy的属性值是RUTIME,这样注解处理器可以通过反射，获取到该注解的属性值，从而去做一些运行时的逻辑处理\n\n源码：myAnno\n@Service\n```javascript?linenums\n//用在描述类\n@Target(ElementType.TYPE)\n//运行时有效\n@Retention(RetentionPolicy.RUNTIME)\npublic @interface Service {\n    String value() default \"\";\n}\n```\n@Autowired\n```javascript?linenums\n//用在字段上\n@Target(ElementType.FIELD)\n//运行时有效\n@Retention(RetentionPolicy.RUNTIME)\npublic @interface Autowired {\n    boolean required() default true;\n}\n```\n@Transactional\n```javascript?linenums\n//用在描述类\n@Target(ElementType.TYPE)\n//运行时有效\n@Retention(RetentionPolicy.RUNTIME)\npublic @interface Transactional {\n    String value() default \"\";\n}\n```\n## 六、工厂类AnnoBeanFactory（扫描注解，利用反射技术和动态代理技术实现类实例化和事务控制）\n![enter description here](https://img-1256282866.cos.ap-beijing.myqcloud.com/1628252560478.png)\n+ 任务一：扫描包，通过反射技术实例化对象并且存储待用（map集合）\n+ 任务二：对外提供获取实例对象的接口（根据id获取）\n+ 解析@Service注解：只需要获取其类实例化，然后放入map集合中\n![enter description here](https://img-1256282866.cos.ap-beijing.myqcloud.com/1628252306337.png)\n+ 解析@Autowired注解：注解用在字段上，用于注入实例化后的值。\n![enter description here](https://img-1256282866.cos.ap-beijing.myqcloud.com/1628253372265.png)\n+ 解析@Transactional注解\n ![enter description here](https://img-1256282866.cos.ap-beijing.myqcloud.com/1628253843196.png)\n\n ## 七、AOP的实现（ProxyFactory）\n 利用JDK动态代理或者CGLIB动态代理\n 关于动态代理的知识可以参考我的另一篇博文：[通过房屋租赁流程理解设计模式](https://blog.csdn.net/qq_39231769/article/details/119317869?spm=1001.2014.3001.5501)\n ```javascript?linenums\n    public Object getJdkProxy(Object o){\n        return Proxy.newProxyInstance(o.getClass().getClassLoader(), o.getClass().getInterfaces(), new InvocationHandler() {\n            @Override\n            public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n                Object result=null;\n                try {\n                    //开启事务（关闭事务自动提交）\n                    transactionManager.beginTransaction();\n                    result = method.invoke(o, args);\n                    //提交事务\n                    transactionManager.commit();\n                }catch (Exception e){\n                    e.printStackTrace();\n                    //回滚\n                    transactionManager.rollback();\n                    //抛出异常以便于上层servlet获取\n                    throw e;\n                }\n                return result;\n            }\n        });\n    }\n    /**\n     * 使用cglib动态代理生成代理对象\n     * @param obj 委托对象\n     * @return\n     */\n    public Object getCglibProxy(Object obj) {\n        return  Enhancer.create(obj.getClass(), new MethodInterceptor() {\n            @Override\n            public Object intercept(Object o, Method method, Object[] objects, MethodProxy methodProxy) throws Throwable {\n                Object result = null;\n                try{\n                    // 开启事务(关闭事务的自动提交)\n                    transactionManager.beginTransaction();\n\n                    result = method.invoke(obj,objects);\n\n                    // 提交事务\n\n                    transactionManager.commit();\n                }catch (Exception e) {\n                    e.printStackTrace();\n                    // 回滚事务\n                    transactionManager.rollback();\n\n                    // 抛出异常便于上层servlet捕获\n                    throw e;\n\n                }\n                return result;\n            }\n        });\n    }\n}\n ```","slug":"BookMark/拉勾笔记/记一次手写IOC,AOP实现类spring 功能","published":1,"date":"2022-07-18T09:51:23.000Z","updated":"2022-09-01T10:19:35.769Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cl7ptszop002caba5cjui778z","content":"<h1><span id=\"手写xml或自定义注解iocaop实现类spring功能\">手写XML或自定义注解IOC,AOP实现类spring功能</span></h1><hr>\n<p>前言：spring手写之路上，为了充分了解IOC和AOP特性以及实现过程。手写实现spring的ioc和aop功能。</p>\n<ul>\n<li>两种形式：<ul>\n<li>1.基于xml：使用dom4j技术，解析xml文件。获取全类名，反射获取类并实例化。同时以无参构造形式注入依赖。</li>\n<li>2.基于注解：解析到注解类后，使用reflections.getTypesAnnotatedWith方法获取类集合，然后实例化并注入依赖。</li>\n</ul>\n</li>\n</ul>\n<hr>\n<ul>\n<li>IOC：控制反转；将bean的实例化交给容器。</li>\n<li>AOP：面向切面；补充oop面向对象，解决横向切入问题。</li>\n<li>DI：依赖注入：与IOC实现功能类似；不同在于站在容器的角度，如果A对象实例化过程中因为声明了一个B类型的属性，那么就需要容器把B对象注入给A</li>\n</ul>\n<hr>\n<h2><span id=\"一-下载源码\">一、下载源码</span></h2><p>源码地址：<a href=\"https://gitee.com/idse666666/my_spring/tree/master/lagou-transfer\"> lagou-transfer </a></p>\n<h2><span id=\"二-beansxml编写xml\">二、beans.xml编写xml</span></h2><p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/1628254605637.png\" alt=\"enter description here\"></p>\n<h2><span id=\"三-beanfactory解析xml\">三、BeanFactory解析xml</span></h2><ul>\n<li>任务一：扫描包，通过反射技术实例化对象并且存储待用（map集合）</li>\n<li>任务二：对外提供获取实例对象的接口（根据id获取）</li>\n<li>解析bean并实例化<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/1628254732278.png\" alt=\"enter description here\"></li>\n<li>“set方法”.invoke(“父级对象”,“实例化后对象”）使用set方法注入实例化后的对象<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/1628254964125.png\" alt=\"enter description here\"></li>\n</ul>\n<h2><span id=\"四-下载源码\">四、下载源码</span></h2><p>源码地址：<a href=\"https://gitee.com/idse666666/lagou-work/tree/master/%E9%98%B6%E6%AE%B5%E4%B8%80%E6%A8%A1%E5%9D%97%E4%BA%8C%E4%BD%9C%E4%B8%9A/code/\">lagou-transfer-work</a></p>\n<h2><span id=\"五-注解的定义\">五、注解的定义</span></h2><ul>\n<li>@Target：<br>@Target说明了Annotation所修饰的对象范围：Annotation可被用于 packages、types（类、接口、枚举、Annotation类型）、类型成员（方法、构造方法、成员变量、枚举值）、方法参数和本地变量（如循环变量、catch参数）。在Annotation类型的声明中使用了target可更加明晰其修饰的目标。</li>\n</ul>\n<p>作用：用于描述注解的使用范围（即：被描述的注解可以用在什么地方）</p>\n<p>取值(ElementType)有：</p>\n<ol>\n<li>CONSTRUCTOR:用于描述构造器</li>\n<li>FIELD:用于描述域</li>\n<li>LOCAL_VARIABLE:用于描述局部变量</li>\n<li>METHOD:用于描述方法</li>\n<li>PACKAGE:用于描述包</li>\n<li>PARAMETER:用于描述参数</li>\n<li>TYPE:用于描述类、接口(包括注解类型) 或enum声明</li>\n</ol>\n<ul>\n<li>@Retention：</li>\n</ul>\n<p>@Retention定义了该Annotation被保留的时间长短：某些Annotation仅出现在源代码中，而被编译器丢弃；而另一些却被编译在class文件中；编译在class文件中的Annotation可能会被虚拟机忽略，而另一些在class被装载时将被读取（请注意并不影响class的执行，因为Annotation与class在使用上是被分离的）。使用这个meta-Annotation可以对 Annotation的“生命周期”限制。<br>　　<br>作用：表示需要在什么级别保存该注释信息，用于描述注解的生命周期（即：被描述的注解在什么范围内有效）</p>\n<p>取值（RetentionPoicy）有：</p>\n<ol>\n<li>SOURCE:在源文件中有效（即源文件保留）</li>\n<li>CLASS:在class文件中有效（即class保留）</li>\n<li>RUNTIME:在运行时有效（即运行时保留）</li>\n</ol>\n<p>说明：Column注解的的RetentionPolicy的属性值是RUTIME,这样注解处理器可以通过反射，获取到该注解的属性值，从而去做一些运行时的逻辑处理</p>\n<p>源码：myAnno<br>@Service</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">//用在描述类<br>@Target(ElementType.TYPE)<br>//运行时有效<br>@Retention(RetentionPolicy.RUNTIME)<br>public @interface Service &#123;<br>    String value() default &quot;&quot;;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>@Autowired</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">//用在字段上<br>@Target(ElementType.FIELD)<br>//运行时有效<br>@Retention(RetentionPolicy.RUNTIME)<br>public @interface Autowired &#123;<br>    boolean required() default true;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>@Transactional</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">//用在描述类<br>@Target(ElementType.TYPE)<br>//运行时有效<br>@Retention(RetentionPolicy.RUNTIME)<br>public @interface Transactional &#123;<br>    String value() default &quot;&quot;;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h2><span id=\"六-工厂类annobeanfactory扫描注解利用反射技术和动态代理技术实现类实例化和事务控制\">六、工厂类AnnoBeanFactory（扫描注解，利用反射技术和动态代理技术实现类实例化和事务控制）</span></h2><p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/1628252560478.png\" alt=\"enter description here\"></p>\n<ul>\n<li>任务一：扫描包，通过反射技术实例化对象并且存储待用（map集合）</li>\n<li>任务二：对外提供获取实例对象的接口（根据id获取）</li>\n<li>解析@Service注解：只需要获取其类实例化，然后放入map集合中<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/1628252306337.png\" alt=\"enter description here\"></li>\n<li>解析@Autowired注解：注解用在字段上，用于注入实例化后的值。<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/1628253372265.png\" alt=\"enter description here\"></li>\n<li>解析@Transactional注解<br> <img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/1628253843196.png\" alt=\"enter description here\"></li>\n</ul>\n<h2><span id=\"七-aop的实现proxyfactory\">七、AOP的实现（ProxyFactory）</span></h2><p> 利用JDK动态代理或者CGLIB动态代理<br> 关于动态代理的知识可以参考我的另一篇博文：<a href=\"https://blog.csdn.net/qq_39231769/article/details/119317869?spm=1001.2014.3001.5501\">通过房屋租赁流程理解设计模式</a><br> <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">    public Object getJdkProxy(Object o)&#123;<br>        return Proxy.newProxyInstance(o.getClass().getClassLoader(), o.getClass().getInterfaces(), new InvocationHandler() &#123;<br>            @Override<br>            public Object invoke(Object proxy, Method method, Object[] args) throws Throwable &#123;<br>                Object result=null;<br>                try &#123;<br>                    //开启事务（关闭事务自动提交）<br>                    transactionManager.beginTransaction();<br>                    result = method.invoke(o, args);<br>                    //提交事务<br>                    transactionManager.commit();<br>                &#125;catch (Exception e)&#123;<br>                    e.printStackTrace();<br>                    //回滚<br>                    transactionManager.rollback();<br>                    //抛出异常以便于上层servlet获取<br>                    throw e;<br>                &#125;<br>                return result;<br>            &#125;<br>        &#125;);<br>    &#125;<br>    /**<br>     * 使用cglib动态代理生成代理对象<br>     * @param obj 委托对象<br>     * @return<br>     */<br>    public Object getCglibProxy(Object obj) &#123;<br>        return  Enhancer.create(obj.getClass(), new MethodInterceptor() &#123;<br>            @Override<br>            public Object intercept(Object o, Method method, Object[] objects, MethodProxy methodProxy) throws Throwable &#123;<br>                Object result = null;<br>                try&#123;<br>                    // 开启事务(关闭事务的自动提交)<br>                    transactionManager.beginTransaction();<br><br>                    result = method.invoke(obj,objects);<br><br>                    // 提交事务<br><br>                    transactionManager.commit();<br>                &#125;catch (Exception e) &#123;<br>                    e.printStackTrace();<br>                    // 回滚事务<br>                    transactionManager.rollback();<br><br>                    // 抛出异常便于上层servlet捕获<br>                    throw e;<br><br>                &#125;<br>                return result;<br>            &#125;<br>        &#125;);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p>\n","site":{"data":{}},"wordcount":3312,"excerpt":"","more":"<h1 id=\"手写XML或自定义注解IOC-AOP实现类spring功能\"><a href=\"#手写XML或自定义注解IOC-AOP实现类spring功能\" class=\"headerlink\" title=\"手写XML或自定义注解IOC,AOP实现类spring功能\"></a>手写XML或自定义注解IOC,AOP实现类spring功能</h1><hr>\n<p>前言：spring手写之路上，为了充分了解IOC和AOP特性以及实现过程。手写实现spring的ioc和aop功能。</p>\n<ul>\n<li>两种形式：<ul>\n<li>1.基于xml：使用dom4j技术，解析xml文件。获取全类名，反射获取类并实例化。同时以无参构造形式注入依赖。</li>\n<li>2.基于注解：解析到注解类后，使用reflections.getTypesAnnotatedWith方法获取类集合，然后实例化并注入依赖。</li>\n</ul>\n</li>\n</ul>\n<hr>\n<ul>\n<li>IOC：控制反转；将bean的实例化交给容器。</li>\n<li>AOP：面向切面；补充oop面向对象，解决横向切入问题。</li>\n<li>DI：依赖注入：与IOC实现功能类似；不同在于站在容器的角度，如果A对象实例化过程中因为声明了一个B类型的属性，那么就需要容器把B对象注入给A</li>\n</ul>\n<hr>\n<h2 id=\"一、下载源码\"><a href=\"#一、下载源码\" class=\"headerlink\" title=\"一、下载源码\"></a>一、下载源码</h2><p>源码地址：<a href=\"https://gitee.com/idse666666/my_spring/tree/master/lagou-transfer\"> lagou-transfer </a></p>\n<h2 id=\"二、beans-xml编写xml\"><a href=\"#二、beans-xml编写xml\" class=\"headerlink\" title=\"二、beans.xml编写xml\"></a>二、beans.xml编写xml</h2><p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/1628254605637.png\" alt=\"enter description here\"></p>\n<h2 id=\"三、BeanFactory解析xml\"><a href=\"#三、BeanFactory解析xml\" class=\"headerlink\" title=\"三、BeanFactory解析xml\"></a>三、BeanFactory解析xml</h2><ul>\n<li>任务一：扫描包，通过反射技术实例化对象并且存储待用（map集合）</li>\n<li>任务二：对外提供获取实例对象的接口（根据id获取）</li>\n<li>解析bean并实例化<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/1628254732278.png\" alt=\"enter description here\"></li>\n<li>“set方法”.invoke(“父级对象”,“实例化后对象”）使用set方法注入实例化后的对象<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/1628254964125.png\" alt=\"enter description here\"></li>\n</ul>\n<h2 id=\"四、下载源码\"><a href=\"#四、下载源码\" class=\"headerlink\" title=\"四、下载源码\"></a>四、下载源码</h2><p>源码地址：<a href=\"https://gitee.com/idse666666/lagou-work/tree/master/%E9%98%B6%E6%AE%B5%E4%B8%80%E6%A8%A1%E5%9D%97%E4%BA%8C%E4%BD%9C%E4%B8%9A/code/\">lagou-transfer-work</a></p>\n<h2 id=\"五、注解的定义\"><a href=\"#五、注解的定义\" class=\"headerlink\" title=\"五、注解的定义\"></a>五、注解的定义</h2><ul>\n<li>@Target：<br>@Target说明了Annotation所修饰的对象范围：Annotation可被用于 packages、types（类、接口、枚举、Annotation类型）、类型成员（方法、构造方法、成员变量、枚举值）、方法参数和本地变量（如循环变量、catch参数）。在Annotation类型的声明中使用了target可更加明晰其修饰的目标。</li>\n</ul>\n<p>作用：用于描述注解的使用范围（即：被描述的注解可以用在什么地方）</p>\n<p>取值(ElementType)有：</p>\n<ol>\n<li>CONSTRUCTOR:用于描述构造器</li>\n<li>FIELD:用于描述域</li>\n<li>LOCAL_VARIABLE:用于描述局部变量</li>\n<li>METHOD:用于描述方法</li>\n<li>PACKAGE:用于描述包</li>\n<li>PARAMETER:用于描述参数</li>\n<li>TYPE:用于描述类、接口(包括注解类型) 或enum声明</li>\n</ol>\n<ul>\n<li>@Retention：</li>\n</ul>\n<p>@Retention定义了该Annotation被保留的时间长短：某些Annotation仅出现在源代码中，而被编译器丢弃；而另一些却被编译在class文件中；编译在class文件中的Annotation可能会被虚拟机忽略，而另一些在class被装载时将被读取（请注意并不影响class的执行，因为Annotation与class在使用上是被分离的）。使用这个meta-Annotation可以对 Annotation的“生命周期”限制。<br>　　<br>作用：表示需要在什么级别保存该注释信息，用于描述注解的生命周期（即：被描述的注解在什么范围内有效）</p>\n<p>取值（RetentionPoicy）有：</p>\n<ol>\n<li>SOURCE:在源文件中有效（即源文件保留）</li>\n<li>CLASS:在class文件中有效（即class保留）</li>\n<li>RUNTIME:在运行时有效（即运行时保留）</li>\n</ol>\n<p>说明：Column注解的的RetentionPolicy的属性值是RUTIME,这样注解处理器可以通过反射，获取到该注解的属性值，从而去做一些运行时的逻辑处理</p>\n<p>源码：myAnno<br>@Service</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">//用在描述类<br>@Target(ElementType.TYPE)<br>//运行时有效<br>@Retention(RetentionPolicy.RUNTIME)<br>public @interface Service &#123;<br>    String value() default &quot;&quot;;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>@Autowired</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">//用在字段上<br>@Target(ElementType.FIELD)<br>//运行时有效<br>@Retention(RetentionPolicy.RUNTIME)<br>public @interface Autowired &#123;<br>    boolean required() default true;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>@Transactional</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">//用在描述类<br>@Target(ElementType.TYPE)<br>//运行时有效<br>@Retention(RetentionPolicy.RUNTIME)<br>public @interface Transactional &#123;<br>    String value() default &quot;&quot;;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h2 id=\"六、工厂类AnnoBeanFactory（扫描注解，利用反射技术和动态代理技术实现类实例化和事务控制）\"><a href=\"#六、工厂类AnnoBeanFactory（扫描注解，利用反射技术和动态代理技术实现类实例化和事务控制）\" class=\"headerlink\" title=\"六、工厂类AnnoBeanFactory（扫描注解，利用反射技术和动态代理技术实现类实例化和事务控制）\"></a>六、工厂类AnnoBeanFactory（扫描注解，利用反射技术和动态代理技术实现类实例化和事务控制）</h2><p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/1628252560478.png\" alt=\"enter description here\"></p>\n<ul>\n<li>任务一：扫描包，通过反射技术实例化对象并且存储待用（map集合）</li>\n<li>任务二：对外提供获取实例对象的接口（根据id获取）</li>\n<li>解析@Service注解：只需要获取其类实例化，然后放入map集合中<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/1628252306337.png\" alt=\"enter description here\"></li>\n<li>解析@Autowired注解：注解用在字段上，用于注入实例化后的值。<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/1628253372265.png\" alt=\"enter description here\"></li>\n<li>解析@Transactional注解<br> <img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/1628253843196.png\" alt=\"enter description here\"></li>\n</ul>\n<h2 id=\"七、AOP的实现（ProxyFactory）\"><a href=\"#七、AOP的实现（ProxyFactory）\" class=\"headerlink\" title=\"七、AOP的实现（ProxyFactory）\"></a>七、AOP的实现（ProxyFactory）</h2><p> 利用JDK动态代理或者CGLIB动态代理<br> 关于动态代理的知识可以参考我的另一篇博文：<a href=\"https://blog.csdn.net/qq_39231769/article/details/119317869?spm=1001.2014.3001.5501\">通过房屋租赁流程理解设计模式</a><br> <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">    public Object getJdkProxy(Object o)&#123;<br>        return Proxy.newProxyInstance(o.getClass().getClassLoader(), o.getClass().getInterfaces(), new InvocationHandler() &#123;<br>            @Override<br>            public Object invoke(Object proxy, Method method, Object[] args) throws Throwable &#123;<br>                Object result=null;<br>                try &#123;<br>                    //开启事务（关闭事务自动提交）<br>                    transactionManager.beginTransaction();<br>                    result = method.invoke(o, args);<br>                    //提交事务<br>                    transactionManager.commit();<br>                &#125;catch (Exception e)&#123;<br>                    e.printStackTrace();<br>                    //回滚<br>                    transactionManager.rollback();<br>                    //抛出异常以便于上层servlet获取<br>                    throw e;<br>                &#125;<br>                return result;<br>            &#125;<br>        &#125;);<br>    &#125;<br>    /**<br>     * 使用cglib动态代理生成代理对象<br>     * @param obj 委托对象<br>     * @return<br>     */<br>    public Object getCglibProxy(Object obj) &#123;<br>        return  Enhancer.create(obj.getClass(), new MethodInterceptor() &#123;<br>            @Override<br>            public Object intercept(Object o, Method method, Object[] objects, MethodProxy methodProxy) throws Throwable &#123;<br>                Object result = null;<br>                try&#123;<br>                    // 开启事务(关闭事务的自动提交)<br>                    transactionManager.beginTransaction();<br><br>                    result = method.invoke(obj,objects);<br><br>                    // 提交事务<br><br>                    transactionManager.commit();<br>                &#125;catch (Exception e) &#123;<br>                    e.printStackTrace();<br>                    // 回滚事务<br>                    transactionManager.rollback();<br><br>                    // 抛出异常便于上层servlet捕获<br>                    throw e;<br><br>                &#125;<br>                return result;<br>            &#125;<br>        &#125;);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p>\n"},{"_content":"# 甲骨文vps搭建\n\n---\n\n[toc]\n\n---\n\n## 一、服务器配置\n\n### 1.进入自己的实例，设置子网\n\n![image-20220721160820546](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721160820546.png)\n\n\n\n![image-20220721160836886](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721160836886.png)\n\n开放所有端口，当然你也可以设置需要开放的端口，我这里是所有开放\n\n![image-20220721160845932](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721160845932.png)\n\n## 二、域名相关的配置\n\nhttps://dash.cloudflare.com/\n\n## 三、V2ray安装\n\n### 1.开始配置前需要做的事情\n\n```\n****************可选账号密码登录**************\n#一键修改root密码\nbash <(curl -sSL https://cdn.jsdelivr.net/gh/kkkyg/vpsroot/root.sh)\n#手动修改\nsudo passwd root\nsudo -i\nsed -i 's/^#\\?PermitRootLogin.*/PermitRootLogin yes/g' /etc/ssh/sshd_config;\nsed -i 's/^#\\?PasswordAuthentication.*/PasswordAuthentication yes/g' /etc/ssh/sshd_config;\nservice sshd restart\n```\n\n```\n#开放所有端口\niptables -P INPUT ACCEPT\niptables -P FORWARD ACCEPT\niptables -P OUTPUT ACCEPT\niptables -F\n```\n\n```\n#修改本地的时间\nrm -rf /etc/localtime\nln -s /usr/share/zoneinfo/Asia/Shanghai /etc/localtime\n```\n\n```\n**********************Ubuntu专属*********************\n更新及安装组件\napt update -y          # Debian/Ubuntu 命令\napt install -y curl    #Debian/Ubuntu 命令\napt install -y socat    #Debian/Ubuntu 命令\n\n#测速可选\napt install speedtest-cli\nspeedtest-cli\n\n镜像默认设置了Iptable规则，关闭它\napt-get purge -y  netfilter-persistent\nreboot\n```\n\n```\n**********************CentOS专属*********************\nyum update -y          #CentOS 命令\nyum install -y curl    #CentOS 命令\nyum install -y socat    #CentOS 命令\n\n防火墙相关命令\nfirewall-cmd --state                   # 查看防火墙状态\nsystemctl stop firewalld.service       # 停止防火墙\nsystemctl disable firewalld.service    # 禁止防火墙开机自启\n```\n\n### 2.脚本一\n\n`bash <(curl -sL https://s.hijk.art/v2ray.sh)`\n\n### 3.脚本二（UI管理，可定制化强）\n\n```\n# 安装 Acme 脚本\ncurl https://get.acme.sh | sh\n\n# 80 端口空闲的证书申请方式\n# 自行更换代码中的域名、邮箱为你解析的域名及邮箱\n~/.acme.sh/acme.sh --register-account -m baoqi.hui@qq.com\n~/.acme.sh/acme.sh --issue -d aiqi.cf --standalone\n\n# 安装证书到指定文件夹\n# 自行更换代码中的域名为你解析的域名\n~/.acme.sh/acme.sh --installcert -d service.common.cf --key-file /root/gost_cert/key.pem --fullchain-file /root/gost_cert/cert.pem\n\n# 安装BBR加速\necho \"net.core.default_qdisc=fq\" >> /etc/sysctl.conf\necho \"net.ipv4.tcp_congestion_control=bbr\" >> /etc/sysctl.conf\nsysctl -p\nsysctl net.ipv4.tcp_available_congestion_control\nsysctl net.ipv4.tcp_congestion_control\n\n# 安装 & 升级 X-ui 面板\nbash <(curl -Ls https://raw.githubusercontent.com/vaxilu/x-ui/master/install.sh)\n```\n\nUI页面设置参考：\n\n![image-20220721160857103](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721160857103.png)\n\n\n\n\n\n### 4.脚本三（前两种的折中方案）\n\n```\n安装或优化脚本\nwget -P /root -N --no-check-certificate \"https://raw.githubusercontent.com/mack-a/v2ray-agent/master/install.sh\" && chmod 700 /root/install.sh && /root/install.sh\n```\n\n1. 安装\n\n![image-20220721160905809](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721160905809.png)\n\n2. 优化\n\n![image-20220721160917230](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721160917230.png)\n\n","source":"_posts/BookMark/翻墙刷机/甲骨文vps搭建.md","raw":"# 甲骨文vps搭建\n\n---\n\n[toc]\n\n---\n\n## 一、服务器配置\n\n### 1.进入自己的实例，设置子网\n\n![image-20220721160820546](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721160820546.png)\n\n\n\n![image-20220721160836886](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721160836886.png)\n\n开放所有端口，当然你也可以设置需要开放的端口，我这里是所有开放\n\n![image-20220721160845932](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721160845932.png)\n\n## 二、域名相关的配置\n\nhttps://dash.cloudflare.com/\n\n## 三、V2ray安装\n\n### 1.开始配置前需要做的事情\n\n```\n****************可选账号密码登录**************\n#一键修改root密码\nbash <(curl -sSL https://cdn.jsdelivr.net/gh/kkkyg/vpsroot/root.sh)\n#手动修改\nsudo passwd root\nsudo -i\nsed -i 's/^#\\?PermitRootLogin.*/PermitRootLogin yes/g' /etc/ssh/sshd_config;\nsed -i 's/^#\\?PasswordAuthentication.*/PasswordAuthentication yes/g' /etc/ssh/sshd_config;\nservice sshd restart\n```\n\n```\n#开放所有端口\niptables -P INPUT ACCEPT\niptables -P FORWARD ACCEPT\niptables -P OUTPUT ACCEPT\niptables -F\n```\n\n```\n#修改本地的时间\nrm -rf /etc/localtime\nln -s /usr/share/zoneinfo/Asia/Shanghai /etc/localtime\n```\n\n```\n**********************Ubuntu专属*********************\n更新及安装组件\napt update -y          # Debian/Ubuntu 命令\napt install -y curl    #Debian/Ubuntu 命令\napt install -y socat    #Debian/Ubuntu 命令\n\n#测速可选\napt install speedtest-cli\nspeedtest-cli\n\n镜像默认设置了Iptable规则，关闭它\napt-get purge -y  netfilter-persistent\nreboot\n```\n\n```\n**********************CentOS专属*********************\nyum update -y          #CentOS 命令\nyum install -y curl    #CentOS 命令\nyum install -y socat    #CentOS 命令\n\n防火墙相关命令\nfirewall-cmd --state                   # 查看防火墙状态\nsystemctl stop firewalld.service       # 停止防火墙\nsystemctl disable firewalld.service    # 禁止防火墙开机自启\n```\n\n### 2.脚本一\n\n`bash <(curl -sL https://s.hijk.art/v2ray.sh)`\n\n### 3.脚本二（UI管理，可定制化强）\n\n```\n# 安装 Acme 脚本\ncurl https://get.acme.sh | sh\n\n# 80 端口空闲的证书申请方式\n# 自行更换代码中的域名、邮箱为你解析的域名及邮箱\n~/.acme.sh/acme.sh --register-account -m baoqi.hui@qq.com\n~/.acme.sh/acme.sh --issue -d aiqi.cf --standalone\n\n# 安装证书到指定文件夹\n# 自行更换代码中的域名为你解析的域名\n~/.acme.sh/acme.sh --installcert -d service.common.cf --key-file /root/gost_cert/key.pem --fullchain-file /root/gost_cert/cert.pem\n\n# 安装BBR加速\necho \"net.core.default_qdisc=fq\" >> /etc/sysctl.conf\necho \"net.ipv4.tcp_congestion_control=bbr\" >> /etc/sysctl.conf\nsysctl -p\nsysctl net.ipv4.tcp_available_congestion_control\nsysctl net.ipv4.tcp_congestion_control\n\n# 安装 & 升级 X-ui 面板\nbash <(curl -Ls https://raw.githubusercontent.com/vaxilu/x-ui/master/install.sh)\n```\n\nUI页面设置参考：\n\n![image-20220721160857103](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721160857103.png)\n\n\n\n\n\n### 4.脚本三（前两种的折中方案）\n\n```\n安装或优化脚本\nwget -P /root -N --no-check-certificate \"https://raw.githubusercontent.com/mack-a/v2ray-agent/master/install.sh\" && chmod 700 /root/install.sh && /root/install.sh\n```\n\n1. 安装\n\n![image-20220721160905809](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721160905809.png)\n\n2. 优化\n\n![image-20220721160917230](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721160917230.png)\n\n","slug":"BookMark/翻墙刷机/甲骨文vps搭建","published":1,"date":"2022-07-25T05:51:34.000Z","updated":"2022-09-01T10:02:40.555Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cl7ptszop002daba5ebmrfey1","content":"<h1><span id=\"甲骨文vps搭建\">甲骨文vps搭建</span></h1><hr>\n<p>[toc]</p>\n<hr>\n<h2><span id=\"一-服务器配置\">一、服务器配置</span></h2><h3><span id=\"1进入自己的实例设置子网\">1.进入自己的实例，设置子网</span></h3><p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721160820546.png\" alt=\"image-20220721160820546\"></p>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721160836886.png\" alt=\"image-20220721160836886\"></p>\n<p>开放所有端口，当然你也可以设置需要开放的端口，我这里是所有开放</p>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721160845932.png\" alt=\"image-20220721160845932\"></p>\n<h2><span id=\"二-域名相关的配置\">二、域名相关的配置</span></h2><p><a href=\"https://dash.cloudflare.com/\">https://dash.cloudflare.com/</a></p>\n<h2><span id=\"三-v2ray安装\">三、V2ray安装</span></h2><h3><span id=\"1开始配置前需要做的事情\">1.开始配置前需要做的事情</span></h3><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\">****************可选账号密码登录**************<br><span class=\"hljs-comment\">#一键修改root密码</span><br>bash &lt;(curl -sSL https:<span class=\"hljs-regexp\">//</span>cdn.jsdelivr.net<span class=\"hljs-regexp\">/gh/</span>kkkyg<span class=\"hljs-regexp\">/vpsroot/</span>root.sh)<br><span class=\"hljs-comment\">#手动修改</span><br>sudo passwd root<br>sudo -i<br>sed -i <span class=\"hljs-string\">&#x27;s/^#\\?PermitRootLogin.*/PermitRootLogin yes/g&#x27;</span> <span class=\"hljs-regexp\">/etc/</span>ssh/sshd_config;<br>sed -i <span class=\"hljs-string\">&#x27;s/^#\\?PasswordAuthentication.*/PasswordAuthentication yes/g&#x27;</span> <span class=\"hljs-regexp\">/etc/</span>ssh/sshd_config;<br>service sshd restart<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight tp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs tp\">#开放所有端口<br>iptables -<span class=\"hljs-keyword\">P</span> INPUT <span class=\"hljs-keyword\">ACC</span>EPT<br>iptables -<span class=\"hljs-keyword\">P</span> FORWARD <span class=\"hljs-keyword\">ACC</span>EPT<br>iptables -<span class=\"hljs-keyword\">P</span> OUTPUT <span class=\"hljs-keyword\">ACC</span>EPT<br>iptables -F<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\"><span class=\"hljs-comment\">#修改本地的时间</span><br>rm -rf <span class=\"hljs-regexp\">/etc/</span>localtime<br>ln -s <span class=\"hljs-regexp\">/usr/</span>share<span class=\"hljs-regexp\">/zoneinfo/</span>Asia<span class=\"hljs-regexp\">/Shanghai /</span>etc/localtime<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs markdown\"><span class=\"hljs-strong\">****</span><span class=\"hljs-strong\">****</span><span class=\"hljs-strong\">****</span><span class=\"hljs-strong\">****</span><span class=\"hljs-strong\">****</span><span class=\"hljs-strong\">**Ubuntu专属**</span><span class=\"hljs-strong\">****</span><span class=\"hljs-strong\">****</span><span class=\"hljs-strong\">****</span><span class=\"hljs-strong\">****</span><span class=\"hljs-strong\">**<span class=\"hljs-emphasis\">*</span></span><br><span class=\"hljs-emphasis\"><span class=\"hljs-strong\">更新及安装组件</span></span><br><span class=\"hljs-emphasis\"><span class=\"hljs-strong\">apt update -y          # Debian/Ubuntu 命令</span></span><br><span class=\"hljs-emphasis\"><span class=\"hljs-strong\">apt install -y curl    #Debian/Ubuntu 命令</span></span><br><span class=\"hljs-emphasis\"><span class=\"hljs-strong\">apt install -y socat    #Debian/Ubuntu 命令</span></span><br><span class=\"hljs-emphasis\"><span class=\"hljs-strong\"></span></span><br><span class=\"hljs-emphasis\"><span class=\"hljs-strong\">#测速可选</span></span><br><span class=\"hljs-emphasis\"><span class=\"hljs-strong\">apt install speedtest-cli</span></span><br><span class=\"hljs-emphasis\"><span class=\"hljs-strong\">speedtest-cli</span></span><br><span class=\"hljs-emphasis\"><span class=\"hljs-strong\"></span></span><br><span class=\"hljs-emphasis\"><span class=\"hljs-strong\">镜像默认设置了Iptable规则，关闭它</span></span><br><span class=\"hljs-emphasis\"><span class=\"hljs-strong\">apt-get purge -y  netfilter-persistent</span></span><br><span class=\"hljs-emphasis\"><span class=\"hljs-strong\">reboot</span></span><br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs markdown\"><span class=\"hljs-strong\">****</span><span class=\"hljs-strong\">****</span><span class=\"hljs-strong\">****</span><span class=\"hljs-strong\">****</span><span class=\"hljs-strong\">****</span><span class=\"hljs-strong\">**CentOS专属**</span><span class=\"hljs-strong\">****</span><span class=\"hljs-strong\">****</span><span class=\"hljs-strong\">****</span><span class=\"hljs-strong\">****</span><span class=\"hljs-strong\">**<span class=\"hljs-emphasis\">*</span></span><br><span class=\"hljs-emphasis\"><span class=\"hljs-strong\">yum update -y          #CentOS 命令</span></span><br><span class=\"hljs-emphasis\"><span class=\"hljs-strong\">yum install -y curl    #CentOS 命令</span></span><br><span class=\"hljs-emphasis\"><span class=\"hljs-strong\">yum install -y socat    #CentOS 命令</span></span><br><span class=\"hljs-emphasis\"><span class=\"hljs-strong\"></span></span><br><span class=\"hljs-emphasis\"><span class=\"hljs-strong\">防火墙相关命令</span></span><br><span class=\"hljs-emphasis\"><span class=\"hljs-strong\">firewall-cmd --state                   # 查看防火墙状态</span></span><br><span class=\"hljs-emphasis\"><span class=\"hljs-strong\">systemctl stop firewalld.service       # 停止防火墙</span></span><br><span class=\"hljs-emphasis\"><span class=\"hljs-strong\">systemctl disable firewalld.service    # 禁止防火墙开机自启</span></span><br></code></pre></td></tr></table></figure>\n\n<h3><span id=\"2脚本一\">2.脚本一</span></h3><p><code>bash &lt;(curl -sL https://s.hijk.art/v2ray.sh)</code></p>\n<h3><span id=\"3脚本二ui管理可定制化强\">3.脚本二（UI管理，可定制化强）</span></h3><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\"><span class=\"hljs-comment\"># 安装 Acme 脚本</span><br>curl https:<span class=\"hljs-regexp\">//g</span>et.acme.sh | sh<br><br><span class=\"hljs-comment\"># 80 端口空闲的证书申请方式</span><br><span class=\"hljs-comment\"># 自行更换代码中的域名、邮箱为你解析的域名及邮箱</span><br>~<span class=\"hljs-regexp\">/.acme.sh/</span>acme.sh --register-account -m baoqi.hui@qq.com<br>~<span class=\"hljs-regexp\">/.acme.sh/</span>acme.sh --issue -d aiqi.cf --standalone<br><br><span class=\"hljs-comment\"># 安装证书到指定文件夹</span><br><span class=\"hljs-comment\"># 自行更换代码中的域名为你解析的域名</span><br>~<span class=\"hljs-regexp\">/.acme.sh/</span>acme.sh --installcert -d service.common.cf --key-file <span class=\"hljs-regexp\">/root/g</span>ost_cert<span class=\"hljs-regexp\">/key.pem --fullchain-file /</span>root<span class=\"hljs-regexp\">/gost_cert/</span>cert.pem<br><br><span class=\"hljs-comment\"># 安装BBR加速</span><br>echo <span class=\"hljs-string\">&quot;net.core.default_qdisc=fq&quot;</span> &gt;&gt; <span class=\"hljs-regexp\">/etc/</span>sysctl.conf<br>echo <span class=\"hljs-string\">&quot;net.ipv4.tcp_congestion_control=bbr&quot;</span> &gt;&gt; <span class=\"hljs-regexp\">/etc/</span>sysctl.conf<br>sysctl -p<br>sysctl net.ipv4.tcp_available_congestion_control<br>sysctl net.ipv4.tcp_congestion_control<br><br><span class=\"hljs-comment\"># 安装 &amp; 升级 X-ui 面板</span><br>bash &lt;(curl -Ls https:<span class=\"hljs-regexp\">//</span>raw.githubusercontent.com<span class=\"hljs-regexp\">/vaxilu/</span>x-ui<span class=\"hljs-regexp\">/master/i</span>nstall.sh)<br></code></pre></td></tr></table></figure>\n\n<p>UI页面设置参考：</p>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721160857103.png\" alt=\"image-20220721160857103\"></p>\n<h3><span id=\"4脚本三前两种的折中方案\">4.脚本三（前两种的折中方案）</span></h3><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\">安装或优化脚本<br>wget -P <span class=\"hljs-regexp\">/root -N --no-check-certificate &quot;https:/</span><span class=\"hljs-regexp\">/raw.githubusercontent.com/m</span>ack-a<span class=\"hljs-regexp\">/v2ray-agent/m</span>aster<span class=\"hljs-regexp\">/install.sh&quot; &amp;&amp; chmod 700 /</span>root<span class=\"hljs-regexp\">/install.sh &amp;&amp; /</span>root/install.sh<br></code></pre></td></tr></table></figure>\n\n<ol>\n<li>安装</li>\n</ol>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721160905809.png\" alt=\"image-20220721160905809\"></p>\n<ol start=\"2\">\n<li>优化</li>\n</ol>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721160917230.png\" alt=\"image-20220721160917230\"></p>\n","site":{"data":{}},"wordcount":2125,"excerpt":"","more":"<h1 id=\"甲骨文vps搭建\"><a href=\"#甲骨文vps搭建\" class=\"headerlink\" title=\"甲骨文vps搭建\"></a>甲骨文vps搭建</h1><hr>\n<p>[toc]</p>\n<hr>\n<h2 id=\"一、服务器配置\"><a href=\"#一、服务器配置\" class=\"headerlink\" title=\"一、服务器配置\"></a>一、服务器配置</h2><h3 id=\"1-进入自己的实例，设置子网\"><a href=\"#1-进入自己的实例，设置子网\" class=\"headerlink\" title=\"1.进入自己的实例，设置子网\"></a>1.进入自己的实例，设置子网</h3><p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721160820546.png\" alt=\"image-20220721160820546\"></p>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721160836886.png\" alt=\"image-20220721160836886\"></p>\n<p>开放所有端口，当然你也可以设置需要开放的端口，我这里是所有开放</p>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721160845932.png\" alt=\"image-20220721160845932\"></p>\n<h2 id=\"二、域名相关的配置\"><a href=\"#二、域名相关的配置\" class=\"headerlink\" title=\"二、域名相关的配置\"></a>二、域名相关的配置</h2><p><a href=\"https://dash.cloudflare.com/\">https://dash.cloudflare.com/</a></p>\n<h2 id=\"三、V2ray安装\"><a href=\"#三、V2ray安装\" class=\"headerlink\" title=\"三、V2ray安装\"></a>三、V2ray安装</h2><h3 id=\"1-开始配置前需要做的事情\"><a href=\"#1-开始配置前需要做的事情\" class=\"headerlink\" title=\"1.开始配置前需要做的事情\"></a>1.开始配置前需要做的事情</h3><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\">****************可选账号密码登录**************<br><span class=\"hljs-comment\">#一键修改root密码</span><br>bash &lt;(curl -sSL https:<span class=\"hljs-regexp\">//</span>cdn.jsdelivr.net<span class=\"hljs-regexp\">/gh/</span>kkkyg<span class=\"hljs-regexp\">/vpsroot/</span>root.sh)<br><span class=\"hljs-comment\">#手动修改</span><br>sudo passwd root<br>sudo -i<br>sed -i <span class=\"hljs-string\">&#x27;s/^#\\?PermitRootLogin.*/PermitRootLogin yes/g&#x27;</span> <span class=\"hljs-regexp\">/etc/</span>ssh/sshd_config;<br>sed -i <span class=\"hljs-string\">&#x27;s/^#\\?PasswordAuthentication.*/PasswordAuthentication yes/g&#x27;</span> <span class=\"hljs-regexp\">/etc/</span>ssh/sshd_config;<br>service sshd restart<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight tp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs tp\">#开放所有端口<br>iptables -<span class=\"hljs-keyword\">P</span> INPUT <span class=\"hljs-keyword\">ACC</span>EPT<br>iptables -<span class=\"hljs-keyword\">P</span> FORWARD <span class=\"hljs-keyword\">ACC</span>EPT<br>iptables -<span class=\"hljs-keyword\">P</span> OUTPUT <span class=\"hljs-keyword\">ACC</span>EPT<br>iptables -F<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\"><span class=\"hljs-comment\">#修改本地的时间</span><br>rm -rf <span class=\"hljs-regexp\">/etc/</span>localtime<br>ln -s <span class=\"hljs-regexp\">/usr/</span>share<span class=\"hljs-regexp\">/zoneinfo/</span>Asia<span class=\"hljs-regexp\">/Shanghai /</span>etc/localtime<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs markdown\"><span class=\"hljs-strong\">****</span><span class=\"hljs-strong\">****</span><span class=\"hljs-strong\">****</span><span class=\"hljs-strong\">****</span><span class=\"hljs-strong\">****</span><span class=\"hljs-strong\">**Ubuntu专属**</span><span class=\"hljs-strong\">****</span><span class=\"hljs-strong\">****</span><span class=\"hljs-strong\">****</span><span class=\"hljs-strong\">****</span><span class=\"hljs-strong\">**<span class=\"hljs-emphasis\">*</span></span><br><span class=\"hljs-emphasis\"><span class=\"hljs-strong\">更新及安装组件</span></span><br><span class=\"hljs-emphasis\"><span class=\"hljs-strong\">apt update -y          # Debian/Ubuntu 命令</span></span><br><span class=\"hljs-emphasis\"><span class=\"hljs-strong\">apt install -y curl    #Debian/Ubuntu 命令</span></span><br><span class=\"hljs-emphasis\"><span class=\"hljs-strong\">apt install -y socat    #Debian/Ubuntu 命令</span></span><br><span class=\"hljs-emphasis\"><span class=\"hljs-strong\"></span></span><br><span class=\"hljs-emphasis\"><span class=\"hljs-strong\">#测速可选</span></span><br><span class=\"hljs-emphasis\"><span class=\"hljs-strong\">apt install speedtest-cli</span></span><br><span class=\"hljs-emphasis\"><span class=\"hljs-strong\">speedtest-cli</span></span><br><span class=\"hljs-emphasis\"><span class=\"hljs-strong\"></span></span><br><span class=\"hljs-emphasis\"><span class=\"hljs-strong\">镜像默认设置了Iptable规则，关闭它</span></span><br><span class=\"hljs-emphasis\"><span class=\"hljs-strong\">apt-get purge -y  netfilter-persistent</span></span><br><span class=\"hljs-emphasis\"><span class=\"hljs-strong\">reboot</span></span><br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs markdown\"><span class=\"hljs-strong\">****</span><span class=\"hljs-strong\">****</span><span class=\"hljs-strong\">****</span><span class=\"hljs-strong\">****</span><span class=\"hljs-strong\">****</span><span class=\"hljs-strong\">**CentOS专属**</span><span class=\"hljs-strong\">****</span><span class=\"hljs-strong\">****</span><span class=\"hljs-strong\">****</span><span class=\"hljs-strong\">****</span><span class=\"hljs-strong\">**<span class=\"hljs-emphasis\">*</span></span><br><span class=\"hljs-emphasis\"><span class=\"hljs-strong\">yum update -y          #CentOS 命令</span></span><br><span class=\"hljs-emphasis\"><span class=\"hljs-strong\">yum install -y curl    #CentOS 命令</span></span><br><span class=\"hljs-emphasis\"><span class=\"hljs-strong\">yum install -y socat    #CentOS 命令</span></span><br><span class=\"hljs-emphasis\"><span class=\"hljs-strong\"></span></span><br><span class=\"hljs-emphasis\"><span class=\"hljs-strong\">防火墙相关命令</span></span><br><span class=\"hljs-emphasis\"><span class=\"hljs-strong\">firewall-cmd --state                   # 查看防火墙状态</span></span><br><span class=\"hljs-emphasis\"><span class=\"hljs-strong\">systemctl stop firewalld.service       # 停止防火墙</span></span><br><span class=\"hljs-emphasis\"><span class=\"hljs-strong\">systemctl disable firewalld.service    # 禁止防火墙开机自启</span></span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"2-脚本一\"><a href=\"#2-脚本一\" class=\"headerlink\" title=\"2.脚本一\"></a>2.脚本一</h3><p><code>bash &lt;(curl -sL https://s.hijk.art/v2ray.sh)</code></p>\n<h3 id=\"3-脚本二（UI管理，可定制化强）\"><a href=\"#3-脚本二（UI管理，可定制化强）\" class=\"headerlink\" title=\"3.脚本二（UI管理，可定制化强）\"></a>3.脚本二（UI管理，可定制化强）</h3><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\"><span class=\"hljs-comment\"># 安装 Acme 脚本</span><br>curl https:<span class=\"hljs-regexp\">//g</span>et.acme.sh | sh<br><br><span class=\"hljs-comment\"># 80 端口空闲的证书申请方式</span><br><span class=\"hljs-comment\"># 自行更换代码中的域名、邮箱为你解析的域名及邮箱</span><br>~<span class=\"hljs-regexp\">/.acme.sh/</span>acme.sh --register-account -m baoqi.hui@qq.com<br>~<span class=\"hljs-regexp\">/.acme.sh/</span>acme.sh --issue -d aiqi.cf --standalone<br><br><span class=\"hljs-comment\"># 安装证书到指定文件夹</span><br><span class=\"hljs-comment\"># 自行更换代码中的域名为你解析的域名</span><br>~<span class=\"hljs-regexp\">/.acme.sh/</span>acme.sh --installcert -d service.common.cf --key-file <span class=\"hljs-regexp\">/root/g</span>ost_cert<span class=\"hljs-regexp\">/key.pem --fullchain-file /</span>root<span class=\"hljs-regexp\">/gost_cert/</span>cert.pem<br><br><span class=\"hljs-comment\"># 安装BBR加速</span><br>echo <span class=\"hljs-string\">&quot;net.core.default_qdisc=fq&quot;</span> &gt;&gt; <span class=\"hljs-regexp\">/etc/</span>sysctl.conf<br>echo <span class=\"hljs-string\">&quot;net.ipv4.tcp_congestion_control=bbr&quot;</span> &gt;&gt; <span class=\"hljs-regexp\">/etc/</span>sysctl.conf<br>sysctl -p<br>sysctl net.ipv4.tcp_available_congestion_control<br>sysctl net.ipv4.tcp_congestion_control<br><br><span class=\"hljs-comment\"># 安装 &amp; 升级 X-ui 面板</span><br>bash &lt;(curl -Ls https:<span class=\"hljs-regexp\">//</span>raw.githubusercontent.com<span class=\"hljs-regexp\">/vaxilu/</span>x-ui<span class=\"hljs-regexp\">/master/i</span>nstall.sh)<br></code></pre></td></tr></table></figure>\n\n<p>UI页面设置参考：</p>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721160857103.png\" alt=\"image-20220721160857103\"></p>\n<h3 id=\"4-脚本三（前两种的折中方案）\"><a href=\"#4-脚本三（前两种的折中方案）\" class=\"headerlink\" title=\"4.脚本三（前两种的折中方案）\"></a>4.脚本三（前两种的折中方案）</h3><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\">安装或优化脚本<br>wget -P <span class=\"hljs-regexp\">/root -N --no-check-certificate &quot;https:/</span><span class=\"hljs-regexp\">/raw.githubusercontent.com/m</span>ack-a<span class=\"hljs-regexp\">/v2ray-agent/m</span>aster<span class=\"hljs-regexp\">/install.sh&quot; &amp;&amp; chmod 700 /</span>root<span class=\"hljs-regexp\">/install.sh &amp;&amp; /</span>root/install.sh<br></code></pre></td></tr></table></figure>\n\n<ol>\n<li>安装</li>\n</ol>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721160905809.png\" alt=\"image-20220721160905809\"></p>\n<ol start=\"2\">\n<li>优化</li>\n</ol>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721160917230.png\" alt=\"image-20220721160917230\"></p>\n"},{"_content":"# 翻墙v2ray windows客户端使用教程\n\n---\n\n[toc]\n\n---\n\n## 1.下载代理软件v2rayN-v4.20.zip解压\n\n![image-20220721160521869](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721160521869.png)\n\n## 2.打开软件进行设置core类型\n\n![image-20220721160550709](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721160550709.png)\n\n## 3.添加你的服务器\n\n![image-20220721160532229](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721160532229.png)\n\n## 4.右键图标设置系统代理\n\n![image-20220721160540848](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721160540848.png)","source":"_posts/BookMark/翻墙刷机/翻墙v2ray windows客户端使用教程.md","raw":"# 翻墙v2ray windows客户端使用教程\n\n---\n\n[toc]\n\n---\n\n## 1.下载代理软件v2rayN-v4.20.zip解压\n\n![image-20220721160521869](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721160521869.png)\n\n## 2.打开软件进行设置core类型\n\n![image-20220721160550709](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721160550709.png)\n\n## 3.添加你的服务器\n\n![image-20220721160532229](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721160532229.png)\n\n## 4.右键图标设置系统代理\n\n![image-20220721160540848](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721160540848.png)","slug":"BookMark/翻墙刷机/翻墙v2ray windows客户端使用教程","published":1,"date":"2022-07-21T08:06:55.000Z","updated":"2022-09-01T10:02:40.522Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cl7ptszop002eaba55q5idchr","content":"<h1><span id=\"翻墙v2ray-windows客户端使用教程\">翻墙v2ray windows客户端使用教程</span></h1><hr>\n<p>[toc]</p>\n<hr>\n<h2><span id=\"1下载代理软件v2rayn-v420zip解压\">1.下载代理软件v2rayN-v4.20.zip解压</span></h2><p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721160521869.png\" alt=\"image-20220721160521869\"></p>\n<h2><span id=\"2打开软件进行设置core类型\">2.打开软件进行设置core类型</span></h2><p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721160550709.png\" alt=\"image-20220721160550709\"></p>\n<h2><span id=\"3添加你的服务器\">3.添加你的服务器</span></h2><p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721160532229.png\" alt=\"image-20220721160532229\"></p>\n<h2><span id=\"4右键图标设置系统代理\">4.右键图标设置系统代理</span></h2><p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721160540848.png\" alt=\"image-20220721160540848\"></p>\n","site":{"data":{}},"wordcount":89,"excerpt":"","more":"<h1 id=\"翻墙v2ray-windows客户端使用教程\"><a href=\"#翻墙v2ray-windows客户端使用教程\" class=\"headerlink\" title=\"翻墙v2ray windows客户端使用教程\"></a>翻墙v2ray windows客户端使用教程</h1><hr>\n<p>[toc]</p>\n<hr>\n<h2 id=\"1-下载代理软件v2rayN-v4-20-zip解压\"><a href=\"#1-下载代理软件v2rayN-v4-20-zip解压\" class=\"headerlink\" title=\"1.下载代理软件v2rayN-v4.20.zip解压\"></a>1.下载代理软件v2rayN-v4.20.zip解压</h2><p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721160521869.png\" alt=\"image-20220721160521869\"></p>\n<h2 id=\"2-打开软件进行设置core类型\"><a href=\"#2-打开软件进行设置core类型\" class=\"headerlink\" title=\"2.打开软件进行设置core类型\"></a>2.打开软件进行设置core类型</h2><p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721160550709.png\" alt=\"image-20220721160550709\"></p>\n<h2 id=\"3-添加你的服务器\"><a href=\"#3-添加你的服务器\" class=\"headerlink\" title=\"3.添加你的服务器\"></a>3.添加你的服务器</h2><p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721160532229.png\" alt=\"image-20220721160532229\"></p>\n<h2 id=\"4-右键图标设置系统代理\"><a href=\"#4-右键图标设置系统代理\" class=\"headerlink\" title=\"4.右键图标设置系统代理\"></a>4.右键图标设置系统代理</h2><p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721160540848.png\" alt=\"image-20220721160540848\"></p>\n"},{"_content":"# 《框架玩机》小米手机玩机教程\n\n---\n\n[toc]\n\n---\n\n<center><font color=red>注：刷机有风险，玩机需谨慎。\n 操作不当所造成后果与菜鸟小回无关！！！\n\n\n---\n\n今天来分享小米手机玩机技巧，Magisk面具+Xp框架!\n可能你多上面的名词还有些陌生。\n但下面的手机功能你应该是听说过的，刷步数，虚拟定位，蚂蚁森林自动偷能量，QQ,微信自动抢红包，防撤回，防闪照......也是因为近期好多朋友问我如何实现一些特殊功能，才有我现在的分享！\n看下部分功能：\n**1.部分模块预览**\n![在这里插入图片描述](https://img-1256282866.cos.ap-beijing.myqcloud.com/20190717212437872.png)![在这里插入图片描述](https://img-1256282866.cos.ap-beijing.myqcloud.com/20190717212459469.png)\n\n---\n\n**2.部分模块功能预览**\n\n![image-20220721154345687](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721154345687.png)\n![image-20220721154439132](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721154439132.png)\n![image-20220721154449114](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721154449114.png)\n![在这里插入图片描述](https://img-1256282866.cos.ap-beijing.myqcloud.com/2019071721305823.gif)\n![image-20220721154630183](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721154630183.png)\n\n![image-20220721154703333](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721154703333.png)\n\n部分功能展示完毕，是不是有一丢丢心动呢？以上功能均为本人在用，再提醒一次，刷机过程可能存在数据清除，卡米，无限重启等等后果，虽均有处理方案，但还是**不建议玩机新手学习**。**后果自负！！！**\n\n\n---\n教程开始（小米9为例）：\n**主分六步：**\n **1.刷开发版系统\n 2.解BootLoader锁\n 3.解锁手机root权限\n 4.刷入面具并安装\n 5.刷入Xposed框架\n 6.刷入所需模块**\n## 一、先给你的手机来一个开发版系统 \n此处较为简单，但注意更换版本需要<font color=red>清理掉手机所有数据，请**及时备份**！！！</font>\n[最新开发版包下载](http://www.miui.com/getrom-357.html?m=yes&mobile=2)\n\n1. 首先在官网下载最新卡刷包到手机（记住放的位置，无需解压）。\n\n2. 在系统更新界面点击中间10十下即可激活隐藏功能，右上角点击从本地选择安装包更新。\n   ![image-20220721154718939](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721154718939.png)\n\n3. 选择刚才下载的zip文件就可以了。***注意备份一下数据哦！***\n\n## 二、解BootLoader锁\n1. 在小米官方申请小米解锁        [解锁地址](http://www.miui.com/unlock/index.html)\n\n2. 填写申请解锁信息，然后会出现申请成功，然后就等待小米公司发来的解锁通过短信为基准\n   ![image-20220721154730350](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721154730350.png)\n\n3. 解锁申请通过后请到小米申请解锁链接中下载小米手机解锁工具。\n   ![image-20220721154849708](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721154849708.png)\n\n4. 下载解压之后点击图片中的MiUsbDriver进行安装驱动，如果检测已安装可以忽视此过程。\n   ![image-20220721154905452](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721154905452.png)         \n\n5. 安装成功后我们现在就可以打开miflash_unlock解锁软件了。\n   ![image-20220721154919401](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721154919401.png)\n   ![image-20220721154954560](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721154954560.png)\n\n6. 接下来我们可以来绑定手机设备了。找到手机设备信息，连续点击MIUI系统版本号开启开发者模式。\n\n   ![image-20220721155014921](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721155014921.png)\n\n   + 在设置—更多设置中找到开发者模式\n     ![image-20220721155032367](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721155032367.png)\n\n   7. 在开发者模式里面找到设备就锁状态，小米账号绑定此设备。如图下：\n      ![image-20220721155049830](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721155049830.png)\n   8. 绑定后我们再打开解锁工具。\n      ![image-20220721155102452](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721155102452.png)\n      这时会显示当前未连接手机，我们需要关机手机，“音量键减+开机键同时按”，进入fastboot模式\n      此时会出现一只小兔子，解锁工具会显示已连接手机\n      ![image-20220721155114600](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721155114600.png)    \n   9. 点击下面的解锁按键，出现正在解锁当中。\n      ![image-20220721155136183](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721155136183.png)\n      + 如果出现解锁失败或者是请绑定设备开机后检查是否绑定；重启到fastboot模式重新解锁即可\n        ![image-20220721155155195](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721155155195.png)\n      + 开机后找到开发者模式，如果显示已解锁，说明你就成功了\n        ![image-20220721155203957](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721155203957.png)\n        **到此为止，你的手机已经解锁成功。**\n\n---\n## 三、解锁root权限\n1. 回到安全中心，**应用管理**\n   ![image-20220721155221083](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721155221083.png)\n\n2. 点击 **权限**\n   ![image-20220721155232075](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721155232075.png)\n\n\n\n3. 点击**root权限管理**\n   ![image-20220721155251563](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721155251563.png)\n4. 勾选同意服务，等待进度条走满手机自动重启\n\n5. 重启完成后再回到当前位置查看，可以看到已经可以管理root权限了。\n   ![image-20220721155421058](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721155421058.png)\n\n---\n## 四、刷入面具并安装\n\n - **工具：**\n\n可手机百度 **酷安**并下载安装--->酷安app中搜索 **\"Magisk \"** 下载安装。\n\n---\n\n- **过程：**\n\n  1. 打开Mgisk看到此页面。\n     ![image-20220721155328467](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721155328467.png)\n\n  2. 开启Maisk ROOT权限:\n     + 返回桌面“**安全中心**”-->“**应用管理**”-->“**权限**”-->\"**ROOT权限管理**\"-->**选上Magisk**（多次警告全部同意）\n  3. (**清理后台或重启手机后**)重新进入Maisk-->点击左上角**菜单栏**看到如下菜单，点击“**设置**”\n     ![image-20220721155433878](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721155433878.png)\n  4. 找到“**更新通道**”\n     ![image-20220721155520989](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721155520989.png)\n  5. 选择“**测试版**”\n     ![image-20220721155601806](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721155601806.png)\n  6. 回到Magisk主页面安装Magisk\n     ![image-20220721155641924](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721155641924.png)\n  7. 选择“直接安装”\n     ![image-20220721155654012](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721155654012.png)\n  8. 等待刷入，显示“All done”，安装成功（若出现安装进度条卡死，请更换网络重试，一般联通流量成功率高）；重启面具安装完成。\n     ![image-20220721155724424](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721155724424.png)\n\n9. 装入所需模块：下载需要模块**记住所放位置**(无需解压)，\n   ![image-20220721155855882](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721155855882.png)\n10. Magisk主页面左上方**菜单栏**-->“**模块**”（找不到说明前面步骤出了问题，解决问题后再试)\n\n![image-20220721160035656](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721160035656.png)\n\n11. “**选择下好的zip格式模块**”-->自动安装，成功后重启生效。\n    ![image-20220721160047520](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721160047520.png)\n12. 重启后再次来到 **“模块”** 这里，整个面具模块完成。\n    ![image-20220721160113642](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721160113642.png)\n\n\n\n---\n ## 五、刷入Xposed框架\n1. 下载第一个模块链接内两个zip文件\n2. 进入magisk模块，刷magisk-riru-core模块，然后刷magisk-EdXposed模块。（方法见上方Magisk模块安装过程）\n    ![image-20220721160203168](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721160203168.png)\n\n3. 下载第二个链接内EdxposedInstaller.apk，安装EdxposedInstaller.apk，看到以下页面表示xp框架安装成功\n   ![image-20220721160218621](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721160218621.png)\n\n----\n ##  六.刷入XP模块\n\n1. 只需下载上方需要模块，APK格式，直接安装。\n2. 安装成功后打开XP软件，左上角菜单栏点击选择“**模块**”\n   ![image-20220721160258947](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721160258947.png)\n3. 进入XP主页，找到菜单，选择“**模块**”，打上对勾**重启**即可。\n   ![image-20220721160309704](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721160309704.png)\n   + 注：如果打开支付宝森林模块和运动模块未生效，可更换支付宝版本。\n\n----\n\n \n\n<center><font color=green size=6 face=\"楷体\">完成了，飞奔吧！</font>\n\n","source":"_posts/BookMark/翻墙刷机/《XP、面具框架玩机》小米手机玩机教程--菜鸟小回.md","raw":"# 《框架玩机》小米手机玩机教程\n\n---\n\n[toc]\n\n---\n\n<center><font color=red>注：刷机有风险，玩机需谨慎。\n 操作不当所造成后果与菜鸟小回无关！！！\n\n\n---\n\n今天来分享小米手机玩机技巧，Magisk面具+Xp框架!\n可能你多上面的名词还有些陌生。\n但下面的手机功能你应该是听说过的，刷步数，虚拟定位，蚂蚁森林自动偷能量，QQ,微信自动抢红包，防撤回，防闪照......也是因为近期好多朋友问我如何实现一些特殊功能，才有我现在的分享！\n看下部分功能：\n**1.部分模块预览**\n![在这里插入图片描述](https://img-1256282866.cos.ap-beijing.myqcloud.com/20190717212437872.png)![在这里插入图片描述](https://img-1256282866.cos.ap-beijing.myqcloud.com/20190717212459469.png)\n\n---\n\n**2.部分模块功能预览**\n\n![image-20220721154345687](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721154345687.png)\n![image-20220721154439132](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721154439132.png)\n![image-20220721154449114](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721154449114.png)\n![在这里插入图片描述](https://img-1256282866.cos.ap-beijing.myqcloud.com/2019071721305823.gif)\n![image-20220721154630183](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721154630183.png)\n\n![image-20220721154703333](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721154703333.png)\n\n部分功能展示完毕，是不是有一丢丢心动呢？以上功能均为本人在用，再提醒一次，刷机过程可能存在数据清除，卡米，无限重启等等后果，虽均有处理方案，但还是**不建议玩机新手学习**。**后果自负！！！**\n\n\n---\n教程开始（小米9为例）：\n**主分六步：**\n **1.刷开发版系统\n 2.解BootLoader锁\n 3.解锁手机root权限\n 4.刷入面具并安装\n 5.刷入Xposed框架\n 6.刷入所需模块**\n## 一、先给你的手机来一个开发版系统 \n此处较为简单，但注意更换版本需要<font color=red>清理掉手机所有数据，请**及时备份**！！！</font>\n[最新开发版包下载](http://www.miui.com/getrom-357.html?m=yes&mobile=2)\n\n1. 首先在官网下载最新卡刷包到手机（记住放的位置，无需解压）。\n\n2. 在系统更新界面点击中间10十下即可激活隐藏功能，右上角点击从本地选择安装包更新。\n   ![image-20220721154718939](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721154718939.png)\n\n3. 选择刚才下载的zip文件就可以了。***注意备份一下数据哦！***\n\n## 二、解BootLoader锁\n1. 在小米官方申请小米解锁        [解锁地址](http://www.miui.com/unlock/index.html)\n\n2. 填写申请解锁信息，然后会出现申请成功，然后就等待小米公司发来的解锁通过短信为基准\n   ![image-20220721154730350](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721154730350.png)\n\n3. 解锁申请通过后请到小米申请解锁链接中下载小米手机解锁工具。\n   ![image-20220721154849708](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721154849708.png)\n\n4. 下载解压之后点击图片中的MiUsbDriver进行安装驱动，如果检测已安装可以忽视此过程。\n   ![image-20220721154905452](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721154905452.png)         \n\n5. 安装成功后我们现在就可以打开miflash_unlock解锁软件了。\n   ![image-20220721154919401](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721154919401.png)\n   ![image-20220721154954560](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721154954560.png)\n\n6. 接下来我们可以来绑定手机设备了。找到手机设备信息，连续点击MIUI系统版本号开启开发者模式。\n\n   ![image-20220721155014921](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721155014921.png)\n\n   + 在设置—更多设置中找到开发者模式\n     ![image-20220721155032367](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721155032367.png)\n\n   7. 在开发者模式里面找到设备就锁状态，小米账号绑定此设备。如图下：\n      ![image-20220721155049830](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721155049830.png)\n   8. 绑定后我们再打开解锁工具。\n      ![image-20220721155102452](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721155102452.png)\n      这时会显示当前未连接手机，我们需要关机手机，“音量键减+开机键同时按”，进入fastboot模式\n      此时会出现一只小兔子，解锁工具会显示已连接手机\n      ![image-20220721155114600](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721155114600.png)    \n   9. 点击下面的解锁按键，出现正在解锁当中。\n      ![image-20220721155136183](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721155136183.png)\n      + 如果出现解锁失败或者是请绑定设备开机后检查是否绑定；重启到fastboot模式重新解锁即可\n        ![image-20220721155155195](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721155155195.png)\n      + 开机后找到开发者模式，如果显示已解锁，说明你就成功了\n        ![image-20220721155203957](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721155203957.png)\n        **到此为止，你的手机已经解锁成功。**\n\n---\n## 三、解锁root权限\n1. 回到安全中心，**应用管理**\n   ![image-20220721155221083](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721155221083.png)\n\n2. 点击 **权限**\n   ![image-20220721155232075](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721155232075.png)\n\n\n\n3. 点击**root权限管理**\n   ![image-20220721155251563](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721155251563.png)\n4. 勾选同意服务，等待进度条走满手机自动重启\n\n5. 重启完成后再回到当前位置查看，可以看到已经可以管理root权限了。\n   ![image-20220721155421058](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721155421058.png)\n\n---\n## 四、刷入面具并安装\n\n - **工具：**\n\n可手机百度 **酷安**并下载安装--->酷安app中搜索 **\"Magisk \"** 下载安装。\n\n---\n\n- **过程：**\n\n  1. 打开Mgisk看到此页面。\n     ![image-20220721155328467](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721155328467.png)\n\n  2. 开启Maisk ROOT权限:\n     + 返回桌面“**安全中心**”-->“**应用管理**”-->“**权限**”-->\"**ROOT权限管理**\"-->**选上Magisk**（多次警告全部同意）\n  3. (**清理后台或重启手机后**)重新进入Maisk-->点击左上角**菜单栏**看到如下菜单，点击“**设置**”\n     ![image-20220721155433878](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721155433878.png)\n  4. 找到“**更新通道**”\n     ![image-20220721155520989](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721155520989.png)\n  5. 选择“**测试版**”\n     ![image-20220721155601806](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721155601806.png)\n  6. 回到Magisk主页面安装Magisk\n     ![image-20220721155641924](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721155641924.png)\n  7. 选择“直接安装”\n     ![image-20220721155654012](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721155654012.png)\n  8. 等待刷入，显示“All done”，安装成功（若出现安装进度条卡死，请更换网络重试，一般联通流量成功率高）；重启面具安装完成。\n     ![image-20220721155724424](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721155724424.png)\n\n9. 装入所需模块：下载需要模块**记住所放位置**(无需解压)，\n   ![image-20220721155855882](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721155855882.png)\n10. Magisk主页面左上方**菜单栏**-->“**模块**”（找不到说明前面步骤出了问题，解决问题后再试)\n\n![image-20220721160035656](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721160035656.png)\n\n11. “**选择下好的zip格式模块**”-->自动安装，成功后重启生效。\n    ![image-20220721160047520](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721160047520.png)\n12. 重启后再次来到 **“模块”** 这里，整个面具模块完成。\n    ![image-20220721160113642](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721160113642.png)\n\n\n\n---\n ## 五、刷入Xposed框架\n1. 下载第一个模块链接内两个zip文件\n2. 进入magisk模块，刷magisk-riru-core模块，然后刷magisk-EdXposed模块。（方法见上方Magisk模块安装过程）\n    ![image-20220721160203168](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721160203168.png)\n\n3. 下载第二个链接内EdxposedInstaller.apk，安装EdxposedInstaller.apk，看到以下页面表示xp框架安装成功\n   ![image-20220721160218621](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721160218621.png)\n\n----\n ##  六.刷入XP模块\n\n1. 只需下载上方需要模块，APK格式，直接安装。\n2. 安装成功后打开XP软件，左上角菜单栏点击选择“**模块**”\n   ![image-20220721160258947](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721160258947.png)\n3. 进入XP主页，找到菜单，选择“**模块**”，打上对勾**重启**即可。\n   ![image-20220721160309704](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721160309704.png)\n   + 注：如果打开支付宝森林模块和运动模块未生效，可更换支付宝版本。\n\n----\n\n \n\n<center><font color=green size=6 face=\"楷体\">完成了，飞奔吧！</font>\n\n","slug":"BookMark/翻墙刷机/《XP、面具框架玩机》小米手机玩机教程--菜鸟小回","published":1,"date":"2022-07-21T08:05:55.000Z","updated":"2022-09-01T10:02:40.580Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cl7ptszop002faba583izg26o","content":"<h1><span id=\"框架玩机小米手机玩机教程\">《框架玩机》小米手机玩机教程</span></h1><hr>\n<p>[toc]</p>\n<hr>\n<center><font color=\"red\">注：刷机有风险，玩机需谨慎。\n 操作不当所造成后果与菜鸟小回无关！！！\n\n\n<hr>\n<p>今天来分享小米手机玩机技巧，Magisk面具+Xp框架!<br>可能你多上面的名词还有些陌生。<br>但下面的手机功能你应该是听说过的，刷步数，虚拟定位，蚂蚁森林自动偷能量，QQ,微信自动抢红包，防撤回，防闪照……也是因为近期好多朋友问我如何实现一些特殊功能，才有我现在的分享！<br>看下部分功能：<br><strong>1.部分模块预览</strong><br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/20190717212437872.png\" alt=\"在这里插入图片描述\"><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/20190717212459469.png\" alt=\"在这里插入图片描述\"></p>\n<hr>\n<p><strong>2.部分模块功能预览</strong></p>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721154345687.png\" alt=\"image-20220721154345687\"><br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721154439132.png\" alt=\"image-20220721154439132\"><br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721154449114.png\" alt=\"image-20220721154449114\"><br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/2019071721305823.gif\" alt=\"在这里插入图片描述\"><br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721154630183.png\" alt=\"image-20220721154630183\"></p>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721154703333.png\" alt=\"image-20220721154703333\"></p>\n<p>部分功能展示完毕，是不是有一丢丢心动呢？以上功能均为本人在用，再提醒一次，刷机过程可能存在数据清除，卡米，无限重启等等后果，虽均有处理方案，但还是<strong>不建议玩机新手学习</strong>。<strong>后果自负！！！</strong></p>\n<hr>\n<p>教程开始（小米9为例）：<br><strong>主分六步：</strong><br> <strong>1.刷开发版系统<br> 2.解BootLoader锁<br> 3.解锁手机root权限<br> 4.刷入面具并安装<br> 5.刷入Xposed框架<br> 6.刷入所需模块</strong></p>\n<h2><span id=\"一-先给你的手机来一个开发版系统\">一、先给你的手机来一个开发版系统</span></h2><p>此处较为简单，但注意更换版本需要<font color=\"red\">清理掉手机所有数据，请<strong>及时备份</strong>！！！</font><br><a href=\"http://www.miui.com/getrom-357.html?m=yes&mobile=2\">最新开发版包下载</a></p>\n<ol>\n<li><p>首先在官网下载最新卡刷包到手机（记住放的位置，无需解压）。</p>\n</li>\n<li><p>在系统更新界面点击中间10十下即可激活隐藏功能，右上角点击从本地选择安装包更新。<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721154718939.png\" alt=\"image-20220721154718939\"></p>\n</li>\n<li><p>选择刚才下载的zip文件就可以了。<em><strong>注意备份一下数据哦！</strong></em></p>\n</li>\n</ol>\n<h2><span id=\"二-解bootloader锁\">二、解BootLoader锁</span></h2><ol>\n<li><p>在小米官方申请小米解锁        <a href=\"http://www.miui.com/unlock/index.html\">解锁地址</a></p>\n</li>\n<li><p>填写申请解锁信息，然后会出现申请成功，然后就等待小米公司发来的解锁通过短信为基准<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721154730350.png\" alt=\"image-20220721154730350\"></p>\n</li>\n<li><p>解锁申请通过后请到小米申请解锁链接中下载小米手机解锁工具。<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721154849708.png\" alt=\"image-20220721154849708\"></p>\n</li>\n<li><p>下载解压之后点击图片中的MiUsbDriver进行安装驱动，如果检测已安装可以忽视此过程。<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721154905452.png\" alt=\"image-20220721154905452\">         </p>\n</li>\n<li><p>安装成功后我们现在就可以打开miflash_unlock解锁软件了。<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721154919401.png\" alt=\"image-20220721154919401\"><br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721154954560.png\" alt=\"image-20220721154954560\"></p>\n</li>\n<li><p>接下来我们可以来绑定手机设备了。找到手机设备信息，连续点击MIUI系统版本号开启开发者模式。</p>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721155014921.png\" alt=\"image-20220721155014921\"></p>\n<ul>\n<li>在设置—更多设置中找到开发者模式<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721155032367.png\" alt=\"image-20220721155032367\"></li>\n</ul>\n<ol start=\"7\">\n<li>在开发者模式里面找到设备就锁状态，小米账号绑定此设备。如图下：<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721155049830.png\" alt=\"image-20220721155049830\"></li>\n<li>绑定后我们再打开解锁工具。<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721155102452.png\" alt=\"image-20220721155102452\"><br>这时会显示当前未连接手机，我们需要关机手机，“音量键减+开机键同时按”，进入fastboot模式<br>此时会出现一只小兔子，解锁工具会显示已连接手机<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721155114600.png\" alt=\"image-20220721155114600\">    </li>\n<li>点击下面的解锁按键，出现正在解锁当中。<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721155136183.png\" alt=\"image-20220721155136183\"><ul>\n<li>如果出现解锁失败或者是请绑定设备开机后检查是否绑定；重启到fastboot模式重新解锁即可<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721155155195.png\" alt=\"image-20220721155155195\"></li>\n<li>开机后找到开发者模式，如果显示已解锁，说明你就成功了<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721155203957.png\" alt=\"image-20220721155203957\"><br><strong>到此为止，你的手机已经解锁成功。</strong></li>\n</ul>\n</li>\n</ol>\n</li>\n</ol>\n<hr>\n<h2><span id=\"三-解锁root权限\">三、解锁root权限</span></h2><ol>\n<li><p>回到安全中心，<strong>应用管理</strong><br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721155221083.png\" alt=\"image-20220721155221083\"></p>\n</li>\n<li><p>点击 <strong>权限</strong><br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721155232075.png\" alt=\"image-20220721155232075\"></p>\n</li>\n<li><p>点击<strong>root权限管理</strong><br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721155251563.png\" alt=\"image-20220721155251563\"></p>\n</li>\n<li><p>勾选同意服务，等待进度条走满手机自动重启</p>\n</li>\n<li><p>重启完成后再回到当前位置查看，可以看到已经可以管理root权限了。<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721155421058.png\" alt=\"image-20220721155421058\"></p>\n</li>\n</ol>\n<hr>\n<h2><span id=\"四-刷入面具并安装\">四、刷入面具并安装</span></h2><ul>\n<li><strong>工具：</strong></li>\n</ul>\n<p>可手机百度 <strong>酷安</strong>并下载安装—&gt;酷安app中搜索 <strong>“Magisk “</strong> 下载安装。</p>\n<hr>\n<ul>\n<li><p><strong>过程：</strong></p>\n<ol>\n<li><p>打开Mgisk看到此页面。<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721155328467.png\" alt=\"image-20220721155328467\"></p>\n</li>\n<li><p>开启Maisk ROOT权限:</p>\n<ul>\n<li>返回桌面“<strong>安全中心</strong>”–&gt;“<strong>应用管理</strong>”–&gt;“<strong>权限</strong>”–&gt;”<strong>ROOT权限管理</strong>“–&gt;<strong>选上Magisk</strong>（多次警告全部同意）</li>\n</ul>\n</li>\n<li><p>(<strong>清理后台或重启手机后</strong>)重新进入Maisk–&gt;点击左上角<strong>菜单栏</strong>看到如下菜单，点击“<strong>设置</strong>”<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721155433878.png\" alt=\"image-20220721155433878\"></p>\n</li>\n<li><p>找到“<strong>更新通道</strong>”<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721155520989.png\" alt=\"image-20220721155520989\"></p>\n</li>\n<li><p>选择“<strong>测试版</strong>”<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721155601806.png\" alt=\"image-20220721155601806\"></p>\n</li>\n<li><p>回到Magisk主页面安装Magisk<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721155641924.png\" alt=\"image-20220721155641924\"></p>\n</li>\n<li><p>选择“直接安装”<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721155654012.png\" alt=\"image-20220721155654012\"></p>\n</li>\n<li><p>等待刷入，显示“All done”，安装成功（若出现安装进度条卡死，请更换网络重试，一般联通流量成功率高）；重启面具安装完成。<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721155724424.png\" alt=\"image-20220721155724424\"></p>\n</li>\n</ol>\n</li>\n</ul>\n<ol start=\"9\">\n<li>装入所需模块：下载需要模块<strong>记住所放位置</strong>(无需解压)，<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721155855882.png\" alt=\"image-20220721155855882\"></li>\n<li>Magisk主页面左上方<strong>菜单栏</strong>–&gt;“<strong>模块</strong>”（找不到说明前面步骤出了问题，解决问题后再试)</li>\n</ol>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721160035656.png\" alt=\"image-20220721160035656\"></p>\n<ol start=\"11\">\n<li>“<strong>选择下好的zip格式模块</strong>”–&gt;自动安装，成功后重启生效。<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721160047520.png\" alt=\"image-20220721160047520\"></li>\n<li>重启后再次来到 <strong>“模块”</strong> 这里，整个面具模块完成。<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721160113642.png\" alt=\"image-20220721160113642\"></li>\n</ol>\n<hr>\n<h2><span id=\"五-刷入xposed框架\">五、刷入Xposed框架</span></h2><ol>\n<li><p>下载第一个模块链接内两个zip文件</p>\n</li>\n<li><p>进入magisk模块，刷magisk-riru-core模块，然后刷magisk-EdXposed模块。（方法见上方Magisk模块安装过程）<br> <img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721160203168.png\" alt=\"image-20220721160203168\"></p>\n</li>\n<li><p>下载第二个链接内EdxposedInstaller.apk，安装EdxposedInstaller.apk，看到以下页面表示xp框架安装成功<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721160218621.png\" alt=\"image-20220721160218621\"></p>\n</li>\n</ol>\n<hr>\n<h2><span id=\"六刷入xp模块\">六.刷入XP模块</span></h2><ol>\n<li>只需下载上方需要模块，APK格式，直接安装。</li>\n<li>安装成功后打开XP软件，左上角菜单栏点击选择“<strong>模块</strong>”<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721160258947.png\" alt=\"image-20220721160258947\"></li>\n<li>进入XP主页，找到菜单，选择“<strong>模块</strong>”，打上对勾<strong>重启</strong>即可。<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721160309704.png\" alt=\"image-20220721160309704\"><ul>\n<li>注：如果打开支付宝森林模块和运动模块未生效，可更换支付宝版本。</li>\n</ul>\n</li>\n</ol>\n<hr>\n<center><font color=\"green\" size=\"6\" face=\"楷体\">完成了，飞奔吧！</font>\n\n</center></font></center>","site":{"data":{}},"wordcount":1800,"excerpt":"","more":"<h1 id=\"《框架玩机》小米手机玩机教程\"><a href=\"#《框架玩机》小米手机玩机教程\" class=\"headerlink\" title=\"《框架玩机》小米手机玩机教程\"></a>《框架玩机》小米手机玩机教程</h1><hr>\n<p>[toc]</p>\n<hr>\n<center><font color=red>注：刷机有风险，玩机需谨慎。\n 操作不当所造成后果与菜鸟小回无关！！！\n\n\n<hr>\n<p>今天来分享小米手机玩机技巧，Magisk面具+Xp框架!<br>可能你多上面的名词还有些陌生。<br>但下面的手机功能你应该是听说过的，刷步数，虚拟定位，蚂蚁森林自动偷能量，QQ,微信自动抢红包，防撤回，防闪照……也是因为近期好多朋友问我如何实现一些特殊功能，才有我现在的分享！<br>看下部分功能：<br><strong>1.部分模块预览</strong><br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/20190717212437872.png\" alt=\"在这里插入图片描述\"><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/20190717212459469.png\" alt=\"在这里插入图片描述\"></p>\n<hr>\n<p><strong>2.部分模块功能预览</strong></p>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721154345687.png\" alt=\"image-20220721154345687\"><br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721154439132.png\" alt=\"image-20220721154439132\"><br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721154449114.png\" alt=\"image-20220721154449114\"><br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/2019071721305823.gif\" alt=\"在这里插入图片描述\"><br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721154630183.png\" alt=\"image-20220721154630183\"></p>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721154703333.png\" alt=\"image-20220721154703333\"></p>\n<p>部分功能展示完毕，是不是有一丢丢心动呢？以上功能均为本人在用，再提醒一次，刷机过程可能存在数据清除，卡米，无限重启等等后果，虽均有处理方案，但还是<strong>不建议玩机新手学习</strong>。<strong>后果自负！！！</strong></p>\n<hr>\n<p>教程开始（小米9为例）：<br><strong>主分六步：</strong><br> <strong>1.刷开发版系统<br> 2.解BootLoader锁<br> 3.解锁手机root权限<br> 4.刷入面具并安装<br> 5.刷入Xposed框架<br> 6.刷入所需模块</strong></p>\n<h2 id=\"一、先给你的手机来一个开发版系统\"><a href=\"#一、先给你的手机来一个开发版系统\" class=\"headerlink\" title=\"一、先给你的手机来一个开发版系统\"></a>一、先给你的手机来一个开发版系统</h2><p>此处较为简单，但注意更换版本需要<font color=red>清理掉手机所有数据，请<strong>及时备份</strong>！！！</font><br><a href=\"http://www.miui.com/getrom-357.html?m=yes&mobile=2\">最新开发版包下载</a></p>\n<ol>\n<li><p>首先在官网下载最新卡刷包到手机（记住放的位置，无需解压）。</p>\n</li>\n<li><p>在系统更新界面点击中间10十下即可激活隐藏功能，右上角点击从本地选择安装包更新。<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721154718939.png\" alt=\"image-20220721154718939\"></p>\n</li>\n<li><p>选择刚才下载的zip文件就可以了。<em><strong>注意备份一下数据哦！</strong></em></p>\n</li>\n</ol>\n<h2 id=\"二、解BootLoader锁\"><a href=\"#二、解BootLoader锁\" class=\"headerlink\" title=\"二、解BootLoader锁\"></a>二、解BootLoader锁</h2><ol>\n<li><p>在小米官方申请小米解锁        <a href=\"http://www.miui.com/unlock/index.html\">解锁地址</a></p>\n</li>\n<li><p>填写申请解锁信息，然后会出现申请成功，然后就等待小米公司发来的解锁通过短信为基准<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721154730350.png\" alt=\"image-20220721154730350\"></p>\n</li>\n<li><p>解锁申请通过后请到小米申请解锁链接中下载小米手机解锁工具。<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721154849708.png\" alt=\"image-20220721154849708\"></p>\n</li>\n<li><p>下载解压之后点击图片中的MiUsbDriver进行安装驱动，如果检测已安装可以忽视此过程。<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721154905452.png\" alt=\"image-20220721154905452\">         </p>\n</li>\n<li><p>安装成功后我们现在就可以打开miflash_unlock解锁软件了。<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721154919401.png\" alt=\"image-20220721154919401\"><br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721154954560.png\" alt=\"image-20220721154954560\"></p>\n</li>\n<li><p>接下来我们可以来绑定手机设备了。找到手机设备信息，连续点击MIUI系统版本号开启开发者模式。</p>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721155014921.png\" alt=\"image-20220721155014921\"></p>\n<ul>\n<li>在设置—更多设置中找到开发者模式<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721155032367.png\" alt=\"image-20220721155032367\"></li>\n</ul>\n<ol start=\"7\">\n<li>在开发者模式里面找到设备就锁状态，小米账号绑定此设备。如图下：<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721155049830.png\" alt=\"image-20220721155049830\"></li>\n<li>绑定后我们再打开解锁工具。<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721155102452.png\" alt=\"image-20220721155102452\"><br>这时会显示当前未连接手机，我们需要关机手机，“音量键减+开机键同时按”，进入fastboot模式<br>此时会出现一只小兔子，解锁工具会显示已连接手机<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721155114600.png\" alt=\"image-20220721155114600\">    </li>\n<li>点击下面的解锁按键，出现正在解锁当中。<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721155136183.png\" alt=\"image-20220721155136183\"><ul>\n<li>如果出现解锁失败或者是请绑定设备开机后检查是否绑定；重启到fastboot模式重新解锁即可<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721155155195.png\" alt=\"image-20220721155155195\"></li>\n<li>开机后找到开发者模式，如果显示已解锁，说明你就成功了<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721155203957.png\" alt=\"image-20220721155203957\"><br><strong>到此为止，你的手机已经解锁成功。</strong></li>\n</ul>\n</li>\n</ol>\n</li>\n</ol>\n<hr>\n<h2 id=\"三、解锁root权限\"><a href=\"#三、解锁root权限\" class=\"headerlink\" title=\"三、解锁root权限\"></a>三、解锁root权限</h2><ol>\n<li><p>回到安全中心，<strong>应用管理</strong><br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721155221083.png\" alt=\"image-20220721155221083\"></p>\n</li>\n<li><p>点击 <strong>权限</strong><br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721155232075.png\" alt=\"image-20220721155232075\"></p>\n</li>\n<li><p>点击<strong>root权限管理</strong><br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721155251563.png\" alt=\"image-20220721155251563\"></p>\n</li>\n<li><p>勾选同意服务，等待进度条走满手机自动重启</p>\n</li>\n<li><p>重启完成后再回到当前位置查看，可以看到已经可以管理root权限了。<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721155421058.png\" alt=\"image-20220721155421058\"></p>\n</li>\n</ol>\n<hr>\n<h2 id=\"四、刷入面具并安装\"><a href=\"#四、刷入面具并安装\" class=\"headerlink\" title=\"四、刷入面具并安装\"></a>四、刷入面具并安装</h2><ul>\n<li><strong>工具：</strong></li>\n</ul>\n<p>可手机百度 <strong>酷安</strong>并下载安装—&gt;酷安app中搜索 <strong>“Magisk “</strong> 下载安装。</p>\n<hr>\n<ul>\n<li><p><strong>过程：</strong></p>\n<ol>\n<li><p>打开Mgisk看到此页面。<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721155328467.png\" alt=\"image-20220721155328467\"></p>\n</li>\n<li><p>开启Maisk ROOT权限:</p>\n<ul>\n<li>返回桌面“<strong>安全中心</strong>”–&gt;“<strong>应用管理</strong>”–&gt;“<strong>权限</strong>”–&gt;”<strong>ROOT权限管理</strong>“–&gt;<strong>选上Magisk</strong>（多次警告全部同意）</li>\n</ul>\n</li>\n<li><p>(<strong>清理后台或重启手机后</strong>)重新进入Maisk–&gt;点击左上角<strong>菜单栏</strong>看到如下菜单，点击“<strong>设置</strong>”<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721155433878.png\" alt=\"image-20220721155433878\"></p>\n</li>\n<li><p>找到“<strong>更新通道</strong>”<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721155520989.png\" alt=\"image-20220721155520989\"></p>\n</li>\n<li><p>选择“<strong>测试版</strong>”<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721155601806.png\" alt=\"image-20220721155601806\"></p>\n</li>\n<li><p>回到Magisk主页面安装Magisk<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721155641924.png\" alt=\"image-20220721155641924\"></p>\n</li>\n<li><p>选择“直接安装”<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721155654012.png\" alt=\"image-20220721155654012\"></p>\n</li>\n<li><p>等待刷入，显示“All done”，安装成功（若出现安装进度条卡死，请更换网络重试，一般联通流量成功率高）；重启面具安装完成。<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721155724424.png\" alt=\"image-20220721155724424\"></p>\n</li>\n</ol>\n</li>\n</ul>\n<ol start=\"9\">\n<li>装入所需模块：下载需要模块<strong>记住所放位置</strong>(无需解压)，<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721155855882.png\" alt=\"image-20220721155855882\"></li>\n<li>Magisk主页面左上方<strong>菜单栏</strong>–&gt;“<strong>模块</strong>”（找不到说明前面步骤出了问题，解决问题后再试)</li>\n</ol>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721160035656.png\" alt=\"image-20220721160035656\"></p>\n<ol start=\"11\">\n<li>“<strong>选择下好的zip格式模块</strong>”–&gt;自动安装，成功后重启生效。<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721160047520.png\" alt=\"image-20220721160047520\"></li>\n<li>重启后再次来到 <strong>“模块”</strong> 这里，整个面具模块完成。<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721160113642.png\" alt=\"image-20220721160113642\"></li>\n</ol>\n<hr>\n<h2 id=\"五、刷入Xposed框架\"><a href=\"#五、刷入Xposed框架\" class=\"headerlink\" title=\"五、刷入Xposed框架\"></a>五、刷入Xposed框架</h2><ol>\n<li><p>下载第一个模块链接内两个zip文件</p>\n</li>\n<li><p>进入magisk模块，刷magisk-riru-core模块，然后刷magisk-EdXposed模块。（方法见上方Magisk模块安装过程）<br> <img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721160203168.png\" alt=\"image-20220721160203168\"></p>\n</li>\n<li><p>下载第二个链接内EdxposedInstaller.apk，安装EdxposedInstaller.apk，看到以下页面表示xp框架安装成功<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721160218621.png\" alt=\"image-20220721160218621\"></p>\n</li>\n</ol>\n<hr>\n<h2 id=\"六-刷入XP模块\"><a href=\"#六-刷入XP模块\" class=\"headerlink\" title=\"六.刷入XP模块\"></a>六.刷入XP模块</h2><ol>\n<li>只需下载上方需要模块，APK格式，直接安装。</li>\n<li>安装成功后打开XP软件，左上角菜单栏点击选择“<strong>模块</strong>”<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721160258947.png\" alt=\"image-20220721160258947\"></li>\n<li>进入XP主页，找到菜单，选择“<strong>模块</strong>”，打上对勾<strong>重启</strong>即可。<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721160309704.png\" alt=\"image-20220721160309704\"><ul>\n<li>注：如果打开支付宝森林模块和运动模块未生效，可更换支付宝版本。</li>\n</ul>\n</li>\n</ol>\n<hr>\n<center><font color=green size=6 face=\"楷体\">完成了，飞奔吧！</font>\n\n"},{"_content":"# Gradle\n\n## build.gradle\n\n```text\n// 配置运行构建脚本的要求\nbuildscript { \n    // 设置自定义属性\n    ext {  \n       springBootVersion = '2.1.6.RELEASE' \n    }  \n    // 解决buildscript块中的依赖项时，检查Maven Central中的依赖项\n    repositories {  \n       mavenCentral()  \n    }  \n    // 我们需要spring boot插件来运行构建脚本\n    dependencies {  \n       classpath(\"org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}\")  \n    }  \n}  \n   \n// 添加构建插件\napply plugin: 'java' \napply plugin: 'org.springframework.boot' \napply plugin: 'io.spring.dependency-management' \n   \n// 设置全局变量\ngroup = 'com.okta.springboottokenauth' \nversion = '0.0.1-SNAPSHOT' \nsourceCompatibility = 1.8 \n   \n// 用于搜索以解决项目依赖关系的仓库地址\nrepositories {  \n    mavenCentral()  \n}  \n \n// 项目依赖\ndependencies {  \n    implementation( 'com.okta.spring:okta-spring-boot-starter:1.2.1' )  \n    implementation('org.springframework.boot:spring-boot-starter-security')  \n    implementation('org.springframework.boot:spring-boot-starter-web')  \n    testImplementation('org.springframework.boot:spring-boot-starter-test')  \n    testImplementation('org.springframework.security:spring-security-test')  \n}\n```","source":"_posts/BookMark/车车笔记/Gradle.md","raw":"# Gradle\n\n## build.gradle\n\n```text\n// 配置运行构建脚本的要求\nbuildscript { \n    // 设置自定义属性\n    ext {  \n       springBootVersion = '2.1.6.RELEASE' \n    }  \n    // 解决buildscript块中的依赖项时，检查Maven Central中的依赖项\n    repositories {  \n       mavenCentral()  \n    }  \n    // 我们需要spring boot插件来运行构建脚本\n    dependencies {  \n       classpath(\"org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}\")  \n    }  \n}  \n   \n// 添加构建插件\napply plugin: 'java' \napply plugin: 'org.springframework.boot' \napply plugin: 'io.spring.dependency-management' \n   \n// 设置全局变量\ngroup = 'com.okta.springboottokenauth' \nversion = '0.0.1-SNAPSHOT' \nsourceCompatibility = 1.8 \n   \n// 用于搜索以解决项目依赖关系的仓库地址\nrepositories {  \n    mavenCentral()  \n}  \n \n// 项目依赖\ndependencies {  \n    implementation( 'com.okta.spring:okta-spring-boot-starter:1.2.1' )  \n    implementation('org.springframework.boot:spring-boot-starter-security')  \n    implementation('org.springframework.boot:spring-boot-starter-web')  \n    testImplementation('org.springframework.boot:spring-boot-starter-test')  \n    testImplementation('org.springframework.security:spring-security-test')  \n}\n```","slug":"BookMark/车车笔记/Gradle","published":1,"date":"2022-07-18T09:51:23.000Z","updated":"2022-07-18T09:51:23.000Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cl7ptszoq002gaba51zzu9pwu","content":"<h1><span id=\"gradle\">Gradle</span></h1><h2><span id=\"buildgradle\">build.gradle</span></h2><figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs text\">// 配置运行构建脚本的要求<br>buildscript &#123; <br>    // 设置自定义属性<br>    ext &#123;  <br>       springBootVersion = &#x27;2.1.6.RELEASE&#x27; <br>    &#125;  <br>    // 解决buildscript块中的依赖项时，检查Maven Central中的依赖项<br>    repositories &#123;  <br>       mavenCentral()  <br>    &#125;  <br>    // 我们需要spring boot插件来运行构建脚本<br>    dependencies &#123;  <br>       classpath(&quot;org.springframework.boot:spring-boot-gradle-plugin:$&#123;springBootVersion&#125;&quot;)  <br>    &#125;  <br>&#125;  <br>   <br>// 添加构建插件<br>apply plugin: &#x27;java&#x27; <br>apply plugin: &#x27;org.springframework.boot&#x27; <br>apply plugin: &#x27;io.spring.dependency-management&#x27; <br>   <br>// 设置全局变量<br>group = &#x27;com.okta.springboottokenauth&#x27; <br>version = &#x27;0.0.1-SNAPSHOT&#x27; <br>sourceCompatibility = 1.8 <br>   <br>// 用于搜索以解决项目依赖关系的仓库地址<br>repositories &#123;  <br>    mavenCentral()  <br>&#125;  <br> <br>// 项目依赖<br>dependencies &#123;  <br>    implementation( &#x27;com.okta.spring:okta-spring-boot-starter:1.2.1&#x27; )  <br>    implementation(&#x27;org.springframework.boot:spring-boot-starter-security&#x27;)  <br>    implementation(&#x27;org.springframework.boot:spring-boot-starter-web&#x27;)  <br>    testImplementation(&#x27;org.springframework.boot:spring-boot-starter-test&#x27;)  <br>    testImplementation(&#x27;org.springframework.security:spring-security-test&#x27;)  <br>&#125;<br></code></pre></td></tr></table></figure>","site":{"data":{}},"wordcount":1154,"excerpt":"","more":"<h1 id=\"Gradle\"><a href=\"#Gradle\" class=\"headerlink\" title=\"Gradle\"></a>Gradle</h1><h2 id=\"build-gradle\"><a href=\"#build-gradle\" class=\"headerlink\" title=\"build.gradle\"></a>build.gradle</h2><figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs text\">// 配置运行构建脚本的要求<br>buildscript &#123; <br>    // 设置自定义属性<br>    ext &#123;  <br>       springBootVersion = &#x27;2.1.6.RELEASE&#x27; <br>    &#125;  <br>    // 解决buildscript块中的依赖项时，检查Maven Central中的依赖项<br>    repositories &#123;  <br>       mavenCentral()  <br>    &#125;  <br>    // 我们需要spring boot插件来运行构建脚本<br>    dependencies &#123;  <br>       classpath(&quot;org.springframework.boot:spring-boot-gradle-plugin:$&#123;springBootVersion&#125;&quot;)  <br>    &#125;  <br>&#125;  <br>   <br>// 添加构建插件<br>apply plugin: &#x27;java&#x27; <br>apply plugin: &#x27;org.springframework.boot&#x27; <br>apply plugin: &#x27;io.spring.dependency-management&#x27; <br>   <br>// 设置全局变量<br>group = &#x27;com.okta.springboottokenauth&#x27; <br>version = &#x27;0.0.1-SNAPSHOT&#x27; <br>sourceCompatibility = 1.8 <br>   <br>// 用于搜索以解决项目依赖关系的仓库地址<br>repositories &#123;  <br>    mavenCentral()  <br>&#125;  <br> <br>// 项目依赖<br>dependencies &#123;  <br>    implementation( &#x27;com.okta.spring:okta-spring-boot-starter:1.2.1&#x27; )  <br>    implementation(&#x27;org.springframework.boot:spring-boot-starter-security&#x27;)  <br>    implementation(&#x27;org.springframework.boot:spring-boot-starter-web&#x27;)  <br>    testImplementation(&#x27;org.springframework.boot:spring-boot-starter-test&#x27;)  <br>    testImplementation(&#x27;org.springframework.security:spring-security-test&#x27;)  <br>&#125;<br></code></pre></td></tr></table></figure>"},{"_content":"\n\n[toc]\n\n# Spring Data JPA 框架笔记\n\n## 一、简介\n\nSpring Data Jpa 是应⽤于Dao层的⼀个框架，简化数据库开发的，作⽤和Mybatis框架⼀样，但是在使\n\n⽤⽅式和底层机制是有所不同的。最明显的⼀个特点，Spring Data Jpa 开发Dao的时候，很多场景我们\n\n连sql语句都不需要开发。\n\nJPA 是⼀套规范，内部是由接⼝和抽象类组成的，Hiberanate 是⼀套成熟的 ORM 框架，⽽且\n\nHiberanate 实现了 JPA 规范，所以可以称 Hiberanate 为 JPA 的⼀种实现⽅式，我们使⽤ JPA 的 API 编\n\n程，意味着站在更⾼的⻆度去看待问题（⾯向接⼝编程）。\n\nSpring Data JPA 是 Spring 提供的⼀套对 JPA 操作更加⾼级的封装，是在 JPA 规范下的专⻔⽤来进⾏数\n\n据持久化的解决⽅案。\n\n![image-20210915213027309](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20210915213027309.png)\n\n\n## 二、JPA常用方法\n\n### 1.更新或保存save\n\n如果有id，先按照id查询，如果不存在，则存入除id外的对象，更新时空元素会覆盖原有信息，并不是不替换该字段\n\n```\n//更新或保存；如果有id，先按照id查询，如果不存在，则存入除id外的对象\n//select age0_.id as id1_0_0_, age0_.age as age2_0_0_, age0_.name as name3_0_0_ from tb_age age0_ where age0_.id=?\n//insert into tb_age (age, name) values (?, ?)\nAge newAge=new Age();\nnewAge.setId(2L);\nnewAge.setAge(26);\n//更新时空元素会覆盖原有信息，并不是不替换该字段\nAge save = ageDao.save(newAge);\nSystem.out.println(\"save:\"+save);\n//自写sql\n@Transactional\n@Modifying\n@Query(value = \"update suspend_record set status = ?1 where status=?2 and start_time<=?3 \", nativeQuery = true)\nInteger updateWaitStatus(Integer status1,Integer status2,Date date);\n\n@Transactional\n@Modifying\n@Query(value = \"update suspend_auto set disable = :state WHERE  mobile = :mobile and activity_id = :activityId and license_plate_no = :licensePlateNo\", nativeQuery = true)\nInteger updateSuspendAutoState(@Param(\"mobile\") String mobile, @Param(\"activityId\") Long activityId,\n@Param(\"licensePlateNo\") String licensePlateNo, @Param(\"state\") Integer state);\n```\n\n### 2.删除deleteById，delete\n\n```\n//删除\n//delete from tb_age where id=?\n//ageDao.deleteById(3L);\nageDao.delete(save);\n```\n\n### 3.简单查询findById，findOne，findAll\n\n```\n//通过id查询一个对象\n//select age0_.id as id1_0_0_, age0_.age as age2_0_0_, age0_.name as name3_0_0_ from tb_age age0_ where age0_.id=?\nOptional<Age> byId = ageDao.findById(1L);\nSystem.out.println(\"findById:\"+byId.get());\n\n//通过条件查询一个对象\n//select age0_.id as id1_0_, age0_.age as age2_0_, age0_.name as name3_0_ from tb_age age0_ where age0_.age=23\nAge age=new Age();\nage.setAge(20);\nExample<Age> example = Example.of(age);\nOptional<Age> one = ageDao.findOne(example);\nSystem.out.println(\"findOne:\"+one.get());\n\n\n```\n\n### 4.分页排序查询\n\n```\n//查询全部，分页并按照id逆序\n//select age0_.id as id1_0_, age0_.age as age2_0_, age0_.name as name3_0_ from tb_age age0_\nSort sort = Sort.by(Sort.Direction.DESC,\"id\");\nPageable pageable = PageRequest.of(0, 10, sort);\nPage<Age> all = ageDao.findAll(pageable);\nSystem.out.println(all.getContent());\n```\n\n### 5.自定义查询\n\n+ dao层\n\n```\npublic interface AgeDao extends JpaRepository<Age,Long>, JpaSpecificationExecutor<Age> {\n@Query(\"from Age where age=?1 and name=?2\")\nList<Age> findByjPQL(Integer age,String name);\n\n@Query(value = \"select * from tb_age where age=?1 and name like ?2\",nativeQuery = true)\nList<Age> findBySQL(Integer age,String name);\n\nList<Age> findByAgeAndNameLike(Integer age,String name);\n}\n```\n\n+ 使用\n\n```\n//通过jpql查询\n//select age0_.id as id1_0_, age0_.age as age2_0_, age0_.name as name3_0_ from tb_age age0_ where age0_.age=? and age0_.name=?\nList<Age> byjPQL = ageDao.findByjPQL(20,\"张三\");\nbyjPQL.forEach(System.out::println);\n\n//通过sql查询\n//select * from tb_age where age=? and name like ?\nList<Age> bySQL = ageDao.findBySQL(20, \"张%\");\nbySQL.forEach(System.out::println);\n\n//通过方法命名规则查询\n//select age0_.id as id1_0_, age0_.age as age2_0_, age0_.name as name3_0_ from tb_age age0_ where age0_.age=? and (age0_.name like ? escape ?)\nList<Age> ages = ageDao.findByAgeAndNameLike(20, \"张%\");\nages.forEach(System.out::println);\n```\n\n### 6.动态查询，分页，排序\n\n    Age age1=new Age();\n    age1.setName(\"张%\");\n    //动态查询\n    List<Age> dynamic = dynamicQuery(age1);\n    dynamic.forEach(System.out::println);\n    \n    /**\n     * 动态查询\n     * @param age 通过传入对象值是否为空动态查询,并按照id排序\n     * @return 查询到的集合\n     */\n    Page<Age> dynamicQuery(Age age){\n        Specification<Age> specification = new Specification<Age>() {\n            @Override\n            public Predicate toPredicate(Root<Age> root, CriteriaQuery<?> query, CriteriaBuilder builder) {\n                Path age1 = root.<Integer>get(\"age\");\n                Path name = root.<String>get(\"name\");\n                List<Predicate> predicates = new ArrayList<>();\n                if (age.getAge()!=null){\n                    predicates.add(builder.equal(age1, age.getAge()));\n                }\n                if (age.getName()!=null){\n                    predicates.add(builder.like(name.as(String.class), age.getName()));\n                }\n                Order order = builder.desc(root.<Long>get(\"id\"));\n                Predicate where = builder.and(predicates.toArray(new Predicate[predicates.size()]));\n                query.where(where);\n                query.orderBy(order);\n                return query.getRestriction();\n            }\n        };\n        return ageDao.findAll(specification，PageRequest.of(0, 10, new Sort(Sort.Direction.DESC,\"id\")）);\n    }\n\n### 7.关联查询\n\n+ 实体类\n\n  ```javascript?linenums\n  //age\n  @Entity\n  @Table(name = \"tb_age\")\n  public class Age implements Serializable {\n      private static final long serialVersionUID=1L;\n      @Id\n      @GeneratedValue(strategy = GenerationType.IDENTITY)\n      @Column(name = \"id\")\n      private Long id;\n      @Column(name = \"name\")\n      private String name;\n      @Column(name = \"age\")\n      private Integer age;\n  \n      @OneToOne(fetch = FetchType.EAGER)\n      @NotFound(action = NotFoundAction.IGNORE)\n      @JoinColumn(name = \"name\", referencedColumnName = \"name\", insertable = false, updatable = false)\n      private Resume resume;\n  }\n  //resume\n  @Entity\n  @Table(name = \"tb_resume\")\n  public class Resume implements Serializable {\n      private static final long serialVersionUID=1L;\n      @Id\n      @GeneratedValue(strategy = GenerationType.IDENTITY)\n      @Column(name = \"id\")\n      private Long id;\n      @Column(name = \"name\")\n      private String name;\n      @Column(name = \"address\")\n      private String address;\n      @Column(name = \"phone\")\n      private String phone;\n  }\n  ```\n\n+ 用法\n\n```\n//关联查询\nList<Age> ages1 = joinQuery(null,\"张%\" ,\"1%\");\nages1.forEach(System.out::println);\n\n/**\n * 通过age表左连接resume表，关联字段为name\n * @param age age表年龄\n * @param name age表姓名\n * @param phone resume表电话\n * @return age实体\n */\nList<Age> joinQuery(Integer age,String name,String phone){\n    Specification<Age> specification = new Specification<Age>() {\n        @Override\n        public Predicate toPredicate(Root<Age> root, CriteriaQuery<?> query, CriteriaBuilder builder) {\n            Path agePath = root.<Integer>get(\"age\");\n            Path namePath = root.<String>get(\"name\");\n            //先副表，再主表，左连接\n            Join<Resume, Object> join = root.join(\"resume\", JoinType.LEFT);\n            Path phonePath = join.<String>get(\"phone\");\n            List<Predicate> predicates = new ArrayList<>();\n            if (age!=null){\n                predicates.add(builder.equal(agePath, age));\n            }\n            if (name!=null){\n                predicates.add(builder.like(namePath.as(String.class), name));\n            }\n            if (phone!=null){\n                predicates.add(builder.like(phonePath.as(String.class),phone));\n            }\n            Order order = builder.desc(root.<Long>get(\"id\"));\n            Predicate where = builder.and(predicates.toArray(new Predicate[predicates.size()]));\n            query.where(where);\n            query.orderBy(order);\n            return query.getRestriction();\n        }\n    };\n    return ageDao.findAll(specification);\n}\n```\n\n## 三、解决Save方法null值覆盖\n\nJPA原生Save方法会导致null属性覆盖到数据库,重写方法实现null属性不再覆盖\n\n### 1. 新建类\n\n```\npackage com.cheche365.ccgeneral.service.util;\n\nimport org.springframework.beans.BeanUtils;\nimport org.springframework.beans.BeanWrapper;\nimport org.springframework.beans.BeanWrapperImpl;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.data.jpa.repository.support.JpaEntityInformation;\nimport org.springframework.data.jpa.repository.support.SimpleJpaRepository;\nimport org.springframework.transaction.annotation.Transactional;\nimport org.springframework.util.StringUtils;\n\nimport javax.persistence.EntityManager;\nimport java.beans.PropertyDescriptor;\nimport java.util.HashSet;\nimport java.util.Optional;\nimport java.util.Set;\n\n/**\n * @Author: hbq\n * @Description: JPA原生Save方法会导致null属性覆盖到数据库,重写方法实现null属性不再覆盖\n * @Date: 2021/10/21 14:24\n */\npublic class SimpleJpaRepositoryImpl<T, ID> extends SimpleJpaRepository<T, ID> {\n\n    private final JpaEntityInformation<T, ?> entityInformation;\n    private final EntityManager em;\n\n    @Autowired\n    public SimpleJpaRepositoryImpl(JpaEntityInformation<T, ?> entityInformation, EntityManager entityManager) {\n        super(entityInformation, entityManager);\n        this.entityInformation = entityInformation;\n        this.em = entityManager;\n    }\n\n    /**\n     * 通用save方法 ：新增/选择性更新\n     */\n    @Override\n    @Transactional(rollbackFor = Exception.class)\n    public <S extends T> S save(S entity) {\n        //获取ID\n        ID entityId = (ID) entityInformation.getId(entity);\n        Optional<T> optionalT;\n        if (StringUtils.isEmpty(entityId)) {\n            optionalT = Optional.empty();\n        } else {\n            //若ID非空 则查询最新数据\n            optionalT = findById(entityId);\n        }\n        //获取空属性并处理成null\n        String[] nullProperties = getNullProperties(entity);\n        //若根据ID查询结果为空\n        if (!optionalT.isPresent()) {\n            //新增\n            em.persist(entity);\n            return entity;\n        } else {\n            //1.获取最新对象\n            T target = optionalT.get();\n            //2.将非空属性覆盖到最新对象\n            BeanUtils.copyProperties(entity, target, nullProperties);\n            //3.更新非空属性\n            em.merge(target);\n            return entity;\n        }\n    }\n\n    /**\n     * 获取对象的空属性\n     */\n    private static String[] getNullProperties(Object src) {\n        //1.获取Bean\n        BeanWrapper srcBean = new BeanWrapperImpl(src);\n        //2.获取Bean的属性描述\n        PropertyDescriptor[] pds = srcBean.getPropertyDescriptors();\n        //3.获取Bean的空属性\n        Set<String> properties = new HashSet<>();\n        for (PropertyDescriptor propertyDescriptor : pds) {\n            String propertyName = propertyDescriptor.getName();\n            Object propertyValue = srcBean.getPropertyValue(propertyName);\n            if (StringUtils.isEmpty(propertyValue)) {\n                srcBean.setPropertyValue(propertyName, null);\n                properties.add(propertyName);\n            }\n        }\n        return properties.toArray(new String[0]);\n    }\n}\n```\n\n### 2. 启动类加注解\n\n```typescript\n@EnableJpaRepositories(repositoryBaseClass = SimpleJpaRepositoryImpl.class)\n```\n\n## 四、常用JPA方法命名规则\n\n| 关键词                 | 样本                                                         | JPQL 片段                                                    |\n| :--------------------- | :----------------------------------------------------------- | :----------------------------------------------------------- |\n| `Distinct`             | `findDistinctByLastnameAndFirstname`                         | `select distinct … where x.lastname = ?1 and x.firstname = ?2` |\n| `And`                  | `findByLastnameAndFirstname`                                 | `… where x.lastname = ?1 and x.firstname = ?2`               |\n| `Or`                   | `findByLastnameOrFirstname`                                  | `… where x.lastname = ?1 or x.firstname = ?2`                |\n| `Is`, `Equals`         | `findByFirstname`, `findByFirstnameIs`,`findByFirstnameEquals` | `… where x.firstname = ?1`                                   |\n| `Between`              | `findByStartDateBetween`                                     | `… where x.startDate between ?1 and ?2`                      |\n| `LessThan`             | `findByAgeLessThan`                                          | `… where x.age < ?1`                                         |\n| `LessThanEqual`        | `findByAgeLessThanEqual`                                     | `… where x.age <= ?1`                                        |\n| `GreaterThan`          | `findByAgeGreaterThan`                                       | `… where x.age > ?1`                                         |\n| `GreaterThanEqual`     | `findByAgeGreaterThanEqual`                                  | `… where x.age >= ?1`                                        |\n| `After`                | `findByStartDateAfter`                                       | `… where x.startDate > ?1`                                   |\n| `Before`               | `findByStartDateBefore`                                      | `… where x.startDate < ?1`                                   |\n| `IsNull`, `Null`       | `findByAge(Is)Null`                                          | `… where x.age is null`                                      |\n| `IsNotNull`, `NotNull` | `findByAge(Is)NotNull`                                       | `… where x.age not null`                                     |\n| `Like`                 | `findByFirstnameLike`                                        | `… where x.firstname like ?1`                                |\n| `NotLike`              | `findByFirstnameNotLike`                                     | `… where x.firstname not like ?1`                            |\n| `StartingWith`         | `findByFirstnameStartingWith`                                | `… where x.firstname like ?1`（参数绑定了 append `%`）       |\n| `EndingWith`           | `findByFirstnameEndingWith`                                  | `… where x.firstname like ?1`（参数绑定 prepended `%`）      |\n| `Containing`           | `findByFirstnameContaining`                                  | `… where x.firstname like ?1`（参数绑定包裹在`%`）           |\n| `OrderBy`              | `findByAgeOrderByLastnameDesc`                               | `… where x.age = ?1 order by x.lastname desc`                |\n| `Not`                  | `findByLastnameNot`                                          | `… where x.lastname <> ?1`                                   |\n| `In`                   | `findByAgeIn(Collection<Age> ages)`                          | `… where x.age in ?1`                                        |\n| `NotIn`                | `findByAgeNotIn(Collection<Age> ages)`                       | `… where x.age not in ?1`                                    |\n| `True`                 | `findByActiveTrue()`                                         | `… where x.active = true`                                    |\n| `False`                | `findByActiveFalse()`                                        | `… where x.active = false`                                   |\n| `IgnoreCase`           | `findByFirstnameIgnoreCase`                                  | `… where UPPER(x.firstname) = UPPER(?1)`                     |\n\n```\ndocker run -d --name=webdav-aliyundriver --restart=always -p 8080:8080  -v /etc/localtime:/etc/localtime -v /etc/aliyun-driver/:/etc/aliyun-driver/ -e TZ=\"Asia/Shanghai\" -e ALIYUNDRIVE_REFRESH_TOKEN=\"91dac35e525c47ebb2bc7d0753875c0e\" -e ALIYUNDRIVE_AUTH_PASSWORD=\"HBQ521521cf*\" -e JAVA_OPTS=\"-Xmx1g\" zx5253/webdav-aliyundriver\n```\n\nhttp://my.huijia21.com/\n\n","source":"_posts/BookMark/车车笔记/Spring Data JPA.md","raw":"\n\n[toc]\n\n# Spring Data JPA 框架笔记\n\n## 一、简介\n\nSpring Data Jpa 是应⽤于Dao层的⼀个框架，简化数据库开发的，作⽤和Mybatis框架⼀样，但是在使\n\n⽤⽅式和底层机制是有所不同的。最明显的⼀个特点，Spring Data Jpa 开发Dao的时候，很多场景我们\n\n连sql语句都不需要开发。\n\nJPA 是⼀套规范，内部是由接⼝和抽象类组成的，Hiberanate 是⼀套成熟的 ORM 框架，⽽且\n\nHiberanate 实现了 JPA 规范，所以可以称 Hiberanate 为 JPA 的⼀种实现⽅式，我们使⽤ JPA 的 API 编\n\n程，意味着站在更⾼的⻆度去看待问题（⾯向接⼝编程）。\n\nSpring Data JPA 是 Spring 提供的⼀套对 JPA 操作更加⾼级的封装，是在 JPA 规范下的专⻔⽤来进⾏数\n\n据持久化的解决⽅案。\n\n![image-20210915213027309](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20210915213027309.png)\n\n\n## 二、JPA常用方法\n\n### 1.更新或保存save\n\n如果有id，先按照id查询，如果不存在，则存入除id外的对象，更新时空元素会覆盖原有信息，并不是不替换该字段\n\n```\n//更新或保存；如果有id，先按照id查询，如果不存在，则存入除id外的对象\n//select age0_.id as id1_0_0_, age0_.age as age2_0_0_, age0_.name as name3_0_0_ from tb_age age0_ where age0_.id=?\n//insert into tb_age (age, name) values (?, ?)\nAge newAge=new Age();\nnewAge.setId(2L);\nnewAge.setAge(26);\n//更新时空元素会覆盖原有信息，并不是不替换该字段\nAge save = ageDao.save(newAge);\nSystem.out.println(\"save:\"+save);\n//自写sql\n@Transactional\n@Modifying\n@Query(value = \"update suspend_record set status = ?1 where status=?2 and start_time<=?3 \", nativeQuery = true)\nInteger updateWaitStatus(Integer status1,Integer status2,Date date);\n\n@Transactional\n@Modifying\n@Query(value = \"update suspend_auto set disable = :state WHERE  mobile = :mobile and activity_id = :activityId and license_plate_no = :licensePlateNo\", nativeQuery = true)\nInteger updateSuspendAutoState(@Param(\"mobile\") String mobile, @Param(\"activityId\") Long activityId,\n@Param(\"licensePlateNo\") String licensePlateNo, @Param(\"state\") Integer state);\n```\n\n### 2.删除deleteById，delete\n\n```\n//删除\n//delete from tb_age where id=?\n//ageDao.deleteById(3L);\nageDao.delete(save);\n```\n\n### 3.简单查询findById，findOne，findAll\n\n```\n//通过id查询一个对象\n//select age0_.id as id1_0_0_, age0_.age as age2_0_0_, age0_.name as name3_0_0_ from tb_age age0_ where age0_.id=?\nOptional<Age> byId = ageDao.findById(1L);\nSystem.out.println(\"findById:\"+byId.get());\n\n//通过条件查询一个对象\n//select age0_.id as id1_0_, age0_.age as age2_0_, age0_.name as name3_0_ from tb_age age0_ where age0_.age=23\nAge age=new Age();\nage.setAge(20);\nExample<Age> example = Example.of(age);\nOptional<Age> one = ageDao.findOne(example);\nSystem.out.println(\"findOne:\"+one.get());\n\n\n```\n\n### 4.分页排序查询\n\n```\n//查询全部，分页并按照id逆序\n//select age0_.id as id1_0_, age0_.age as age2_0_, age0_.name as name3_0_ from tb_age age0_\nSort sort = Sort.by(Sort.Direction.DESC,\"id\");\nPageable pageable = PageRequest.of(0, 10, sort);\nPage<Age> all = ageDao.findAll(pageable);\nSystem.out.println(all.getContent());\n```\n\n### 5.自定义查询\n\n+ dao层\n\n```\npublic interface AgeDao extends JpaRepository<Age,Long>, JpaSpecificationExecutor<Age> {\n@Query(\"from Age where age=?1 and name=?2\")\nList<Age> findByjPQL(Integer age,String name);\n\n@Query(value = \"select * from tb_age where age=?1 and name like ?2\",nativeQuery = true)\nList<Age> findBySQL(Integer age,String name);\n\nList<Age> findByAgeAndNameLike(Integer age,String name);\n}\n```\n\n+ 使用\n\n```\n//通过jpql查询\n//select age0_.id as id1_0_, age0_.age as age2_0_, age0_.name as name3_0_ from tb_age age0_ where age0_.age=? and age0_.name=?\nList<Age> byjPQL = ageDao.findByjPQL(20,\"张三\");\nbyjPQL.forEach(System.out::println);\n\n//通过sql查询\n//select * from tb_age where age=? and name like ?\nList<Age> bySQL = ageDao.findBySQL(20, \"张%\");\nbySQL.forEach(System.out::println);\n\n//通过方法命名规则查询\n//select age0_.id as id1_0_, age0_.age as age2_0_, age0_.name as name3_0_ from tb_age age0_ where age0_.age=? and (age0_.name like ? escape ?)\nList<Age> ages = ageDao.findByAgeAndNameLike(20, \"张%\");\nages.forEach(System.out::println);\n```\n\n### 6.动态查询，分页，排序\n\n    Age age1=new Age();\n    age1.setName(\"张%\");\n    //动态查询\n    List<Age> dynamic = dynamicQuery(age1);\n    dynamic.forEach(System.out::println);\n    \n    /**\n     * 动态查询\n     * @param age 通过传入对象值是否为空动态查询,并按照id排序\n     * @return 查询到的集合\n     */\n    Page<Age> dynamicQuery(Age age){\n        Specification<Age> specification = new Specification<Age>() {\n            @Override\n            public Predicate toPredicate(Root<Age> root, CriteriaQuery<?> query, CriteriaBuilder builder) {\n                Path age1 = root.<Integer>get(\"age\");\n                Path name = root.<String>get(\"name\");\n                List<Predicate> predicates = new ArrayList<>();\n                if (age.getAge()!=null){\n                    predicates.add(builder.equal(age1, age.getAge()));\n                }\n                if (age.getName()!=null){\n                    predicates.add(builder.like(name.as(String.class), age.getName()));\n                }\n                Order order = builder.desc(root.<Long>get(\"id\"));\n                Predicate where = builder.and(predicates.toArray(new Predicate[predicates.size()]));\n                query.where(where);\n                query.orderBy(order);\n                return query.getRestriction();\n            }\n        };\n        return ageDao.findAll(specification，PageRequest.of(0, 10, new Sort(Sort.Direction.DESC,\"id\")）);\n    }\n\n### 7.关联查询\n\n+ 实体类\n\n  ```javascript?linenums\n  //age\n  @Entity\n  @Table(name = \"tb_age\")\n  public class Age implements Serializable {\n      private static final long serialVersionUID=1L;\n      @Id\n      @GeneratedValue(strategy = GenerationType.IDENTITY)\n      @Column(name = \"id\")\n      private Long id;\n      @Column(name = \"name\")\n      private String name;\n      @Column(name = \"age\")\n      private Integer age;\n  \n      @OneToOne(fetch = FetchType.EAGER)\n      @NotFound(action = NotFoundAction.IGNORE)\n      @JoinColumn(name = \"name\", referencedColumnName = \"name\", insertable = false, updatable = false)\n      private Resume resume;\n  }\n  //resume\n  @Entity\n  @Table(name = \"tb_resume\")\n  public class Resume implements Serializable {\n      private static final long serialVersionUID=1L;\n      @Id\n      @GeneratedValue(strategy = GenerationType.IDENTITY)\n      @Column(name = \"id\")\n      private Long id;\n      @Column(name = \"name\")\n      private String name;\n      @Column(name = \"address\")\n      private String address;\n      @Column(name = \"phone\")\n      private String phone;\n  }\n  ```\n\n+ 用法\n\n```\n//关联查询\nList<Age> ages1 = joinQuery(null,\"张%\" ,\"1%\");\nages1.forEach(System.out::println);\n\n/**\n * 通过age表左连接resume表，关联字段为name\n * @param age age表年龄\n * @param name age表姓名\n * @param phone resume表电话\n * @return age实体\n */\nList<Age> joinQuery(Integer age,String name,String phone){\n    Specification<Age> specification = new Specification<Age>() {\n        @Override\n        public Predicate toPredicate(Root<Age> root, CriteriaQuery<?> query, CriteriaBuilder builder) {\n            Path agePath = root.<Integer>get(\"age\");\n            Path namePath = root.<String>get(\"name\");\n            //先副表，再主表，左连接\n            Join<Resume, Object> join = root.join(\"resume\", JoinType.LEFT);\n            Path phonePath = join.<String>get(\"phone\");\n            List<Predicate> predicates = new ArrayList<>();\n            if (age!=null){\n                predicates.add(builder.equal(agePath, age));\n            }\n            if (name!=null){\n                predicates.add(builder.like(namePath.as(String.class), name));\n            }\n            if (phone!=null){\n                predicates.add(builder.like(phonePath.as(String.class),phone));\n            }\n            Order order = builder.desc(root.<Long>get(\"id\"));\n            Predicate where = builder.and(predicates.toArray(new Predicate[predicates.size()]));\n            query.where(where);\n            query.orderBy(order);\n            return query.getRestriction();\n        }\n    };\n    return ageDao.findAll(specification);\n}\n```\n\n## 三、解决Save方法null值覆盖\n\nJPA原生Save方法会导致null属性覆盖到数据库,重写方法实现null属性不再覆盖\n\n### 1. 新建类\n\n```\npackage com.cheche365.ccgeneral.service.util;\n\nimport org.springframework.beans.BeanUtils;\nimport org.springframework.beans.BeanWrapper;\nimport org.springframework.beans.BeanWrapperImpl;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.data.jpa.repository.support.JpaEntityInformation;\nimport org.springframework.data.jpa.repository.support.SimpleJpaRepository;\nimport org.springframework.transaction.annotation.Transactional;\nimport org.springframework.util.StringUtils;\n\nimport javax.persistence.EntityManager;\nimport java.beans.PropertyDescriptor;\nimport java.util.HashSet;\nimport java.util.Optional;\nimport java.util.Set;\n\n/**\n * @Author: hbq\n * @Description: JPA原生Save方法会导致null属性覆盖到数据库,重写方法实现null属性不再覆盖\n * @Date: 2021/10/21 14:24\n */\npublic class SimpleJpaRepositoryImpl<T, ID> extends SimpleJpaRepository<T, ID> {\n\n    private final JpaEntityInformation<T, ?> entityInformation;\n    private final EntityManager em;\n\n    @Autowired\n    public SimpleJpaRepositoryImpl(JpaEntityInformation<T, ?> entityInformation, EntityManager entityManager) {\n        super(entityInformation, entityManager);\n        this.entityInformation = entityInformation;\n        this.em = entityManager;\n    }\n\n    /**\n     * 通用save方法 ：新增/选择性更新\n     */\n    @Override\n    @Transactional(rollbackFor = Exception.class)\n    public <S extends T> S save(S entity) {\n        //获取ID\n        ID entityId = (ID) entityInformation.getId(entity);\n        Optional<T> optionalT;\n        if (StringUtils.isEmpty(entityId)) {\n            optionalT = Optional.empty();\n        } else {\n            //若ID非空 则查询最新数据\n            optionalT = findById(entityId);\n        }\n        //获取空属性并处理成null\n        String[] nullProperties = getNullProperties(entity);\n        //若根据ID查询结果为空\n        if (!optionalT.isPresent()) {\n            //新增\n            em.persist(entity);\n            return entity;\n        } else {\n            //1.获取最新对象\n            T target = optionalT.get();\n            //2.将非空属性覆盖到最新对象\n            BeanUtils.copyProperties(entity, target, nullProperties);\n            //3.更新非空属性\n            em.merge(target);\n            return entity;\n        }\n    }\n\n    /**\n     * 获取对象的空属性\n     */\n    private static String[] getNullProperties(Object src) {\n        //1.获取Bean\n        BeanWrapper srcBean = new BeanWrapperImpl(src);\n        //2.获取Bean的属性描述\n        PropertyDescriptor[] pds = srcBean.getPropertyDescriptors();\n        //3.获取Bean的空属性\n        Set<String> properties = new HashSet<>();\n        for (PropertyDescriptor propertyDescriptor : pds) {\n            String propertyName = propertyDescriptor.getName();\n            Object propertyValue = srcBean.getPropertyValue(propertyName);\n            if (StringUtils.isEmpty(propertyValue)) {\n                srcBean.setPropertyValue(propertyName, null);\n                properties.add(propertyName);\n            }\n        }\n        return properties.toArray(new String[0]);\n    }\n}\n```\n\n### 2. 启动类加注解\n\n```typescript\n@EnableJpaRepositories(repositoryBaseClass = SimpleJpaRepositoryImpl.class)\n```\n\n## 四、常用JPA方法命名规则\n\n| 关键词                 | 样本                                                         | JPQL 片段                                                    |\n| :--------------------- | :----------------------------------------------------------- | :----------------------------------------------------------- |\n| `Distinct`             | `findDistinctByLastnameAndFirstname`                         | `select distinct … where x.lastname = ?1 and x.firstname = ?2` |\n| `And`                  | `findByLastnameAndFirstname`                                 | `… where x.lastname = ?1 and x.firstname = ?2`               |\n| `Or`                   | `findByLastnameOrFirstname`                                  | `… where x.lastname = ?1 or x.firstname = ?2`                |\n| `Is`, `Equals`         | `findByFirstname`, `findByFirstnameIs`,`findByFirstnameEquals` | `… where x.firstname = ?1`                                   |\n| `Between`              | `findByStartDateBetween`                                     | `… where x.startDate between ?1 and ?2`                      |\n| `LessThan`             | `findByAgeLessThan`                                          | `… where x.age < ?1`                                         |\n| `LessThanEqual`        | `findByAgeLessThanEqual`                                     | `… where x.age <= ?1`                                        |\n| `GreaterThan`          | `findByAgeGreaterThan`                                       | `… where x.age > ?1`                                         |\n| `GreaterThanEqual`     | `findByAgeGreaterThanEqual`                                  | `… where x.age >= ?1`                                        |\n| `After`                | `findByStartDateAfter`                                       | `… where x.startDate > ?1`                                   |\n| `Before`               | `findByStartDateBefore`                                      | `… where x.startDate < ?1`                                   |\n| `IsNull`, `Null`       | `findByAge(Is)Null`                                          | `… where x.age is null`                                      |\n| `IsNotNull`, `NotNull` | `findByAge(Is)NotNull`                                       | `… where x.age not null`                                     |\n| `Like`                 | `findByFirstnameLike`                                        | `… where x.firstname like ?1`                                |\n| `NotLike`              | `findByFirstnameNotLike`                                     | `… where x.firstname not like ?1`                            |\n| `StartingWith`         | `findByFirstnameStartingWith`                                | `… where x.firstname like ?1`（参数绑定了 append `%`）       |\n| `EndingWith`           | `findByFirstnameEndingWith`                                  | `… where x.firstname like ?1`（参数绑定 prepended `%`）      |\n| `Containing`           | `findByFirstnameContaining`                                  | `… where x.firstname like ?1`（参数绑定包裹在`%`）           |\n| `OrderBy`              | `findByAgeOrderByLastnameDesc`                               | `… where x.age = ?1 order by x.lastname desc`                |\n| `Not`                  | `findByLastnameNot`                                          | `… where x.lastname <> ?1`                                   |\n| `In`                   | `findByAgeIn(Collection<Age> ages)`                          | `… where x.age in ?1`                                        |\n| `NotIn`                | `findByAgeNotIn(Collection<Age> ages)`                       | `… where x.age not in ?1`                                    |\n| `True`                 | `findByActiveTrue()`                                         | `… where x.active = true`                                    |\n| `False`                | `findByActiveFalse()`                                        | `… where x.active = false`                                   |\n| `IgnoreCase`           | `findByFirstnameIgnoreCase`                                  | `… where UPPER(x.firstname) = UPPER(?1)`                     |\n\n```\ndocker run -d --name=webdav-aliyundriver --restart=always -p 8080:8080  -v /etc/localtime:/etc/localtime -v /etc/aliyun-driver/:/etc/aliyun-driver/ -e TZ=\"Asia/Shanghai\" -e ALIYUNDRIVE_REFRESH_TOKEN=\"91dac35e525c47ebb2bc7d0753875c0e\" -e ALIYUNDRIVE_AUTH_PASSWORD=\"HBQ521521cf*\" -e JAVA_OPTS=\"-Xmx1g\" zx5253/webdav-aliyundriver\n```\n\nhttp://my.huijia21.com/\n\n","slug":"BookMark/车车笔记/Spring Data JPA","published":1,"date":"2022-07-18T09:51:26.000Z","updated":"2022-09-01T10:24:52.386Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cl7ptszoq002haba552iy47mh","content":"<p>[toc]</p>\n<h1><span id=\"spring-data-jpa-框架笔记\">Spring Data JPA 框架笔记</span></h1><h2><span id=\"一-简介\">一、简介</span></h2><p>Spring Data Jpa 是应⽤于Dao层的⼀个框架，简化数据库开发的，作⽤和Mybatis框架⼀样，但是在使</p>\n<p>⽤⽅式和底层机制是有所不同的。最明显的⼀个特点，Spring Data Jpa 开发Dao的时候，很多场景我们</p>\n<p>连sql语句都不需要开发。</p>\n<p>JPA 是⼀套规范，内部是由接⼝和抽象类组成的，Hiberanate 是⼀套成熟的 ORM 框架，⽽且</p>\n<p>Hiberanate 实现了 JPA 规范，所以可以称 Hiberanate 为 JPA 的⼀种实现⽅式，我们使⽤ JPA 的 API 编</p>\n<p>程，意味着站在更⾼的⻆度去看待问题（⾯向接⼝编程）。</p>\n<p>Spring Data JPA 是 Spring 提供的⼀套对 JPA 操作更加⾼级的封装，是在 JPA 规范下的专⻔⽤来进⾏数</p>\n<p>据持久化的解决⽅案。</p>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20210915213027309.png\" alt=\"image-20210915213027309\"></p>\n<h2><span id=\"二-jpa常用方法\">二、JPA常用方法</span></h2><h3><span id=\"1更新或保存save\">1.更新或保存save</span></h3><p>如果有id，先按照id查询，如果不存在，则存入除id外的对象，更新时空元素会覆盖原有信息，并不是不替换该字段</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-operator\">/</span><span class=\"hljs-operator\">/</span>更新或保存；如果有id，先按照id查询，如果不存在，则存入除id外的对象<br><span class=\"hljs-operator\">/</span><span class=\"hljs-operator\">/</span><span class=\"hljs-keyword\">select</span> age0_.id <span class=\"hljs-keyword\">as</span> id1_0_0_, age0_.age <span class=\"hljs-keyword\">as</span> age2_0_0_, age0_.name <span class=\"hljs-keyword\">as</span> name3_0_0_ <span class=\"hljs-keyword\">from</span> tb_age age0_ <span class=\"hljs-keyword\">where</span> age0_.id<span class=\"hljs-operator\">=</span>?<br><span class=\"hljs-operator\">/</span><span class=\"hljs-operator\">/</span><span class=\"hljs-keyword\">insert</span> <span class=\"hljs-keyword\">into</span> tb_age (age, name) <span class=\"hljs-keyword\">values</span> (?, ?)<br>Age newAge<span class=\"hljs-operator\">=</span><span class=\"hljs-keyword\">new</span> Age();<br>newAge.setId(<span class=\"hljs-number\">2</span>L);<br>newAge.setAge(<span class=\"hljs-number\">26</span>);<br><span class=\"hljs-operator\">/</span><span class=\"hljs-operator\">/</span>更新时空元素会覆盖原有信息，并不是不替换该字段<br>Age save <span class=\"hljs-operator\">=</span> ageDao.save(newAge);<br>System.out.println(&quot;save:&quot;<span class=\"hljs-operator\">+</span>save);<br><span class=\"hljs-operator\">/</span><span class=\"hljs-operator\">/</span>自写<span class=\"hljs-keyword\">sql</span><br><span class=\"hljs-variable\">@Transactional</span><br><span class=\"hljs-variable\">@Modifying</span><br><span class=\"hljs-variable\">@Query</span>(<span class=\"hljs-keyword\">value</span> <span class=\"hljs-operator\">=</span> &quot;update suspend_record set status = ?1 where status=?2 and start_time&lt;=?3 &quot;, nativeQuery <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">true</span>)<br><span class=\"hljs-type\">Integer</span> updateWaitStatus(<span class=\"hljs-type\">Integer</span> status1,<span class=\"hljs-type\">Integer</span> status2,<span class=\"hljs-type\">Date</span> <span class=\"hljs-type\">date</span>);<br><br><span class=\"hljs-variable\">@Transactional</span><br><span class=\"hljs-variable\">@Modifying</span><br><span class=\"hljs-variable\">@Query</span>(<span class=\"hljs-keyword\">value</span> <span class=\"hljs-operator\">=</span> &quot;update suspend_auto set disable = :state WHERE  mobile = :mobile and activity_id = :activityId and license_plate_no = :licensePlateNo&quot;, nativeQuery <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">true</span>)<br><span class=\"hljs-type\">Integer</span> updateSuspendAutoState(<span class=\"hljs-variable\">@Param</span>(&quot;mobile&quot;) String mobile, <span class=\"hljs-variable\">@Param</span>(&quot;activityId&quot;) Long activityId,<br><span class=\"hljs-variable\">@Param</span>(&quot;licensePlateNo&quot;) String licensePlateNo, <span class=\"hljs-variable\">@Param</span>(&quot;state&quot;) <span class=\"hljs-type\">Integer</span> state);<br></code></pre></td></tr></table></figure>\n\n<h3><span id=\"2删除deletebyiddelete\">2.删除deleteById，delete</span></h3><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\"><span class=\"hljs-regexp\">//</span>删除<br><span class=\"hljs-regexp\">//</span><span class=\"hljs-keyword\">delete</span> from tb_age where id=?<br><span class=\"hljs-regexp\">//</span>ageDao.deleteById(<span class=\"hljs-number\">3</span>L);<br>ageDao.<span class=\"hljs-keyword\">delete</span>(save);<br></code></pre></td></tr></table></figure>\n\n<h3><span id=\"3简单查询findbyidfindonefindall\">3.简单查询findById，findOne，findAll</span></h3><figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pgsql\">//通过id查询一个对象<br>//<span class=\"hljs-keyword\">select</span> age0_.id <span class=\"hljs-keyword\">as</span> id1_0_0_, age0_.age <span class=\"hljs-keyword\">as</span> age2_0_0_, age0_.name <span class=\"hljs-keyword\">as</span> name3_0_0_ <span class=\"hljs-keyword\">from</span> tb_age age0_ <span class=\"hljs-keyword\">where</span> age0_.id=?<br>Optional&lt;Age&gt; byId = ageDao.findById(<span class=\"hljs-number\">1</span>L);<br><span class=\"hljs-keyword\">System</span>.<span class=\"hljs-keyword\">out</span>.println(&quot;findById:&quot;+byId.<span class=\"hljs-keyword\">get</span>());<br><br>//通过条件查询一个对象<br>//<span class=\"hljs-keyword\">select</span> age0_.id <span class=\"hljs-keyword\">as</span> id1_0_, age0_.age <span class=\"hljs-keyword\">as</span> age2_0_, age0_.name <span class=\"hljs-keyword\">as</span> name3_0_ <span class=\"hljs-keyword\">from</span> tb_age age0_ <span class=\"hljs-keyword\">where</span> age0_.age=<span class=\"hljs-number\">23</span><br>Age age=<span class=\"hljs-built_in\">new</span> Age();<br>age.setAge(<span class=\"hljs-number\">20</span>);<br>Example&lt;Age&gt; example = Example.<span class=\"hljs-keyword\">of</span>(age);<br>Optional&lt;Age&gt; one = ageDao.findOne(example);<br><span class=\"hljs-keyword\">System</span>.<span class=\"hljs-keyword\">out</span>.println(&quot;findOne:&quot;+one.<span class=\"hljs-keyword\">get</span>());<br><br><br></code></pre></td></tr></table></figure>\n\n<h3><span id=\"4分页排序查询\">4.分页排序查询</span></h3><figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pgsql\">//查询全部，分页并按照id逆序<br>//<span class=\"hljs-keyword\">select</span> age0_.id <span class=\"hljs-keyword\">as</span> id1_0_, age0_.age <span class=\"hljs-keyword\">as</span> age2_0_, age0_.name <span class=\"hljs-keyword\">as</span> name3_0_ <span class=\"hljs-keyword\">from</span> tb_age age0_<br>Sort sort = Sort.<span class=\"hljs-keyword\">by</span>(Sort.Direction.<span class=\"hljs-keyword\">DESC</span>,&quot;id&quot;);<br>Pageable pageable = PageRequest.<span class=\"hljs-keyword\">of</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">10</span>, sort);<br>Page&lt;Age&gt; <span class=\"hljs-keyword\">all</span> = ageDao.findAll(pageable);<br><span class=\"hljs-keyword\">System</span>.<span class=\"hljs-keyword\">out</span>.println(<span class=\"hljs-keyword\">all</span>.getContent());<br></code></pre></td></tr></table></figure>\n\n<h3><span id=\"5自定义查询\">5.自定义查询</span></h3><ul>\n<li>dao层</li>\n</ul>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\">public interface AgeDao extends JpaRepository&lt;Age,Long&gt;, JpaSpecificationExecutor&lt;Age&gt; &#123;<br>@<span class=\"hljs-constructor\">Query(<span class=\"hljs-string\">&quot;from Age where age=?1 and name=?2&quot;</span>)</span><br>List&lt;Age&gt; find<span class=\"hljs-constructor\">ByjPQL(Integer <span class=\"hljs-params\">age</span>,String <span class=\"hljs-params\">name</span>)</span>;<br><br>@<span class=\"hljs-constructor\">Query(<span class=\"hljs-params\">value</span> = <span class=\"hljs-string\">&quot;select * from tb_age where age=?1 and name like ?2&quot;</span>,<span class=\"hljs-params\">nativeQuery</span> = <span class=\"hljs-params\">true</span>)</span><br>List&lt;Age&gt; find<span class=\"hljs-constructor\">BySQL(Integer <span class=\"hljs-params\">age</span>,String <span class=\"hljs-params\">name</span>)</span>;<br><br>List&lt;Age&gt; find<span class=\"hljs-constructor\">ByAgeAndNameLike(Integer <span class=\"hljs-params\">age</span>,String <span class=\"hljs-params\">name</span>)</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>使用</li>\n</ul>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pgsql\">//通过jpql查询<br>//<span class=\"hljs-keyword\">select</span> age0_.id <span class=\"hljs-keyword\">as</span> id1_0_, age0_.age <span class=\"hljs-keyword\">as</span> age2_0_, age0_.name <span class=\"hljs-keyword\">as</span> name3_0_ <span class=\"hljs-keyword\">from</span> tb_age age0_ <span class=\"hljs-keyword\">where</span> age0_.age=? <span class=\"hljs-keyword\">and</span> age0_.name=?<br>List&lt;Age&gt; byjPQL = ageDao.findByjPQL(<span class=\"hljs-number\">20</span>,&quot;张三&quot;);<br>byjPQL.<span class=\"hljs-keyword\">forEach</span>(<span class=\"hljs-keyword\">System</span>.<span class=\"hljs-keyword\">out</span>::println);<br><br>//通过<span class=\"hljs-keyword\">sql</span>查询<br>//<span class=\"hljs-keyword\">select</span> * <span class=\"hljs-keyword\">from</span> tb_age <span class=\"hljs-keyword\">where</span> age=? <span class=\"hljs-keyword\">and</span> <span class=\"hljs-type\">name</span> <span class=\"hljs-keyword\">like</span> ?<br>List&lt;Age&gt; bySQL = ageDao.findBySQL(<span class=\"hljs-number\">20</span>, &quot;张%&quot;);<br>bySQL.<span class=\"hljs-keyword\">forEach</span>(<span class=\"hljs-keyword\">System</span>.<span class=\"hljs-keyword\">out</span>::println);<br><br>//通过方法命名规则查询<br>//<span class=\"hljs-keyword\">select</span> age0_.id <span class=\"hljs-keyword\">as</span> id1_0_, age0_.age <span class=\"hljs-keyword\">as</span> age2_0_, age0_.name <span class=\"hljs-keyword\">as</span> name3_0_ <span class=\"hljs-keyword\">from</span> tb_age age0_ <span class=\"hljs-keyword\">where</span> age0_.age=? <span class=\"hljs-keyword\">and</span> (age0_.name <span class=\"hljs-keyword\">like</span> ? <span class=\"hljs-keyword\">escape</span> ?)<br>List&lt;Age&gt; ages = ageDao.findByAgeAndNameLike(<span class=\"hljs-number\">20</span>, &quot;张%&quot;);<br>ages.<span class=\"hljs-keyword\">forEach</span>(<span class=\"hljs-keyword\">System</span>.<span class=\"hljs-keyword\">out</span>::println);<br></code></pre></td></tr></table></figure>\n\n<h3><span id=\"6动态查询分页排序\">6.动态查询，分页，排序</span></h3><pre><code class=\"hljs\">Age age1=new Age();\nage1.setName(&quot;张%&quot;);\n//动态查询\nList&lt;Age&gt; dynamic = dynamicQuery(age1);\ndynamic.forEach(System.out::println);\n\n/**\n * 动态查询\n * @param age 通过传入对象值是否为空动态查询,并按照id排序\n * @return 查询到的集合\n */\nPage&lt;Age&gt; dynamicQuery(Age age)&#123;\n    Specification&lt;Age&gt; specification = new Specification&lt;Age&gt;() &#123;\n        @Override\n        public Predicate toPredicate(Root&lt;Age&gt; root, CriteriaQuery&lt;?&gt; query, CriteriaBuilder builder) &#123;\n            Path age1 = root.&lt;Integer&gt;get(&quot;age&quot;);\n            Path name = root.&lt;String&gt;get(&quot;name&quot;);\n            List&lt;Predicate&gt; predicates = new ArrayList&lt;&gt;();\n            if (age.getAge()!=null)&#123;\n                predicates.add(builder.equal(age1, age.getAge()));\n            &#125;\n            if (age.getName()!=null)&#123;\n                predicates.add(builder.like(name.as(String.class), age.getName()));\n            &#125;\n            Order order = builder.desc(root.&lt;Long&gt;get(&quot;id&quot;));\n            Predicate where = builder.and(predicates.toArray(new Predicate[predicates.size()]));\n            query.where(where);\n            query.orderBy(order);\n            return query.getRestriction();\n        &#125;\n    &#125;;\n    return ageDao.findAll(specification，PageRequest.of(0, 10, new Sort(Sort.Direction.DESC,&quot;id&quot;)）);\n&#125;\n</code></pre>\n<h3><span id=\"7关联查询\">7.关联查询</span></h3><ul>\n<li><p>实体类</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">//age<br>@Entity<br>@Table(name = &quot;tb_age&quot;)<br>public class Age implements Serializable &#123;<br>    private static final long serialVersionUID=1L;<br>    @Id<br>    @GeneratedValue(strategy = GenerationType.IDENTITY)<br>    @Column(name = &quot;id&quot;)<br>    private Long id;<br>    @Column(name = &quot;name&quot;)<br>    private String name;<br>    @Column(name = &quot;age&quot;)<br>    private Integer age;<br><br>    @OneToOne(fetch = FetchType.EAGER)<br>    @NotFound(action = NotFoundAction.IGNORE)<br>    @JoinColumn(name = &quot;name&quot;, referencedColumnName = &quot;name&quot;, insertable = false, updatable = false)<br>    private Resume resume;<br>&#125;<br>//resume<br>@Entity<br>@Table(name = &quot;tb_resume&quot;)<br>public class Resume implements Serializable &#123;<br>    private static final long serialVersionUID=1L;<br>    @Id<br>    @GeneratedValue(strategy = GenerationType.IDENTITY)<br>    @Column(name = &quot;id&quot;)<br>    private Long id;<br>    @Column(name = &quot;name&quot;)<br>    private String name;<br>    @Column(name = &quot;address&quot;)<br>    private String address;<br>    @Column(name = &quot;phone&quot;)<br>    private String phone;<br>&#125;<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>用法</p>\n</li>\n</ul>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pgsql\">//关联查询<br>List&lt;Age&gt; ages1 = joinQuery(<span class=\"hljs-keyword\">null</span>,&quot;张%&quot; ,&quot;1%&quot;);<br>ages1.<span class=\"hljs-keyword\">forEach</span>(<span class=\"hljs-keyword\">System</span>.<span class=\"hljs-keyword\">out</span>::println);<br><br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * 通过age表左连接resume表，关联字段为name</span><br><span class=\"hljs-comment\"> * @param age age表年龄</span><br><span class=\"hljs-comment\"> * @param name age表姓名</span><br><span class=\"hljs-comment\"> * @param phone resume表电话</span><br><span class=\"hljs-comment\"> * @return age实体</span><br><span class=\"hljs-comment\"> */</span><br>List&lt;Age&gt; joinQuery(<span class=\"hljs-type\">Integer</span> age,String <span class=\"hljs-type\">name</span>,String phone)&#123;<br>    Specification&lt;Age&gt; specification = <span class=\"hljs-built_in\">new</span> Specification&lt;Age&gt;() &#123;<br>        @Override<br>        <span class=\"hljs-built_in\">public</span> Predicate toPredicate(Root&lt;Age&gt; root, CriteriaQuery&lt;?&gt; query, CriteriaBuilder builder) &#123;<br>            <span class=\"hljs-type\">Path</span> agePath = root.&lt;<span class=\"hljs-type\">Integer</span>&gt;<span class=\"hljs-keyword\">get</span>(&quot;age&quot;);<br>            <span class=\"hljs-type\">Path</span> namePath = root.&lt;String&gt;<span class=\"hljs-keyword\">get</span>(&quot;name&quot;);<br>            //先副表，再主表，左连接<br>            <span class=\"hljs-keyword\">Join</span>&lt;Resume, <span class=\"hljs-keyword\">Object</span>&gt; join = root.<span class=\"hljs-keyword\">join</span>(&quot;resume&quot;, JoinType.LEFT);<br>            <span class=\"hljs-type\">Path</span> phonePath = <span class=\"hljs-keyword\">join</span>.&lt;String&gt;<span class=\"hljs-keyword\">get</span>(&quot;phone&quot;);<br>            List&lt;Predicate&gt; predicates = <span class=\"hljs-built_in\">new</span> ArrayList&lt;&gt;();<br>            <span class=\"hljs-keyword\">if</span> (age!=<span class=\"hljs-keyword\">null</span>)&#123;<br>                predicates.<span class=\"hljs-keyword\">add</span>(builder.equal(agePath, age));<br>            &#125;<br>            <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-type\">name</span>!=<span class=\"hljs-keyword\">null</span>)&#123;<br>                predicates.<span class=\"hljs-keyword\">add</span>(builder.<span class=\"hljs-keyword\">like</span>(namePath.<span class=\"hljs-keyword\">as</span>(String.<span class=\"hljs-keyword\">class</span>), <span class=\"hljs-type\">name</span>));<br>            &#125;<br>            <span class=\"hljs-keyword\">if</span> (phone!=<span class=\"hljs-keyword\">null</span>)&#123;<br>                predicates.<span class=\"hljs-keyword\">add</span>(builder.<span class=\"hljs-keyword\">like</span>(phonePath.<span class=\"hljs-keyword\">as</span>(String.<span class=\"hljs-keyword\">class</span>),phone));<br>            &#125;<br>            <span class=\"hljs-keyword\">Order</span> <span class=\"hljs-keyword\">order</span> = builder.<span class=\"hljs-keyword\">desc</span>(root.&lt;Long&gt;<span class=\"hljs-keyword\">get</span>(&quot;id&quot;));<br>            Predicate <span class=\"hljs-keyword\">where</span> = builder.<span class=\"hljs-keyword\">and</span>(predicates.toArray(<span class=\"hljs-built_in\">new</span> Predicate[predicates.size()]));<br>            query.<span class=\"hljs-keyword\">where</span>(<span class=\"hljs-keyword\">where</span>);<br>            query.orderBy(<span class=\"hljs-keyword\">order</span>);<br>            <span class=\"hljs-keyword\">return query</span>.getRestriction();<br>        &#125;<br>    &#125;;<br>    <span class=\"hljs-keyword\">return</span> ageDao.findAll(specification);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2><span id=\"三-解决save方法null值覆盖\">三、解决Save方法null值覆盖</span></h2><p>JPA原生Save方法会导致null属性覆盖到数据库,重写方法实现null属性不再覆盖</p>\n<h3><span id=\"1-新建类\">1. 新建类</span></h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.cheche365.ccgeneral.service.util;<br><br><span class=\"hljs-keyword\">import</span> org.springframework.beans.BeanUtils;<br><span class=\"hljs-keyword\">import</span> org.springframework.beans.BeanWrapper;<br><span class=\"hljs-keyword\">import</span> org.springframework.beans.BeanWrapperImpl;<br><span class=\"hljs-keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class=\"hljs-keyword\">import</span> org.springframework.data.jpa.repository.support.JpaEntityInformation;<br><span class=\"hljs-keyword\">import</span> org.springframework.data.jpa.repository.support.SimpleJpaRepository;<br><span class=\"hljs-keyword\">import</span> org.springframework.transaction.annotation.Transactional;<br><span class=\"hljs-keyword\">import</span> org.springframework.util.StringUtils;<br><br><span class=\"hljs-keyword\">import</span> javax.persistence.EntityManager;<br><span class=\"hljs-keyword\">import</span> java.beans.PropertyDescriptor;<br><span class=\"hljs-keyword\">import</span> java.util.HashSet;<br><span class=\"hljs-keyword\">import</span> java.util.Optional;<br><span class=\"hljs-keyword\">import</span> java.util.Set;<br><br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@Author</span>: hbq</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@Description</span>: JPA原生Save方法会导致null属性覆盖到数据库,重写方法实现null属性不再覆盖</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@Date</span>: 2021/10/21 14:24</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">SimpleJpaRepositoryImpl</span>&lt;T, ID&gt; <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">SimpleJpaRepository</span>&lt;T, ID&gt; &#123;<br><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">final</span> JpaEntityInformation&lt;T, ?&gt; entityInformation;<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">final</span> EntityManager em;<br><br>    <span class=\"hljs-meta\">@Autowired</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">SimpleJpaRepositoryImpl</span><span class=\"hljs-params\">(JpaEntityInformation&lt;T, ?&gt; entityInformation, EntityManager entityManager)</span> &#123;<br>        <span class=\"hljs-built_in\">super</span>(entityInformation, entityManager);<br>        <span class=\"hljs-built_in\">this</span>.entityInformation = entityInformation;<br>        <span class=\"hljs-built_in\">this</span>.em = entityManager;<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 通用save方法 ：新增/选择性更新</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-meta\">@Transactional(rollbackFor = Exception.class)</span><br>    <span class=\"hljs-keyword\">public</span> &lt;S <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">T</span>&gt; S <span class=\"hljs-title function_\">save</span><span class=\"hljs-params\">(S entity)</span> &#123;<br>        <span class=\"hljs-comment\">//获取ID</span><br>        <span class=\"hljs-type\">ID</span> <span class=\"hljs-variable\">entityId</span> <span class=\"hljs-operator\">=</span> (ID) entityInformation.getId(entity);<br>        Optional&lt;T&gt; optionalT;<br>        <span class=\"hljs-keyword\">if</span> (StringUtils.isEmpty(entityId)) &#123;<br>            optionalT = Optional.empty();<br>        &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>            <span class=\"hljs-comment\">//若ID非空 则查询最新数据</span><br>            optionalT = findById(entityId);<br>        &#125;<br>        <span class=\"hljs-comment\">//获取空属性并处理成null</span><br>        String[] nullProperties = getNullProperties(entity);<br>        <span class=\"hljs-comment\">//若根据ID查询结果为空</span><br>        <span class=\"hljs-keyword\">if</span> (!optionalT.isPresent()) &#123;<br>            <span class=\"hljs-comment\">//新增</span><br>            em.persist(entity);<br>            <span class=\"hljs-keyword\">return</span> entity;<br>        &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>            <span class=\"hljs-comment\">//1.获取最新对象</span><br>            <span class=\"hljs-type\">T</span> <span class=\"hljs-variable\">target</span> <span class=\"hljs-operator\">=</span> optionalT.get();<br>            <span class=\"hljs-comment\">//2.将非空属性覆盖到最新对象</span><br>            BeanUtils.copyProperties(entity, target, nullProperties);<br>            <span class=\"hljs-comment\">//3.更新非空属性</span><br>            em.merge(target);<br>            <span class=\"hljs-keyword\">return</span> entity;<br>        &#125;<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 获取对象的空属性</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> String[] getNullProperties(Object src) &#123;<br>        <span class=\"hljs-comment\">//1.获取Bean</span><br>        <span class=\"hljs-type\">BeanWrapper</span> <span class=\"hljs-variable\">srcBean</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BeanWrapperImpl</span>(src);<br>        <span class=\"hljs-comment\">//2.获取Bean的属性描述</span><br>        PropertyDescriptor[] pds = srcBean.getPropertyDescriptors();<br>        <span class=\"hljs-comment\">//3.获取Bean的空属性</span><br>        Set&lt;String&gt; properties = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">HashSet</span>&lt;&gt;();<br>        <span class=\"hljs-keyword\">for</span> (PropertyDescriptor propertyDescriptor : pds) &#123;<br>            <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">propertyName</span> <span class=\"hljs-operator\">=</span> propertyDescriptor.getName();<br>            <span class=\"hljs-type\">Object</span> <span class=\"hljs-variable\">propertyValue</span> <span class=\"hljs-operator\">=</span> srcBean.getPropertyValue(propertyName);<br>            <span class=\"hljs-keyword\">if</span> (StringUtils.isEmpty(propertyValue)) &#123;<br>                srcBean.setPropertyValue(propertyName, <span class=\"hljs-literal\">null</span>);<br>                properties.add(propertyName);<br>            &#125;<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> properties.toArray(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">String</span>[<span class=\"hljs-number\">0</span>]);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3><span id=\"2-启动类加注解\">2. 启动类加注解</span></h3><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs typescript\"><span class=\"hljs-meta\">@EnableJpaRepositories</span>(repositoryBaseClass = <span class=\"hljs-title class_\">SimpleJpaRepositoryImpl</span>.<span class=\"hljs-property\">class</span>)<br></code></pre></td></tr></table></figure>\n\n<h2><span id=\"四-常用jpa方法命名规则\">四、常用JPA方法命名规则</span></h2><table>\n<thead>\n<tr>\n<th align=\"left\">关键词</th>\n<th align=\"left\">样本</th>\n<th align=\"left\">JPQL 片段</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><code>Distinct</code></td>\n<td align=\"left\"><code>findDistinctByLastnameAndFirstname</code></td>\n<td align=\"left\"><code>select distinct … where x.lastname = ?1 and x.firstname = ?2</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>And</code></td>\n<td align=\"left\"><code>findByLastnameAndFirstname</code></td>\n<td align=\"left\"><code>… where x.lastname = ?1 and x.firstname = ?2</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>Or</code></td>\n<td align=\"left\"><code>findByLastnameOrFirstname</code></td>\n<td align=\"left\"><code>… where x.lastname = ?1 or x.firstname = ?2</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>Is</code>, <code>Equals</code></td>\n<td align=\"left\"><code>findByFirstname</code>, <code>findByFirstnameIs</code>,<code>findByFirstnameEquals</code></td>\n<td align=\"left\"><code>… where x.firstname = ?1</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>Between</code></td>\n<td align=\"left\"><code>findByStartDateBetween</code></td>\n<td align=\"left\"><code>… where x.startDate between ?1 and ?2</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>LessThan</code></td>\n<td align=\"left\"><code>findByAgeLessThan</code></td>\n<td align=\"left\"><code>… where x.age &lt; ?1</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>LessThanEqual</code></td>\n<td align=\"left\"><code>findByAgeLessThanEqual</code></td>\n<td align=\"left\"><code>… where x.age &lt;= ?1</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>GreaterThan</code></td>\n<td align=\"left\"><code>findByAgeGreaterThan</code></td>\n<td align=\"left\"><code>… where x.age &gt; ?1</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>GreaterThanEqual</code></td>\n<td align=\"left\"><code>findByAgeGreaterThanEqual</code></td>\n<td align=\"left\"><code>… where x.age &gt;= ?1</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>After</code></td>\n<td align=\"left\"><code>findByStartDateAfter</code></td>\n<td align=\"left\"><code>… where x.startDate &gt; ?1</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>Before</code></td>\n<td align=\"left\"><code>findByStartDateBefore</code></td>\n<td align=\"left\"><code>… where x.startDate &lt; ?1</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>IsNull</code>, <code>Null</code></td>\n<td align=\"left\"><code>findByAge(Is)Null</code></td>\n<td align=\"left\"><code>… where x.age is null</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>IsNotNull</code>, <code>NotNull</code></td>\n<td align=\"left\"><code>findByAge(Is)NotNull</code></td>\n<td align=\"left\"><code>… where x.age not null</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>Like</code></td>\n<td align=\"left\"><code>findByFirstnameLike</code></td>\n<td align=\"left\"><code>… where x.firstname like ?1</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>NotLike</code></td>\n<td align=\"left\"><code>findByFirstnameNotLike</code></td>\n<td align=\"left\"><code>… where x.firstname not like ?1</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>StartingWith</code></td>\n<td align=\"left\"><code>findByFirstnameStartingWith</code></td>\n<td align=\"left\"><code>… where x.firstname like ?1</code>（参数绑定了 append <code>%</code>）</td>\n</tr>\n<tr>\n<td align=\"left\"><code>EndingWith</code></td>\n<td align=\"left\"><code>findByFirstnameEndingWith</code></td>\n<td align=\"left\"><code>… where x.firstname like ?1</code>（参数绑定 prepended <code>%</code>）</td>\n</tr>\n<tr>\n<td align=\"left\"><code>Containing</code></td>\n<td align=\"left\"><code>findByFirstnameContaining</code></td>\n<td align=\"left\"><code>… where x.firstname like ?1</code>（参数绑定包裹在<code>%</code>）</td>\n</tr>\n<tr>\n<td align=\"left\"><code>OrderBy</code></td>\n<td align=\"left\"><code>findByAgeOrderByLastnameDesc</code></td>\n<td align=\"left\"><code>… where x.age = ?1 order by x.lastname desc</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>Not</code></td>\n<td align=\"left\"><code>findByLastnameNot</code></td>\n<td align=\"left\"><code>… where x.lastname &lt;&gt; ?1</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>In</code></td>\n<td align=\"left\"><code>findByAgeIn(Collection&lt;Age&gt; ages)</code></td>\n<td align=\"left\"><code>… where x.age in ?1</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>NotIn</code></td>\n<td align=\"left\"><code>findByAgeNotIn(Collection&lt;Age&gt; ages)</code></td>\n<td align=\"left\"><code>… where x.age not in ?1</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>True</code></td>\n<td align=\"left\"><code>findByActiveTrue()</code></td>\n<td align=\"left\"><code>… where x.active = true</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>False</code></td>\n<td align=\"left\"><code>findByActiveFalse()</code></td>\n<td align=\"left\"><code>… where x.active = false</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>IgnoreCase</code></td>\n<td align=\"left\"><code>findByFirstnameIgnoreCase</code></td>\n<td align=\"left\"><code>… where UPPER(x.firstname) = UPPER(?1)</code></td>\n</tr>\n</tbody></table>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\">docker run -d --name=webdav-aliyundriver --restart=always -p <span class=\"hljs-number\">8080</span>:<span class=\"hljs-number\">8080</span>  -v <span class=\"hljs-regexp\">/etc/</span>localtime:<span class=\"hljs-regexp\">/etc/</span>localtime -v <span class=\"hljs-regexp\">/etc/</span>aliyun-driver<span class=\"hljs-regexp\">/:/</span>etc<span class=\"hljs-regexp\">/aliyun-driver/</span> -e TZ=<span class=\"hljs-string\">&quot;Asia/Shanghai&quot;</span> -e ALIYUNDRIVE_REFRESH_TOKEN=<span class=\"hljs-string\">&quot;91dac35e525c47ebb2bc7d0753875c0e&quot;</span> -e ALIYUNDRIVE_AUTH_PASSWORD=<span class=\"hljs-string\">&quot;HBQ521521cf*&quot;</span> -e JAVA_OPTS=<span class=\"hljs-string\">&quot;-Xmx1g&quot;</span> zx5253/webdav-aliyundriver<br></code></pre></td></tr></table></figure>\n\n<p><a href=\"http://my.huijia21.com/\">http://my.huijia21.com/</a></p>\n","site":{"data":{}},"wordcount":11298,"excerpt":"","more":"<p>[toc]</p>\n<h1 id=\"Spring-Data-JPA-框架笔记\"><a href=\"#Spring-Data-JPA-框架笔记\" class=\"headerlink\" title=\"Spring Data JPA 框架笔记\"></a>Spring Data JPA 框架笔记</h1><h2 id=\"一、简介\"><a href=\"#一、简介\" class=\"headerlink\" title=\"一、简介\"></a>一、简介</h2><p>Spring Data Jpa 是应⽤于Dao层的⼀个框架，简化数据库开发的，作⽤和Mybatis框架⼀样，但是在使</p>\n<p>⽤⽅式和底层机制是有所不同的。最明显的⼀个特点，Spring Data Jpa 开发Dao的时候，很多场景我们</p>\n<p>连sql语句都不需要开发。</p>\n<p>JPA 是⼀套规范，内部是由接⼝和抽象类组成的，Hiberanate 是⼀套成熟的 ORM 框架，⽽且</p>\n<p>Hiberanate 实现了 JPA 规范，所以可以称 Hiberanate 为 JPA 的⼀种实现⽅式，我们使⽤ JPA 的 API 编</p>\n<p>程，意味着站在更⾼的⻆度去看待问题（⾯向接⼝编程）。</p>\n<p>Spring Data JPA 是 Spring 提供的⼀套对 JPA 操作更加⾼级的封装，是在 JPA 规范下的专⻔⽤来进⾏数</p>\n<p>据持久化的解决⽅案。</p>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20210915213027309.png\" alt=\"image-20210915213027309\"></p>\n<h2 id=\"二、JPA常用方法\"><a href=\"#二、JPA常用方法\" class=\"headerlink\" title=\"二、JPA常用方法\"></a>二、JPA常用方法</h2><h3 id=\"1-更新或保存save\"><a href=\"#1-更新或保存save\" class=\"headerlink\" title=\"1.更新或保存save\"></a>1.更新或保存save</h3><p>如果有id，先按照id查询，如果不存在，则存入除id外的对象，更新时空元素会覆盖原有信息，并不是不替换该字段</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-operator\">/</span><span class=\"hljs-operator\">/</span>更新或保存；如果有id，先按照id查询，如果不存在，则存入除id外的对象<br><span class=\"hljs-operator\">/</span><span class=\"hljs-operator\">/</span><span class=\"hljs-keyword\">select</span> age0_.id <span class=\"hljs-keyword\">as</span> id1_0_0_, age0_.age <span class=\"hljs-keyword\">as</span> age2_0_0_, age0_.name <span class=\"hljs-keyword\">as</span> name3_0_0_ <span class=\"hljs-keyword\">from</span> tb_age age0_ <span class=\"hljs-keyword\">where</span> age0_.id<span class=\"hljs-operator\">=</span>?<br><span class=\"hljs-operator\">/</span><span class=\"hljs-operator\">/</span><span class=\"hljs-keyword\">insert</span> <span class=\"hljs-keyword\">into</span> tb_age (age, name) <span class=\"hljs-keyword\">values</span> (?, ?)<br>Age newAge<span class=\"hljs-operator\">=</span><span class=\"hljs-keyword\">new</span> Age();<br>newAge.setId(<span class=\"hljs-number\">2</span>L);<br>newAge.setAge(<span class=\"hljs-number\">26</span>);<br><span class=\"hljs-operator\">/</span><span class=\"hljs-operator\">/</span>更新时空元素会覆盖原有信息，并不是不替换该字段<br>Age save <span class=\"hljs-operator\">=</span> ageDao.save(newAge);<br>System.out.println(&quot;save:&quot;<span class=\"hljs-operator\">+</span>save);<br><span class=\"hljs-operator\">/</span><span class=\"hljs-operator\">/</span>自写<span class=\"hljs-keyword\">sql</span><br><span class=\"hljs-variable\">@Transactional</span><br><span class=\"hljs-variable\">@Modifying</span><br><span class=\"hljs-variable\">@Query</span>(<span class=\"hljs-keyword\">value</span> <span class=\"hljs-operator\">=</span> &quot;update suspend_record set status = ?1 where status=?2 and start_time&lt;=?3 &quot;, nativeQuery <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">true</span>)<br><span class=\"hljs-type\">Integer</span> updateWaitStatus(<span class=\"hljs-type\">Integer</span> status1,<span class=\"hljs-type\">Integer</span> status2,<span class=\"hljs-type\">Date</span> <span class=\"hljs-type\">date</span>);<br><br><span class=\"hljs-variable\">@Transactional</span><br><span class=\"hljs-variable\">@Modifying</span><br><span class=\"hljs-variable\">@Query</span>(<span class=\"hljs-keyword\">value</span> <span class=\"hljs-operator\">=</span> &quot;update suspend_auto set disable = :state WHERE  mobile = :mobile and activity_id = :activityId and license_plate_no = :licensePlateNo&quot;, nativeQuery <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">true</span>)<br><span class=\"hljs-type\">Integer</span> updateSuspendAutoState(<span class=\"hljs-variable\">@Param</span>(&quot;mobile&quot;) String mobile, <span class=\"hljs-variable\">@Param</span>(&quot;activityId&quot;) Long activityId,<br><span class=\"hljs-variable\">@Param</span>(&quot;licensePlateNo&quot;) String licensePlateNo, <span class=\"hljs-variable\">@Param</span>(&quot;state&quot;) <span class=\"hljs-type\">Integer</span> state);<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"2-删除deleteById，delete\"><a href=\"#2-删除deleteById，delete\" class=\"headerlink\" title=\"2.删除deleteById，delete\"></a>2.删除deleteById，delete</h3><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\"><span class=\"hljs-regexp\">//</span>删除<br><span class=\"hljs-regexp\">//</span><span class=\"hljs-keyword\">delete</span> from tb_age where id=?<br><span class=\"hljs-regexp\">//</span>ageDao.deleteById(<span class=\"hljs-number\">3</span>L);<br>ageDao.<span class=\"hljs-keyword\">delete</span>(save);<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"3-简单查询findById，findOne，findAll\"><a href=\"#3-简单查询findById，findOne，findAll\" class=\"headerlink\" title=\"3.简单查询findById，findOne，findAll\"></a>3.简单查询findById，findOne，findAll</h3><figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pgsql\">//通过id查询一个对象<br>//<span class=\"hljs-keyword\">select</span> age0_.id <span class=\"hljs-keyword\">as</span> id1_0_0_, age0_.age <span class=\"hljs-keyword\">as</span> age2_0_0_, age0_.name <span class=\"hljs-keyword\">as</span> name3_0_0_ <span class=\"hljs-keyword\">from</span> tb_age age0_ <span class=\"hljs-keyword\">where</span> age0_.id=?<br>Optional&lt;Age&gt; byId = ageDao.findById(<span class=\"hljs-number\">1</span>L);<br><span class=\"hljs-keyword\">System</span>.<span class=\"hljs-keyword\">out</span>.println(&quot;findById:&quot;+byId.<span class=\"hljs-keyword\">get</span>());<br><br>//通过条件查询一个对象<br>//<span class=\"hljs-keyword\">select</span> age0_.id <span class=\"hljs-keyword\">as</span> id1_0_, age0_.age <span class=\"hljs-keyword\">as</span> age2_0_, age0_.name <span class=\"hljs-keyword\">as</span> name3_0_ <span class=\"hljs-keyword\">from</span> tb_age age0_ <span class=\"hljs-keyword\">where</span> age0_.age=<span class=\"hljs-number\">23</span><br>Age age=<span class=\"hljs-built_in\">new</span> Age();<br>age.setAge(<span class=\"hljs-number\">20</span>);<br>Example&lt;Age&gt; example = Example.<span class=\"hljs-keyword\">of</span>(age);<br>Optional&lt;Age&gt; one = ageDao.findOne(example);<br><span class=\"hljs-keyword\">System</span>.<span class=\"hljs-keyword\">out</span>.println(&quot;findOne:&quot;+one.<span class=\"hljs-keyword\">get</span>());<br><br><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"4-分页排序查询\"><a href=\"#4-分页排序查询\" class=\"headerlink\" title=\"4.分页排序查询\"></a>4.分页排序查询</h3><figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pgsql\">//查询全部，分页并按照id逆序<br>//<span class=\"hljs-keyword\">select</span> age0_.id <span class=\"hljs-keyword\">as</span> id1_0_, age0_.age <span class=\"hljs-keyword\">as</span> age2_0_, age0_.name <span class=\"hljs-keyword\">as</span> name3_0_ <span class=\"hljs-keyword\">from</span> tb_age age0_<br>Sort sort = Sort.<span class=\"hljs-keyword\">by</span>(Sort.Direction.<span class=\"hljs-keyword\">DESC</span>,&quot;id&quot;);<br>Pageable pageable = PageRequest.<span class=\"hljs-keyword\">of</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">10</span>, sort);<br>Page&lt;Age&gt; <span class=\"hljs-keyword\">all</span> = ageDao.findAll(pageable);<br><span class=\"hljs-keyword\">System</span>.<span class=\"hljs-keyword\">out</span>.println(<span class=\"hljs-keyword\">all</span>.getContent());<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"5-自定义查询\"><a href=\"#5-自定义查询\" class=\"headerlink\" title=\"5.自定义查询\"></a>5.自定义查询</h3><ul>\n<li>dao层</li>\n</ul>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\">public interface AgeDao extends JpaRepository&lt;Age,Long&gt;, JpaSpecificationExecutor&lt;Age&gt; &#123;<br>@<span class=\"hljs-constructor\">Query(<span class=\"hljs-string\">&quot;from Age where age=?1 and name=?2&quot;</span>)</span><br>List&lt;Age&gt; find<span class=\"hljs-constructor\">ByjPQL(Integer <span class=\"hljs-params\">age</span>,String <span class=\"hljs-params\">name</span>)</span>;<br><br>@<span class=\"hljs-constructor\">Query(<span class=\"hljs-params\">value</span> = <span class=\"hljs-string\">&quot;select * from tb_age where age=?1 and name like ?2&quot;</span>,<span class=\"hljs-params\">nativeQuery</span> = <span class=\"hljs-params\">true</span>)</span><br>List&lt;Age&gt; find<span class=\"hljs-constructor\">BySQL(Integer <span class=\"hljs-params\">age</span>,String <span class=\"hljs-params\">name</span>)</span>;<br><br>List&lt;Age&gt; find<span class=\"hljs-constructor\">ByAgeAndNameLike(Integer <span class=\"hljs-params\">age</span>,String <span class=\"hljs-params\">name</span>)</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>使用</li>\n</ul>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pgsql\">//通过jpql查询<br>//<span class=\"hljs-keyword\">select</span> age0_.id <span class=\"hljs-keyword\">as</span> id1_0_, age0_.age <span class=\"hljs-keyword\">as</span> age2_0_, age0_.name <span class=\"hljs-keyword\">as</span> name3_0_ <span class=\"hljs-keyword\">from</span> tb_age age0_ <span class=\"hljs-keyword\">where</span> age0_.age=? <span class=\"hljs-keyword\">and</span> age0_.name=?<br>List&lt;Age&gt; byjPQL = ageDao.findByjPQL(<span class=\"hljs-number\">20</span>,&quot;张三&quot;);<br>byjPQL.<span class=\"hljs-keyword\">forEach</span>(<span class=\"hljs-keyword\">System</span>.<span class=\"hljs-keyword\">out</span>::println);<br><br>//通过<span class=\"hljs-keyword\">sql</span>查询<br>//<span class=\"hljs-keyword\">select</span> * <span class=\"hljs-keyword\">from</span> tb_age <span class=\"hljs-keyword\">where</span> age=? <span class=\"hljs-keyword\">and</span> <span class=\"hljs-type\">name</span> <span class=\"hljs-keyword\">like</span> ?<br>List&lt;Age&gt; bySQL = ageDao.findBySQL(<span class=\"hljs-number\">20</span>, &quot;张%&quot;);<br>bySQL.<span class=\"hljs-keyword\">forEach</span>(<span class=\"hljs-keyword\">System</span>.<span class=\"hljs-keyword\">out</span>::println);<br><br>//通过方法命名规则查询<br>//<span class=\"hljs-keyword\">select</span> age0_.id <span class=\"hljs-keyword\">as</span> id1_0_, age0_.age <span class=\"hljs-keyword\">as</span> age2_0_, age0_.name <span class=\"hljs-keyword\">as</span> name3_0_ <span class=\"hljs-keyword\">from</span> tb_age age0_ <span class=\"hljs-keyword\">where</span> age0_.age=? <span class=\"hljs-keyword\">and</span> (age0_.name <span class=\"hljs-keyword\">like</span> ? <span class=\"hljs-keyword\">escape</span> ?)<br>List&lt;Age&gt; ages = ageDao.findByAgeAndNameLike(<span class=\"hljs-number\">20</span>, &quot;张%&quot;);<br>ages.<span class=\"hljs-keyword\">forEach</span>(<span class=\"hljs-keyword\">System</span>.<span class=\"hljs-keyword\">out</span>::println);<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"6-动态查询，分页，排序\"><a href=\"#6-动态查询，分页，排序\" class=\"headerlink\" title=\"6.动态查询，分页，排序\"></a>6.动态查询，分页，排序</h3><pre><code>Age age1=new Age();\nage1.setName(&quot;张%&quot;);\n//动态查询\nList&lt;Age&gt; dynamic = dynamicQuery(age1);\ndynamic.forEach(System.out::println);\n\n/**\n * 动态查询\n * @param age 通过传入对象值是否为空动态查询,并按照id排序\n * @return 查询到的集合\n */\nPage&lt;Age&gt; dynamicQuery(Age age)&#123;\n    Specification&lt;Age&gt; specification = new Specification&lt;Age&gt;() &#123;\n        @Override\n        public Predicate toPredicate(Root&lt;Age&gt; root, CriteriaQuery&lt;?&gt; query, CriteriaBuilder builder) &#123;\n            Path age1 = root.&lt;Integer&gt;get(&quot;age&quot;);\n            Path name = root.&lt;String&gt;get(&quot;name&quot;);\n            List&lt;Predicate&gt; predicates = new ArrayList&lt;&gt;();\n            if (age.getAge()!=null)&#123;\n                predicates.add(builder.equal(age1, age.getAge()));\n            &#125;\n            if (age.getName()!=null)&#123;\n                predicates.add(builder.like(name.as(String.class), age.getName()));\n            &#125;\n            Order order = builder.desc(root.&lt;Long&gt;get(&quot;id&quot;));\n            Predicate where = builder.and(predicates.toArray(new Predicate[predicates.size()]));\n            query.where(where);\n            query.orderBy(order);\n            return query.getRestriction();\n        &#125;\n    &#125;;\n    return ageDao.findAll(specification，PageRequest.of(0, 10, new Sort(Sort.Direction.DESC,&quot;id&quot;)）);\n&#125;\n</code></pre>\n<h3 id=\"7-关联查询\"><a href=\"#7-关联查询\" class=\"headerlink\" title=\"7.关联查询\"></a>7.关联查询</h3><ul>\n<li><p>实体类</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">//age<br>@Entity<br>@Table(name = &quot;tb_age&quot;)<br>public class Age implements Serializable &#123;<br>    private static final long serialVersionUID=1L;<br>    @Id<br>    @GeneratedValue(strategy = GenerationType.IDENTITY)<br>    @Column(name = &quot;id&quot;)<br>    private Long id;<br>    @Column(name = &quot;name&quot;)<br>    private String name;<br>    @Column(name = &quot;age&quot;)<br>    private Integer age;<br><br>    @OneToOne(fetch = FetchType.EAGER)<br>    @NotFound(action = NotFoundAction.IGNORE)<br>    @JoinColumn(name = &quot;name&quot;, referencedColumnName = &quot;name&quot;, insertable = false, updatable = false)<br>    private Resume resume;<br>&#125;<br>//resume<br>@Entity<br>@Table(name = &quot;tb_resume&quot;)<br>public class Resume implements Serializable &#123;<br>    private static final long serialVersionUID=1L;<br>    @Id<br>    @GeneratedValue(strategy = GenerationType.IDENTITY)<br>    @Column(name = &quot;id&quot;)<br>    private Long id;<br>    @Column(name = &quot;name&quot;)<br>    private String name;<br>    @Column(name = &quot;address&quot;)<br>    private String address;<br>    @Column(name = &quot;phone&quot;)<br>    private String phone;<br>&#125;<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>用法</p>\n</li>\n</ul>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pgsql\">//关联查询<br>List&lt;Age&gt; ages1 = joinQuery(<span class=\"hljs-keyword\">null</span>,&quot;张%&quot; ,&quot;1%&quot;);<br>ages1.<span class=\"hljs-keyword\">forEach</span>(<span class=\"hljs-keyword\">System</span>.<span class=\"hljs-keyword\">out</span>::println);<br><br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * 通过age表左连接resume表，关联字段为name</span><br><span class=\"hljs-comment\"> * @param age age表年龄</span><br><span class=\"hljs-comment\"> * @param name age表姓名</span><br><span class=\"hljs-comment\"> * @param phone resume表电话</span><br><span class=\"hljs-comment\"> * @return age实体</span><br><span class=\"hljs-comment\"> */</span><br>List&lt;Age&gt; joinQuery(<span class=\"hljs-type\">Integer</span> age,String <span class=\"hljs-type\">name</span>,String phone)&#123;<br>    Specification&lt;Age&gt; specification = <span class=\"hljs-built_in\">new</span> Specification&lt;Age&gt;() &#123;<br>        @Override<br>        <span class=\"hljs-built_in\">public</span> Predicate toPredicate(Root&lt;Age&gt; root, CriteriaQuery&lt;?&gt; query, CriteriaBuilder builder) &#123;<br>            <span class=\"hljs-type\">Path</span> agePath = root.&lt;<span class=\"hljs-type\">Integer</span>&gt;<span class=\"hljs-keyword\">get</span>(&quot;age&quot;);<br>            <span class=\"hljs-type\">Path</span> namePath = root.&lt;String&gt;<span class=\"hljs-keyword\">get</span>(&quot;name&quot;);<br>            //先副表，再主表，左连接<br>            <span class=\"hljs-keyword\">Join</span>&lt;Resume, <span class=\"hljs-keyword\">Object</span>&gt; join = root.<span class=\"hljs-keyword\">join</span>(&quot;resume&quot;, JoinType.LEFT);<br>            <span class=\"hljs-type\">Path</span> phonePath = <span class=\"hljs-keyword\">join</span>.&lt;String&gt;<span class=\"hljs-keyword\">get</span>(&quot;phone&quot;);<br>            List&lt;Predicate&gt; predicates = <span class=\"hljs-built_in\">new</span> ArrayList&lt;&gt;();<br>            <span class=\"hljs-keyword\">if</span> (age!=<span class=\"hljs-keyword\">null</span>)&#123;<br>                predicates.<span class=\"hljs-keyword\">add</span>(builder.equal(agePath, age));<br>            &#125;<br>            <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-type\">name</span>!=<span class=\"hljs-keyword\">null</span>)&#123;<br>                predicates.<span class=\"hljs-keyword\">add</span>(builder.<span class=\"hljs-keyword\">like</span>(namePath.<span class=\"hljs-keyword\">as</span>(String.<span class=\"hljs-keyword\">class</span>), <span class=\"hljs-type\">name</span>));<br>            &#125;<br>            <span class=\"hljs-keyword\">if</span> (phone!=<span class=\"hljs-keyword\">null</span>)&#123;<br>                predicates.<span class=\"hljs-keyword\">add</span>(builder.<span class=\"hljs-keyword\">like</span>(phonePath.<span class=\"hljs-keyword\">as</span>(String.<span class=\"hljs-keyword\">class</span>),phone));<br>            &#125;<br>            <span class=\"hljs-keyword\">Order</span> <span class=\"hljs-keyword\">order</span> = builder.<span class=\"hljs-keyword\">desc</span>(root.&lt;Long&gt;<span class=\"hljs-keyword\">get</span>(&quot;id&quot;));<br>            Predicate <span class=\"hljs-keyword\">where</span> = builder.<span class=\"hljs-keyword\">and</span>(predicates.toArray(<span class=\"hljs-built_in\">new</span> Predicate[predicates.size()]));<br>            query.<span class=\"hljs-keyword\">where</span>(<span class=\"hljs-keyword\">where</span>);<br>            query.orderBy(<span class=\"hljs-keyword\">order</span>);<br>            <span class=\"hljs-keyword\">return query</span>.getRestriction();<br>        &#125;<br>    &#125;;<br>    <span class=\"hljs-keyword\">return</span> ageDao.findAll(specification);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"三、解决Save方法null值覆盖\"><a href=\"#三、解决Save方法null值覆盖\" class=\"headerlink\" title=\"三、解决Save方法null值覆盖\"></a>三、解决Save方法null值覆盖</h2><p>JPA原生Save方法会导致null属性覆盖到数据库,重写方法实现null属性不再覆盖</p>\n<h3 id=\"1-新建类\"><a href=\"#1-新建类\" class=\"headerlink\" title=\"1. 新建类\"></a>1. 新建类</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.cheche365.ccgeneral.service.util;<br><br><span class=\"hljs-keyword\">import</span> org.springframework.beans.BeanUtils;<br><span class=\"hljs-keyword\">import</span> org.springframework.beans.BeanWrapper;<br><span class=\"hljs-keyword\">import</span> org.springframework.beans.BeanWrapperImpl;<br><span class=\"hljs-keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class=\"hljs-keyword\">import</span> org.springframework.data.jpa.repository.support.JpaEntityInformation;<br><span class=\"hljs-keyword\">import</span> org.springframework.data.jpa.repository.support.SimpleJpaRepository;<br><span class=\"hljs-keyword\">import</span> org.springframework.transaction.annotation.Transactional;<br><span class=\"hljs-keyword\">import</span> org.springframework.util.StringUtils;<br><br><span class=\"hljs-keyword\">import</span> javax.persistence.EntityManager;<br><span class=\"hljs-keyword\">import</span> java.beans.PropertyDescriptor;<br><span class=\"hljs-keyword\">import</span> java.util.HashSet;<br><span class=\"hljs-keyword\">import</span> java.util.Optional;<br><span class=\"hljs-keyword\">import</span> java.util.Set;<br><br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@Author</span>: hbq</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@Description</span>: JPA原生Save方法会导致null属性覆盖到数据库,重写方法实现null属性不再覆盖</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@Date</span>: 2021/10/21 14:24</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">SimpleJpaRepositoryImpl</span>&lt;T, ID&gt; <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">SimpleJpaRepository</span>&lt;T, ID&gt; &#123;<br><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">final</span> JpaEntityInformation&lt;T, ?&gt; entityInformation;<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">final</span> EntityManager em;<br><br>    <span class=\"hljs-meta\">@Autowired</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">SimpleJpaRepositoryImpl</span><span class=\"hljs-params\">(JpaEntityInformation&lt;T, ?&gt; entityInformation, EntityManager entityManager)</span> &#123;<br>        <span class=\"hljs-built_in\">super</span>(entityInformation, entityManager);<br>        <span class=\"hljs-built_in\">this</span>.entityInformation = entityInformation;<br>        <span class=\"hljs-built_in\">this</span>.em = entityManager;<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 通用save方法 ：新增/选择性更新</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-meta\">@Transactional(rollbackFor = Exception.class)</span><br>    <span class=\"hljs-keyword\">public</span> &lt;S <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">T</span>&gt; S <span class=\"hljs-title function_\">save</span><span class=\"hljs-params\">(S entity)</span> &#123;<br>        <span class=\"hljs-comment\">//获取ID</span><br>        <span class=\"hljs-type\">ID</span> <span class=\"hljs-variable\">entityId</span> <span class=\"hljs-operator\">=</span> (ID) entityInformation.getId(entity);<br>        Optional&lt;T&gt; optionalT;<br>        <span class=\"hljs-keyword\">if</span> (StringUtils.isEmpty(entityId)) &#123;<br>            optionalT = Optional.empty();<br>        &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>            <span class=\"hljs-comment\">//若ID非空 则查询最新数据</span><br>            optionalT = findById(entityId);<br>        &#125;<br>        <span class=\"hljs-comment\">//获取空属性并处理成null</span><br>        String[] nullProperties = getNullProperties(entity);<br>        <span class=\"hljs-comment\">//若根据ID查询结果为空</span><br>        <span class=\"hljs-keyword\">if</span> (!optionalT.isPresent()) &#123;<br>            <span class=\"hljs-comment\">//新增</span><br>            em.persist(entity);<br>            <span class=\"hljs-keyword\">return</span> entity;<br>        &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>            <span class=\"hljs-comment\">//1.获取最新对象</span><br>            <span class=\"hljs-type\">T</span> <span class=\"hljs-variable\">target</span> <span class=\"hljs-operator\">=</span> optionalT.get();<br>            <span class=\"hljs-comment\">//2.将非空属性覆盖到最新对象</span><br>            BeanUtils.copyProperties(entity, target, nullProperties);<br>            <span class=\"hljs-comment\">//3.更新非空属性</span><br>            em.merge(target);<br>            <span class=\"hljs-keyword\">return</span> entity;<br>        &#125;<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 获取对象的空属性</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> String[] getNullProperties(Object src) &#123;<br>        <span class=\"hljs-comment\">//1.获取Bean</span><br>        <span class=\"hljs-type\">BeanWrapper</span> <span class=\"hljs-variable\">srcBean</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BeanWrapperImpl</span>(src);<br>        <span class=\"hljs-comment\">//2.获取Bean的属性描述</span><br>        PropertyDescriptor[] pds = srcBean.getPropertyDescriptors();<br>        <span class=\"hljs-comment\">//3.获取Bean的空属性</span><br>        Set&lt;String&gt; properties = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">HashSet</span>&lt;&gt;();<br>        <span class=\"hljs-keyword\">for</span> (PropertyDescriptor propertyDescriptor : pds) &#123;<br>            <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">propertyName</span> <span class=\"hljs-operator\">=</span> propertyDescriptor.getName();<br>            <span class=\"hljs-type\">Object</span> <span class=\"hljs-variable\">propertyValue</span> <span class=\"hljs-operator\">=</span> srcBean.getPropertyValue(propertyName);<br>            <span class=\"hljs-keyword\">if</span> (StringUtils.isEmpty(propertyValue)) &#123;<br>                srcBean.setPropertyValue(propertyName, <span class=\"hljs-literal\">null</span>);<br>                properties.add(propertyName);<br>            &#125;<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> properties.toArray(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">String</span>[<span class=\"hljs-number\">0</span>]);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"2-启动类加注解\"><a href=\"#2-启动类加注解\" class=\"headerlink\" title=\"2. 启动类加注解\"></a>2. 启动类加注解</h3><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs typescript\"><span class=\"hljs-meta\">@EnableJpaRepositories</span>(repositoryBaseClass = <span class=\"hljs-title class_\">SimpleJpaRepositoryImpl</span>.<span class=\"hljs-property\">class</span>)<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"四、常用JPA方法命名规则\"><a href=\"#四、常用JPA方法命名规则\" class=\"headerlink\" title=\"四、常用JPA方法命名规则\"></a>四、常用JPA方法命名规则</h2><table>\n<thead>\n<tr>\n<th align=\"left\">关键词</th>\n<th align=\"left\">样本</th>\n<th align=\"left\">JPQL 片段</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><code>Distinct</code></td>\n<td align=\"left\"><code>findDistinctByLastnameAndFirstname</code></td>\n<td align=\"left\"><code>select distinct … where x.lastname = ?1 and x.firstname = ?2</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>And</code></td>\n<td align=\"left\"><code>findByLastnameAndFirstname</code></td>\n<td align=\"left\"><code>… where x.lastname = ?1 and x.firstname = ?2</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>Or</code></td>\n<td align=\"left\"><code>findByLastnameOrFirstname</code></td>\n<td align=\"left\"><code>… where x.lastname = ?1 or x.firstname = ?2</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>Is</code>, <code>Equals</code></td>\n<td align=\"left\"><code>findByFirstname</code>, <code>findByFirstnameIs</code>,<code>findByFirstnameEquals</code></td>\n<td align=\"left\"><code>… where x.firstname = ?1</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>Between</code></td>\n<td align=\"left\"><code>findByStartDateBetween</code></td>\n<td align=\"left\"><code>… where x.startDate between ?1 and ?2</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>LessThan</code></td>\n<td align=\"left\"><code>findByAgeLessThan</code></td>\n<td align=\"left\"><code>… where x.age &lt; ?1</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>LessThanEqual</code></td>\n<td align=\"left\"><code>findByAgeLessThanEqual</code></td>\n<td align=\"left\"><code>… where x.age &lt;= ?1</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>GreaterThan</code></td>\n<td align=\"left\"><code>findByAgeGreaterThan</code></td>\n<td align=\"left\"><code>… where x.age &gt; ?1</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>GreaterThanEqual</code></td>\n<td align=\"left\"><code>findByAgeGreaterThanEqual</code></td>\n<td align=\"left\"><code>… where x.age &gt;= ?1</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>After</code></td>\n<td align=\"left\"><code>findByStartDateAfter</code></td>\n<td align=\"left\"><code>… where x.startDate &gt; ?1</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>Before</code></td>\n<td align=\"left\"><code>findByStartDateBefore</code></td>\n<td align=\"left\"><code>… where x.startDate &lt; ?1</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>IsNull</code>, <code>Null</code></td>\n<td align=\"left\"><code>findByAge(Is)Null</code></td>\n<td align=\"left\"><code>… where x.age is null</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>IsNotNull</code>, <code>NotNull</code></td>\n<td align=\"left\"><code>findByAge(Is)NotNull</code></td>\n<td align=\"left\"><code>… where x.age not null</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>Like</code></td>\n<td align=\"left\"><code>findByFirstnameLike</code></td>\n<td align=\"left\"><code>… where x.firstname like ?1</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>NotLike</code></td>\n<td align=\"left\"><code>findByFirstnameNotLike</code></td>\n<td align=\"left\"><code>… where x.firstname not like ?1</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>StartingWith</code></td>\n<td align=\"left\"><code>findByFirstnameStartingWith</code></td>\n<td align=\"left\"><code>… where x.firstname like ?1</code>（参数绑定了 append <code>%</code>）</td>\n</tr>\n<tr>\n<td align=\"left\"><code>EndingWith</code></td>\n<td align=\"left\"><code>findByFirstnameEndingWith</code></td>\n<td align=\"left\"><code>… where x.firstname like ?1</code>（参数绑定 prepended <code>%</code>）</td>\n</tr>\n<tr>\n<td align=\"left\"><code>Containing</code></td>\n<td align=\"left\"><code>findByFirstnameContaining</code></td>\n<td align=\"left\"><code>… where x.firstname like ?1</code>（参数绑定包裹在<code>%</code>）</td>\n</tr>\n<tr>\n<td align=\"left\"><code>OrderBy</code></td>\n<td align=\"left\"><code>findByAgeOrderByLastnameDesc</code></td>\n<td align=\"left\"><code>… where x.age = ?1 order by x.lastname desc</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>Not</code></td>\n<td align=\"left\"><code>findByLastnameNot</code></td>\n<td align=\"left\"><code>… where x.lastname &lt;&gt; ?1</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>In</code></td>\n<td align=\"left\"><code>findByAgeIn(Collection&lt;Age&gt; ages)</code></td>\n<td align=\"left\"><code>… where x.age in ?1</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>NotIn</code></td>\n<td align=\"left\"><code>findByAgeNotIn(Collection&lt;Age&gt; ages)</code></td>\n<td align=\"left\"><code>… where x.age not in ?1</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>True</code></td>\n<td align=\"left\"><code>findByActiveTrue()</code></td>\n<td align=\"left\"><code>… where x.active = true</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>False</code></td>\n<td align=\"left\"><code>findByActiveFalse()</code></td>\n<td align=\"left\"><code>… where x.active = false</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>IgnoreCase</code></td>\n<td align=\"left\"><code>findByFirstnameIgnoreCase</code></td>\n<td align=\"left\"><code>… where UPPER(x.firstname) = UPPER(?1)</code></td>\n</tr>\n</tbody></table>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\">docker run -d --name=webdav-aliyundriver --restart=always -p <span class=\"hljs-number\">8080</span>:<span class=\"hljs-number\">8080</span>  -v <span class=\"hljs-regexp\">/etc/</span>localtime:<span class=\"hljs-regexp\">/etc/</span>localtime -v <span class=\"hljs-regexp\">/etc/</span>aliyun-driver<span class=\"hljs-regexp\">/:/</span>etc<span class=\"hljs-regexp\">/aliyun-driver/</span> -e TZ=<span class=\"hljs-string\">&quot;Asia/Shanghai&quot;</span> -e ALIYUNDRIVE_REFRESH_TOKEN=<span class=\"hljs-string\">&quot;91dac35e525c47ebb2bc7d0753875c0e&quot;</span> -e ALIYUNDRIVE_AUTH_PASSWORD=<span class=\"hljs-string\">&quot;HBQ521521cf*&quot;</span> -e JAVA_OPTS=<span class=\"hljs-string\">&quot;-Xmx1g&quot;</span> zx5253/webdav-aliyundriver<br></code></pre></td></tr></table></figure>\n\n<p><a href=\"http://my.huijia21.com/\">http://my.huijia21.com/</a></p>\n"},{"_content":"# code-generator-persion使用\n\n#### 介绍\nMybatis plus的code-generator-persion代码生成器，自动生成车车项目基础代码\n\n#### 软件架构\nspring boot，mybatis plus，swagger2\n\n\n#### 安装教程\n\n1. 导入项目至idea\n\n2. `application.yml`修改数据库信息\n\n   ![image-20210930160141089](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20210930160141089.png)\n\n3. `generator.properties`修改模块名，作者名\n\n   ![image-20210930160345993](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20210930160345993.png)\n\n#### 使用说明\n\n1. 启动CodeGeneratorPeserionApp\n\n2. postman中：保存`localhost:8081/generator/code?tables=auto`响应文件（压缩包）\n\n   ![image-20210930160537298](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20210930160537298.png)\n\n3.  将压缩包内文件依次移入到项目中使用：\n\n    ![image-20210930161108467](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20210930161108467.png)\n\n4.  测试生成代码接口\n\n    ![image-20210930161328623](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20210930161328623.png)\n\n#### 附加功能\n\n1.  一次生成多表，表名参数之间使用英文“,”分割\n2.  配置模板在resources中的template，可自行定义\n\n\n#### 参与贡献\n\n1.  huibq\n2.  https://mybatis.plus/\n","source":"_posts/BookMark/车车笔记/code-generator-persion使用.md","raw":"# code-generator-persion使用\n\n#### 介绍\nMybatis plus的code-generator-persion代码生成器，自动生成车车项目基础代码\n\n#### 软件架构\nspring boot，mybatis plus，swagger2\n\n\n#### 安装教程\n\n1. 导入项目至idea\n\n2. `application.yml`修改数据库信息\n\n   ![image-20210930160141089](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20210930160141089.png)\n\n3. `generator.properties`修改模块名，作者名\n\n   ![image-20210930160345993](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20210930160345993.png)\n\n#### 使用说明\n\n1. 启动CodeGeneratorPeserionApp\n\n2. postman中：保存`localhost:8081/generator/code?tables=auto`响应文件（压缩包）\n\n   ![image-20210930160537298](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20210930160537298.png)\n\n3.  将压缩包内文件依次移入到项目中使用：\n\n    ![image-20210930161108467](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20210930161108467.png)\n\n4.  测试生成代码接口\n\n    ![image-20210930161328623](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20210930161328623.png)\n\n#### 附加功能\n\n1.  一次生成多表，表名参数之间使用英文“,”分割\n2.  配置模板在resources中的template，可自行定义\n\n\n#### 参与贡献\n\n1.  huibq\n2.  https://mybatis.plus/\n","slug":"BookMark/车车笔记/code-generator-persion使用","published":1,"date":"2022-07-18T09:51:23.000Z","updated":"2022-09-01T10:29:55.104Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cl7ptszoq002iaba5h1pi3xya","content":"<h1><span id=\"code-generator-persion使用\">code-generator-persion使用</span></h1><h4><span id=\"介绍\">介绍</span></h4><p>Mybatis plus的code-generator-persion代码生成器，自动生成车车项目基础代码</p>\n<h4><span id=\"软件架构\">软件架构</span></h4><p>spring boot，mybatis plus，swagger2</p>\n<h4><span id=\"安装教程\">安装教程</span></h4><ol>\n<li><p>导入项目至idea</p>\n</li>\n<li><p><code>application.yml</code>修改数据库信息</p>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20210930160141089.png\" alt=\"image-20210930160141089\"></p>\n</li>\n<li><p><code>generator.properties</code>修改模块名，作者名</p>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20210930160345993.png\" alt=\"image-20210930160345993\"></p>\n</li>\n</ol>\n<h4><span id=\"使用说明\">使用说明</span></h4><ol>\n<li><p>启动CodeGeneratorPeserionApp</p>\n</li>\n<li><p>postman中：保存<code>localhost:8081/generator/code?tables=auto</code>响应文件（压缩包）</p>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20210930160537298.png\" alt=\"image-20210930160537298\"></p>\n</li>\n<li><p>将压缩包内文件依次移入到项目中使用：</p>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20210930161108467.png\" alt=\"image-20210930161108467\"></p>\n</li>\n<li><p>测试生成代码接口</p>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20210930161328623.png\" alt=\"image-20210930161328623\"></p>\n</li>\n</ol>\n<h4><span id=\"附加功能\">附加功能</span></h4><ol>\n<li>一次生成多表，表名参数之间使用英文“,”分割</li>\n<li>配置模板在resources中的template，可自行定义</li>\n</ol>\n<h4><span id=\"参与贡献\">参与贡献</span></h4><ol>\n<li>huibq</li>\n<li><a href=\"https://mybatis.plus/\">https://mybatis.plus/</a></li>\n</ol>\n","site":{"data":{}},"wordcount":380,"excerpt":"","more":"<h1 id=\"code-generator-persion使用\"><a href=\"#code-generator-persion使用\" class=\"headerlink\" title=\"code-generator-persion使用\"></a>code-generator-persion使用</h1><h4 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h4><p>Mybatis plus的code-generator-persion代码生成器，自动生成车车项目基础代码</p>\n<h4 id=\"软件架构\"><a href=\"#软件架构\" class=\"headerlink\" title=\"软件架构\"></a>软件架构</h4><p>spring boot，mybatis plus，swagger2</p>\n<h4 id=\"安装教程\"><a href=\"#安装教程\" class=\"headerlink\" title=\"安装教程\"></a>安装教程</h4><ol>\n<li><p>导入项目至idea</p>\n</li>\n<li><p><code>application.yml</code>修改数据库信息</p>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20210930160141089.png\" alt=\"image-20210930160141089\"></p>\n</li>\n<li><p><code>generator.properties</code>修改模块名，作者名</p>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20210930160345993.png\" alt=\"image-20210930160345993\"></p>\n</li>\n</ol>\n<h4 id=\"使用说明\"><a href=\"#使用说明\" class=\"headerlink\" title=\"使用说明\"></a>使用说明</h4><ol>\n<li><p>启动CodeGeneratorPeserionApp</p>\n</li>\n<li><p>postman中：保存<code>localhost:8081/generator/code?tables=auto</code>响应文件（压缩包）</p>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20210930160537298.png\" alt=\"image-20210930160537298\"></p>\n</li>\n<li><p>将压缩包内文件依次移入到项目中使用：</p>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20210930161108467.png\" alt=\"image-20210930161108467\"></p>\n</li>\n<li><p>测试生成代码接口</p>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20210930161328623.png\" alt=\"image-20210930161328623\"></p>\n</li>\n</ol>\n<h4 id=\"附加功能\"><a href=\"#附加功能\" class=\"headerlink\" title=\"附加功能\"></a>附加功能</h4><ol>\n<li>一次生成多表，表名参数之间使用英文“,”分割</li>\n<li>配置模板在resources中的template，可自行定义</li>\n</ol>\n<h4 id=\"参与贡献\"><a href=\"#参与贡献\" class=\"headerlink\" title=\"参与贡献\"></a>参与贡献</h4><ol>\n<li>huibq</li>\n<li><a href=\"https://mybatis.plus/\">https://mybatis.plus/</a></li>\n</ol>\n"},{"_content":"# Postman自动获取token并添加到请求头\n\n1. 设置全局环境变量\n\n![image-20220329135612832](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220329135612832.png)\n\n2. 在登录接口Tests添加脚本\n\n```\n// 设置环境变量token，获取response中headler的token\npm.environment.set(\"token\", pm.response.headers.get(\"token\"));\n```\n\n![image-20220329135431008](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220329135431008.png)\n\n3. 在目录中设置api key认证添加token到头部\n\n![image-20220329135535100](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220329135535100.png)\n\n# 分享文档\n\n![image-20220329160120938](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220329160120938.png)","source":"_posts/BookMark/车车笔记/postman.md","raw":"# Postman自动获取token并添加到请求头\n\n1. 设置全局环境变量\n\n![image-20220329135612832](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220329135612832.png)\n\n2. 在登录接口Tests添加脚本\n\n```\n// 设置环境变量token，获取response中headler的token\npm.environment.set(\"token\", pm.response.headers.get(\"token\"));\n```\n\n![image-20220329135431008](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220329135431008.png)\n\n3. 在目录中设置api key认证添加token到头部\n\n![image-20220329135535100](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220329135535100.png)\n\n# 分享文档\n\n![image-20220329160120938](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220329160120938.png)","slug":"BookMark/车车笔记/postman","published":1,"date":"2022-07-18T09:51:25.000Z","updated":"2022-09-01T10:21:05.939Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cl7ptszoq002jaba52cf90ih8","content":"<h1><span id=\"postman自动获取token并添加到请求头\">Postman自动获取token并添加到请求头</span></h1><ol>\n<li>设置全局环境变量</li>\n</ol>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220329135612832.png\" alt=\"image-20220329135612832\"></p>\n<ol start=\"2\">\n<li>在登录接口Tests添加脚本</li>\n</ol>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs csharp\"><span class=\"hljs-comment\">// 设置环境变量token，获取response中headler的token</span><br>pm.environment.<span class=\"hljs-keyword\">set</span>(<span class=\"hljs-string\">&quot;token&quot;</span>, pm.response.headers.<span class=\"hljs-keyword\">get</span>(<span class=\"hljs-string\">&quot;token&quot;</span>));<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220329135431008.png\" alt=\"image-20220329135431008\"></p>\n<ol start=\"3\">\n<li>在目录中设置api key认证添加token到头部</li>\n</ol>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220329135535100.png\" alt=\"image-20220329135535100\"></p>\n<h1><span id=\"分享文档\">分享文档</span></h1><p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220329160120938.png\" alt=\"image-20220329160120938\"></p>\n","site":{"data":{}},"wordcount":194,"excerpt":"","more":"<h1 id=\"Postman自动获取token并添加到请求头\"><a href=\"#Postman自动获取token并添加到请求头\" class=\"headerlink\" title=\"Postman自动获取token并添加到请求头\"></a>Postman自动获取token并添加到请求头</h1><ol>\n<li>设置全局环境变量</li>\n</ol>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220329135612832.png\" alt=\"image-20220329135612832\"></p>\n<ol start=\"2\">\n<li>在登录接口Tests添加脚本</li>\n</ol>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs csharp\"><span class=\"hljs-comment\">// 设置环境变量token，获取response中headler的token</span><br>pm.environment.<span class=\"hljs-keyword\">set</span>(<span class=\"hljs-string\">&quot;token&quot;</span>, pm.response.headers.<span class=\"hljs-keyword\">get</span>(<span class=\"hljs-string\">&quot;token&quot;</span>));<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220329135431008.png\" alt=\"image-20220329135431008\"></p>\n<ol start=\"3\">\n<li>在目录中设置api key认证添加token到头部</li>\n</ol>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220329135535100.png\" alt=\"image-20220329135535100\"></p>\n<h1 id=\"分享文档\"><a href=\"#分享文档\" class=\"headerlink\" title=\"分享文档\"></a>分享文档</h1><p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220329160120938.png\" alt=\"image-20220329160120938\"></p>\n"},{"_content":"\n​\t\n\n|               操作               |                             接口                             |                   接口位置                    |\n| :------------------------------: | :----------------------------------------------------------: | :-------------------------------------------: |\n|             是否登录             |         https://cc.chetimes.com/v2.2/users/hasLogin          |            UsersResource#hasLogin             |\n|         获取地区下拉列表         |           https://cc.chetimes.com/v2.2/areas/group           |          AreasResource#getGroupAreas          |\n|           获取短信验证           | https://cc.chetimes.com/v2.2/sms/validation?mobile=15516045023&action=login |          SmsResource#sendValidation           |\n|               登录               | https://cc.chetimes.com/v2.2/users/login?mobile=15516045023&validationCode=825234 |              UsersResource#login              |\n|         按天买险订单详情         |     https://cc.chetimes.com/v2.2/dailyInsurances/detail      | DailyInsuranceResource#getDetailInfoByOrderNo |\n| 查询当前用户是否有一键续保的订单 |         https://cc.chetimes.com/v2.2/module/renewal          |         ModuleResource#oneKeyRenewal          |\n|          测试数据？？？          |   https://cc.chetimes.com/v2.2/dailyInsurances/trial/data    |       DailyInsuranceResource#trialData        |\n|        根据地区获取banner        |        https://cc.chetimes.com/v2.2/module/basebanner        |           ModuleResource#baseBanner           |\n|           自动获取执照           |          https://cc.chetimes.com/v2.2/autos/license          |        AutoResource#getVehicleLicense         |\n|           自动获取车型           |        https://cc.chetimes.com/v2.2//autos/autoTypes         |           AutoResource#getAutoTypes           |\n|          某地区保司资源          |     https://cc.chetimes.com/v2.2/packages/?areaId=110000     | InsurancePackageResource#getInsurancePackage  |\n|             默认报价             |         https://cc.chetimes.com/v2.2/quotes/default          |          QuotesResource#defaultQuote          |\n|          Websocket相关           |             https://cc.chetimes.com/sp/subscribe             | cheche.rest.serverpush.quote.SPQuotesService  |\n|         获取允许协议资源         | https://cc.chetimes.com/v2.2/module/resource?keys=GRANT_INSURANCE |            ModuleResource#resource            |\n|            授权？？？            |              https://cc.chetimes.com/v2.2/grant              |              GrantResource#grant              |\n|     通过记录key保存报价信息      | https://cc.chetimes.com/v2.2/quotes/c68cc3d6646ab3244a4a8c4ec40d390e |          QuotesResource#saveQuote1_6          |\n|         获取用户地址列表         |  https://cc.chetimes.com/v1.9/users/address?size=10&page=0   |      UsersAutoResource#addressListFor12       |\n|             创建订单             |      https://cc.chetimes.com/v2.2/quotes/2688344/order       |           QuotesResource#placeOrder           |\n|             查询订单             |             https://cc.chetimes.com/v2.2/orders              |         OrdersResource#getOrderList11         |\n\n","source":"_posts/BookMark/车车笔记/web报价接口调用整理.md","raw":"\n​\t\n\n|               操作               |                             接口                             |                   接口位置                    |\n| :------------------------------: | :----------------------------------------------------------: | :-------------------------------------------: |\n|             是否登录             |         https://cc.chetimes.com/v2.2/users/hasLogin          |            UsersResource#hasLogin             |\n|         获取地区下拉列表         |           https://cc.chetimes.com/v2.2/areas/group           |          AreasResource#getGroupAreas          |\n|           获取短信验证           | https://cc.chetimes.com/v2.2/sms/validation?mobile=15516045023&action=login |          SmsResource#sendValidation           |\n|               登录               | https://cc.chetimes.com/v2.2/users/login?mobile=15516045023&validationCode=825234 |              UsersResource#login              |\n|         按天买险订单详情         |     https://cc.chetimes.com/v2.2/dailyInsurances/detail      | DailyInsuranceResource#getDetailInfoByOrderNo |\n| 查询当前用户是否有一键续保的订单 |         https://cc.chetimes.com/v2.2/module/renewal          |         ModuleResource#oneKeyRenewal          |\n|          测试数据？？？          |   https://cc.chetimes.com/v2.2/dailyInsurances/trial/data    |       DailyInsuranceResource#trialData        |\n|        根据地区获取banner        |        https://cc.chetimes.com/v2.2/module/basebanner        |           ModuleResource#baseBanner           |\n|           自动获取执照           |          https://cc.chetimes.com/v2.2/autos/license          |        AutoResource#getVehicleLicense         |\n|           自动获取车型           |        https://cc.chetimes.com/v2.2//autos/autoTypes         |           AutoResource#getAutoTypes           |\n|          某地区保司资源          |     https://cc.chetimes.com/v2.2/packages/?areaId=110000     | InsurancePackageResource#getInsurancePackage  |\n|             默认报价             |         https://cc.chetimes.com/v2.2/quotes/default          |          QuotesResource#defaultQuote          |\n|          Websocket相关           |             https://cc.chetimes.com/sp/subscribe             | cheche.rest.serverpush.quote.SPQuotesService  |\n|         获取允许协议资源         | https://cc.chetimes.com/v2.2/module/resource?keys=GRANT_INSURANCE |            ModuleResource#resource            |\n|            授权？？？            |              https://cc.chetimes.com/v2.2/grant              |              GrantResource#grant              |\n|     通过记录key保存报价信息      | https://cc.chetimes.com/v2.2/quotes/c68cc3d6646ab3244a4a8c4ec40d390e |          QuotesResource#saveQuote1_6          |\n|         获取用户地址列表         |  https://cc.chetimes.com/v1.9/users/address?size=10&page=0   |      UsersAutoResource#addressListFor12       |\n|             创建订单             |      https://cc.chetimes.com/v2.2/quotes/2688344/order       |           QuotesResource#placeOrder           |\n|             查询订单             |             https://cc.chetimes.com/v2.2/orders              |         OrdersResource#getOrderList11         |\n\n","slug":"BookMark/车车笔记/web报价接口调用整理","published":1,"date":"2022-07-18T09:51:26.000Z","updated":"2022-07-18T09:51:26.000Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cl7ptszoq002kaba5hdudcsn3","content":"<p>​\t</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">操作</th>\n<th align=\"center\">接口</th>\n<th align=\"center\">接口位置</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">是否登录</td>\n<td align=\"center\"><a href=\"https://cc.chetimes.com/v2.2/users/hasLogin\">https://cc.chetimes.com/v2.2/users/hasLogin</a></td>\n<td align=\"center\">UsersResource#hasLogin</td>\n</tr>\n<tr>\n<td align=\"center\">获取地区下拉列表</td>\n<td align=\"center\"><a href=\"https://cc.chetimes.com/v2.2/areas/group\">https://cc.chetimes.com/v2.2/areas/group</a></td>\n<td align=\"center\">AreasResource#getGroupAreas</td>\n</tr>\n<tr>\n<td align=\"center\">获取短信验证</td>\n<td align=\"center\"><a href=\"https://cc.chetimes.com/v2.2/sms/validation?mobile=15516045023&amp;action=login\">https://cc.chetimes.com/v2.2/sms/validation?mobile=15516045023&amp;action=login</a></td>\n<td align=\"center\">SmsResource#sendValidation</td>\n</tr>\n<tr>\n<td align=\"center\">登录</td>\n<td align=\"center\"><a href=\"https://cc.chetimes.com/v2.2/users/login?mobile=15516045023&amp;validationCode=825234\">https://cc.chetimes.com/v2.2/users/login?mobile=15516045023&amp;validationCode=825234</a></td>\n<td align=\"center\">UsersResource#login</td>\n</tr>\n<tr>\n<td align=\"center\">按天买险订单详情</td>\n<td align=\"center\"><a href=\"https://cc.chetimes.com/v2.2/dailyInsurances/detail\">https://cc.chetimes.com/v2.2/dailyInsurances/detail</a></td>\n<td align=\"center\">DailyInsuranceResource#getDetailInfoByOrderNo</td>\n</tr>\n<tr>\n<td align=\"center\">查询当前用户是否有一键续保的订单</td>\n<td align=\"center\"><a href=\"https://cc.chetimes.com/v2.2/module/renewal\">https://cc.chetimes.com/v2.2/module/renewal</a></td>\n<td align=\"center\">ModuleResource#oneKeyRenewal</td>\n</tr>\n<tr>\n<td align=\"center\">测试数据？？？</td>\n<td align=\"center\"><a href=\"https://cc.chetimes.com/v2.2/dailyInsurances/trial/data\">https://cc.chetimes.com/v2.2/dailyInsurances/trial/data</a></td>\n<td align=\"center\">DailyInsuranceResource#trialData</td>\n</tr>\n<tr>\n<td align=\"center\">根据地区获取banner</td>\n<td align=\"center\"><a href=\"https://cc.chetimes.com/v2.2/module/basebanner\">https://cc.chetimes.com/v2.2/module/basebanner</a></td>\n<td align=\"center\">ModuleResource#baseBanner</td>\n</tr>\n<tr>\n<td align=\"center\">自动获取执照</td>\n<td align=\"center\"><a href=\"https://cc.chetimes.com/v2.2/autos/license\">https://cc.chetimes.com/v2.2/autos/license</a></td>\n<td align=\"center\">AutoResource#getVehicleLicense</td>\n</tr>\n<tr>\n<td align=\"center\">自动获取车型</td>\n<td align=\"center\"><a href=\"https://cc.chetimes.com/v2.2//autos/autoTypes\">https://cc.chetimes.com/v2.2//autos/autoTypes</a></td>\n<td align=\"center\">AutoResource#getAutoTypes</td>\n</tr>\n<tr>\n<td align=\"center\">某地区保司资源</td>\n<td align=\"center\"><a href=\"https://cc.chetimes.com/v2.2/packages/?areaId=110000\">https://cc.chetimes.com/v2.2/packages/?areaId=110000</a></td>\n<td align=\"center\">InsurancePackageResource#getInsurancePackage</td>\n</tr>\n<tr>\n<td align=\"center\">默认报价</td>\n<td align=\"center\"><a href=\"https://cc.chetimes.com/v2.2/quotes/default\">https://cc.chetimes.com/v2.2/quotes/default</a></td>\n<td align=\"center\">QuotesResource#defaultQuote</td>\n</tr>\n<tr>\n<td align=\"center\">Websocket相关</td>\n<td align=\"center\"><a href=\"https://cc.chetimes.com/sp/subscribe\">https://cc.chetimes.com/sp/subscribe</a></td>\n<td align=\"center\">cheche.rest.serverpush.quote.SPQuotesService</td>\n</tr>\n<tr>\n<td align=\"center\">获取允许协议资源</td>\n<td align=\"center\"><a href=\"https://cc.chetimes.com/v2.2/module/resource?keys=GRANT_INSURANCE\">https://cc.chetimes.com/v2.2/module/resource?keys=GRANT_INSURANCE</a></td>\n<td align=\"center\">ModuleResource#resource</td>\n</tr>\n<tr>\n<td align=\"center\">授权？？？</td>\n<td align=\"center\"><a href=\"https://cc.chetimes.com/v2.2/grant\">https://cc.chetimes.com/v2.2/grant</a></td>\n<td align=\"center\">GrantResource#grant</td>\n</tr>\n<tr>\n<td align=\"center\">通过记录key保存报价信息</td>\n<td align=\"center\"><a href=\"https://cc.chetimes.com/v2.2/quotes/c68cc3d6646ab3244a4a8c4ec40d390e\">https://cc.chetimes.com/v2.2/quotes/c68cc3d6646ab3244a4a8c4ec40d390e</a></td>\n<td align=\"center\">QuotesResource#saveQuote1_6</td>\n</tr>\n<tr>\n<td align=\"center\">获取用户地址列表</td>\n<td align=\"center\"><a href=\"https://cc.chetimes.com/v1.9/users/address?size=10&amp;page=0\">https://cc.chetimes.com/v1.9/users/address?size=10&amp;page=0</a></td>\n<td align=\"center\">UsersAutoResource#addressListFor12</td>\n</tr>\n<tr>\n<td align=\"center\">创建订单</td>\n<td align=\"center\"><a href=\"https://cc.chetimes.com/v2.2/quotes/2688344/order\">https://cc.chetimes.com/v2.2/quotes/2688344/order</a></td>\n<td align=\"center\">QuotesResource#placeOrder</td>\n</tr>\n<tr>\n<td align=\"center\">查询订单</td>\n<td align=\"center\"><a href=\"https://cc.chetimes.com/v2.2/orders\">https://cc.chetimes.com/v2.2/orders</a></td>\n<td align=\"center\">OrdersResource#getOrderList11</td>\n</tr>\n</tbody></table>\n","site":{"data":{}},"wordcount":1671,"excerpt":"","more":"<p>​\t</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">操作</th>\n<th align=\"center\">接口</th>\n<th align=\"center\">接口位置</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">是否登录</td>\n<td align=\"center\"><a href=\"https://cc.chetimes.com/v2.2/users/hasLogin\">https://cc.chetimes.com/v2.2/users/hasLogin</a></td>\n<td align=\"center\">UsersResource#hasLogin</td>\n</tr>\n<tr>\n<td align=\"center\">获取地区下拉列表</td>\n<td align=\"center\"><a href=\"https://cc.chetimes.com/v2.2/areas/group\">https://cc.chetimes.com/v2.2/areas/group</a></td>\n<td align=\"center\">AreasResource#getGroupAreas</td>\n</tr>\n<tr>\n<td align=\"center\">获取短信验证</td>\n<td align=\"center\"><a href=\"https://cc.chetimes.com/v2.2/sms/validation?mobile=15516045023&amp;action=login\">https://cc.chetimes.com/v2.2/sms/validation?mobile=15516045023&amp;action=login</a></td>\n<td align=\"center\">SmsResource#sendValidation</td>\n</tr>\n<tr>\n<td align=\"center\">登录</td>\n<td align=\"center\"><a href=\"https://cc.chetimes.com/v2.2/users/login?mobile=15516045023&amp;validationCode=825234\">https://cc.chetimes.com/v2.2/users/login?mobile=15516045023&amp;validationCode=825234</a></td>\n<td align=\"center\">UsersResource#login</td>\n</tr>\n<tr>\n<td align=\"center\">按天买险订单详情</td>\n<td align=\"center\"><a href=\"https://cc.chetimes.com/v2.2/dailyInsurances/detail\">https://cc.chetimes.com/v2.2/dailyInsurances/detail</a></td>\n<td align=\"center\">DailyInsuranceResource#getDetailInfoByOrderNo</td>\n</tr>\n<tr>\n<td align=\"center\">查询当前用户是否有一键续保的订单</td>\n<td align=\"center\"><a href=\"https://cc.chetimes.com/v2.2/module/renewal\">https://cc.chetimes.com/v2.2/module/renewal</a></td>\n<td align=\"center\">ModuleResource#oneKeyRenewal</td>\n</tr>\n<tr>\n<td align=\"center\">测试数据？？？</td>\n<td align=\"center\"><a href=\"https://cc.chetimes.com/v2.2/dailyInsurances/trial/data\">https://cc.chetimes.com/v2.2/dailyInsurances/trial/data</a></td>\n<td align=\"center\">DailyInsuranceResource#trialData</td>\n</tr>\n<tr>\n<td align=\"center\">根据地区获取banner</td>\n<td align=\"center\"><a href=\"https://cc.chetimes.com/v2.2/module/basebanner\">https://cc.chetimes.com/v2.2/module/basebanner</a></td>\n<td align=\"center\">ModuleResource#baseBanner</td>\n</tr>\n<tr>\n<td align=\"center\">自动获取执照</td>\n<td align=\"center\"><a href=\"https://cc.chetimes.com/v2.2/autos/license\">https://cc.chetimes.com/v2.2/autos/license</a></td>\n<td align=\"center\">AutoResource#getVehicleLicense</td>\n</tr>\n<tr>\n<td align=\"center\">自动获取车型</td>\n<td align=\"center\"><a href=\"https://cc.chetimes.com/v2.2//autos/autoTypes\">https://cc.chetimes.com/v2.2//autos/autoTypes</a></td>\n<td align=\"center\">AutoResource#getAutoTypes</td>\n</tr>\n<tr>\n<td align=\"center\">某地区保司资源</td>\n<td align=\"center\"><a href=\"https://cc.chetimes.com/v2.2/packages/?areaId=110000\">https://cc.chetimes.com/v2.2/packages/?areaId=110000</a></td>\n<td align=\"center\">InsurancePackageResource#getInsurancePackage</td>\n</tr>\n<tr>\n<td align=\"center\">默认报价</td>\n<td align=\"center\"><a href=\"https://cc.chetimes.com/v2.2/quotes/default\">https://cc.chetimes.com/v2.2/quotes/default</a></td>\n<td align=\"center\">QuotesResource#defaultQuote</td>\n</tr>\n<tr>\n<td align=\"center\">Websocket相关</td>\n<td align=\"center\"><a href=\"https://cc.chetimes.com/sp/subscribe\">https://cc.chetimes.com/sp/subscribe</a></td>\n<td align=\"center\">cheche.rest.serverpush.quote.SPQuotesService</td>\n</tr>\n<tr>\n<td align=\"center\">获取允许协议资源</td>\n<td align=\"center\"><a href=\"https://cc.chetimes.com/v2.2/module/resource?keys=GRANT_INSURANCE\">https://cc.chetimes.com/v2.2/module/resource?keys=GRANT_INSURANCE</a></td>\n<td align=\"center\">ModuleResource#resource</td>\n</tr>\n<tr>\n<td align=\"center\">授权？？？</td>\n<td align=\"center\"><a href=\"https://cc.chetimes.com/v2.2/grant\">https://cc.chetimes.com/v2.2/grant</a></td>\n<td align=\"center\">GrantResource#grant</td>\n</tr>\n<tr>\n<td align=\"center\">通过记录key保存报价信息</td>\n<td align=\"center\"><a href=\"https://cc.chetimes.com/v2.2/quotes/c68cc3d6646ab3244a4a8c4ec40d390e\">https://cc.chetimes.com/v2.2/quotes/c68cc3d6646ab3244a4a8c4ec40d390e</a></td>\n<td align=\"center\">QuotesResource#saveQuote1_6</td>\n</tr>\n<tr>\n<td align=\"center\">获取用户地址列表</td>\n<td align=\"center\"><a href=\"https://cc.chetimes.com/v1.9/users/address?size=10&amp;page=0\">https://cc.chetimes.com/v1.9/users/address?size=10&amp;page=0</a></td>\n<td align=\"center\">UsersAutoResource#addressListFor12</td>\n</tr>\n<tr>\n<td align=\"center\">创建订单</td>\n<td align=\"center\"><a href=\"https://cc.chetimes.com/v2.2/quotes/2688344/order\">https://cc.chetimes.com/v2.2/quotes/2688344/order</a></td>\n<td align=\"center\">QuotesResource#placeOrder</td>\n</tr>\n<tr>\n<td align=\"center\">查询订单</td>\n<td align=\"center\"><a href=\"https://cc.chetimes.com/v2.2/orders\">https://cc.chetimes.com/v2.2/orders</a></td>\n<td align=\"center\">OrdersResource#getOrderList11</td>\n</tr>\n</tbody></table>\n"},{"_content":"### 现有存车的问题\n\n+ 通过车辆风控但未过天域风控的重复车辆保存问题\n\n+ 目前车辆信息表数据不单一，用户Id和禁用标识的作用\n\n+ 车辆过户，车牌号重复，owner不同问题\n\n### 解绑操作\n\n1. 在原解绑操作事务中修改当前 用户 和 车牌 的状态\n\n2. 保存车辆信息表过程需要重新梳理\n\n   + 进行车辆风控前，是否需要先验证车辆信息是否存在\n\n   + 保存车辆的过程是否应该放到留资成功后，而非获取到车辆信息之后\n\n3. 同一车辆被不同用户换绑，车辆信息保存还是更新\n\n\n\n### 复盘\n\n1. 评审过程：未在评审前考虑详细。流程图未完全考虑清楚，多次与产品在后期修改流程\n\n2. 开发：\n\n   + 自有接口的对接未通过接口文档对接，未分析完所有可能情况，未进行车辆姓名的一致性校验\n\n   + 写代码逻辑时仅考虑了字面意思，增加车辆信息前未完全确认车辆的新增或更新逻辑\n\n3. 测试：对itg，stg环境区分有差\n\n4. 上线出现问题：\n\n   + 出现自有接口查到用户姓名与留资人不同但校验通过的问题。\n\n   + 同一车辆重复问题\n\n5. 后续做法：\n\n   + 对接所有外部接口，尽可能通过接口文档对接。\n\n   + 书写逻辑时还是只相信自己的校验，不可相信所调用的所有外部接口数据\n\n   + 想问题不可以简单考虑字面意思，应先考虑异常情况，最后写正流程","source":"_posts/BookMark/车车笔记/停给利二期复盘.md","raw":"### 现有存车的问题\n\n+ 通过车辆风控但未过天域风控的重复车辆保存问题\n\n+ 目前车辆信息表数据不单一，用户Id和禁用标识的作用\n\n+ 车辆过户，车牌号重复，owner不同问题\n\n### 解绑操作\n\n1. 在原解绑操作事务中修改当前 用户 和 车牌 的状态\n\n2. 保存车辆信息表过程需要重新梳理\n\n   + 进行车辆风控前，是否需要先验证车辆信息是否存在\n\n   + 保存车辆的过程是否应该放到留资成功后，而非获取到车辆信息之后\n\n3. 同一车辆被不同用户换绑，车辆信息保存还是更新\n\n\n\n### 复盘\n\n1. 评审过程：未在评审前考虑详细。流程图未完全考虑清楚，多次与产品在后期修改流程\n\n2. 开发：\n\n   + 自有接口的对接未通过接口文档对接，未分析完所有可能情况，未进行车辆姓名的一致性校验\n\n   + 写代码逻辑时仅考虑了字面意思，增加车辆信息前未完全确认车辆的新增或更新逻辑\n\n3. 测试：对itg，stg环境区分有差\n\n4. 上线出现问题：\n\n   + 出现自有接口查到用户姓名与留资人不同但校验通过的问题。\n\n   + 同一车辆重复问题\n\n5. 后续做法：\n\n   + 对接所有外部接口，尽可能通过接口文档对接。\n\n   + 书写逻辑时还是只相信自己的校验，不可相信所调用的所有外部接口数据\n\n   + 想问题不可以简单考虑字面意思，应先考虑异常情况，最后写正流程","slug":"BookMark/车车笔记/停给利二期复盘","published":1,"date":"2022-07-18T09:51:27.000Z","updated":"2022-07-18T09:51:27.000Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cl7ptszoq002laba53ma6ahu3","content":"<h3><span id=\"现有存车的问题\">现有存车的问题</span></h3><ul>\n<li><p>通过车辆风控但未过天域风控的重复车辆保存问题</p>\n</li>\n<li><p>目前车辆信息表数据不单一，用户Id和禁用标识的作用</p>\n</li>\n<li><p>车辆过户，车牌号重复，owner不同问题</p>\n</li>\n</ul>\n<h3><span id=\"解绑操作\">解绑操作</span></h3><ol>\n<li><p>在原解绑操作事务中修改当前 用户 和 车牌 的状态</p>\n</li>\n<li><p>保存车辆信息表过程需要重新梳理</p>\n<ul>\n<li><p>进行车辆风控前，是否需要先验证车辆信息是否存在</p>\n</li>\n<li><p>保存车辆的过程是否应该放到留资成功后，而非获取到车辆信息之后</p>\n</li>\n</ul>\n</li>\n<li><p>同一车辆被不同用户换绑，车辆信息保存还是更新</p>\n</li>\n</ol>\n<h3><span id=\"复盘\">复盘</span></h3><ol>\n<li><p>评审过程：未在评审前考虑详细。流程图未完全考虑清楚，多次与产品在后期修改流程</p>\n</li>\n<li><p>开发：</p>\n<ul>\n<li><p>自有接口的对接未通过接口文档对接，未分析完所有可能情况，未进行车辆姓名的一致性校验</p>\n</li>\n<li><p>写代码逻辑时仅考虑了字面意思，增加车辆信息前未完全确认车辆的新增或更新逻辑</p>\n</li>\n</ul>\n</li>\n<li><p>测试：对itg，stg环境区分有差</p>\n</li>\n<li><p>上线出现问题：</p>\n<ul>\n<li><p>出现自有接口查到用户姓名与留资人不同但校验通过的问题。</p>\n</li>\n<li><p>同一车辆重复问题</p>\n</li>\n</ul>\n</li>\n<li><p>后续做法：</p>\n<ul>\n<li><p>对接所有外部接口，尽可能通过接口文档对接。</p>\n</li>\n<li><p>书写逻辑时还是只相信自己的校验，不可相信所调用的所有外部接口数据</p>\n</li>\n<li><p>想问题不可以简单考虑字面意思，应先考虑异常情况，最后写正流程</p>\n</li>\n</ul>\n</li>\n</ol>\n","site":{"data":{}},"wordcount":457,"excerpt":"","more":"<h3 id=\"现有存车的问题\"><a href=\"#现有存车的问题\" class=\"headerlink\" title=\"现有存车的问题\"></a>现有存车的问题</h3><ul>\n<li><p>通过车辆风控但未过天域风控的重复车辆保存问题</p>\n</li>\n<li><p>目前车辆信息表数据不单一，用户Id和禁用标识的作用</p>\n</li>\n<li><p>车辆过户，车牌号重复，owner不同问题</p>\n</li>\n</ul>\n<h3 id=\"解绑操作\"><a href=\"#解绑操作\" class=\"headerlink\" title=\"解绑操作\"></a>解绑操作</h3><ol>\n<li><p>在原解绑操作事务中修改当前 用户 和 车牌 的状态</p>\n</li>\n<li><p>保存车辆信息表过程需要重新梳理</p>\n<ul>\n<li><p>进行车辆风控前，是否需要先验证车辆信息是否存在</p>\n</li>\n<li><p>保存车辆的过程是否应该放到留资成功后，而非获取到车辆信息之后</p>\n</li>\n</ul>\n</li>\n<li><p>同一车辆被不同用户换绑，车辆信息保存还是更新</p>\n</li>\n</ol>\n<h3 id=\"复盘\"><a href=\"#复盘\" class=\"headerlink\" title=\"复盘\"></a>复盘</h3><ol>\n<li><p>评审过程：未在评审前考虑详细。流程图未完全考虑清楚，多次与产品在后期修改流程</p>\n</li>\n<li><p>开发：</p>\n<ul>\n<li><p>自有接口的对接未通过接口文档对接，未分析完所有可能情况，未进行车辆姓名的一致性校验</p>\n</li>\n<li><p>写代码逻辑时仅考虑了字面意思，增加车辆信息前未完全确认车辆的新增或更新逻辑</p>\n</li>\n</ul>\n</li>\n<li><p>测试：对itg，stg环境区分有差</p>\n</li>\n<li><p>上线出现问题：</p>\n<ul>\n<li><p>出现自有接口查到用户姓名与留资人不同但校验通过的问题。</p>\n</li>\n<li><p>同一车辆重复问题</p>\n</li>\n</ul>\n</li>\n<li><p>后续做法：</p>\n<ul>\n<li><p>对接所有外部接口，尽可能通过接口文档对接。</p>\n</li>\n<li><p>书写逻辑时还是只相信自己的校验，不可相信所调用的所有外部接口数据</p>\n</li>\n<li><p>想问题不可以简单考虑字面意思，应先考虑异常情况，最后写正流程</p>\n</li>\n</ul>\n</li>\n</ol>\n"},{"_content":"```\n@Override\npublic ScheduleTaskResult updateSuspendStatus() {\n    AtomicInteger initPage=new AtomicInteger(1);\n    int size=500;\n    List<Long> failList = new ArrayList<>();\n    //更新待开始车辆\n    updateWait(failList, initPage, size);\n    //更新停驶中车辆\n    updateStop(failList, initPage, size);\n    return ScheduleTaskResult.succeed(new ArrayList<>(),failList,\"返回失败用户ID集合\");\n}\n\n//更新待开始车辆，查询 开始时间<=当前时间，状态变更为停驶中\nprivate void updateWait(List<Long> failList,AtomicInteger initPage,int size) {\n    Page<SuspendRecord> waitPageList = suspendRecordRepository.findAllByStatusAndStartTimeLessThanEqual(\n        WAITING.getStatus(),\n        DateUtil.date(),\n        PageRequest.of(initPage.intValue(), size)\n    );\n    updateSuspendRecord(failList, waitPageList.getContent(), STOP_ING);\n    while (waitPageList.hasNext()){\n        waitPageList = suspendRecordRepository.findAllByStatusAndStartTimeLessThanEqual(\n            WAITING.getStatus(),\n            DateUtil.date(),\n            PageRequest.of(initPage.incrementAndGet(), size)\n        );\n        updateSuspendRecord(failList, waitPageList.getContent(), STOP_ING);\n    }\n}\n\n//更新停驶中车辆，查询 结束时间<当前时间，状态变更为停驶结束\nprivate void updateStop(List<Long> failList,AtomicInteger initPage,int size) {\n    Page<SuspendRecord> stopPageList = suspendRecordRepository.findAllByStatusAndEndTimeBefore(\n        STOP_ING.getStatus(),\n        DateUtil.date(),\n        PageRequest.of(initPage.intValue(), size)\n    );\n    updateSuspendRecord(failList,stopPageList.getContent(),STOP_END);\n    while (stopPageList.hasNext()){\n        stopPageList = suspendRecordRepository.findAllByStatusAndEndTimeBefore(\n            STOP_ING.getStatus(),\n            DateUtil.date(),\n            PageRequest.of(initPage.incrementAndGet(), size)\n        );\n        updateSuspendRecord(failList, stopPageList.getContent(), STOP_END);\n    }\n}\n\n/**\n * 对停驶记录进行更新\n * @param failList  更新失败的用户id\n * @param content  需要更新的列表\n * @param statusEnum 更新的状态\n */\nprivate void updateSuspendRecord(List<Long> failList, List<SuspendRecord> content, SuspendStatusEnum statusEnum) {\n    ForkJoinPool pool = new ForkJoinPool(10);\n    pool.submit(() -> {\n        content.parallelStream().forEach(it -> {\n            Long userId = it.getUserId();\n            try {\n                it.setStatus(statusEnum.getStatus());\n                suspendRecordRepository.save(it);\n            } catch (Exception e) {\n                log.error(\"userId:{} change status fail\", userId);\n                failList.add(userId);\n            }\n        });\n    });\n}\n```\n\n\n\n\n\n","source":"_posts/BookMark/车车笔记/并行流.md","raw":"```\n@Override\npublic ScheduleTaskResult updateSuspendStatus() {\n    AtomicInteger initPage=new AtomicInteger(1);\n    int size=500;\n    List<Long> failList = new ArrayList<>();\n    //更新待开始车辆\n    updateWait(failList, initPage, size);\n    //更新停驶中车辆\n    updateStop(failList, initPage, size);\n    return ScheduleTaskResult.succeed(new ArrayList<>(),failList,\"返回失败用户ID集合\");\n}\n\n//更新待开始车辆，查询 开始时间<=当前时间，状态变更为停驶中\nprivate void updateWait(List<Long> failList,AtomicInteger initPage,int size) {\n    Page<SuspendRecord> waitPageList = suspendRecordRepository.findAllByStatusAndStartTimeLessThanEqual(\n        WAITING.getStatus(),\n        DateUtil.date(),\n        PageRequest.of(initPage.intValue(), size)\n    );\n    updateSuspendRecord(failList, waitPageList.getContent(), STOP_ING);\n    while (waitPageList.hasNext()){\n        waitPageList = suspendRecordRepository.findAllByStatusAndStartTimeLessThanEqual(\n            WAITING.getStatus(),\n            DateUtil.date(),\n            PageRequest.of(initPage.incrementAndGet(), size)\n        );\n        updateSuspendRecord(failList, waitPageList.getContent(), STOP_ING);\n    }\n}\n\n//更新停驶中车辆，查询 结束时间<当前时间，状态变更为停驶结束\nprivate void updateStop(List<Long> failList,AtomicInteger initPage,int size) {\n    Page<SuspendRecord> stopPageList = suspendRecordRepository.findAllByStatusAndEndTimeBefore(\n        STOP_ING.getStatus(),\n        DateUtil.date(),\n        PageRequest.of(initPage.intValue(), size)\n    );\n    updateSuspendRecord(failList,stopPageList.getContent(),STOP_END);\n    while (stopPageList.hasNext()){\n        stopPageList = suspendRecordRepository.findAllByStatusAndEndTimeBefore(\n            STOP_ING.getStatus(),\n            DateUtil.date(),\n            PageRequest.of(initPage.incrementAndGet(), size)\n        );\n        updateSuspendRecord(failList, stopPageList.getContent(), STOP_END);\n    }\n}\n\n/**\n * 对停驶记录进行更新\n * @param failList  更新失败的用户id\n * @param content  需要更新的列表\n * @param statusEnum 更新的状态\n */\nprivate void updateSuspendRecord(List<Long> failList, List<SuspendRecord> content, SuspendStatusEnum statusEnum) {\n    ForkJoinPool pool = new ForkJoinPool(10);\n    pool.submit(() -> {\n        content.parallelStream().forEach(it -> {\n            Long userId = it.getUserId();\n            try {\n                it.setStatus(statusEnum.getStatus());\n                suspendRecordRepository.save(it);\n            } catch (Exception e) {\n                log.error(\"userId:{} change status fail\", userId);\n                failList.add(userId);\n            }\n        });\n    });\n}\n```\n\n\n\n\n\n","slug":"BookMark/车车笔记/并行流","published":1,"date":"2022-07-20T05:56:41.000Z","updated":"2022-07-20T05:56:41.000Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cl7ptszor002maba560hvbzdg","content":"<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gradle\">@Override<br><span class=\"hljs-keyword\">public</span> ScheduleTaskResult updateSuspendStatus() &#123;<br>    AtomicInteger initPage=<span class=\"hljs-keyword\">new</span> AtomicInteger(<span class=\"hljs-number\">1</span>);<br>    <span class=\"hljs-keyword\">int</span> <span class=\"hljs-keyword\">size</span>=<span class=\"hljs-number\">500</span>;<br>    List&lt;<span class=\"hljs-keyword\">Long</span>&gt; failList = <span class=\"hljs-keyword\">new</span> ArrayList&lt;&gt;();<br>    <span class=\"hljs-comment\">//更新待开始车辆</span><br>    updateWait(failList, initPage, <span class=\"hljs-keyword\">size</span>);<br>    <span class=\"hljs-comment\">//更新停驶中车辆</span><br>    updateStop(failList, initPage, <span class=\"hljs-keyword\">size</span>);<br>    <span class=\"hljs-keyword\">return</span> ScheduleTaskResult.succeed(<span class=\"hljs-keyword\">new</span> ArrayList&lt;&gt;(),failList,<span class=\"hljs-string\">&quot;返回失败用户ID集合&quot;</span>);<br>&#125;<br><br><span class=\"hljs-comment\">//更新待开始车辆，查询 开始时间&lt;=当前时间，状态变更为停驶中</span><br><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> updateWait(List&lt;<span class=\"hljs-keyword\">Long</span>&gt; failList,AtomicInteger initPage,<span class=\"hljs-keyword\">int</span> <span class=\"hljs-keyword\">size</span>) &#123;<br>    Page&lt;SuspendRecord&gt; waitPageList = suspendRecordRepository.findAllByStatusAndStartTimeLessThanEqual(<br>        WAITING.getStatus(),<br>        DateUtil.date(),<br>        PageRequest.of(initPage.intValue(), <span class=\"hljs-keyword\">size</span>)<br>    );<br>    updateSuspendRecord(failList, waitPageList.getContent(), STOP_ING);<br>    <span class=\"hljs-keyword\">while</span> (waitPageList.hasNext())&#123;<br>        waitPageList = suspendRecordRepository.findAllByStatusAndStartTimeLessThanEqual(<br>            WAITING.getStatus(),<br>            DateUtil.date(),<br>            PageRequest.of(initPage.incrementAndGet(), <span class=\"hljs-keyword\">size</span>)<br>        );<br>        updateSuspendRecord(failList, waitPageList.getContent(), STOP_ING);<br>    &#125;<br>&#125;<br><br><span class=\"hljs-comment\">//更新停驶中车辆，查询 结束时间&lt;当前时间，状态变更为停驶结束</span><br><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> updateStop(List&lt;<span class=\"hljs-keyword\">Long</span>&gt; failList,AtomicInteger initPage,<span class=\"hljs-keyword\">int</span> <span class=\"hljs-keyword\">size</span>) &#123;<br>    Page&lt;SuspendRecord&gt; stopPageList = suspendRecordRepository.findAllByStatusAndEndTimeBefore(<br>        STOP_ING.getStatus(),<br>        DateUtil.date(),<br>        PageRequest.of(initPage.intValue(), <span class=\"hljs-keyword\">size</span>)<br>    );<br>    updateSuspendRecord(failList,stopPageList.getContent(),STOP_END);<br>    <span class=\"hljs-keyword\">while</span> (stopPageList.hasNext())&#123;<br>        stopPageList = suspendRecordRepository.findAllByStatusAndEndTimeBefore(<br>            STOP_ING.getStatus(),<br>            DateUtil.date(),<br>            PageRequest.of(initPage.incrementAndGet(), <span class=\"hljs-keyword\">size</span>)<br>        );<br>        updateSuspendRecord(failList, stopPageList.getContent(), STOP_END);<br>    &#125;<br>&#125;<br><br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * 对停驶记录进行更新</span><br><span class=\"hljs-comment\"> * @param failList  更新失败的用户id</span><br><span class=\"hljs-comment\"> * @param content  需要更新的列表</span><br><span class=\"hljs-comment\"> * @param statusEnum 更新的状态</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> updateSuspendRecord(List&lt;<span class=\"hljs-keyword\">Long</span>&gt; failList, List&lt;SuspendRecord&gt; content, SuspendStatusEnum statusEnum) &#123;<br>    ForkJoinPool pool = <span class=\"hljs-keyword\">new</span> ForkJoinPool(<span class=\"hljs-number\">10</span>);<br>    pool.submit(() -&gt; &#123;<br>        content.parallelStream().forEach(it -&gt; &#123;<br>            <span class=\"hljs-keyword\">Long</span> userId = it.getUserId();<br>            <span class=\"hljs-keyword\">try</span> &#123;<br>                it.setStatus(statusEnum.getStatus());<br>                suspendRecordRepository.save(it);<br>            &#125; <span class=\"hljs-keyword\">catch</span> (Exception e) &#123;<br>                log.error(<span class=\"hljs-string\">&quot;userId:&#123;&#125; change status fail&quot;</span>, userId);<br>                failList.add(userId);<br>            &#125;<br>        &#125;);<br>    &#125;);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n\n\n","site":{"data":{}},"wordcount":2296,"excerpt":"","more":"<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gradle\">@Override<br><span class=\"hljs-keyword\">public</span> ScheduleTaskResult updateSuspendStatus() &#123;<br>    AtomicInteger initPage=<span class=\"hljs-keyword\">new</span> AtomicInteger(<span class=\"hljs-number\">1</span>);<br>    <span class=\"hljs-keyword\">int</span> <span class=\"hljs-keyword\">size</span>=<span class=\"hljs-number\">500</span>;<br>    List&lt;<span class=\"hljs-keyword\">Long</span>&gt; failList = <span class=\"hljs-keyword\">new</span> ArrayList&lt;&gt;();<br>    <span class=\"hljs-comment\">//更新待开始车辆</span><br>    updateWait(failList, initPage, <span class=\"hljs-keyword\">size</span>);<br>    <span class=\"hljs-comment\">//更新停驶中车辆</span><br>    updateStop(failList, initPage, <span class=\"hljs-keyword\">size</span>);<br>    <span class=\"hljs-keyword\">return</span> ScheduleTaskResult.succeed(<span class=\"hljs-keyword\">new</span> ArrayList&lt;&gt;(),failList,<span class=\"hljs-string\">&quot;返回失败用户ID集合&quot;</span>);<br>&#125;<br><br><span class=\"hljs-comment\">//更新待开始车辆，查询 开始时间&lt;=当前时间，状态变更为停驶中</span><br><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> updateWait(List&lt;<span class=\"hljs-keyword\">Long</span>&gt; failList,AtomicInteger initPage,<span class=\"hljs-keyword\">int</span> <span class=\"hljs-keyword\">size</span>) &#123;<br>    Page&lt;SuspendRecord&gt; waitPageList = suspendRecordRepository.findAllByStatusAndStartTimeLessThanEqual(<br>        WAITING.getStatus(),<br>        DateUtil.date(),<br>        PageRequest.of(initPage.intValue(), <span class=\"hljs-keyword\">size</span>)<br>    );<br>    updateSuspendRecord(failList, waitPageList.getContent(), STOP_ING);<br>    <span class=\"hljs-keyword\">while</span> (waitPageList.hasNext())&#123;<br>        waitPageList = suspendRecordRepository.findAllByStatusAndStartTimeLessThanEqual(<br>            WAITING.getStatus(),<br>            DateUtil.date(),<br>            PageRequest.of(initPage.incrementAndGet(), <span class=\"hljs-keyword\">size</span>)<br>        );<br>        updateSuspendRecord(failList, waitPageList.getContent(), STOP_ING);<br>    &#125;<br>&#125;<br><br><span class=\"hljs-comment\">//更新停驶中车辆，查询 结束时间&lt;当前时间，状态变更为停驶结束</span><br><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> updateStop(List&lt;<span class=\"hljs-keyword\">Long</span>&gt; failList,AtomicInteger initPage,<span class=\"hljs-keyword\">int</span> <span class=\"hljs-keyword\">size</span>) &#123;<br>    Page&lt;SuspendRecord&gt; stopPageList = suspendRecordRepository.findAllByStatusAndEndTimeBefore(<br>        STOP_ING.getStatus(),<br>        DateUtil.date(),<br>        PageRequest.of(initPage.intValue(), <span class=\"hljs-keyword\">size</span>)<br>    );<br>    updateSuspendRecord(failList,stopPageList.getContent(),STOP_END);<br>    <span class=\"hljs-keyword\">while</span> (stopPageList.hasNext())&#123;<br>        stopPageList = suspendRecordRepository.findAllByStatusAndEndTimeBefore(<br>            STOP_ING.getStatus(),<br>            DateUtil.date(),<br>            PageRequest.of(initPage.incrementAndGet(), <span class=\"hljs-keyword\">size</span>)<br>        );<br>        updateSuspendRecord(failList, stopPageList.getContent(), STOP_END);<br>    &#125;<br>&#125;<br><br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * 对停驶记录进行更新</span><br><span class=\"hljs-comment\"> * @param failList  更新失败的用户id</span><br><span class=\"hljs-comment\"> * @param content  需要更新的列表</span><br><span class=\"hljs-comment\"> * @param statusEnum 更新的状态</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> updateSuspendRecord(List&lt;<span class=\"hljs-keyword\">Long</span>&gt; failList, List&lt;SuspendRecord&gt; content, SuspendStatusEnum statusEnum) &#123;<br>    ForkJoinPool pool = <span class=\"hljs-keyword\">new</span> ForkJoinPool(<span class=\"hljs-number\">10</span>);<br>    pool.submit(() -&gt; &#123;<br>        content.parallelStream().forEach(it -&gt; &#123;<br>            <span class=\"hljs-keyword\">Long</span> userId = it.getUserId();<br>            <span class=\"hljs-keyword\">try</span> &#123;<br>                it.setStatus(statusEnum.getStatus());<br>                suspendRecordRepository.save(it);<br>            &#125; <span class=\"hljs-keyword\">catch</span> (Exception e) &#123;<br>                log.error(<span class=\"hljs-string\">&quot;userId:&#123;&#125; change status fail&quot;</span>, userId);<br>                failList.add(userId);<br>            &#125;<br>        &#125;);<br>    &#125;);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n\n\n"},{"_content":"# 使.gitignore忽略立即生效\n\n```\ngit rm -r --cached .\n#git add .\n#git commit -m \".gitignore is now working\"\n```\n\n# Gson操作\n\n```\nString s new Gson().toJson(sendMsgReqs)\nList<SendMsgReq> list = new Gson().fromJson(message, new TypeToken<List<SendMsgReq>>() {}.getType());\n```\n\n# BigDecimal\n\n    //加法\n    BigDecimal result1 = num1.add(num2);\n    BigDecimal result12 = num12.add(num22);\n    \n    //减法\n    BigDecimal result2 = num1.subtract(num2);\n    BigDecimal result22 = num12.subtract(num22);\n    \n    //乘法\n    BigDecimal result3 = num1.multiply(num2);\n    BigDecimal result32 = num12.multiply(num22);\n    \n    //绝对值\n    BigDecimal result4 = num3.abs();\n    BigDecimal result42 = num32.abs();\n    \n    //除法\n    BigDecimal result5 = num2.divide(num1,2,BigDecimal.ROUND_HALF_UP);\n    BigDecimal result52 = num22.divide(num12,2,BigDecimal.ROUND_HALF_UP);\n\n## web mvc转换\n\n+ 第一种方式\n\n```\n@Configuration\n@AutoConfigureBefore(WebMvcAutoConfiguration.class)\npublic static class WebMvcConfigurerAdapterAutoConfig extends WebMvcConfigurationSupport {\n\t/**\n    * 实现json参数解析/返回时，传入的下划线转驼峰；输出的驼峰转下划线\n    * @param converters 转换器\n    */\n    @Override\n    public void extendMessageConverters(List<HttpMessageConverter<?>> converters) {\n       MappingJackson2HttpMessageConverter converter = new MappingJackson2HttpMessageConverter();\n       ObjectMapper objectMapper = converter.getObjectMapper();\n\n        // 设置驼峰标志转下划线\n        objectMapper.setPropertyNamingStrategy( PropertyNamingStrategies.SNAKE_CASE);\n\n        // 设置格式化内容\n        converter.setObjectMapper(objectMapper);\n        converters.add(0, converter);\n        super.extendMessageConverters(converters);\n   }\n}\n```\n\n+ 第二种方式\n\n```\n@Bean\n@Primary\npublic ObjectMapper objectMapper() {\n    return Jackson2ObjectMapperBuilder\n        .json()\n        .propertyNamingStrategy(PropertyNamingStrategies.SNAKE_CASE)\n        .dateFormat(new SimpleDateFormat(\"\"))\n        .build();\n}\n```\n\n## set注入\n\n```\n    @Boy(\"hui\")\n    private HelloBoy helloBoy;\n    @Autowired\n    public void setInjectedBean() {\n        this.helloBoy = new HelloBoy(\"hbq\");\n    }\n```\n\n### 自定义注解\n\n```\npackage com.hbq.codedemopersion.config.anno;\n\n@Component //注意：Bean后置处理器本身也是一个Bean\npublic class BoyAnnotationBeanPostProcessor implements BeanPostProcessor {\n    @SneakyThrows\n    @Override\n    public Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException {\n       /**\n         * 利用Java反射机制注入属性\n         */\n        Field[] declaredFields = bean.getClass().getDeclaredFields();\n        for (Field declaredField : declaredFields) {\n            Boy annotation = declaredField.getAnnotation(Boy.class);\n            if (null == annotation) {\n                continue;\n            }\n            HelloBoy helloBoy = new HelloBoy(annotation.value());\n            declaredField.setAccessible(true);\n            try {\n                declaredField.set(bean, helloBoy);\n            } catch (IllegalAccessException e) {\n                e.printStackTrace();\n            }\n        }\n        return bean;\n    }\n\n    @Override\n    public Object postProcessAfterInitialization(Object o, String s) throws BeansException {\n        return o; //这里要返回o，不然启动时会报错\n    }\n}\n```\n\n### 环境中获取值\n\n```\nimport org.springframework.core.env.Environment;\n\n@Resource\nEnvironment environment;\n#获取值\nenvironment.resolvePlaceholders(\"${spring.redis.database}\");\n```\n\n","source":"_posts/BookMark/车车笔记/笔记.md","raw":"# 使.gitignore忽略立即生效\n\n```\ngit rm -r --cached .\n#git add .\n#git commit -m \".gitignore is now working\"\n```\n\n# Gson操作\n\n```\nString s new Gson().toJson(sendMsgReqs)\nList<SendMsgReq> list = new Gson().fromJson(message, new TypeToken<List<SendMsgReq>>() {}.getType());\n```\n\n# BigDecimal\n\n    //加法\n    BigDecimal result1 = num1.add(num2);\n    BigDecimal result12 = num12.add(num22);\n    \n    //减法\n    BigDecimal result2 = num1.subtract(num2);\n    BigDecimal result22 = num12.subtract(num22);\n    \n    //乘法\n    BigDecimal result3 = num1.multiply(num2);\n    BigDecimal result32 = num12.multiply(num22);\n    \n    //绝对值\n    BigDecimal result4 = num3.abs();\n    BigDecimal result42 = num32.abs();\n    \n    //除法\n    BigDecimal result5 = num2.divide(num1,2,BigDecimal.ROUND_HALF_UP);\n    BigDecimal result52 = num22.divide(num12,2,BigDecimal.ROUND_HALF_UP);\n\n## web mvc转换\n\n+ 第一种方式\n\n```\n@Configuration\n@AutoConfigureBefore(WebMvcAutoConfiguration.class)\npublic static class WebMvcConfigurerAdapterAutoConfig extends WebMvcConfigurationSupport {\n\t/**\n    * 实现json参数解析/返回时，传入的下划线转驼峰；输出的驼峰转下划线\n    * @param converters 转换器\n    */\n    @Override\n    public void extendMessageConverters(List<HttpMessageConverter<?>> converters) {\n       MappingJackson2HttpMessageConverter converter = new MappingJackson2HttpMessageConverter();\n       ObjectMapper objectMapper = converter.getObjectMapper();\n\n        // 设置驼峰标志转下划线\n        objectMapper.setPropertyNamingStrategy( PropertyNamingStrategies.SNAKE_CASE);\n\n        // 设置格式化内容\n        converter.setObjectMapper(objectMapper);\n        converters.add(0, converter);\n        super.extendMessageConverters(converters);\n   }\n}\n```\n\n+ 第二种方式\n\n```\n@Bean\n@Primary\npublic ObjectMapper objectMapper() {\n    return Jackson2ObjectMapperBuilder\n        .json()\n        .propertyNamingStrategy(PropertyNamingStrategies.SNAKE_CASE)\n        .dateFormat(new SimpleDateFormat(\"\"))\n        .build();\n}\n```\n\n## set注入\n\n```\n    @Boy(\"hui\")\n    private HelloBoy helloBoy;\n    @Autowired\n    public void setInjectedBean() {\n        this.helloBoy = new HelloBoy(\"hbq\");\n    }\n```\n\n### 自定义注解\n\n```\npackage com.hbq.codedemopersion.config.anno;\n\n@Component //注意：Bean后置处理器本身也是一个Bean\npublic class BoyAnnotationBeanPostProcessor implements BeanPostProcessor {\n    @SneakyThrows\n    @Override\n    public Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException {\n       /**\n         * 利用Java反射机制注入属性\n         */\n        Field[] declaredFields = bean.getClass().getDeclaredFields();\n        for (Field declaredField : declaredFields) {\n            Boy annotation = declaredField.getAnnotation(Boy.class);\n            if (null == annotation) {\n                continue;\n            }\n            HelloBoy helloBoy = new HelloBoy(annotation.value());\n            declaredField.setAccessible(true);\n            try {\n                declaredField.set(bean, helloBoy);\n            } catch (IllegalAccessException e) {\n                e.printStackTrace();\n            }\n        }\n        return bean;\n    }\n\n    @Override\n    public Object postProcessAfterInitialization(Object o, String s) throws BeansException {\n        return o; //这里要返回o，不然启动时会报错\n    }\n}\n```\n\n### 环境中获取值\n\n```\nimport org.springframework.core.env.Environment;\n\n@Resource\nEnvironment environment;\n#获取值\nenvironment.resolvePlaceholders(\"${spring.redis.database}\");\n```\n\n","slug":"BookMark/车车笔记/笔记","published":1,"date":"2022-07-25T05:51:37.000Z","updated":"2022-08-15T08:49:44.593Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cl7ptszor002naba574iug0c4","content":"<h1><span id=\"使gitignore忽略立即生效\">使.gitignore忽略立即生效</span></h1><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\">git rm <span class=\"hljs-operator\">-</span>r <span class=\"hljs-comment\">--cached .</span><br>#git <span class=\"hljs-keyword\">add</span> .<br>#git <span class=\"hljs-keyword\">commit</span> <span class=\"hljs-operator\">-</span>m &quot;.gitignore is now working&quot;<br></code></pre></td></tr></table></figure>\n\n<h1><span id=\"gson操作\">Gson操作</span></h1><figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\">String s <span class=\"hljs-keyword\">new</span> <span class=\"hljs-constructor\">Gson()</span>.<span class=\"hljs-keyword\">to</span><span class=\"hljs-constructor\">Json(<span class=\"hljs-params\">sendMsgReqs</span>)</span><br>List&lt;SendMsgReq&gt; <span class=\"hljs-built_in\">list</span> = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-constructor\">Gson()</span>.from<span class=\"hljs-constructor\">Json(<span class=\"hljs-params\">message</span>, <span class=\"hljs-params\">new</span> TypeToken&lt;List&lt;SendMsgReq&gt;&gt;()</span> &#123;&#125;.get<span class=\"hljs-constructor\">Type()</span>);<br></code></pre></td></tr></table></figure>\n\n<h1><span id=\"bigdecimal\">BigDecimal</span></h1><pre><code class=\"hljs\">//加法\nBigDecimal result1 = num1.add(num2);\nBigDecimal result12 = num12.add(num22);\n\n//减法\nBigDecimal result2 = num1.subtract(num2);\nBigDecimal result22 = num12.subtract(num22);\n\n//乘法\nBigDecimal result3 = num1.multiply(num2);\nBigDecimal result32 = num12.multiply(num22);\n\n//绝对值\nBigDecimal result4 = num3.abs();\nBigDecimal result42 = num32.abs();\n\n//除法\nBigDecimal result5 = num2.divide(num1,2,BigDecimal.ROUND_HALF_UP);\nBigDecimal result52 = num22.divide(num12,2,BigDecimal.ROUND_HALF_UP);\n</code></pre>\n<h2><span id=\"web-mvc转换\">web mvc转换</span></h2><ul>\n<li>第一种方式</li>\n</ul>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs scala\"><span class=\"hljs-meta\">@Configuration</span><br><span class=\"hljs-meta\">@AutoConfigureBefore</span>(<span class=\"hljs-type\">WebMvcAutoConfiguration</span>.<span class=\"hljs-keyword\">class</span>)<br>public static <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">WebMvcConfigurerAdapterAutoConfig</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">WebMvcConfigurationSupport</span> </span>&#123;<br>\t<span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">    * 实现json参数解析/返回时，传入的下划线转驼峰；输出的驼峰转下划线</span><br><span class=\"hljs-comment\">    * @param converters 转换器</span><br><span class=\"hljs-comment\">    */</span><br>    <span class=\"hljs-meta\">@Override</span><br>    public void extendMessageConverters(<span class=\"hljs-type\">List</span>&lt;<span class=\"hljs-type\">HttpMessageConverter</span>&lt;?&gt;&gt; converters) &#123;<br>       <span class=\"hljs-type\">MappingJackson2HttpMessageConverter</span> converter = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-type\">MappingJackson2HttpMessageConverter</span>();<br>       <span class=\"hljs-type\">ObjectMapper</span> objectMapper = converter.getObjectMapper();<br><br>        <span class=\"hljs-comment\">// 设置驼峰标志转下划线</span><br>        objectMapper.setPropertyNamingStrategy( <span class=\"hljs-type\">PropertyNamingStrategies</span>.<span class=\"hljs-type\">SNAKE_CASE</span>);<br><br>        <span class=\"hljs-comment\">// 设置格式化内容</span><br>        converter.setObjectMapper(objectMapper);<br>        converters.add(<span class=\"hljs-number\">0</span>, converter);<br>        <span class=\"hljs-keyword\">super</span>.extendMessageConverters(converters);<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>第二种方式</li>\n</ul>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs less\"><span class=\"hljs-variable\">@Bean</span><br><span class=\"hljs-variable\">@Primary</span><br>public ObjectMapper <span class=\"hljs-built_in\">objectMapper</span>() &#123;<br>    <span class=\"hljs-selector-tag\">return</span> <span class=\"hljs-selector-tag\">Jackson2ObjectMapperBuilder</span><br>        <span class=\"hljs-selector-class\">.json</span>()<br>        <span class=\"hljs-selector-class\">.propertyNamingStrategy</span>(PropertyNamingStrategies.SNAKE_CASE)<br>        <span class=\"hljs-selector-class\">.dateFormat</span>(new <span class=\"hljs-built_in\">SimpleDateFormat</span>(<span class=\"hljs-string\">&quot;&quot;</span>))<br>        <span class=\"hljs-selector-class\">.build</span>();<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2><span id=\"set注入\">set注入</span></h2><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs typescript\"><span class=\"hljs-meta\">@Boy</span>(<span class=\"hljs-string\">&quot;hui&quot;</span>)<br><span class=\"hljs-keyword\">private</span> <span class=\"hljs-title class_\">HelloBoy</span> helloBoy;<br><span class=\"hljs-meta\">@Autowired</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-built_in\">void</span> <span class=\"hljs-title function_\">setInjectedBean</span>(<span class=\"hljs-params\"></span>) &#123;<br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">helloBoy</span> = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">HelloBoy</span>(<span class=\"hljs-string\">&quot;hbq&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3><span id=\"自定义注解\">自定义注解</span></h3><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs kotlin\"><span class=\"hljs-keyword\">package</span> com.hbq.codedemopersion.config.anno;<br><br><span class=\"hljs-meta\">@Component</span> <span class=\"hljs-comment\">//注意：Bean后置处理器本身也是一个Bean</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">BoyAnnotationBeanPostProcessor</span> <span class=\"hljs-title\">implements</span> <span class=\"hljs-title\">BeanPostProcessor</span> &#123;<br>    <span class=\"hljs-meta\">@SneakyThrows</span><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException &#123;<br>       <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">         * 利用Java反射机制注入属性</span><br><span class=\"hljs-comment\">         */</span><br>        Field[] declaredFields = bean.getClass().getDeclaredFields();<br>        <span class=\"hljs-keyword\">for</span> (Field declaredField : declaredFields) &#123;<br>            Boy <span class=\"hljs-keyword\">annotation</span> = declaredField.getAnnotation(Boy.<span class=\"hljs-keyword\">class</span>);<br>            <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-literal\">null</span> == <span class=\"hljs-keyword\">annotation</span>) &#123;<br>                <span class=\"hljs-keyword\">continue</span>;<br>            &#125;<br>            HelloBoy helloBoy = new HelloBoy(<span class=\"hljs-keyword\">annotation</span>.value());<br>            declaredField.setAccessible(<span class=\"hljs-literal\">true</span>);<br>            <span class=\"hljs-keyword\">try</span> &#123;<br>                declaredField.<span class=\"hljs-keyword\">set</span>(bean, helloBoy);<br>            &#125; <span class=\"hljs-keyword\">catch</span> (IllegalAccessException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> bean;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> Object postProcessAfterInitialization(Object o, String s) throws BeansException &#123;<br>        <span class=\"hljs-keyword\">return</span> o; <span class=\"hljs-comment\">//这里要返回o，不然启动时会报错</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3><span id=\"环境中获取值\">环境中获取值</span></h3><figure class=\"highlight coffeescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs coffeescript\"><span class=\"hljs-keyword\">import</span> org.springframework.core.env.Environment;<br><br>@Resource<br>Environment environment;<br><span class=\"hljs-comment\">#获取值</span><br>environment.resolvePlaceholders(<span class=\"hljs-string\">&quot;$&#123;spring.redis.database&#125;&quot;</span>);<br></code></pre></td></tr></table></figure>\n\n","site":{"data":{}},"wordcount":2863,"excerpt":"","more":"<h1 id=\"使-gitignore忽略立即生效\"><a href=\"#使-gitignore忽略立即生效\" class=\"headerlink\" title=\"使.gitignore忽略立即生效\"></a>使.gitignore忽略立即生效</h1><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\">git rm <span class=\"hljs-operator\">-</span>r <span class=\"hljs-comment\">--cached .</span><br>#git <span class=\"hljs-keyword\">add</span> .<br>#git <span class=\"hljs-keyword\">commit</span> <span class=\"hljs-operator\">-</span>m &quot;.gitignore is now working&quot;<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"Gson操作\"><a href=\"#Gson操作\" class=\"headerlink\" title=\"Gson操作\"></a>Gson操作</h1><figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\">String s <span class=\"hljs-keyword\">new</span> <span class=\"hljs-constructor\">Gson()</span>.<span class=\"hljs-keyword\">to</span><span class=\"hljs-constructor\">Json(<span class=\"hljs-params\">sendMsgReqs</span>)</span><br>List&lt;SendMsgReq&gt; <span class=\"hljs-built_in\">list</span> = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-constructor\">Gson()</span>.from<span class=\"hljs-constructor\">Json(<span class=\"hljs-params\">message</span>, <span class=\"hljs-params\">new</span> TypeToken&lt;List&lt;SendMsgReq&gt;&gt;()</span> &#123;&#125;.get<span class=\"hljs-constructor\">Type()</span>);<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"BigDecimal\"><a href=\"#BigDecimal\" class=\"headerlink\" title=\"BigDecimal\"></a>BigDecimal</h1><pre><code>//加法\nBigDecimal result1 = num1.add(num2);\nBigDecimal result12 = num12.add(num22);\n\n//减法\nBigDecimal result2 = num1.subtract(num2);\nBigDecimal result22 = num12.subtract(num22);\n\n//乘法\nBigDecimal result3 = num1.multiply(num2);\nBigDecimal result32 = num12.multiply(num22);\n\n//绝对值\nBigDecimal result4 = num3.abs();\nBigDecimal result42 = num32.abs();\n\n//除法\nBigDecimal result5 = num2.divide(num1,2,BigDecimal.ROUND_HALF_UP);\nBigDecimal result52 = num22.divide(num12,2,BigDecimal.ROUND_HALF_UP);\n</code></pre>\n<h2 id=\"web-mvc转换\"><a href=\"#web-mvc转换\" class=\"headerlink\" title=\"web mvc转换\"></a>web mvc转换</h2><ul>\n<li>第一种方式</li>\n</ul>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs scala\"><span class=\"hljs-meta\">@Configuration</span><br><span class=\"hljs-meta\">@AutoConfigureBefore</span>(<span class=\"hljs-type\">WebMvcAutoConfiguration</span>.<span class=\"hljs-keyword\">class</span>)<br>public static <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">WebMvcConfigurerAdapterAutoConfig</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">WebMvcConfigurationSupport</span> </span>&#123;<br>\t<span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">    * 实现json参数解析/返回时，传入的下划线转驼峰；输出的驼峰转下划线</span><br><span class=\"hljs-comment\">    * @param converters 转换器</span><br><span class=\"hljs-comment\">    */</span><br>    <span class=\"hljs-meta\">@Override</span><br>    public void extendMessageConverters(<span class=\"hljs-type\">List</span>&lt;<span class=\"hljs-type\">HttpMessageConverter</span>&lt;?&gt;&gt; converters) &#123;<br>       <span class=\"hljs-type\">MappingJackson2HttpMessageConverter</span> converter = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-type\">MappingJackson2HttpMessageConverter</span>();<br>       <span class=\"hljs-type\">ObjectMapper</span> objectMapper = converter.getObjectMapper();<br><br>        <span class=\"hljs-comment\">// 设置驼峰标志转下划线</span><br>        objectMapper.setPropertyNamingStrategy( <span class=\"hljs-type\">PropertyNamingStrategies</span>.<span class=\"hljs-type\">SNAKE_CASE</span>);<br><br>        <span class=\"hljs-comment\">// 设置格式化内容</span><br>        converter.setObjectMapper(objectMapper);<br>        converters.add(<span class=\"hljs-number\">0</span>, converter);<br>        <span class=\"hljs-keyword\">super</span>.extendMessageConverters(converters);<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>第二种方式</li>\n</ul>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs less\"><span class=\"hljs-variable\">@Bean</span><br><span class=\"hljs-variable\">@Primary</span><br>public ObjectMapper <span class=\"hljs-built_in\">objectMapper</span>() &#123;<br>    <span class=\"hljs-selector-tag\">return</span> <span class=\"hljs-selector-tag\">Jackson2ObjectMapperBuilder</span><br>        <span class=\"hljs-selector-class\">.json</span>()<br>        <span class=\"hljs-selector-class\">.propertyNamingStrategy</span>(PropertyNamingStrategies.SNAKE_CASE)<br>        <span class=\"hljs-selector-class\">.dateFormat</span>(new <span class=\"hljs-built_in\">SimpleDateFormat</span>(<span class=\"hljs-string\">&quot;&quot;</span>))<br>        <span class=\"hljs-selector-class\">.build</span>();<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"set注入\"><a href=\"#set注入\" class=\"headerlink\" title=\"set注入\"></a>set注入</h2><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs typescript\"><span class=\"hljs-meta\">@Boy</span>(<span class=\"hljs-string\">&quot;hui&quot;</span>)<br><span class=\"hljs-keyword\">private</span> <span class=\"hljs-title class_\">HelloBoy</span> helloBoy;<br><span class=\"hljs-meta\">@Autowired</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-built_in\">void</span> <span class=\"hljs-title function_\">setInjectedBean</span>(<span class=\"hljs-params\"></span>) &#123;<br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">helloBoy</span> = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">HelloBoy</span>(<span class=\"hljs-string\">&quot;hbq&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"自定义注解\"><a href=\"#自定义注解\" class=\"headerlink\" title=\"自定义注解\"></a>自定义注解</h3><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs kotlin\"><span class=\"hljs-keyword\">package</span> com.hbq.codedemopersion.config.anno;<br><br><span class=\"hljs-meta\">@Component</span> <span class=\"hljs-comment\">//注意：Bean后置处理器本身也是一个Bean</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">BoyAnnotationBeanPostProcessor</span> <span class=\"hljs-title\">implements</span> <span class=\"hljs-title\">BeanPostProcessor</span> &#123;<br>    <span class=\"hljs-meta\">@SneakyThrows</span><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException &#123;<br>       <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">         * 利用Java反射机制注入属性</span><br><span class=\"hljs-comment\">         */</span><br>        Field[] declaredFields = bean.getClass().getDeclaredFields();<br>        <span class=\"hljs-keyword\">for</span> (Field declaredField : declaredFields) &#123;<br>            Boy <span class=\"hljs-keyword\">annotation</span> = declaredField.getAnnotation(Boy.<span class=\"hljs-keyword\">class</span>);<br>            <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-literal\">null</span> == <span class=\"hljs-keyword\">annotation</span>) &#123;<br>                <span class=\"hljs-keyword\">continue</span>;<br>            &#125;<br>            HelloBoy helloBoy = new HelloBoy(<span class=\"hljs-keyword\">annotation</span>.value());<br>            declaredField.setAccessible(<span class=\"hljs-literal\">true</span>);<br>            <span class=\"hljs-keyword\">try</span> &#123;<br>                declaredField.<span class=\"hljs-keyword\">set</span>(bean, helloBoy);<br>            &#125; <span class=\"hljs-keyword\">catch</span> (IllegalAccessException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> bean;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> Object postProcessAfterInitialization(Object o, String s) throws BeansException &#123;<br>        <span class=\"hljs-keyword\">return</span> o; <span class=\"hljs-comment\">//这里要返回o，不然启动时会报错</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"环境中获取值\"><a href=\"#环境中获取值\" class=\"headerlink\" title=\"环境中获取值\"></a>环境中获取值</h3><figure class=\"highlight coffeescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs coffeescript\"><span class=\"hljs-keyword\">import</span> org.springframework.core.env.Environment;<br><br>@Resource<br>Environment environment;<br><span class=\"hljs-comment\">#获取值</span><br>environment.resolvePlaceholders(<span class=\"hljs-string\">&quot;$&#123;spring.redis.database&#125;&quot;</span>);<br></code></pre></td></tr></table></figure>\n\n"},{"_content":"# 一、优化方法的串行处理\n\n+ 问题：方法的串行处理，对流的遍历，if，for的嵌套处理。会让代码可读性降低，嵌套成为\"子弹头\"式代码\n\n+ 原有思路：当程序符合某条件时，向下执行，流式编程，直到单条请求结束\n+ 优化思路：当程序不符合某条件，跳出程序；将处理后的结果整合为新流，再用新流处理相关业务逻辑\n\n例：查找符合条件的用户，并为其发送消息\n\n1. 主方法提拆分，单个流遍历拆为：查找符合条件用户-》批量发送消息\n\n![image-20211112142057941](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20211112142057941.png)\n\n2. 原单消息处理方发法，查找用户并对每个用户发送消息，切逻辑为符合条件继续执行![image-20211112142534224](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20211112142534224.png)","source":"_posts/BookMark/车车笔记/编码风格.md","raw":"# 一、优化方法的串行处理\n\n+ 问题：方法的串行处理，对流的遍历，if，for的嵌套处理。会让代码可读性降低，嵌套成为\"子弹头\"式代码\n\n+ 原有思路：当程序符合某条件时，向下执行，流式编程，直到单条请求结束\n+ 优化思路：当程序不符合某条件，跳出程序；将处理后的结果整合为新流，再用新流处理相关业务逻辑\n\n例：查找符合条件的用户，并为其发送消息\n\n1. 主方法提拆分，单个流遍历拆为：查找符合条件用户-》批量发送消息\n\n![image-20211112142057941](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20211112142057941.png)\n\n2. 原单消息处理方发法，查找用户并对每个用户发送消息，切逻辑为符合条件继续执行![image-20211112142534224](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20211112142534224.png)","slug":"BookMark/车车笔记/编码风格","published":1,"date":"2022-07-18T09:51:29.000Z","updated":"2022-09-01T10:21:56.574Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cl7ptszor002oaba5gxwke7dm","content":"<h1><span id=\"一-优化方法的串行处理\">一、优化方法的串行处理</span></h1><ul>\n<li><p>问题：方法的串行处理，对流的遍历，if，for的嵌套处理。会让代码可读性降低，嵌套成为”子弹头”式代码</p>\n</li>\n<li><p>原有思路：当程序符合某条件时，向下执行，流式编程，直到单条请求结束</p>\n</li>\n<li><p>优化思路：当程序不符合某条件，跳出程序；将处理后的结果整合为新流，再用新流处理相关业务逻辑</p>\n</li>\n</ul>\n<p>例：查找符合条件的用户，并为其发送消息</p>\n<ol>\n<li>主方法提拆分，单个流遍历拆为：查找符合条件用户-》批量发送消息</li>\n</ol>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20211112142057941.png\" alt=\"image-20211112142057941\"></p>\n<ol start=\"2\">\n<li>原单消息处理方发法，查找用户并对每个用户发送消息，切逻辑为符合条件继续执行<img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20211112142534224.png\" alt=\"image-20211112142534224\"></li>\n</ol>\n","site":{"data":{}},"wordcount":227,"excerpt":"","more":"<h1 id=\"一、优化方法的串行处理\"><a href=\"#一、优化方法的串行处理\" class=\"headerlink\" title=\"一、优化方法的串行处理\"></a>一、优化方法的串行处理</h1><ul>\n<li><p>问题：方法的串行处理，对流的遍历，if，for的嵌套处理。会让代码可读性降低，嵌套成为”子弹头”式代码</p>\n</li>\n<li><p>原有思路：当程序符合某条件时，向下执行，流式编程，直到单条请求结束</p>\n</li>\n<li><p>优化思路：当程序不符合某条件，跳出程序；将处理后的结果整合为新流，再用新流处理相关业务逻辑</p>\n</li>\n</ul>\n<p>例：查找符合条件的用户，并为其发送消息</p>\n<ol>\n<li>主方法提拆分，单个流遍历拆为：查找符合条件用户-》批量发送消息</li>\n</ol>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20211112142057941.png\" alt=\"image-20211112142057941\"></p>\n<ol start=\"2\">\n<li>原单消息处理方发法，查找用户并对每个用户发送消息，切逻辑为符合条件继续执行<img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20211112142534224.png\" alt=\"image-20211112142534224\"></li>\n</ol>\n"},{"_content":"# 订阅消息提醒\n\n每日18:56定时：\n\n遍历停驶权益`user_member_benefit`关联`user_member_suspend`表\n\n1. （[^状态] = 未到续保期 & 当前日期 = [^可续保开始日期] ）改变用户状态，发送消息\n\n2. （[^状态] = 待激活 & 当前日期 = [^起保日期]）发送信息\n\n[^状态]: user_member_benefit.benefit_status\n[^可续保开始日期]: user_member_suspend.待新增字段\n[^起保日期]: user_member_benefit.effective_time\n","source":"_posts/BookMark/车车笔记/统计信息.md","raw":"# 订阅消息提醒\n\n每日18:56定时：\n\n遍历停驶权益`user_member_benefit`关联`user_member_suspend`表\n\n1. （[^状态] = 未到续保期 & 当前日期 = [^可续保开始日期] ）改变用户状态，发送消息\n\n2. （[^状态] = 待激活 & 当前日期 = [^起保日期]）发送信息\n\n[^状态]: user_member_benefit.benefit_status\n[^可续保开始日期]: user_member_suspend.待新增字段\n[^起保日期]: user_member_benefit.effective_time\n","slug":"BookMark/车车笔记/统计信息","published":1,"date":"2022-07-25T05:51:37.000Z","updated":"2022-09-06T05:34:30.062Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cl7ptszor002paba538fag15q","content":"<h1><span id=\"订阅消息提醒\">订阅消息提醒</span></h1><p>每日18:56定时：</p>\n<p>遍历停驶权益<code>user_member_benefit</code>关联<code>user_member_suspend</code>表</p>\n<ol>\n<li><p>（<a href=\"user_member_benefit.benefit_status\">^状态</a> &#x3D; 未到续保期 &amp; 当前日期 &#x3D; <a href=\"user_member_suspend.%E5%BE%85%E6%96%B0%E5%A2%9E%E5%AD%97%E6%AE%B5\">^可续保开始日期</a> ）改变用户状态，发送消息</p>\n</li>\n<li><p>（<a href=\"user_member_benefit.benefit_status\">^状态</a> &#x3D; 待激活 &amp; 当前日期 &#x3D; <a href=\"user_member_benefit.effective_time\">^起保日期</a>）发送信息</p>\n</li>\n</ol>\n","site":{"data":{}},"wordcount":151,"excerpt":"","more":"<h1 id=\"订阅消息提醒\"><a href=\"#订阅消息提醒\" class=\"headerlink\" title=\"订阅消息提醒\"></a>订阅消息提醒</h1><p>每日18:56定时：</p>\n<p>遍历停驶权益<code>user_member_benefit</code>关联<code>user_member_suspend</code>表</p>\n<ol>\n<li><p>（<a href=\"user_member_benefit.benefit_status\">^状态</a> &#x3D; 未到续保期 &amp; 当前日期 &#x3D; <a href=\"user_member_suspend.%E5%BE%85%E6%96%B0%E5%A2%9E%E5%AD%97%E6%AE%B5\">^可续保开始日期</a> ）改变用户状态，发送消息</p>\n</li>\n<li><p>（<a href=\"user_member_benefit.benefit_status\">^状态</a> &#x3D; 待激活 &amp; 当前日期 &#x3D; <a href=\"user_member_benefit.effective_time\">^起保日期</a>）发送信息</p>\n</li>\n</ol>\n"},{"_content":"# 微信订阅消息定制化\n\n![image-20220330132046796](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220330132046796.png)\n\n\n\n消息优化上线todo: \n\n+ 零点前上线：确保奖励到账通知\n+ 活动通知-连续三日未申请 发送时间变更 ：`0 3 12 * * ? *` ->`0 16 19 * * ? *`\n+ 初始化消息tokenid：`initWechatMessageToken`\n\n```\ncurl --location --request GET '127.0.0.1:8088/v2.0/initWechatMessageToken' \\\n--header 'backend-token: 41614634-0c04-4e84-8a0e-db01def48247' \\\n--header 'Content-Type: application/json' \\\n--data-raw '[\n    {\n        \"page\": \"pages/index/index\",\n        \"targetPage\": \"suspension\",\n        \"messageType\": \"A1\"\n    },\n    {\n        \"page\": \"pages/index/index\",\n        \"targetPage\": \"suspension\",\n        \"messageType\": \"B1\"\n    },\n    {\n        \"page\": \"pages/index/index\",\n        \"targetPage\": \"webview\",\n        \"messageType\": \"B2\",\n        \"url\":\"https://www.cheche365.com/m/index.html?src=tinggeili\"\n    },\n    {\n        \"page\": \"pages/index/index\",\n        \"targetPage\": \"webview\",\n        \"messageType\": \"B3\",\n        \"url\":\"https://channelh5.pubmi.cn/h5/newepidemicDetail?channel=ZT22033002&agentId=\"\n    },\n    {\n        \"page\": \"pages/index/index\",\n        \"targetPage\": \"identify-code\",\n        \"messageType\": \"B4\"\n    },\n    {\n        \"page\": \"pages/index/index\",\n        \"targetPage\": \"invitor\",\n        \"messageType\": \"B5\"\n    },\n    {\n        \"page\": \"pages/index/index\",\n        \"targetPage\": \"suspension\",\n        \"messageType\": \"B6\"\n    },    \n    {\n        \"page\": \"pages/index/index\",\n        \"targetPage\": \"suspension\",\n        \"messageType\": \"C1\"\n    },\n    {\n        \"page\": \"pages/index/index\",\n        \"targetPage\": \"invitor\",\n        \"messageType\": \"C2\"\n    },    \n    {\n        \"page\": \"pages/index/index\",\n        \"targetPage\": \"webview\",\n        \"messageType\": \"C3\",\n        \"url\":\"https://channelh5.pubmi.cn/h5/newepidemicDetail?channel=ZT22033002&agentId=\"\n    },\n    {\n        \"page\": \"pages/index/index\",\n        \"targetPage\": \"identify-code\",\n        \"messageType\": \"C4\"\n    },\n    {\n        \"page\": \"pages/index/index\",\n        \"targetPage\": \"suspension\",\n        \"messageType\": \"D1\"\n    }\n]'\n```\n\n## 一、奖励待领取通知（次日提醒）\n\n1. 触发时间：T+1 12:36\n2. 触发条件：\n\n   + 本月停驶天数 < 10\n   \n   + 订阅用户本月最后一次停驶状态为停驶中\n3. 模板id：`P88o-yRmu6CMWpBujUoukrVqYpFgHnDsmb6vn2BJnos`\n4. 参数配置：(发送人，达标总天数，最高返现金额，本月停驶天数)\n\n## 二、奖励到账通知\n\n### 定时任务一（奖励变更并存储消息体，需加入用户id）\n\n1. 触发时间：T+2 00:00\n2. 触发条件：\n   + 本月停驶天数 <= 10\n   + 昨日奖励金额到账\n3. 模板id：`xpNegMVvwaRCSHGFOB7QUv9c1ak_B2NXBGlouOZClo0`\n4. 存储结构：（用户id，变更金额）\n\n### 定时任务二（通过用户获取当日停驶记录发送信息）\n\n1. 触发时间：T+2 09:03\n\n2. 触发条件：redis中存在记录\n\n3. 参数配置：（发送人，变更金额，达标总天数，本月停驶天数，每日返现金额，跳转页面及参数）\n\n\n## 三、活动通知（三日提醒）\n\n### 定时任务一(扫描三日提醒用户，存储到redis)：\n\n1. 触发时间：T+3 00:00\n2. 触发条件：\n   + 本月停驶天数<10\n   + 当月最后一天不推送该消息类型\n3. 存储结构（用户id）\n\n### 定时任务二(发送信息)：\n\n1. 触发时间：T+3 17:36\n2. 触发条件：redis中存在记录\n3. 模板id：`QEZ8Tj79Jrh9B_LiltMGsr8pDs4mtyM0aUoShefElRQ`\n4. 参数配置：（发送人，达标总天数，本月停驶天数，每月最高返现金额，每日返现金额）\n\n","source":"_posts/BookMark/车车笔记/订阅消息.md","raw":"# 微信订阅消息定制化\n\n![image-20220330132046796](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220330132046796.png)\n\n\n\n消息优化上线todo: \n\n+ 零点前上线：确保奖励到账通知\n+ 活动通知-连续三日未申请 发送时间变更 ：`0 3 12 * * ? *` ->`0 16 19 * * ? *`\n+ 初始化消息tokenid：`initWechatMessageToken`\n\n```\ncurl --location --request GET '127.0.0.1:8088/v2.0/initWechatMessageToken' \\\n--header 'backend-token: 41614634-0c04-4e84-8a0e-db01def48247' \\\n--header 'Content-Type: application/json' \\\n--data-raw '[\n    {\n        \"page\": \"pages/index/index\",\n        \"targetPage\": \"suspension\",\n        \"messageType\": \"A1\"\n    },\n    {\n        \"page\": \"pages/index/index\",\n        \"targetPage\": \"suspension\",\n        \"messageType\": \"B1\"\n    },\n    {\n        \"page\": \"pages/index/index\",\n        \"targetPage\": \"webview\",\n        \"messageType\": \"B2\",\n        \"url\":\"https://www.cheche365.com/m/index.html?src=tinggeili\"\n    },\n    {\n        \"page\": \"pages/index/index\",\n        \"targetPage\": \"webview\",\n        \"messageType\": \"B3\",\n        \"url\":\"https://channelh5.pubmi.cn/h5/newepidemicDetail?channel=ZT22033002&agentId=\"\n    },\n    {\n        \"page\": \"pages/index/index\",\n        \"targetPage\": \"identify-code\",\n        \"messageType\": \"B4\"\n    },\n    {\n        \"page\": \"pages/index/index\",\n        \"targetPage\": \"invitor\",\n        \"messageType\": \"B5\"\n    },\n    {\n        \"page\": \"pages/index/index\",\n        \"targetPage\": \"suspension\",\n        \"messageType\": \"B6\"\n    },    \n    {\n        \"page\": \"pages/index/index\",\n        \"targetPage\": \"suspension\",\n        \"messageType\": \"C1\"\n    },\n    {\n        \"page\": \"pages/index/index\",\n        \"targetPage\": \"invitor\",\n        \"messageType\": \"C2\"\n    },    \n    {\n        \"page\": \"pages/index/index\",\n        \"targetPage\": \"webview\",\n        \"messageType\": \"C3\",\n        \"url\":\"https://channelh5.pubmi.cn/h5/newepidemicDetail?channel=ZT22033002&agentId=\"\n    },\n    {\n        \"page\": \"pages/index/index\",\n        \"targetPage\": \"identify-code\",\n        \"messageType\": \"C4\"\n    },\n    {\n        \"page\": \"pages/index/index\",\n        \"targetPage\": \"suspension\",\n        \"messageType\": \"D1\"\n    }\n]'\n```\n\n## 一、奖励待领取通知（次日提醒）\n\n1. 触发时间：T+1 12:36\n2. 触发条件：\n\n   + 本月停驶天数 < 10\n   \n   + 订阅用户本月最后一次停驶状态为停驶中\n3. 模板id：`P88o-yRmu6CMWpBujUoukrVqYpFgHnDsmb6vn2BJnos`\n4. 参数配置：(发送人，达标总天数，最高返现金额，本月停驶天数)\n\n## 二、奖励到账通知\n\n### 定时任务一（奖励变更并存储消息体，需加入用户id）\n\n1. 触发时间：T+2 00:00\n2. 触发条件：\n   + 本月停驶天数 <= 10\n   + 昨日奖励金额到账\n3. 模板id：`xpNegMVvwaRCSHGFOB7QUv9c1ak_B2NXBGlouOZClo0`\n4. 存储结构：（用户id，变更金额）\n\n### 定时任务二（通过用户获取当日停驶记录发送信息）\n\n1. 触发时间：T+2 09:03\n\n2. 触发条件：redis中存在记录\n\n3. 参数配置：（发送人，变更金额，达标总天数，本月停驶天数，每日返现金额，跳转页面及参数）\n\n\n## 三、活动通知（三日提醒）\n\n### 定时任务一(扫描三日提醒用户，存储到redis)：\n\n1. 触发时间：T+3 00:00\n2. 触发条件：\n   + 本月停驶天数<10\n   + 当月最后一天不推送该消息类型\n3. 存储结构（用户id）\n\n### 定时任务二(发送信息)：\n\n1. 触发时间：T+3 17:36\n2. 触发条件：redis中存在记录\n3. 模板id：`QEZ8Tj79Jrh9B_LiltMGsr8pDs4mtyM0aUoShefElRQ`\n4. 参数配置：（发送人，达标总天数，本月停驶天数，每月最高返现金额，每日返现金额）\n\n","slug":"BookMark/车车笔记/订阅消息","published":1,"date":"2022-07-20T06:37:11.000Z","updated":"2022-09-01T10:26:25.955Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cl7ptszor002qaba543mzbr5c","content":"<h1><span id=\"微信订阅消息定制化\">微信订阅消息定制化</span></h1><p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220330132046796.png\" alt=\"image-20220330132046796\"></p>\n<p>消息优化上线todo: </p>\n<ul>\n<li>零点前上线：确保奖励到账通知</li>\n<li>活动通知-连续三日未申请 发送时间变更 ：<code>0 3 12 * * ? *</code> -&gt;<code>0 16 19 * * ? *</code></li>\n<li>初始化消息tokenid：<code>initWechatMessageToken</code></li>\n</ul>\n<figure class=\"highlight jboss-cli\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs jboss-cli\">curl <span class=\"hljs-params\">--location</span> <span class=\"hljs-params\">--request</span> GET &#x27;127.0.0.1<span class=\"hljs-function\">:8088</span>/v2.0/initWechatMessageToken&#x27; \\<br><span class=\"hljs-params\">--header</span> &#x27;backend-token: 41614634-0c04-4e84-8a0e-db01def48247&#x27; \\<br><span class=\"hljs-params\">--header</span> &#x27;Content-Type: application/json&#x27; \\<br><span class=\"hljs-params\">--data-raw</span> &#x27;[<br>    &#123;<br>        <span class=\"hljs-string\">&quot;page&quot;</span>: <span class=\"hljs-string\">&quot;pages/index/index&quot;</span>,<br>        <span class=\"hljs-string\">&quot;targetPage&quot;</span>: <span class=\"hljs-string\">&quot;suspension&quot;</span>,<br>        <span class=\"hljs-string\">&quot;messageType&quot;</span>: <span class=\"hljs-string\">&quot;A1&quot;</span><br>    &#125;,<br>    &#123;<br>        <span class=\"hljs-string\">&quot;page&quot;</span>: <span class=\"hljs-string\">&quot;pages/index/index&quot;</span>,<br>        <span class=\"hljs-string\">&quot;targetPage&quot;</span>: <span class=\"hljs-string\">&quot;suspension&quot;</span>,<br>        <span class=\"hljs-string\">&quot;messageType&quot;</span>: <span class=\"hljs-string\">&quot;B1&quot;</span><br>    &#125;,<br>    &#123;<br>        <span class=\"hljs-string\">&quot;page&quot;</span>: <span class=\"hljs-string\">&quot;pages/index/index&quot;</span>,<br>        <span class=\"hljs-string\">&quot;targetPage&quot;</span>: <span class=\"hljs-string\">&quot;webview&quot;</span>,<br>        <span class=\"hljs-string\">&quot;messageType&quot;</span>: <span class=\"hljs-string\">&quot;B2&quot;</span>,<br>        <span class=\"hljs-string\">&quot;url&quot;</span>:<span class=\"hljs-string\">&quot;https://www.cheche365.com/m/index.html?src=tinggeili&quot;</span><br>    &#125;,<br>    &#123;<br>        <span class=\"hljs-string\">&quot;page&quot;</span>: <span class=\"hljs-string\">&quot;pages/index/index&quot;</span>,<br>        <span class=\"hljs-string\">&quot;targetPage&quot;</span>: <span class=\"hljs-string\">&quot;webview&quot;</span>,<br>        <span class=\"hljs-string\">&quot;messageType&quot;</span>: <span class=\"hljs-string\">&quot;B3&quot;</span>,<br>        <span class=\"hljs-string\">&quot;url&quot;</span>:<span class=\"hljs-string\">&quot;https://channelh5.pubmi.cn/h5/newepidemicDetail?channel=ZT22033002&amp;agentId=&quot;</span><br>    &#125;,<br>    &#123;<br>        <span class=\"hljs-string\">&quot;page&quot;</span>: <span class=\"hljs-string\">&quot;pages/index/index&quot;</span>,<br>        <span class=\"hljs-string\">&quot;targetPage&quot;</span>: <span class=\"hljs-string\">&quot;identify-code&quot;</span>,<br>        <span class=\"hljs-string\">&quot;messageType&quot;</span>: <span class=\"hljs-string\">&quot;B4&quot;</span><br>    &#125;,<br>    &#123;<br>        <span class=\"hljs-string\">&quot;page&quot;</span>: <span class=\"hljs-string\">&quot;pages/index/index&quot;</span>,<br>        <span class=\"hljs-string\">&quot;targetPage&quot;</span>: <span class=\"hljs-string\">&quot;invitor&quot;</span>,<br>        <span class=\"hljs-string\">&quot;messageType&quot;</span>: <span class=\"hljs-string\">&quot;B5&quot;</span><br>    &#125;,<br>    &#123;<br>        <span class=\"hljs-string\">&quot;page&quot;</span>: <span class=\"hljs-string\">&quot;pages/index/index&quot;</span>,<br>        <span class=\"hljs-string\">&quot;targetPage&quot;</span>: <span class=\"hljs-string\">&quot;suspension&quot;</span>,<br>        <span class=\"hljs-string\">&quot;messageType&quot;</span>: <span class=\"hljs-string\">&quot;B6&quot;</span><br>    &#125;,    <br>    &#123;<br>        <span class=\"hljs-string\">&quot;page&quot;</span>: <span class=\"hljs-string\">&quot;pages/index/index&quot;</span>,<br>        <span class=\"hljs-string\">&quot;targetPage&quot;</span>: <span class=\"hljs-string\">&quot;suspension&quot;</span>,<br>        <span class=\"hljs-string\">&quot;messageType&quot;</span>: <span class=\"hljs-string\">&quot;C1&quot;</span><br>    &#125;,<br>    &#123;<br>        <span class=\"hljs-string\">&quot;page&quot;</span>: <span class=\"hljs-string\">&quot;pages/index/index&quot;</span>,<br>        <span class=\"hljs-string\">&quot;targetPage&quot;</span>: <span class=\"hljs-string\">&quot;invitor&quot;</span>,<br>        <span class=\"hljs-string\">&quot;messageType&quot;</span>: <span class=\"hljs-string\">&quot;C2&quot;</span><br>    &#125;,    <br>    &#123;<br>        <span class=\"hljs-string\">&quot;page&quot;</span>: <span class=\"hljs-string\">&quot;pages/index/index&quot;</span>,<br>        <span class=\"hljs-string\">&quot;targetPage&quot;</span>: <span class=\"hljs-string\">&quot;webview&quot;</span>,<br>        <span class=\"hljs-string\">&quot;messageType&quot;</span>: <span class=\"hljs-string\">&quot;C3&quot;</span>,<br>        <span class=\"hljs-string\">&quot;url&quot;</span>:<span class=\"hljs-string\">&quot;https://channelh5.pubmi.cn/h5/newepidemicDetail?channel=ZT22033002&amp;agentId=&quot;</span><br>    &#125;,<br>    &#123;<br>        <span class=\"hljs-string\">&quot;page&quot;</span>: <span class=\"hljs-string\">&quot;pages/index/index&quot;</span>,<br>        <span class=\"hljs-string\">&quot;targetPage&quot;</span>: <span class=\"hljs-string\">&quot;identify-code&quot;</span>,<br>        <span class=\"hljs-string\">&quot;messageType&quot;</span>: <span class=\"hljs-string\">&quot;C4&quot;</span><br>    &#125;,<br>    &#123;<br>        <span class=\"hljs-string\">&quot;page&quot;</span>: <span class=\"hljs-string\">&quot;pages/index/index&quot;</span>,<br>        <span class=\"hljs-string\">&quot;targetPage&quot;</span>: <span class=\"hljs-string\">&quot;suspension&quot;</span>,<br>        <span class=\"hljs-string\">&quot;messageType&quot;</span>: <span class=\"hljs-string\">&quot;D1&quot;</span><br>    &#125;<br>]&#x27;<br></code></pre></td></tr></table></figure>\n\n<h2><span id=\"一-奖励待领取通知次日提醒\">一、奖励待领取通知（次日提醒）</span></h2><ol>\n<li><p>触发时间：T+1 12:36</p>\n</li>\n<li><p>触发条件：</p>\n<ul>\n<li><p>本月停驶天数 &lt; 10</p>\n</li>\n<li><p>订阅用户本月最后一次停驶状态为停驶中</p>\n</li>\n</ul>\n</li>\n<li><p>模板id：<code>P88o-yRmu6CMWpBujUoukrVqYpFgHnDsmb6vn2BJnos</code></p>\n</li>\n<li><p>参数配置：(发送人，达标总天数，最高返现金额，本月停驶天数)</p>\n</li>\n</ol>\n<h2><span id=\"二-奖励到账通知\">二、奖励到账通知</span></h2><h3><span id=\"定时任务一奖励变更并存储消息体需加入用户id\">定时任务一（奖励变更并存储消息体，需加入用户id）</span></h3><ol>\n<li>触发时间：T+2 00:00</li>\n<li>触发条件：<ul>\n<li>本月停驶天数 &lt;&#x3D; 10</li>\n<li>昨日奖励金额到账</li>\n</ul>\n</li>\n<li>模板id：<code>xpNegMVvwaRCSHGFOB7QUv9c1ak_B2NXBGlouOZClo0</code></li>\n<li>存储结构：（用户id，变更金额）</li>\n</ol>\n<h3><span id=\"定时任务二通过用户获取当日停驶记录发送信息\">定时任务二（通过用户获取当日停驶记录发送信息）</span></h3><ol>\n<li><p>触发时间：T+2 09:03</p>\n</li>\n<li><p>触发条件：redis中存在记录</p>\n</li>\n<li><p>参数配置：（发送人，变更金额，达标总天数，本月停驶天数，每日返现金额，跳转页面及参数）</p>\n</li>\n</ol>\n<h2><span id=\"三-活动通知三日提醒\">三、活动通知（三日提醒）</span></h2><h3><span id=\"定时任务一扫描三日提醒用户存储到redis\">定时任务一(扫描三日提醒用户，存储到redis)：</span></h3><ol>\n<li>触发时间：T+3 00:00</li>\n<li>触发条件：<ul>\n<li>本月停驶天数&lt;10</li>\n<li>当月最后一天不推送该消息类型</li>\n</ul>\n</li>\n<li>存储结构（用户id）</li>\n</ol>\n<h3><span id=\"定时任务二发送信息\">定时任务二(发送信息)：</span></h3><ol>\n<li>触发时间：T+3 17:36</li>\n<li>触发条件：redis中存在记录</li>\n<li>模板id：<code>QEZ8Tj79Jrh9B_LiltMGsr8pDs4mtyM0aUoShefElRQ</code></li>\n<li>参数配置：（发送人，达标总天数，本月停驶天数，每月最高返现金额，每日返现金额）</li>\n</ol>\n","site":{"data":{}},"wordcount":3072,"excerpt":"","more":"<h1 id=\"微信订阅消息定制化\"><a href=\"#微信订阅消息定制化\" class=\"headerlink\" title=\"微信订阅消息定制化\"></a>微信订阅消息定制化</h1><p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220330132046796.png\" alt=\"image-20220330132046796\"></p>\n<p>消息优化上线todo: </p>\n<ul>\n<li>零点前上线：确保奖励到账通知</li>\n<li>活动通知-连续三日未申请 发送时间变更 ：<code>0 3 12 * * ? *</code> -&gt;<code>0 16 19 * * ? *</code></li>\n<li>初始化消息tokenid：<code>initWechatMessageToken</code></li>\n</ul>\n<figure class=\"highlight jboss-cli\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs jboss-cli\">curl <span class=\"hljs-params\">--location</span> <span class=\"hljs-params\">--request</span> GET &#x27;127.0.0.1<span class=\"hljs-function\">:8088</span>/v2.0/initWechatMessageToken&#x27; \\<br><span class=\"hljs-params\">--header</span> &#x27;backend-token: 41614634-0c04-4e84-8a0e-db01def48247&#x27; \\<br><span class=\"hljs-params\">--header</span> &#x27;Content-Type: application/json&#x27; \\<br><span class=\"hljs-params\">--data-raw</span> &#x27;[<br>    &#123;<br>        <span class=\"hljs-string\">&quot;page&quot;</span>: <span class=\"hljs-string\">&quot;pages/index/index&quot;</span>,<br>        <span class=\"hljs-string\">&quot;targetPage&quot;</span>: <span class=\"hljs-string\">&quot;suspension&quot;</span>,<br>        <span class=\"hljs-string\">&quot;messageType&quot;</span>: <span class=\"hljs-string\">&quot;A1&quot;</span><br>    &#125;,<br>    &#123;<br>        <span class=\"hljs-string\">&quot;page&quot;</span>: <span class=\"hljs-string\">&quot;pages/index/index&quot;</span>,<br>        <span class=\"hljs-string\">&quot;targetPage&quot;</span>: <span class=\"hljs-string\">&quot;suspension&quot;</span>,<br>        <span class=\"hljs-string\">&quot;messageType&quot;</span>: <span class=\"hljs-string\">&quot;B1&quot;</span><br>    &#125;,<br>    &#123;<br>        <span class=\"hljs-string\">&quot;page&quot;</span>: <span class=\"hljs-string\">&quot;pages/index/index&quot;</span>,<br>        <span class=\"hljs-string\">&quot;targetPage&quot;</span>: <span class=\"hljs-string\">&quot;webview&quot;</span>,<br>        <span class=\"hljs-string\">&quot;messageType&quot;</span>: <span class=\"hljs-string\">&quot;B2&quot;</span>,<br>        <span class=\"hljs-string\">&quot;url&quot;</span>:<span class=\"hljs-string\">&quot;https://www.cheche365.com/m/index.html?src=tinggeili&quot;</span><br>    &#125;,<br>    &#123;<br>        <span class=\"hljs-string\">&quot;page&quot;</span>: <span class=\"hljs-string\">&quot;pages/index/index&quot;</span>,<br>        <span class=\"hljs-string\">&quot;targetPage&quot;</span>: <span class=\"hljs-string\">&quot;webview&quot;</span>,<br>        <span class=\"hljs-string\">&quot;messageType&quot;</span>: <span class=\"hljs-string\">&quot;B3&quot;</span>,<br>        <span class=\"hljs-string\">&quot;url&quot;</span>:<span class=\"hljs-string\">&quot;https://channelh5.pubmi.cn/h5/newepidemicDetail?channel=ZT22033002&amp;agentId=&quot;</span><br>    &#125;,<br>    &#123;<br>        <span class=\"hljs-string\">&quot;page&quot;</span>: <span class=\"hljs-string\">&quot;pages/index/index&quot;</span>,<br>        <span class=\"hljs-string\">&quot;targetPage&quot;</span>: <span class=\"hljs-string\">&quot;identify-code&quot;</span>,<br>        <span class=\"hljs-string\">&quot;messageType&quot;</span>: <span class=\"hljs-string\">&quot;B4&quot;</span><br>    &#125;,<br>    &#123;<br>        <span class=\"hljs-string\">&quot;page&quot;</span>: <span class=\"hljs-string\">&quot;pages/index/index&quot;</span>,<br>        <span class=\"hljs-string\">&quot;targetPage&quot;</span>: <span class=\"hljs-string\">&quot;invitor&quot;</span>,<br>        <span class=\"hljs-string\">&quot;messageType&quot;</span>: <span class=\"hljs-string\">&quot;B5&quot;</span><br>    &#125;,<br>    &#123;<br>        <span class=\"hljs-string\">&quot;page&quot;</span>: <span class=\"hljs-string\">&quot;pages/index/index&quot;</span>,<br>        <span class=\"hljs-string\">&quot;targetPage&quot;</span>: <span class=\"hljs-string\">&quot;suspension&quot;</span>,<br>        <span class=\"hljs-string\">&quot;messageType&quot;</span>: <span class=\"hljs-string\">&quot;B6&quot;</span><br>    &#125;,    <br>    &#123;<br>        <span class=\"hljs-string\">&quot;page&quot;</span>: <span class=\"hljs-string\">&quot;pages/index/index&quot;</span>,<br>        <span class=\"hljs-string\">&quot;targetPage&quot;</span>: <span class=\"hljs-string\">&quot;suspension&quot;</span>,<br>        <span class=\"hljs-string\">&quot;messageType&quot;</span>: <span class=\"hljs-string\">&quot;C1&quot;</span><br>    &#125;,<br>    &#123;<br>        <span class=\"hljs-string\">&quot;page&quot;</span>: <span class=\"hljs-string\">&quot;pages/index/index&quot;</span>,<br>        <span class=\"hljs-string\">&quot;targetPage&quot;</span>: <span class=\"hljs-string\">&quot;invitor&quot;</span>,<br>        <span class=\"hljs-string\">&quot;messageType&quot;</span>: <span class=\"hljs-string\">&quot;C2&quot;</span><br>    &#125;,    <br>    &#123;<br>        <span class=\"hljs-string\">&quot;page&quot;</span>: <span class=\"hljs-string\">&quot;pages/index/index&quot;</span>,<br>        <span class=\"hljs-string\">&quot;targetPage&quot;</span>: <span class=\"hljs-string\">&quot;webview&quot;</span>,<br>        <span class=\"hljs-string\">&quot;messageType&quot;</span>: <span class=\"hljs-string\">&quot;C3&quot;</span>,<br>        <span class=\"hljs-string\">&quot;url&quot;</span>:<span class=\"hljs-string\">&quot;https://channelh5.pubmi.cn/h5/newepidemicDetail?channel=ZT22033002&amp;agentId=&quot;</span><br>    &#125;,<br>    &#123;<br>        <span class=\"hljs-string\">&quot;page&quot;</span>: <span class=\"hljs-string\">&quot;pages/index/index&quot;</span>,<br>        <span class=\"hljs-string\">&quot;targetPage&quot;</span>: <span class=\"hljs-string\">&quot;identify-code&quot;</span>,<br>        <span class=\"hljs-string\">&quot;messageType&quot;</span>: <span class=\"hljs-string\">&quot;C4&quot;</span><br>    &#125;,<br>    &#123;<br>        <span class=\"hljs-string\">&quot;page&quot;</span>: <span class=\"hljs-string\">&quot;pages/index/index&quot;</span>,<br>        <span class=\"hljs-string\">&quot;targetPage&quot;</span>: <span class=\"hljs-string\">&quot;suspension&quot;</span>,<br>        <span class=\"hljs-string\">&quot;messageType&quot;</span>: <span class=\"hljs-string\">&quot;D1&quot;</span><br>    &#125;<br>]&#x27;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"一、奖励待领取通知（次日提醒）\"><a href=\"#一、奖励待领取通知（次日提醒）\" class=\"headerlink\" title=\"一、奖励待领取通知（次日提醒）\"></a>一、奖励待领取通知（次日提醒）</h2><ol>\n<li><p>触发时间：T+1 12:36</p>\n</li>\n<li><p>触发条件：</p>\n<ul>\n<li><p>本月停驶天数 &lt; 10</p>\n</li>\n<li><p>订阅用户本月最后一次停驶状态为停驶中</p>\n</li>\n</ul>\n</li>\n<li><p>模板id：<code>P88o-yRmu6CMWpBujUoukrVqYpFgHnDsmb6vn2BJnos</code></p>\n</li>\n<li><p>参数配置：(发送人，达标总天数，最高返现金额，本月停驶天数)</p>\n</li>\n</ol>\n<h2 id=\"二、奖励到账通知\"><a href=\"#二、奖励到账通知\" class=\"headerlink\" title=\"二、奖励到账通知\"></a>二、奖励到账通知</h2><h3 id=\"定时任务一（奖励变更并存储消息体，需加入用户id）\"><a href=\"#定时任务一（奖励变更并存储消息体，需加入用户id）\" class=\"headerlink\" title=\"定时任务一（奖励变更并存储消息体，需加入用户id）\"></a>定时任务一（奖励变更并存储消息体，需加入用户id）</h3><ol>\n<li>触发时间：T+2 00:00</li>\n<li>触发条件：<ul>\n<li>本月停驶天数 &lt;&#x3D; 10</li>\n<li>昨日奖励金额到账</li>\n</ul>\n</li>\n<li>模板id：<code>xpNegMVvwaRCSHGFOB7QUv9c1ak_B2NXBGlouOZClo0</code></li>\n<li>存储结构：（用户id，变更金额）</li>\n</ol>\n<h3 id=\"定时任务二（通过用户获取当日停驶记录发送信息）\"><a href=\"#定时任务二（通过用户获取当日停驶记录发送信息）\" class=\"headerlink\" title=\"定时任务二（通过用户获取当日停驶记录发送信息）\"></a>定时任务二（通过用户获取当日停驶记录发送信息）</h3><ol>\n<li><p>触发时间：T+2 09:03</p>\n</li>\n<li><p>触发条件：redis中存在记录</p>\n</li>\n<li><p>参数配置：（发送人，变更金额，达标总天数，本月停驶天数，每日返现金额，跳转页面及参数）</p>\n</li>\n</ol>\n<h2 id=\"三、活动通知（三日提醒）\"><a href=\"#三、活动通知（三日提醒）\" class=\"headerlink\" title=\"三、活动通知（三日提醒）\"></a>三、活动通知（三日提醒）</h2><h3 id=\"定时任务一-扫描三日提醒用户，存储到redis-：\"><a href=\"#定时任务一-扫描三日提醒用户，存储到redis-：\" class=\"headerlink\" title=\"定时任务一(扫描三日提醒用户，存储到redis)：\"></a>定时任务一(扫描三日提醒用户，存储到redis)：</h3><ol>\n<li>触发时间：T+3 00:00</li>\n<li>触发条件：<ul>\n<li>本月停驶天数&lt;10</li>\n<li>当月最后一天不推送该消息类型</li>\n</ul>\n</li>\n<li>存储结构（用户id）</li>\n</ol>\n<h3 id=\"定时任务二-发送信息-：\"><a href=\"#定时任务二-发送信息-：\" class=\"headerlink\" title=\"定时任务二(发送信息)：\"></a>定时任务二(发送信息)：</h3><ol>\n<li>触发时间：T+3 17:36</li>\n<li>触发条件：redis中存在记录</li>\n<li>模板id：<code>QEZ8Tj79Jrh9B_LiltMGsr8pDs4mtyM0aUoShefElRQ</code></li>\n<li>参数配置：（发送人，达标总天数，本月停驶天数，每月最高返现金额，每日返现金额）</li>\n</ol>\n"},{"_content":"[toc]\n\n# 一、环境安装配置\n\nIDE: Intellij IDEA\n编程语言: java 11、groovy\n数据库：mysql、mongodb、redis\n代码托管：git、GitLab\n依赖管理：gradle、maven\n框架：spring全家桶、spock\n\n其他工具：navicat、nacos...\n\n# 二、项目下载\n\nbaoying-parent\n\nbaoying-product-center\n\nprimus\n\n# 三、项目启动\n\n1. nacos\n\n   `startup.cmd -m standalone`\n\n   ![image-20210914110833969](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20210914110833969.png)\n\n   进入配置列表导入[nacos配置文件](https://space.dingtalk.com/s/gwHOAxds7gLOGz30QAPaACA4NTc4ZDg2YmRiZWI0YzUzOGRlZTM0NzE3OGI4NDc2Nw )密码: NLGy\n\n   baoying-parent启动\n\n\n![image-20210913101122276](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20210913101122276.png)\n\n3. 将本地配置文件 [.java-local.properties](https://space.dingtalk.com/s/gwHOAxfOKALOGz30QAPaACA2ODExZDI1YzhhZmI0YTY0OWZmMDhkMTYyNjA3ODhjOA  ) 密码:huCP 下载复制到baoying-product-center项目根目录下\n\n   ![image-20210914112821264](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20210914112821264.png)\n\n4. baoying-product-center启动\n\n![image-20210913101829573](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20210913101829573.png)\n\n5. primus数据库（转储到本地）\n\n   ```javascript?linenums\n   host = 101.201.144.153\n   port = 39867\n   user = cybertron\n   database = cybertron\n   password = rwIqp8hsTj2z\n   ```\n   \n6. 启动配置选项中配置vm选项内容\n\n   ![image-20210914173812434](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20210914173812434.png)\n\n   配置文件按照自己本地配置修改：\n\n   ```\n   -Dspring.profiles.active=dev\n   -Duser.timezone=GMT+08\n   -Dspring.datasource.druid.url=jdbc:mysql://localhost:3306/cybertron?useSSL=false&useUnicode=true&characterEncoding=utf8&allowMultiQueries=true&zeroDateTimeBehavior=convertToNull&serverTimezone=GMT%2B8\n   -Dspring.datasource.druid.username=root\n   -Dspring.datasource.druid.password=HBQ521521cf*\n   -Dspring.datasource.druid.url=jdbc:mysql://localhost:3306/cybertron?useSSL=false&useUnicode=true&characterEncoding=utf8&allowMultiQueries=true&zeroDateTimeBehavior=convertToNull&serverTimezone=GMT%2B8\n   -Dspring.data.mongodb.host=localhost\n   -Dspring.data.mongodb.port=27017\n   -Dspring.redis.host=localhost\n   -Dspring.redis.port=6379\n   -Dspring.cache.redis.host=localhost\n   -Dspring.cache.redis.port=6379\n   -Dtest.remote.name=remote-test\n   -Dcheche365.app.domain=cheche365\n   -Dwechat.accesstoken.daemon=enabled\n   -Dserver.port=11937\n   -Dspring.config.name=application,datasource,cooperator,externalapi,supplier\n   ```\n\n   \n\n# 四、VPN\n\n![image-20210913140343019](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20210913140343019.png)\n\n\n\n# 五、检出当前分支\n\n`git工具->检出远程分支feature_4335->命名为xxx_4335`\n\n![image-20210914155430950](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20210914155430950.png)\n\n\n\n# 六、检测代码\n\nGradle工具中：`项目->Tasks->other->codenarcMain`日志中生成地址到浏览器\n\n![image-20210914100554312](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20210914100554312.png)\n\n![image-20210914100631323](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20210914100631323.png)\n\n![image-20210914100832258](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20210914100832258.png)\n\n# 七、代码提交\n\n1. 编辑提交信息 \n   + feat新建/fix修复\n   + #xxxxx 任务号\n   + desc\n\n![image-20210914104402155](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20210914104402155.png)\n\n2.  提交合并请求\n\n   ![image-20210914105604249](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20210914105604249.png)\n\n![image-20210914105810326](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20210914105810326.png)\n\n","source":"_posts/BookMark/车车笔记/车车项目启动笔记.md","raw":"[toc]\n\n# 一、环境安装配置\n\nIDE: Intellij IDEA\n编程语言: java 11、groovy\n数据库：mysql、mongodb、redis\n代码托管：git、GitLab\n依赖管理：gradle、maven\n框架：spring全家桶、spock\n\n其他工具：navicat、nacos...\n\n# 二、项目下载\n\nbaoying-parent\n\nbaoying-product-center\n\nprimus\n\n# 三、项目启动\n\n1. nacos\n\n   `startup.cmd -m standalone`\n\n   ![image-20210914110833969](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20210914110833969.png)\n\n   进入配置列表导入[nacos配置文件](https://space.dingtalk.com/s/gwHOAxds7gLOGz30QAPaACA4NTc4ZDg2YmRiZWI0YzUzOGRlZTM0NzE3OGI4NDc2Nw )密码: NLGy\n\n   baoying-parent启动\n\n\n![image-20210913101122276](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20210913101122276.png)\n\n3. 将本地配置文件 [.java-local.properties](https://space.dingtalk.com/s/gwHOAxfOKALOGz30QAPaACA2ODExZDI1YzhhZmI0YTY0OWZmMDhkMTYyNjA3ODhjOA  ) 密码:huCP 下载复制到baoying-product-center项目根目录下\n\n   ![image-20210914112821264](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20210914112821264.png)\n\n4. baoying-product-center启动\n\n![image-20210913101829573](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20210913101829573.png)\n\n5. primus数据库（转储到本地）\n\n   ```javascript?linenums\n   host = 101.201.144.153\n   port = 39867\n   user = cybertron\n   database = cybertron\n   password = rwIqp8hsTj2z\n   ```\n   \n6. 启动配置选项中配置vm选项内容\n\n   ![image-20210914173812434](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20210914173812434.png)\n\n   配置文件按照自己本地配置修改：\n\n   ```\n   -Dspring.profiles.active=dev\n   -Duser.timezone=GMT+08\n   -Dspring.datasource.druid.url=jdbc:mysql://localhost:3306/cybertron?useSSL=false&useUnicode=true&characterEncoding=utf8&allowMultiQueries=true&zeroDateTimeBehavior=convertToNull&serverTimezone=GMT%2B8\n   -Dspring.datasource.druid.username=root\n   -Dspring.datasource.druid.password=HBQ521521cf*\n   -Dspring.datasource.druid.url=jdbc:mysql://localhost:3306/cybertron?useSSL=false&useUnicode=true&characterEncoding=utf8&allowMultiQueries=true&zeroDateTimeBehavior=convertToNull&serverTimezone=GMT%2B8\n   -Dspring.data.mongodb.host=localhost\n   -Dspring.data.mongodb.port=27017\n   -Dspring.redis.host=localhost\n   -Dspring.redis.port=6379\n   -Dspring.cache.redis.host=localhost\n   -Dspring.cache.redis.port=6379\n   -Dtest.remote.name=remote-test\n   -Dcheche365.app.domain=cheche365\n   -Dwechat.accesstoken.daemon=enabled\n   -Dserver.port=11937\n   -Dspring.config.name=application,datasource,cooperator,externalapi,supplier\n   ```\n\n   \n\n# 四、VPN\n\n![image-20210913140343019](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20210913140343019.png)\n\n\n\n# 五、检出当前分支\n\n`git工具->检出远程分支feature_4335->命名为xxx_4335`\n\n![image-20210914155430950](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20210914155430950.png)\n\n\n\n# 六、检测代码\n\nGradle工具中：`项目->Tasks->other->codenarcMain`日志中生成地址到浏览器\n\n![image-20210914100554312](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20210914100554312.png)\n\n![image-20210914100631323](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20210914100631323.png)\n\n![image-20210914100832258](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20210914100832258.png)\n\n# 七、代码提交\n\n1. 编辑提交信息 \n   + feat新建/fix修复\n   + #xxxxx 任务号\n   + desc\n\n![image-20210914104402155](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20210914104402155.png)\n\n2.  提交合并请求\n\n   ![image-20210914105604249](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20210914105604249.png)\n\n![image-20210914105810326](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20210914105810326.png)\n\n","slug":"BookMark/车车笔记/车车项目启动笔记","published":1,"date":"2022-07-18T09:51:30.000Z","updated":"2022-09-01T10:24:08.022Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cl7ptszor002raba5dlpxbq61","content":"<p>[toc]</p>\n<h1><span id=\"一-环境安装配置\">一、环境安装配置</span></h1><p>IDE: Intellij IDEA<br>编程语言: java 11、groovy<br>数据库：mysql、mongodb、redis<br>代码托管：git、GitLab<br>依赖管理：gradle、maven<br>框架：spring全家桶、spock</p>\n<p>其他工具：navicat、nacos…</p>\n<h1><span id=\"二-项目下载\">二、项目下载</span></h1><p>baoying-parent</p>\n<p>baoying-product-center</p>\n<p>primus</p>\n<h1><span id=\"三-项目启动\">三、项目启动</span></h1><ol>\n<li><p>nacos</p>\n<p><code>startup.cmd -m standalone</code></p>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20210914110833969.png\" alt=\"image-20210914110833969\"></p>\n<p>进入配置列表导入<a href=\"https://space.dingtalk.com/s/gwHOAxds7gLOGz30QAPaACA4NTc4ZDg2YmRiZWI0YzUzOGRlZTM0NzE3OGI4NDc2Nw\">nacos配置文件</a>密码: NLGy</p>\n<p>baoying-parent启动</p>\n</li>\n</ol>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20210913101122276.png\" alt=\"image-20210913101122276\"></p>\n<ol start=\"3\">\n<li><p>将本地配置文件 <a href=\"https://space.dingtalk.com/s/gwHOAxfOKALOGz30QAPaACA2ODExZDI1YzhhZmI0YTY0OWZmMDhkMTYyNjA3ODhjOA\">.java-local.properties</a> 密码:huCP 下载复制到baoying-product-center项目根目录下</p>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20210914112821264.png\" alt=\"image-20210914112821264\"></p>\n</li>\n<li><p>baoying-product-center启动</p>\n</li>\n</ol>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20210913101829573.png\" alt=\"image-20210913101829573\"></p>\n<ol start=\"5\">\n<li><p>primus数据库（转储到本地）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">host = 101.201.144.153<br>port = 39867<br>user = cybertron<br>database = cybertron<br>password = rwIqp8hsTj2z<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>启动配置选项中配置vm选项内容</p>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20210914173812434.png\" alt=\"image-20210914173812434\"></p>\n<p>配置文件按照自己本地配置修改：</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ini\"><span class=\"hljs-attr\">-Dspring.profiles.active</span>=dev<br><span class=\"hljs-attr\">-Duser.timezone</span>=GMT+<span class=\"hljs-number\">08</span><br><span class=\"hljs-attr\">-Dspring.datasource.druid.url</span>=jdbc:mysql://localhost:<span class=\"hljs-number\">3306</span>/cybertron?useSSL=<span class=\"hljs-literal\">false</span>&amp;useUnicode=<span class=\"hljs-literal\">true</span>&amp;characterEncoding=utf8&amp;allowMultiQueries=<span class=\"hljs-literal\">true</span>&amp;zeroDateTimeBehavior=convertToNull&amp;serverTimezone=GMT%<span class=\"hljs-number\">2</span>B8<br><span class=\"hljs-attr\">-Dspring.datasource.druid.username</span>=root<br><span class=\"hljs-attr\">-Dspring.datasource.druid.password</span>=HBQ521521cf*<br><span class=\"hljs-attr\">-Dspring.datasource.druid.url</span>=jdbc:mysql://localhost:<span class=\"hljs-number\">3306</span>/cybertron?useSSL=<span class=\"hljs-literal\">false</span>&amp;useUnicode=<span class=\"hljs-literal\">true</span>&amp;characterEncoding=utf8&amp;allowMultiQueries=<span class=\"hljs-literal\">true</span>&amp;zeroDateTimeBehavior=convertToNull&amp;serverTimezone=GMT%<span class=\"hljs-number\">2</span>B8<br><span class=\"hljs-attr\">-Dspring.data.mongodb.host</span>=localhost<br><span class=\"hljs-attr\">-Dspring.data.mongodb.port</span>=<span class=\"hljs-number\">27017</span><br><span class=\"hljs-attr\">-Dspring.redis.host</span>=localhost<br><span class=\"hljs-attr\">-Dspring.redis.port</span>=<span class=\"hljs-number\">6379</span><br><span class=\"hljs-attr\">-Dspring.cache.redis.host</span>=localhost<br><span class=\"hljs-attr\">-Dspring.cache.redis.port</span>=<span class=\"hljs-number\">6379</span><br><span class=\"hljs-attr\">-Dtest.remote.name</span>=remote-test<br><span class=\"hljs-attr\">-Dcheche365.app.domain</span>=cheche365<br><span class=\"hljs-attr\">-Dwechat.accesstoken.daemon</span>=enabled<br><span class=\"hljs-attr\">-Dserver.port</span>=<span class=\"hljs-number\">11937</span><br><span class=\"hljs-attr\">-Dspring.config.name</span>=application,datasource,cooperator,externalapi,supplier<br></code></pre></td></tr></table></figure></li>\n</ol>\n<h1><span id=\"四-vpn\">四、VPN</span></h1><p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20210913140343019.png\" alt=\"image-20210913140343019\"></p>\n<h1><span id=\"五-检出当前分支\">五、检出当前分支</span></h1><p><code>git工具-&gt;检出远程分支feature_4335-&gt;命名为xxx_4335</code></p>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20210914155430950.png\" alt=\"image-20210914155430950\"></p>\n<h1><span id=\"六-检测代码\">六、检测代码</span></h1><p>Gradle工具中：<code>项目-&gt;Tasks-&gt;other-&gt;codenarcMain</code>日志中生成地址到浏览器</p>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20210914100554312.png\" alt=\"image-20210914100554312\"></p>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20210914100631323.png\" alt=\"image-20210914100631323\"></p>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20210914100832258.png\" alt=\"image-20210914100832258\"></p>\n<h1><span id=\"七-代码提交\">七、代码提交</span></h1><ol>\n<li>编辑提交信息 <ul>\n<li>feat新建&#x2F;fix修复</li>\n<li>#xxxxx 任务号</li>\n<li>desc</li>\n</ul>\n</li>\n</ol>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20210914104402155.png\" alt=\"image-20210914104402155\"></p>\n<ol start=\"2\">\n<li>提交合并请求</li>\n</ol>\n<p>   <img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20210914105604249.png\" alt=\"image-20210914105604249\"></p>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20210914105810326.png\" alt=\"image-20210914105810326\"></p>\n","site":{"data":{}},"wordcount":1637,"excerpt":"","more":"<p>[toc]</p>\n<h1 id=\"一、环境安装配置\"><a href=\"#一、环境安装配置\" class=\"headerlink\" title=\"一、环境安装配置\"></a>一、环境安装配置</h1><p>IDE: Intellij IDEA<br>编程语言: java 11、groovy<br>数据库：mysql、mongodb、redis<br>代码托管：git、GitLab<br>依赖管理：gradle、maven<br>框架：spring全家桶、spock</p>\n<p>其他工具：navicat、nacos…</p>\n<h1 id=\"二、项目下载\"><a href=\"#二、项目下载\" class=\"headerlink\" title=\"二、项目下载\"></a>二、项目下载</h1><p>baoying-parent</p>\n<p>baoying-product-center</p>\n<p>primus</p>\n<h1 id=\"三、项目启动\"><a href=\"#三、项目启动\" class=\"headerlink\" title=\"三、项目启动\"></a>三、项目启动</h1><ol>\n<li><p>nacos</p>\n<p><code>startup.cmd -m standalone</code></p>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20210914110833969.png\" alt=\"image-20210914110833969\"></p>\n<p>进入配置列表导入<a href=\"https://space.dingtalk.com/s/gwHOAxds7gLOGz30QAPaACA4NTc4ZDg2YmRiZWI0YzUzOGRlZTM0NzE3OGI4NDc2Nw\">nacos配置文件</a>密码: NLGy</p>\n<p>baoying-parent启动</p>\n</li>\n</ol>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20210913101122276.png\" alt=\"image-20210913101122276\"></p>\n<ol start=\"3\">\n<li><p>将本地配置文件 <a href=\"https://space.dingtalk.com/s/gwHOAxfOKALOGz30QAPaACA2ODExZDI1YzhhZmI0YTY0OWZmMDhkMTYyNjA3ODhjOA\">.java-local.properties</a> 密码:huCP 下载复制到baoying-product-center项目根目录下</p>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20210914112821264.png\" alt=\"image-20210914112821264\"></p>\n</li>\n<li><p>baoying-product-center启动</p>\n</li>\n</ol>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20210913101829573.png\" alt=\"image-20210913101829573\"></p>\n<ol start=\"5\">\n<li><p>primus数据库（转储到本地）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">host = 101.201.144.153<br>port = 39867<br>user = cybertron<br>database = cybertron<br>password = rwIqp8hsTj2z<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>启动配置选项中配置vm选项内容</p>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20210914173812434.png\" alt=\"image-20210914173812434\"></p>\n<p>配置文件按照自己本地配置修改：</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ini\"><span class=\"hljs-attr\">-Dspring.profiles.active</span>=dev<br><span class=\"hljs-attr\">-Duser.timezone</span>=GMT+<span class=\"hljs-number\">08</span><br><span class=\"hljs-attr\">-Dspring.datasource.druid.url</span>=jdbc:mysql://localhost:<span class=\"hljs-number\">3306</span>/cybertron?useSSL=<span class=\"hljs-literal\">false</span>&amp;useUnicode=<span class=\"hljs-literal\">true</span>&amp;characterEncoding=utf8&amp;allowMultiQueries=<span class=\"hljs-literal\">true</span>&amp;zeroDateTimeBehavior=convertToNull&amp;serverTimezone=GMT%<span class=\"hljs-number\">2</span>B8<br><span class=\"hljs-attr\">-Dspring.datasource.druid.username</span>=root<br><span class=\"hljs-attr\">-Dspring.datasource.druid.password</span>=HBQ521521cf*<br><span class=\"hljs-attr\">-Dspring.datasource.druid.url</span>=jdbc:mysql://localhost:<span class=\"hljs-number\">3306</span>/cybertron?useSSL=<span class=\"hljs-literal\">false</span>&amp;useUnicode=<span class=\"hljs-literal\">true</span>&amp;characterEncoding=utf8&amp;allowMultiQueries=<span class=\"hljs-literal\">true</span>&amp;zeroDateTimeBehavior=convertToNull&amp;serverTimezone=GMT%<span class=\"hljs-number\">2</span>B8<br><span class=\"hljs-attr\">-Dspring.data.mongodb.host</span>=localhost<br><span class=\"hljs-attr\">-Dspring.data.mongodb.port</span>=<span class=\"hljs-number\">27017</span><br><span class=\"hljs-attr\">-Dspring.redis.host</span>=localhost<br><span class=\"hljs-attr\">-Dspring.redis.port</span>=<span class=\"hljs-number\">6379</span><br><span class=\"hljs-attr\">-Dspring.cache.redis.host</span>=localhost<br><span class=\"hljs-attr\">-Dspring.cache.redis.port</span>=<span class=\"hljs-number\">6379</span><br><span class=\"hljs-attr\">-Dtest.remote.name</span>=remote-test<br><span class=\"hljs-attr\">-Dcheche365.app.domain</span>=cheche365<br><span class=\"hljs-attr\">-Dwechat.accesstoken.daemon</span>=enabled<br><span class=\"hljs-attr\">-Dserver.port</span>=<span class=\"hljs-number\">11937</span><br><span class=\"hljs-attr\">-Dspring.config.name</span>=application,datasource,cooperator,externalapi,supplier<br></code></pre></td></tr></table></figure></li>\n</ol>\n<h1 id=\"四、VPN\"><a href=\"#四、VPN\" class=\"headerlink\" title=\"四、VPN\"></a>四、VPN</h1><p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20210913140343019.png\" alt=\"image-20210913140343019\"></p>\n<h1 id=\"五、检出当前分支\"><a href=\"#五、检出当前分支\" class=\"headerlink\" title=\"五、检出当前分支\"></a>五、检出当前分支</h1><p><code>git工具-&gt;检出远程分支feature_4335-&gt;命名为xxx_4335</code></p>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20210914155430950.png\" alt=\"image-20210914155430950\"></p>\n<h1 id=\"六、检测代码\"><a href=\"#六、检测代码\" class=\"headerlink\" title=\"六、检测代码\"></a>六、检测代码</h1><p>Gradle工具中：<code>项目-&gt;Tasks-&gt;other-&gt;codenarcMain</code>日志中生成地址到浏览器</p>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20210914100554312.png\" alt=\"image-20210914100554312\"></p>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20210914100631323.png\" alt=\"image-20210914100631323\"></p>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20210914100832258.png\" alt=\"image-20210914100832258\"></p>\n<h1 id=\"七、代码提交\"><a href=\"#七、代码提交\" class=\"headerlink\" title=\"七、代码提交\"></a>七、代码提交</h1><ol>\n<li>编辑提交信息 <ul>\n<li>feat新建&#x2F;fix修复</li>\n<li>#xxxxx 任务号</li>\n<li>desc</li>\n</ul>\n</li>\n</ol>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20210914104402155.png\" alt=\"image-20210914104402155\"></p>\n<ol start=\"2\">\n<li>提交合并请求</li>\n</ol>\n<p>   <img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20210914105604249.png\" alt=\"image-20210914105604249\"></p>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20210914105810326.png\" alt=\"image-20210914105810326\"></p>\n"},{"_content":"# JVM调优\n\n## JVM执行一个Math方法图解\n\n![image-20220721150149118](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721150149118.png)\n\n每启动一个方法，从栈中获取一个线程；每个方法对应栈中的一个栈帧\n\n黄色区域为公有的，紫色部分线程私有。\n\n+ 栈：存放方法\n  + 操作数栈：记录计算操作过程\n\n+ 动态链接：记录该方法在方法区的地址\n\n+ 堆：存放对象的内存地址\n+ 方法区：存放常量，静态变量，类信息\n\n## 堆\n\n![image-20220721150157709](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721150157709.png)\n\n当Eden放满触发minor gc 垃圾回收机制\n\nGC：从Eden中找到GC root(方法区：静态属性引用对象，常量引用 栈帧中引用对象)，放入survivor区，每次操作代+1，达到15放入老年代\n\n\n\n## 调优\n\n减少GC次数，减少STW（Stop-The-World机制，Java中一种全局暂停现象 ）时间","source":"_posts/BookMark/面试/JVM.md","raw":"# JVM调优\n\n## JVM执行一个Math方法图解\n\n![image-20220721150149118](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721150149118.png)\n\n每启动一个方法，从栈中获取一个线程；每个方法对应栈中的一个栈帧\n\n黄色区域为公有的，紫色部分线程私有。\n\n+ 栈：存放方法\n  + 操作数栈：记录计算操作过程\n\n+ 动态链接：记录该方法在方法区的地址\n\n+ 堆：存放对象的内存地址\n+ 方法区：存放常量，静态变量，类信息\n\n## 堆\n\n![image-20220721150157709](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721150157709.png)\n\n当Eden放满触发minor gc 垃圾回收机制\n\nGC：从Eden中找到GC root(方法区：静态属性引用对象，常量引用 栈帧中引用对象)，放入survivor区，每次操作代+1，达到15放入老年代\n\n\n\n## 调优\n\n减少GC次数，减少STW（Stop-The-World机制，Java中一种全局暂停现象 ）时间","slug":"BookMark/面试/JVM","published":1,"date":"2022-07-21T07:03:04.000Z","updated":"2022-09-01T10:02:40.567Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cl7ptszor002saba55yhu8p4i","content":"<h1><span id=\"jvm调优\">JVM调优</span></h1><h2><span id=\"jvm执行一个math方法图解\">JVM执行一个Math方法图解</span></h2><p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721150149118.png\" alt=\"image-20220721150149118\"></p>\n<p>每启动一个方法，从栈中获取一个线程；每个方法对应栈中的一个栈帧</p>\n<p>黄色区域为公有的，紫色部分线程私有。</p>\n<ul>\n<li><p>栈：存放方法</p>\n<ul>\n<li>操作数栈：记录计算操作过程</li>\n</ul>\n</li>\n<li><p>动态链接：记录该方法在方法区的地址</p>\n</li>\n<li><p>堆：存放对象的内存地址</p>\n</li>\n<li><p>方法区：存放常量，静态变量，类信息</p>\n</li>\n</ul>\n<h2><span id=\"堆\">堆</span></h2><p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721150157709.png\" alt=\"image-20220721150157709\"></p>\n<p>当Eden放满触发minor gc 垃圾回收机制</p>\n<p>GC：从Eden中找到GC root(方法区：静态属性引用对象，常量引用 栈帧中引用对象)，放入survivor区，每次操作代+1，达到15放入老年代</p>\n<h2><span id=\"调优\">调优</span></h2><p>减少GC次数，减少STW（Stop-The-World机制，Java中一种全局暂停现象 ）时间</p>\n","site":{"data":{}},"wordcount":277,"excerpt":"","more":"<h1 id=\"JVM调优\"><a href=\"#JVM调优\" class=\"headerlink\" title=\"JVM调优\"></a>JVM调优</h1><h2 id=\"JVM执行一个Math方法图解\"><a href=\"#JVM执行一个Math方法图解\" class=\"headerlink\" title=\"JVM执行一个Math方法图解\"></a>JVM执行一个Math方法图解</h2><p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721150149118.png\" alt=\"image-20220721150149118\"></p>\n<p>每启动一个方法，从栈中获取一个线程；每个方法对应栈中的一个栈帧</p>\n<p>黄色区域为公有的，紫色部分线程私有。</p>\n<ul>\n<li><p>栈：存放方法</p>\n<ul>\n<li>操作数栈：记录计算操作过程</li>\n</ul>\n</li>\n<li><p>动态链接：记录该方法在方法区的地址</p>\n</li>\n<li><p>堆：存放对象的内存地址</p>\n</li>\n<li><p>方法区：存放常量，静态变量，类信息</p>\n</li>\n</ul>\n<h2 id=\"堆\"><a href=\"#堆\" class=\"headerlink\" title=\"堆\"></a>堆</h2><p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721150157709.png\" alt=\"image-20220721150157709\"></p>\n<p>当Eden放满触发minor gc 垃圾回收机制</p>\n<p>GC：从Eden中找到GC root(方法区：静态属性引用对象，常量引用 栈帧中引用对象)，放入survivor区，每次操作代+1，达到15放入老年代</p>\n<h2 id=\"调优\"><a href=\"#调优\" class=\"headerlink\" title=\"调优\"></a>调优</h2><p>减少GC次数，减少STW（Stop-The-World机制，Java中一种全局暂停现象 ）时间</p>\n"},{"_content":"# JAVA基础\n\n---\n[toc]\n---\n\n## 一、常见异常类以及继承机制：\n\n![enter description here](https://img-1256282866.cos.ap-beijing.myqcloud.com/1628462559515.png)\n\n\n## 二、Final关键字作用\n\n类防止被继承\n\n方法防止被重写\n\n变量防止被修改\n\n天生是线程安全的，而不需要额外的同步开销\n\n## 三、equals和==\n\nequals是判断两个变量或者实例指向同一个内存空间的值是不是相同，**比值**\n\n而==是判断两个变量或者实例是不是指向同一个内存空间，**比地址**\n\n引用类型放地址，基本数据类型放值\n\n## Object中的equals()和hashcode()的联系\n\nhashCode()是Object类的一个方法,返回一个哈希值.如果两个对象根据equal()方法比较相等,那么调用这两个对象中任意一个对象的hashCode()方法必须产生相同的哈希值;如果两个对象根据eqaul()方法比较不相等,那么产生的哈希值不一定相等\n\n## 四、synchronized关键字了解吗\n\nsynchronized是一种同步锁\n\n+ 修饰一个代码块，被修饰的代码块称为同步语句块，其作用的范围是大括号{}括起来的代码，作用的对象是调用这个代码块的对象；\n+ 修饰一个方法，被修饰的方法称为同步方法，其作用的范围是整个方法，作用的对象是调用这个方法的对象； \n+ 修饰一个静态的方法，其作用的范围是整个静态方法，作用的对象是这个类的所有对象；\n+ 修饰一个类，其作用的范围是synchronized后面括号括起来的部分，作用主的对象是这个类的所有对象。\n\n## 说说进程,线程之间的区别?\n\n+ 进程是程序运行和资源分配的基本单位,一个程序至少有一个进程,一个进程至少有一个线程.进程在执行过程中拥有独立的内存单元\n\n+ 线程是进程的一个实体,是cpu调度和分派的基本单位,是比程序更小的能独立运行的基本单位.同一进程中的多个线程之间可以并发执行\n\n## 线程池初始化的时候有那些参数\n\n \n\n## 线程的实现：\n\n+ 继承Thread类：必须重写run()方法，等待CPU进行调度\n+ 实现Runnable接口\n\n## 多线程与锁的使用\n\n```\nclass ThRun implements Runnable{\n   private int ticket=5;\n   public void run(){\n      for(int i=0;i<10;i++){\n         //synchronized (this){\n            if(ticket>0){\n            try{\n                  Thread.sleep(1000);\n            System.out.println(\"车票:\"+ticket--);\n            }\n            catch(InterruptedException e){\n               e.printStackTrace();\n            }\n         \n         }\n         //}\n         \n      }\n   }\n }\n public class Operation {\n    public static void main(String args[]){\n      ThRun m=new ThRun();\n      Thread t1=new Thread(m);\n      Thread t2=new Thread(m);\n      Thread t3=new Thread(m);\n      t1.start();\n      t2.start();//线程就绪状态\n      t3.start();\n    }\n }\n```\n\n## String,StringBuffer和StringBuilder区别?\n\nString是字符串常量,final修饰;StringBuffer字符串变量(线程安全);StringBuilder 字符串变量(线程不安全).此外StringBuilder和StringBuffer实现原理一样,都是基于数组扩容来实现的.a=a+b与a+=b有什么区别吗?\n\n## a=a+b与a+=b有什么区别吗?\n\n`+=`操作符会进行隐式自动类型转换,此处a+=b隐式的将加操作的结果类型强制转换为持有结果的类型,而a=a+b则不会自动\n\n## 了解泛型么?简述泛型的上界和下界?\n\n有时候希望传入的类型有一个指定的范围，从而可以进行一些特定的操作,这时候就需要通配符了?在Java中常见的通配符主要有以下几种:\n\n    <?>: 无限制通配符\n    <? extends E>: extends 关键字声明了类型的上界,表示参数化的类型可能是所指定的类型,或者是此类型的子类\n    <? super E>: super关键字声明了类型的下界,表示参数化的类型可能是指定的类型,或者是此类型的父类\n## 简单的解释一下垃圾回收?\n\nJVM中垃圾回收机制最基本的做法是分代回收.内存中的区域被划分成不同的世代,对象根据其存活的时间被保存在对应世代的区域中.一般的实现是划分成3个世代:年轻,年老和永久代.所有新生成的对象优先放在年轻代的(大对象可能被直接分配在老年代,作为一种分配担保机制),年轻代按照统计规律被分为三个区:一个Eden区，两个 Survivor区.在年轻代中经历了N次垃圾回收后仍然存活的对象,就会被放到年老代中.因此可以认为年老代中存放的都是一些生命周期较长的对象.\n\n方法区也被称为永久代,用于存储每一个java类的结构信息:比如运行时常量池,字段和方法数据,构造函数和普通方法的字节码内容以及类,实例,接口初始化时需要使用到的特殊方法等数据,根据虚拟机实现不同,GC可以选择对方法区进行回收也可以不回收.\n\n## 常见的垃圾回收算法有哪些\n\n标记-清除\n\n标记-复制\n\n标记-整理\n\n分代回收\n\n## 如何判断一个对象是否应该被回收?\n\n这就是所谓的对象存活性判断,常用的方法有两种:\n\n- 引用计数法：可能存在互相引用导致无法\n- 对象可达性分析\n\n## 产生死锁的条件\n\n1.互斥条件：一个资源每次只能被一个进程使用。\n 2.请求与保持条件：一个进程因请求资源而阻塞时，对已获得的资源保持不放。\n 3.不剥夺条件:进程已获得的资源，在末使用完之前，不能强行剥夺。\n 4.循环等待条件:若干进程之间形成一种头尾相接的循环等待资源关系。\n\n## wait()与sleep()的区别\n\n+ sleep()来自Thread类，和wait()来自Object类.调用sleep()方法的过程中，线程不会释放对象锁。而 调用 wait 方法线程会释放对象锁\n+ sleep()睡眠后不出让系统资源，wait让其他线程可以占用CPU\n+ sleep(milliseconds)需要指定一个睡眠时间，时间一到会自动唤醒.而wait()需要配合notify()或者notifyAll()使用\n\n## 怎么唤醒一个阻塞的线程\n如果线程是因为调用了wait()、sleep()或者join()方法而导致的阻塞，可以中断线程，并且通过抛出InterruptedException来唤醒它；如果线程遇到了IO阻塞，无能为力，因为IO是操作系统实现的，Java代码并没有办法直接接触到操作系统。\n\n## 什么是线程局部变量ThreadLocal\n\n线程局部变量是局限于线程内部的变量，属于线程自身所有，不在多个线程间共享。Java提供ThreadLocal类来支持线程局部变量，是一种实现线程安全的方式。但是在管理环境下（如 web 服务器）使用线程局部变量的时候要特别小心，在这种情况下，工作线程的生命周期比任何应用变量的生命周期都要长。任何线程局部变量一旦在工作完成后没有释放，Java 应用就存在内存泄露的风险。\n\n## ThreadLoal的作用是什么?\n\n简单说ThreadLocal就是一种以空间换时间的做法在每个Thread里面维护了一个ThreadLocal.ThreadLocalMap把数据进行隔离，数据不共享，自然就没有线程安全方面的问题了.\n\n## 集合\n\n## 网络\n\n## io\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/BookMark/面试/JAVA基础.md","raw":"# JAVA基础\n\n---\n[toc]\n---\n\n## 一、常见异常类以及继承机制：\n\n![enter description here](https://img-1256282866.cos.ap-beijing.myqcloud.com/1628462559515.png)\n\n\n## 二、Final关键字作用\n\n类防止被继承\n\n方法防止被重写\n\n变量防止被修改\n\n天生是线程安全的，而不需要额外的同步开销\n\n## 三、equals和==\n\nequals是判断两个变量或者实例指向同一个内存空间的值是不是相同，**比值**\n\n而==是判断两个变量或者实例是不是指向同一个内存空间，**比地址**\n\n引用类型放地址，基本数据类型放值\n\n## Object中的equals()和hashcode()的联系\n\nhashCode()是Object类的一个方法,返回一个哈希值.如果两个对象根据equal()方法比较相等,那么调用这两个对象中任意一个对象的hashCode()方法必须产生相同的哈希值;如果两个对象根据eqaul()方法比较不相等,那么产生的哈希值不一定相等\n\n## 四、synchronized关键字了解吗\n\nsynchronized是一种同步锁\n\n+ 修饰一个代码块，被修饰的代码块称为同步语句块，其作用的范围是大括号{}括起来的代码，作用的对象是调用这个代码块的对象；\n+ 修饰一个方法，被修饰的方法称为同步方法，其作用的范围是整个方法，作用的对象是调用这个方法的对象； \n+ 修饰一个静态的方法，其作用的范围是整个静态方法，作用的对象是这个类的所有对象；\n+ 修饰一个类，其作用的范围是synchronized后面括号括起来的部分，作用主的对象是这个类的所有对象。\n\n## 说说进程,线程之间的区别?\n\n+ 进程是程序运行和资源分配的基本单位,一个程序至少有一个进程,一个进程至少有一个线程.进程在执行过程中拥有独立的内存单元\n\n+ 线程是进程的一个实体,是cpu调度和分派的基本单位,是比程序更小的能独立运行的基本单位.同一进程中的多个线程之间可以并发执行\n\n## 线程池初始化的时候有那些参数\n\n \n\n## 线程的实现：\n\n+ 继承Thread类：必须重写run()方法，等待CPU进行调度\n+ 实现Runnable接口\n\n## 多线程与锁的使用\n\n```\nclass ThRun implements Runnable{\n   private int ticket=5;\n   public void run(){\n      for(int i=0;i<10;i++){\n         //synchronized (this){\n            if(ticket>0){\n            try{\n                  Thread.sleep(1000);\n            System.out.println(\"车票:\"+ticket--);\n            }\n            catch(InterruptedException e){\n               e.printStackTrace();\n            }\n         \n         }\n         //}\n         \n      }\n   }\n }\n public class Operation {\n    public static void main(String args[]){\n      ThRun m=new ThRun();\n      Thread t1=new Thread(m);\n      Thread t2=new Thread(m);\n      Thread t3=new Thread(m);\n      t1.start();\n      t2.start();//线程就绪状态\n      t3.start();\n    }\n }\n```\n\n## String,StringBuffer和StringBuilder区别?\n\nString是字符串常量,final修饰;StringBuffer字符串变量(线程安全);StringBuilder 字符串变量(线程不安全).此外StringBuilder和StringBuffer实现原理一样,都是基于数组扩容来实现的.a=a+b与a+=b有什么区别吗?\n\n## a=a+b与a+=b有什么区别吗?\n\n`+=`操作符会进行隐式自动类型转换,此处a+=b隐式的将加操作的结果类型强制转换为持有结果的类型,而a=a+b则不会自动\n\n## 了解泛型么?简述泛型的上界和下界?\n\n有时候希望传入的类型有一个指定的范围，从而可以进行一些特定的操作,这时候就需要通配符了?在Java中常见的通配符主要有以下几种:\n\n    <?>: 无限制通配符\n    <? extends E>: extends 关键字声明了类型的上界,表示参数化的类型可能是所指定的类型,或者是此类型的子类\n    <? super E>: super关键字声明了类型的下界,表示参数化的类型可能是指定的类型,或者是此类型的父类\n## 简单的解释一下垃圾回收?\n\nJVM中垃圾回收机制最基本的做法是分代回收.内存中的区域被划分成不同的世代,对象根据其存活的时间被保存在对应世代的区域中.一般的实现是划分成3个世代:年轻,年老和永久代.所有新生成的对象优先放在年轻代的(大对象可能被直接分配在老年代,作为一种分配担保机制),年轻代按照统计规律被分为三个区:一个Eden区，两个 Survivor区.在年轻代中经历了N次垃圾回收后仍然存活的对象,就会被放到年老代中.因此可以认为年老代中存放的都是一些生命周期较长的对象.\n\n方法区也被称为永久代,用于存储每一个java类的结构信息:比如运行时常量池,字段和方法数据,构造函数和普通方法的字节码内容以及类,实例,接口初始化时需要使用到的特殊方法等数据,根据虚拟机实现不同,GC可以选择对方法区进行回收也可以不回收.\n\n## 常见的垃圾回收算法有哪些\n\n标记-清除\n\n标记-复制\n\n标记-整理\n\n分代回收\n\n## 如何判断一个对象是否应该被回收?\n\n这就是所谓的对象存活性判断,常用的方法有两种:\n\n- 引用计数法：可能存在互相引用导致无法\n- 对象可达性分析\n\n## 产生死锁的条件\n\n1.互斥条件：一个资源每次只能被一个进程使用。\n 2.请求与保持条件：一个进程因请求资源而阻塞时，对已获得的资源保持不放。\n 3.不剥夺条件:进程已获得的资源，在末使用完之前，不能强行剥夺。\n 4.循环等待条件:若干进程之间形成一种头尾相接的循环等待资源关系。\n\n## wait()与sleep()的区别\n\n+ sleep()来自Thread类，和wait()来自Object类.调用sleep()方法的过程中，线程不会释放对象锁。而 调用 wait 方法线程会释放对象锁\n+ sleep()睡眠后不出让系统资源，wait让其他线程可以占用CPU\n+ sleep(milliseconds)需要指定一个睡眠时间，时间一到会自动唤醒.而wait()需要配合notify()或者notifyAll()使用\n\n## 怎么唤醒一个阻塞的线程\n如果线程是因为调用了wait()、sleep()或者join()方法而导致的阻塞，可以中断线程，并且通过抛出InterruptedException来唤醒它；如果线程遇到了IO阻塞，无能为力，因为IO是操作系统实现的，Java代码并没有办法直接接触到操作系统。\n\n## 什么是线程局部变量ThreadLocal\n\n线程局部变量是局限于线程内部的变量，属于线程自身所有，不在多个线程间共享。Java提供ThreadLocal类来支持线程局部变量，是一种实现线程安全的方式。但是在管理环境下（如 web 服务器）使用线程局部变量的时候要特别小心，在这种情况下，工作线程的生命周期比任何应用变量的生命周期都要长。任何线程局部变量一旦在工作完成后没有释放，Java 应用就存在内存泄露的风险。\n\n## ThreadLoal的作用是什么?\n\n简单说ThreadLocal就是一种以空间换时间的做法在每个Thread里面维护了一个ThreadLocal.ThreadLocalMap把数据进行隔离，数据不共享，自然就没有线程安全方面的问题了.\n\n## 集合\n\n## 网络\n\n## io\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"BookMark/面试/JAVA基础","published":1,"date":"2022-07-18T09:51:36.000Z","updated":"2022-09-01T10:17:51.019Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cl7ptszos002taba51gubecrd","content":"<h1><span id=\"java基础\">JAVA基础</span></h1><hr>\n<h2><span id=\"toc\">[toc]</span></h2><h2><span id=\"一-常见异常类以及继承机制\">一、常见异常类以及继承机制：</span></h2><p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/1628462559515.png\" alt=\"enter description here\"></p>\n<h2><span id=\"二-final关键字作用\">二、Final关键字作用</span></h2><p>类防止被继承</p>\n<p>方法防止被重写</p>\n<p>变量防止被修改</p>\n<p>天生是线程安全的，而不需要额外的同步开销</p>\n<h2><span id=\"三-equals和x3dx3d\">三、equals和&#x3D;&#x3D;</span></h2><p>equals是判断两个变量或者实例指向同一个内存空间的值是不是相同，<strong>比值</strong></p>\n<p>而&#x3D;&#x3D;是判断两个变量或者实例是不是指向同一个内存空间，<strong>比地址</strong></p>\n<p>引用类型放地址，基本数据类型放值</p>\n<h2><span id=\"object中的equals和hashcode的联系\">Object中的equals()和hashcode()的联系</span></h2><p>hashCode()是Object类的一个方法,返回一个哈希值.如果两个对象根据equal()方法比较相等,那么调用这两个对象中任意一个对象的hashCode()方法必须产生相同的哈希值;如果两个对象根据eqaul()方法比较不相等,那么产生的哈希值不一定相等</p>\n<h2><span id=\"四-synchronized关键字了解吗\">四、synchronized关键字了解吗</span></h2><p>synchronized是一种同步锁</p>\n<ul>\n<li>修饰一个代码块，被修饰的代码块称为同步语句块，其作用的范围是大括号{}括起来的代码，作用的对象是调用这个代码块的对象；</li>\n<li>修饰一个方法，被修饰的方法称为同步方法，其作用的范围是整个方法，作用的对象是调用这个方法的对象； </li>\n<li>修饰一个静态的方法，其作用的范围是整个静态方法，作用的对象是这个类的所有对象；</li>\n<li>修饰一个类，其作用的范围是synchronized后面括号括起来的部分，作用主的对象是这个类的所有对象。</li>\n</ul>\n<h2><span id=\"说说进程线程之间的区别\">说说进程,线程之间的区别?</span></h2><ul>\n<li><p>进程是程序运行和资源分配的基本单位,一个程序至少有一个进程,一个进程至少有一个线程.进程在执行过程中拥有独立的内存单元</p>\n</li>\n<li><p>线程是进程的一个实体,是cpu调度和分派的基本单位,是比程序更小的能独立运行的基本单位.同一进程中的多个线程之间可以并发执行</p>\n</li>\n</ul>\n<h2><span id=\"线程池初始化的时候有那些参数\">线程池初始化的时候有那些参数</span></h2><h2><span id=\"线程的实现\">线程的实现：</span></h2><ul>\n<li>继承Thread类：必须重写run()方法，等待CPU进行调度</li>\n<li>实现Runnable接口</li>\n</ul>\n<h2><span id=\"多线程与锁的使用\">多线程与锁的使用</span></h2><figure class=\"highlight haxe\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs haxe\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">ThRun</span> <span class=\"hljs-keyword\"><span class=\"hljs-keyword\">implements</span> <span class=\"hljs-type\">Runnable</span></span></span>&#123;<br>   <span class=\"hljs-keyword\">private</span> int ticket=<span class=\"hljs-number\">5</span>;<br>   <span class=\"hljs-keyword\">public</span> void run()&#123;<br>      <span class=\"hljs-keyword\">for</span>(int i=<span class=\"hljs-number\">0</span>;i&lt;<span class=\"hljs-number\">10</span>;i++)&#123;<br>         <span class=\"hljs-comment\">//synchronized (this)&#123;</span><br>            <span class=\"hljs-keyword\">if</span>(ticket&gt;<span class=\"hljs-number\">0</span>)&#123;<br>            <span class=\"hljs-keyword\">try</span>&#123;<br>                  Thread.sleep(<span class=\"hljs-number\">1000</span>);<br>            System.out.println(<span class=\"hljs-string\">&quot;车票:&quot;</span>+ticket--);<br>            &#125;<br>            <span class=\"hljs-keyword\">catch</span>(InterruptedException e)&#123;<br>               e.printStackTrace();<br>            &#125;<br>         <br>         &#125;<br>         <span class=\"hljs-comment\">//&#125;</span><br>         <br>      &#125;<br>   &#125;<br> &#125;<br> <span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Operation</span> </span>&#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> void main(<span class=\"hljs-keyword\">String</span> args[])&#123;<br>      ThRun m=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-type\">ThRun</span>();<br>      Thread t1=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-type\">Thread</span>(m);<br>      Thread t2=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-type\">Thread</span>(m);<br>      Thread t3=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-type\">Thread</span>(m);<br>      t1.start();<br>      t2.start();<span class=\"hljs-comment\">//线程就绪状态</span><br>      t3.start();<br>    &#125;<br> &#125;<br></code></pre></td></tr></table></figure>\n\n<h2><span id=\"stringstringbuffer和stringbuilder区别\">String,StringBuffer和StringBuilder区别?</span></h2><p>String是字符串常量,final修饰;StringBuffer字符串变量(线程安全);StringBuilder 字符串变量(线程不安全).此外StringBuilder和StringBuffer实现原理一样,都是基于数组扩容来实现的.a&#x3D;a+b与a+&#x3D;b有什么区别吗?</p>\n<h2><span id=\"ax3dab与ax3db有什么区别吗\">a&#x3D;a+b与a+&#x3D;b有什么区别吗?</span></h2><p><code>+=</code>操作符会进行隐式自动类型转换,此处a+&#x3D;b隐式的将加操作的结果类型强制转换为持有结果的类型,而a&#x3D;a+b则不会自动</p>\n<h2><span id=\"了解泛型么简述泛型的上界和下界\">了解泛型么?简述泛型的上界和下界?</span></h2><p>有时候希望传入的类型有一个指定的范围，从而可以进行一些特定的操作,这时候就需要通配符了?在Java中常见的通配符主要有以下几种:</p>\n<pre><code class=\"hljs\">&lt;?&gt;: 无限制通配符\n&lt;? extends E&gt;: extends 关键字声明了类型的上界,表示参数化的类型可能是所指定的类型,或者是此类型的子类\n&lt;? super E&gt;: super关键字声明了类型的下界,表示参数化的类型可能是指定的类型,或者是此类型的父类\n</code></pre>\n<h2><span id=\"简单的解释一下垃圾回收\">简单的解释一下垃圾回收?</span></h2><p>JVM中垃圾回收机制最基本的做法是分代回收.内存中的区域被划分成不同的世代,对象根据其存活的时间被保存在对应世代的区域中.一般的实现是划分成3个世代:年轻,年老和永久代.所有新生成的对象优先放在年轻代的(大对象可能被直接分配在老年代,作为一种分配担保机制),年轻代按照统计规律被分为三个区:一个Eden区，两个 Survivor区.在年轻代中经历了N次垃圾回收后仍然存活的对象,就会被放到年老代中.因此可以认为年老代中存放的都是一些生命周期较长的对象.</p>\n<p>方法区也被称为永久代,用于存储每一个java类的结构信息:比如运行时常量池,字段和方法数据,构造函数和普通方法的字节码内容以及类,实例,接口初始化时需要使用到的特殊方法等数据,根据虚拟机实现不同,GC可以选择对方法区进行回收也可以不回收.</p>\n<h2><span id=\"常见的垃圾回收算法有哪些\">常见的垃圾回收算法有哪些</span></h2><p>标记-清除</p>\n<p>标记-复制</p>\n<p>标记-整理</p>\n<p>分代回收</p>\n<h2><span id=\"如何判断一个对象是否应该被回收\">如何判断一个对象是否应该被回收?</span></h2><p>这就是所谓的对象存活性判断,常用的方法有两种:</p>\n<ul>\n<li>引用计数法：可能存在互相引用导致无法</li>\n<li>对象可达性分析</li>\n</ul>\n<h2><span id=\"产生死锁的条件\">产生死锁的条件</span></h2><p>1.互斥条件：一个资源每次只能被一个进程使用。<br> 2.请求与保持条件：一个进程因请求资源而阻塞时，对已获得的资源保持不放。<br> 3.不剥夺条件:进程已获得的资源，在末使用完之前，不能强行剥夺。<br> 4.循环等待条件:若干进程之间形成一种头尾相接的循环等待资源关系。</p>\n<h2><span id=\"wait与sleep的区别\">wait()与sleep()的区别</span></h2><ul>\n<li>sleep()来自Thread类，和wait()来自Object类.调用sleep()方法的过程中，线程不会释放对象锁。而 调用 wait 方法线程会释放对象锁</li>\n<li>sleep()睡眠后不出让系统资源，wait让其他线程可以占用CPU</li>\n<li>sleep(milliseconds)需要指定一个睡眠时间，时间一到会自动唤醒.而wait()需要配合notify()或者notifyAll()使用</li>\n</ul>\n<h2><span id=\"怎么唤醒一个阻塞的线程\">怎么唤醒一个阻塞的线程</span></h2><p>如果线程是因为调用了wait()、sleep()或者join()方法而导致的阻塞，可以中断线程，并且通过抛出InterruptedException来唤醒它；如果线程遇到了IO阻塞，无能为力，因为IO是操作系统实现的，Java代码并没有办法直接接触到操作系统。</p>\n<h2><span id=\"什么是线程局部变量threadlocal\">什么是线程局部变量ThreadLocal</span></h2><p>线程局部变量是局限于线程内部的变量，属于线程自身所有，不在多个线程间共享。Java提供ThreadLocal类来支持线程局部变量，是一种实现线程安全的方式。但是在管理环境下（如 web 服务器）使用线程局部变量的时候要特别小心，在这种情况下，工作线程的生命周期比任何应用变量的生命周期都要长。任何线程局部变量一旦在工作完成后没有释放，Java 应用就存在内存泄露的风险。</p>\n<h2><span id=\"threadloal的作用是什么\">ThreadLoal的作用是什么?</span></h2><p>简单说ThreadLocal就是一种以空间换时间的做法在每个Thread里面维护了一个ThreadLocal.ThreadLocalMap把数据进行隔离，数据不共享，自然就没有线程安全方面的问题了.</p>\n<h2><span id=\"集合\">集合</span></h2><h2><span id=\"网络\">网络</span></h2><h2><span id=\"io\">io</span></h2>","site":{"data":{}},"wordcount":3115,"excerpt":"","more":"<h1 id=\"JAVA基础\"><a href=\"#JAVA基础\" class=\"headerlink\" title=\"JAVA基础\"></a>JAVA基础</h1><hr>\n<h2 id=\"toc\"><a href=\"#toc\" class=\"headerlink\" title=\"[toc]\"></a>[toc]</h2><h2 id=\"一、常见异常类以及继承机制：\"><a href=\"#一、常见异常类以及继承机制：\" class=\"headerlink\" title=\"一、常见异常类以及继承机制：\"></a>一、常见异常类以及继承机制：</h2><p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/1628462559515.png\" alt=\"enter description here\"></p>\n<h2 id=\"二、Final关键字作用\"><a href=\"#二、Final关键字作用\" class=\"headerlink\" title=\"二、Final关键字作用\"></a>二、Final关键字作用</h2><p>类防止被继承</p>\n<p>方法防止被重写</p>\n<p>变量防止被修改</p>\n<p>天生是线程安全的，而不需要额外的同步开销</p>\n<h2 id=\"三、equals和-x3D-x3D\"><a href=\"#三、equals和-x3D-x3D\" class=\"headerlink\" title=\"三、equals和&#x3D;&#x3D;\"></a>三、equals和&#x3D;&#x3D;</h2><p>equals是判断两个变量或者实例指向同一个内存空间的值是不是相同，<strong>比值</strong></p>\n<p>而&#x3D;&#x3D;是判断两个变量或者实例是不是指向同一个内存空间，<strong>比地址</strong></p>\n<p>引用类型放地址，基本数据类型放值</p>\n<h2 id=\"Object中的equals-和hashcode-的联系\"><a href=\"#Object中的equals-和hashcode-的联系\" class=\"headerlink\" title=\"Object中的equals()和hashcode()的联系\"></a>Object中的equals()和hashcode()的联系</h2><p>hashCode()是Object类的一个方法,返回一个哈希值.如果两个对象根据equal()方法比较相等,那么调用这两个对象中任意一个对象的hashCode()方法必须产生相同的哈希值;如果两个对象根据eqaul()方法比较不相等,那么产生的哈希值不一定相等</p>\n<h2 id=\"四、synchronized关键字了解吗\"><a href=\"#四、synchronized关键字了解吗\" class=\"headerlink\" title=\"四、synchronized关键字了解吗\"></a>四、synchronized关键字了解吗</h2><p>synchronized是一种同步锁</p>\n<ul>\n<li>修饰一个代码块，被修饰的代码块称为同步语句块，其作用的范围是大括号{}括起来的代码，作用的对象是调用这个代码块的对象；</li>\n<li>修饰一个方法，被修饰的方法称为同步方法，其作用的范围是整个方法，作用的对象是调用这个方法的对象； </li>\n<li>修饰一个静态的方法，其作用的范围是整个静态方法，作用的对象是这个类的所有对象；</li>\n<li>修饰一个类，其作用的范围是synchronized后面括号括起来的部分，作用主的对象是这个类的所有对象。</li>\n</ul>\n<h2 id=\"说说进程-线程之间的区别\"><a href=\"#说说进程-线程之间的区别\" class=\"headerlink\" title=\"说说进程,线程之间的区别?\"></a>说说进程,线程之间的区别?</h2><ul>\n<li><p>进程是程序运行和资源分配的基本单位,一个程序至少有一个进程,一个进程至少有一个线程.进程在执行过程中拥有独立的内存单元</p>\n</li>\n<li><p>线程是进程的一个实体,是cpu调度和分派的基本单位,是比程序更小的能独立运行的基本单位.同一进程中的多个线程之间可以并发执行</p>\n</li>\n</ul>\n<h2 id=\"线程池初始化的时候有那些参数\"><a href=\"#线程池初始化的时候有那些参数\" class=\"headerlink\" title=\"线程池初始化的时候有那些参数\"></a>线程池初始化的时候有那些参数</h2><h2 id=\"线程的实现：\"><a href=\"#线程的实现：\" class=\"headerlink\" title=\"线程的实现：\"></a>线程的实现：</h2><ul>\n<li>继承Thread类：必须重写run()方法，等待CPU进行调度</li>\n<li>实现Runnable接口</li>\n</ul>\n<h2 id=\"多线程与锁的使用\"><a href=\"#多线程与锁的使用\" class=\"headerlink\" title=\"多线程与锁的使用\"></a>多线程与锁的使用</h2><figure class=\"highlight haxe\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs haxe\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">ThRun</span> <span class=\"hljs-keyword\"><span class=\"hljs-keyword\">implements</span> <span class=\"hljs-type\">Runnable</span></span></span>&#123;<br>   <span class=\"hljs-keyword\">private</span> int ticket=<span class=\"hljs-number\">5</span>;<br>   <span class=\"hljs-keyword\">public</span> void run()&#123;<br>      <span class=\"hljs-keyword\">for</span>(int i=<span class=\"hljs-number\">0</span>;i&lt;<span class=\"hljs-number\">10</span>;i++)&#123;<br>         <span class=\"hljs-comment\">//synchronized (this)&#123;</span><br>            <span class=\"hljs-keyword\">if</span>(ticket&gt;<span class=\"hljs-number\">0</span>)&#123;<br>            <span class=\"hljs-keyword\">try</span>&#123;<br>                  Thread.sleep(<span class=\"hljs-number\">1000</span>);<br>            System.out.println(<span class=\"hljs-string\">&quot;车票:&quot;</span>+ticket--);<br>            &#125;<br>            <span class=\"hljs-keyword\">catch</span>(InterruptedException e)&#123;<br>               e.printStackTrace();<br>            &#125;<br>         <br>         &#125;<br>         <span class=\"hljs-comment\">//&#125;</span><br>         <br>      &#125;<br>   &#125;<br> &#125;<br> <span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Operation</span> </span>&#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> void main(<span class=\"hljs-keyword\">String</span> args[])&#123;<br>      ThRun m=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-type\">ThRun</span>();<br>      Thread t1=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-type\">Thread</span>(m);<br>      Thread t2=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-type\">Thread</span>(m);<br>      Thread t3=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-type\">Thread</span>(m);<br>      t1.start();<br>      t2.start();<span class=\"hljs-comment\">//线程就绪状态</span><br>      t3.start();<br>    &#125;<br> &#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"String-StringBuffer和StringBuilder区别\"><a href=\"#String-StringBuffer和StringBuilder区别\" class=\"headerlink\" title=\"String,StringBuffer和StringBuilder区别?\"></a>String,StringBuffer和StringBuilder区别?</h2><p>String是字符串常量,final修饰;StringBuffer字符串变量(线程安全);StringBuilder 字符串变量(线程不安全).此外StringBuilder和StringBuffer实现原理一样,都是基于数组扩容来实现的.a&#x3D;a+b与a+&#x3D;b有什么区别吗?</p>\n<h2 id=\"a-x3D-a-b与a-x3D-b有什么区别吗\"><a href=\"#a-x3D-a-b与a-x3D-b有什么区别吗\" class=\"headerlink\" title=\"a&#x3D;a+b与a+&#x3D;b有什么区别吗?\"></a>a&#x3D;a+b与a+&#x3D;b有什么区别吗?</h2><p><code>+=</code>操作符会进行隐式自动类型转换,此处a+&#x3D;b隐式的将加操作的结果类型强制转换为持有结果的类型,而a&#x3D;a+b则不会自动</p>\n<h2 id=\"了解泛型么-简述泛型的上界和下界\"><a href=\"#了解泛型么-简述泛型的上界和下界\" class=\"headerlink\" title=\"了解泛型么?简述泛型的上界和下界?\"></a>了解泛型么?简述泛型的上界和下界?</h2><p>有时候希望传入的类型有一个指定的范围，从而可以进行一些特定的操作,这时候就需要通配符了?在Java中常见的通配符主要有以下几种:</p>\n<pre><code>&lt;?&gt;: 无限制通配符\n&lt;? extends E&gt;: extends 关键字声明了类型的上界,表示参数化的类型可能是所指定的类型,或者是此类型的子类\n&lt;? super E&gt;: super关键字声明了类型的下界,表示参数化的类型可能是指定的类型,或者是此类型的父类\n</code></pre>\n<h2 id=\"简单的解释一下垃圾回收\"><a href=\"#简单的解释一下垃圾回收\" class=\"headerlink\" title=\"简单的解释一下垃圾回收?\"></a>简单的解释一下垃圾回收?</h2><p>JVM中垃圾回收机制最基本的做法是分代回收.内存中的区域被划分成不同的世代,对象根据其存活的时间被保存在对应世代的区域中.一般的实现是划分成3个世代:年轻,年老和永久代.所有新生成的对象优先放在年轻代的(大对象可能被直接分配在老年代,作为一种分配担保机制),年轻代按照统计规律被分为三个区:一个Eden区，两个 Survivor区.在年轻代中经历了N次垃圾回收后仍然存活的对象,就会被放到年老代中.因此可以认为年老代中存放的都是一些生命周期较长的对象.</p>\n<p>方法区也被称为永久代,用于存储每一个java类的结构信息:比如运行时常量池,字段和方法数据,构造函数和普通方法的字节码内容以及类,实例,接口初始化时需要使用到的特殊方法等数据,根据虚拟机实现不同,GC可以选择对方法区进行回收也可以不回收.</p>\n<h2 id=\"常见的垃圾回收算法有哪些\"><a href=\"#常见的垃圾回收算法有哪些\" class=\"headerlink\" title=\"常见的垃圾回收算法有哪些\"></a>常见的垃圾回收算法有哪些</h2><p>标记-清除</p>\n<p>标记-复制</p>\n<p>标记-整理</p>\n<p>分代回收</p>\n<h2 id=\"如何判断一个对象是否应该被回收\"><a href=\"#如何判断一个对象是否应该被回收\" class=\"headerlink\" title=\"如何判断一个对象是否应该被回收?\"></a>如何判断一个对象是否应该被回收?</h2><p>这就是所谓的对象存活性判断,常用的方法有两种:</p>\n<ul>\n<li>引用计数法：可能存在互相引用导致无法</li>\n<li>对象可达性分析</li>\n</ul>\n<h2 id=\"产生死锁的条件\"><a href=\"#产生死锁的条件\" class=\"headerlink\" title=\"产生死锁的条件\"></a>产生死锁的条件</h2><p>1.互斥条件：一个资源每次只能被一个进程使用。<br> 2.请求与保持条件：一个进程因请求资源而阻塞时，对已获得的资源保持不放。<br> 3.不剥夺条件:进程已获得的资源，在末使用完之前，不能强行剥夺。<br> 4.循环等待条件:若干进程之间形成一种头尾相接的循环等待资源关系。</p>\n<h2 id=\"wait-与sleep-的区别\"><a href=\"#wait-与sleep-的区别\" class=\"headerlink\" title=\"wait()与sleep()的区别\"></a>wait()与sleep()的区别</h2><ul>\n<li>sleep()来自Thread类，和wait()来自Object类.调用sleep()方法的过程中，线程不会释放对象锁。而 调用 wait 方法线程会释放对象锁</li>\n<li>sleep()睡眠后不出让系统资源，wait让其他线程可以占用CPU</li>\n<li>sleep(milliseconds)需要指定一个睡眠时间，时间一到会自动唤醒.而wait()需要配合notify()或者notifyAll()使用</li>\n</ul>\n<h2 id=\"怎么唤醒一个阻塞的线程\"><a href=\"#怎么唤醒一个阻塞的线程\" class=\"headerlink\" title=\"怎么唤醒一个阻塞的线程\"></a>怎么唤醒一个阻塞的线程</h2><p>如果线程是因为调用了wait()、sleep()或者join()方法而导致的阻塞，可以中断线程，并且通过抛出InterruptedException来唤醒它；如果线程遇到了IO阻塞，无能为力，因为IO是操作系统实现的，Java代码并没有办法直接接触到操作系统。</p>\n<h2 id=\"什么是线程局部变量ThreadLocal\"><a href=\"#什么是线程局部变量ThreadLocal\" class=\"headerlink\" title=\"什么是线程局部变量ThreadLocal\"></a>什么是线程局部变量ThreadLocal</h2><p>线程局部变量是局限于线程内部的变量，属于线程自身所有，不在多个线程间共享。Java提供ThreadLocal类来支持线程局部变量，是一种实现线程安全的方式。但是在管理环境下（如 web 服务器）使用线程局部变量的时候要特别小心，在这种情况下，工作线程的生命周期比任何应用变量的生命周期都要长。任何线程局部变量一旦在工作完成后没有释放，Java 应用就存在内存泄露的风险。</p>\n<h2 id=\"ThreadLoal的作用是什么\"><a href=\"#ThreadLoal的作用是什么\" class=\"headerlink\" title=\"ThreadLoal的作用是什么?\"></a>ThreadLoal的作用是什么?</h2><p>简单说ThreadLocal就是一种以空间换时间的做法在每个Thread里面维护了一个ThreadLocal.ThreadLocalMap把数据进行隔离，数据不共享，自然就没有线程安全方面的问题了.</p>\n<h2 id=\"集合\"><a href=\"#集合\" class=\"headerlink\" title=\"集合\"></a>集合</h2><h2 id=\"网络\"><a href=\"#网络\" class=\"headerlink\" title=\"网络\"></a>网络</h2><h2 id=\"io\"><a href=\"#io\" class=\"headerlink\" title=\"io\"></a>io</h2>"},{"_content":"[toc]\n\n\n\n# 操作系统与计算机网络 \n\n![image-20220721145300660](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721145300660.png)\n\n## 进程与线程\n\n+ 首先需要掌握进程与线程的区别和联系：\n\n    进程是系统资源分配的最小单位，线程是程序执行的最小单位；\n    \n    进程使用独立的数据空间，而线程共享进程的数据空间。\n\n+ 线程调度，简单了解线程的几种调度算法就可以了。比如时间片轮转调度、先来先服务调度、优先级调度、多级反馈队列调度以及高响应比优先调度。\n\n+ 在进程与线程部分还有一个比较常见的考察点，就是进程间通信，也就是 IPC。这部分在面试中间件研发的相关职位时经常会考察。如上面知识点汇总图中所示，需要了解这 6 种进程通信方式的原理与适用场景。例如，进程间数据共享的场景可以使用共享内存；进程间数据交换的场景可以使用 Unix Socket 或者消息队列。\n\n## Linux 常用命令\n\nAWK、top、netstat、grep\n\n# 计算机网络知识点\n\n![image-20220721145310446](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721145310446.png)\n\n## TCP/IP协议族四层网络模型\n\n从协议的角度对网络传输做出的模型分类，是基于网络7层模型的。\n\n1）数据链路层 ：代表协议ARP，可解析IP为MAC地址\n\n2）网络层：代表协议IP，32位ip地址\n\n3）传输层：代表协议TCP/UDP，建立网络连接，进行数据传输\n\n4）应用层：代表协议FTP文件传输协议/DNS域名系统/HTTP网络数据\n\n## 7层模型\n\n第一层 物理层\n\n第二层 数据链路层\n\n第三层 网络层\n\n第四层 传输层\n\n第五层 会话层\n\n第六层 表示层\n\n第七层 应用层\n\n##  TCP 协议特点\n\nTCP 是传输层协议，对应 OSI 网络模型的第四层传输层，特点如下。\n\n    TCP 协议是基于链接的，也就是传输数据前需要先建立好链接，然后再进行传输。\n    \n    TCP 链接一旦建立，就可以在链接上进行双向的通信。\n    \n    TCP 的传输是基于字节流而不是报文\n    \n    TCP 还能提供流量控制能力，通过滑动窗口来控制数据的发送速率。\n    \n    TCP 协议还考虑到了网络问题可能会导致大量重传，进而导致网络情况进一步恶化，因此 TCP 协议还提供拥塞控制。TCP 处理拥塞控制主要用到了慢启动、拥塞避免、拥塞发生、快速恢复四个算法\n\n## 三次握手建连\n\n![image-20220721145326560](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721145326560.png)\n\n+ 简述：初始客户端状态syn_sent，服务端状态listen；客户端发送syn，服务端收到后返回ack和syn，服务端状态syn_rcvd，客户端收到后状态变为established。客户端返回ack，服务端再次接收，服务端更新状态为established。\n\n+ SYN 洪水攻击发生的原因，就是 Server 端收到 Client 端的 SYN 请求后，发送了 ACK 和 SYN，但是 Client 端不进行回复，导致 Server 端大量的链接处在 SYN_RCVD 状态，进而影响其他正常请求的建连。可以设置 tcp_synack_retries = 0 加快半链接的回收速度，或者调大 tcp_max_syn_backlog 来应对少量的 SYN 洪水攻击\n\n## 四次挥手断连\n\n![image-20220721145337479](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721145337479.png)\n\n+ 简述：客户端，服务端初始状态都为established；客户端发送fin到服务端，服务端收到返回ack，进入close_wait状态。客户端收到ack，状态变为fin_wait_2状态；等待服务端发送数据结束，再次向客户端发送fin，服务端状态变为last_ack，客户端收到后状态变为time_wait，等待 2 倍的最大报文段生存时间，来保证链接的可靠关闭，客户端状态变为closed；客户端返回ack，服务端收到状态变为closed；\n\n+ 这里面试官可能会问为什么需要等待 2 倍最大报文段生存时间之后再关闭链接，原因有两个：\n\n      保证 TCP 协议的全双工连接能够可靠关闭；\n      \n      保证这次连接的重复数据段从网络中消失，防止端口被重用时可能产生数据混淆。\n\n# 语言特性与设计模式\n\n## 设计模式知识点\n\n### 设计模式分为 3 大类型共 23 种\n\n创建型：工厂方法模式、抽象工厂模式、单例模式、建造者模式、原型模式。\n\n结构型：适配器模式、装饰器模式、代理模式、外观模式、桥接模式、组合模式、享元模式。\n\n行为型：策略模式、模板方法模式、观察者模式、迭代子模式、责任链模式、命令模式、备忘录模式、状态模式、访问者模式、中介者模式、解释器模式。\n\n### 最常见的设计模式\n\n+ 单例模式有几种实现方式\n  + 第一种是静态初始化方式，也叫作饿汉方式。实现的思路就是在类初始化时完成单例实例的创建，因此不会产生并发问题，在这种方式下不管是否会使用到这个单例，都会创建这个单例。\n  + 第二种实现方式是双重检查，也叫作懒汉方式，只有在真正用到这个单例实例的时候才会去创建，如果没有使用就不会创建。这个方式必然会面对多个线程同时使用实例时的并发问题。为了解决并发访问问题，通过 synchronized 或者 lock 进行双重检查，保证只有一个线程能够创建实例。这里要注意内存可见性引起的并发问题，必须使用 volatile 关键字修饰单例变量。\n  + 第三种是单例注册表方式，Spring 中 Bean 的单例模式就是通过单例注册表方式实现的。\n\n+ 单例模式、工厂模式、代理模式、构造者模式、责任链模式、适配器模式、观察者模式等\n\n+ 场景：\n  + 单例模式：数据源链接信息，spring中bean注入\n  + 工厂模式：mybatis中sqlsession工厂，spring中不同的bean工厂\n  + 代理模式：spring中的aop思想实现，jdk动态代理和cglib动态代理\n  + 适配器模式：不同适配器将 SLF4J 与 Log4j 等实现框架进行适配\n  + 构造者模式：适用于一个对象有很多复杂的属性，mybatis中的sqlsessionFactory.builder ()方法\n\n## Java 语言特性知识点\n\n![image-20220721145348180](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721145348180.png)\n\nJava 的集合类中部分需要重点了解类的实现。例如，HashMap、TreeMap 是如何实现的等。\n\n \n\n动态代理与反射是 Java 语言的特色，需要掌握动态代理与反射的使用场景，例如在 ORM 框架中会大量使用代理类。而 RPC 调用时会使用到反射机制调用实现类方法。\n\n \n\nJava 基础数据类型也常常会在面试中被问到，例如各种数据类型占用多大的内存空间、数据类型的自动转型与强制转型、基础数据类型与 wrapper 数据类型的自动装箱与拆箱等。\n\n \n\nJava 对对象的引用分为强引用、软引用、弱引用、虚引用四种，这些引用在 GC 时的处理策略不同，强引用不会被 GC 回收；软引用内存空间不足时会被 GC 回收；弱引用则在每次 GC 时被回收；虚引用必须和引用队列联合使用，主要用于跟踪一个对象被垃圾回收的过程。\n\n \n\nJava 的异常处理机制就是 try-catch-finally 机制，需要知道异常时在 try catch 中的处理流程；需要了解 Error 和 Exception 的区别。\n\n\n\n## 详解 Map\n\n![image-20220721145357468](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721145357468.png)\n\nHashMap\n\n    先来看 HashMap 的实现，简单来说，Java 的 HashMap 就是数组加链表实现的，数组中的每一项是一个链表。通过计算存入对象的 HashCode，来计算对象在数组中要存入的位置，用链表来解决散列冲突，。\n    \n    除了实现的方式，我们还需要知道填充因子的作用与 Map 扩容时的 rehash 机制，需要知道 HashMap 的容量都是 2 的幂次方，是因为可以通过按位与操作来计算余数，比求模要快。另外需要知道 HashMap 是非线程安全的，在多线程 put 的情况下，有可能在容量超过填充因子时进行 rehash，因为 HashMap 为了避免尾部遍历，在链表插入元素时使用头插法，多线程的场景下有可能会产生死循环。\n\nConcurrentHashMap    \n\n    从 HashMap 的非线程安全，面试官很自然地就会问到线程安全的 ConcurrentHashMap。ConcurrentHashMap 采用分段锁的思想来降低并发场景下的锁定发生频率，在 JDK1.7 与 1.8 中的实现差异非常大，1.7 中使用 Segment 进行分段加锁，降低并发锁定；1.8 中使用 CAS 自旋锁的乐观锁来提高性能，但是在并发度较高时性能会比较一般。另外 1.8 中的 ConcurrentHashMap 引入了红黑树来解决 Hash 冲突时链表顺序查找的问题。红黑树的启用条件与链表的长度和 Map 的总容量有关，默认是链表大于 8 且容量大于 64 时转为红黑树。\n\n##  Java 版本特性\n\n![image-20210822213310000](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20210822213310000.png)\n\n在 8 版本中 Java 增加了对 lambda 表达式的支持，使 Java 代码的编写可以更简洁，也更方便支持并行计算。并且提供了很多 Stream 流式处理的 API。8 版本还支持了方法引用的能力，可以进一步简化 lambda 表达式的写法。\n\n11 版本是 Java 最新的长期支持版本，也将会是未来一段时间的主要版本，11 版本中提供的最激动人心的功能是 ZGC 这个新的垃圾回收器，ZGC 为大内存堆设计，有着非常强悍的性能，能够实现 10ms 以下的 GC 暂停时间。关于 ZGC 会在下一课中进一步介绍。除此之外，11 版本对字符串处理 API 进行了增强，提供了字符复制等功能。11 版本还内置了 HttpClient。\n\n# 深入浅出JVM \n\n![image-20220721145422593](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721145422593.png)\n\n## JVM 内存模型\n\n![image-20220721145430895](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721145430895.png)\n\n    栈也叫方法栈，是线程私有的，线程在执行每个方法时都会同时创建一个栈帧，用来存储局部变量表、操作栈、动态链接、方法出口等信息。调用方法时执行入栈，方法返回时执行出栈。\n    \n    本地方法栈与栈类似，也是用来保存线程执行方法时的信息，不同的是，执行 Java 方法使用栈，而执行 native 方法使用本地方法栈。\n    \n    程序计数器保存着当前线程所执行的字节码位置，每个线程工作时都有一个独立的计数器。程序计数器为执行 Java 方法服务，执行 native 方法时，程序计数器为空。\n    \n       栈、本地方法栈、程序计数器这三个部分都是线程独占的。\n    \n    堆是 JVM 管理的内存中最大的一块，堆被所有线程共享，目的是为了存放对象实例，几乎所有的对象实例都在这里分配。当堆内存没有可用的空间时，会抛出 OOM 异常。根据对象存活的周期不同，JVM 把堆内存进行分代管理，由垃圾回收器来进行对象的回收管理。\n    \n    方法区也是各个线程共享的内存区域，又叫非堆区。用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据，JDK 1.7 中的永久代和 JDK 1.8 中的 Metaspace 都是方法区的一种实现。\n\n## 类加载机制\n\n类的加载指将编译好的 Class 类文件中的字节码读入内存中，将其放在方法区内并创建对应的 Class 对象。类的加载分为加载、链接、初始化，其中链接又包括验证、准备、解析三步。如下图所示。\n\n![image-20220721145441299](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721145441299.png)\n\n    加载是文件到内存的过程。通过类的完全限定名查找此类字节码文件，并利用字节码文件创建一个 Class 对象。\n    \n    验证是对类文件内容验证。目的在于确保 Class 文件符合当前虚拟机要求，不会危害虚拟机自身安全。主要包括四种：文件格式验证，元数据验证，字节码验证，符号引用验证。\n    \n    准备阶段是进行内存分配。为类变量也就是类中由 static 修饰的变量分配内存，并且设置初始值。这里要注意，初始值是 0 或者 null，而不是代码中设置的具体值，代码中设置的值是在初始化阶段完成的。另外这里也不包含用 final 修饰的静态变量，因为 final 在编译的时候就会分配。\n    \n    解析主要是解析字段、接口、方法。主要是将常量池中的符号引用替换为直接引用的过程。直接引用就是直接指向目标的指针、相对偏移量等。\n    \n    初始化，主要完成静态块执行与静态变量的赋值。这是类加载最后阶段，若被加载类的父类没有初始化，则先对父类进行初始化。\n    \n       只有对类主动使用时，才会进行初始化，初始化的触发条件包括在创建类的实例时、访问类的静态方法或者静态变量时、Class.forName() 反射类时、或者某个子类被初始化时。\n\n## 类加载器\n\n![image-20220721145450718](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721145450718.png)\n\n+ 如上图所示，Java 自带的三种类加载器分别是：**BootStrap 启动类加载器**、**扩展类加载器**和**应用加载器**（也叫系统加载器）。图右边的桔黄色文字表示各类加载器对应的加载目录。启动类加载器加载 java home 中 lib 目录下的类，扩展加载器负责加载 ext 目录下的类，应用加载器加载 classpath 指定目录下的类。除此之外，可以自定义类加载器。\n\n+ Java 的类加载使用双亲委派模式，即一个类加载器在加载类时，先把这个请求委托给自己的父类加载器去执行，如果父类加载器还存在父类加载器，就继续向上委托，直到顶层的启动类加载器，如上图中蓝色向上的箭头。如果父类加载器能够完成类加载，就成功返回，如果父类加载器无法完成加载，那么子加载器才会尝试自己去加载。如图中的桔黄色向下的箭头。\n\n+ 这种双亲委派模式的好处，可以避免类的重复加载，另外也避免了 Java 的核心 API 被篡改。\n\n## GC分代回收\n\n![image-20220721145500877](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721145500877.png)\n\n根据年轻代与老年代的特点，JVM 提供了不同的垃圾回收算法。垃圾回收算法按类型可以分为**引用计数法**、**复制法**和**标记清除法**。\n\n    引用计数法是通过对象被引用的次数来确定对象是否被使用，缺点是无法解决循环引用的问题。\n    \n    复制算法需要 from 和 to 两块相同大小的内存空间，对象分配时只在 from 块中进行，回收时把存活对象复制到 to 块中，并清空 from 块，然后交换两块的分工，即把 from 块作为 to 块，把 to 块作为 from 块。缺点是内存使用率较低。\n    \n    标记清除算法分为标记对象和清除不在使用的对象两个阶段，标记清除算法的缺点是会产生内存碎片。\n    \n    JVM 中提供的年轻代回收算法 Serial、ParNew、Parallel Scavenge 都是复制算法，而 CMS、G1、ZGC 都属于标记清除算法。\n\n### CMS 算法如下图所示\n\n![image-20220721145510923](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721145510923.png)\n\n第一个阶段是初始标记，这个阶段会 stop the world，标记的对象只是从 root 集最直接可达的对象；\n\n第二个阶段是并发标记，这时 GC 线程和应用线程并发执行。主要是标记可达的对象；\n\n第三个阶段是重新标记阶段，这个阶段是第二个 stop the world 的阶段，停顿时间比并发标记要小很多，但比初始标记稍长，主要对对象进行重新扫描并标记；\n\n第四个阶段是并发清理阶段，进行并发的垃圾清理；\n\n最后一个阶段是并发重置阶段，为下一次 GC 重置相关数据结构。\n\n# 并发与多线程\n\n![image-20220721145520746](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721145520746.png)\n\n## 线程状态转换\n\n线程是 JVM 执行任务的最小单元，理解线程的状态转换是理解后续多线程问题的基础。在 JVM 运行中，线程一共有 NEW、RUNNABLE、BLOCKED、WAITING、TIMED_WAITING、TERMINATED 六种状态，这些状态对应 Thread.State 枚举类中的状态。\n\n1. 当创建一个线程时，线程处在 NEW 状态，运行 Thread 的 start 方法后，线程进入 RUNNABLE 可运行状态。\n\n2. 这时，所有可运行状态的线程并不能马上运行，而是需要先进入就绪状态等待线程调度，如图中间所示的 READY 状态。在获取 CPU 后才能进入运行状态，如图中所示的 RUNNING。运行状态可以随着不同条件转换成除 NEW 以外的其他状态。\n\n3. 在运行态中的线程进入 synchronized 同步块或者同步方法时，如果获取锁失败，则会进入到 BLOCKED 状态。当获取到锁后，会从 BLOCKED 状态恢复到就绪状态。\n\n4. 运行中的线程还会进入等待状态，这两个等待一个是有超时时间的等待，例如调用 Object.wait、Thread.join 等；另外一个是无超时的等待，例如调用 Thread.join 或者 Locksupport.park 等。这两种等待都可以通过 notify 或 unpark 结束等待状态并恢复到就绪状态。\n\n5. 线程运行完成结束时，线程状态变成 TERMINATED。\n\n##  CAS 与 ABA 问题\n\n线程的同步与互斥，解决线程同步与互斥的主要方式是 CAS、synchronized 和 lock。\n\n### CAS\n\nCAS 是乐观锁的一种实现方式，是一种轻量级锁，JUC 中很多工具类的实现就是基于 CAS 的。CAS 操作的流程如下图所示，线程在读取数据时不进行加锁，在准备写回数据时，比较原值是否修改，若未被其他线程修改则写回，若已被修改，则重新执行读取流程。这是一种乐观策略，认为并发操作并不总会发生。\n\n![image-20220721145530649](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721145530649.png)\n\n### ABA\n\nCAS 容易出现 ABA 问题，就是如下面时序图所示，如果线程 T1 读取值 A 之后，发生两次写入，先由线程 T2 写回了 B，又由 T3 写回了 A，此时 T1 在写回比较时，值还是 A，就无法判断是否发生过修改。\n\n## synchronized\n\nsynchronized 是最常用的线程同步手段之一，它是如何保证同一时刻只有一个线程可以进入临界区呢？\n\n![image-20220721145540969](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721145540969.png)\n\nsynchronized 对对象进行加锁，在 JVM 中，对象在内存中分为三块区域：对象头、实例数据和对齐填充。在对象头中保存了锁标志位和指向 monitor 对象的起始地址，如下图所示，右侧就是对象对应的 Monitor 对象。当 Monitor 被某个线程持有后，就会处于锁定状态，如图中的 Owner 部分，会指向持有 Monitor 对象的线程。另外 Monitor 中还有两个队列，用来存放进入及等待获取锁的线程。\n\n\nsynchronized 应用在方法上时，在字节码中是通过方法的 ACC_SYNCHRONIZED 标志来实现的，synchronized 应用在同步块上时，在字节码中是通过 monitorenter 和 monitorexit 实现的。\n\n \n\n针对 synchronized 获取锁的方式，JVM 使用了锁升级的优化方式，就是先使用偏向锁优先同一线程然后再次获取锁，如果失败，就升级为 CAS 轻量级锁，如果失败就会短暂自旋，防止线程被系统挂起。最后如果以上都失败就升级为重量级锁。\n\n## 线程池\n\n线程池通过复用线程，避免线程频繁地创建和销毁。Java 的 Executors 工具类中提供了 5 种类型的线程池创建方法\n\n![image-20220721145549875](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721145549875.png)\n\n## 线程池初始化的时候有那些参数\n\n![image-20220721145604527](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721145604527.png)\n\n第一个参数设置核心线程数。默认情况下核心线程会一直存活。\n\n第二个参数设置最大线程数。决定线程池最多可以创建的多少线程。\n\n第三个参数和第四个参数用来设置线程空闲时间，和空闲时间的单位，当线程闲置超过空闲时间就会被销毁。可以通过 allowCoreThreadTimeOut 方法来允许核心线程被回收。\n\n第五个参数设置缓冲队列，上图中左下方的三个队列是设置线程池时常使用的缓冲队列。其中 ArrayBlockingQueue 是一个有界队列，就是指队列有最大容量限制。LinkedBlockingQueue 是无界队列，就是队列不限制容量。最后一个是 SynchronousQueue，是一个同步队列，内部没有缓冲区。\n\n第六个参数设置线程池工厂方法，线程工厂用来创建新线程，可以用来对线程的一些属性进行定制，例如线程的 group、线程名、优先级等。一般使用默认工厂类即可。\n\n第七个参数设置线程池满时的拒绝策略。如上图右下方所示有四种策略，Abort 策略在线程池满后，提交新任务时会抛出 RejectedExecutionException，这个也是默认的拒绝策略。Discard 策略会在提交失败时对任务直接进行丢弃。CallerRuns 策略会在提交失败时，由提交任务的线程直接执行提交的任务。DiscardOldest 策略会丢弃最早提交的任务。\n\n## 线程池执行流程\n\n![image-20220721145615170](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721145615170.png)\n\n向线程池提交任务时，会首先判断线程池中的线程数是否大于设置的核心线程数，如果不大于，就创建一个核心线程来执行任务。\n\n如果大于核心线程数，就会判断缓冲队列是否满了，如果没有满，则放入队列，等待线程空闲时执行任务。\n\n如果队列已经满了，则判断是否达到了线程池设置的最大线程数，如果没有达到，就创建新线程来执行任务。\n\n如果已经达到了最大线程数，则执行指定的拒绝策略。\n\n# 数据结构与算法\n\n![image-20220721145623944](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721145623944.png)\n\n## 二叉树\n\n二叉搜索树满足这样的条件，每个节点包含一个值，每个节点至多有两个子树。每个节点左子树节点的值都小于自身的值，每个节点右子树节点的值都大于自身的值。二叉树的查询时间复杂度是 log(N)，但是随着不断的插入、删除节点，二叉树的树高可能会不断变大，当一个二叉搜索树所有节点都只有左子树或者都只有右子树时，其查找性能就退化成线性的了。\n\n### 平衡二叉树\n\n平衡二叉树可以解决上面这个问题，平衡二叉树保证每个节点左右子树的高度差的绝对值不超过 1，例如 AVL 树。AVL 树是严格的平衡二叉树，插入或删除数据时可能经常需要旋转来保持平衡，比较适合插入、删除比较少的场景。\n\n### 红黑树\n\n红黑树是一种更加实用的非严格的平衡二叉树。红黑树更关注局部平衡而非整体平衡，确保没有一条路径会比其他路径长出 2 倍，所以是接近平衡的，但减少了许多不必要的旋转操作，更加实用。前面提到过，Java 8 的 HashMap 中就应用了红黑树来解决散列冲突时的查找问题。TreeMap 也是通过红黑树来保证有序性的。\n\n\n\n![image-20220721145633106](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721145633106.png)\n\n每个节点不是红色就是黑色。\n\n根节点是黑色。\n\n每个叶子节点都是黑色的空节点，如图中的黑色三角。\n\n红色节点的两个子节点都是黑色的。\n\n任意节点到其叶节点的每条路径上，包含相同数量的黑色节点。   \n\n## B 树\n\nB 树是一种多叉树，也叫多路搜索树。B 树中每个节点可以存储多个元素，非常适合用在文件索引上，可以有效减少磁盘 IO 次数。B 树中所有结点的最大子节点数称为 B 树的阶，如下图所示是一棵 3 阶 B 树\n\n![image-20220721145639957](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721145639957.png)\n\n非叶节点最多有 m 棵子树；\n\n根节点最少有两个子树，非根、非叶节点最少有 m/2 棵子树；\n\n非叶子结点中保存的关键字个数，等于该节点子树个数−1，就是说一个节点如果有 3棵子树，那么其中必定包含 2 个关键字；\n\n### B+ 树\n\n![image-20220721145647121](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721145647121.png)\n\nB+ 树的定义与 B 树基本相同，除了下面这几个特点。\n\n    节点中的关键字与子树数目相同，比如节点中有 3 个关键字，那么就有 3 棵子树；\n    \n    关键字对应的子树中的节点都大于或等于关键字，子树中包括关键字自身；\n    \n    所有关键字都出现在叶子节点中；\n    \n    所有叶子节点都有指向下一个叶子节点的指针。\n    \n    与 B 树不同，B+ 树在搜索时不会在非叶子节点命中，一定会查询到叶子节点；另外一个，叶子节点相当于数据存储层，保存关键字对应的数据，而非叶子节点只保存关键字和指向叶节点的指针，不保存关键字对应的数据，所以同样数量关键字的非叶节点，B+ 树比 B 树要小很多。\n\n### B+ 树更适合索引系统，MySQL 数据库的索引就提供了 B+ 树实现。\n\n原因有三个：\n\n+ 由于叶节点之间有指针相连，B+ 树更适合范围检索；\n\n+ 由于非页节点只保存关键字和指针，同样大小非叶节点，B+ 树可以容纳更多的关键字，可以降低树高，查询时磁盘读写代价更低；\n\n+ B+ 树的查询效率比较稳定。任何关键字的查找必须走一条从根结点到叶子结点的路，所有关键字查询的路径长度相同，效率相当。\n\n# Git 常用命令\n\n# spring框架\n\n![image-20220721145702793](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721145702793.png)\n\n图中红框框住的是比较重要的组件，Core 组件是 Spring 所有组件的核心；Bean 组件和 Context 组件我刚才提到了，是实现 IoC 和依赖注入的基础；AOP 组件用来实现面向切面编程；Web 组件包括 SpringMVC，是 Web 服务的控制层实现。\n\n**关于 AOP 还需要了解一下对应的 Aspect、pointcut、advice 等注解和具体使用方式。**\n\n## 核心接口/类\n\n再来看图右上方需要重点掌握的核心类。\n\n    ApplicationContext 保存了 IoC 的整个应用上下文，可以通过其中的 BeanFactory 获取到任意到 Bean；\n    \n    BeanFactory 主要的作用是根据 Bean Definition 来创建具体的 Bean；\n    \n    BeanWrapper 是对 Bean 的包装，一般情况下是在 Spring IoC 内部使用，提供了访问 Bean 的属性值、属性编辑器注册、类型转换等功能，方便 IoC 容器用统一的方式来访问 Bean 的属性；\n    \n    FactoryBean 通过 getObject 方法返回实际的 Bean 对象，例如 Motan 框架中 referer 对 service 的动态代理就是通过 FactoryBean 来实现的。\n\n## Scope\n\nBean 的 Scope 是指 Bean 的作用域，默认情况下是单例模式，这也是使用最多的一种方式；多例模式，即每次从 BeanFactory 中获取 Bean 都会创建一个新的 Bean。Request、Session、Global-session 是在 Web 服务中使用的 Scope。\n\n+ Request 每次请求都创建一个实例；\n\n+ Session 是在一个会话周期内保证只有一个实例；\n\n+ Global-session 在 5.x 版本中已经不再使用，同时增加了 Application 和 Websocket 两种Scope，分别保证在一个 ServletContext 与一个 WebSocket 中只创建一个实例。\n\n@Component 注解在类上使用表明这个类是个组件类，需要 Spring 为这个类创建 Bean。\n\n@Bean 注解使用在方法上，告诉 Spring 这个方法将会返回一个 Bean 对象，需要把返回的对象注册到 Spring 的应用上下文中。\n\n## Bean 生命周期\n\n![image-20220721145728884](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721145728884.png)\n\n调用 Bean 的构造方法创建 Bean；\n\n通过反射调用 setter 方法进行属性的依赖注入；\n\n如果实现 BeanNameAware 接口的话，会设置 Bean 的 name；\n\n如果实现了 BeanFactoryAware，会把 BeanFactory 设置给 Bean；\n\n如果实现了 ApplicationContextAware，会给 Bean 设置 ApplictionContext；\n\n如果实现了 BeanPostProcessor 接口，则执行前置处理方法；\n\n实现了 InitializingBean 接口的话，执行 afterPropertiesSet 方法；\n\n执行自定义的 init 方法；\n\n执行 BeanPostProcessor 接口的后置处理方法。\n\n## Spring Boot\n\n Spring Boot 的几个特色模块。\n\nStarter 是 Spring Boot 提供的无缝集成功能的一种方式，使用某个功能时开发者不需要关注各种依赖库的处理，不需要具体的配置信息，由 Spring Boot 自动配置进行 Bean的创建。例如需要使用 Web 功能时，只需要在依赖中引入 Spring-boot-starter-web 即可。\n\nActuator 是用来对应用程序进行监视和管理，通过 RESTful API 请求来监管、审计、收集应用的运行情况。\n\nDevTools 提供了一系列开发工具的支持，来提高开发效率。例如热部署能力等。\n\nCLI 就是命令行接口，是一个命令行工具，支持使用 Groovy 脚本，可以快速搭建 Spring 原型项目。\n\n## MyBatis\n\n![image-20220721145743585](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721145743585.png)\n\n## 能描述一下Spring Context初始化的整个流程吗?\n\n## 简单介绍一下Bean的生命周期及作用域。\n\n","source":"_posts/BookMark/面试/面试准备.md","raw":"[toc]\n\n\n\n# 操作系统与计算机网络 \n\n![image-20220721145300660](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721145300660.png)\n\n## 进程与线程\n\n+ 首先需要掌握进程与线程的区别和联系：\n\n    进程是系统资源分配的最小单位，线程是程序执行的最小单位；\n    \n    进程使用独立的数据空间，而线程共享进程的数据空间。\n\n+ 线程调度，简单了解线程的几种调度算法就可以了。比如时间片轮转调度、先来先服务调度、优先级调度、多级反馈队列调度以及高响应比优先调度。\n\n+ 在进程与线程部分还有一个比较常见的考察点，就是进程间通信，也就是 IPC。这部分在面试中间件研发的相关职位时经常会考察。如上面知识点汇总图中所示，需要了解这 6 种进程通信方式的原理与适用场景。例如，进程间数据共享的场景可以使用共享内存；进程间数据交换的场景可以使用 Unix Socket 或者消息队列。\n\n## Linux 常用命令\n\nAWK、top、netstat、grep\n\n# 计算机网络知识点\n\n![image-20220721145310446](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721145310446.png)\n\n## TCP/IP协议族四层网络模型\n\n从协议的角度对网络传输做出的模型分类，是基于网络7层模型的。\n\n1）数据链路层 ：代表协议ARP，可解析IP为MAC地址\n\n2）网络层：代表协议IP，32位ip地址\n\n3）传输层：代表协议TCP/UDP，建立网络连接，进行数据传输\n\n4）应用层：代表协议FTP文件传输协议/DNS域名系统/HTTP网络数据\n\n## 7层模型\n\n第一层 物理层\n\n第二层 数据链路层\n\n第三层 网络层\n\n第四层 传输层\n\n第五层 会话层\n\n第六层 表示层\n\n第七层 应用层\n\n##  TCP 协议特点\n\nTCP 是传输层协议，对应 OSI 网络模型的第四层传输层，特点如下。\n\n    TCP 协议是基于链接的，也就是传输数据前需要先建立好链接，然后再进行传输。\n    \n    TCP 链接一旦建立，就可以在链接上进行双向的通信。\n    \n    TCP 的传输是基于字节流而不是报文\n    \n    TCP 还能提供流量控制能力，通过滑动窗口来控制数据的发送速率。\n    \n    TCP 协议还考虑到了网络问题可能会导致大量重传，进而导致网络情况进一步恶化，因此 TCP 协议还提供拥塞控制。TCP 处理拥塞控制主要用到了慢启动、拥塞避免、拥塞发生、快速恢复四个算法\n\n## 三次握手建连\n\n![image-20220721145326560](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721145326560.png)\n\n+ 简述：初始客户端状态syn_sent，服务端状态listen；客户端发送syn，服务端收到后返回ack和syn，服务端状态syn_rcvd，客户端收到后状态变为established。客户端返回ack，服务端再次接收，服务端更新状态为established。\n\n+ SYN 洪水攻击发生的原因，就是 Server 端收到 Client 端的 SYN 请求后，发送了 ACK 和 SYN，但是 Client 端不进行回复，导致 Server 端大量的链接处在 SYN_RCVD 状态，进而影响其他正常请求的建连。可以设置 tcp_synack_retries = 0 加快半链接的回收速度，或者调大 tcp_max_syn_backlog 来应对少量的 SYN 洪水攻击\n\n## 四次挥手断连\n\n![image-20220721145337479](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721145337479.png)\n\n+ 简述：客户端，服务端初始状态都为established；客户端发送fin到服务端，服务端收到返回ack，进入close_wait状态。客户端收到ack，状态变为fin_wait_2状态；等待服务端发送数据结束，再次向客户端发送fin，服务端状态变为last_ack，客户端收到后状态变为time_wait，等待 2 倍的最大报文段生存时间，来保证链接的可靠关闭，客户端状态变为closed；客户端返回ack，服务端收到状态变为closed；\n\n+ 这里面试官可能会问为什么需要等待 2 倍最大报文段生存时间之后再关闭链接，原因有两个：\n\n      保证 TCP 协议的全双工连接能够可靠关闭；\n      \n      保证这次连接的重复数据段从网络中消失，防止端口被重用时可能产生数据混淆。\n\n# 语言特性与设计模式\n\n## 设计模式知识点\n\n### 设计模式分为 3 大类型共 23 种\n\n创建型：工厂方法模式、抽象工厂模式、单例模式、建造者模式、原型模式。\n\n结构型：适配器模式、装饰器模式、代理模式、外观模式、桥接模式、组合模式、享元模式。\n\n行为型：策略模式、模板方法模式、观察者模式、迭代子模式、责任链模式、命令模式、备忘录模式、状态模式、访问者模式、中介者模式、解释器模式。\n\n### 最常见的设计模式\n\n+ 单例模式有几种实现方式\n  + 第一种是静态初始化方式，也叫作饿汉方式。实现的思路就是在类初始化时完成单例实例的创建，因此不会产生并发问题，在这种方式下不管是否会使用到这个单例，都会创建这个单例。\n  + 第二种实现方式是双重检查，也叫作懒汉方式，只有在真正用到这个单例实例的时候才会去创建，如果没有使用就不会创建。这个方式必然会面对多个线程同时使用实例时的并发问题。为了解决并发访问问题，通过 synchronized 或者 lock 进行双重检查，保证只有一个线程能够创建实例。这里要注意内存可见性引起的并发问题，必须使用 volatile 关键字修饰单例变量。\n  + 第三种是单例注册表方式，Spring 中 Bean 的单例模式就是通过单例注册表方式实现的。\n\n+ 单例模式、工厂模式、代理模式、构造者模式、责任链模式、适配器模式、观察者模式等\n\n+ 场景：\n  + 单例模式：数据源链接信息，spring中bean注入\n  + 工厂模式：mybatis中sqlsession工厂，spring中不同的bean工厂\n  + 代理模式：spring中的aop思想实现，jdk动态代理和cglib动态代理\n  + 适配器模式：不同适配器将 SLF4J 与 Log4j 等实现框架进行适配\n  + 构造者模式：适用于一个对象有很多复杂的属性，mybatis中的sqlsessionFactory.builder ()方法\n\n## Java 语言特性知识点\n\n![image-20220721145348180](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721145348180.png)\n\nJava 的集合类中部分需要重点了解类的实现。例如，HashMap、TreeMap 是如何实现的等。\n\n \n\n动态代理与反射是 Java 语言的特色，需要掌握动态代理与反射的使用场景，例如在 ORM 框架中会大量使用代理类。而 RPC 调用时会使用到反射机制调用实现类方法。\n\n \n\nJava 基础数据类型也常常会在面试中被问到，例如各种数据类型占用多大的内存空间、数据类型的自动转型与强制转型、基础数据类型与 wrapper 数据类型的自动装箱与拆箱等。\n\n \n\nJava 对对象的引用分为强引用、软引用、弱引用、虚引用四种，这些引用在 GC 时的处理策略不同，强引用不会被 GC 回收；软引用内存空间不足时会被 GC 回收；弱引用则在每次 GC 时被回收；虚引用必须和引用队列联合使用，主要用于跟踪一个对象被垃圾回收的过程。\n\n \n\nJava 的异常处理机制就是 try-catch-finally 机制，需要知道异常时在 try catch 中的处理流程；需要了解 Error 和 Exception 的区别。\n\n\n\n## 详解 Map\n\n![image-20220721145357468](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721145357468.png)\n\nHashMap\n\n    先来看 HashMap 的实现，简单来说，Java 的 HashMap 就是数组加链表实现的，数组中的每一项是一个链表。通过计算存入对象的 HashCode，来计算对象在数组中要存入的位置，用链表来解决散列冲突，。\n    \n    除了实现的方式，我们还需要知道填充因子的作用与 Map 扩容时的 rehash 机制，需要知道 HashMap 的容量都是 2 的幂次方，是因为可以通过按位与操作来计算余数，比求模要快。另外需要知道 HashMap 是非线程安全的，在多线程 put 的情况下，有可能在容量超过填充因子时进行 rehash，因为 HashMap 为了避免尾部遍历，在链表插入元素时使用头插法，多线程的场景下有可能会产生死循环。\n\nConcurrentHashMap    \n\n    从 HashMap 的非线程安全，面试官很自然地就会问到线程安全的 ConcurrentHashMap。ConcurrentHashMap 采用分段锁的思想来降低并发场景下的锁定发生频率，在 JDK1.7 与 1.8 中的实现差异非常大，1.7 中使用 Segment 进行分段加锁，降低并发锁定；1.8 中使用 CAS 自旋锁的乐观锁来提高性能，但是在并发度较高时性能会比较一般。另外 1.8 中的 ConcurrentHashMap 引入了红黑树来解决 Hash 冲突时链表顺序查找的问题。红黑树的启用条件与链表的长度和 Map 的总容量有关，默认是链表大于 8 且容量大于 64 时转为红黑树。\n\n##  Java 版本特性\n\n![image-20210822213310000](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20210822213310000.png)\n\n在 8 版本中 Java 增加了对 lambda 表达式的支持，使 Java 代码的编写可以更简洁，也更方便支持并行计算。并且提供了很多 Stream 流式处理的 API。8 版本还支持了方法引用的能力，可以进一步简化 lambda 表达式的写法。\n\n11 版本是 Java 最新的长期支持版本，也将会是未来一段时间的主要版本，11 版本中提供的最激动人心的功能是 ZGC 这个新的垃圾回收器，ZGC 为大内存堆设计，有着非常强悍的性能，能够实现 10ms 以下的 GC 暂停时间。关于 ZGC 会在下一课中进一步介绍。除此之外，11 版本对字符串处理 API 进行了增强，提供了字符复制等功能。11 版本还内置了 HttpClient。\n\n# 深入浅出JVM \n\n![image-20220721145422593](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721145422593.png)\n\n## JVM 内存模型\n\n![image-20220721145430895](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721145430895.png)\n\n    栈也叫方法栈，是线程私有的，线程在执行每个方法时都会同时创建一个栈帧，用来存储局部变量表、操作栈、动态链接、方法出口等信息。调用方法时执行入栈，方法返回时执行出栈。\n    \n    本地方法栈与栈类似，也是用来保存线程执行方法时的信息，不同的是，执行 Java 方法使用栈，而执行 native 方法使用本地方法栈。\n    \n    程序计数器保存着当前线程所执行的字节码位置，每个线程工作时都有一个独立的计数器。程序计数器为执行 Java 方法服务，执行 native 方法时，程序计数器为空。\n    \n       栈、本地方法栈、程序计数器这三个部分都是线程独占的。\n    \n    堆是 JVM 管理的内存中最大的一块，堆被所有线程共享，目的是为了存放对象实例，几乎所有的对象实例都在这里分配。当堆内存没有可用的空间时，会抛出 OOM 异常。根据对象存活的周期不同，JVM 把堆内存进行分代管理，由垃圾回收器来进行对象的回收管理。\n    \n    方法区也是各个线程共享的内存区域，又叫非堆区。用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据，JDK 1.7 中的永久代和 JDK 1.8 中的 Metaspace 都是方法区的一种实现。\n\n## 类加载机制\n\n类的加载指将编译好的 Class 类文件中的字节码读入内存中，将其放在方法区内并创建对应的 Class 对象。类的加载分为加载、链接、初始化，其中链接又包括验证、准备、解析三步。如下图所示。\n\n![image-20220721145441299](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721145441299.png)\n\n    加载是文件到内存的过程。通过类的完全限定名查找此类字节码文件，并利用字节码文件创建一个 Class 对象。\n    \n    验证是对类文件内容验证。目的在于确保 Class 文件符合当前虚拟机要求，不会危害虚拟机自身安全。主要包括四种：文件格式验证，元数据验证，字节码验证，符号引用验证。\n    \n    准备阶段是进行内存分配。为类变量也就是类中由 static 修饰的变量分配内存，并且设置初始值。这里要注意，初始值是 0 或者 null，而不是代码中设置的具体值，代码中设置的值是在初始化阶段完成的。另外这里也不包含用 final 修饰的静态变量，因为 final 在编译的时候就会分配。\n    \n    解析主要是解析字段、接口、方法。主要是将常量池中的符号引用替换为直接引用的过程。直接引用就是直接指向目标的指针、相对偏移量等。\n    \n    初始化，主要完成静态块执行与静态变量的赋值。这是类加载最后阶段，若被加载类的父类没有初始化，则先对父类进行初始化。\n    \n       只有对类主动使用时，才会进行初始化，初始化的触发条件包括在创建类的实例时、访问类的静态方法或者静态变量时、Class.forName() 反射类时、或者某个子类被初始化时。\n\n## 类加载器\n\n![image-20220721145450718](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721145450718.png)\n\n+ 如上图所示，Java 自带的三种类加载器分别是：**BootStrap 启动类加载器**、**扩展类加载器**和**应用加载器**（也叫系统加载器）。图右边的桔黄色文字表示各类加载器对应的加载目录。启动类加载器加载 java home 中 lib 目录下的类，扩展加载器负责加载 ext 目录下的类，应用加载器加载 classpath 指定目录下的类。除此之外，可以自定义类加载器。\n\n+ Java 的类加载使用双亲委派模式，即一个类加载器在加载类时，先把这个请求委托给自己的父类加载器去执行，如果父类加载器还存在父类加载器，就继续向上委托，直到顶层的启动类加载器，如上图中蓝色向上的箭头。如果父类加载器能够完成类加载，就成功返回，如果父类加载器无法完成加载，那么子加载器才会尝试自己去加载。如图中的桔黄色向下的箭头。\n\n+ 这种双亲委派模式的好处，可以避免类的重复加载，另外也避免了 Java 的核心 API 被篡改。\n\n## GC分代回收\n\n![image-20220721145500877](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721145500877.png)\n\n根据年轻代与老年代的特点，JVM 提供了不同的垃圾回收算法。垃圾回收算法按类型可以分为**引用计数法**、**复制法**和**标记清除法**。\n\n    引用计数法是通过对象被引用的次数来确定对象是否被使用，缺点是无法解决循环引用的问题。\n    \n    复制算法需要 from 和 to 两块相同大小的内存空间，对象分配时只在 from 块中进行，回收时把存活对象复制到 to 块中，并清空 from 块，然后交换两块的分工，即把 from 块作为 to 块，把 to 块作为 from 块。缺点是内存使用率较低。\n    \n    标记清除算法分为标记对象和清除不在使用的对象两个阶段，标记清除算法的缺点是会产生内存碎片。\n    \n    JVM 中提供的年轻代回收算法 Serial、ParNew、Parallel Scavenge 都是复制算法，而 CMS、G1、ZGC 都属于标记清除算法。\n\n### CMS 算法如下图所示\n\n![image-20220721145510923](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721145510923.png)\n\n第一个阶段是初始标记，这个阶段会 stop the world，标记的对象只是从 root 集最直接可达的对象；\n\n第二个阶段是并发标记，这时 GC 线程和应用线程并发执行。主要是标记可达的对象；\n\n第三个阶段是重新标记阶段，这个阶段是第二个 stop the world 的阶段，停顿时间比并发标记要小很多，但比初始标记稍长，主要对对象进行重新扫描并标记；\n\n第四个阶段是并发清理阶段，进行并发的垃圾清理；\n\n最后一个阶段是并发重置阶段，为下一次 GC 重置相关数据结构。\n\n# 并发与多线程\n\n![image-20220721145520746](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721145520746.png)\n\n## 线程状态转换\n\n线程是 JVM 执行任务的最小单元，理解线程的状态转换是理解后续多线程问题的基础。在 JVM 运行中，线程一共有 NEW、RUNNABLE、BLOCKED、WAITING、TIMED_WAITING、TERMINATED 六种状态，这些状态对应 Thread.State 枚举类中的状态。\n\n1. 当创建一个线程时，线程处在 NEW 状态，运行 Thread 的 start 方法后，线程进入 RUNNABLE 可运行状态。\n\n2. 这时，所有可运行状态的线程并不能马上运行，而是需要先进入就绪状态等待线程调度，如图中间所示的 READY 状态。在获取 CPU 后才能进入运行状态，如图中所示的 RUNNING。运行状态可以随着不同条件转换成除 NEW 以外的其他状态。\n\n3. 在运行态中的线程进入 synchronized 同步块或者同步方法时，如果获取锁失败，则会进入到 BLOCKED 状态。当获取到锁后，会从 BLOCKED 状态恢复到就绪状态。\n\n4. 运行中的线程还会进入等待状态，这两个等待一个是有超时时间的等待，例如调用 Object.wait、Thread.join 等；另外一个是无超时的等待，例如调用 Thread.join 或者 Locksupport.park 等。这两种等待都可以通过 notify 或 unpark 结束等待状态并恢复到就绪状态。\n\n5. 线程运行完成结束时，线程状态变成 TERMINATED。\n\n##  CAS 与 ABA 问题\n\n线程的同步与互斥，解决线程同步与互斥的主要方式是 CAS、synchronized 和 lock。\n\n### CAS\n\nCAS 是乐观锁的一种实现方式，是一种轻量级锁，JUC 中很多工具类的实现就是基于 CAS 的。CAS 操作的流程如下图所示，线程在读取数据时不进行加锁，在准备写回数据时，比较原值是否修改，若未被其他线程修改则写回，若已被修改，则重新执行读取流程。这是一种乐观策略，认为并发操作并不总会发生。\n\n![image-20220721145530649](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721145530649.png)\n\n### ABA\n\nCAS 容易出现 ABA 问题，就是如下面时序图所示，如果线程 T1 读取值 A 之后，发生两次写入，先由线程 T2 写回了 B，又由 T3 写回了 A，此时 T1 在写回比较时，值还是 A，就无法判断是否发生过修改。\n\n## synchronized\n\nsynchronized 是最常用的线程同步手段之一，它是如何保证同一时刻只有一个线程可以进入临界区呢？\n\n![image-20220721145540969](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721145540969.png)\n\nsynchronized 对对象进行加锁，在 JVM 中，对象在内存中分为三块区域：对象头、实例数据和对齐填充。在对象头中保存了锁标志位和指向 monitor 对象的起始地址，如下图所示，右侧就是对象对应的 Monitor 对象。当 Monitor 被某个线程持有后，就会处于锁定状态，如图中的 Owner 部分，会指向持有 Monitor 对象的线程。另外 Monitor 中还有两个队列，用来存放进入及等待获取锁的线程。\n\n\nsynchronized 应用在方法上时，在字节码中是通过方法的 ACC_SYNCHRONIZED 标志来实现的，synchronized 应用在同步块上时，在字节码中是通过 monitorenter 和 monitorexit 实现的。\n\n \n\n针对 synchronized 获取锁的方式，JVM 使用了锁升级的优化方式，就是先使用偏向锁优先同一线程然后再次获取锁，如果失败，就升级为 CAS 轻量级锁，如果失败就会短暂自旋，防止线程被系统挂起。最后如果以上都失败就升级为重量级锁。\n\n## 线程池\n\n线程池通过复用线程，避免线程频繁地创建和销毁。Java 的 Executors 工具类中提供了 5 种类型的线程池创建方法\n\n![image-20220721145549875](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721145549875.png)\n\n## 线程池初始化的时候有那些参数\n\n![image-20220721145604527](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721145604527.png)\n\n第一个参数设置核心线程数。默认情况下核心线程会一直存活。\n\n第二个参数设置最大线程数。决定线程池最多可以创建的多少线程。\n\n第三个参数和第四个参数用来设置线程空闲时间，和空闲时间的单位，当线程闲置超过空闲时间就会被销毁。可以通过 allowCoreThreadTimeOut 方法来允许核心线程被回收。\n\n第五个参数设置缓冲队列，上图中左下方的三个队列是设置线程池时常使用的缓冲队列。其中 ArrayBlockingQueue 是一个有界队列，就是指队列有最大容量限制。LinkedBlockingQueue 是无界队列，就是队列不限制容量。最后一个是 SynchronousQueue，是一个同步队列，内部没有缓冲区。\n\n第六个参数设置线程池工厂方法，线程工厂用来创建新线程，可以用来对线程的一些属性进行定制，例如线程的 group、线程名、优先级等。一般使用默认工厂类即可。\n\n第七个参数设置线程池满时的拒绝策略。如上图右下方所示有四种策略，Abort 策略在线程池满后，提交新任务时会抛出 RejectedExecutionException，这个也是默认的拒绝策略。Discard 策略会在提交失败时对任务直接进行丢弃。CallerRuns 策略会在提交失败时，由提交任务的线程直接执行提交的任务。DiscardOldest 策略会丢弃最早提交的任务。\n\n## 线程池执行流程\n\n![image-20220721145615170](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721145615170.png)\n\n向线程池提交任务时，会首先判断线程池中的线程数是否大于设置的核心线程数，如果不大于，就创建一个核心线程来执行任务。\n\n如果大于核心线程数，就会判断缓冲队列是否满了，如果没有满，则放入队列，等待线程空闲时执行任务。\n\n如果队列已经满了，则判断是否达到了线程池设置的最大线程数，如果没有达到，就创建新线程来执行任务。\n\n如果已经达到了最大线程数，则执行指定的拒绝策略。\n\n# 数据结构与算法\n\n![image-20220721145623944](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721145623944.png)\n\n## 二叉树\n\n二叉搜索树满足这样的条件，每个节点包含一个值，每个节点至多有两个子树。每个节点左子树节点的值都小于自身的值，每个节点右子树节点的值都大于自身的值。二叉树的查询时间复杂度是 log(N)，但是随着不断的插入、删除节点，二叉树的树高可能会不断变大，当一个二叉搜索树所有节点都只有左子树或者都只有右子树时，其查找性能就退化成线性的了。\n\n### 平衡二叉树\n\n平衡二叉树可以解决上面这个问题，平衡二叉树保证每个节点左右子树的高度差的绝对值不超过 1，例如 AVL 树。AVL 树是严格的平衡二叉树，插入或删除数据时可能经常需要旋转来保持平衡，比较适合插入、删除比较少的场景。\n\n### 红黑树\n\n红黑树是一种更加实用的非严格的平衡二叉树。红黑树更关注局部平衡而非整体平衡，确保没有一条路径会比其他路径长出 2 倍，所以是接近平衡的，但减少了许多不必要的旋转操作，更加实用。前面提到过，Java 8 的 HashMap 中就应用了红黑树来解决散列冲突时的查找问题。TreeMap 也是通过红黑树来保证有序性的。\n\n\n\n![image-20220721145633106](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721145633106.png)\n\n每个节点不是红色就是黑色。\n\n根节点是黑色。\n\n每个叶子节点都是黑色的空节点，如图中的黑色三角。\n\n红色节点的两个子节点都是黑色的。\n\n任意节点到其叶节点的每条路径上，包含相同数量的黑色节点。   \n\n## B 树\n\nB 树是一种多叉树，也叫多路搜索树。B 树中每个节点可以存储多个元素，非常适合用在文件索引上，可以有效减少磁盘 IO 次数。B 树中所有结点的最大子节点数称为 B 树的阶，如下图所示是一棵 3 阶 B 树\n\n![image-20220721145639957](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721145639957.png)\n\n非叶节点最多有 m 棵子树；\n\n根节点最少有两个子树，非根、非叶节点最少有 m/2 棵子树；\n\n非叶子结点中保存的关键字个数，等于该节点子树个数−1，就是说一个节点如果有 3棵子树，那么其中必定包含 2 个关键字；\n\n### B+ 树\n\n![image-20220721145647121](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721145647121.png)\n\nB+ 树的定义与 B 树基本相同，除了下面这几个特点。\n\n    节点中的关键字与子树数目相同，比如节点中有 3 个关键字，那么就有 3 棵子树；\n    \n    关键字对应的子树中的节点都大于或等于关键字，子树中包括关键字自身；\n    \n    所有关键字都出现在叶子节点中；\n    \n    所有叶子节点都有指向下一个叶子节点的指针。\n    \n    与 B 树不同，B+ 树在搜索时不会在非叶子节点命中，一定会查询到叶子节点；另外一个，叶子节点相当于数据存储层，保存关键字对应的数据，而非叶子节点只保存关键字和指向叶节点的指针，不保存关键字对应的数据，所以同样数量关键字的非叶节点，B+ 树比 B 树要小很多。\n\n### B+ 树更适合索引系统，MySQL 数据库的索引就提供了 B+ 树实现。\n\n原因有三个：\n\n+ 由于叶节点之间有指针相连，B+ 树更适合范围检索；\n\n+ 由于非页节点只保存关键字和指针，同样大小非叶节点，B+ 树可以容纳更多的关键字，可以降低树高，查询时磁盘读写代价更低；\n\n+ B+ 树的查询效率比较稳定。任何关键字的查找必须走一条从根结点到叶子结点的路，所有关键字查询的路径长度相同，效率相当。\n\n# Git 常用命令\n\n# spring框架\n\n![image-20220721145702793](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721145702793.png)\n\n图中红框框住的是比较重要的组件，Core 组件是 Spring 所有组件的核心；Bean 组件和 Context 组件我刚才提到了，是实现 IoC 和依赖注入的基础；AOP 组件用来实现面向切面编程；Web 组件包括 SpringMVC，是 Web 服务的控制层实现。\n\n**关于 AOP 还需要了解一下对应的 Aspect、pointcut、advice 等注解和具体使用方式。**\n\n## 核心接口/类\n\n再来看图右上方需要重点掌握的核心类。\n\n    ApplicationContext 保存了 IoC 的整个应用上下文，可以通过其中的 BeanFactory 获取到任意到 Bean；\n    \n    BeanFactory 主要的作用是根据 Bean Definition 来创建具体的 Bean；\n    \n    BeanWrapper 是对 Bean 的包装，一般情况下是在 Spring IoC 内部使用，提供了访问 Bean 的属性值、属性编辑器注册、类型转换等功能，方便 IoC 容器用统一的方式来访问 Bean 的属性；\n    \n    FactoryBean 通过 getObject 方法返回实际的 Bean 对象，例如 Motan 框架中 referer 对 service 的动态代理就是通过 FactoryBean 来实现的。\n\n## Scope\n\nBean 的 Scope 是指 Bean 的作用域，默认情况下是单例模式，这也是使用最多的一种方式；多例模式，即每次从 BeanFactory 中获取 Bean 都会创建一个新的 Bean。Request、Session、Global-session 是在 Web 服务中使用的 Scope。\n\n+ Request 每次请求都创建一个实例；\n\n+ Session 是在一个会话周期内保证只有一个实例；\n\n+ Global-session 在 5.x 版本中已经不再使用，同时增加了 Application 和 Websocket 两种Scope，分别保证在一个 ServletContext 与一个 WebSocket 中只创建一个实例。\n\n@Component 注解在类上使用表明这个类是个组件类，需要 Spring 为这个类创建 Bean。\n\n@Bean 注解使用在方法上，告诉 Spring 这个方法将会返回一个 Bean 对象，需要把返回的对象注册到 Spring 的应用上下文中。\n\n## Bean 生命周期\n\n![image-20220721145728884](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721145728884.png)\n\n调用 Bean 的构造方法创建 Bean；\n\n通过反射调用 setter 方法进行属性的依赖注入；\n\n如果实现 BeanNameAware 接口的话，会设置 Bean 的 name；\n\n如果实现了 BeanFactoryAware，会把 BeanFactory 设置给 Bean；\n\n如果实现了 ApplicationContextAware，会给 Bean 设置 ApplictionContext；\n\n如果实现了 BeanPostProcessor 接口，则执行前置处理方法；\n\n实现了 InitializingBean 接口的话，执行 afterPropertiesSet 方法；\n\n执行自定义的 init 方法；\n\n执行 BeanPostProcessor 接口的后置处理方法。\n\n## Spring Boot\n\n Spring Boot 的几个特色模块。\n\nStarter 是 Spring Boot 提供的无缝集成功能的一种方式，使用某个功能时开发者不需要关注各种依赖库的处理，不需要具体的配置信息，由 Spring Boot 自动配置进行 Bean的创建。例如需要使用 Web 功能时，只需要在依赖中引入 Spring-boot-starter-web 即可。\n\nActuator 是用来对应用程序进行监视和管理，通过 RESTful API 请求来监管、审计、收集应用的运行情况。\n\nDevTools 提供了一系列开发工具的支持，来提高开发效率。例如热部署能力等。\n\nCLI 就是命令行接口，是一个命令行工具，支持使用 Groovy 脚本，可以快速搭建 Spring 原型项目。\n\n## MyBatis\n\n![image-20220721145743585](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721145743585.png)\n\n## 能描述一下Spring Context初始化的整个流程吗?\n\n## 简单介绍一下Bean的生命周期及作用域。\n\n","slug":"BookMark/面试/面试准备","published":1,"date":"2022-07-25T05:51:46.000Z","updated":"2022-09-01T10:02:40.513Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cl7ptszos002uaba545f6hyxz","content":"<p>[toc]</p>\n<h1><span id=\"操作系统与计算机网络\">操作系统与计算机网络</span></h1><p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721145300660.png\" alt=\"image-20220721145300660\"></p>\n<h2><span id=\"进程与线程\">进程与线程</span></h2><ul>\n<li><p>首先需要掌握进程与线程的区别和联系：</p>\n<p>  进程是系统资源分配的最小单位，线程是程序执行的最小单位；</p>\n<p>  进程使用独立的数据空间，而线程共享进程的数据空间。</p>\n</li>\n<li><p>线程调度，简单了解线程的几种调度算法就可以了。比如时间片轮转调度、先来先服务调度、优先级调度、多级反馈队列调度以及高响应比优先调度。</p>\n</li>\n<li><p>在进程与线程部分还有一个比较常见的考察点，就是进程间通信，也就是 IPC。这部分在面试中间件研发的相关职位时经常会考察。如上面知识点汇总图中所示，需要了解这 6 种进程通信方式的原理与适用场景。例如，进程间数据共享的场景可以使用共享内存；进程间数据交换的场景可以使用 Unix Socket 或者消息队列。</p>\n</li>\n</ul>\n<h2><span id=\"linux-常用命令\">Linux 常用命令</span></h2><p>AWK、top、netstat、grep</p>\n<h1><span id=\"计算机网络知识点\">计算机网络知识点</span></h1><p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721145310446.png\" alt=\"image-20220721145310446\"></p>\n<h2><span id=\"tcpx2fip协议族四层网络模型\">TCP&#x2F;IP协议族四层网络模型</span></h2><p>从协议的角度对网络传输做出的模型分类，是基于网络7层模型的。</p>\n<p>1）数据链路层 ：代表协议ARP，可解析IP为MAC地址</p>\n<p>2）网络层：代表协议IP，32位ip地址</p>\n<p>3）传输层：代表协议TCP&#x2F;UDP，建立网络连接，进行数据传输</p>\n<p>4）应用层：代表协议FTP文件传输协议&#x2F;DNS域名系统&#x2F;HTTP网络数据</p>\n<h2><span id=\"7层模型\">7层模型</span></h2><p>第一层 物理层</p>\n<p>第二层 数据链路层</p>\n<p>第三层 网络层</p>\n<p>第四层 传输层</p>\n<p>第五层 会话层</p>\n<p>第六层 表示层</p>\n<p>第七层 应用层</p>\n<h2><span id=\"tcp-协议特点\">TCP 协议特点</span></h2><p>TCP 是传输层协议，对应 OSI 网络模型的第四层传输层，特点如下。</p>\n<pre><code class=\"hljs\">TCP 协议是基于链接的，也就是传输数据前需要先建立好链接，然后再进行传输。\n\nTCP 链接一旦建立，就可以在链接上进行双向的通信。\n\nTCP 的传输是基于字节流而不是报文\n\nTCP 还能提供流量控制能力，通过滑动窗口来控制数据的发送速率。\n\nTCP 协议还考虑到了网络问题可能会导致大量重传，进而导致网络情况进一步恶化，因此 TCP 协议还提供拥塞控制。TCP 处理拥塞控制主要用到了慢启动、拥塞避免、拥塞发生、快速恢复四个算法\n</code></pre>\n<h2><span id=\"三次握手建连\">三次握手建连</span></h2><p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721145326560.png\" alt=\"image-20220721145326560\"></p>\n<ul>\n<li><p>简述：初始客户端状态syn_sent，服务端状态listen；客户端发送syn，服务端收到后返回ack和syn，服务端状态syn_rcvd，客户端收到后状态变为established。客户端返回ack，服务端再次接收，服务端更新状态为established。</p>\n</li>\n<li><p>SYN 洪水攻击发生的原因，就是 Server 端收到 Client 端的 SYN 请求后，发送了 ACK 和 SYN，但是 Client 端不进行回复，导致 Server 端大量的链接处在 SYN_RCVD 状态，进而影响其他正常请求的建连。可以设置 tcp_synack_retries &#x3D; 0 加快半链接的回收速度，或者调大 tcp_max_syn_backlog 来应对少量的 SYN 洪水攻击</p>\n</li>\n</ul>\n<h2><span id=\"四次挥手断连\">四次挥手断连</span></h2><p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721145337479.png\" alt=\"image-20220721145337479\"></p>\n<ul>\n<li><p>简述：客户端，服务端初始状态都为established；客户端发送fin到服务端，服务端收到返回ack，进入close_wait状态。客户端收到ack，状态变为fin_wait_2状态；等待服务端发送数据结束，再次向客户端发送fin，服务端状态变为last_ack，客户端收到后状态变为time_wait，等待 2 倍的最大报文段生存时间，来保证链接的可靠关闭，客户端状态变为closed；客户端返回ack，服务端收到状态变为closed；</p>\n</li>\n<li><p>这里面试官可能会问为什么需要等待 2 倍最大报文段生存时间之后再关闭链接，原因有两个：</p>\n<pre><code class=\"hljs\">保证 TCP 协议的全双工连接能够可靠关闭；\n\n保证这次连接的重复数据段从网络中消失，防止端口被重用时可能产生数据混淆。\n</code></pre>\n</li>\n</ul>\n<h1><span id=\"语言特性与设计模式\">语言特性与设计模式</span></h1><h2><span id=\"设计模式知识点\">设计模式知识点</span></h2><h3><span id=\"设计模式分为-3-大类型共-23-种\">设计模式分为 3 大类型共 23 种</span></h3><p>创建型：工厂方法模式、抽象工厂模式、单例模式、建造者模式、原型模式。</p>\n<p>结构型：适配器模式、装饰器模式、代理模式、外观模式、桥接模式、组合模式、享元模式。</p>\n<p>行为型：策略模式、模板方法模式、观察者模式、迭代子模式、责任链模式、命令模式、备忘录模式、状态模式、访问者模式、中介者模式、解释器模式。</p>\n<h3><span id=\"最常见的设计模式\">最常见的设计模式</span></h3><ul>\n<li><p>单例模式有几种实现方式</p>\n<ul>\n<li>第一种是静态初始化方式，也叫作饿汉方式。实现的思路就是在类初始化时完成单例实例的创建，因此不会产生并发问题，在这种方式下不管是否会使用到这个单例，都会创建这个单例。</li>\n<li>第二种实现方式是双重检查，也叫作懒汉方式，只有在真正用到这个单例实例的时候才会去创建，如果没有使用就不会创建。这个方式必然会面对多个线程同时使用实例时的并发问题。为了解决并发访问问题，通过 synchronized 或者 lock 进行双重检查，保证只有一个线程能够创建实例。这里要注意内存可见性引起的并发问题，必须使用 volatile 关键字修饰单例变量。</li>\n<li>第三种是单例注册表方式，Spring 中 Bean 的单例模式就是通过单例注册表方式实现的。</li>\n</ul>\n</li>\n<li><p>单例模式、工厂模式、代理模式、构造者模式、责任链模式、适配器模式、观察者模式等</p>\n</li>\n<li><p>场景：</p>\n<ul>\n<li>单例模式：数据源链接信息，spring中bean注入</li>\n<li>工厂模式：mybatis中sqlsession工厂，spring中不同的bean工厂</li>\n<li>代理模式：spring中的aop思想实现，jdk动态代理和cglib动态代理</li>\n<li>适配器模式：不同适配器将 SLF4J 与 Log4j 等实现框架进行适配</li>\n<li>构造者模式：适用于一个对象有很多复杂的属性，mybatis中的sqlsessionFactory.builder ()方法</li>\n</ul>\n</li>\n</ul>\n<h2><span id=\"java-语言特性知识点\">Java 语言特性知识点</span></h2><p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721145348180.png\" alt=\"image-20220721145348180\"></p>\n<p>Java 的集合类中部分需要重点了解类的实现。例如，HashMap、TreeMap 是如何实现的等。</p>\n<p>动态代理与反射是 Java 语言的特色，需要掌握动态代理与反射的使用场景，例如在 ORM 框架中会大量使用代理类。而 RPC 调用时会使用到反射机制调用实现类方法。</p>\n<p>Java 基础数据类型也常常会在面试中被问到，例如各种数据类型占用多大的内存空间、数据类型的自动转型与强制转型、基础数据类型与 wrapper 数据类型的自动装箱与拆箱等。</p>\n<p>Java 对对象的引用分为强引用、软引用、弱引用、虚引用四种，这些引用在 GC 时的处理策略不同，强引用不会被 GC 回收；软引用内存空间不足时会被 GC 回收；弱引用则在每次 GC 时被回收；虚引用必须和引用队列联合使用，主要用于跟踪一个对象被垃圾回收的过程。</p>\n<p>Java 的异常处理机制就是 try-catch-finally 机制，需要知道异常时在 try catch 中的处理流程；需要了解 Error 和 Exception 的区别。</p>\n<h2><span id=\"详解-map\">详解 Map</span></h2><p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721145357468.png\" alt=\"image-20220721145357468\"></p>\n<p>HashMap</p>\n<pre><code class=\"hljs\">先来看 HashMap 的实现，简单来说，Java 的 HashMap 就是数组加链表实现的，数组中的每一项是一个链表。通过计算存入对象的 HashCode，来计算对象在数组中要存入的位置，用链表来解决散列冲突，。\n\n除了实现的方式，我们还需要知道填充因子的作用与 Map 扩容时的 rehash 机制，需要知道 HashMap 的容量都是 2 的幂次方，是因为可以通过按位与操作来计算余数，比求模要快。另外需要知道 HashMap 是非线程安全的，在多线程 put 的情况下，有可能在容量超过填充因子时进行 rehash，因为 HashMap 为了避免尾部遍历，在链表插入元素时使用头插法，多线程的场景下有可能会产生死循环。\n</code></pre>\n<p>ConcurrentHashMap    </p>\n<pre><code class=\"hljs\">从 HashMap 的非线程安全，面试官很自然地就会问到线程安全的 ConcurrentHashMap。ConcurrentHashMap 采用分段锁的思想来降低并发场景下的锁定发生频率，在 JDK1.7 与 1.8 中的实现差异非常大，1.7 中使用 Segment 进行分段加锁，降低并发锁定；1.8 中使用 CAS 自旋锁的乐观锁来提高性能，但是在并发度较高时性能会比较一般。另外 1.8 中的 ConcurrentHashMap 引入了红黑树来解决 Hash 冲突时链表顺序查找的问题。红黑树的启用条件与链表的长度和 Map 的总容量有关，默认是链表大于 8 且容量大于 64 时转为红黑树。\n</code></pre>\n<h2><span id=\"java-版本特性\">Java 版本特性</span></h2><p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20210822213310000.png\" alt=\"image-20210822213310000\"></p>\n<p>在 8 版本中 Java 增加了对 lambda 表达式的支持，使 Java 代码的编写可以更简洁，也更方便支持并行计算。并且提供了很多 Stream 流式处理的 API。8 版本还支持了方法引用的能力，可以进一步简化 lambda 表达式的写法。</p>\n<p>11 版本是 Java 最新的长期支持版本，也将会是未来一段时间的主要版本，11 版本中提供的最激动人心的功能是 ZGC 这个新的垃圾回收器，ZGC 为大内存堆设计，有着非常强悍的性能，能够实现 10ms 以下的 GC 暂停时间。关于 ZGC 会在下一课中进一步介绍。除此之外，11 版本对字符串处理 API 进行了增强，提供了字符复制等功能。11 版本还内置了 HttpClient。</p>\n<h1><span id=\"深入浅出jvm\">深入浅出JVM</span></h1><p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721145422593.png\" alt=\"image-20220721145422593\"></p>\n<h2><span id=\"jvm-内存模型\">JVM 内存模型</span></h2><p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721145430895.png\" alt=\"image-20220721145430895\"></p>\n<pre><code class=\"hljs\">栈也叫方法栈，是线程私有的，线程在执行每个方法时都会同时创建一个栈帧，用来存储局部变量表、操作栈、动态链接、方法出口等信息。调用方法时执行入栈，方法返回时执行出栈。\n\n本地方法栈与栈类似，也是用来保存线程执行方法时的信息，不同的是，执行 Java 方法使用栈，而执行 native 方法使用本地方法栈。\n\n程序计数器保存着当前线程所执行的字节码位置，每个线程工作时都有一个独立的计数器。程序计数器为执行 Java 方法服务，执行 native 方法时，程序计数器为空。\n\n   栈、本地方法栈、程序计数器这三个部分都是线程独占的。\n\n堆是 JVM 管理的内存中最大的一块，堆被所有线程共享，目的是为了存放对象实例，几乎所有的对象实例都在这里分配。当堆内存没有可用的空间时，会抛出 OOM 异常。根据对象存活的周期不同，JVM 把堆内存进行分代管理，由垃圾回收器来进行对象的回收管理。\n\n方法区也是各个线程共享的内存区域，又叫非堆区。用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据，JDK 1.7 中的永久代和 JDK 1.8 中的 Metaspace 都是方法区的一种实现。\n</code></pre>\n<h2><span id=\"类加载机制\">类加载机制</span></h2><p>类的加载指将编译好的 Class 类文件中的字节码读入内存中，将其放在方法区内并创建对应的 Class 对象。类的加载分为加载、链接、初始化，其中链接又包括验证、准备、解析三步。如下图所示。</p>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721145441299.png\" alt=\"image-20220721145441299\"></p>\n<pre><code class=\"hljs\">加载是文件到内存的过程。通过类的完全限定名查找此类字节码文件，并利用字节码文件创建一个 Class 对象。\n\n验证是对类文件内容验证。目的在于确保 Class 文件符合当前虚拟机要求，不会危害虚拟机自身安全。主要包括四种：文件格式验证，元数据验证，字节码验证，符号引用验证。\n\n准备阶段是进行内存分配。为类变量也就是类中由 static 修饰的变量分配内存，并且设置初始值。这里要注意，初始值是 0 或者 null，而不是代码中设置的具体值，代码中设置的值是在初始化阶段完成的。另外这里也不包含用 final 修饰的静态变量，因为 final 在编译的时候就会分配。\n\n解析主要是解析字段、接口、方法。主要是将常量池中的符号引用替换为直接引用的过程。直接引用就是直接指向目标的指针、相对偏移量等。\n\n初始化，主要完成静态块执行与静态变量的赋值。这是类加载最后阶段，若被加载类的父类没有初始化，则先对父类进行初始化。\n\n   只有对类主动使用时，才会进行初始化，初始化的触发条件包括在创建类的实例时、访问类的静态方法或者静态变量时、Class.forName() 反射类时、或者某个子类被初始化时。\n</code></pre>\n<h2><span id=\"类加载器\">类加载器</span></h2><p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721145450718.png\" alt=\"image-20220721145450718\"></p>\n<ul>\n<li><p>如上图所示，Java 自带的三种类加载器分别是：<strong>BootStrap 启动类加载器</strong>、<strong>扩展类加载器</strong>和<strong>应用加载器</strong>（也叫系统加载器）。图右边的桔黄色文字表示各类加载器对应的加载目录。启动类加载器加载 java home 中 lib 目录下的类，扩展加载器负责加载 ext 目录下的类，应用加载器加载 classpath 指定目录下的类。除此之外，可以自定义类加载器。</p>\n</li>\n<li><p>Java 的类加载使用双亲委派模式，即一个类加载器在加载类时，先把这个请求委托给自己的父类加载器去执行，如果父类加载器还存在父类加载器，就继续向上委托，直到顶层的启动类加载器，如上图中蓝色向上的箭头。如果父类加载器能够完成类加载，就成功返回，如果父类加载器无法完成加载，那么子加载器才会尝试自己去加载。如图中的桔黄色向下的箭头。</p>\n</li>\n<li><p>这种双亲委派模式的好处，可以避免类的重复加载，另外也避免了 Java 的核心 API 被篡改。</p>\n</li>\n</ul>\n<h2><span id=\"gc分代回收\">GC分代回收</span></h2><p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721145500877.png\" alt=\"image-20220721145500877\"></p>\n<p>根据年轻代与老年代的特点，JVM 提供了不同的垃圾回收算法。垃圾回收算法按类型可以分为<strong>引用计数法</strong>、<strong>复制法</strong>和<strong>标记清除法</strong>。</p>\n<pre><code class=\"hljs\">引用计数法是通过对象被引用的次数来确定对象是否被使用，缺点是无法解决循环引用的问题。\n\n复制算法需要 from 和 to 两块相同大小的内存空间，对象分配时只在 from 块中进行，回收时把存活对象复制到 to 块中，并清空 from 块，然后交换两块的分工，即把 from 块作为 to 块，把 to 块作为 from 块。缺点是内存使用率较低。\n\n标记清除算法分为标记对象和清除不在使用的对象两个阶段，标记清除算法的缺点是会产生内存碎片。\n\nJVM 中提供的年轻代回收算法 Serial、ParNew、Parallel Scavenge 都是复制算法，而 CMS、G1、ZGC 都属于标记清除算法。\n</code></pre>\n<h3><span id=\"cms-算法如下图所示\">CMS 算法如下图所示</span></h3><p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721145510923.png\" alt=\"image-20220721145510923\"></p>\n<p>第一个阶段是初始标记，这个阶段会 stop the world，标记的对象只是从 root 集最直接可达的对象；</p>\n<p>第二个阶段是并发标记，这时 GC 线程和应用线程并发执行。主要是标记可达的对象；</p>\n<p>第三个阶段是重新标记阶段，这个阶段是第二个 stop the world 的阶段，停顿时间比并发标记要小很多，但比初始标记稍长，主要对对象进行重新扫描并标记；</p>\n<p>第四个阶段是并发清理阶段，进行并发的垃圾清理；</p>\n<p>最后一个阶段是并发重置阶段，为下一次 GC 重置相关数据结构。</p>\n<h1><span id=\"并发与多线程\">并发与多线程</span></h1><p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721145520746.png\" alt=\"image-20220721145520746\"></p>\n<h2><span id=\"线程状态转换\">线程状态转换</span></h2><p>线程是 JVM 执行任务的最小单元，理解线程的状态转换是理解后续多线程问题的基础。在 JVM 运行中，线程一共有 NEW、RUNNABLE、BLOCKED、WAITING、TIMED_WAITING、TERMINATED 六种状态，这些状态对应 Thread.State 枚举类中的状态。</p>\n<ol>\n<li><p>当创建一个线程时，线程处在 NEW 状态，运行 Thread 的 start 方法后，线程进入 RUNNABLE 可运行状态。</p>\n</li>\n<li><p>这时，所有可运行状态的线程并不能马上运行，而是需要先进入就绪状态等待线程调度，如图中间所示的 READY 状态。在获取 CPU 后才能进入运行状态，如图中所示的 RUNNING。运行状态可以随着不同条件转换成除 NEW 以外的其他状态。</p>\n</li>\n<li><p>在运行态中的线程进入 synchronized 同步块或者同步方法时，如果获取锁失败，则会进入到 BLOCKED 状态。当获取到锁后，会从 BLOCKED 状态恢复到就绪状态。</p>\n</li>\n<li><p>运行中的线程还会进入等待状态，这两个等待一个是有超时时间的等待，例如调用 Object.wait、Thread.join 等；另外一个是无超时的等待，例如调用 Thread.join 或者 Locksupport.park 等。这两种等待都可以通过 notify 或 unpark 结束等待状态并恢复到就绪状态。</p>\n</li>\n<li><p>线程运行完成结束时，线程状态变成 TERMINATED。</p>\n</li>\n</ol>\n<h2><span id=\"cas-与-aba-问题\">CAS 与 ABA 问题</span></h2><p>线程的同步与互斥，解决线程同步与互斥的主要方式是 CAS、synchronized 和 lock。</p>\n<h3><span id=\"cas\">CAS</span></h3><p>CAS 是乐观锁的一种实现方式，是一种轻量级锁，JUC 中很多工具类的实现就是基于 CAS 的。CAS 操作的流程如下图所示，线程在读取数据时不进行加锁，在准备写回数据时，比较原值是否修改，若未被其他线程修改则写回，若已被修改，则重新执行读取流程。这是一种乐观策略，认为并发操作并不总会发生。</p>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721145530649.png\" alt=\"image-20220721145530649\"></p>\n<h3><span id=\"aba\">ABA</span></h3><p>CAS 容易出现 ABA 问题，就是如下面时序图所示，如果线程 T1 读取值 A 之后，发生两次写入，先由线程 T2 写回了 B，又由 T3 写回了 A，此时 T1 在写回比较时，值还是 A，就无法判断是否发生过修改。</p>\n<h2><span id=\"synchronized\">synchronized</span></h2><p>synchronized 是最常用的线程同步手段之一，它是如何保证同一时刻只有一个线程可以进入临界区呢？</p>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721145540969.png\" alt=\"image-20220721145540969\"></p>\n<p>synchronized 对对象进行加锁，在 JVM 中，对象在内存中分为三块区域：对象头、实例数据和对齐填充。在对象头中保存了锁标志位和指向 monitor 对象的起始地址，如下图所示，右侧就是对象对应的 Monitor 对象。当 Monitor 被某个线程持有后，就会处于锁定状态，如图中的 Owner 部分，会指向持有 Monitor 对象的线程。另外 Monitor 中还有两个队列，用来存放进入及等待获取锁的线程。</p>\n<p>synchronized 应用在方法上时，在字节码中是通过方法的 ACC_SYNCHRONIZED 标志来实现的，synchronized 应用在同步块上时，在字节码中是通过 monitorenter 和 monitorexit 实现的。</p>\n<p>针对 synchronized 获取锁的方式，JVM 使用了锁升级的优化方式，就是先使用偏向锁优先同一线程然后再次获取锁，如果失败，就升级为 CAS 轻量级锁，如果失败就会短暂自旋，防止线程被系统挂起。最后如果以上都失败就升级为重量级锁。</p>\n<h2><span id=\"线程池\">线程池</span></h2><p>线程池通过复用线程，避免线程频繁地创建和销毁。Java 的 Executors 工具类中提供了 5 种类型的线程池创建方法</p>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721145549875.png\" alt=\"image-20220721145549875\"></p>\n<h2><span id=\"线程池初始化的时候有那些参数\">线程池初始化的时候有那些参数</span></h2><p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721145604527.png\" alt=\"image-20220721145604527\"></p>\n<p>第一个参数设置核心线程数。默认情况下核心线程会一直存活。</p>\n<p>第二个参数设置最大线程数。决定线程池最多可以创建的多少线程。</p>\n<p>第三个参数和第四个参数用来设置线程空闲时间，和空闲时间的单位，当线程闲置超过空闲时间就会被销毁。可以通过 allowCoreThreadTimeOut 方法来允许核心线程被回收。</p>\n<p>第五个参数设置缓冲队列，上图中左下方的三个队列是设置线程池时常使用的缓冲队列。其中 ArrayBlockingQueue 是一个有界队列，就是指队列有最大容量限制。LinkedBlockingQueue 是无界队列，就是队列不限制容量。最后一个是 SynchronousQueue，是一个同步队列，内部没有缓冲区。</p>\n<p>第六个参数设置线程池工厂方法，线程工厂用来创建新线程，可以用来对线程的一些属性进行定制，例如线程的 group、线程名、优先级等。一般使用默认工厂类即可。</p>\n<p>第七个参数设置线程池满时的拒绝策略。如上图右下方所示有四种策略，Abort 策略在线程池满后，提交新任务时会抛出 RejectedExecutionException，这个也是默认的拒绝策略。Discard 策略会在提交失败时对任务直接进行丢弃。CallerRuns 策略会在提交失败时，由提交任务的线程直接执行提交的任务。DiscardOldest 策略会丢弃最早提交的任务。</p>\n<h2><span id=\"线程池执行流程\">线程池执行流程</span></h2><p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721145615170.png\" alt=\"image-20220721145615170\"></p>\n<p>向线程池提交任务时，会首先判断线程池中的线程数是否大于设置的核心线程数，如果不大于，就创建一个核心线程来执行任务。</p>\n<p>如果大于核心线程数，就会判断缓冲队列是否满了，如果没有满，则放入队列，等待线程空闲时执行任务。</p>\n<p>如果队列已经满了，则判断是否达到了线程池设置的最大线程数，如果没有达到，就创建新线程来执行任务。</p>\n<p>如果已经达到了最大线程数，则执行指定的拒绝策略。</p>\n<h1><span id=\"数据结构与算法\">数据结构与算法</span></h1><p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721145623944.png\" alt=\"image-20220721145623944\"></p>\n<h2><span id=\"二叉树\">二叉树</span></h2><p>二叉搜索树满足这样的条件，每个节点包含一个值，每个节点至多有两个子树。每个节点左子树节点的值都小于自身的值，每个节点右子树节点的值都大于自身的值。二叉树的查询时间复杂度是 log(N)，但是随着不断的插入、删除节点，二叉树的树高可能会不断变大，当一个二叉搜索树所有节点都只有左子树或者都只有右子树时，其查找性能就退化成线性的了。</p>\n<h3><span id=\"平衡二叉树\">平衡二叉树</span></h3><p>平衡二叉树可以解决上面这个问题，平衡二叉树保证每个节点左右子树的高度差的绝对值不超过 1，例如 AVL 树。AVL 树是严格的平衡二叉树，插入或删除数据时可能经常需要旋转来保持平衡，比较适合插入、删除比较少的场景。</p>\n<h3><span id=\"红黑树\">红黑树</span></h3><p>红黑树是一种更加实用的非严格的平衡二叉树。红黑树更关注局部平衡而非整体平衡，确保没有一条路径会比其他路径长出 2 倍，所以是接近平衡的，但减少了许多不必要的旋转操作，更加实用。前面提到过，Java 8 的 HashMap 中就应用了红黑树来解决散列冲突时的查找问题。TreeMap 也是通过红黑树来保证有序性的。</p>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721145633106.png\" alt=\"image-20220721145633106\"></p>\n<p>每个节点不是红色就是黑色。</p>\n<p>根节点是黑色。</p>\n<p>每个叶子节点都是黑色的空节点，如图中的黑色三角。</p>\n<p>红色节点的两个子节点都是黑色的。</p>\n<p>任意节点到其叶节点的每条路径上，包含相同数量的黑色节点。   </p>\n<h2><span id=\"b-树\">B 树</span></h2><p>B 树是一种多叉树，也叫多路搜索树。B 树中每个节点可以存储多个元素，非常适合用在文件索引上，可以有效减少磁盘 IO 次数。B 树中所有结点的最大子节点数称为 B 树的阶，如下图所示是一棵 3 阶 B 树</p>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721145639957.png\" alt=\"image-20220721145639957\"></p>\n<p>非叶节点最多有 m 棵子树；</p>\n<p>根节点最少有两个子树，非根、非叶节点最少有 m&#x2F;2 棵子树；</p>\n<p>非叶子结点中保存的关键字个数，等于该节点子树个数−1，就是说一个节点如果有 3棵子树，那么其中必定包含 2 个关键字；</p>\n<h3><span id=\"b-树\">B+ 树</span></h3><p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721145647121.png\" alt=\"image-20220721145647121\"></p>\n<p>B+ 树的定义与 B 树基本相同，除了下面这几个特点。</p>\n<pre><code class=\"hljs\">节点中的关键字与子树数目相同，比如节点中有 3 个关键字，那么就有 3 棵子树；\n\n关键字对应的子树中的节点都大于或等于关键字，子树中包括关键字自身；\n\n所有关键字都出现在叶子节点中；\n\n所有叶子节点都有指向下一个叶子节点的指针。\n\n与 B 树不同，B+ 树在搜索时不会在非叶子节点命中，一定会查询到叶子节点；另外一个，叶子节点相当于数据存储层，保存关键字对应的数据，而非叶子节点只保存关键字和指向叶节点的指针，不保存关键字对应的数据，所以同样数量关键字的非叶节点，B+ 树比 B 树要小很多。\n</code></pre>\n<h3><span id=\"b-树更适合索引系统mysql-数据库的索引就提供了-b-树实现\">B+ 树更适合索引系统，MySQL 数据库的索引就提供了 B+ 树实现。</span></h3><p>原因有三个：</p>\n<ul>\n<li><p>由于叶节点之间有指针相连，B+ 树更适合范围检索；</p>\n</li>\n<li><p>由于非页节点只保存关键字和指针，同样大小非叶节点，B+ 树可以容纳更多的关键字，可以降低树高，查询时磁盘读写代价更低；</p>\n</li>\n<li><p>B+ 树的查询效率比较稳定。任何关键字的查找必须走一条从根结点到叶子结点的路，所有关键字查询的路径长度相同，效率相当。</p>\n</li>\n</ul>\n<h1><span id=\"git-常用命令\">Git 常用命令</span></h1><h1><span id=\"spring框架\">spring框架</span></h1><p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721145702793.png\" alt=\"image-20220721145702793\"></p>\n<p>图中红框框住的是比较重要的组件，Core 组件是 Spring 所有组件的核心；Bean 组件和 Context 组件我刚才提到了，是实现 IoC 和依赖注入的基础；AOP 组件用来实现面向切面编程；Web 组件包括 SpringMVC，是 Web 服务的控制层实现。</p>\n<p><strong>关于 AOP 还需要了解一下对应的 Aspect、pointcut、advice 等注解和具体使用方式。</strong></p>\n<h2><span id=\"核心接口x2f类\">核心接口&#x2F;类</span></h2><p>再来看图右上方需要重点掌握的核心类。</p>\n<pre><code class=\"hljs\">ApplicationContext 保存了 IoC 的整个应用上下文，可以通过其中的 BeanFactory 获取到任意到 Bean；\n\nBeanFactory 主要的作用是根据 Bean Definition 来创建具体的 Bean；\n\nBeanWrapper 是对 Bean 的包装，一般情况下是在 Spring IoC 内部使用，提供了访问 Bean 的属性值、属性编辑器注册、类型转换等功能，方便 IoC 容器用统一的方式来访问 Bean 的属性；\n\nFactoryBean 通过 getObject 方法返回实际的 Bean 对象，例如 Motan 框架中 referer 对 service 的动态代理就是通过 FactoryBean 来实现的。\n</code></pre>\n<h2><span id=\"scope\">Scope</span></h2><p>Bean 的 Scope 是指 Bean 的作用域，默认情况下是单例模式，这也是使用最多的一种方式；多例模式，即每次从 BeanFactory 中获取 Bean 都会创建一个新的 Bean。Request、Session、Global-session 是在 Web 服务中使用的 Scope。</p>\n<ul>\n<li><p>Request 每次请求都创建一个实例；</p>\n</li>\n<li><p>Session 是在一个会话周期内保证只有一个实例；</p>\n</li>\n<li><p>Global-session 在 5.x 版本中已经不再使用，同时增加了 Application 和 Websocket 两种Scope，分别保证在一个 ServletContext 与一个 WebSocket 中只创建一个实例。</p>\n</li>\n</ul>\n<p>@Component 注解在类上使用表明这个类是个组件类，需要 Spring 为这个类创建 Bean。</p>\n<p>@Bean 注解使用在方法上，告诉 Spring 这个方法将会返回一个 Bean 对象，需要把返回的对象注册到 Spring 的应用上下文中。</p>\n<h2><span id=\"bean-生命周期\">Bean 生命周期</span></h2><p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721145728884.png\" alt=\"image-20220721145728884\"></p>\n<p>调用 Bean 的构造方法创建 Bean；</p>\n<p>通过反射调用 setter 方法进行属性的依赖注入；</p>\n<p>如果实现 BeanNameAware 接口的话，会设置 Bean 的 name；</p>\n<p>如果实现了 BeanFactoryAware，会把 BeanFactory 设置给 Bean；</p>\n<p>如果实现了 ApplicationContextAware，会给 Bean 设置 ApplictionContext；</p>\n<p>如果实现了 BeanPostProcessor 接口，则执行前置处理方法；</p>\n<p>实现了 InitializingBean 接口的话，执行 afterPropertiesSet 方法；</p>\n<p>执行自定义的 init 方法；</p>\n<p>执行 BeanPostProcessor 接口的后置处理方法。</p>\n<h2><span id=\"spring-boot\">Spring Boot</span></h2><p> Spring Boot 的几个特色模块。</p>\n<p>Starter 是 Spring Boot 提供的无缝集成功能的一种方式，使用某个功能时开发者不需要关注各种依赖库的处理，不需要具体的配置信息，由 Spring Boot 自动配置进行 Bean的创建。例如需要使用 Web 功能时，只需要在依赖中引入 Spring-boot-starter-web 即可。</p>\n<p>Actuator 是用来对应用程序进行监视和管理，通过 RESTful API 请求来监管、审计、收集应用的运行情况。</p>\n<p>DevTools 提供了一系列开发工具的支持，来提高开发效率。例如热部署能力等。</p>\n<p>CLI 就是命令行接口，是一个命令行工具，支持使用 Groovy 脚本，可以快速搭建 Spring 原型项目。</p>\n<h2><span id=\"mybatis\">MyBatis</span></h2><p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721145743585.png\" alt=\"image-20220721145743585\"></p>\n<h2><span id=\"能描述一下spring-context初始化的整个流程吗\">能描述一下Spring Context初始化的整个流程吗?</span></h2><h2><span id=\"简单介绍一下bean的生命周期及作用域\">简单介绍一下Bean的生命周期及作用域。</span></h2>","site":{"data":{}},"wordcount":10353,"excerpt":"","more":"<p>[toc]</p>\n<h1 id=\"操作系统与计算机网络\"><a href=\"#操作系统与计算机网络\" class=\"headerlink\" title=\"操作系统与计算机网络\"></a>操作系统与计算机网络</h1><p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721145300660.png\" alt=\"image-20220721145300660\"></p>\n<h2 id=\"进程与线程\"><a href=\"#进程与线程\" class=\"headerlink\" title=\"进程与线程\"></a>进程与线程</h2><ul>\n<li><p>首先需要掌握进程与线程的区别和联系：</p>\n<p>  进程是系统资源分配的最小单位，线程是程序执行的最小单位；</p>\n<p>  进程使用独立的数据空间，而线程共享进程的数据空间。</p>\n</li>\n<li><p>线程调度，简单了解线程的几种调度算法就可以了。比如时间片轮转调度、先来先服务调度、优先级调度、多级反馈队列调度以及高响应比优先调度。</p>\n</li>\n<li><p>在进程与线程部分还有一个比较常见的考察点，就是进程间通信，也就是 IPC。这部分在面试中间件研发的相关职位时经常会考察。如上面知识点汇总图中所示，需要了解这 6 种进程通信方式的原理与适用场景。例如，进程间数据共享的场景可以使用共享内存；进程间数据交换的场景可以使用 Unix Socket 或者消息队列。</p>\n</li>\n</ul>\n<h2 id=\"Linux-常用命令\"><a href=\"#Linux-常用命令\" class=\"headerlink\" title=\"Linux 常用命令\"></a>Linux 常用命令</h2><p>AWK、top、netstat、grep</p>\n<h1 id=\"计算机网络知识点\"><a href=\"#计算机网络知识点\" class=\"headerlink\" title=\"计算机网络知识点\"></a>计算机网络知识点</h1><p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721145310446.png\" alt=\"image-20220721145310446\"></p>\n<h2 id=\"TCP-x2F-IP协议族四层网络模型\"><a href=\"#TCP-x2F-IP协议族四层网络模型\" class=\"headerlink\" title=\"TCP&#x2F;IP协议族四层网络模型\"></a>TCP&#x2F;IP协议族四层网络模型</h2><p>从协议的角度对网络传输做出的模型分类，是基于网络7层模型的。</p>\n<p>1）数据链路层 ：代表协议ARP，可解析IP为MAC地址</p>\n<p>2）网络层：代表协议IP，32位ip地址</p>\n<p>3）传输层：代表协议TCP&#x2F;UDP，建立网络连接，进行数据传输</p>\n<p>4）应用层：代表协议FTP文件传输协议&#x2F;DNS域名系统&#x2F;HTTP网络数据</p>\n<h2 id=\"7层模型\"><a href=\"#7层模型\" class=\"headerlink\" title=\"7层模型\"></a>7层模型</h2><p>第一层 物理层</p>\n<p>第二层 数据链路层</p>\n<p>第三层 网络层</p>\n<p>第四层 传输层</p>\n<p>第五层 会话层</p>\n<p>第六层 表示层</p>\n<p>第七层 应用层</p>\n<h2 id=\"TCP-协议特点\"><a href=\"#TCP-协议特点\" class=\"headerlink\" title=\"TCP 协议特点\"></a>TCP 协议特点</h2><p>TCP 是传输层协议，对应 OSI 网络模型的第四层传输层，特点如下。</p>\n<pre><code>TCP 协议是基于链接的，也就是传输数据前需要先建立好链接，然后再进行传输。\n\nTCP 链接一旦建立，就可以在链接上进行双向的通信。\n\nTCP 的传输是基于字节流而不是报文\n\nTCP 还能提供流量控制能力，通过滑动窗口来控制数据的发送速率。\n\nTCP 协议还考虑到了网络问题可能会导致大量重传，进而导致网络情况进一步恶化，因此 TCP 协议还提供拥塞控制。TCP 处理拥塞控制主要用到了慢启动、拥塞避免、拥塞发生、快速恢复四个算法\n</code></pre>\n<h2 id=\"三次握手建连\"><a href=\"#三次握手建连\" class=\"headerlink\" title=\"三次握手建连\"></a>三次握手建连</h2><p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721145326560.png\" alt=\"image-20220721145326560\"></p>\n<ul>\n<li><p>简述：初始客户端状态syn_sent，服务端状态listen；客户端发送syn，服务端收到后返回ack和syn，服务端状态syn_rcvd，客户端收到后状态变为established。客户端返回ack，服务端再次接收，服务端更新状态为established。</p>\n</li>\n<li><p>SYN 洪水攻击发生的原因，就是 Server 端收到 Client 端的 SYN 请求后，发送了 ACK 和 SYN，但是 Client 端不进行回复，导致 Server 端大量的链接处在 SYN_RCVD 状态，进而影响其他正常请求的建连。可以设置 tcp_synack_retries &#x3D; 0 加快半链接的回收速度，或者调大 tcp_max_syn_backlog 来应对少量的 SYN 洪水攻击</p>\n</li>\n</ul>\n<h2 id=\"四次挥手断连\"><a href=\"#四次挥手断连\" class=\"headerlink\" title=\"四次挥手断连\"></a>四次挥手断连</h2><p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721145337479.png\" alt=\"image-20220721145337479\"></p>\n<ul>\n<li><p>简述：客户端，服务端初始状态都为established；客户端发送fin到服务端，服务端收到返回ack，进入close_wait状态。客户端收到ack，状态变为fin_wait_2状态；等待服务端发送数据结束，再次向客户端发送fin，服务端状态变为last_ack，客户端收到后状态变为time_wait，等待 2 倍的最大报文段生存时间，来保证链接的可靠关闭，客户端状态变为closed；客户端返回ack，服务端收到状态变为closed；</p>\n</li>\n<li><p>这里面试官可能会问为什么需要等待 2 倍最大报文段生存时间之后再关闭链接，原因有两个：</p>\n<pre><code>保证 TCP 协议的全双工连接能够可靠关闭；\n\n保证这次连接的重复数据段从网络中消失，防止端口被重用时可能产生数据混淆。\n</code></pre>\n</li>\n</ul>\n<h1 id=\"语言特性与设计模式\"><a href=\"#语言特性与设计模式\" class=\"headerlink\" title=\"语言特性与设计模式\"></a>语言特性与设计模式</h1><h2 id=\"设计模式知识点\"><a href=\"#设计模式知识点\" class=\"headerlink\" title=\"设计模式知识点\"></a>设计模式知识点</h2><h3 id=\"设计模式分为-3-大类型共-23-种\"><a href=\"#设计模式分为-3-大类型共-23-种\" class=\"headerlink\" title=\"设计模式分为 3 大类型共 23 种\"></a>设计模式分为 3 大类型共 23 种</h3><p>创建型：工厂方法模式、抽象工厂模式、单例模式、建造者模式、原型模式。</p>\n<p>结构型：适配器模式、装饰器模式、代理模式、外观模式、桥接模式、组合模式、享元模式。</p>\n<p>行为型：策略模式、模板方法模式、观察者模式、迭代子模式、责任链模式、命令模式、备忘录模式、状态模式、访问者模式、中介者模式、解释器模式。</p>\n<h3 id=\"最常见的设计模式\"><a href=\"#最常见的设计模式\" class=\"headerlink\" title=\"最常见的设计模式\"></a>最常见的设计模式</h3><ul>\n<li><p>单例模式有几种实现方式</p>\n<ul>\n<li>第一种是静态初始化方式，也叫作饿汉方式。实现的思路就是在类初始化时完成单例实例的创建，因此不会产生并发问题，在这种方式下不管是否会使用到这个单例，都会创建这个单例。</li>\n<li>第二种实现方式是双重检查，也叫作懒汉方式，只有在真正用到这个单例实例的时候才会去创建，如果没有使用就不会创建。这个方式必然会面对多个线程同时使用实例时的并发问题。为了解决并发访问问题，通过 synchronized 或者 lock 进行双重检查，保证只有一个线程能够创建实例。这里要注意内存可见性引起的并发问题，必须使用 volatile 关键字修饰单例变量。</li>\n<li>第三种是单例注册表方式，Spring 中 Bean 的单例模式就是通过单例注册表方式实现的。</li>\n</ul>\n</li>\n<li><p>单例模式、工厂模式、代理模式、构造者模式、责任链模式、适配器模式、观察者模式等</p>\n</li>\n<li><p>场景：</p>\n<ul>\n<li>单例模式：数据源链接信息，spring中bean注入</li>\n<li>工厂模式：mybatis中sqlsession工厂，spring中不同的bean工厂</li>\n<li>代理模式：spring中的aop思想实现，jdk动态代理和cglib动态代理</li>\n<li>适配器模式：不同适配器将 SLF4J 与 Log4j 等实现框架进行适配</li>\n<li>构造者模式：适用于一个对象有很多复杂的属性，mybatis中的sqlsessionFactory.builder ()方法</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Java-语言特性知识点\"><a href=\"#Java-语言特性知识点\" class=\"headerlink\" title=\"Java 语言特性知识点\"></a>Java 语言特性知识点</h2><p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721145348180.png\" alt=\"image-20220721145348180\"></p>\n<p>Java 的集合类中部分需要重点了解类的实现。例如，HashMap、TreeMap 是如何实现的等。</p>\n<p>动态代理与反射是 Java 语言的特色，需要掌握动态代理与反射的使用场景，例如在 ORM 框架中会大量使用代理类。而 RPC 调用时会使用到反射机制调用实现类方法。</p>\n<p>Java 基础数据类型也常常会在面试中被问到，例如各种数据类型占用多大的内存空间、数据类型的自动转型与强制转型、基础数据类型与 wrapper 数据类型的自动装箱与拆箱等。</p>\n<p>Java 对对象的引用分为强引用、软引用、弱引用、虚引用四种，这些引用在 GC 时的处理策略不同，强引用不会被 GC 回收；软引用内存空间不足时会被 GC 回收；弱引用则在每次 GC 时被回收；虚引用必须和引用队列联合使用，主要用于跟踪一个对象被垃圾回收的过程。</p>\n<p>Java 的异常处理机制就是 try-catch-finally 机制，需要知道异常时在 try catch 中的处理流程；需要了解 Error 和 Exception 的区别。</p>\n<h2 id=\"详解-Map\"><a href=\"#详解-Map\" class=\"headerlink\" title=\"详解 Map\"></a>详解 Map</h2><p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721145357468.png\" alt=\"image-20220721145357468\"></p>\n<p>HashMap</p>\n<pre><code>先来看 HashMap 的实现，简单来说，Java 的 HashMap 就是数组加链表实现的，数组中的每一项是一个链表。通过计算存入对象的 HashCode，来计算对象在数组中要存入的位置，用链表来解决散列冲突，。\n\n除了实现的方式，我们还需要知道填充因子的作用与 Map 扩容时的 rehash 机制，需要知道 HashMap 的容量都是 2 的幂次方，是因为可以通过按位与操作来计算余数，比求模要快。另外需要知道 HashMap 是非线程安全的，在多线程 put 的情况下，有可能在容量超过填充因子时进行 rehash，因为 HashMap 为了避免尾部遍历，在链表插入元素时使用头插法，多线程的场景下有可能会产生死循环。\n</code></pre>\n<p>ConcurrentHashMap    </p>\n<pre><code>从 HashMap 的非线程安全，面试官很自然地就会问到线程安全的 ConcurrentHashMap。ConcurrentHashMap 采用分段锁的思想来降低并发场景下的锁定发生频率，在 JDK1.7 与 1.8 中的实现差异非常大，1.7 中使用 Segment 进行分段加锁，降低并发锁定；1.8 中使用 CAS 自旋锁的乐观锁来提高性能，但是在并发度较高时性能会比较一般。另外 1.8 中的 ConcurrentHashMap 引入了红黑树来解决 Hash 冲突时链表顺序查找的问题。红黑树的启用条件与链表的长度和 Map 的总容量有关，默认是链表大于 8 且容量大于 64 时转为红黑树。\n</code></pre>\n<h2 id=\"Java-版本特性\"><a href=\"#Java-版本特性\" class=\"headerlink\" title=\"Java 版本特性\"></a>Java 版本特性</h2><p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20210822213310000.png\" alt=\"image-20210822213310000\"></p>\n<p>在 8 版本中 Java 增加了对 lambda 表达式的支持，使 Java 代码的编写可以更简洁，也更方便支持并行计算。并且提供了很多 Stream 流式处理的 API。8 版本还支持了方法引用的能力，可以进一步简化 lambda 表达式的写法。</p>\n<p>11 版本是 Java 最新的长期支持版本，也将会是未来一段时间的主要版本，11 版本中提供的最激动人心的功能是 ZGC 这个新的垃圾回收器，ZGC 为大内存堆设计，有着非常强悍的性能，能够实现 10ms 以下的 GC 暂停时间。关于 ZGC 会在下一课中进一步介绍。除此之外，11 版本对字符串处理 API 进行了增强，提供了字符复制等功能。11 版本还内置了 HttpClient。</p>\n<h1 id=\"深入浅出JVM\"><a href=\"#深入浅出JVM\" class=\"headerlink\" title=\"深入浅出JVM\"></a>深入浅出JVM</h1><p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721145422593.png\" alt=\"image-20220721145422593\"></p>\n<h2 id=\"JVM-内存模型\"><a href=\"#JVM-内存模型\" class=\"headerlink\" title=\"JVM 内存模型\"></a>JVM 内存模型</h2><p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721145430895.png\" alt=\"image-20220721145430895\"></p>\n<pre><code>栈也叫方法栈，是线程私有的，线程在执行每个方法时都会同时创建一个栈帧，用来存储局部变量表、操作栈、动态链接、方法出口等信息。调用方法时执行入栈，方法返回时执行出栈。\n\n本地方法栈与栈类似，也是用来保存线程执行方法时的信息，不同的是，执行 Java 方法使用栈，而执行 native 方法使用本地方法栈。\n\n程序计数器保存着当前线程所执行的字节码位置，每个线程工作时都有一个独立的计数器。程序计数器为执行 Java 方法服务，执行 native 方法时，程序计数器为空。\n\n   栈、本地方法栈、程序计数器这三个部分都是线程独占的。\n\n堆是 JVM 管理的内存中最大的一块，堆被所有线程共享，目的是为了存放对象实例，几乎所有的对象实例都在这里分配。当堆内存没有可用的空间时，会抛出 OOM 异常。根据对象存活的周期不同，JVM 把堆内存进行分代管理，由垃圾回收器来进行对象的回收管理。\n\n方法区也是各个线程共享的内存区域，又叫非堆区。用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据，JDK 1.7 中的永久代和 JDK 1.8 中的 Metaspace 都是方法区的一种实现。\n</code></pre>\n<h2 id=\"类加载机制\"><a href=\"#类加载机制\" class=\"headerlink\" title=\"类加载机制\"></a>类加载机制</h2><p>类的加载指将编译好的 Class 类文件中的字节码读入内存中，将其放在方法区内并创建对应的 Class 对象。类的加载分为加载、链接、初始化，其中链接又包括验证、准备、解析三步。如下图所示。</p>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721145441299.png\" alt=\"image-20220721145441299\"></p>\n<pre><code>加载是文件到内存的过程。通过类的完全限定名查找此类字节码文件，并利用字节码文件创建一个 Class 对象。\n\n验证是对类文件内容验证。目的在于确保 Class 文件符合当前虚拟机要求，不会危害虚拟机自身安全。主要包括四种：文件格式验证，元数据验证，字节码验证，符号引用验证。\n\n准备阶段是进行内存分配。为类变量也就是类中由 static 修饰的变量分配内存，并且设置初始值。这里要注意，初始值是 0 或者 null，而不是代码中设置的具体值，代码中设置的值是在初始化阶段完成的。另外这里也不包含用 final 修饰的静态变量，因为 final 在编译的时候就会分配。\n\n解析主要是解析字段、接口、方法。主要是将常量池中的符号引用替换为直接引用的过程。直接引用就是直接指向目标的指针、相对偏移量等。\n\n初始化，主要完成静态块执行与静态变量的赋值。这是类加载最后阶段，若被加载类的父类没有初始化，则先对父类进行初始化。\n\n   只有对类主动使用时，才会进行初始化，初始化的触发条件包括在创建类的实例时、访问类的静态方法或者静态变量时、Class.forName() 反射类时、或者某个子类被初始化时。\n</code></pre>\n<h2 id=\"类加载器\"><a href=\"#类加载器\" class=\"headerlink\" title=\"类加载器\"></a>类加载器</h2><p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721145450718.png\" alt=\"image-20220721145450718\"></p>\n<ul>\n<li><p>如上图所示，Java 自带的三种类加载器分别是：<strong>BootStrap 启动类加载器</strong>、<strong>扩展类加载器</strong>和<strong>应用加载器</strong>（也叫系统加载器）。图右边的桔黄色文字表示各类加载器对应的加载目录。启动类加载器加载 java home 中 lib 目录下的类，扩展加载器负责加载 ext 目录下的类，应用加载器加载 classpath 指定目录下的类。除此之外，可以自定义类加载器。</p>\n</li>\n<li><p>Java 的类加载使用双亲委派模式，即一个类加载器在加载类时，先把这个请求委托给自己的父类加载器去执行，如果父类加载器还存在父类加载器，就继续向上委托，直到顶层的启动类加载器，如上图中蓝色向上的箭头。如果父类加载器能够完成类加载，就成功返回，如果父类加载器无法完成加载，那么子加载器才会尝试自己去加载。如图中的桔黄色向下的箭头。</p>\n</li>\n<li><p>这种双亲委派模式的好处，可以避免类的重复加载，另外也避免了 Java 的核心 API 被篡改。</p>\n</li>\n</ul>\n<h2 id=\"GC分代回收\"><a href=\"#GC分代回收\" class=\"headerlink\" title=\"GC分代回收\"></a>GC分代回收</h2><p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721145500877.png\" alt=\"image-20220721145500877\"></p>\n<p>根据年轻代与老年代的特点，JVM 提供了不同的垃圾回收算法。垃圾回收算法按类型可以分为<strong>引用计数法</strong>、<strong>复制法</strong>和<strong>标记清除法</strong>。</p>\n<pre><code>引用计数法是通过对象被引用的次数来确定对象是否被使用，缺点是无法解决循环引用的问题。\n\n复制算法需要 from 和 to 两块相同大小的内存空间，对象分配时只在 from 块中进行，回收时把存活对象复制到 to 块中，并清空 from 块，然后交换两块的分工，即把 from 块作为 to 块，把 to 块作为 from 块。缺点是内存使用率较低。\n\n标记清除算法分为标记对象和清除不在使用的对象两个阶段，标记清除算法的缺点是会产生内存碎片。\n\nJVM 中提供的年轻代回收算法 Serial、ParNew、Parallel Scavenge 都是复制算法，而 CMS、G1、ZGC 都属于标记清除算法。\n</code></pre>\n<h3 id=\"CMS-算法如下图所示\"><a href=\"#CMS-算法如下图所示\" class=\"headerlink\" title=\"CMS 算法如下图所示\"></a>CMS 算法如下图所示</h3><p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721145510923.png\" alt=\"image-20220721145510923\"></p>\n<p>第一个阶段是初始标记，这个阶段会 stop the world，标记的对象只是从 root 集最直接可达的对象；</p>\n<p>第二个阶段是并发标记，这时 GC 线程和应用线程并发执行。主要是标记可达的对象；</p>\n<p>第三个阶段是重新标记阶段，这个阶段是第二个 stop the world 的阶段，停顿时间比并发标记要小很多，但比初始标记稍长，主要对对象进行重新扫描并标记；</p>\n<p>第四个阶段是并发清理阶段，进行并发的垃圾清理；</p>\n<p>最后一个阶段是并发重置阶段，为下一次 GC 重置相关数据结构。</p>\n<h1 id=\"并发与多线程\"><a href=\"#并发与多线程\" class=\"headerlink\" title=\"并发与多线程\"></a>并发与多线程</h1><p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721145520746.png\" alt=\"image-20220721145520746\"></p>\n<h2 id=\"线程状态转换\"><a href=\"#线程状态转换\" class=\"headerlink\" title=\"线程状态转换\"></a>线程状态转换</h2><p>线程是 JVM 执行任务的最小单元，理解线程的状态转换是理解后续多线程问题的基础。在 JVM 运行中，线程一共有 NEW、RUNNABLE、BLOCKED、WAITING、TIMED_WAITING、TERMINATED 六种状态，这些状态对应 Thread.State 枚举类中的状态。</p>\n<ol>\n<li><p>当创建一个线程时，线程处在 NEW 状态，运行 Thread 的 start 方法后，线程进入 RUNNABLE 可运行状态。</p>\n</li>\n<li><p>这时，所有可运行状态的线程并不能马上运行，而是需要先进入就绪状态等待线程调度，如图中间所示的 READY 状态。在获取 CPU 后才能进入运行状态，如图中所示的 RUNNING。运行状态可以随着不同条件转换成除 NEW 以外的其他状态。</p>\n</li>\n<li><p>在运行态中的线程进入 synchronized 同步块或者同步方法时，如果获取锁失败，则会进入到 BLOCKED 状态。当获取到锁后，会从 BLOCKED 状态恢复到就绪状态。</p>\n</li>\n<li><p>运行中的线程还会进入等待状态，这两个等待一个是有超时时间的等待，例如调用 Object.wait、Thread.join 等；另外一个是无超时的等待，例如调用 Thread.join 或者 Locksupport.park 等。这两种等待都可以通过 notify 或 unpark 结束等待状态并恢复到就绪状态。</p>\n</li>\n<li><p>线程运行完成结束时，线程状态变成 TERMINATED。</p>\n</li>\n</ol>\n<h2 id=\"CAS-与-ABA-问题\"><a href=\"#CAS-与-ABA-问题\" class=\"headerlink\" title=\"CAS 与 ABA 问题\"></a>CAS 与 ABA 问题</h2><p>线程的同步与互斥，解决线程同步与互斥的主要方式是 CAS、synchronized 和 lock。</p>\n<h3 id=\"CAS\"><a href=\"#CAS\" class=\"headerlink\" title=\"CAS\"></a>CAS</h3><p>CAS 是乐观锁的一种实现方式，是一种轻量级锁，JUC 中很多工具类的实现就是基于 CAS 的。CAS 操作的流程如下图所示，线程在读取数据时不进行加锁，在准备写回数据时，比较原值是否修改，若未被其他线程修改则写回，若已被修改，则重新执行读取流程。这是一种乐观策略，认为并发操作并不总会发生。</p>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721145530649.png\" alt=\"image-20220721145530649\"></p>\n<h3 id=\"ABA\"><a href=\"#ABA\" class=\"headerlink\" title=\"ABA\"></a>ABA</h3><p>CAS 容易出现 ABA 问题，就是如下面时序图所示，如果线程 T1 读取值 A 之后，发生两次写入，先由线程 T2 写回了 B，又由 T3 写回了 A，此时 T1 在写回比较时，值还是 A，就无法判断是否发生过修改。</p>\n<h2 id=\"synchronized\"><a href=\"#synchronized\" class=\"headerlink\" title=\"synchronized\"></a>synchronized</h2><p>synchronized 是最常用的线程同步手段之一，它是如何保证同一时刻只有一个线程可以进入临界区呢？</p>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721145540969.png\" alt=\"image-20220721145540969\"></p>\n<p>synchronized 对对象进行加锁，在 JVM 中，对象在内存中分为三块区域：对象头、实例数据和对齐填充。在对象头中保存了锁标志位和指向 monitor 对象的起始地址，如下图所示，右侧就是对象对应的 Monitor 对象。当 Monitor 被某个线程持有后，就会处于锁定状态，如图中的 Owner 部分，会指向持有 Monitor 对象的线程。另外 Monitor 中还有两个队列，用来存放进入及等待获取锁的线程。</p>\n<p>synchronized 应用在方法上时，在字节码中是通过方法的 ACC_SYNCHRONIZED 标志来实现的，synchronized 应用在同步块上时，在字节码中是通过 monitorenter 和 monitorexit 实现的。</p>\n<p>针对 synchronized 获取锁的方式，JVM 使用了锁升级的优化方式，就是先使用偏向锁优先同一线程然后再次获取锁，如果失败，就升级为 CAS 轻量级锁，如果失败就会短暂自旋，防止线程被系统挂起。最后如果以上都失败就升级为重量级锁。</p>\n<h2 id=\"线程池\"><a href=\"#线程池\" class=\"headerlink\" title=\"线程池\"></a>线程池</h2><p>线程池通过复用线程，避免线程频繁地创建和销毁。Java 的 Executors 工具类中提供了 5 种类型的线程池创建方法</p>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721145549875.png\" alt=\"image-20220721145549875\"></p>\n<h2 id=\"线程池初始化的时候有那些参数\"><a href=\"#线程池初始化的时候有那些参数\" class=\"headerlink\" title=\"线程池初始化的时候有那些参数\"></a>线程池初始化的时候有那些参数</h2><p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721145604527.png\" alt=\"image-20220721145604527\"></p>\n<p>第一个参数设置核心线程数。默认情况下核心线程会一直存活。</p>\n<p>第二个参数设置最大线程数。决定线程池最多可以创建的多少线程。</p>\n<p>第三个参数和第四个参数用来设置线程空闲时间，和空闲时间的单位，当线程闲置超过空闲时间就会被销毁。可以通过 allowCoreThreadTimeOut 方法来允许核心线程被回收。</p>\n<p>第五个参数设置缓冲队列，上图中左下方的三个队列是设置线程池时常使用的缓冲队列。其中 ArrayBlockingQueue 是一个有界队列，就是指队列有最大容量限制。LinkedBlockingQueue 是无界队列，就是队列不限制容量。最后一个是 SynchronousQueue，是一个同步队列，内部没有缓冲区。</p>\n<p>第六个参数设置线程池工厂方法，线程工厂用来创建新线程，可以用来对线程的一些属性进行定制，例如线程的 group、线程名、优先级等。一般使用默认工厂类即可。</p>\n<p>第七个参数设置线程池满时的拒绝策略。如上图右下方所示有四种策略，Abort 策略在线程池满后，提交新任务时会抛出 RejectedExecutionException，这个也是默认的拒绝策略。Discard 策略会在提交失败时对任务直接进行丢弃。CallerRuns 策略会在提交失败时，由提交任务的线程直接执行提交的任务。DiscardOldest 策略会丢弃最早提交的任务。</p>\n<h2 id=\"线程池执行流程\"><a href=\"#线程池执行流程\" class=\"headerlink\" title=\"线程池执行流程\"></a>线程池执行流程</h2><p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721145615170.png\" alt=\"image-20220721145615170\"></p>\n<p>向线程池提交任务时，会首先判断线程池中的线程数是否大于设置的核心线程数，如果不大于，就创建一个核心线程来执行任务。</p>\n<p>如果大于核心线程数，就会判断缓冲队列是否满了，如果没有满，则放入队列，等待线程空闲时执行任务。</p>\n<p>如果队列已经满了，则判断是否达到了线程池设置的最大线程数，如果没有达到，就创建新线程来执行任务。</p>\n<p>如果已经达到了最大线程数，则执行指定的拒绝策略。</p>\n<h1 id=\"数据结构与算法\"><a href=\"#数据结构与算法\" class=\"headerlink\" title=\"数据结构与算法\"></a>数据结构与算法</h1><p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721145623944.png\" alt=\"image-20220721145623944\"></p>\n<h2 id=\"二叉树\"><a href=\"#二叉树\" class=\"headerlink\" title=\"二叉树\"></a>二叉树</h2><p>二叉搜索树满足这样的条件，每个节点包含一个值，每个节点至多有两个子树。每个节点左子树节点的值都小于自身的值，每个节点右子树节点的值都大于自身的值。二叉树的查询时间复杂度是 log(N)，但是随着不断的插入、删除节点，二叉树的树高可能会不断变大，当一个二叉搜索树所有节点都只有左子树或者都只有右子树时，其查找性能就退化成线性的了。</p>\n<h3 id=\"平衡二叉树\"><a href=\"#平衡二叉树\" class=\"headerlink\" title=\"平衡二叉树\"></a>平衡二叉树</h3><p>平衡二叉树可以解决上面这个问题，平衡二叉树保证每个节点左右子树的高度差的绝对值不超过 1，例如 AVL 树。AVL 树是严格的平衡二叉树，插入或删除数据时可能经常需要旋转来保持平衡，比较适合插入、删除比较少的场景。</p>\n<h3 id=\"红黑树\"><a href=\"#红黑树\" class=\"headerlink\" title=\"红黑树\"></a>红黑树</h3><p>红黑树是一种更加实用的非严格的平衡二叉树。红黑树更关注局部平衡而非整体平衡，确保没有一条路径会比其他路径长出 2 倍，所以是接近平衡的，但减少了许多不必要的旋转操作，更加实用。前面提到过，Java 8 的 HashMap 中就应用了红黑树来解决散列冲突时的查找问题。TreeMap 也是通过红黑树来保证有序性的。</p>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721145633106.png\" alt=\"image-20220721145633106\"></p>\n<p>每个节点不是红色就是黑色。</p>\n<p>根节点是黑色。</p>\n<p>每个叶子节点都是黑色的空节点，如图中的黑色三角。</p>\n<p>红色节点的两个子节点都是黑色的。</p>\n<p>任意节点到其叶节点的每条路径上，包含相同数量的黑色节点。   </p>\n<h2 id=\"B-树\"><a href=\"#B-树\" class=\"headerlink\" title=\"B 树\"></a>B 树</h2><p>B 树是一种多叉树，也叫多路搜索树。B 树中每个节点可以存储多个元素，非常适合用在文件索引上，可以有效减少磁盘 IO 次数。B 树中所有结点的最大子节点数称为 B 树的阶，如下图所示是一棵 3 阶 B 树</p>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721145639957.png\" alt=\"image-20220721145639957\"></p>\n<p>非叶节点最多有 m 棵子树；</p>\n<p>根节点最少有两个子树，非根、非叶节点最少有 m&#x2F;2 棵子树；</p>\n<p>非叶子结点中保存的关键字个数，等于该节点子树个数−1，就是说一个节点如果有 3棵子树，那么其中必定包含 2 个关键字；</p>\n<h3 id=\"B-树-1\"><a href=\"#B-树-1\" class=\"headerlink\" title=\"B+ 树\"></a>B+ 树</h3><p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721145647121.png\" alt=\"image-20220721145647121\"></p>\n<p>B+ 树的定义与 B 树基本相同，除了下面这几个特点。</p>\n<pre><code>节点中的关键字与子树数目相同，比如节点中有 3 个关键字，那么就有 3 棵子树；\n\n关键字对应的子树中的节点都大于或等于关键字，子树中包括关键字自身；\n\n所有关键字都出现在叶子节点中；\n\n所有叶子节点都有指向下一个叶子节点的指针。\n\n与 B 树不同，B+ 树在搜索时不会在非叶子节点命中，一定会查询到叶子节点；另外一个，叶子节点相当于数据存储层，保存关键字对应的数据，而非叶子节点只保存关键字和指向叶节点的指针，不保存关键字对应的数据，所以同样数量关键字的非叶节点，B+ 树比 B 树要小很多。\n</code></pre>\n<h3 id=\"B-树更适合索引系统，MySQL-数据库的索引就提供了-B-树实现。\"><a href=\"#B-树更适合索引系统，MySQL-数据库的索引就提供了-B-树实现。\" class=\"headerlink\" title=\"B+ 树更适合索引系统，MySQL 数据库的索引就提供了 B+ 树实现。\"></a>B+ 树更适合索引系统，MySQL 数据库的索引就提供了 B+ 树实现。</h3><p>原因有三个：</p>\n<ul>\n<li><p>由于叶节点之间有指针相连，B+ 树更适合范围检索；</p>\n</li>\n<li><p>由于非页节点只保存关键字和指针，同样大小非叶节点，B+ 树可以容纳更多的关键字，可以降低树高，查询时磁盘读写代价更低；</p>\n</li>\n<li><p>B+ 树的查询效率比较稳定。任何关键字的查找必须走一条从根结点到叶子结点的路，所有关键字查询的路径长度相同，效率相当。</p>\n</li>\n</ul>\n<h1 id=\"Git-常用命令\"><a href=\"#Git-常用命令\" class=\"headerlink\" title=\"Git 常用命令\"></a>Git 常用命令</h1><h1 id=\"spring框架\"><a href=\"#spring框架\" class=\"headerlink\" title=\"spring框架\"></a>spring框架</h1><p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721145702793.png\" alt=\"image-20220721145702793\"></p>\n<p>图中红框框住的是比较重要的组件，Core 组件是 Spring 所有组件的核心；Bean 组件和 Context 组件我刚才提到了，是实现 IoC 和依赖注入的基础；AOP 组件用来实现面向切面编程；Web 组件包括 SpringMVC，是 Web 服务的控制层实现。</p>\n<p><strong>关于 AOP 还需要了解一下对应的 Aspect、pointcut、advice 等注解和具体使用方式。</strong></p>\n<h2 id=\"核心接口-x2F-类\"><a href=\"#核心接口-x2F-类\" class=\"headerlink\" title=\"核心接口&#x2F;类\"></a>核心接口&#x2F;类</h2><p>再来看图右上方需要重点掌握的核心类。</p>\n<pre><code>ApplicationContext 保存了 IoC 的整个应用上下文，可以通过其中的 BeanFactory 获取到任意到 Bean；\n\nBeanFactory 主要的作用是根据 Bean Definition 来创建具体的 Bean；\n\nBeanWrapper 是对 Bean 的包装，一般情况下是在 Spring IoC 内部使用，提供了访问 Bean 的属性值、属性编辑器注册、类型转换等功能，方便 IoC 容器用统一的方式来访问 Bean 的属性；\n\nFactoryBean 通过 getObject 方法返回实际的 Bean 对象，例如 Motan 框架中 referer 对 service 的动态代理就是通过 FactoryBean 来实现的。\n</code></pre>\n<h2 id=\"Scope\"><a href=\"#Scope\" class=\"headerlink\" title=\"Scope\"></a>Scope</h2><p>Bean 的 Scope 是指 Bean 的作用域，默认情况下是单例模式，这也是使用最多的一种方式；多例模式，即每次从 BeanFactory 中获取 Bean 都会创建一个新的 Bean。Request、Session、Global-session 是在 Web 服务中使用的 Scope。</p>\n<ul>\n<li><p>Request 每次请求都创建一个实例；</p>\n</li>\n<li><p>Session 是在一个会话周期内保证只有一个实例；</p>\n</li>\n<li><p>Global-session 在 5.x 版本中已经不再使用，同时增加了 Application 和 Websocket 两种Scope，分别保证在一个 ServletContext 与一个 WebSocket 中只创建一个实例。</p>\n</li>\n</ul>\n<p>@Component 注解在类上使用表明这个类是个组件类，需要 Spring 为这个类创建 Bean。</p>\n<p>@Bean 注解使用在方法上，告诉 Spring 这个方法将会返回一个 Bean 对象，需要把返回的对象注册到 Spring 的应用上下文中。</p>\n<h2 id=\"Bean-生命周期\"><a href=\"#Bean-生命周期\" class=\"headerlink\" title=\"Bean 生命周期\"></a>Bean 生命周期</h2><p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721145728884.png\" alt=\"image-20220721145728884\"></p>\n<p>调用 Bean 的构造方法创建 Bean；</p>\n<p>通过反射调用 setter 方法进行属性的依赖注入；</p>\n<p>如果实现 BeanNameAware 接口的话，会设置 Bean 的 name；</p>\n<p>如果实现了 BeanFactoryAware，会把 BeanFactory 设置给 Bean；</p>\n<p>如果实现了 ApplicationContextAware，会给 Bean 设置 ApplictionContext；</p>\n<p>如果实现了 BeanPostProcessor 接口，则执行前置处理方法；</p>\n<p>实现了 InitializingBean 接口的话，执行 afterPropertiesSet 方法；</p>\n<p>执行自定义的 init 方法；</p>\n<p>执行 BeanPostProcessor 接口的后置处理方法。</p>\n<h2 id=\"Spring-Boot\"><a href=\"#Spring-Boot\" class=\"headerlink\" title=\"Spring Boot\"></a>Spring Boot</h2><p> Spring Boot 的几个特色模块。</p>\n<p>Starter 是 Spring Boot 提供的无缝集成功能的一种方式，使用某个功能时开发者不需要关注各种依赖库的处理，不需要具体的配置信息，由 Spring Boot 自动配置进行 Bean的创建。例如需要使用 Web 功能时，只需要在依赖中引入 Spring-boot-starter-web 即可。</p>\n<p>Actuator 是用来对应用程序进行监视和管理，通过 RESTful API 请求来监管、审计、收集应用的运行情况。</p>\n<p>DevTools 提供了一系列开发工具的支持，来提高开发效率。例如热部署能力等。</p>\n<p>CLI 就是命令行接口，是一个命令行工具，支持使用 Groovy 脚本，可以快速搭建 Spring 原型项目。</p>\n<h2 id=\"MyBatis\"><a href=\"#MyBatis\" class=\"headerlink\" title=\"MyBatis\"></a>MyBatis</h2><p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721145743585.png\" alt=\"image-20220721145743585\"></p>\n<h2 id=\"能描述一下Spring-Context初始化的整个流程吗\"><a href=\"#能描述一下Spring-Context初始化的整个流程吗\" class=\"headerlink\" title=\"能描述一下Spring Context初始化的整个流程吗?\"></a>能描述一下Spring Context初始化的整个流程吗?</h2><h2 id=\"简单介绍一下Bean的生命周期及作用域。\"><a href=\"#简单介绍一下Bean的生命周期及作用域。\" class=\"headerlink\" title=\"简单介绍一下Bean的生命周期及作用域。\"></a>简单介绍一下Bean的生命周期及作用域。</h2>"},{"_content":"﻿﻿# Linuxs系统中修改配置文件使得访问java工程直接通过ip，除去端口号和项目名访问。\n---\n接上篇:[《阿里云服务器配置 + Linuxs系统安装 jdk、tomcat、MySQL汇总详细教程 + 项目上线发布中的部分小bug解决方案》](https://blog.huijia21.com/archives/a-li-yun-fu-wu-qi-pei-zhi-linuxs-xi-tong-an-zhuang-jdktomcatmysql-hui-zong-xiang-xi-jiao-cheng--xiang-mu-shang-xian-fa-bu-zhong-de-bu-fen-xiao-bug-jie-jue-fang-an)\n方法很多，这里只写一种我成功的！\n\n---\n\n1. 删除/usr/tomcat/tomcat8/webapps下的ROOT文件夹\n2. 将你的war包改名为ROOT.war\n3. 上传ROOT.war\n4. 进入你的conf->service.xml\n4. 修改端口号为80\n![image-20220509174919118](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509174919118.png)w)\n5. 在下面<Host>  </Host>中添加下面语句，位置填你的项目位置；\n`  <Context path=\"/\" docBase=\"ss\"/> `\n![image-20220509174955454](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509174955454.png)6.只输入ip访问下试试吧\n![image-20220509175007683](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509175007683.png)\n","source":"_posts/BookMark/运维/Centos中修改，访问java工程直接通过ip，除去端口号和项目名访问。 --菜鸟小回.md","raw":"﻿﻿# Linuxs系统中修改配置文件使得访问java工程直接通过ip，除去端口号和项目名访问。\n---\n接上篇:[《阿里云服务器配置 + Linuxs系统安装 jdk、tomcat、MySQL汇总详细教程 + 项目上线发布中的部分小bug解决方案》](https://blog.huijia21.com/archives/a-li-yun-fu-wu-qi-pei-zhi-linuxs-xi-tong-an-zhuang-jdktomcatmysql-hui-zong-xiang-xi-jiao-cheng--xiang-mu-shang-xian-fa-bu-zhong-de-bu-fen-xiao-bug-jie-jue-fang-an)\n方法很多，这里只写一种我成功的！\n\n---\n\n1. 删除/usr/tomcat/tomcat8/webapps下的ROOT文件夹\n2. 将你的war包改名为ROOT.war\n3. 上传ROOT.war\n4. 进入你的conf->service.xml\n4. 修改端口号为80\n![image-20220509174919118](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509174919118.png)w)\n5. 在下面<Host>  </Host>中添加下面语句，位置填你的项目位置；\n`  <Context path=\"/\" docBase=\"ss\"/> `\n![image-20220509174955454](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509174955454.png)6.只输入ip访问下试试吧\n![image-20220509175007683](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509175007683.png)\n","slug":"BookMark/运维/Centos中修改，访问java工程直接通过ip，除去端口号和项目名访问。 --菜鸟小回","published":1,"date":"2022-07-18T09:51:31.000Z","updated":"2022-09-01T10:02:40.536Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cl7ptszos002vaba55d10fs13","content":"<h1><span id=\"linuxs系统中修改配置文件使得访问java工程直接通过ip除去端口号和项目名访问\">Linuxs系统中修改配置文件使得访问java工程直接通过ip，除去端口号和项目名访问。</span></h1><hr>\n<p>接上篇:<a href=\"https://blog.huijia21.com/archives/a-li-yun-fu-wu-qi-pei-zhi-linuxs-xi-tong-an-zhuang-jdktomcatmysql-hui-zong-xiang-xi-jiao-cheng--xiang-mu-shang-xian-fa-bu-zhong-de-bu-fen-xiao-bug-jie-jue-fang-an\">《阿里云服务器配置 + Linuxs系统安装 jdk、tomcat、MySQL汇总详细教程 + 项目上线发布中的部分小bug解决方案》</a><br>方法很多，这里只写一种我成功的！</p>\n<hr>\n<ol>\n<li>删除&#x2F;usr&#x2F;tomcat&#x2F;tomcat8&#x2F;webapps下的ROOT文件夹</li>\n<li>将你的war包改名为ROOT.war</li>\n<li>上传ROOT.war</li>\n<li>进入你的conf-&gt;service.xml</li>\n<li>修改端口号为80<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509174919118.png\" alt=\"image-20220509174919118\">w)</li>\n<li>在下面<host>  </host>中添加下面语句，位置填你的项目位置；<br><code> &lt;Context path=&quot;/&quot; docBase=&quot;ss&quot;/&gt;</code><br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509174955454.png\" alt=\"image-20220509174955454\">6.只输入ip访问下试试吧<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509175007683.png\" alt=\"image-20220509175007683\"></li>\n</ol>\n","site":{"data":{}},"wordcount":336,"excerpt":"","more":"<h1 id=\"Linuxs系统中修改配置文件使得访问java工程直接通过ip，除去端口号和项目名访问。\"><a href=\"#Linuxs系统中修改配置文件使得访问java工程直接通过ip，除去端口号和项目名访问。\" class=\"headerlink\" title=\"Linuxs系统中修改配置文件使得访问java工程直接通过ip，除去端口号和项目名访问。\"></a>Linuxs系统中修改配置文件使得访问java工程直接通过ip，除去端口号和项目名访问。</h1><hr>\n<p>接上篇:<a href=\"https://blog.huijia21.com/archives/a-li-yun-fu-wu-qi-pei-zhi-linuxs-xi-tong-an-zhuang-jdktomcatmysql-hui-zong-xiang-xi-jiao-cheng--xiang-mu-shang-xian-fa-bu-zhong-de-bu-fen-xiao-bug-jie-jue-fang-an\">《阿里云服务器配置 + Linuxs系统安装 jdk、tomcat、MySQL汇总详细教程 + 项目上线发布中的部分小bug解决方案》</a><br>方法很多，这里只写一种我成功的！</p>\n<hr>\n<ol>\n<li>删除&#x2F;usr&#x2F;tomcat&#x2F;tomcat8&#x2F;webapps下的ROOT文件夹</li>\n<li>将你的war包改名为ROOT.war</li>\n<li>上传ROOT.war</li>\n<li>进入你的conf-&gt;service.xml</li>\n<li>修改端口号为80<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509174919118.png\" alt=\"image-20220509174919118\">w)</li>\n<li>在下面<Host>  </Host>中添加下面语句，位置填你的项目位置；<br><code> &lt;Context path=&quot;/&quot; docBase=&quot;ss&quot;/&gt;</code><br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509174955454.png\" alt=\"image-20220509174955454\">6.只输入ip访问下试试吧<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509175007683.png\" alt=\"image-20220509175007683\"></li>\n</ol>\n"},{"_content":"# CentOS7忘记密码,修改密码。\n1. 开机选择你要修改密码的系统\n![image-20220509175235812](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509175235812.png)\n2. 找到修改 `ro` 为 `rw` \n![image-20220509175243591](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509175243591.png)\n3. 本行最后继续添加 `init=/sysroot/bin/sh` \n![image-20220509175252768](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509175252768.png)\n4. ctrl+x 进入如下界面\n![image-20220509175300216](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509175300216.png)\n5.分别输入命令\n```javascript?linenums\n//进入系统环境里面\nchroot /sysroot \n//进入系统环境里面\npasswd root \n```\n![image-20220509175308615](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509175308615.png)\n\n6. 出现方框说明乱码\n```javascript?linenums\n//退出输入\nctrl+c\n//修改语言\nLANG=en\n//重新修改(root为你想修改的用户名)\npasswd root \n//创建开机项\ntouch /.autorelabel \n```\n7. 重启\n```javascript?linenums\n//退出当前模式\nexit\n// 重启\nreboot\n```\n![image-20220509175316969](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509175316969.png)\n<font color=red size=5>博主测试两台虚拟主机，均用上述方式两次成功修改。原因未知；如有一次修改无效的情况建议也再重复一次。如有解决办法，烦请告知。。。</font>\n","source":"_posts/BookMark/运维/CentOS7修改密码 --菜鸟小回.md","raw":"# CentOS7忘记密码,修改密码。\n1. 开机选择你要修改密码的系统\n![image-20220509175235812](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509175235812.png)\n2. 找到修改 `ro` 为 `rw` \n![image-20220509175243591](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509175243591.png)\n3. 本行最后继续添加 `init=/sysroot/bin/sh` \n![image-20220509175252768](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509175252768.png)\n4. ctrl+x 进入如下界面\n![image-20220509175300216](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509175300216.png)\n5.分别输入命令\n```javascript?linenums\n//进入系统环境里面\nchroot /sysroot \n//进入系统环境里面\npasswd root \n```\n![image-20220509175308615](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509175308615.png)\n\n6. 出现方框说明乱码\n```javascript?linenums\n//退出输入\nctrl+c\n//修改语言\nLANG=en\n//重新修改(root为你想修改的用户名)\npasswd root \n//创建开机项\ntouch /.autorelabel \n```\n7. 重启\n```javascript?linenums\n//退出当前模式\nexit\n// 重启\nreboot\n```\n![image-20220509175316969](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509175316969.png)\n<font color=red size=5>博主测试两台虚拟主机，均用上述方式两次成功修改。原因未知；如有一次修改无效的情况建议也再重复一次。如有解决办法，烦请告知。。。</font>\n","slug":"BookMark/运维/CentOS7修改密码 --菜鸟小回","published":1,"date":"2022-07-18T09:51:30.000Z","updated":"2022-09-01T10:02:40.547Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cl7ptszos002waba51q628b18","content":"<h1><span id=\"centos7忘记密码修改密码\">CentOS7忘记密码,修改密码。</span></h1><ol>\n<li><p>开机选择你要修改密码的系统<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509175235812.png\" alt=\"image-20220509175235812\"></p>\n</li>\n<li><p>找到修改 <code>ro</code> 为 <code>rw</code><br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509175243591.png\" alt=\"image-20220509175243591\"></p>\n</li>\n<li><p>本行最后继续添加 <code>init=/sysroot/bin/sh</code><br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509175252768.png\" alt=\"image-20220509175252768\"></p>\n</li>\n<li><p>ctrl+x 进入如下界面<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509175300216.png\" alt=\"image-20220509175300216\"><br>5.分别输入命令</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">//进入系统环境里面<br>chroot /sysroot <br>//进入系统环境里面<br>passwd root <br></code></pre></td></tr></table></figure>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509175308615.png\" alt=\"image-20220509175308615\"></p>\n</li>\n<li><p>出现方框说明乱码</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">//退出输入<br>ctrl+c<br>//修改语言<br>LANG=en<br>//重新修改(root为你想修改的用户名)<br>passwd root <br>//创建开机项<br>touch /.autorelabel <br></code></pre></td></tr></table></figure></li>\n<li><p>重启</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">//退出当前模式<br>exit<br>// 重启<br>reboot<br></code></pre></td></tr></table></figure>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509175316969.png\" alt=\"image-20220509175316969\"><br><font color=\"red\" size=\"5\">博主测试两台虚拟主机，均用上述方式两次成功修改。原因未知；如有一次修改无效的情况建议也再重复一次。如有解决办法，烦请告知。。。</font></p>\n</li>\n</ol>\n","site":{"data":{}},"wordcount":323,"excerpt":"","more":"<h1 id=\"CentOS7忘记密码-修改密码。\"><a href=\"#CentOS7忘记密码-修改密码。\" class=\"headerlink\" title=\"CentOS7忘记密码,修改密码。\"></a>CentOS7忘记密码,修改密码。</h1><ol>\n<li><p>开机选择你要修改密码的系统<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509175235812.png\" alt=\"image-20220509175235812\"></p>\n</li>\n<li><p>找到修改 <code>ro</code> 为 <code>rw</code><br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509175243591.png\" alt=\"image-20220509175243591\"></p>\n</li>\n<li><p>本行最后继续添加 <code>init=/sysroot/bin/sh</code><br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509175252768.png\" alt=\"image-20220509175252768\"></p>\n</li>\n<li><p>ctrl+x 进入如下界面<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509175300216.png\" alt=\"image-20220509175300216\"><br>5.分别输入命令</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">//进入系统环境里面<br>chroot /sysroot <br>//进入系统环境里面<br>passwd root <br></code></pre></td></tr></table></figure>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509175308615.png\" alt=\"image-20220509175308615\"></p>\n</li>\n<li><p>出现方框说明乱码</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">//退出输入<br>ctrl+c<br>//修改语言<br>LANG=en<br>//重新修改(root为你想修改的用户名)<br>passwd root <br>//创建开机项<br>touch /.autorelabel <br></code></pre></td></tr></table></figure></li>\n<li><p>重启</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">//退出当前模式<br>exit<br>// 重启<br>reboot<br></code></pre></td></tr></table></figure>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509175316969.png\" alt=\"image-20220509175316969\"><br><font color=red size=5>博主测试两台虚拟主机，均用上述方式两次成功修改。原因未知；如有一次修改无效的情况建议也再重复一次。如有解决办法，烦请告知。。。</font></p>\n</li>\n</ol>\n"},{"_content":"# Jenkins脚本集\n---\n\n## windows常用\n### 1. 后台运行指令\n```javascript?linenums\n// 1.后台运行bat\nstart ./a.bat\n// 2.后接运行指令\nif \"%1\" == \"h\" goto begin \n\tmshta vbscript:createobject(\"wscript.shell\").run(\"%~nx0 h\",0)(window.close)&&exit \n::begin 后跟指令\n//3.以管理员运行bat\n%1 start \"\" mshta vbscript:CreateObject(\"Shell.Application\").ShellExecute(\"cmd.exe\",\"/c \"\"%~s0\"\" ::\",\"\",\"runas\",1)(window.close)&&exit\n::begin 后跟指令\n```\n### 2.复制\n```javascript?linenums\nXCOPY \"C:\\JavaBarTenderPrint\\jacob\\jacob-1.19-x86.dll\"  \"C:\\Program Files\\Java\\jdk1.8.0_261\\bin\" /y\n```\n### 3.关闭某端口进程\n```javascript?linenums\n@echo off\nsetlocal enabledelayedexpansion\n::set port=8082\nset /p port=Please enter the port :\nfor /f \"tokens=1-5\" %%a in ('netstat -ano ^| find \":%port%\"') do (\n    if \"%%e%\" == \"\" (\n        set pid=%%d\n    ) else (\n        set pid=%%e\n    )\n    echo !pid!\n    taskkill /f /pid !pid!\n)\npause\n\n```\n---\n## jenkis-windows\n### 一、nginx、redis重启\n```javascript?linenums\n::设置启动后不杀死\nset BUILD_ID=dontKillMe \n\ntaskkill -f -t -im redis-server.exe\nping -n 3 127.0.0.1>nul\n\ntaskkill -f -t -im nginx.exe\nping -n 3 127.0.0.1>nul\n\n::=========================nginx===============================\necho now run the nginx...\ncd C:\\opt\\nginx\\nginx-1.12.2\nstart nginx\nping -n 3 127.0.0.1>nul\n\n::=========================redis===============================\necho now run the redis...\ncd C:\\opt\\redis\nstart .\\redis-server.exe .\\redis.windows.conf\nping -n 3 127.0.0.1>nul\n```\n\n### 二、gtoa-jar\n\n```javascript?linenums\n::防止启动后被杀死进程\nset BUILD_ID=dontKillMe \n\n@echo off\nsetlocal enabledelayedexpansion\n\n::设置端口 \nset PORT=8082\n\n:: 设置生成路径\nset OLD_PATH=C:\\Windows\\system32\\config\\systemprofile\\AppData\\Local\\Jenkins\\.jenkins\\workspace\\gtoa\\target\n\n:: 设置新的存放路径\nset NEW_PATH=C:\\out\n\n:: 设置jar包名\nset JAR_NAME=gtoa-0.0.1-SNAPSHOT.jar\n\n::set /p port=Please enter the port ：\nfor /f \"tokens=1-5\" %%a in ('netstat -ano ^| find \":%PORT%\"') do (\n    if \"%%e%\" == \"\" (\n        set pid=%%d\n    ) else (\n        set pid=%%e\n    )\n    echo !pid!\n    taskkill /f /pid !pid!\n)\n\n::复制文件\nXCOPY %OLD_PATH%\\%JAR_NAME%  \"%NEW_PATH%\" /y\n\n::启动jar包\nstart javaw -jar %NEW_PATH%\\%JAR_NAME%\n```\n### 三、gtoa-ui\n```javascript?linenums\n//************************************************************1********************************************************\n::防止启动后被杀死进程\nset BUILD_ID=dontKillMe \n\n:: 设置生成路径\nset OLD_PATH=C:\\Windows\\System32\\config\\systemprofile\\AppData\\Local\\Jenkins\\.jenkins\\workspace\\gtoa-ui\n\ncd %OLD_PATH%\nnpm install\n\n//************************************************************2********************************************************\n::防止启动后被杀死进程\nset BUILD_ID=dontKillMe \n\n:: 设置生成路径\nset OLD_PATH=C:\\Windows\\System32\\config\\systemprofile\\AppData\\Local\\Jenkins\\.jenkins\\workspace\\gtoa-ui\n\nrd /s /q %OLD_PATH%\\dist\n:: 编译\nnpm run build\n\n//************************************************************3********************************************************\n:: 设置新的存放路径\nset NEW_PATH=C:\\out\\gtoa\\dist\\\n\n:: 设置生成路径\nset OLD_PATH=C:\\Windows\\System32\\config\\systemprofile\\AppData\\Local\\Jenkins\\.jenkins\\workspace\\gtoa-ui\n\nrd /s /q %NEW_PATH%\n\nxcopy %OLD_PATH%\\dist \"%NEW_PATH%\" /e /y\n```\n## jenkins-centos\n### 一、gtoa\n```javascript?linenums\n#export BUILD_ID=dontKillMe这一句很重要，这样指定了，项目启动之后才不会被Jenkins杀掉。\nexport BUILD_ID=dontKillMe\n\n#指定最后编译好的jar存放的位置\nwww_path=/out\n\n#Jenkins中编译好的jar位置\njar_path=/var/lib/jenkins/workspace/gtoa/target\n\n#Jenkins中编译好的jar名称\njar_name=gtoa-0.0.1-SNAPSHOT.jar\n\n#获取运行编译好的进程ID，便于我们在重新部署项目的时候先杀掉以前的进程\npid=$(cat /out/demo.pid)\n\n#进入指定的编译好的jar的位置\ncd  ${jar_path}\n\n#将编译好的jar复制到最后指定的位置\ncp  ${jar_path}/${jar_name} ${www_path}\n\n#进入最后指定存放jar的位置\ncd  ${www_path}\n\n#杀掉以前可能启动的项目进程\nkill -9 ${pid}\n\n#启动jar，指定SpringBoot的profiles为test,后台启动\nnohup java -jar ${jar_name} &\n\n\n#将进程ID存入到shaw-web.pid文件中\necho $! > /out/demo.pid\n```\n## java-ui-windows\n```javascript?linenums\n//1start-server.bat\ntaskkill -f -t -im redis-server.exe\nping -n 3 127.0.0.1>nul\ntaskkill -f -t -im nginx.exe\nping -n 3 127.0.0.1>nul\ntaskkill -f -t -im java.exe\nping -n 5 127.0.0.1>nul\n\n::=========================nginx===============================\necho now run the nginx...\ncd C:\\opt\\nginx\\nginx-1.12.2\nstart nginx\nping -n 3 127.0.0.1>nul\n\n::=========================redis===============================\necho now run the redis...\ncd C:\\opt\\redis\n.\\redis-server.exe .\\redis.windows.conf &\nping -n 3 127.0.0.1>nul\n\n//2start-download-ui.bat\n::=========================download new i-mes ui===============================\nrd /s /q C:\\out\\ui-front-end\nrd /s /q C:\\out\\dist\ncd C:\\out\ngit clone https://gitee.com/henan_ruihong_information/ui-front-end.git\nping -n 5 127.0.0.1>nul\ncd C:\\out\\ui-front-end\nnpm install\n\n//3start-dowmload-jar.bat\n::=========================download new i-mes jar===============================\nrd /s /q c:\\out\\back-end-warehouse\ncd C:\\out\ngit clone https://gitee.com/henan_ruihong_information/back-end-warehouse.git --branch dev\ncd c:\\out\\back-end-warehouse\nmvn clean package -P dev\nping -n 5 127.0.0.1>nul\n\n//4.4start-jar.bat\necho now run the i-mes jar...\ncd C:\\out\\back-end-warehouse\\target\njava -jar -Dspring.profiles.active=dev i_mes-0.0.1-SNAPSHOT.jar > C:\\out/project_log.log\n\n//5start-ui-build.bat\ncd C:\\out\\ui-front-end\nnpm run build\n\n//start-server.vbs\nSet Ws = CreateObject(\"Wscript.Shell\")\nWs.Run(\"1start-server.bat\"),0\nwscript.sleep 10000\nWs.Run(\"2start-download-ui.bat\"),0\nwscript.sleep 30000\nWs.Run(\"3start-dowmload-jar.bat\"),0\nwscript.sleep 30000\nWs.Run(\"4start-jar.bat\"),0\nwscript.sleep 30000\nWs.Run(\"5start-ui-build.bat\"),0\n```","source":"_posts/BookMark/运维/Jenkins脚本集.md","raw":"# Jenkins脚本集\n---\n\n## windows常用\n### 1. 后台运行指令\n```javascript?linenums\n// 1.后台运行bat\nstart ./a.bat\n// 2.后接运行指令\nif \"%1\" == \"h\" goto begin \n\tmshta vbscript:createobject(\"wscript.shell\").run(\"%~nx0 h\",0)(window.close)&&exit \n::begin 后跟指令\n//3.以管理员运行bat\n%1 start \"\" mshta vbscript:CreateObject(\"Shell.Application\").ShellExecute(\"cmd.exe\",\"/c \"\"%~s0\"\" ::\",\"\",\"runas\",1)(window.close)&&exit\n::begin 后跟指令\n```\n### 2.复制\n```javascript?linenums\nXCOPY \"C:\\JavaBarTenderPrint\\jacob\\jacob-1.19-x86.dll\"  \"C:\\Program Files\\Java\\jdk1.8.0_261\\bin\" /y\n```\n### 3.关闭某端口进程\n```javascript?linenums\n@echo off\nsetlocal enabledelayedexpansion\n::set port=8082\nset /p port=Please enter the port :\nfor /f \"tokens=1-5\" %%a in ('netstat -ano ^| find \":%port%\"') do (\n    if \"%%e%\" == \"\" (\n        set pid=%%d\n    ) else (\n        set pid=%%e\n    )\n    echo !pid!\n    taskkill /f /pid !pid!\n)\npause\n\n```\n---\n## jenkis-windows\n### 一、nginx、redis重启\n```javascript?linenums\n::设置启动后不杀死\nset BUILD_ID=dontKillMe \n\ntaskkill -f -t -im redis-server.exe\nping -n 3 127.0.0.1>nul\n\ntaskkill -f -t -im nginx.exe\nping -n 3 127.0.0.1>nul\n\n::=========================nginx===============================\necho now run the nginx...\ncd C:\\opt\\nginx\\nginx-1.12.2\nstart nginx\nping -n 3 127.0.0.1>nul\n\n::=========================redis===============================\necho now run the redis...\ncd C:\\opt\\redis\nstart .\\redis-server.exe .\\redis.windows.conf\nping -n 3 127.0.0.1>nul\n```\n\n### 二、gtoa-jar\n\n```javascript?linenums\n::防止启动后被杀死进程\nset BUILD_ID=dontKillMe \n\n@echo off\nsetlocal enabledelayedexpansion\n\n::设置端口 \nset PORT=8082\n\n:: 设置生成路径\nset OLD_PATH=C:\\Windows\\system32\\config\\systemprofile\\AppData\\Local\\Jenkins\\.jenkins\\workspace\\gtoa\\target\n\n:: 设置新的存放路径\nset NEW_PATH=C:\\out\n\n:: 设置jar包名\nset JAR_NAME=gtoa-0.0.1-SNAPSHOT.jar\n\n::set /p port=Please enter the port ：\nfor /f \"tokens=1-5\" %%a in ('netstat -ano ^| find \":%PORT%\"') do (\n    if \"%%e%\" == \"\" (\n        set pid=%%d\n    ) else (\n        set pid=%%e\n    )\n    echo !pid!\n    taskkill /f /pid !pid!\n)\n\n::复制文件\nXCOPY %OLD_PATH%\\%JAR_NAME%  \"%NEW_PATH%\" /y\n\n::启动jar包\nstart javaw -jar %NEW_PATH%\\%JAR_NAME%\n```\n### 三、gtoa-ui\n```javascript?linenums\n//************************************************************1********************************************************\n::防止启动后被杀死进程\nset BUILD_ID=dontKillMe \n\n:: 设置生成路径\nset OLD_PATH=C:\\Windows\\System32\\config\\systemprofile\\AppData\\Local\\Jenkins\\.jenkins\\workspace\\gtoa-ui\n\ncd %OLD_PATH%\nnpm install\n\n//************************************************************2********************************************************\n::防止启动后被杀死进程\nset BUILD_ID=dontKillMe \n\n:: 设置生成路径\nset OLD_PATH=C:\\Windows\\System32\\config\\systemprofile\\AppData\\Local\\Jenkins\\.jenkins\\workspace\\gtoa-ui\n\nrd /s /q %OLD_PATH%\\dist\n:: 编译\nnpm run build\n\n//************************************************************3********************************************************\n:: 设置新的存放路径\nset NEW_PATH=C:\\out\\gtoa\\dist\\\n\n:: 设置生成路径\nset OLD_PATH=C:\\Windows\\System32\\config\\systemprofile\\AppData\\Local\\Jenkins\\.jenkins\\workspace\\gtoa-ui\n\nrd /s /q %NEW_PATH%\n\nxcopy %OLD_PATH%\\dist \"%NEW_PATH%\" /e /y\n```\n## jenkins-centos\n### 一、gtoa\n```javascript?linenums\n#export BUILD_ID=dontKillMe这一句很重要，这样指定了，项目启动之后才不会被Jenkins杀掉。\nexport BUILD_ID=dontKillMe\n\n#指定最后编译好的jar存放的位置\nwww_path=/out\n\n#Jenkins中编译好的jar位置\njar_path=/var/lib/jenkins/workspace/gtoa/target\n\n#Jenkins中编译好的jar名称\njar_name=gtoa-0.0.1-SNAPSHOT.jar\n\n#获取运行编译好的进程ID，便于我们在重新部署项目的时候先杀掉以前的进程\npid=$(cat /out/demo.pid)\n\n#进入指定的编译好的jar的位置\ncd  ${jar_path}\n\n#将编译好的jar复制到最后指定的位置\ncp  ${jar_path}/${jar_name} ${www_path}\n\n#进入最后指定存放jar的位置\ncd  ${www_path}\n\n#杀掉以前可能启动的项目进程\nkill -9 ${pid}\n\n#启动jar，指定SpringBoot的profiles为test,后台启动\nnohup java -jar ${jar_name} &\n\n\n#将进程ID存入到shaw-web.pid文件中\necho $! > /out/demo.pid\n```\n## java-ui-windows\n```javascript?linenums\n//1start-server.bat\ntaskkill -f -t -im redis-server.exe\nping -n 3 127.0.0.1>nul\ntaskkill -f -t -im nginx.exe\nping -n 3 127.0.0.1>nul\ntaskkill -f -t -im java.exe\nping -n 5 127.0.0.1>nul\n\n::=========================nginx===============================\necho now run the nginx...\ncd C:\\opt\\nginx\\nginx-1.12.2\nstart nginx\nping -n 3 127.0.0.1>nul\n\n::=========================redis===============================\necho now run the redis...\ncd C:\\opt\\redis\n.\\redis-server.exe .\\redis.windows.conf &\nping -n 3 127.0.0.1>nul\n\n//2start-download-ui.bat\n::=========================download new i-mes ui===============================\nrd /s /q C:\\out\\ui-front-end\nrd /s /q C:\\out\\dist\ncd C:\\out\ngit clone https://gitee.com/henan_ruihong_information/ui-front-end.git\nping -n 5 127.0.0.1>nul\ncd C:\\out\\ui-front-end\nnpm install\n\n//3start-dowmload-jar.bat\n::=========================download new i-mes jar===============================\nrd /s /q c:\\out\\back-end-warehouse\ncd C:\\out\ngit clone https://gitee.com/henan_ruihong_information/back-end-warehouse.git --branch dev\ncd c:\\out\\back-end-warehouse\nmvn clean package -P dev\nping -n 5 127.0.0.1>nul\n\n//4.4start-jar.bat\necho now run the i-mes jar...\ncd C:\\out\\back-end-warehouse\\target\njava -jar -Dspring.profiles.active=dev i_mes-0.0.1-SNAPSHOT.jar > C:\\out/project_log.log\n\n//5start-ui-build.bat\ncd C:\\out\\ui-front-end\nnpm run build\n\n//start-server.vbs\nSet Ws = CreateObject(\"Wscript.Shell\")\nWs.Run(\"1start-server.bat\"),0\nwscript.sleep 10000\nWs.Run(\"2start-download-ui.bat\"),0\nwscript.sleep 30000\nWs.Run(\"3start-dowmload-jar.bat\"),0\nwscript.sleep 30000\nWs.Run(\"4start-jar.bat\"),0\nwscript.sleep 30000\nWs.Run(\"5start-ui-build.bat\"),0\n```","slug":"BookMark/运维/Jenkins脚本集","published":1,"date":"2022-07-18T09:51:31.000Z","updated":"2022-07-18T09:51:31.000Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cl7ptszos002xaba5ca7nfxcz","content":"<h1><span id=\"jenkins脚本集\">Jenkins脚本集</span></h1><hr>\n<h2><span id=\"windows常用\">windows常用</span></h2><h3><span id=\"1-后台运行指令\">1. 后台运行指令</span></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">// 1.后台运行bat<br>start ./a.bat<br>// 2.后接运行指令<br>if &quot;%1&quot; == &quot;h&quot; goto begin <br>\tmshta vbscript:createobject(&quot;wscript.shell&quot;).run(&quot;%~nx0 h&quot;,0)(window.close)&amp;&amp;exit <br>::begin 后跟指令<br>//3.以管理员运行bat<br>%1 start &quot;&quot; mshta vbscript:CreateObject(&quot;Shell.Application&quot;).ShellExecute(&quot;cmd.exe&quot;,&quot;/c &quot;&quot;%~s0&quot;&quot; ::&quot;,&quot;&quot;,&quot;runas&quot;,1)(window.close)&amp;&amp;exit<br>::begin 后跟指令<br></code></pre></td></tr></table></figure>\n<h3><span id=\"2复制\">2.复制</span></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">XCOPY &quot;C:\\JavaBarTenderPrint\\jacob\\jacob-1.19-x86.dll&quot;  &quot;C:\\Program Files\\Java\\jdk1.8.0_261\\bin&quot; /y<br></code></pre></td></tr></table></figure>\n<h3><span id=\"3关闭某端口进程\">3.关闭某端口进程</span></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">@echo off<br>setlocal enabledelayedexpansion<br>::set port=8082<br>set /p port=Please enter the port :<br>for /f &quot;tokens=1-5&quot; %%a in (&#x27;netstat -ano ^| find &quot;:%port%&quot;&#x27;) do (<br>    if &quot;%%e%&quot; == &quot;&quot; (<br>        set pid=%%d<br>    ) else (<br>        set pid=%%e<br>    )<br>    echo !pid!<br>    taskkill /f /pid !pid!<br>)<br>pause<br><br></code></pre></td></tr></table></figure>\n<hr>\n<h2><span id=\"jenkis-windows\">jenkis-windows</span></h2><h3><span id=\"一-nginx-redis重启\">一、nginx、redis重启</span></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">::设置启动后不杀死<br>set BUILD_ID=dontKillMe <br><br>taskkill -f -t -im redis-server.exe<br>ping -n 3 127.0.0.1&gt;nul<br><br>taskkill -f -t -im nginx.exe<br>ping -n 3 127.0.0.1&gt;nul<br><br>::=========================nginx===============================<br>echo now run the nginx...<br>cd C:\\opt\\nginx\\nginx-1.12.2<br>start nginx<br>ping -n 3 127.0.0.1&gt;nul<br><br>::=========================redis===============================<br>echo now run the redis...<br>cd C:\\opt\\redis<br>start .\\redis-server.exe .\\redis.windows.conf<br>ping -n 3 127.0.0.1&gt;nul<br></code></pre></td></tr></table></figure>\n\n<h3><span id=\"二-gtoa-jar\">二、gtoa-jar</span></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">::防止启动后被杀死进程<br>set BUILD_ID=dontKillMe <br><br>@echo off<br>setlocal enabledelayedexpansion<br><br>::设置端口 <br>set PORT=8082<br><br>:: 设置生成路径<br>set OLD_PATH=C:\\Windows\\system32\\config\\systemprofile\\AppData\\Local\\Jenkins\\.jenkins\\workspace\\gtoa\\target<br><br>:: 设置新的存放路径<br>set NEW_PATH=C:\\out<br><br>:: 设置jar包名<br>set JAR_NAME=gtoa-0.0.1-SNAPSHOT.jar<br><br>::set /p port=Please enter the port ：<br>for /f &quot;tokens=1-5&quot; %%a in (&#x27;netstat -ano ^| find &quot;:%PORT%&quot;&#x27;) do (<br>    if &quot;%%e%&quot; == &quot;&quot; (<br>        set pid=%%d<br>    ) else (<br>        set pid=%%e<br>    )<br>    echo !pid!<br>    taskkill /f /pid !pid!<br>)<br><br>::复制文件<br>XCOPY %OLD_PATH%\\%JAR_NAME%  &quot;%NEW_PATH%&quot; /y<br><br>::启动jar包<br>start javaw -jar %NEW_PATH%\\%JAR_NAME%<br></code></pre></td></tr></table></figure>\n<h3><span id=\"三-gtoa-ui\">三、gtoa-ui</span></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">//************************************************************1********************************************************<br>::防止启动后被杀死进程<br>set BUILD_ID=dontKillMe <br><br>:: 设置生成路径<br>set OLD_PATH=C:\\Windows\\System32\\config\\systemprofile\\AppData\\Local\\Jenkins\\.jenkins\\workspace\\gtoa-ui<br><br>cd %OLD_PATH%<br>npm install<br><br>//************************************************************2********************************************************<br>::防止启动后被杀死进程<br>set BUILD_ID=dontKillMe <br><br>:: 设置生成路径<br>set OLD_PATH=C:\\Windows\\System32\\config\\systemprofile\\AppData\\Local\\Jenkins\\.jenkins\\workspace\\gtoa-ui<br><br>rd /s /q %OLD_PATH%\\dist<br>:: 编译<br>npm run build<br><br>//************************************************************3********************************************************<br>:: 设置新的存放路径<br>set NEW_PATH=C:\\out\\gtoa\\dist\\<br><br>:: 设置生成路径<br>set OLD_PATH=C:\\Windows\\System32\\config\\systemprofile\\AppData\\Local\\Jenkins\\.jenkins\\workspace\\gtoa-ui<br><br>rd /s /q %NEW_PATH%<br><br>xcopy %OLD_PATH%\\dist &quot;%NEW_PATH%&quot; /e /y<br></code></pre></td></tr></table></figure>\n<h2><span id=\"jenkins-centos\">jenkins-centos</span></h2><h3><span id=\"一-gtoa\">一、gtoa</span></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">#export BUILD_ID=dontKillMe这一句很重要，这样指定了，项目启动之后才不会被Jenkins杀掉。<br>export BUILD_ID=dontKillMe<br><br>#指定最后编译好的jar存放的位置<br>www_path=/out<br><br>#Jenkins中编译好的jar位置<br>jar_path=/var/lib/jenkins/workspace/gtoa/target<br><br>#Jenkins中编译好的jar名称<br>jar_name=gtoa-0.0.1-SNAPSHOT.jar<br><br>#获取运行编译好的进程ID，便于我们在重新部署项目的时候先杀掉以前的进程<br>pid=$(cat /out/demo.pid)<br><br>#进入指定的编译好的jar的位置<br>cd  $&#123;jar_path&#125;<br><br>#将编译好的jar复制到最后指定的位置<br>cp  $&#123;jar_path&#125;/$&#123;jar_name&#125; $&#123;www_path&#125;<br><br>#进入最后指定存放jar的位置<br>cd  $&#123;www_path&#125;<br><br>#杀掉以前可能启动的项目进程<br>kill -9 $&#123;pid&#125;<br><br>#启动jar，指定SpringBoot的profiles为test,后台启动<br>nohup java -jar $&#123;jar_name&#125; &amp;<br><br><br>#将进程ID存入到shaw-web.pid文件中<br>echo $! &gt; /out/demo.pid<br></code></pre></td></tr></table></figure>\n<h2><span id=\"java-ui-windows\">java-ui-windows</span></h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">//1start-server.bat<br>taskkill -f -t -im redis-server.exe<br>ping -n 3 127.0.0.1&gt;nul<br>taskkill -f -t -im nginx.exe<br>ping -n 3 127.0.0.1&gt;nul<br>taskkill -f -t -im java.exe<br>ping -n 5 127.0.0.1&gt;nul<br><br>::=========================nginx===============================<br>echo now run the nginx...<br>cd C:\\opt\\nginx\\nginx-1.12.2<br>start nginx<br>ping -n 3 127.0.0.1&gt;nul<br><br>::=========================redis===============================<br>echo now run the redis...<br>cd C:\\opt\\redis<br>.\\redis-server.exe .\\redis.windows.conf &amp;<br>ping -n 3 127.0.0.1&gt;nul<br><br>//2start-download-ui.bat<br>::=========================download new i-mes ui===============================<br>rd /s /q C:\\out\\ui-front-end<br>rd /s /q C:\\out\\dist<br>cd C:\\out<br>git clone https://gitee.com/henan_ruihong_information/ui-front-end.git<br>ping -n 5 127.0.0.1&gt;nul<br>cd C:\\out\\ui-front-end<br>npm install<br><br>//3start-dowmload-jar.bat<br>::=========================download new i-mes jar===============================<br>rd /s /q c:\\out\\back-end-warehouse<br>cd C:\\out<br>git clone https://gitee.com/henan_ruihong_information/back-end-warehouse.git --branch dev<br>cd c:\\out\\back-end-warehouse<br>mvn clean package -P dev<br>ping -n 5 127.0.0.1&gt;nul<br><br>//4.4start-jar.bat<br>echo now run the i-mes jar...<br>cd C:\\out\\back-end-warehouse\\target<br>java -jar -Dspring.profiles.active=dev i_mes-0.0.1-SNAPSHOT.jar &gt; C:\\out/project_log.log<br><br>//5start-ui-build.bat<br>cd C:\\out\\ui-front-end<br>npm run build<br><br>//start-server.vbs<br>Set Ws = CreateObject(&quot;Wscript.Shell&quot;)<br>Ws.Run(&quot;1start-server.bat&quot;),0<br>wscript.sleep 10000<br>Ws.Run(&quot;2start-download-ui.bat&quot;),0<br>wscript.sleep 30000<br>Ws.Run(&quot;3start-dowmload-jar.bat&quot;),0<br>wscript.sleep 30000<br>Ws.Run(&quot;4start-jar.bat&quot;),0<br>wscript.sleep 30000<br>Ws.Run(&quot;5start-ui-build.bat&quot;),0<br></code></pre></td></tr></table></figure>","site":{"data":{}},"wordcount":5406,"excerpt":"","more":"<h1 id=\"Jenkins脚本集\"><a href=\"#Jenkins脚本集\" class=\"headerlink\" title=\"Jenkins脚本集\"></a>Jenkins脚本集</h1><hr>\n<h2 id=\"windows常用\"><a href=\"#windows常用\" class=\"headerlink\" title=\"windows常用\"></a>windows常用</h2><h3 id=\"1-后台运行指令\"><a href=\"#1-后台运行指令\" class=\"headerlink\" title=\"1. 后台运行指令\"></a>1. 后台运行指令</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">// 1.后台运行bat<br>start ./a.bat<br>// 2.后接运行指令<br>if &quot;%1&quot; == &quot;h&quot; goto begin <br>\tmshta vbscript:createobject(&quot;wscript.shell&quot;).run(&quot;%~nx0 h&quot;,0)(window.close)&amp;&amp;exit <br>::begin 后跟指令<br>//3.以管理员运行bat<br>%1 start &quot;&quot; mshta vbscript:CreateObject(&quot;Shell.Application&quot;).ShellExecute(&quot;cmd.exe&quot;,&quot;/c &quot;&quot;%~s0&quot;&quot; ::&quot;,&quot;&quot;,&quot;runas&quot;,1)(window.close)&amp;&amp;exit<br>::begin 后跟指令<br></code></pre></td></tr></table></figure>\n<h3 id=\"2-复制\"><a href=\"#2-复制\" class=\"headerlink\" title=\"2.复制\"></a>2.复制</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">XCOPY &quot;C:\\JavaBarTenderPrint\\jacob\\jacob-1.19-x86.dll&quot;  &quot;C:\\Program Files\\Java\\jdk1.8.0_261\\bin&quot; /y<br></code></pre></td></tr></table></figure>\n<h3 id=\"3-关闭某端口进程\"><a href=\"#3-关闭某端口进程\" class=\"headerlink\" title=\"3.关闭某端口进程\"></a>3.关闭某端口进程</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">@echo off<br>setlocal enabledelayedexpansion<br>::set port=8082<br>set /p port=Please enter the port :<br>for /f &quot;tokens=1-5&quot; %%a in (&#x27;netstat -ano ^| find &quot;:%port%&quot;&#x27;) do (<br>    if &quot;%%e%&quot; == &quot;&quot; (<br>        set pid=%%d<br>    ) else (<br>        set pid=%%e<br>    )<br>    echo !pid!<br>    taskkill /f /pid !pid!<br>)<br>pause<br><br></code></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"jenkis-windows\"><a href=\"#jenkis-windows\" class=\"headerlink\" title=\"jenkis-windows\"></a>jenkis-windows</h2><h3 id=\"一、nginx、redis重启\"><a href=\"#一、nginx、redis重启\" class=\"headerlink\" title=\"一、nginx、redis重启\"></a>一、nginx、redis重启</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">::设置启动后不杀死<br>set BUILD_ID=dontKillMe <br><br>taskkill -f -t -im redis-server.exe<br>ping -n 3 127.0.0.1&gt;nul<br><br>taskkill -f -t -im nginx.exe<br>ping -n 3 127.0.0.1&gt;nul<br><br>::=========================nginx===============================<br>echo now run the nginx...<br>cd C:\\opt\\nginx\\nginx-1.12.2<br>start nginx<br>ping -n 3 127.0.0.1&gt;nul<br><br>::=========================redis===============================<br>echo now run the redis...<br>cd C:\\opt\\redis<br>start .\\redis-server.exe .\\redis.windows.conf<br>ping -n 3 127.0.0.1&gt;nul<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"二、gtoa-jar\"><a href=\"#二、gtoa-jar\" class=\"headerlink\" title=\"二、gtoa-jar\"></a>二、gtoa-jar</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">::防止启动后被杀死进程<br>set BUILD_ID=dontKillMe <br><br>@echo off<br>setlocal enabledelayedexpansion<br><br>::设置端口 <br>set PORT=8082<br><br>:: 设置生成路径<br>set OLD_PATH=C:\\Windows\\system32\\config\\systemprofile\\AppData\\Local\\Jenkins\\.jenkins\\workspace\\gtoa\\target<br><br>:: 设置新的存放路径<br>set NEW_PATH=C:\\out<br><br>:: 设置jar包名<br>set JAR_NAME=gtoa-0.0.1-SNAPSHOT.jar<br><br>::set /p port=Please enter the port ：<br>for /f &quot;tokens=1-5&quot; %%a in (&#x27;netstat -ano ^| find &quot;:%PORT%&quot;&#x27;) do (<br>    if &quot;%%e%&quot; == &quot;&quot; (<br>        set pid=%%d<br>    ) else (<br>        set pid=%%e<br>    )<br>    echo !pid!<br>    taskkill /f /pid !pid!<br>)<br><br>::复制文件<br>XCOPY %OLD_PATH%\\%JAR_NAME%  &quot;%NEW_PATH%&quot; /y<br><br>::启动jar包<br>start javaw -jar %NEW_PATH%\\%JAR_NAME%<br></code></pre></td></tr></table></figure>\n<h3 id=\"三、gtoa-ui\"><a href=\"#三、gtoa-ui\" class=\"headerlink\" title=\"三、gtoa-ui\"></a>三、gtoa-ui</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">//************************************************************1********************************************************<br>::防止启动后被杀死进程<br>set BUILD_ID=dontKillMe <br><br>:: 设置生成路径<br>set OLD_PATH=C:\\Windows\\System32\\config\\systemprofile\\AppData\\Local\\Jenkins\\.jenkins\\workspace\\gtoa-ui<br><br>cd %OLD_PATH%<br>npm install<br><br>//************************************************************2********************************************************<br>::防止启动后被杀死进程<br>set BUILD_ID=dontKillMe <br><br>:: 设置生成路径<br>set OLD_PATH=C:\\Windows\\System32\\config\\systemprofile\\AppData\\Local\\Jenkins\\.jenkins\\workspace\\gtoa-ui<br><br>rd /s /q %OLD_PATH%\\dist<br>:: 编译<br>npm run build<br><br>//************************************************************3********************************************************<br>:: 设置新的存放路径<br>set NEW_PATH=C:\\out\\gtoa\\dist\\<br><br>:: 设置生成路径<br>set OLD_PATH=C:\\Windows\\System32\\config\\systemprofile\\AppData\\Local\\Jenkins\\.jenkins\\workspace\\gtoa-ui<br><br>rd /s /q %NEW_PATH%<br><br>xcopy %OLD_PATH%\\dist &quot;%NEW_PATH%&quot; /e /y<br></code></pre></td></tr></table></figure>\n<h2 id=\"jenkins-centos\"><a href=\"#jenkins-centos\" class=\"headerlink\" title=\"jenkins-centos\"></a>jenkins-centos</h2><h3 id=\"一、gtoa\"><a href=\"#一、gtoa\" class=\"headerlink\" title=\"一、gtoa\"></a>一、gtoa</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">#export BUILD_ID=dontKillMe这一句很重要，这样指定了，项目启动之后才不会被Jenkins杀掉。<br>export BUILD_ID=dontKillMe<br><br>#指定最后编译好的jar存放的位置<br>www_path=/out<br><br>#Jenkins中编译好的jar位置<br>jar_path=/var/lib/jenkins/workspace/gtoa/target<br><br>#Jenkins中编译好的jar名称<br>jar_name=gtoa-0.0.1-SNAPSHOT.jar<br><br>#获取运行编译好的进程ID，便于我们在重新部署项目的时候先杀掉以前的进程<br>pid=$(cat /out/demo.pid)<br><br>#进入指定的编译好的jar的位置<br>cd  $&#123;jar_path&#125;<br><br>#将编译好的jar复制到最后指定的位置<br>cp  $&#123;jar_path&#125;/$&#123;jar_name&#125; $&#123;www_path&#125;<br><br>#进入最后指定存放jar的位置<br>cd  $&#123;www_path&#125;<br><br>#杀掉以前可能启动的项目进程<br>kill -9 $&#123;pid&#125;<br><br>#启动jar，指定SpringBoot的profiles为test,后台启动<br>nohup java -jar $&#123;jar_name&#125; &amp;<br><br><br>#将进程ID存入到shaw-web.pid文件中<br>echo $! &gt; /out/demo.pid<br></code></pre></td></tr></table></figure>\n<h2 id=\"java-ui-windows\"><a href=\"#java-ui-windows\" class=\"headerlink\" title=\"java-ui-windows\"></a>java-ui-windows</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">//1start-server.bat<br>taskkill -f -t -im redis-server.exe<br>ping -n 3 127.0.0.1&gt;nul<br>taskkill -f -t -im nginx.exe<br>ping -n 3 127.0.0.1&gt;nul<br>taskkill -f -t -im java.exe<br>ping -n 5 127.0.0.1&gt;nul<br><br>::=========================nginx===============================<br>echo now run the nginx...<br>cd C:\\opt\\nginx\\nginx-1.12.2<br>start nginx<br>ping -n 3 127.0.0.1&gt;nul<br><br>::=========================redis===============================<br>echo now run the redis...<br>cd C:\\opt\\redis<br>.\\redis-server.exe .\\redis.windows.conf &amp;<br>ping -n 3 127.0.0.1&gt;nul<br><br>//2start-download-ui.bat<br>::=========================download new i-mes ui===============================<br>rd /s /q C:\\out\\ui-front-end<br>rd /s /q C:\\out\\dist<br>cd C:\\out<br>git clone https://gitee.com/henan_ruihong_information/ui-front-end.git<br>ping -n 5 127.0.0.1&gt;nul<br>cd C:\\out\\ui-front-end<br>npm install<br><br>//3start-dowmload-jar.bat<br>::=========================download new i-mes jar===============================<br>rd /s /q c:\\out\\back-end-warehouse<br>cd C:\\out<br>git clone https://gitee.com/henan_ruihong_information/back-end-warehouse.git --branch dev<br>cd c:\\out\\back-end-warehouse<br>mvn clean package -P dev<br>ping -n 5 127.0.0.1&gt;nul<br><br>//4.4start-jar.bat<br>echo now run the i-mes jar...<br>cd C:\\out\\back-end-warehouse\\target<br>java -jar -Dspring.profiles.active=dev i_mes-0.0.1-SNAPSHOT.jar &gt; C:\\out/project_log.log<br><br>//5start-ui-build.bat<br>cd C:\\out\\ui-front-end<br>npm run build<br><br>//start-server.vbs<br>Set Ws = CreateObject(&quot;Wscript.Shell&quot;)<br>Ws.Run(&quot;1start-server.bat&quot;),0<br>wscript.sleep 10000<br>Ws.Run(&quot;2start-download-ui.bat&quot;),0<br>wscript.sleep 30000<br>Ws.Run(&quot;3start-dowmload-jar.bat&quot;),0<br>wscript.sleep 30000<br>Ws.Run(&quot;4start-jar.bat&quot;),0<br>wscript.sleep 30000<br>Ws.Run(&quot;5start-ui-build.bat&quot;),0<br></code></pre></td></tr></table></figure>"},{"_content":"git clone https://gitee.com/idse666666/bbs.git\ngit remote -v\ngit remote rename origin hbq\ngit commit -m \"less test\" -a\ngit push origin hbq_dev:hbq_dev","source":"_posts/BookMark/运维/git.md","raw":"git clone https://gitee.com/idse666666/bbs.git\ngit remote -v\ngit remote rename origin hbq\ngit commit -m \"less test\" -a\ngit push origin hbq_dev:hbq_dev","slug":"BookMark/运维/git","published":1,"date":"2022-08-18T08:18:16.369Z","updated":"2022-08-18T08:19:33.848Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cl7ptszot002yaba58iye0mhi","content":"<p>git clone <a href=\"https://gitee.com/idse666666/bbs.git\">https://gitee.com/idse666666/bbs.git</a><br>git remote -v<br>git remote rename origin hbq<br>git commit -m “less test” -a<br>git push origin hbq_dev:hbq_dev</p>\n","site":{"data":{}},"wordcount":130,"excerpt":"","more":"<p>git clone <a href=\"https://gitee.com/idse666666/bbs.git\">https://gitee.com/idse666666/bbs.git</a><br>git remote -v<br>git remote rename origin hbq<br>git commit -m “less test” -a<br>git push origin hbq_dev:hbq_dev</p>\n"},{"_content":"# idea中spring boot配置一键docker\n\n---\n\n[TOC]\n\n## 一、远程连接\n\n![image-20220429175358706](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220429175358706.png)\n\n## 二、编写Dockerfile\n\n```\nFROM openjdk:11.0.4\nADD /target/cms-0.0.1-SNAPSHOT.jar  /cms.jar\nEXPOSE 8089\nENTRYPOINT [\"java\",\"-Xms1024m\",\"-Xmx1024m\",\"-jar\",\"/cms.jar\",\"--spring.profiles.active=dev\",\"-c\"]\n```\n\n![image-20220328160515506](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220328160515506.png)\n\n## 三、pom.xml添加依赖\n\n```\n<properties>\n    <docker.image.prefix>baoqihui</docker.image.prefix>\n</properties>\n<build>\n    <plugins>\n        <plugin>\n            <groupId>com.spotify</groupId>\n            <artifactId>docker-maven-plugin</artifactId>\n            <version>1.1.0</version>\n            <configuration>\n                <imageName>\n                    ${docker.image.prefix}/${project.artifactId}\n                </imageName>\n                <dockerDirectory></dockerDirectory>\n                <resources>\n                    <resource>\n                        <targetPath>/</targetPath>\n                        <directory>${project.build.directory}</directory>\n                        <include>${project.build.finalName}.jar</include>\n                    </resource>\n                </resources>\n            </configuration>\n        </plugin>\n    </plugins>\n</build>\n```\n\n## 四、配置构建信息（打包后构建）\n\n![image-20220329153202494](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220329153202494.png)\n\n## 五、重启idea-构建成功并自动部署\n\n![image-20220328162039475](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220328162039475.png)\n\n","source":"_posts/BookMark/运维/idea中spring boot配置一键docker.md","raw":"# idea中spring boot配置一键docker\n\n---\n\n[TOC]\n\n## 一、远程连接\n\n![image-20220429175358706](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220429175358706.png)\n\n## 二、编写Dockerfile\n\n```\nFROM openjdk:11.0.4\nADD /target/cms-0.0.1-SNAPSHOT.jar  /cms.jar\nEXPOSE 8089\nENTRYPOINT [\"java\",\"-Xms1024m\",\"-Xmx1024m\",\"-jar\",\"/cms.jar\",\"--spring.profiles.active=dev\",\"-c\"]\n```\n\n![image-20220328160515506](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220328160515506.png)\n\n## 三、pom.xml添加依赖\n\n```\n<properties>\n    <docker.image.prefix>baoqihui</docker.image.prefix>\n</properties>\n<build>\n    <plugins>\n        <plugin>\n            <groupId>com.spotify</groupId>\n            <artifactId>docker-maven-plugin</artifactId>\n            <version>1.1.0</version>\n            <configuration>\n                <imageName>\n                    ${docker.image.prefix}/${project.artifactId}\n                </imageName>\n                <dockerDirectory></dockerDirectory>\n                <resources>\n                    <resource>\n                        <targetPath>/</targetPath>\n                        <directory>${project.build.directory}</directory>\n                        <include>${project.build.finalName}.jar</include>\n                    </resource>\n                </resources>\n            </configuration>\n        </plugin>\n    </plugins>\n</build>\n```\n\n## 四、配置构建信息（打包后构建）\n\n![image-20220329153202494](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220329153202494.png)\n\n## 五、重启idea-构建成功并自动部署\n\n![image-20220328162039475](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220328162039475.png)\n\n","slug":"BookMark/运维/idea中spring boot配置一键docker","published":1,"date":"2022-07-25T05:51:43.000Z","updated":"2022-09-01T10:02:40.518Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cl7ptszot002zaba580fwh4sq","content":"<h1><span id=\"idea中spring-boot配置一键docker\">idea中spring boot配置一键docker</span></h1><hr>\n<p>[TOC]</p>\n<h2><span id=\"一-远程连接\">一、远程连接</span></h2><p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220429175358706.png\" alt=\"image-20220429175358706\"></p>\n<h2><span id=\"二-编写dockerfile\">二、编写Dockerfile</span></h2><figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dockerfile\"><span class=\"hljs-keyword\">FROM</span> openjdk:<span class=\"hljs-number\">11.0</span>.<span class=\"hljs-number\">4</span><br><span class=\"hljs-keyword\">ADD</span><span class=\"language-bash\"> /target/cms-0.0.1-SNAPSHOT.jar  /cms.jar</span><br><span class=\"hljs-keyword\">EXPOSE</span> <span class=\"hljs-number\">8089</span><br><span class=\"hljs-keyword\">ENTRYPOINT</span><span class=\"language-bash\"> [<span class=\"hljs-string\">&quot;java&quot;</span>,<span class=\"hljs-string\">&quot;-Xms1024m&quot;</span>,<span class=\"hljs-string\">&quot;-Xmx1024m&quot;</span>,<span class=\"hljs-string\">&quot;-jar&quot;</span>,<span class=\"hljs-string\">&quot;/cms.jar&quot;</span>,<span class=\"hljs-string\">&quot;--spring.profiles.active=dev&quot;</span>,<span class=\"hljs-string\">&quot;-c&quot;</span>]</span><br></code></pre></td></tr></table></figure>\n\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220328160515506.png\" alt=\"image-20220328160515506\"></p>\n<h2><span id=\"三-pomxml添加依赖\">三、pom.xml添加依赖</span></h2><figure class=\"highlight dust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dust\"><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">properties</span>&gt;</span></span><br><span class=\"language-xml\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">docker.image.prefix</span>&gt;</span>baoqihui<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">docker.image.prefix</span>&gt;</span></span><br><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">properties</span>&gt;</span></span><br><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">build</span>&gt;</span></span><br><span class=\"language-xml\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">plugins</span>&gt;</span></span><br><span class=\"language-xml\">        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">plugin</span>&gt;</span></span><br><span class=\"language-xml\">            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>com.spotify<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span></span><br><span class=\"language-xml\">            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>docker-maven-plugin<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span></span><br><span class=\"language-xml\">            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>1.1.0<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span></span><br><span class=\"language-xml\">            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">configuration</span>&gt;</span></span><br><span class=\"language-xml\">                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">imageName</span>&gt;</span></span><br><span class=\"language-xml\">                    $</span><span class=\"hljs-template-variable\">&#123;docker.image.prefix&#125;</span><span class=\"language-xml\">/$</span><span class=\"hljs-template-variable\">&#123;project.artifactId&#125;</span><span class=\"language-xml\"></span><br><span class=\"language-xml\">                <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">imageName</span>&gt;</span></span><br><span class=\"language-xml\">                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dockerDirectory</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dockerDirectory</span>&gt;</span></span><br><span class=\"language-xml\">                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">resources</span>&gt;</span></span><br><span class=\"language-xml\">                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">resource</span>&gt;</span></span><br><span class=\"language-xml\">                        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">targetPath</span>&gt;</span>/<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">targetPath</span>&gt;</span></span><br><span class=\"language-xml\">                        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">directory</span>&gt;</span>$</span><span class=\"hljs-template-variable\">&#123;project.build.directory&#125;</span><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">directory</span>&gt;</span></span><br><span class=\"language-xml\">                        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">include</span>&gt;</span>$</span><span class=\"hljs-template-variable\">&#123;project.build.finalName&#125;</span><span class=\"language-xml\">.jar<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">include</span>&gt;</span></span><br><span class=\"language-xml\">                    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">resource</span>&gt;</span></span><br><span class=\"language-xml\">                <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">resources</span>&gt;</span></span><br><span class=\"language-xml\">            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">configuration</span>&gt;</span></span><br><span class=\"language-xml\">        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">plugin</span>&gt;</span></span><br><span class=\"language-xml\">    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">plugins</span>&gt;</span></span><br><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">build</span>&gt;</span></span><br></code></pre></td></tr></table></figure>\n\n<h2><span id=\"四-配置构建信息打包后构建\">四、配置构建信息（打包后构建）</span></h2><p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220329153202494.png\" alt=\"image-20220329153202494\"></p>\n<h2><span id=\"五-重启idea-构建成功并自动部署\">五、重启idea-构建成功并自动部署</span></h2><p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220328162039475.png\" alt=\"image-20220328162039475\"></p>\n","site":{"data":{}},"wordcount":1134,"excerpt":"","more":"<h1 id=\"idea中spring-boot配置一键docker\"><a href=\"#idea中spring-boot配置一键docker\" class=\"headerlink\" title=\"idea中spring boot配置一键docker\"></a>idea中spring boot配置一键docker</h1><hr>\n<p>[TOC]</p>\n<h2 id=\"一、远程连接\"><a href=\"#一、远程连接\" class=\"headerlink\" title=\"一、远程连接\"></a>一、远程连接</h2><p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220429175358706.png\" alt=\"image-20220429175358706\"></p>\n<h2 id=\"二、编写Dockerfile\"><a href=\"#二、编写Dockerfile\" class=\"headerlink\" title=\"二、编写Dockerfile\"></a>二、编写Dockerfile</h2><figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dockerfile\"><span class=\"hljs-keyword\">FROM</span> openjdk:<span class=\"hljs-number\">11.0</span>.<span class=\"hljs-number\">4</span><br><span class=\"hljs-keyword\">ADD</span><span class=\"language-bash\"> /target/cms-0.0.1-SNAPSHOT.jar  /cms.jar</span><br><span class=\"hljs-keyword\">EXPOSE</span> <span class=\"hljs-number\">8089</span><br><span class=\"hljs-keyword\">ENTRYPOINT</span><span class=\"language-bash\"> [<span class=\"hljs-string\">&quot;java&quot;</span>,<span class=\"hljs-string\">&quot;-Xms1024m&quot;</span>,<span class=\"hljs-string\">&quot;-Xmx1024m&quot;</span>,<span class=\"hljs-string\">&quot;-jar&quot;</span>,<span class=\"hljs-string\">&quot;/cms.jar&quot;</span>,<span class=\"hljs-string\">&quot;--spring.profiles.active=dev&quot;</span>,<span class=\"hljs-string\">&quot;-c&quot;</span>]</span><br></code></pre></td></tr></table></figure>\n\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220328160515506.png\" alt=\"image-20220328160515506\"></p>\n<h2 id=\"三、pom-xml添加依赖\"><a href=\"#三、pom-xml添加依赖\" class=\"headerlink\" title=\"三、pom.xml添加依赖\"></a>三、pom.xml添加依赖</h2><figure class=\"highlight dust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dust\"><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">properties</span>&gt;</span></span><br><span class=\"language-xml\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">docker.image.prefix</span>&gt;</span>baoqihui<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">docker.image.prefix</span>&gt;</span></span><br><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">properties</span>&gt;</span></span><br><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">build</span>&gt;</span></span><br><span class=\"language-xml\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">plugins</span>&gt;</span></span><br><span class=\"language-xml\">        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">plugin</span>&gt;</span></span><br><span class=\"language-xml\">            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>com.spotify<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span></span><br><span class=\"language-xml\">            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>docker-maven-plugin<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span></span><br><span class=\"language-xml\">            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>1.1.0<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span></span><br><span class=\"language-xml\">            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">configuration</span>&gt;</span></span><br><span class=\"language-xml\">                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">imageName</span>&gt;</span></span><br><span class=\"language-xml\">                    $</span><span class=\"hljs-template-variable\">&#123;docker.image.prefix&#125;</span><span class=\"language-xml\">/$</span><span class=\"hljs-template-variable\">&#123;project.artifactId&#125;</span><span class=\"language-xml\"></span><br><span class=\"language-xml\">                <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">imageName</span>&gt;</span></span><br><span class=\"language-xml\">                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dockerDirectory</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dockerDirectory</span>&gt;</span></span><br><span class=\"language-xml\">                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">resources</span>&gt;</span></span><br><span class=\"language-xml\">                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">resource</span>&gt;</span></span><br><span class=\"language-xml\">                        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">targetPath</span>&gt;</span>/<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">targetPath</span>&gt;</span></span><br><span class=\"language-xml\">                        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">directory</span>&gt;</span>$</span><span class=\"hljs-template-variable\">&#123;project.build.directory&#125;</span><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">directory</span>&gt;</span></span><br><span class=\"language-xml\">                        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">include</span>&gt;</span>$</span><span class=\"hljs-template-variable\">&#123;project.build.finalName&#125;</span><span class=\"language-xml\">.jar<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">include</span>&gt;</span></span><br><span class=\"language-xml\">                    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">resource</span>&gt;</span></span><br><span class=\"language-xml\">                <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">resources</span>&gt;</span></span><br><span class=\"language-xml\">            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">configuration</span>&gt;</span></span><br><span class=\"language-xml\">        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">plugin</span>&gt;</span></span><br><span class=\"language-xml\">    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">plugins</span>&gt;</span></span><br><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">build</span>&gt;</span></span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"四、配置构建信息（打包后构建）\"><a href=\"#四、配置构建信息（打包后构建）\" class=\"headerlink\" title=\"四、配置构建信息（打包后构建）\"></a>四、配置构建信息（打包后构建）</h2><p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220329153202494.png\" alt=\"image-20220329153202494\"></p>\n<h2 id=\"五、重启idea-构建成功并自动部署\"><a href=\"#五、重启idea-构建成功并自动部署\" class=\"headerlink\" title=\"五、重启idea-构建成功并自动部署\"></a>五、重启idea-构建成功并自动部署</h2><p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220328162039475.png\" alt=\"image-20220328162039475\"></p>\n"},{"_content":"# VMware中centos7网络配置（桥接自定义ip）\n1. 虚拟机设置->网络适配器->桥接模式\n![image-20220509174335340](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509174335340.png)\n2. 查看寄主机的网络设置-> cmd模式->ipconfig\n![image-20220509174341999](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509174341999.png)\n3. 进入centos编辑\" ifcfg-ens33\"文件\n```javascript?linenums\nvi /etc/sysconfig/network-scripts/ifcfg-ens33\n//修改红色区内容\nBOOTPROTO=static\nONBOOT=yes\n//新增黄色区内容；IPADDR：就是ip保持频段与寄主机相同；GATEWAY：就是网关，直接保持与寄主机相同，DNS固定即可。\nIPADDR=192.168.1.250\nGATEWAY=192.168.1.1\nDNS1=114.114.114.114\nDNS2=8.8.8.8\n```\n![image-20220509174346845](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509174346845.png)\n\n 4. 编辑\"resolv.conf\"文件\n ```javascript?linenums\nvi /etc/resolv.conf\n//添加如下内容即可\nnameserver 114.114.114.114\nnameserver 8.8.8.8\n ```\n\n5. 重启network;`service network restart`\n\n---\n附加命令：\n```javascript?linenums\n查看防火墙状态：firewall-cmd --state\n停止防火墙服务：systemctl stop firewalld.service\n进制开机自启动：systemctl disable firewalld.service\n```","source":"_posts/BookMark/运维/VMware中centos7网络配置（桥接自定义ip）.md","raw":"# VMware中centos7网络配置（桥接自定义ip）\n1. 虚拟机设置->网络适配器->桥接模式\n![image-20220509174335340](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509174335340.png)\n2. 查看寄主机的网络设置-> cmd模式->ipconfig\n![image-20220509174341999](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509174341999.png)\n3. 进入centos编辑\" ifcfg-ens33\"文件\n```javascript?linenums\nvi /etc/sysconfig/network-scripts/ifcfg-ens33\n//修改红色区内容\nBOOTPROTO=static\nONBOOT=yes\n//新增黄色区内容；IPADDR：就是ip保持频段与寄主机相同；GATEWAY：就是网关，直接保持与寄主机相同，DNS固定即可。\nIPADDR=192.168.1.250\nGATEWAY=192.168.1.1\nDNS1=114.114.114.114\nDNS2=8.8.8.8\n```\n![image-20220509174346845](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509174346845.png)\n\n 4. 编辑\"resolv.conf\"文件\n ```javascript?linenums\nvi /etc/resolv.conf\n//添加如下内容即可\nnameserver 114.114.114.114\nnameserver 8.8.8.8\n ```\n\n5. 重启network;`service network restart`\n\n---\n附加命令：\n```javascript?linenums\n查看防火墙状态：firewall-cmd --state\n停止防火墙服务：systemctl stop firewalld.service\n进制开机自启动：systemctl disable firewalld.service\n```","slug":"BookMark/运维/VMware中centos7网络配置（桥接自定义ip）","published":1,"date":"2022-07-25T05:51:42.000Z","updated":"2022-09-01T10:02:40.538Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cl7ptszot0030aba56r3s792u","content":"<h1><span id=\"vmware中centos7网络配置桥接自定义ip\">VMware中centos7网络配置（桥接自定义ip）</span></h1><ol>\n<li><p>虚拟机设置-&gt;网络适配器-&gt;桥接模式<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509174335340.png\" alt=\"image-20220509174335340\"></p>\n</li>\n<li><p>查看寄主机的网络设置-&gt; cmd模式-&gt;ipconfig<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509174341999.png\" alt=\"image-20220509174341999\"></p>\n</li>\n<li><p>进入centos编辑” ifcfg-ens33”文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">vi /etc/sysconfig/network-scripts/ifcfg-ens33<br>//修改红色区内容<br>BOOTPROTO=static<br>ONBOOT=yes<br>//新增黄色区内容；IPADDR：就是ip保持频段与寄主机相同；GATEWAY：就是网关，直接保持与寄主机相同，DNS固定即可。<br>IPADDR=192.168.1.250<br>GATEWAY=192.168.1.1<br>DNS1=114.114.114.114<br>DNS2=8.8.8.8<br></code></pre></td></tr></table></figure>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509174346845.png\" alt=\"image-20220509174346845\"></p>\n</li>\n<li><p>编辑”resolv.conf”文件</p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">vi /etc/resolv.conf<br>//添加如下内容即可<br>nameserver 114.114.114.114<br>nameserver 8.8.8.8<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>重启network;<code>service network restart</code></p>\n</li>\n</ol>\n<hr>\n<p>附加命令：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">查看防火墙状态：firewall-cmd --state<br>停止防火墙服务：systemctl stop firewalld.service<br>进制开机自启动：systemctl disable firewalld.service<br></code></pre></td></tr></table></figure>","site":{"data":{}},"wordcount":568,"excerpt":"","more":"<h1 id=\"VMware中centos7网络配置（桥接自定义ip）\"><a href=\"#VMware中centos7网络配置（桥接自定义ip）\" class=\"headerlink\" title=\"VMware中centos7网络配置（桥接自定义ip）\"></a>VMware中centos7网络配置（桥接自定义ip）</h1><ol>\n<li><p>虚拟机设置-&gt;网络适配器-&gt;桥接模式<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509174335340.png\" alt=\"image-20220509174335340\"></p>\n</li>\n<li><p>查看寄主机的网络设置-&gt; cmd模式-&gt;ipconfig<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509174341999.png\" alt=\"image-20220509174341999\"></p>\n</li>\n<li><p>进入centos编辑” ifcfg-ens33”文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">vi /etc/sysconfig/network-scripts/ifcfg-ens33<br>//修改红色区内容<br>BOOTPROTO=static<br>ONBOOT=yes<br>//新增黄色区内容；IPADDR：就是ip保持频段与寄主机相同；GATEWAY：就是网关，直接保持与寄主机相同，DNS固定即可。<br>IPADDR=192.168.1.250<br>GATEWAY=192.168.1.1<br>DNS1=114.114.114.114<br>DNS2=8.8.8.8<br></code></pre></td></tr></table></figure>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509174346845.png\" alt=\"image-20220509174346845\"></p>\n</li>\n<li><p>编辑”resolv.conf”文件</p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">vi /etc/resolv.conf<br>//添加如下内容即可<br>nameserver 114.114.114.114<br>nameserver 8.8.8.8<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>重启network;<code>service network restart</code></p>\n</li>\n</ol>\n<hr>\n<p>附加命令：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">查看防火墙状态：firewall-cmd --state<br>停止防火墙服务：systemctl stop firewalld.service<br>进制开机自启动：systemctl disable firewalld.service<br></code></pre></td></tr></table></figure>"},{"_content":"# 云服务器伪分布式hadoop配置+javaAPI上传下载删除操纵（踩坑总结）\n---\n<font color=red size=5>注：本博文主要针对单台云服务器hadoop安装配置。博主使用阿里云的ECS服务器,Centos7系统，公网ip：120.27.244.176 私网ip：172.16.236.135 安全组开放所有端口，即1/65535</font>\n\n---\n## 一、准备\n1. 创建：`mkdir -p /opt/hadoop`\n2. 进入：`cd -p /opt/hadoop`\n3. 上传：\n4. 解压：`tar -zxvf hadoop-2.7.3.tar.gz `\n5. 配置hosts：\n```javascript?linenums\nvi  /etc/hosts\n//必须添加内网ip\n172.16.236.135 hadoop.idse.top\n```\n6. 配置环境变量\n```javascript?linenums\nvi /etc/profile\n//添加环境变量\n#配置hadoop\nexport HADOOP_HOME=/opt/hadoop/hadoop-2.7.3\nexport PATH=$PATH:$HADOOP_HOME/bin\n//刷新配置\nsource /etc/profile\n```\n---\n## 二、 配置hadoop\n1. 修改hadoop-env.sh\n```javascript?linenums\ncd /opt/hadoop/hadoop-2.7.3/etc/hadoop/\nvi hadoop-env.sh\n//找到并修改\nexport JAVA_HOME=/opt/java/jdk1.8.0_141\n```\n![image-20220721144649332](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721144649332.png)\n\n2. 修改core-site.xml\n```javascript?linenums\nvi core-site.xml\n//注意域名端口改为自己的hosts中设置\n<property>\n\t<name>fs.defaultFS</name>\n\t<value>hdfs://hadoop.idse.top:9000</value>\n</property>\n<!-- 指定hadoop运行时产生文件的存储目录 -->\n<property>\n\t<name>hadoop.tmp.dir</name>\n\t<value>/zhiyou/hadoop/tmp</value>\n</property>\n```\n![image-20220721144658404](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721144658404.png)\n\n3. 配置hdfs-site.xml\n```javascript?linenums\nvi hdfs-site.xml\n<property>\n\t<name>dfs.replication</name>\n\t<value>1</value>\n</property>\n```\n4. 配置yarn-site.xml\n```javascript?linenums\nvi yarn-site.xml\n//注意修改域名配置\n<property>\n\t<name>yarn.resourcemanager.hostname</name>\n\t<value>hadoop.idse.top</value>\n</property>\n<!-- reducer获取数据的方式 -->\n<property>\n\t<name>yarn.nodemanager.aux-services</name>\n\t<value>mapreduce_shuffle</value>\n</property>\n```\n![image-20220721144706165](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721144706165.png)\n\n5. 配置mapred-site.xml\n```javascript?linenums\nmv mapred-site.xml.template mapred-site.xml\nvi mapred-site.xml\n<property>\n\t<name>mapreduce.framework.name</name>\n\t<value>yarn</value>\n</property>\n```\n6. 启动\n```javascript?linenums\ncd /opt/hadoop/hadoop-2.7.3/sbin/\n./start-all.sh \n```\n7. 查看进程：`jps`\n![image-20220721144715625](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721144715625.png)\n8. 浏览器访问（公网ip+端口）：`120.27.244.176:50070`\n![image-20220721144724721](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721144724721.png)\n\n<font color=red size=5>坑1：未成功访问请去安全组开放端口，自行百度hadoop所需端口，博主全开。 </font>\n---\n## 三、javaAPI上传下载文件测试\n```javascript?linenums\n@Test//上传\npublic void upload() throws IOException, InterruptedException, URISyntaxException{\n\t//1.实例化configuration\n\tConfiguration conf = new Configuration();\n\t/*云服务器必须配置*/\n\tconf.set(\"dfs.replication\", \"1\");\n\tconf.set(\"dfs.client.use.datanode.hostname\", \"true\");\n\t//2.获取文件系统\n\tFileSystem fs = FileSystem.get(new URI(\"hdfs://120.27.244.176:9000/\"), conf, \"root\");\n\t//3.上传fs.copyFromLocalFile(本地文件,目标地址)\n\tfs.copyFromLocalFile(new Path(\"C:\\\\Users\\\\NEVER\\\\Desktop\\\\day04-06\\\\day04_05fastJson的使用.avi\"),new Path(\"/day04_05fastJson的使用.avi\"));\n\t//4.关闭连接\n\tfs.close();\n}\n@Test//下载\npublic void download() throws IOException, InterruptedException, URISyntaxException{\n\t//1.实例化configuration\n\tConfiguration conf = new Configuration();\n\tconf.set(\"dfs.replication\", \"1\");\n\tconf.set(\"dfs.client.use.datanode.hostname\",\"true\");\n\t//2.获取文件系统\n\tFileSystem fs = FileSystem.get(new URI(\"hdfs://120.27.244.176:9000/\"), conf, \"root\");\n\t//3.下载\n\t//fs.copyToLocalFile(目标文件,本地地址)\n\tfs.copyToLocalFile(false,new Path(\"/c.jpg\"), new Path(\"E:/d.jpg\"),true);\n\t//4.关闭连接\n\tfs.close();\n}\n@Test//删除\npublic void remove() throws IOException, InterruptedException, URISyntaxException{\n\t//1.实例化configuration\n\tConfiguration conf = new Configuration();\n\t//2.获取文件系统\n\tFileSystem fs = FileSystem.get(new URI(\"hdfs://120.27.244.176:9000/\"), conf, \"root\");\n\t//fs.delete(要删除的文件，boolean true false-只能删除空的文件夹)\n\tfs.delete(new Path(\"/dow3.txt\"),true);\n\t\n\tfs.close();\n\t\n}\n```\n<font color=red size=5>坑2：必须加上 conf.set(\"dfs.replication\", \"1\");\n\t\tconf.set(\"dfs.client.use.datanode.hostname\", \"true\");不然上传会为空文件</font>\n","source":"_posts/BookMark/运维/云服务器伪分布式hadoop配置+javaAPI上传下载删除操纵（踩坑总结） --菜鸟小回.md","raw":"# 云服务器伪分布式hadoop配置+javaAPI上传下载删除操纵（踩坑总结）\n---\n<font color=red size=5>注：本博文主要针对单台云服务器hadoop安装配置。博主使用阿里云的ECS服务器,Centos7系统，公网ip：120.27.244.176 私网ip：172.16.236.135 安全组开放所有端口，即1/65535</font>\n\n---\n## 一、准备\n1. 创建：`mkdir -p /opt/hadoop`\n2. 进入：`cd -p /opt/hadoop`\n3. 上传：\n4. 解压：`tar -zxvf hadoop-2.7.3.tar.gz `\n5. 配置hosts：\n```javascript?linenums\nvi  /etc/hosts\n//必须添加内网ip\n172.16.236.135 hadoop.idse.top\n```\n6. 配置环境变量\n```javascript?linenums\nvi /etc/profile\n//添加环境变量\n#配置hadoop\nexport HADOOP_HOME=/opt/hadoop/hadoop-2.7.3\nexport PATH=$PATH:$HADOOP_HOME/bin\n//刷新配置\nsource /etc/profile\n```\n---\n## 二、 配置hadoop\n1. 修改hadoop-env.sh\n```javascript?linenums\ncd /opt/hadoop/hadoop-2.7.3/etc/hadoop/\nvi hadoop-env.sh\n//找到并修改\nexport JAVA_HOME=/opt/java/jdk1.8.0_141\n```\n![image-20220721144649332](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721144649332.png)\n\n2. 修改core-site.xml\n```javascript?linenums\nvi core-site.xml\n//注意域名端口改为自己的hosts中设置\n<property>\n\t<name>fs.defaultFS</name>\n\t<value>hdfs://hadoop.idse.top:9000</value>\n</property>\n<!-- 指定hadoop运行时产生文件的存储目录 -->\n<property>\n\t<name>hadoop.tmp.dir</name>\n\t<value>/zhiyou/hadoop/tmp</value>\n</property>\n```\n![image-20220721144658404](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721144658404.png)\n\n3. 配置hdfs-site.xml\n```javascript?linenums\nvi hdfs-site.xml\n<property>\n\t<name>dfs.replication</name>\n\t<value>1</value>\n</property>\n```\n4. 配置yarn-site.xml\n```javascript?linenums\nvi yarn-site.xml\n//注意修改域名配置\n<property>\n\t<name>yarn.resourcemanager.hostname</name>\n\t<value>hadoop.idse.top</value>\n</property>\n<!-- reducer获取数据的方式 -->\n<property>\n\t<name>yarn.nodemanager.aux-services</name>\n\t<value>mapreduce_shuffle</value>\n</property>\n```\n![image-20220721144706165](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721144706165.png)\n\n5. 配置mapred-site.xml\n```javascript?linenums\nmv mapred-site.xml.template mapred-site.xml\nvi mapred-site.xml\n<property>\n\t<name>mapreduce.framework.name</name>\n\t<value>yarn</value>\n</property>\n```\n6. 启动\n```javascript?linenums\ncd /opt/hadoop/hadoop-2.7.3/sbin/\n./start-all.sh \n```\n7. 查看进程：`jps`\n![image-20220721144715625](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721144715625.png)\n8. 浏览器访问（公网ip+端口）：`120.27.244.176:50070`\n![image-20220721144724721](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721144724721.png)\n\n<font color=red size=5>坑1：未成功访问请去安全组开放端口，自行百度hadoop所需端口，博主全开。 </font>\n---\n## 三、javaAPI上传下载文件测试\n```javascript?linenums\n@Test//上传\npublic void upload() throws IOException, InterruptedException, URISyntaxException{\n\t//1.实例化configuration\n\tConfiguration conf = new Configuration();\n\t/*云服务器必须配置*/\n\tconf.set(\"dfs.replication\", \"1\");\n\tconf.set(\"dfs.client.use.datanode.hostname\", \"true\");\n\t//2.获取文件系统\n\tFileSystem fs = FileSystem.get(new URI(\"hdfs://120.27.244.176:9000/\"), conf, \"root\");\n\t//3.上传fs.copyFromLocalFile(本地文件,目标地址)\n\tfs.copyFromLocalFile(new Path(\"C:\\\\Users\\\\NEVER\\\\Desktop\\\\day04-06\\\\day04_05fastJson的使用.avi\"),new Path(\"/day04_05fastJson的使用.avi\"));\n\t//4.关闭连接\n\tfs.close();\n}\n@Test//下载\npublic void download() throws IOException, InterruptedException, URISyntaxException{\n\t//1.实例化configuration\n\tConfiguration conf = new Configuration();\n\tconf.set(\"dfs.replication\", \"1\");\n\tconf.set(\"dfs.client.use.datanode.hostname\",\"true\");\n\t//2.获取文件系统\n\tFileSystem fs = FileSystem.get(new URI(\"hdfs://120.27.244.176:9000/\"), conf, \"root\");\n\t//3.下载\n\t//fs.copyToLocalFile(目标文件,本地地址)\n\tfs.copyToLocalFile(false,new Path(\"/c.jpg\"), new Path(\"E:/d.jpg\"),true);\n\t//4.关闭连接\n\tfs.close();\n}\n@Test//删除\npublic void remove() throws IOException, InterruptedException, URISyntaxException{\n\t//1.实例化configuration\n\tConfiguration conf = new Configuration();\n\t//2.获取文件系统\n\tFileSystem fs = FileSystem.get(new URI(\"hdfs://120.27.244.176:9000/\"), conf, \"root\");\n\t//fs.delete(要删除的文件，boolean true false-只能删除空的文件夹)\n\tfs.delete(new Path(\"/dow3.txt\"),true);\n\t\n\tfs.close();\n\t\n}\n```\n<font color=red size=5>坑2：必须加上 conf.set(\"dfs.replication\", \"1\");\n\t\tconf.set(\"dfs.client.use.datanode.hostname\", \"true\");不然上传会为空文件</font>\n","slug":"BookMark/运维/云服务器伪分布式hadoop配置+javaAPI上传下载删除操纵（踩坑总结） --菜鸟小回","published":1,"date":"2022-07-25T05:51:42.000Z","updated":"2022-09-01T10:02:40.546Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cl7ptszot0031aba501o35aso","content":"<h1><span id=\"云服务器伪分布式hadoop配置javaapi上传下载删除操纵踩坑总结\">云服务器伪分布式hadoop配置+javaAPI上传下载删除操纵（踩坑总结）</span></h1><hr>\n<p><font color=\"red\" size=\"5\">注：本博文主要针对单台云服务器hadoop安装配置。博主使用阿里云的ECS服务器,Centos7系统，公网ip：120.27.244.176 私网ip：172.16.236.135 安全组开放所有端口，即1&#x2F;65535</font></p>\n<hr>\n<h2><span id=\"一-准备\">一、准备</span></h2><ol>\n<li>创建：<code>mkdir -p /opt/hadoop</code></li>\n<li>进入：<code>cd -p /opt/hadoop</code></li>\n<li>上传：</li>\n<li>解压：<code>tar -zxvf hadoop-2.7.3.tar.gz </code></li>\n<li>配置hosts：<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">vi  /etc/hosts<br>//必须添加内网ip<br>172.16.236.135 hadoop.idse.top<br></code></pre></td></tr></table></figure></li>\n<li>配置环境变量<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">vi /etc/profile<br>//添加环境变量<br>#配置hadoop<br>export HADOOP_HOME=/opt/hadoop/hadoop-2.7.3<br>export PATH=$PATH:$HADOOP_HOME/bin<br>//刷新配置<br>source /etc/profile<br></code></pre></td></tr></table></figure></li>\n</ol>\n<hr>\n<h2><span id=\"二-配置hadoop\">二、 配置hadoop</span></h2><ol>\n<li><p>修改hadoop-env.sh</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">cd /opt/hadoop/hadoop-2.7.3/etc/hadoop/<br>vi hadoop-env.sh<br>//找到并修改<br>export JAVA_HOME=/opt/java/jdk1.8.0_141<br></code></pre></td></tr></table></figure>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721144649332.png\" alt=\"image-20220721144649332\"></p>\n</li>\n<li><p>修改core-site.xml</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">vi core-site.xml<br>//注意域名端口改为自己的hosts中设置<br>&lt;property&gt;<br>\t&lt;name&gt;fs.defaultFS&lt;/name&gt;<br>\t&lt;value&gt;hdfs://hadoop.idse.top:9000&lt;/value&gt;<br>&lt;/property&gt;<br>&lt;!-- 指定hadoop运行时产生文件的存储目录 --&gt;<br>&lt;property&gt;<br>\t&lt;name&gt;hadoop.tmp.dir&lt;/name&gt;<br>\t&lt;value&gt;/zhiyou/hadoop/tmp&lt;/value&gt;<br>&lt;/property&gt;<br></code></pre></td></tr></table></figure>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721144658404.png\" alt=\"image-20220721144658404\"></p>\n</li>\n<li><p>配置hdfs-site.xml</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">vi hdfs-site.xml<br>&lt;property&gt;<br>\t&lt;name&gt;dfs.replication&lt;/name&gt;<br>\t&lt;value&gt;1&lt;/value&gt;<br>&lt;/property&gt;<br></code></pre></td></tr></table></figure></li>\n<li><p>配置yarn-site.xml</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">vi yarn-site.xml<br>//注意修改域名配置<br>&lt;property&gt;<br>\t&lt;name&gt;yarn.resourcemanager.hostname&lt;/name&gt;<br>\t&lt;value&gt;hadoop.idse.top&lt;/value&gt;<br>&lt;/property&gt;<br>&lt;!-- reducer获取数据的方式 --&gt;<br>&lt;property&gt;<br>\t&lt;name&gt;yarn.nodemanager.aux-services&lt;/name&gt;<br>\t&lt;value&gt;mapreduce_shuffle&lt;/value&gt;<br>&lt;/property&gt;<br></code></pre></td></tr></table></figure>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721144706165.png\" alt=\"image-20220721144706165\"></p>\n</li>\n<li><p>配置mapred-site.xml</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">mv mapred-site.xml.template mapred-site.xml<br>vi mapred-site.xml<br>&lt;property&gt;<br>\t&lt;name&gt;mapreduce.framework.name&lt;/name&gt;<br>\t&lt;value&gt;yarn&lt;/value&gt;<br>&lt;/property&gt;<br></code></pre></td></tr></table></figure></li>\n<li><p>启动</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">cd /opt/hadoop/hadoop-2.7.3/sbin/<br>./start-all.sh <br></code></pre></td></tr></table></figure></li>\n<li><p>查看进程：<code>jps</code><br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721144715625.png\" alt=\"image-20220721144715625\"></p>\n</li>\n<li><p>浏览器访问（公网ip+端口）：<code>120.27.244.176:50070</code><br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721144724721.png\" alt=\"image-20220721144724721\"></p>\n</li>\n</ol>\n<h2><span id=\"坑1未成功访问请去安全组开放端口自行百度hadoop所需端口博主全开\"><font color=\"red\" size=\"5\">坑1：未成功访问请去安全组开放端口，自行百度hadoop所需端口，博主全开。 </font></span></h2><h2><span id=\"三-javaapi上传下载文件测试\">三、javaAPI上传下载文件测试</span></h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">@Test//上传<br>public void upload() throws IOException, InterruptedException, URISyntaxException&#123;<br>\t//1.实例化configuration<br>\tConfiguration conf = new Configuration();<br>\t/*云服务器必须配置*/<br>\tconf.set(&quot;dfs.replication&quot;, &quot;1&quot;);<br>\tconf.set(&quot;dfs.client.use.datanode.hostname&quot;, &quot;true&quot;);<br>\t//2.获取文件系统<br>\tFileSystem fs = FileSystem.get(new URI(&quot;hdfs://120.27.244.176:9000/&quot;), conf, &quot;root&quot;);<br>\t//3.上传fs.copyFromLocalFile(本地文件,目标地址)<br>\tfs.copyFromLocalFile(new Path(&quot;C:\\\\Users\\\\NEVER\\\\Desktop\\\\day04-06\\\\day04_05fastJson的使用.avi&quot;),new Path(&quot;/day04_05fastJson的使用.avi&quot;));<br>\t//4.关闭连接<br>\tfs.close();<br>&#125;<br>@Test//下载<br>public void download() throws IOException, InterruptedException, URISyntaxException&#123;<br>\t//1.实例化configuration<br>\tConfiguration conf = new Configuration();<br>\tconf.set(&quot;dfs.replication&quot;, &quot;1&quot;);<br>\tconf.set(&quot;dfs.client.use.datanode.hostname&quot;,&quot;true&quot;);<br>\t//2.获取文件系统<br>\tFileSystem fs = FileSystem.get(new URI(&quot;hdfs://120.27.244.176:9000/&quot;), conf, &quot;root&quot;);<br>\t//3.下载<br>\t//fs.copyToLocalFile(目标文件,本地地址)<br>\tfs.copyToLocalFile(false,new Path(&quot;/c.jpg&quot;), new Path(&quot;E:/d.jpg&quot;),true);<br>\t//4.关闭连接<br>\tfs.close();<br>&#125;<br>@Test//删除<br>public void remove() throws IOException, InterruptedException, URISyntaxException&#123;<br>\t//1.实例化configuration<br>\tConfiguration conf = new Configuration();<br>\t//2.获取文件系统<br>\tFileSystem fs = FileSystem.get(new URI(&quot;hdfs://120.27.244.176:9000/&quot;), conf, &quot;root&quot;);<br>\t//fs.delete(要删除的文件，boolean true false-只能删除空的文件夹)<br>\tfs.delete(new Path(&quot;/dow3.txt&quot;),true);<br>\t<br>\tfs.close();<br>\t<br>&#125;<br></code></pre></td></tr></table></figure>\n<p><font color=\"red\" size=\"5\">坑2：必须加上 conf.set(“dfs.replication”, “1”);<br>        conf.set(“dfs.client.use.datanode.hostname”, “true”);不然上传会为空文件</font></p>\n","site":{"data":{}},"wordcount":3388,"excerpt":"","more":"<h1 id=\"云服务器伪分布式hadoop配置-javaAPI上传下载删除操纵（踩坑总结）\"><a href=\"#云服务器伪分布式hadoop配置-javaAPI上传下载删除操纵（踩坑总结）\" class=\"headerlink\" title=\"云服务器伪分布式hadoop配置+javaAPI上传下载删除操纵（踩坑总结）\"></a>云服务器伪分布式hadoop配置+javaAPI上传下载删除操纵（踩坑总结）</h1><hr>\n<p><font color=red size=5>注：本博文主要针对单台云服务器hadoop安装配置。博主使用阿里云的ECS服务器,Centos7系统，公网ip：120.27.244.176 私网ip：172.16.236.135 安全组开放所有端口，即1&#x2F;65535</font></p>\n<hr>\n<h2 id=\"一、准备\"><a href=\"#一、准备\" class=\"headerlink\" title=\"一、准备\"></a>一、准备</h2><ol>\n<li>创建：<code>mkdir -p /opt/hadoop</code></li>\n<li>进入：<code>cd -p /opt/hadoop</code></li>\n<li>上传：</li>\n<li>解压：<code>tar -zxvf hadoop-2.7.3.tar.gz </code></li>\n<li>配置hosts：<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">vi  /etc/hosts<br>//必须添加内网ip<br>172.16.236.135 hadoop.idse.top<br></code></pre></td></tr></table></figure></li>\n<li>配置环境变量<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">vi /etc/profile<br>//添加环境变量<br>#配置hadoop<br>export HADOOP_HOME=/opt/hadoop/hadoop-2.7.3<br>export PATH=$PATH:$HADOOP_HOME/bin<br>//刷新配置<br>source /etc/profile<br></code></pre></td></tr></table></figure></li>\n</ol>\n<hr>\n<h2 id=\"二、-配置hadoop\"><a href=\"#二、-配置hadoop\" class=\"headerlink\" title=\"二、 配置hadoop\"></a>二、 配置hadoop</h2><ol>\n<li><p>修改hadoop-env.sh</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">cd /opt/hadoop/hadoop-2.7.3/etc/hadoop/<br>vi hadoop-env.sh<br>//找到并修改<br>export JAVA_HOME=/opt/java/jdk1.8.0_141<br></code></pre></td></tr></table></figure>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721144649332.png\" alt=\"image-20220721144649332\"></p>\n</li>\n<li><p>修改core-site.xml</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">vi core-site.xml<br>//注意域名端口改为自己的hosts中设置<br>&lt;property&gt;<br>\t&lt;name&gt;fs.defaultFS&lt;/name&gt;<br>\t&lt;value&gt;hdfs://hadoop.idse.top:9000&lt;/value&gt;<br>&lt;/property&gt;<br>&lt;!-- 指定hadoop运行时产生文件的存储目录 --&gt;<br>&lt;property&gt;<br>\t&lt;name&gt;hadoop.tmp.dir&lt;/name&gt;<br>\t&lt;value&gt;/zhiyou/hadoop/tmp&lt;/value&gt;<br>&lt;/property&gt;<br></code></pre></td></tr></table></figure>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721144658404.png\" alt=\"image-20220721144658404\"></p>\n</li>\n<li><p>配置hdfs-site.xml</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">vi hdfs-site.xml<br>&lt;property&gt;<br>\t&lt;name&gt;dfs.replication&lt;/name&gt;<br>\t&lt;value&gt;1&lt;/value&gt;<br>&lt;/property&gt;<br></code></pre></td></tr></table></figure></li>\n<li><p>配置yarn-site.xml</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">vi yarn-site.xml<br>//注意修改域名配置<br>&lt;property&gt;<br>\t&lt;name&gt;yarn.resourcemanager.hostname&lt;/name&gt;<br>\t&lt;value&gt;hadoop.idse.top&lt;/value&gt;<br>&lt;/property&gt;<br>&lt;!-- reducer获取数据的方式 --&gt;<br>&lt;property&gt;<br>\t&lt;name&gt;yarn.nodemanager.aux-services&lt;/name&gt;<br>\t&lt;value&gt;mapreduce_shuffle&lt;/value&gt;<br>&lt;/property&gt;<br></code></pre></td></tr></table></figure>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721144706165.png\" alt=\"image-20220721144706165\"></p>\n</li>\n<li><p>配置mapred-site.xml</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">mv mapred-site.xml.template mapred-site.xml<br>vi mapred-site.xml<br>&lt;property&gt;<br>\t&lt;name&gt;mapreduce.framework.name&lt;/name&gt;<br>\t&lt;value&gt;yarn&lt;/value&gt;<br>&lt;/property&gt;<br></code></pre></td></tr></table></figure></li>\n<li><p>启动</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">cd /opt/hadoop/hadoop-2.7.3/sbin/<br>./start-all.sh <br></code></pre></td></tr></table></figure></li>\n<li><p>查看进程：<code>jps</code><br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721144715625.png\" alt=\"image-20220721144715625\"></p>\n</li>\n<li><p>浏览器访问（公网ip+端口）：<code>120.27.244.176:50070</code><br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220721144724721.png\" alt=\"image-20220721144724721\"></p>\n</li>\n</ol>\n<h2 id=\"坑1：未成功访问请去安全组开放端口，自行百度hadoop所需端口，博主全开。\"><a href=\"#坑1：未成功访问请去安全组开放端口，自行百度hadoop所需端口，博主全开。\" class=\"headerlink\" title=\"坑1：未成功访问请去安全组开放端口，自行百度hadoop所需端口，博主全开。 \"></a><font color=red size=5>坑1：未成功访问请去安全组开放端口，自行百度hadoop所需端口，博主全开。 </font></h2><h2 id=\"三、javaAPI上传下载文件测试\"><a href=\"#三、javaAPI上传下载文件测试\" class=\"headerlink\" title=\"三、javaAPI上传下载文件测试\"></a>三、javaAPI上传下载文件测试</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">@Test//上传<br>public void upload() throws IOException, InterruptedException, URISyntaxException&#123;<br>\t//1.实例化configuration<br>\tConfiguration conf = new Configuration();<br>\t/*云服务器必须配置*/<br>\tconf.set(&quot;dfs.replication&quot;, &quot;1&quot;);<br>\tconf.set(&quot;dfs.client.use.datanode.hostname&quot;, &quot;true&quot;);<br>\t//2.获取文件系统<br>\tFileSystem fs = FileSystem.get(new URI(&quot;hdfs://120.27.244.176:9000/&quot;), conf, &quot;root&quot;);<br>\t//3.上传fs.copyFromLocalFile(本地文件,目标地址)<br>\tfs.copyFromLocalFile(new Path(&quot;C:\\\\Users\\\\NEVER\\\\Desktop\\\\day04-06\\\\day04_05fastJson的使用.avi&quot;),new Path(&quot;/day04_05fastJson的使用.avi&quot;));<br>\t//4.关闭连接<br>\tfs.close();<br>&#125;<br>@Test//下载<br>public void download() throws IOException, InterruptedException, URISyntaxException&#123;<br>\t//1.实例化configuration<br>\tConfiguration conf = new Configuration();<br>\tconf.set(&quot;dfs.replication&quot;, &quot;1&quot;);<br>\tconf.set(&quot;dfs.client.use.datanode.hostname&quot;,&quot;true&quot;);<br>\t//2.获取文件系统<br>\tFileSystem fs = FileSystem.get(new URI(&quot;hdfs://120.27.244.176:9000/&quot;), conf, &quot;root&quot;);<br>\t//3.下载<br>\t//fs.copyToLocalFile(目标文件,本地地址)<br>\tfs.copyToLocalFile(false,new Path(&quot;/c.jpg&quot;), new Path(&quot;E:/d.jpg&quot;),true);<br>\t//4.关闭连接<br>\tfs.close();<br>&#125;<br>@Test//删除<br>public void remove() throws IOException, InterruptedException, URISyntaxException&#123;<br>\t//1.实例化configuration<br>\tConfiguration conf = new Configuration();<br>\t//2.获取文件系统<br>\tFileSystem fs = FileSystem.get(new URI(&quot;hdfs://120.27.244.176:9000/&quot;), conf, &quot;root&quot;);<br>\t//fs.delete(要删除的文件，boolean true false-只能删除空的文件夹)<br>\tfs.delete(new Path(&quot;/dow3.txt&quot;),true);<br>\t<br>\tfs.close();<br>\t<br>&#125;<br></code></pre></td></tr></table></figure>\n<p><font color=red size=5>坑2：必须加上 conf.set(“dfs.replication”, “1”);<br>        conf.set(“dfs.client.use.datanode.hostname”, “true”);不然上传会为空文件</font></p>\n"},{"_content":"# 从docker安装到前后端分离项目启动完成（docker安装mysql、nginx；启动jar包）\n---\n+ 前言：通过上篇博文：[虚拟机安装centos7并配置网络](https://blog.huijia21.com/archives/xu-ni-ji-an-zhuang-centos7-bing-pei-zhi-wang-luo)\n我们已经安装好centos并配置好网络，现在来尝试docker容器的安装及基本使用。\n\n+ 本人为Java程序猿一枚，所以此处来使用docker安装几个常用软件：mysql，nginx。部署一个jar包服务，配合vue前端。部署一个简易程序。\n---\n[toc]\n\n---\n## 一、安装docker\n<font color=red size=5> 此部分参照[linux下安装docker并部署运行jar](https://blog.csdn.net/weixin_43827693/article/details/107934604?spm=1001.2014.3001.5506)博文</font>（ 鸣谢！侵删）\n\n```javascript?linenums\n// 安装需要的软件包\nyum install -y yum-utils device-mapper-persistent-data lvm2\n//设置yum源\nyum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo\n//启用 edge 和 testing 镜像仓库（可选）\nyum-config-manager --enable docker-ce-edge\nyum-config-manager --enable docker-ce-testing\n//安装Docker最新版本\nyum install -y docker-ce\n//启动docker\nsystemctl start docker\n//开机自启\nsystemctl  enable docker.service\n```\n![image-20220509180632911](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509180632911.png)\n\n---\n\n## 二、使用docker安装mysql\n可以去[docker官网](https://hub.docker.com/)注册一下，获取可用的docker镜像。直接搜想要安装的应用\n![image-20220509180638168](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509180638168.png)\n![image-20220509180645355](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509180645355.png)\n\n### 1.安装mysql\n```javascript?linenums\n//这里选择安装5.7.29版本\ndocker pull mysql:5.7.29\n//ARM框架 docker pull mysql/mysql-server\n//使用以下命令来查看是否已安装了 mysql： \ndocker images\n```\n![image-20220509180701019](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509180701019.png)\n### 2. 启动mysql并设置密码\n```javascript?linenums\ndocker run -itd --restart=always --name mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=HBQ521521cf* mysql:5.7.29\n```\n命令解析：\n+ docker run：docker容器启动命令\n+ --name mysql：为此容器起名为mysql，可自定义\n+ -p 3306:3306 ：映射容器服务的 3306 端口到宿主机的 3306 端口，外部主机可以直接通过 宿主机ip:3306 访问到 MySQL 的服务。 \n+ -e MYSQL_ROOT_PASSWORD=123456： 初始化 MySQL 的密码为123456\n+ mysql:5.7.29：你下载好的mysql镜像（需要指定版本）\n### 3. 查看容器运行状况\n`docker ps`\n![image-20220509180705836](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509180705836.png)\n\n### 4. 进入mysql容器中，更新访问权限，使本机或者navicat等远程连接\n```javascript?linenums\ndocker exec -it mysql bash\n//登录mysql\nmysql -uroot -p123456\n```\n![image-20220509180710221](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509180710221.png)\n\n+ 修改权限\n ```javascript?linenums\nupdate mysql.user set host=\"%\" where user=\"root\";\n//刷新权限\nflush privileges;\n ```\n![image-20220509180809450](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509180809450.png)\n\n### 5. 使用navicat连接，测试成功\n![image-20220509180817428](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509180817428.png)\n\n## 三、使用docker安装nginx以及自定义配置文件\n### 1. 同样步骤去官网搜索nginx找到你想要下载的版本\n```javascript?linenums\n//这里下载1.13版本\ndocker pull nginx:1.13\n```\n### 2. 启动默认配置文件的nginx\n`docker run --name nginx -p 80:80 -d nginx:1.13`\n![image-20220509180824938](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509180824938.png)\n\n### 3. 复制nginx配置文件到主机\n+ `docker cp nginx:/etc/nginx/nginx.conf /opt/config/`\n![在这里插入图片描述](https://img-1256282866.cos.ap-beijing.myqcloud.com/7f0551b5264c15af271cc082fa8ca82b.png)\n+ 修改该配置文件为你想要的配置，我这里配置到/out/project/demo/dist文件，为我的vue项目文件（你可以随便测试一个html）\n![image-20220509180924987](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509180924987.png)\n\n### 4. 重启nginx，同时映射本机的配置文件，本机vue项目到容器中\n```javascript?linenums\n//停止nginx容器\ndocker stop nginx\n//删除\ndocker rm nginx\n//重新启动\ndocker run  --restart=always --name nginx --privileged=true -p 80:80 -p8001:8001 -v /opt/config/nginx.conf:/etc/nginx/nginx.conf -v /out/project/demo/dist:/out/project/demo/dist -d nginx:1.13\n```\n本机访问成功\n![image-20220509180941768](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509180941768.png)\n命令解析：\n\n+  --restart=always ：总是在启动docker后重启本容器\n+  --privileged=true：添加root权限到容器（权限问题，详情百度）\n+  -p：端口映射，使用8001端口映射到本机（与你的nginx.conf保持一致）\n+  -v：分别映射你配置好的nginx配置和项目文件\n+  -d：后台启动\n\n---\n## 四、部署Java项目（此处为springboot项目的jar包）\n### 1. 新建Dockerfile\n```javascript?linenums\nFROM java:8\nADD code-demo-persion-0.0.1-SNAPSHOT.jar  /demo.jar\nEXPOSE 8088\nENTRYPOINT [\"java\",\"-Xms1024m\",\"-Xmx1024m\",\"-jar\",\"/demo.jar\",\"--spring.profiles.active=dev\",\"-c\"]\n```\n命令解析：\n+ FROM java:8，使用java8\n+ 启动文件为code-demo-persion-0.0.1-SNAPSHOT.jar 重命名为 demo.jar\n+ ENTRYPOINT ：启动后执行的命令为[xxx]（语法百度）\n![image-20220509180950205](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509180950205.png)\n### 2. 使用新建好的Dockerfile构建项目\n```javascript?linenums\ncd /out/project/demo\n//构建本目录下的Dockerfile\ndocker build -t demo:v1 .\n//查看我们构建出的镜像\ndocker images\n```\n![image-20220509180956869](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509180956869.png)\n### 3.启动项目\n```javascript?linenums\ndocker run  -d --restart=always --name demo -p 8088:8088 -v /out/logs/demo:/out/logs/demo demo:v1\n```\n命令解析： \n+ -v：此处是为了将项目日志输出到本机以便查看\n所有进程启动完成\n![image-20220509181007080](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509181007080.png)\n项目可访问\n![image-20220509181019257](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509181019257.png)\n\n---\n## 五、redis安装\n### 1. 下载镜像\n`docker pull redis:5.0.3`\n\n### 2. 添加配置文件启动\n#### 2-1 下载对应版本的压缩包[官网](https://download.redis.io/releases/?_ga=2.47530222.850311942.1626866911-284099862.1626866911)\n#### 2-2  解压后得到conf文件\n![image-20220509181026055](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509181026055.png)\n#### 2-3 修改配置文件\n```javascript?linenums\n//找到bind 127.0.0.1改为\n#bind 127.0.0.1\n```\n#### 2-4 将配置文件上传至centos中\n+ 配置文件在主机的位置\n![image-20220509181032944](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509181032944.png)\n\n#### 2-5 启动redis同时设置密码\n```javascript?linenums\ndocker run -itd --restart=always  -p 6379:6379 --name redis -v /opt/config/redis.conf:/etc/redis/redis.conf -v /out/data:/data  redis:5.0.3 redis-server /etc/redis/redis.conf --requirepass HBQ521521cf* --appendonly yes\n```\n命令解析：\n+ --requirepass xxx：xxx为你所设置的redis密码\n+ --appendonly yes：开启redis 持久化\n\n+ 启动成功\n![image-20220509181041052](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509181041052.png)\n---\n本文大概介绍了使用docker一个前后端系统的上线流程，下面总结一点常用命令：\n+ service docker start/restart/stop：docker开启/重启/关闭\n+ docker images：查看镜像\n+ docker ps：查看启动的容器\n+ docker start/stop xxx：开启/关闭某容器\n+ docker build ~：构建镜像\n+ docker run ~：启动容器\n+ docker exec -it xxx bash :在运行的容器中执行交互终端命令，如：docker exec -it mysql bash\n+ docker rmi xxx：删除某镜像，如：docker rmi demo:v1（demo:v1为镜像名，需要携带版本）\n+ docker rm xxx：删除某容器，如：docker rm demo（demo为容器名）\n+ docker update xxx xxx：为某个容器更新某设置，如docker update --restart=always nginx（将nginx容器设置为自启动）\n+ docker cp /out/maven xxx:/out：xxx为容器名 将主机的/out/maven文件夹复制到容器的/out文件夹\n\n更多命令参考：[菜鸟教程](https://www.runoob.com/docker/docker-command-manual.html)\n\n相关技术使用详情：[springBoot集成Jenkins，实现自动化部署（centos7&windows，涵盖防jenkins杀死的脚本）](https://blog.huijia21.com/archives/springboot-ji-cheng-jenkins-shi-xian-zi-dong-hua-bu-shu-centos7windows-han-gai-fang-jenkins-sha-si-de-jiao-ben-)\n\n\n\n","source":"_posts/BookMark/运维/从docker安装到前后端分离项目启动完成（docker安装mysql、nginx；启动jar包）.md","raw":"# 从docker安装到前后端分离项目启动完成（docker安装mysql、nginx；启动jar包）\n---\n+ 前言：通过上篇博文：[虚拟机安装centos7并配置网络](https://blog.huijia21.com/archives/xu-ni-ji-an-zhuang-centos7-bing-pei-zhi-wang-luo)\n我们已经安装好centos并配置好网络，现在来尝试docker容器的安装及基本使用。\n\n+ 本人为Java程序猿一枚，所以此处来使用docker安装几个常用软件：mysql，nginx。部署一个jar包服务，配合vue前端。部署一个简易程序。\n---\n[toc]\n\n---\n## 一、安装docker\n<font color=red size=5> 此部分参照[linux下安装docker并部署运行jar](https://blog.csdn.net/weixin_43827693/article/details/107934604?spm=1001.2014.3001.5506)博文</font>（ 鸣谢！侵删）\n\n```javascript?linenums\n// 安装需要的软件包\nyum install -y yum-utils device-mapper-persistent-data lvm2\n//设置yum源\nyum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo\n//启用 edge 和 testing 镜像仓库（可选）\nyum-config-manager --enable docker-ce-edge\nyum-config-manager --enable docker-ce-testing\n//安装Docker最新版本\nyum install -y docker-ce\n//启动docker\nsystemctl start docker\n//开机自启\nsystemctl  enable docker.service\n```\n![image-20220509180632911](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509180632911.png)\n\n---\n\n## 二、使用docker安装mysql\n可以去[docker官网](https://hub.docker.com/)注册一下，获取可用的docker镜像。直接搜想要安装的应用\n![image-20220509180638168](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509180638168.png)\n![image-20220509180645355](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509180645355.png)\n\n### 1.安装mysql\n```javascript?linenums\n//这里选择安装5.7.29版本\ndocker pull mysql:5.7.29\n//ARM框架 docker pull mysql/mysql-server\n//使用以下命令来查看是否已安装了 mysql： \ndocker images\n```\n![image-20220509180701019](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509180701019.png)\n### 2. 启动mysql并设置密码\n```javascript?linenums\ndocker run -itd --restart=always --name mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=HBQ521521cf* mysql:5.7.29\n```\n命令解析：\n+ docker run：docker容器启动命令\n+ --name mysql：为此容器起名为mysql，可自定义\n+ -p 3306:3306 ：映射容器服务的 3306 端口到宿主机的 3306 端口，外部主机可以直接通过 宿主机ip:3306 访问到 MySQL 的服务。 \n+ -e MYSQL_ROOT_PASSWORD=123456： 初始化 MySQL 的密码为123456\n+ mysql:5.7.29：你下载好的mysql镜像（需要指定版本）\n### 3. 查看容器运行状况\n`docker ps`\n![image-20220509180705836](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509180705836.png)\n\n### 4. 进入mysql容器中，更新访问权限，使本机或者navicat等远程连接\n```javascript?linenums\ndocker exec -it mysql bash\n//登录mysql\nmysql -uroot -p123456\n```\n![image-20220509180710221](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509180710221.png)\n\n+ 修改权限\n ```javascript?linenums\nupdate mysql.user set host=\"%\" where user=\"root\";\n//刷新权限\nflush privileges;\n ```\n![image-20220509180809450](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509180809450.png)\n\n### 5. 使用navicat连接，测试成功\n![image-20220509180817428](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509180817428.png)\n\n## 三、使用docker安装nginx以及自定义配置文件\n### 1. 同样步骤去官网搜索nginx找到你想要下载的版本\n```javascript?linenums\n//这里下载1.13版本\ndocker pull nginx:1.13\n```\n### 2. 启动默认配置文件的nginx\n`docker run --name nginx -p 80:80 -d nginx:1.13`\n![image-20220509180824938](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509180824938.png)\n\n### 3. 复制nginx配置文件到主机\n+ `docker cp nginx:/etc/nginx/nginx.conf /opt/config/`\n![在这里插入图片描述](https://img-1256282866.cos.ap-beijing.myqcloud.com/7f0551b5264c15af271cc082fa8ca82b.png)\n+ 修改该配置文件为你想要的配置，我这里配置到/out/project/demo/dist文件，为我的vue项目文件（你可以随便测试一个html）\n![image-20220509180924987](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509180924987.png)\n\n### 4. 重启nginx，同时映射本机的配置文件，本机vue项目到容器中\n```javascript?linenums\n//停止nginx容器\ndocker stop nginx\n//删除\ndocker rm nginx\n//重新启动\ndocker run  --restart=always --name nginx --privileged=true -p 80:80 -p8001:8001 -v /opt/config/nginx.conf:/etc/nginx/nginx.conf -v /out/project/demo/dist:/out/project/demo/dist -d nginx:1.13\n```\n本机访问成功\n![image-20220509180941768](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509180941768.png)\n命令解析：\n\n+  --restart=always ：总是在启动docker后重启本容器\n+  --privileged=true：添加root权限到容器（权限问题，详情百度）\n+  -p：端口映射，使用8001端口映射到本机（与你的nginx.conf保持一致）\n+  -v：分别映射你配置好的nginx配置和项目文件\n+  -d：后台启动\n\n---\n## 四、部署Java项目（此处为springboot项目的jar包）\n### 1. 新建Dockerfile\n```javascript?linenums\nFROM java:8\nADD code-demo-persion-0.0.1-SNAPSHOT.jar  /demo.jar\nEXPOSE 8088\nENTRYPOINT [\"java\",\"-Xms1024m\",\"-Xmx1024m\",\"-jar\",\"/demo.jar\",\"--spring.profiles.active=dev\",\"-c\"]\n```\n命令解析：\n+ FROM java:8，使用java8\n+ 启动文件为code-demo-persion-0.0.1-SNAPSHOT.jar 重命名为 demo.jar\n+ ENTRYPOINT ：启动后执行的命令为[xxx]（语法百度）\n![image-20220509180950205](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509180950205.png)\n### 2. 使用新建好的Dockerfile构建项目\n```javascript?linenums\ncd /out/project/demo\n//构建本目录下的Dockerfile\ndocker build -t demo:v1 .\n//查看我们构建出的镜像\ndocker images\n```\n![image-20220509180956869](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509180956869.png)\n### 3.启动项目\n```javascript?linenums\ndocker run  -d --restart=always --name demo -p 8088:8088 -v /out/logs/demo:/out/logs/demo demo:v1\n```\n命令解析： \n+ -v：此处是为了将项目日志输出到本机以便查看\n所有进程启动完成\n![image-20220509181007080](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509181007080.png)\n项目可访问\n![image-20220509181019257](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509181019257.png)\n\n---\n## 五、redis安装\n### 1. 下载镜像\n`docker pull redis:5.0.3`\n\n### 2. 添加配置文件启动\n#### 2-1 下载对应版本的压缩包[官网](https://download.redis.io/releases/?_ga=2.47530222.850311942.1626866911-284099862.1626866911)\n#### 2-2  解压后得到conf文件\n![image-20220509181026055](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509181026055.png)\n#### 2-3 修改配置文件\n```javascript?linenums\n//找到bind 127.0.0.1改为\n#bind 127.0.0.1\n```\n#### 2-4 将配置文件上传至centos中\n+ 配置文件在主机的位置\n![image-20220509181032944](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509181032944.png)\n\n#### 2-5 启动redis同时设置密码\n```javascript?linenums\ndocker run -itd --restart=always  -p 6379:6379 --name redis -v /opt/config/redis.conf:/etc/redis/redis.conf -v /out/data:/data  redis:5.0.3 redis-server /etc/redis/redis.conf --requirepass HBQ521521cf* --appendonly yes\n```\n命令解析：\n+ --requirepass xxx：xxx为你所设置的redis密码\n+ --appendonly yes：开启redis 持久化\n\n+ 启动成功\n![image-20220509181041052](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509181041052.png)\n---\n本文大概介绍了使用docker一个前后端系统的上线流程，下面总结一点常用命令：\n+ service docker start/restart/stop：docker开启/重启/关闭\n+ docker images：查看镜像\n+ docker ps：查看启动的容器\n+ docker start/stop xxx：开启/关闭某容器\n+ docker build ~：构建镜像\n+ docker run ~：启动容器\n+ docker exec -it xxx bash :在运行的容器中执行交互终端命令，如：docker exec -it mysql bash\n+ docker rmi xxx：删除某镜像，如：docker rmi demo:v1（demo:v1为镜像名，需要携带版本）\n+ docker rm xxx：删除某容器，如：docker rm demo（demo为容器名）\n+ docker update xxx xxx：为某个容器更新某设置，如docker update --restart=always nginx（将nginx容器设置为自启动）\n+ docker cp /out/maven xxx:/out：xxx为容器名 将主机的/out/maven文件夹复制到容器的/out文件夹\n\n更多命令参考：[菜鸟教程](https://www.runoob.com/docker/docker-command-manual.html)\n\n相关技术使用详情：[springBoot集成Jenkins，实现自动化部署（centos7&windows，涵盖防jenkins杀死的脚本）](https://blog.huijia21.com/archives/springboot-ji-cheng-jenkins-shi-xian-zi-dong-hua-bu-shu-centos7windows-han-gai-fang-jenkins-sha-si-de-jiao-ben-)\n\n\n\n","slug":"BookMark/运维/从docker安装到前后端分离项目启动完成（docker安装mysql、nginx；启动jar包）","published":1,"date":"2022-07-18T09:51:32.000Z","updated":"2022-09-01T10:02:40.558Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cl7ptszot0032aba55z0db1k7","content":"<h1><span id=\"从docker安装到前后端分离项目启动完成docker安装mysql-nginx启动jar包\">从docker安装到前后端分离项目启动完成（docker安装mysql、nginx；启动jar包）</span></h1><hr>\n<ul>\n<li><p>前言：通过上篇博文：<a href=\"https://blog.huijia21.com/archives/xu-ni-ji-an-zhuang-centos7-bing-pei-zhi-wang-luo\">虚拟机安装centos7并配置网络</a><br>我们已经安装好centos并配置好网络，现在来尝试docker容器的安装及基本使用。</p>\n</li>\n<li><p>本人为Java程序猿一枚，所以此处来使用docker安装几个常用软件：mysql，nginx。部署一个jar包服务，配合vue前端。部署一个简易程序。</p>\n</li>\n</ul>\n<hr>\n<p>[toc]</p>\n<hr>\n<h2><span id=\"一-安装docker\">一、安装docker</span></h2><p><font color=\"red\" size=\"5\"> 此部分参照<a href=\"https://blog.csdn.net/weixin_43827693/article/details/107934604?spm=1001.2014.3001.5506\">linux下安装docker并部署运行jar</a>博文</font>（ 鸣谢！侵删）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">// 安装需要的软件包<br>yum install -y yum-utils device-mapper-persistent-data lvm2<br>//设置yum源<br>yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo<br>//启用 edge 和 testing 镜像仓库（可选）<br>yum-config-manager --enable docker-ce-edge<br>yum-config-manager --enable docker-ce-testing<br>//安装Docker最新版本<br>yum install -y docker-ce<br>//启动docker<br>systemctl start docker<br>//开机自启<br>systemctl  enable docker.service<br></code></pre></td></tr></table></figure>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509180632911.png\" alt=\"image-20220509180632911\"></p>\n<hr>\n<h2><span id=\"二-使用docker安装mysql\">二、使用docker安装mysql</span></h2><p>可以去<a href=\"https://hub.docker.com/\">docker官网</a>注册一下，获取可用的docker镜像。直接搜想要安装的应用<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509180638168.png\" alt=\"image-20220509180638168\"><br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509180645355.png\" alt=\"image-20220509180645355\"></p>\n<h3><span id=\"1安装mysql\">1.安装mysql</span></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">//这里选择安装5.7.29版本<br>docker pull mysql:5.7.29<br>//ARM框架 docker pull mysql/mysql-server<br>//使用以下命令来查看是否已安装了 mysql： <br>docker images<br></code></pre></td></tr></table></figure>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509180701019.png\" alt=\"image-20220509180701019\"></p>\n<h3><span id=\"2-启动mysql并设置密码\">2. 启动mysql并设置密码</span></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">docker run -itd --restart=always --name mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=HBQ521521cf* mysql:5.7.29<br></code></pre></td></tr></table></figure>\n<p>命令解析：</p>\n<ul>\n<li>docker run：docker容器启动命令</li>\n<li>–name mysql：为此容器起名为mysql，可自定义</li>\n<li>-p 3306:3306 ：映射容器服务的 3306 端口到宿主机的 3306 端口，外部主机可以直接通过 宿主机ip:3306 访问到 MySQL 的服务。 </li>\n<li>-e MYSQL_ROOT_PASSWORD&#x3D;123456： 初始化 MySQL 的密码为123456</li>\n<li>mysql:5.7.29：你下载好的mysql镜像（需要指定版本）</li>\n</ul>\n<h3><span id=\"3-查看容器运行状况\">3. 查看容器运行状况</span></h3><p><code>docker ps</code><br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509180705836.png\" alt=\"image-20220509180705836\"></p>\n<h3><span id=\"4-进入mysql容器中更新访问权限使本机或者navicat等远程连接\">4. 进入mysql容器中，更新访问权限，使本机或者navicat等远程连接</span></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">docker exec -it mysql bash<br>//登录mysql<br>mysql -uroot -p123456<br></code></pre></td></tr></table></figure>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509180710221.png\" alt=\"image-20220509180710221\"></p>\n<ul>\n<li>修改权限 <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">update mysql.user set host=&quot;%&quot; where user=&quot;root&quot;;<br>//刷新权限<br>flush privileges;<br></code></pre></td></tr></table></figure>\n<img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509180809450.png\" alt=\"image-20220509180809450\"></li>\n</ul>\n<h3><span id=\"5-使用navicat连接测试成功\">5. 使用navicat连接，测试成功</span></h3><p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509180817428.png\" alt=\"image-20220509180817428\"></p>\n<h2><span id=\"三-使用docker安装nginx以及自定义配置文件\">三、使用docker安装nginx以及自定义配置文件</span></h2><h3><span id=\"1-同样步骤去官网搜索nginx找到你想要下载的版本\">1. 同样步骤去官网搜索nginx找到你想要下载的版本</span></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">//这里下载1.13版本<br>docker pull nginx:1.13<br></code></pre></td></tr></table></figure>\n<h3><span id=\"2-启动默认配置文件的nginx\">2. 启动默认配置文件的nginx</span></h3><p><code>docker run --name nginx -p 80:80 -d nginx:1.13</code><br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509180824938.png\" alt=\"image-20220509180824938\"></p>\n<h3><span id=\"3-复制nginx配置文件到主机\">3. 复制nginx配置文件到主机</span></h3><ul>\n<li><code>docker cp nginx:/etc/nginx/nginx.conf /opt/config/</code><br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/7f0551b5264c15af271cc082fa8ca82b.png\" alt=\"在这里插入图片描述\"></li>\n<li>修改该配置文件为你想要的配置，我这里配置到&#x2F;out&#x2F;project&#x2F;demo&#x2F;dist文件，为我的vue项目文件（你可以随便测试一个html）<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509180924987.png\" alt=\"image-20220509180924987\"></li>\n</ul>\n<h3><span id=\"4-重启nginx同时映射本机的配置文件本机vue项目到容器中\">4. 重启nginx，同时映射本机的配置文件，本机vue项目到容器中</span></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">//停止nginx容器<br>docker stop nginx<br>//删除<br>docker rm nginx<br>//重新启动<br>docker run  --restart=always --name nginx --privileged=true -p 80:80 -p8001:8001 -v /opt/config/nginx.conf:/etc/nginx/nginx.conf -v /out/project/demo/dist:/out/project/demo/dist -d nginx:1.13<br></code></pre></td></tr></table></figure>\n<p>本机访问成功<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509180941768.png\" alt=\"image-20220509180941768\"><br>命令解析：</p>\n<ul>\n<li>–restart&#x3D;always ：总是在启动docker后重启本容器</li>\n<li>–privileged&#x3D;true：添加root权限到容器（权限问题，详情百度）</li>\n<li>-p：端口映射，使用8001端口映射到本机（与你的nginx.conf保持一致）</li>\n<li>-v：分别映射你配置好的nginx配置和项目文件</li>\n<li>-d：后台启动</li>\n</ul>\n<hr>\n<h2><span id=\"四-部署java项目此处为springboot项目的jar包\">四、部署Java项目（此处为springboot项目的jar包）</span></h2><h3><span id=\"1-新建dockerfile\">1. 新建Dockerfile</span></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">FROM java:8<br>ADD code-demo-persion-0.0.1-SNAPSHOT.jar  /demo.jar<br>EXPOSE 8088<br>ENTRYPOINT [&quot;java&quot;,&quot;-Xms1024m&quot;,&quot;-Xmx1024m&quot;,&quot;-jar&quot;,&quot;/demo.jar&quot;,&quot;--spring.profiles.active=dev&quot;,&quot;-c&quot;]<br></code></pre></td></tr></table></figure>\n<p>命令解析：</p>\n<ul>\n<li>FROM java:8，使用java8</li>\n<li>启动文件为code-demo-persion-0.0.1-SNAPSHOT.jar 重命名为 demo.jar</li>\n<li>ENTRYPOINT ：启动后执行的命令为[xxx]（语法百度）<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509180950205.png\" alt=\"image-20220509180950205\"></li>\n</ul>\n<h3><span id=\"2-使用新建好的dockerfile构建项目\">2. 使用新建好的Dockerfile构建项目</span></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">cd /out/project/demo<br>//构建本目录下的Dockerfile<br>docker build -t demo:v1 .<br>//查看我们构建出的镜像<br>docker images<br></code></pre></td></tr></table></figure>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509180956869.png\" alt=\"image-20220509180956869\"></p>\n<h3><span id=\"3启动项目\">3.启动项目</span></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">docker run  -d --restart=always --name demo -p 8088:8088 -v /out/logs/demo:/out/logs/demo demo:v1<br></code></pre></td></tr></table></figure>\n<p>命令解析： </p>\n<ul>\n<li>-v：此处是为了将项目日志输出到本机以便查看<br>所有进程启动完成<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509181007080.png\" alt=\"image-20220509181007080\"><br>项目可访问<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509181019257.png\" alt=\"image-20220509181019257\"></li>\n</ul>\n<hr>\n<h2><span id=\"五-redis安装\">五、redis安装</span></h2><h3><span id=\"1-下载镜像\">1. 下载镜像</span></h3><p><code>docker pull redis:5.0.3</code></p>\n<h3><span id=\"2-添加配置文件启动\">2. 添加配置文件启动</span></h3><h4><span id=\"2-1-下载对应版本的压缩包官网\">2-1 下载对应版本的压缩包</span></h4><h4><span id=\"2-2-解压后得到conf文件\">2-2  解压后得到conf文件</span></h4><p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509181026055.png\" alt=\"image-20220509181026055\"></p>\n<h4><span id=\"2-3-修改配置文件\">2-3 修改配置文件</span></h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">//找到bind 127.0.0.1改为<br>#bind 127.0.0.1<br></code></pre></td></tr></table></figure>\n<h4><span id=\"2-4-将配置文件上传至centos中\">2-4 将配置文件上传至centos中</span></h4><ul>\n<li>配置文件在主机的位置<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509181032944.png\" alt=\"image-20220509181032944\"></li>\n</ul>\n<h4><span id=\"2-5-启动redis同时设置密码\">2-5 启动redis同时设置密码</span></h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">docker run -itd --restart=always  -p 6379:6379 --name redis -v /opt/config/redis.conf:/etc/redis/redis.conf -v /out/data:/data  redis:5.0.3 redis-server /etc/redis/redis.conf --requirepass HBQ521521cf* --appendonly yes<br></code></pre></td></tr></table></figure>\n<p>命令解析：</p>\n<ul>\n<li><p>–requirepass xxx：xxx为你所设置的redis密码</p>\n</li>\n<li><p>–appendonly yes：开启redis 持久化</p>\n</li>\n<li><p>启动成功<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509181041052.png\" alt=\"image-20220509181041052\"></p>\n</li>\n</ul>\n<hr>\n<p>本文大概介绍了使用docker一个前后端系统的上线流程，下面总结一点常用命令：</p>\n<ul>\n<li>service docker start&#x2F;restart&#x2F;stop：docker开启&#x2F;重启&#x2F;关闭</li>\n<li>docker images：查看镜像</li>\n<li>docker ps：查看启动的容器</li>\n<li>docker start&#x2F;stop xxx：开启&#x2F;关闭某容器</li>\n<li>docker build ~：构建镜像</li>\n<li>docker run ~：启动容器</li>\n<li>docker exec -it xxx bash :在运行的容器中执行交互终端命令，如：docker exec -it mysql bash</li>\n<li>docker rmi xxx：删除某镜像，如：docker rmi demo:v1（demo:v1为镜像名，需要携带版本）</li>\n<li>docker rm xxx：删除某容器，如：docker rm demo（demo为容器名）</li>\n<li>docker update xxx xxx：为某个容器更新某设置，如docker update –restart&#x3D;always nginx（将nginx容器设置为自启动）</li>\n<li>docker cp &#x2F;out&#x2F;maven xxx:&#x2F;out：xxx为容器名 将主机的&#x2F;out&#x2F;maven文件夹复制到容器的&#x2F;out文件夹</li>\n</ul>\n<p>更多命令参考：<a href=\"https://www.runoob.com/docker/docker-command-manual.html\">菜鸟教程</a></p>\n<p>相关技术使用详情：<a href=\"https://blog.huijia21.com/archives/springboot-ji-cheng-jenkins-shi-xian-zi-dong-hua-bu-shu-centos7windows-han-gai-fang-jenkins-sha-si-de-jiao-ben-\">springBoot集成Jenkins，实现自动化部署（centos7&amp;windows，涵盖防jenkins杀死的脚本）</a></p>\n","site":{"data":{}},"wordcount":3758,"excerpt":"","more":"<h1 id=\"从docker安装到前后端分离项目启动完成（docker安装mysql、nginx；启动jar包）\"><a href=\"#从docker安装到前后端分离项目启动完成（docker安装mysql、nginx；启动jar包）\" class=\"headerlink\" title=\"从docker安装到前后端分离项目启动完成（docker安装mysql、nginx；启动jar包）\"></a>从docker安装到前后端分离项目启动完成（docker安装mysql、nginx；启动jar包）</h1><hr>\n<ul>\n<li><p>前言：通过上篇博文：<a href=\"https://blog.huijia21.com/archives/xu-ni-ji-an-zhuang-centos7-bing-pei-zhi-wang-luo\">虚拟机安装centos7并配置网络</a><br>我们已经安装好centos并配置好网络，现在来尝试docker容器的安装及基本使用。</p>\n</li>\n<li><p>本人为Java程序猿一枚，所以此处来使用docker安装几个常用软件：mysql，nginx。部署一个jar包服务，配合vue前端。部署一个简易程序。</p>\n</li>\n</ul>\n<hr>\n<p>[toc]</p>\n<hr>\n<h2 id=\"一、安装docker\"><a href=\"#一、安装docker\" class=\"headerlink\" title=\"一、安装docker\"></a>一、安装docker</h2><p><font color=red size=5> 此部分参照<a href=\"https://blog.csdn.net/weixin_43827693/article/details/107934604?spm=1001.2014.3001.5506\">linux下安装docker并部署运行jar</a>博文</font>（ 鸣谢！侵删）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">// 安装需要的软件包<br>yum install -y yum-utils device-mapper-persistent-data lvm2<br>//设置yum源<br>yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo<br>//启用 edge 和 testing 镜像仓库（可选）<br>yum-config-manager --enable docker-ce-edge<br>yum-config-manager --enable docker-ce-testing<br>//安装Docker最新版本<br>yum install -y docker-ce<br>//启动docker<br>systemctl start docker<br>//开机自启<br>systemctl  enable docker.service<br></code></pre></td></tr></table></figure>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509180632911.png\" alt=\"image-20220509180632911\"></p>\n<hr>\n<h2 id=\"二、使用docker安装mysql\"><a href=\"#二、使用docker安装mysql\" class=\"headerlink\" title=\"二、使用docker安装mysql\"></a>二、使用docker安装mysql</h2><p>可以去<a href=\"https://hub.docker.com/\">docker官网</a>注册一下，获取可用的docker镜像。直接搜想要安装的应用<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509180638168.png\" alt=\"image-20220509180638168\"><br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509180645355.png\" alt=\"image-20220509180645355\"></p>\n<h3 id=\"1-安装mysql\"><a href=\"#1-安装mysql\" class=\"headerlink\" title=\"1.安装mysql\"></a>1.安装mysql</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">//这里选择安装5.7.29版本<br>docker pull mysql:5.7.29<br>//ARM框架 docker pull mysql/mysql-server<br>//使用以下命令来查看是否已安装了 mysql： <br>docker images<br></code></pre></td></tr></table></figure>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509180701019.png\" alt=\"image-20220509180701019\"></p>\n<h3 id=\"2-启动mysql并设置密码\"><a href=\"#2-启动mysql并设置密码\" class=\"headerlink\" title=\"2. 启动mysql并设置密码\"></a>2. 启动mysql并设置密码</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">docker run -itd --restart=always --name mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=HBQ521521cf* mysql:5.7.29<br></code></pre></td></tr></table></figure>\n<p>命令解析：</p>\n<ul>\n<li>docker run：docker容器启动命令</li>\n<li>–name mysql：为此容器起名为mysql，可自定义</li>\n<li>-p 3306:3306 ：映射容器服务的 3306 端口到宿主机的 3306 端口，外部主机可以直接通过 宿主机ip:3306 访问到 MySQL 的服务。 </li>\n<li>-e MYSQL_ROOT_PASSWORD&#x3D;123456： 初始化 MySQL 的密码为123456</li>\n<li>mysql:5.7.29：你下载好的mysql镜像（需要指定版本）</li>\n</ul>\n<h3 id=\"3-查看容器运行状况\"><a href=\"#3-查看容器运行状况\" class=\"headerlink\" title=\"3. 查看容器运行状况\"></a>3. 查看容器运行状况</h3><p><code>docker ps</code><br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509180705836.png\" alt=\"image-20220509180705836\"></p>\n<h3 id=\"4-进入mysql容器中，更新访问权限，使本机或者navicat等远程连接\"><a href=\"#4-进入mysql容器中，更新访问权限，使本机或者navicat等远程连接\" class=\"headerlink\" title=\"4. 进入mysql容器中，更新访问权限，使本机或者navicat等远程连接\"></a>4. 进入mysql容器中，更新访问权限，使本机或者navicat等远程连接</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">docker exec -it mysql bash<br>//登录mysql<br>mysql -uroot -p123456<br></code></pre></td></tr></table></figure>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509180710221.png\" alt=\"image-20220509180710221\"></p>\n<ul>\n<li>修改权限 <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">update mysql.user set host=&quot;%&quot; where user=&quot;root&quot;;<br>//刷新权限<br>flush privileges;<br></code></pre></td></tr></table></figure>\n<img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509180809450.png\" alt=\"image-20220509180809450\"></li>\n</ul>\n<h3 id=\"5-使用navicat连接，测试成功\"><a href=\"#5-使用navicat连接，测试成功\" class=\"headerlink\" title=\"5. 使用navicat连接，测试成功\"></a>5. 使用navicat连接，测试成功</h3><p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509180817428.png\" alt=\"image-20220509180817428\"></p>\n<h2 id=\"三、使用docker安装nginx以及自定义配置文件\"><a href=\"#三、使用docker安装nginx以及自定义配置文件\" class=\"headerlink\" title=\"三、使用docker安装nginx以及自定义配置文件\"></a>三、使用docker安装nginx以及自定义配置文件</h2><h3 id=\"1-同样步骤去官网搜索nginx找到你想要下载的版本\"><a href=\"#1-同样步骤去官网搜索nginx找到你想要下载的版本\" class=\"headerlink\" title=\"1. 同样步骤去官网搜索nginx找到你想要下载的版本\"></a>1. 同样步骤去官网搜索nginx找到你想要下载的版本</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">//这里下载1.13版本<br>docker pull nginx:1.13<br></code></pre></td></tr></table></figure>\n<h3 id=\"2-启动默认配置文件的nginx\"><a href=\"#2-启动默认配置文件的nginx\" class=\"headerlink\" title=\"2. 启动默认配置文件的nginx\"></a>2. 启动默认配置文件的nginx</h3><p><code>docker run --name nginx -p 80:80 -d nginx:1.13</code><br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509180824938.png\" alt=\"image-20220509180824938\"></p>\n<h3 id=\"3-复制nginx配置文件到主机\"><a href=\"#3-复制nginx配置文件到主机\" class=\"headerlink\" title=\"3. 复制nginx配置文件到主机\"></a>3. 复制nginx配置文件到主机</h3><ul>\n<li><code>docker cp nginx:/etc/nginx/nginx.conf /opt/config/</code><br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/7f0551b5264c15af271cc082fa8ca82b.png\" alt=\"在这里插入图片描述\"></li>\n<li>修改该配置文件为你想要的配置，我这里配置到&#x2F;out&#x2F;project&#x2F;demo&#x2F;dist文件，为我的vue项目文件（你可以随便测试一个html）<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509180924987.png\" alt=\"image-20220509180924987\"></li>\n</ul>\n<h3 id=\"4-重启nginx，同时映射本机的配置文件，本机vue项目到容器中\"><a href=\"#4-重启nginx，同时映射本机的配置文件，本机vue项目到容器中\" class=\"headerlink\" title=\"4. 重启nginx，同时映射本机的配置文件，本机vue项目到容器中\"></a>4. 重启nginx，同时映射本机的配置文件，本机vue项目到容器中</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">//停止nginx容器<br>docker stop nginx<br>//删除<br>docker rm nginx<br>//重新启动<br>docker run  --restart=always --name nginx --privileged=true -p 80:80 -p8001:8001 -v /opt/config/nginx.conf:/etc/nginx/nginx.conf -v /out/project/demo/dist:/out/project/demo/dist -d nginx:1.13<br></code></pre></td></tr></table></figure>\n<p>本机访问成功<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509180941768.png\" alt=\"image-20220509180941768\"><br>命令解析：</p>\n<ul>\n<li>–restart&#x3D;always ：总是在启动docker后重启本容器</li>\n<li>–privileged&#x3D;true：添加root权限到容器（权限问题，详情百度）</li>\n<li>-p：端口映射，使用8001端口映射到本机（与你的nginx.conf保持一致）</li>\n<li>-v：分别映射你配置好的nginx配置和项目文件</li>\n<li>-d：后台启动</li>\n</ul>\n<hr>\n<h2 id=\"四、部署Java项目（此处为springboot项目的jar包）\"><a href=\"#四、部署Java项目（此处为springboot项目的jar包）\" class=\"headerlink\" title=\"四、部署Java项目（此处为springboot项目的jar包）\"></a>四、部署Java项目（此处为springboot项目的jar包）</h2><h3 id=\"1-新建Dockerfile\"><a href=\"#1-新建Dockerfile\" class=\"headerlink\" title=\"1. 新建Dockerfile\"></a>1. 新建Dockerfile</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">FROM java:8<br>ADD code-demo-persion-0.0.1-SNAPSHOT.jar  /demo.jar<br>EXPOSE 8088<br>ENTRYPOINT [&quot;java&quot;,&quot;-Xms1024m&quot;,&quot;-Xmx1024m&quot;,&quot;-jar&quot;,&quot;/demo.jar&quot;,&quot;--spring.profiles.active=dev&quot;,&quot;-c&quot;]<br></code></pre></td></tr></table></figure>\n<p>命令解析：</p>\n<ul>\n<li>FROM java:8，使用java8</li>\n<li>启动文件为code-demo-persion-0.0.1-SNAPSHOT.jar 重命名为 demo.jar</li>\n<li>ENTRYPOINT ：启动后执行的命令为[xxx]（语法百度）<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509180950205.png\" alt=\"image-20220509180950205\"></li>\n</ul>\n<h3 id=\"2-使用新建好的Dockerfile构建项目\"><a href=\"#2-使用新建好的Dockerfile构建项目\" class=\"headerlink\" title=\"2. 使用新建好的Dockerfile构建项目\"></a>2. 使用新建好的Dockerfile构建项目</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">cd /out/project/demo<br>//构建本目录下的Dockerfile<br>docker build -t demo:v1 .<br>//查看我们构建出的镜像<br>docker images<br></code></pre></td></tr></table></figure>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509180956869.png\" alt=\"image-20220509180956869\"></p>\n<h3 id=\"3-启动项目\"><a href=\"#3-启动项目\" class=\"headerlink\" title=\"3.启动项目\"></a>3.启动项目</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">docker run  -d --restart=always --name demo -p 8088:8088 -v /out/logs/demo:/out/logs/demo demo:v1<br></code></pre></td></tr></table></figure>\n<p>命令解析： </p>\n<ul>\n<li>-v：此处是为了将项目日志输出到本机以便查看<br>所有进程启动完成<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509181007080.png\" alt=\"image-20220509181007080\"><br>项目可访问<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509181019257.png\" alt=\"image-20220509181019257\"></li>\n</ul>\n<hr>\n<h2 id=\"五、redis安装\"><a href=\"#五、redis安装\" class=\"headerlink\" title=\"五、redis安装\"></a>五、redis安装</h2><h3 id=\"1-下载镜像\"><a href=\"#1-下载镜像\" class=\"headerlink\" title=\"1. 下载镜像\"></a>1. 下载镜像</h3><p><code>docker pull redis:5.0.3</code></p>\n<h3 id=\"2-添加配置文件启动\"><a href=\"#2-添加配置文件启动\" class=\"headerlink\" title=\"2. 添加配置文件启动\"></a>2. 添加配置文件启动</h3><h4 id=\"2-1-下载对应版本的压缩包官网\"><a href=\"#2-1-下载对应版本的压缩包官网\" class=\"headerlink\" title=\"2-1 下载对应版本的压缩包官网\"></a>2-1 下载对应版本的压缩包<a href=\"https://download.redis.io/releases/?_ga=2.47530222.850311942.1626866911-284099862.1626866911\">官网</a></h4><h4 id=\"2-2-解压后得到conf文件\"><a href=\"#2-2-解压后得到conf文件\" class=\"headerlink\" title=\"2-2  解压后得到conf文件\"></a>2-2  解压后得到conf文件</h4><p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509181026055.png\" alt=\"image-20220509181026055\"></p>\n<h4 id=\"2-3-修改配置文件\"><a href=\"#2-3-修改配置文件\" class=\"headerlink\" title=\"2-3 修改配置文件\"></a>2-3 修改配置文件</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">//找到bind 127.0.0.1改为<br>#bind 127.0.0.1<br></code></pre></td></tr></table></figure>\n<h4 id=\"2-4-将配置文件上传至centos中\"><a href=\"#2-4-将配置文件上传至centos中\" class=\"headerlink\" title=\"2-4 将配置文件上传至centos中\"></a>2-4 将配置文件上传至centos中</h4><ul>\n<li>配置文件在主机的位置<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509181032944.png\" alt=\"image-20220509181032944\"></li>\n</ul>\n<h4 id=\"2-5-启动redis同时设置密码\"><a href=\"#2-5-启动redis同时设置密码\" class=\"headerlink\" title=\"2-5 启动redis同时设置密码\"></a>2-5 启动redis同时设置密码</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">docker run -itd --restart=always  -p 6379:6379 --name redis -v /opt/config/redis.conf:/etc/redis/redis.conf -v /out/data:/data  redis:5.0.3 redis-server /etc/redis/redis.conf --requirepass HBQ521521cf* --appendonly yes<br></code></pre></td></tr></table></figure>\n<p>命令解析：</p>\n<ul>\n<li><p>–requirepass xxx：xxx为你所设置的redis密码</p>\n</li>\n<li><p>–appendonly yes：开启redis 持久化</p>\n</li>\n<li><p>启动成功<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509181041052.png\" alt=\"image-20220509181041052\"></p>\n</li>\n</ul>\n<hr>\n<p>本文大概介绍了使用docker一个前后端系统的上线流程，下面总结一点常用命令：</p>\n<ul>\n<li>service docker start&#x2F;restart&#x2F;stop：docker开启&#x2F;重启&#x2F;关闭</li>\n<li>docker images：查看镜像</li>\n<li>docker ps：查看启动的容器</li>\n<li>docker start&#x2F;stop xxx：开启&#x2F;关闭某容器</li>\n<li>docker build ~：构建镜像</li>\n<li>docker run ~：启动容器</li>\n<li>docker exec -it xxx bash :在运行的容器中执行交互终端命令，如：docker exec -it mysql bash</li>\n<li>docker rmi xxx：删除某镜像，如：docker rmi demo:v1（demo:v1为镜像名，需要携带版本）</li>\n<li>docker rm xxx：删除某容器，如：docker rm demo（demo为容器名）</li>\n<li>docker update xxx xxx：为某个容器更新某设置，如docker update –restart&#x3D;always nginx（将nginx容器设置为自启动）</li>\n<li>docker cp &#x2F;out&#x2F;maven xxx:&#x2F;out：xxx为容器名 将主机的&#x2F;out&#x2F;maven文件夹复制到容器的&#x2F;out文件夹</li>\n</ul>\n<p>更多命令参考：<a href=\"https://www.runoob.com/docker/docker-command-manual.html\">菜鸟教程</a></p>\n<p>相关技术使用详情：<a href=\"https://blog.huijia21.com/archives/springboot-ji-cheng-jenkins-shi-xian-zi-dong-hua-bu-shu-centos7windows-han-gai-fang-jenkins-sha-si-de-jiao-ben-\">springBoot集成Jenkins，实现自动化部署（centos7&amp;windows，涵盖防jenkins杀死的脚本）</a></p>\n"},{"_content":"# 内网centos 7安装mysql及可能出现问题记录\n\n---\n\n[toc]\n\n---\n\n公网centos 7安装mysql见：\n[服务器部署---《mysql篇》 --菜鸟小回](https://blog.huijia21.com/archives/fu-wu-qi-bu-shu-mysql-pian-)\n因内网原因，公网个别命令出现问题，只能采取解压包形式安装。\n主流程参考：\n[CentOS 7.2内网环境搭建MySQL5.7.24](https://www.cnblogs.com/yybrhr/p/9914427.html)\n\n# 可能出现问题：\n## 一、在使用msqld命令时： -bash: mysqld: 未找到命令。\n出现该问题是因为环境变量问题，解决方案为配置环境变量，配置完成后重新使用mysqld命令\n```javascript?linenums\nvi /etc/profile\n#末尾添加\nexport PATH=$PATH:/usr/local/mysql/bin\n#刷新环境变量\nsource /etc/profile\n```\n## 二、执行mysqld --initialize --user=mysql报错：Can't change to run as user 'mysql' Please check that the user exists\n解决：\n```javascript?linenums\n#创建mysql用户\nuseradd mysql\n#mysql目录改为mysql读写权限\nchown -R mysql:mysql /var/lib/mysql\nchown -R mysql:mysql /usr/local/mysql\n```\n[方案来源](https://blog.csdn.net/u012889638/article/details/51395327)\n\n## 三、使用navicate连接mysql时：ERROR 1062 (23000): Duplicate entry '%-root' for key 'PRIMARY'\n+ 原因：老生常谈的防火墙问题，3306端口未开放\n+ 解决：\n```javascript?linenums\n#开放防火墙3306端口\nfirewall-cmd --zone=public --add-port=3306/tcp --permanent\n#重启防火墙\nsystemctl restart firewalld.service\n```","source":"_posts/BookMark/运维/内网centos 7安装mysql及问题记录.md","raw":"# 内网centos 7安装mysql及可能出现问题记录\n\n---\n\n[toc]\n\n---\n\n公网centos 7安装mysql见：\n[服务器部署---《mysql篇》 --菜鸟小回](https://blog.huijia21.com/archives/fu-wu-qi-bu-shu-mysql-pian-)\n因内网原因，公网个别命令出现问题，只能采取解压包形式安装。\n主流程参考：\n[CentOS 7.2内网环境搭建MySQL5.7.24](https://www.cnblogs.com/yybrhr/p/9914427.html)\n\n# 可能出现问题：\n## 一、在使用msqld命令时： -bash: mysqld: 未找到命令。\n出现该问题是因为环境变量问题，解决方案为配置环境变量，配置完成后重新使用mysqld命令\n```javascript?linenums\nvi /etc/profile\n#末尾添加\nexport PATH=$PATH:/usr/local/mysql/bin\n#刷新环境变量\nsource /etc/profile\n```\n## 二、执行mysqld --initialize --user=mysql报错：Can't change to run as user 'mysql' Please check that the user exists\n解决：\n```javascript?linenums\n#创建mysql用户\nuseradd mysql\n#mysql目录改为mysql读写权限\nchown -R mysql:mysql /var/lib/mysql\nchown -R mysql:mysql /usr/local/mysql\n```\n[方案来源](https://blog.csdn.net/u012889638/article/details/51395327)\n\n## 三、使用navicate连接mysql时：ERROR 1062 (23000): Duplicate entry '%-root' for key 'PRIMARY'\n+ 原因：老生常谈的防火墙问题，3306端口未开放\n+ 解决：\n```javascript?linenums\n#开放防火墙3306端口\nfirewall-cmd --zone=public --add-port=3306/tcp --permanent\n#重启防火墙\nsystemctl restart firewalld.service\n```","slug":"BookMark/运维/内网centos 7安装mysql及问题记录","published":1,"date":"2022-07-18T09:51:32.000Z","updated":"2022-07-18T09:51:32.000Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cl7ptszot0033aba5011o6k1f","content":"<h1><span id=\"内网centos-7安装mysql及可能出现问题记录\">内网centos 7安装mysql及可能出现问题记录</span></h1><hr>\n<p>[toc]</p>\n<hr>\n<p>公网centos 7安装mysql见：<br><a href=\"https://blog.huijia21.com/archives/fu-wu-qi-bu-shu-mysql-pian-\">服务器部署—《mysql篇》 –菜鸟小回</a><br>因内网原因，公网个别命令出现问题，只能采取解压包形式安装。<br>主流程参考：<br><a href=\"https://www.cnblogs.com/yybrhr/p/9914427.html\">CentOS 7.2内网环境搭建MySQL5.7.24</a></p>\n<h1><span id=\"可能出现问题\">可能出现问题：</span></h1><h2><span id=\"一-在使用msqld命令时-bash-mysqld-未找到命令\">一、在使用msqld命令时： -bash: mysqld: 未找到命令。</span></h2><p>出现该问题是因为环境变量问题，解决方案为配置环境变量，配置完成后重新使用mysqld命令</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">vi /etc/profile<br>#末尾添加<br>export PATH=$PATH:/usr/local/mysql/bin<br>#刷新环境变量<br>source /etc/profile<br></code></pre></td></tr></table></figure>\n<h2><span id=\"二-执行mysqld-initialize-userx3dmysql报错cant-change-to-run-as-user-mysql-please-check-that-the-user-exists\">二、执行mysqld –initialize –user&#x3D;mysql报错：Can’t change to run as user ‘mysql’ Please check that the user exists</span></h2><p>解决：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">#创建mysql用户<br>useradd mysql<br>#mysql目录改为mysql读写权限<br>chown -R mysql:mysql /var/lib/mysql<br>chown -R mysql:mysql /usr/local/mysql<br></code></pre></td></tr></table></figure>\n<p><a href=\"https://blog.csdn.net/u012889638/article/details/51395327\">方案来源</a></p>\n<h2><span id=\"三-使用navicate连接mysql时error-1062-23000-duplicate-entry-root-for-key-primary\">三、使用navicate连接mysql时：ERROR 1062 (23000): Duplicate entry ‘%-root’ for key ‘PRIMARY’</span></h2><ul>\n<li>原因：老生常谈的防火墙问题，3306端口未开放</li>\n<li>解决：<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">#开放防火墙3306端口<br>firewall-cmd --zone=public --add-port=3306/tcp --permanent<br>#重启防火墙<br>systemctl restart firewalld.service<br></code></pre></td></tr></table></figure></li>\n</ul>\n","site":{"data":{}},"wordcount":725,"excerpt":"","more":"<h1 id=\"内网centos-7安装mysql及可能出现问题记录\"><a href=\"#内网centos-7安装mysql及可能出现问题记录\" class=\"headerlink\" title=\"内网centos 7安装mysql及可能出现问题记录\"></a>内网centos 7安装mysql及可能出现问题记录</h1><hr>\n<p>[toc]</p>\n<hr>\n<p>公网centos 7安装mysql见：<br><a href=\"https://blog.huijia21.com/archives/fu-wu-qi-bu-shu-mysql-pian-\">服务器部署—《mysql篇》 –菜鸟小回</a><br>因内网原因，公网个别命令出现问题，只能采取解压包形式安装。<br>主流程参考：<br><a href=\"https://www.cnblogs.com/yybrhr/p/9914427.html\">CentOS 7.2内网环境搭建MySQL5.7.24</a></p>\n<h1 id=\"可能出现问题：\"><a href=\"#可能出现问题：\" class=\"headerlink\" title=\"可能出现问题：\"></a>可能出现问题：</h1><h2 id=\"一、在使用msqld命令时：-bash-mysqld-未找到命令。\"><a href=\"#一、在使用msqld命令时：-bash-mysqld-未找到命令。\" class=\"headerlink\" title=\"一、在使用msqld命令时： -bash: mysqld: 未找到命令。\"></a>一、在使用msqld命令时： -bash: mysqld: 未找到命令。</h2><p>出现该问题是因为环境变量问题，解决方案为配置环境变量，配置完成后重新使用mysqld命令</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">vi /etc/profile<br>#末尾添加<br>export PATH=$PATH:/usr/local/mysql/bin<br>#刷新环境变量<br>source /etc/profile<br></code></pre></td></tr></table></figure>\n<h2 id=\"二、执行mysqld-–initialize-–user-x3D-mysql报错：Can’t-change-to-run-as-user-‘mysql’-Please-check-that-the-user-exists\"><a href=\"#二、执行mysqld-–initialize-–user-x3D-mysql报错：Can’t-change-to-run-as-user-‘mysql’-Please-check-that-the-user-exists\" class=\"headerlink\" title=\"二、执行mysqld –initialize –user&#x3D;mysql报错：Can’t change to run as user ‘mysql’ Please check that the user exists\"></a>二、执行mysqld –initialize –user&#x3D;mysql报错：Can’t change to run as user ‘mysql’ Please check that the user exists</h2><p>解决：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">#创建mysql用户<br>useradd mysql<br>#mysql目录改为mysql读写权限<br>chown -R mysql:mysql /var/lib/mysql<br>chown -R mysql:mysql /usr/local/mysql<br></code></pre></td></tr></table></figure>\n<p><a href=\"https://blog.csdn.net/u012889638/article/details/51395327\">方案来源</a></p>\n<h2 id=\"三、使用navicate连接mysql时：ERROR-1062-23000-Duplicate-entry-‘-root’-for-key-‘PRIMARY’\"><a href=\"#三、使用navicate连接mysql时：ERROR-1062-23000-Duplicate-entry-‘-root’-for-key-‘PRIMARY’\" class=\"headerlink\" title=\"三、使用navicate连接mysql时：ERROR 1062 (23000): Duplicate entry ‘%-root’ for key ‘PRIMARY’\"></a>三、使用navicate连接mysql时：ERROR 1062 (23000): Duplicate entry ‘%-root’ for key ‘PRIMARY’</h2><ul>\n<li>原因：老生常谈的防火墙问题，3306端口未开放</li>\n<li>解决：<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">#开放防火墙3306端口<br>firewall-cmd --zone=public --add-port=3306/tcp --permanent<br>#重启防火墙<br>systemctl restart firewalld.service<br></code></pre></td></tr></table></figure></li>\n</ul>\n"},{"_content":"# 备份恢复\n\n## 安装docker\n\n```\napt install -y docker.io\napt install -y docker-compose\n```\n\n## 常用脚本\n\n```\n#ROOT密码\nbash <(curl -Ls https://github.com/baoqihui/script/raw/main/root.sh)\n#更新系统\nbash <(curl -Ls https://github.com/baoqihui/script/raw/main/init.sh)\n#证书申请\nbash <(curl -Ls https://github.com/baoqihui/script/raw/main/cert.sh)\n```\n\n## 备份\n\n```\n#同步工具&压缩工具\napt install -y rclone&&apt install -y zip\n\n#同步配置\nmkdir -p /root/.config/rclone&wget -O /root/.config/rclone/rclone.conf https://alist.huijia.cf/d/hui/config/linux/rclone.conf\n\n#下载脚本文件\nwget -O /root/backup-rclone.sh https://raw.githubusercontent.com/baoqihui/script/main/my/backup-rclone.sh\nwget -O /root/backup-mysql.sh https://raw.githubusercontent.com/baoqihui/script/main/my/backup-mysql.sh\nwget -O /root/backup-mysql7.sh https://raw.githubusercontent.com/baoqihui/script/main/my/backup-mysql7.sh\nwget -O /root/backup-mysql8.sh https://raw.githubusercontent.com/baoqihui/script/main/my/backup-mysql8.sh\n\n#定时任务每小时刷新\necho \"0 */2 * * * bash /root/backup-mysql.sh > /out/backup-mysql.log 2&1 &\" >>/var/spool/cron/crontabs/root\necho \"2 */2 * * * bash /root/backup-mysql7.sh > /out/backup-mysq7.log 2&1 &\" >>/var/spool/cron/crontabs/root\necho \"4 */2 * * * bash /root/backup-mysql8.sh > /out/backup-mysql8.log 2&1 &\" >>/var/spool/cron/crontabs/root\necho \"3 0 * * * bash /root/backup-rclone.sh > /out/backup-rclone.log 2&1 &\" >>/var/spool/cron/crontabs/root\n```\n\n## 恢复\n\n```\n#恢复所有配置文件\nbash <(curl -Ls https://raw.githubusercontent.com/baoqihui/script/main/recover-rclone.sh)\n#dokcker恢复\nwget -O /root/docker-compose.yml https://raw.githubusercontent.com/baoqihui/script/main/my/docker-compose.yml&&docker-compose up -d\n#数据库恢复\nbash <(curl -Ls https://raw.githubusercontent.com/baoqihui/script/main/reciver-mysql.sh)\n\n#登录mysql刷新权限\ndocker exec -it mysql8 bash\nmysql -uroot -pHBQ521521cf*\nupdate mysql.user set host=\"%\" where user=\"root\";\nflush privileges;\n\n#执行逆向mysql\ndocker exec -it mysql8 bash\ncd /out/mysql8/dbscripts/db/scripts/r1.0.4\nmysql -uroot -pHBQ521521cf*\nsource r1.0.4_1.sql\n```\n\n## docker-compose常用命令\n\n```\n#如果启动时指定-d标志，则以守护进程模式运行服务\ndocker-compose up -d\n#停止所有服务，如果服务没有停止，可以使用docker-compose kill强制杀死服务\ndocker-compose stop\n#删除所有服务\ndocker-compose rm -f\n\n#启动\ndocker-compose up \n#如果要批量启动服务（如启动 8 个 Scrapy），则在--scale选项指定服务的个数：\ndocker-compose up -d --scale spider=8\n#列出本地 docker-compose.yml 文件里定义的正在运行的所有服务\ndocker-compose ps\n#查看服务的日志，这个命令会追踪服务的日志文件，类似tail -f命令，使用Ctrl+C退出\ndocker-compose logs\n```\n\n## ServerStatus-Hotaru(探针)\n\n```\nwget https://raw.githubusercontent.com/cokemine/ServerStatus-Hotaru/master/status.sh\n#服务端\nbash status.sh s\n#客户端\nbash status.sh c\n#可通过删除所有下的header去除背景图\n/usr/local/ServerStatus/web/css/hotaru_fix.css\n#可以修改配置文件手动调整次序\n/usr/local/ServerStatus/server/config.json\n```\n\n## 流媒体\n\n```\nbash <(curl -sSL \"https://git.io/JswGm\")\n\nINSERT INTO seer_default.`risk_label` (`id`, `description`) VALUES (10, '高速出险');\n```\n\nversion: '3.3'\nservices:\n  mysql:\n    container_name: mysql\n    restart: always\n    volumes:\n      - '/opt/config/mysqld.cnf:/etc/mysql/mysql.conf.d/mysqld.cnf'\n      - '/out/mysql/:/out/mysql/'\n    ports:\n      - '3306:3306'\n    environment:\n      - 'MYSQL_ROOT_PASSWORD=biNoQy2rXb4aLUQ'\n    image: mysql:5.7.29\n  redis:\n    container_name: redis\n    restart: always\n    ports:\n      - '6379:6379'\n    volumes:\n      - 'D:\\opt\\config\\redis.conf:/etc/redis/redis.conf'\n    command: redis-server /etc/redis/redis.conf --requirepass HBQ521521cf* --appendonly yes\n    image: redis:5.0.3\n","source":"_posts/BookMark/运维/备份恢复.md","raw":"# 备份恢复\n\n## 安装docker\n\n```\napt install -y docker.io\napt install -y docker-compose\n```\n\n## 常用脚本\n\n```\n#ROOT密码\nbash <(curl -Ls https://github.com/baoqihui/script/raw/main/root.sh)\n#更新系统\nbash <(curl -Ls https://github.com/baoqihui/script/raw/main/init.sh)\n#证书申请\nbash <(curl -Ls https://github.com/baoqihui/script/raw/main/cert.sh)\n```\n\n## 备份\n\n```\n#同步工具&压缩工具\napt install -y rclone&&apt install -y zip\n\n#同步配置\nmkdir -p /root/.config/rclone&wget -O /root/.config/rclone/rclone.conf https://alist.huijia.cf/d/hui/config/linux/rclone.conf\n\n#下载脚本文件\nwget -O /root/backup-rclone.sh https://raw.githubusercontent.com/baoqihui/script/main/my/backup-rclone.sh\nwget -O /root/backup-mysql.sh https://raw.githubusercontent.com/baoqihui/script/main/my/backup-mysql.sh\nwget -O /root/backup-mysql7.sh https://raw.githubusercontent.com/baoqihui/script/main/my/backup-mysql7.sh\nwget -O /root/backup-mysql8.sh https://raw.githubusercontent.com/baoqihui/script/main/my/backup-mysql8.sh\n\n#定时任务每小时刷新\necho \"0 */2 * * * bash /root/backup-mysql.sh > /out/backup-mysql.log 2&1 &\" >>/var/spool/cron/crontabs/root\necho \"2 */2 * * * bash /root/backup-mysql7.sh > /out/backup-mysq7.log 2&1 &\" >>/var/spool/cron/crontabs/root\necho \"4 */2 * * * bash /root/backup-mysql8.sh > /out/backup-mysql8.log 2&1 &\" >>/var/spool/cron/crontabs/root\necho \"3 0 * * * bash /root/backup-rclone.sh > /out/backup-rclone.log 2&1 &\" >>/var/spool/cron/crontabs/root\n```\n\n## 恢复\n\n```\n#恢复所有配置文件\nbash <(curl -Ls https://raw.githubusercontent.com/baoqihui/script/main/recover-rclone.sh)\n#dokcker恢复\nwget -O /root/docker-compose.yml https://raw.githubusercontent.com/baoqihui/script/main/my/docker-compose.yml&&docker-compose up -d\n#数据库恢复\nbash <(curl -Ls https://raw.githubusercontent.com/baoqihui/script/main/reciver-mysql.sh)\n\n#登录mysql刷新权限\ndocker exec -it mysql8 bash\nmysql -uroot -pHBQ521521cf*\nupdate mysql.user set host=\"%\" where user=\"root\";\nflush privileges;\n\n#执行逆向mysql\ndocker exec -it mysql8 bash\ncd /out/mysql8/dbscripts/db/scripts/r1.0.4\nmysql -uroot -pHBQ521521cf*\nsource r1.0.4_1.sql\n```\n\n## docker-compose常用命令\n\n```\n#如果启动时指定-d标志，则以守护进程模式运行服务\ndocker-compose up -d\n#停止所有服务，如果服务没有停止，可以使用docker-compose kill强制杀死服务\ndocker-compose stop\n#删除所有服务\ndocker-compose rm -f\n\n#启动\ndocker-compose up \n#如果要批量启动服务（如启动 8 个 Scrapy），则在--scale选项指定服务的个数：\ndocker-compose up -d --scale spider=8\n#列出本地 docker-compose.yml 文件里定义的正在运行的所有服务\ndocker-compose ps\n#查看服务的日志，这个命令会追踪服务的日志文件，类似tail -f命令，使用Ctrl+C退出\ndocker-compose logs\n```\n\n## ServerStatus-Hotaru(探针)\n\n```\nwget https://raw.githubusercontent.com/cokemine/ServerStatus-Hotaru/master/status.sh\n#服务端\nbash status.sh s\n#客户端\nbash status.sh c\n#可通过删除所有下的header去除背景图\n/usr/local/ServerStatus/web/css/hotaru_fix.css\n#可以修改配置文件手动调整次序\n/usr/local/ServerStatus/server/config.json\n```\n\n## 流媒体\n\n```\nbash <(curl -sSL \"https://git.io/JswGm\")\n\nINSERT INTO seer_default.`risk_label` (`id`, `description`) VALUES (10, '高速出险');\n```\n\nversion: '3.3'\nservices:\n  mysql:\n    container_name: mysql\n    restart: always\n    volumes:\n      - '/opt/config/mysqld.cnf:/etc/mysql/mysql.conf.d/mysqld.cnf'\n      - '/out/mysql/:/out/mysql/'\n    ports:\n      - '3306:3306'\n    environment:\n      - 'MYSQL_ROOT_PASSWORD=biNoQy2rXb4aLUQ'\n    image: mysql:5.7.29\n  redis:\n    container_name: redis\n    restart: always\n    ports:\n      - '6379:6379'\n    volumes:\n      - 'D:\\opt\\config\\redis.conf:/etc/redis/redis.conf'\n    command: redis-server /etc/redis/redis.conf --requirepass HBQ521521cf* --appendonly yes\n    image: redis:5.0.3\n","slug":"BookMark/运维/备份恢复","published":1,"date":"2022-07-18T09:51:32.000Z","updated":"2022-08-30T02:33:57.054Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cl7ptszot0034aba513et84ty","content":"<h1><span id=\"备份恢复\">备份恢复</span></h1><h2><span id=\"安装docker\">安装docker</span></h2><figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cmake\">apt <span class=\"hljs-keyword\">install</span> -y docker.io<br>apt <span class=\"hljs-keyword\">install</span> -y docker-compose<br></code></pre></td></tr></table></figure>\n\n<h2><span id=\"常用脚本\">常用脚本</span></h2><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\"><span class=\"hljs-comment\">#ROOT密码</span><br>bash &lt;(curl -Ls https:<span class=\"hljs-regexp\">//gi</span>thub.com<span class=\"hljs-regexp\">/baoqihui/</span>script<span class=\"hljs-regexp\">/raw/m</span>ain/root.sh)<br><span class=\"hljs-comment\">#更新系统</span><br>bash &lt;(curl -Ls https:<span class=\"hljs-regexp\">//gi</span>thub.com<span class=\"hljs-regexp\">/baoqihui/</span>script<span class=\"hljs-regexp\">/raw/m</span>ain/init.sh)<br><span class=\"hljs-comment\">#证书申请</span><br>bash &lt;(curl -Ls https:<span class=\"hljs-regexp\">//gi</span>thub.com<span class=\"hljs-regexp\">/baoqihui/</span>script<span class=\"hljs-regexp\">/raw/m</span>ain/cert.sh)<br></code></pre></td></tr></table></figure>\n\n<h2><span id=\"备份\">备份</span></h2><figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gradle\">#同步工具&amp;压缩工具<br>apt install -y rclone&amp;&amp;apt install -y zip<br><br>#同步配置<br>mkdir -p <span class=\"hljs-regexp\">/root/</span>.config<span class=\"hljs-regexp\">/rclone&amp;wget -O /</span>root<span class=\"hljs-regexp\">/.config/</span>rclone<span class=\"hljs-regexp\">/rclone.conf https:/</span><span class=\"hljs-regexp\">/alist.huijia.cf/</span>d<span class=\"hljs-regexp\">/hui/</span>config<span class=\"hljs-regexp\">/linux/</span>rclone.conf<br><br>#下载脚本文件<br>wget -O <span class=\"hljs-regexp\">/root/</span>backup-rclone.sh https:<span class=\"hljs-comment\">//raw.githubusercontent.com/baoqihui/script/main/my/backup-rclone.sh</span><br>wget -O <span class=\"hljs-regexp\">/root/</span>backup-mysql.sh https:<span class=\"hljs-comment\">//raw.githubusercontent.com/baoqihui/script/main/my/backup-mysql.sh</span><br>wget -O <span class=\"hljs-regexp\">/root/</span>backup-mysql7.sh https:<span class=\"hljs-comment\">//raw.githubusercontent.com/baoqihui/script/main/my/backup-mysql7.sh</span><br>wget -O <span class=\"hljs-regexp\">/root/</span>backup-mysql8.sh https:<span class=\"hljs-comment\">//raw.githubusercontent.com/baoqihui/script/main/my/backup-mysql8.sh</span><br><br>#定时任务每小时刷新<br>echo <span class=\"hljs-string\">&quot;0 */2 * * * bash /root/backup-mysql.sh &gt; /out/backup-mysql.log 2&amp;1 &amp;&quot;</span> &gt;&gt;<span class=\"hljs-regexp\">/var/</span>spool<span class=\"hljs-regexp\">/cron/</span>crontabs/root<br>echo <span class=\"hljs-string\">&quot;2 */2 * * * bash /root/backup-mysql7.sh &gt; /out/backup-mysq7.log 2&amp;1 &amp;&quot;</span> &gt;&gt;<span class=\"hljs-regexp\">/var/</span>spool<span class=\"hljs-regexp\">/cron/</span>crontabs/root<br>echo <span class=\"hljs-string\">&quot;4 */2 * * * bash /root/backup-mysql8.sh &gt; /out/backup-mysql8.log 2&amp;1 &amp;&quot;</span> &gt;&gt;<span class=\"hljs-regexp\">/var/</span>spool<span class=\"hljs-regexp\">/cron/</span>crontabs/root<br>echo <span class=\"hljs-string\">&quot;3 0 * * * bash /root/backup-rclone.sh &gt; /out/backup-rclone.log 2&amp;1 &amp;&quot;</span> &gt;&gt;<span class=\"hljs-regexp\">/var/</span>spool<span class=\"hljs-regexp\">/cron/</span>crontabs/root<br></code></pre></td></tr></table></figure>\n\n<h2><span id=\"恢复\">恢复</span></h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\">#恢复所有配置文件</span><br>bash &lt;(curl -Ls https://raw.githubusercontent.com/baoqihui/script/main/recover-rclone.sh)<br><span class=\"hljs-comment\">#dokcker恢复</span><br>wget -O /root/docker-compose.yml https://raw.githubusercontent.com/baoqihui/script/main/my/docker-compose.yml&amp;&amp;docker-compose up -d<br><span class=\"hljs-comment\">#数据库恢复</span><br>bash &lt;(curl -Ls https://raw.githubusercontent.com/baoqihui/script/main/reciver-mysql.sh)<br><br><span class=\"hljs-comment\">#登录mysql刷新权限</span><br>docker <span class=\"hljs-built_in\">exec</span> -it mysql8 bash<br>mysql -uroot -pHBQ521521cf*<br>update mysql.user <span class=\"hljs-built_in\">set</span> host=<span class=\"hljs-string\">&quot;%&quot;</span> <span class=\"hljs-built_in\">where</span> user=<span class=\"hljs-string\">&quot;root&quot;</span>;<br>flush privileges;<br><br><span class=\"hljs-comment\">#执行逆向mysql</span><br>docker <span class=\"hljs-built_in\">exec</span> -it mysql8 bash<br><span class=\"hljs-built_in\">cd</span> /out/mysql8/dbscripts/db/scripts/r1.0.4<br>mysql -uroot -pHBQ521521cf*<br><span class=\"hljs-built_in\">source</span> r1.0.4_1.sql<br></code></pre></td></tr></table></figure>\n\n<h2><span id=\"docker-compose常用命令\">docker-compose常用命令</span></h2><figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs powershell\"><span class=\"hljs-comment\">#如果启动时指定-d标志，则以守护进程模式运行服务</span><br>docker<span class=\"hljs-literal\">-compose</span> up <span class=\"hljs-literal\">-d</span><br><span class=\"hljs-comment\">#停止所有服务，如果服务没有停止，可以使用docker-compose kill强制杀死服务</span><br>docker<span class=\"hljs-literal\">-compose</span> stop<br><span class=\"hljs-comment\">#删除所有服务</span><br>docker<span class=\"hljs-literal\">-compose</span> <span class=\"hljs-built_in\">rm</span> <span class=\"hljs-operator\">-f</span><br><br><span class=\"hljs-comment\">#启动</span><br>docker<span class=\"hljs-literal\">-compose</span> up <br><span class=\"hljs-comment\">#如果要批量启动服务（如启动 8 个 Scrapy），则在--scale选项指定服务的个数：</span><br>docker<span class=\"hljs-literal\">-compose</span> up <span class=\"hljs-literal\">-d</span> <span class=\"hljs-literal\">--scale</span> spider=<span class=\"hljs-number\">8</span><br><span class=\"hljs-comment\">#列出本地 docker-compose.yml 文件里定义的正在运行的所有服务</span><br>docker<span class=\"hljs-literal\">-compose</span> <span class=\"hljs-built_in\">ps</span><br><span class=\"hljs-comment\">#查看服务的日志，这个命令会追踪服务的日志文件，类似tail -f命令，使用Ctrl+C退出</span><br>docker<span class=\"hljs-literal\">-compose</span> logs<br></code></pre></td></tr></table></figure>\n\n<h2><span id=\"serverstatus-hotaru探针\">ServerStatus-Hotaru(探针)</span></h2><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\">wget https:<span class=\"hljs-regexp\">//</span>raw.githubusercontent.com<span class=\"hljs-regexp\">/cokemine/</span>ServerStatus-Hotaru<span class=\"hljs-regexp\">/master/</span>status.sh<br><span class=\"hljs-comment\">#服务端</span><br>bash status.sh s<br><span class=\"hljs-comment\">#客户端</span><br>bash status.sh c<br><span class=\"hljs-comment\">#可通过删除所有下的header去除背景图</span><br><span class=\"hljs-regexp\">/usr/</span>local<span class=\"hljs-regexp\">/ServerStatus/</span>web<span class=\"hljs-regexp\">/css/</span>hotaru_fix.css<br><span class=\"hljs-comment\">#可以修改配置文件手动调整次序</span><br><span class=\"hljs-regexp\">/usr/</span>local<span class=\"hljs-regexp\">/ServerStatus/</span>server/config.json<br></code></pre></td></tr></table></figure>\n\n<h2><span id=\"流媒体\">流媒体</span></h2><figure class=\"highlight autohotkey\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs autohotkey\">bash &lt;(curl -sSL <span class=\"hljs-string\">&quot;https://git.io/JswGm&quot;</span>)<br><br>INSERT INTO seer_default.`risk_label` (`id`, `description`) VALUES (<span class=\"hljs-number\">10</span>, &#x27;高速出险&#x27;)<span class=\"hljs-comment\">;</span><br></code></pre></td></tr></table></figure>\n\n<p>version: ‘3.3’<br>services:<br>  mysql:<br>    container_name: mysql<br>    restart: always<br>    volumes:<br>      - ‘&#x2F;opt&#x2F;config&#x2F;mysqld.cnf:&#x2F;etc&#x2F;mysql&#x2F;mysql.conf.d&#x2F;mysqld.cnf’<br>      - ‘&#x2F;out&#x2F;mysql&#x2F;:&#x2F;out&#x2F;mysql&#x2F;‘<br>    ports:<br>      - ‘3306:3306’<br>    environment:<br>      - ‘MYSQL_ROOT_PASSWORD&#x3D;biNoQy2rXb4aLUQ’<br>    image: mysql:5.7.29<br>  redis:<br>    container_name: redis<br>    restart: always<br>    ports:<br>      - ‘6379:6379’<br>    volumes:<br>      - ‘D:\\opt\\config\\redis.conf:&#x2F;etc&#x2F;redis&#x2F;redis.conf’<br>    command: redis-server &#x2F;etc&#x2F;redis&#x2F;redis.conf –requirepass HBQ521521cf* –appendonly yes<br>    image: redis:5.0.3</p>\n","site":{"data":{}},"wordcount":3390,"excerpt":"","more":"<h1 id=\"备份恢复\"><a href=\"#备份恢复\" class=\"headerlink\" title=\"备份恢复\"></a>备份恢复</h1><h2 id=\"安装docker\"><a href=\"#安装docker\" class=\"headerlink\" title=\"安装docker\"></a>安装docker</h2><figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cmake\">apt <span class=\"hljs-keyword\">install</span> -y docker.io<br>apt <span class=\"hljs-keyword\">install</span> -y docker-compose<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"常用脚本\"><a href=\"#常用脚本\" class=\"headerlink\" title=\"常用脚本\"></a>常用脚本</h2><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\"><span class=\"hljs-comment\">#ROOT密码</span><br>bash &lt;(curl -Ls https:<span class=\"hljs-regexp\">//gi</span>thub.com<span class=\"hljs-regexp\">/baoqihui/</span>script<span class=\"hljs-regexp\">/raw/m</span>ain/root.sh)<br><span class=\"hljs-comment\">#更新系统</span><br>bash &lt;(curl -Ls https:<span class=\"hljs-regexp\">//gi</span>thub.com<span class=\"hljs-regexp\">/baoqihui/</span>script<span class=\"hljs-regexp\">/raw/m</span>ain/init.sh)<br><span class=\"hljs-comment\">#证书申请</span><br>bash &lt;(curl -Ls https:<span class=\"hljs-regexp\">//gi</span>thub.com<span class=\"hljs-regexp\">/baoqihui/</span>script<span class=\"hljs-regexp\">/raw/m</span>ain/cert.sh)<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"备份\"><a href=\"#备份\" class=\"headerlink\" title=\"备份\"></a>备份</h2><figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gradle\">#同步工具&amp;压缩工具<br>apt install -y rclone&amp;&amp;apt install -y zip<br><br>#同步配置<br>mkdir -p <span class=\"hljs-regexp\">/root/</span>.config<span class=\"hljs-regexp\">/rclone&amp;wget -O /</span>root<span class=\"hljs-regexp\">/.config/</span>rclone<span class=\"hljs-regexp\">/rclone.conf https:/</span><span class=\"hljs-regexp\">/alist.huijia.cf/</span>d<span class=\"hljs-regexp\">/hui/</span>config<span class=\"hljs-regexp\">/linux/</span>rclone.conf<br><br>#下载脚本文件<br>wget -O <span class=\"hljs-regexp\">/root/</span>backup-rclone.sh https:<span class=\"hljs-comment\">//raw.githubusercontent.com/baoqihui/script/main/my/backup-rclone.sh</span><br>wget -O <span class=\"hljs-regexp\">/root/</span>backup-mysql.sh https:<span class=\"hljs-comment\">//raw.githubusercontent.com/baoqihui/script/main/my/backup-mysql.sh</span><br>wget -O <span class=\"hljs-regexp\">/root/</span>backup-mysql7.sh https:<span class=\"hljs-comment\">//raw.githubusercontent.com/baoqihui/script/main/my/backup-mysql7.sh</span><br>wget -O <span class=\"hljs-regexp\">/root/</span>backup-mysql8.sh https:<span class=\"hljs-comment\">//raw.githubusercontent.com/baoqihui/script/main/my/backup-mysql8.sh</span><br><br>#定时任务每小时刷新<br>echo <span class=\"hljs-string\">&quot;0 */2 * * * bash /root/backup-mysql.sh &gt; /out/backup-mysql.log 2&amp;1 &amp;&quot;</span> &gt;&gt;<span class=\"hljs-regexp\">/var/</span>spool<span class=\"hljs-regexp\">/cron/</span>crontabs/root<br>echo <span class=\"hljs-string\">&quot;2 */2 * * * bash /root/backup-mysql7.sh &gt; /out/backup-mysq7.log 2&amp;1 &amp;&quot;</span> &gt;&gt;<span class=\"hljs-regexp\">/var/</span>spool<span class=\"hljs-regexp\">/cron/</span>crontabs/root<br>echo <span class=\"hljs-string\">&quot;4 */2 * * * bash /root/backup-mysql8.sh &gt; /out/backup-mysql8.log 2&amp;1 &amp;&quot;</span> &gt;&gt;<span class=\"hljs-regexp\">/var/</span>spool<span class=\"hljs-regexp\">/cron/</span>crontabs/root<br>echo <span class=\"hljs-string\">&quot;3 0 * * * bash /root/backup-rclone.sh &gt; /out/backup-rclone.log 2&amp;1 &amp;&quot;</span> &gt;&gt;<span class=\"hljs-regexp\">/var/</span>spool<span class=\"hljs-regexp\">/cron/</span>crontabs/root<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"恢复\"><a href=\"#恢复\" class=\"headerlink\" title=\"恢复\"></a>恢复</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\">#恢复所有配置文件</span><br>bash &lt;(curl -Ls https://raw.githubusercontent.com/baoqihui/script/main/recover-rclone.sh)<br><span class=\"hljs-comment\">#dokcker恢复</span><br>wget -O /root/docker-compose.yml https://raw.githubusercontent.com/baoqihui/script/main/my/docker-compose.yml&amp;&amp;docker-compose up -d<br><span class=\"hljs-comment\">#数据库恢复</span><br>bash &lt;(curl -Ls https://raw.githubusercontent.com/baoqihui/script/main/reciver-mysql.sh)<br><br><span class=\"hljs-comment\">#登录mysql刷新权限</span><br>docker <span class=\"hljs-built_in\">exec</span> -it mysql8 bash<br>mysql -uroot -pHBQ521521cf*<br>update mysql.user <span class=\"hljs-built_in\">set</span> host=<span class=\"hljs-string\">&quot;%&quot;</span> <span class=\"hljs-built_in\">where</span> user=<span class=\"hljs-string\">&quot;root&quot;</span>;<br>flush privileges;<br><br><span class=\"hljs-comment\">#执行逆向mysql</span><br>docker <span class=\"hljs-built_in\">exec</span> -it mysql8 bash<br><span class=\"hljs-built_in\">cd</span> /out/mysql8/dbscripts/db/scripts/r1.0.4<br>mysql -uroot -pHBQ521521cf*<br><span class=\"hljs-built_in\">source</span> r1.0.4_1.sql<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"docker-compose常用命令\"><a href=\"#docker-compose常用命令\" class=\"headerlink\" title=\"docker-compose常用命令\"></a>docker-compose常用命令</h2><figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs powershell\"><span class=\"hljs-comment\">#如果启动时指定-d标志，则以守护进程模式运行服务</span><br>docker<span class=\"hljs-literal\">-compose</span> up <span class=\"hljs-literal\">-d</span><br><span class=\"hljs-comment\">#停止所有服务，如果服务没有停止，可以使用docker-compose kill强制杀死服务</span><br>docker<span class=\"hljs-literal\">-compose</span> stop<br><span class=\"hljs-comment\">#删除所有服务</span><br>docker<span class=\"hljs-literal\">-compose</span> <span class=\"hljs-built_in\">rm</span> <span class=\"hljs-operator\">-f</span><br><br><span class=\"hljs-comment\">#启动</span><br>docker<span class=\"hljs-literal\">-compose</span> up <br><span class=\"hljs-comment\">#如果要批量启动服务（如启动 8 个 Scrapy），则在--scale选项指定服务的个数：</span><br>docker<span class=\"hljs-literal\">-compose</span> up <span class=\"hljs-literal\">-d</span> <span class=\"hljs-literal\">--scale</span> spider=<span class=\"hljs-number\">8</span><br><span class=\"hljs-comment\">#列出本地 docker-compose.yml 文件里定义的正在运行的所有服务</span><br>docker<span class=\"hljs-literal\">-compose</span> <span class=\"hljs-built_in\">ps</span><br><span class=\"hljs-comment\">#查看服务的日志，这个命令会追踪服务的日志文件，类似tail -f命令，使用Ctrl+C退出</span><br>docker<span class=\"hljs-literal\">-compose</span> logs<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"ServerStatus-Hotaru-探针\"><a href=\"#ServerStatus-Hotaru-探针\" class=\"headerlink\" title=\"ServerStatus-Hotaru(探针)\"></a>ServerStatus-Hotaru(探针)</h2><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\">wget https:<span class=\"hljs-regexp\">//</span>raw.githubusercontent.com<span class=\"hljs-regexp\">/cokemine/</span>ServerStatus-Hotaru<span class=\"hljs-regexp\">/master/</span>status.sh<br><span class=\"hljs-comment\">#服务端</span><br>bash status.sh s<br><span class=\"hljs-comment\">#客户端</span><br>bash status.sh c<br><span class=\"hljs-comment\">#可通过删除所有下的header去除背景图</span><br><span class=\"hljs-regexp\">/usr/</span>local<span class=\"hljs-regexp\">/ServerStatus/</span>web<span class=\"hljs-regexp\">/css/</span>hotaru_fix.css<br><span class=\"hljs-comment\">#可以修改配置文件手动调整次序</span><br><span class=\"hljs-regexp\">/usr/</span>local<span class=\"hljs-regexp\">/ServerStatus/</span>server/config.json<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"流媒体\"><a href=\"#流媒体\" class=\"headerlink\" title=\"流媒体\"></a>流媒体</h2><figure class=\"highlight autohotkey\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs autohotkey\">bash &lt;(curl -sSL <span class=\"hljs-string\">&quot;https://git.io/JswGm&quot;</span>)<br><br>INSERT INTO seer_default.`risk_label` (`id`, `description`) VALUES (<span class=\"hljs-number\">10</span>, &#x27;高速出险&#x27;)<span class=\"hljs-comment\">;</span><br></code></pre></td></tr></table></figure>\n\n<p>version: ‘3.3’<br>services:<br>  mysql:<br>    container_name: mysql<br>    restart: always<br>    volumes:<br>      - ‘&#x2F;opt&#x2F;config&#x2F;mysqld.cnf:&#x2F;etc&#x2F;mysql&#x2F;mysql.conf.d&#x2F;mysqld.cnf’<br>      - ‘&#x2F;out&#x2F;mysql&#x2F;:&#x2F;out&#x2F;mysql&#x2F;‘<br>    ports:<br>      - ‘3306:3306’<br>    environment:<br>      - ‘MYSQL_ROOT_PASSWORD&#x3D;biNoQy2rXb4aLUQ’<br>    image: mysql:5.7.29<br>  redis:<br>    container_name: redis<br>    restart: always<br>    ports:<br>      - ‘6379:6379’<br>    volumes:<br>      - ‘D:\\opt\\config\\redis.conf:&#x2F;etc&#x2F;redis&#x2F;redis.conf’<br>    command: redis-server &#x2F;etc&#x2F;redis&#x2F;redis.conf –requirepass HBQ521521cf* –appendonly yes<br>    image: redis:5.0.3</p>\n"},{"_content":"## 一、安装\n\n```\nwget -O install.sh http://download.bt.cn/install/install-ubuntu_6.0.sh && sudo bash install.sh ed8484bec\n```\n\n## 二、登录安装插件\n\n","source":"_posts/BookMark/运维/宝塔.md","raw":"## 一、安装\n\n```\nwget -O install.sh http://download.bt.cn/install/install-ubuntu_6.0.sh && sudo bash install.sh ed8484bec\n```\n\n## 二、登录安装插件\n\n","slug":"BookMark/运维/宝塔","published":1,"date":"2022-08-26T15:36:04.908Z","updated":"2022-08-26T15:37:34.008Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cl7ptszou0035aba55g3vhulp","content":"<h2><span id=\"一-安装\">一、安装</span></h2><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\">wget -O install.sh http:<span class=\"hljs-regexp\">//</span>download.bt.cn<span class=\"hljs-regexp\">/install/i</span>nstall-ubuntu_6.<span class=\"hljs-number\">0</span>.sh &amp;&amp; sudo bash install.sh ed8484bec<br></code></pre></td></tr></table></figure>\n\n<h2><span id=\"二-登录安装插件\">二、登录安装插件</span></h2>","site":{"data":{}},"wordcount":117,"excerpt":"","more":"<h2 id=\"一、安装\"><a href=\"#一、安装\" class=\"headerlink\" title=\"一、安装\"></a>一、安装</h2><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\">wget -O install.sh http:<span class=\"hljs-regexp\">//</span>download.bt.cn<span class=\"hljs-regexp\">/install/i</span>nstall-ubuntu_6.<span class=\"hljs-number\">0</span>.sh &amp;&amp; sudo bash install.sh ed8484bec<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"二、登录安装插件\"><a href=\"#二、登录安装插件\" class=\"headerlink\" title=\"二、登录安装插件\"></a>二、登录安装插件</h2>"},{"_content":"# 常用Docker脚本\n\n---\n\n[toc]\n\n---\n\n## 安装docker\n\n```\napt install -y docker.io\napt install -y docker-compose\n```\n\n## 常用脚本\n\n```\n#ROOT密码\nbash <(curl -Ls https://github.com/baoqihui/script/raw/main/root.sh)\n#更新系统\nbash <(curl -Ls https://github.com/baoqihui/script/raw/main/init.sh)\n#证书申请\nbash <(curl -Ls https://github.com/baoqihui/script/raw/main/cert.sh)\n\nminio.huijia.cf alist.huijia.cf cms.service.cf cms-plus.service.cf minio.service.cf service.cf aixue.cf aiqi.cf\n```\n\n## 挂载nginx\n\n```\n#docker查看宿主机ip\nip addr show docker0\n#下载配置文件\nmkdir -p /opt/config&wget -O /opt/config/nginx.conf https://alist.huijia.cf/d/hui/config/linux/nginx.conf\n#修改配置后重启\ndocker run \\\n\t--name nginx \\\n\t--restart=always \\\n\t--privileged=true \\\n\t--net host \\\n\t-v /opt/config/nginx.conf:/etc/nginx/nginx.conf \\\n\t-v /opt/cert:/etc/nginx/cert \\\n\t-v /opt/minio/data/dev-ui:/etc/nginx/dev-ui \\\n\t-d nginx:1.13\n```\n\n## win\n\n```\n\ndocker run -d --name=hui --restart=always -p 81:8080 -e TZ=\"Asia/Shanghai\" -e ALIYUNDRIVE_AUTH_USERNAME=\"admin\" -e ALIYUNDRIVE_REFRESH_TOKEN=\"dea9215b0d504e50acf3495a86e3ef54\" -e ALIYUNDRIVE_AUTH_PASSWORD=\"HBQ521521cf*\" -e JAVA_OPTS=\"-Xmx1g\" baoqihui/webdav-aliyundriver:amd\n\ndocker run --name mysql --restart=always -v D:\\opt\\config\\mysqld.cnf:/etc/mysql/mysql.conf.d/mysqld.cnf -p 3306:3306 -e MYSQL_ROOT_PASSWORD=HBQ521521cf* -itd mysql:5.7.29\n\ndocker run --rm -d --name=ch-server --ulimit nofile=262144:262144 -p 8123:8123 -p 9009:9009 -p 9090:9000 yandex/clickhouse-server:22.1.2.2\n```\n\n## 阿里云盘\n\n```\n#hui\ndocker run \\\n    --name=hui \\\n    --restart=always \\\n    -p 81:8080 \\\n    -e TZ=\"Asia/Shanghai\" \\\n    -e JAVA_OPTS=\"-Xmx1g\" \\\n    -e ALIYUNDRIVE_REFRESH_TOKEN=\"dea9215b0d504e50acf3495a86e3ef54\" \\\n    -e ALIYUNDRIVE_AUTH_PASSWORD=\"HBQ521521cf*\" \\\n    -d baoqihui/webdav-aliyundriver\n\n#xue\ndocker run \\\n    --name=xue \\\n    --restart=always \\\n    -p 82:8080 \\\n    -v /etc/localtime:/etc/localtime \\\n    -e TZ=\"Asia/Shanghai\" \\\n    -e JAVA_OPTS=\"-Xmx1g\" \\\n    -e ALIYUNDRIVE_REFRESH_TOKEN=\"796520ae8cad4b10a9681554cd1437c2\" \\\n    -e ALIYUNDRIVE_AUTH_PASSWORD=\"HBQ521521cf*\" \\\n    -d baoqihui/webdav-aliyundriver\n```\n\n## MySQL\n\n```\nmkdir -p /out/mysql&&mkdir -p /opt/config&&wget -O /opt/config/mysqld.cnf https://alist.huijia.cf/d/hui/config/linux/mysqld.cnf&&wget -O /root/backup-mysql.sh https://alist.huijia.cf/d/hui/config/linux/backup-mysql.sh\n\n#arm框架\ndocker run \\\n\t--name mysql7 \\\n    --restart=always \\\n    -v /opt/config/mysqld7.cnf:/etc/mysql/mysql.conf.d/mysqld.cnf \\\n    -v /out/mysql/:/out/mysql/ \\\n    -p 3308:3306 \\\n    -e MYSQL_ROOT_PASSWORD=HBQ521521cf* \\\n    -itd biarms/mysql:5.7.30-linux-arm64v8\n    \n#amd框架\ndocker run \\\n    --name mysql \\\n    --restart=always \\\n    -v /opt/config/mysqld.cnf:/etc/mysql/mysql.conf.d/mysqld.cnf \\\n    -p 3306:3306 \\\n    -e MYSQL_ROOT_PASSWORD=HBQ521521cf* \\\n    -itd mysql:5.7.29\n    \n#登录mysql刷新权限\ndocker exec -it mysql bash\nmysql -uroot -pHBQ521521cf*\nupdate mysql.user set host=\"%\" where user=\"root\";\nflush privileges;\n```\n\n## Redis\n\n```\n#下载配置文件\nmkdir -p /opt/config&wget -O /opt/config/redis.conf https://alist.huijia.cf/d/hui/config/linux/redis.conf\n\n#启动redis\ndocker run \\\n\t--name redis \\\n    --restart=always \\\n    -p 6379:6379 \\\n    -v /opt/config/redis.conf:/etc/redis/redis.conf \\\n    -v /out/data:/data \\\n    -itd redis:5.0.3 redis-server /etc/redis/redis.conf \\\n    --requirepass HBQ521521cf* \\\n    --appendonly yes\n```\n\n## MongDB\n\n```\ndocker run -itd \\\n    --restart=always \\\n    --name mongo \\\n    -p 27017:27017 \\\n    mongo\n```\n\n## alist\n\n```\ndocker run -d \\\n\t--restart=always \\\n\t-v /opt/alist:/opt/alist/data \\\n\t-p 5244:5244 \\\n\t--name=\"alist\" \\\n\txhofe/alist:latest\n```\n\n## Nextcloud\n\n```\ndocker run \\\n    --name nextcloud \\\n    -p 83:80 \\\n    -v /opt/nextcloud:/var/www/html \\\n    -d nextcloud\n```\n\n## ServerStatus-Hotaru(探针)\n\n```\nwget https://raw.githubusercontent.com/cokemine/ServerStatus-Hotaru/master/status.sh\n#服务端\nbash status.sh s\n#客户端\nbash status.sh c\n#可通过删除所有下的header去除背景图\n/usr/local/ServerStatus/web/css/hotaru_fix.css\n#可以修改配置文件手动调整次序\n/usr/local/ServerStatus/server/config.json\n```\n\n### 探针自用nginx配置\n\n```\ndocker run \\\n\t--name nginx \\\n\t--restart=always \\\n\t--privileged=true \\\n\t-p 80:80 \\\n\t-p 83:83 \\\n\t-p 443:443 \\\n\t-v /opt//cert:/etc/nginx/cert \\\n\t-v /opt/config/nginx.conf:/etc/nginx/nginx.conf \\\n\t-v /usr/local/ServerStatus/web:/usr/local/ServerStatus/web \\\n\t-d nginx:1.13\n```\n\n## x-ui\n\n```\n#证书申请\nbash <(curl -Ls https://github.com/baoqihui/script/raw/main/cert.sh)\n\ndocker run -itd \\\n\t--network=host \\\n    -v /opt/x-ui/db/:/etc/x-ui/ \\\n    -v /opt/cert/:/root/cert/ \\\n    --name x-ui \\\n    --restart=unless-stopped \\\n    enwaiax/x-ui:latest\n    \n/root/cert/db.ivps.ga/cert.crt\n/root/cert/db.ivps.ga/private.key\n```\n\n## minio\n\n```\ndocker run -d \\\n \t-p 9000:9000 \\\n    -p 9001:9001 \\\n    --name minio \\\n    --restart=always \\\n    -v /opt/minio/data:/data \\\n    -v /opt/minio/config:/root/.minio \\\n\t-e \"MINIO_ROOT_USER=admin\" \\\n\t-e \"MINIO_ROOT_PASSWORD=HBQ521521cf*\" \\\n\tminio/minio server /data --console-address \":9001\" --address \":9000\"\n```\n\n## 青龙5700\n\n```\n#脚本\ndocker run -dit \\\n    -v /opt/ql/config:/ql/config \\\n    -v /opt/ql/log:/ql/log \\\n    -v /opt/ql/scripts:/ql/scripts \\\n    -v /opt/ql/db:/ql/db \\\n    --net host \\\n    --name qinglong \\\n    --hostname qinglong \\\n    --restart always \\ \n    whyour/qinglong:latest\n#token\n5112967514:AAFUKlk4o0BsrDMkYObWJV9fDvToKZxXGVk\n#uid\n1721031645\n#脚本\nql repo https://github.com/KingRan/KR.git \"jd_|jx_|jdCookie\" \"activity|backUp\" \"^jd[^_]|USER|utils|function|sign|sendNotify|ql|JDJR\"\n#账号配置\nm.jd.com\nJD_COOKIE\npt_key=AAJixPM2ADCFpLSE0IiXy0TPB_dqMkmf_NtkmAY4x7iQjGwlA4Yb2as26UQ_PUk8mXQRr4QisV0;pt_pin=jd_LUWkEsWClQXo;\n```\n\n![image-20220509181303263](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509181303263.png)\n\n## frp内网穿透\n\n```\n#服务端\nmkdir -p /opt/config&wget -O /opt/config/frps.ini https://alist.huijia.cf/d/hui/config/linux/frps.ini\n\ndocker run -d --restart always --network host --name frps -v /opt/config/frps.ini:/etc/frp/frps.ini snowdreamtech/frps\n#本地下载启动\nhttp://file.huijia.cf/file/frp.zip\n```\n\n## reclone\n\n```\napt install rclone\nrclone purge cch2:\n#同步备份数据\nrclone sync -P cch1:backup cch2:backup\n```\n\n## 极光中转面板8000\n\n```\nwget -O docker-compose.yml https://alist.huijia.cf/d/hui/config/linux/jiguang-docker-compose.yml\n#启动\ndocker-compose up -d\n#初始化\ndocker-compose exec backend python app/initial_data.py\n#端口\nHTTP端口是：80,8080,8880,2052,2082,2086,2095\nHTTPs端口是：443,2053,2083,2087,2096,8443\n```\n\n## Gost中转脚本\n\n```\nwget --no-check-certificate -O gost.sh https://raw.githubusercontent.com/KANIKIG/Multi-EasyGost/master/gost.sh && chmod +x gost.sh && ./gost.sh\n```\n\n## 测速\n\n```\ndocker run \\\n\t--name speedtest \\\n\t--restart=always \\\n\t-p 84:80 \\\n\t-dit stilleshan/speedtest-x\n```\n\n## ZPan\n\n```\ndocker run \\\n    --name zpan \\\n    --restart=always \\\n    -p 8222:8222 \\\n    -v /o/zpan:/etc/zpan \\\n    -it saltbo/zpan\n```\n\n### Zfile\n\n```\ndocker run -d --name=zfile --restart=always \\\n    -p 8099:8080 \\\n    -v /opt/zfile/db:/root/.zfile/db \\\n    -v /opt/zfile/logs:/root/.zfile/logs \\\n    zhaojun1998/zfile\n```\n\n## seafile\n\n```\nwget -O docker-compose.yml https://alist.huijia.cf/d/hui/config/linux/seafile-docker-compose.yml\n\n# 配置webdav/opt/seafile-data/seafile/conf/seafdav.conf\n[WEBDAV]\nenabled = true\nport = 85\nshare_name = /\nshow_repo_id=true\n```\n\n## cloudreve\n\n```\ndocker run -d \\\n  --name cloudreve \\\n  -e PUID=0 \\\n  -e PGID=0 \\\n  -e TZ=\"Asia/Shanghai\" \\\n  -p 5212:5212 \\\n  --restart=unless-stopped \\\n  -v /opt/cloudreve/uploads:/cloudreve/uploads \\\n  -v /opt/cloudreve/config:/cloudreve/config \\\n  -v /opt/cloudreve/db:/cloudreve/db \\\n  -v /opt/cloudreve/avatar:/cloudreve/avatar \\\n  xavierniu/cloudreve\n#mysql配置\ncat <(curl -Ls https://raw.githubusercontent.com/baoqihui/file/master/config/cloudreve-db) >> /opt/cloudreve/config/conf.ini\n#查看首次账号密码\ndocker logs -f cloudreve\n```\n\n## Java项目\n\n+ Dockerfile\n\n```\nFROM openjdk:11.0.4\nADD cms-0.0.1-SNAPSHOT.jar  /cms.jar\nEXPOSE 8089\nENTRYPOINT [\"java\",\"-Xms1024m\",\"-Xmx1024m\",\"-jar\",\"/cms.jar\",\"--spring.profiles.active=dev\",\"-c\"]\n```\n\n+ 构建：\n\n```\ndocker build -t cms:v1 .\ndocker run  -d --restart=always --name cms -p 8089:8089 -v /out/logs/cms:/out/logs/cms cms:v1\n```\n\n+ 上传自己的镜像到dockerhub\n\n```\ndocker login\ndocker tag cms:v1 baoqihui/cms:v1\ndocker push baoqihui/cms:v1\n```\n\n+ 拉取自己的docker镜像\n\n```\ndocker pull baoqihui/cms:v1\n```\n\n## 文件下载\n\n```\nmkdir -p /opt/config&wget -O /opt/config/nginx.conf https://alist.huijia.cf/d/hui/config/linux/nginx.conf\n```\n\n## rclone挂载\n\n```\nrclone co\n#阿里\nrclone mount ali:/ f: --cache-dir C:rclone --vfs-cache-mode writes\n#\nrclone mount cch1:/ f: --cache-dir C:rclone --vfs-cache-mode writes\n#谷歌\nrclone mount google:/ g: -- cache-dir C:\\rclone --vfs-cache-mode writes &\n```\n\nmklink /d  \"c:\\Users\\hui\\OneDrive - isahk\\BookMark\" \"D:\\BookMark\"\n\n## Clickhouse\n\n```\ndocker run --rm -d --name=ch-server --ulimit nofile=262144:262144 -p 8123:8123 -p 9009:9009 -p 9090:9000 yandex/clickhouse-server:22.1.2.2\n```\n\n## shardingwhere\n\n```\ndocker run -d --name=sharding -v /Users/huibaoqi/opt/sharding/conf:/opt/shardingsphere-proxy/conf -v /Users/huibaoqi/opt/sharding/ext-lib:/opt/shardingsphere-proxy/ext-lib -e PORT=3308 -p13308:3308 apache/shardingsphere-proxy:latest\n```\n\n## 可道云\n\n```\ndocker run -d -p 80:80 -v /data:/var/www/html kodcloud/kodbox\n```\n\n## hexo\n\n```\ndocker run -d --name=hexo \\\n-e HEXO_SERVER_PORT=4000 \\\n-e GIT_USER=\"baoqi.hui@qq.com\" \\\n-e GIT_EMAIL=\"HBQ521521cf*\" \\\n-v /opt/blog:/app/blog \\\n-p 4000:4000 \\\nbaoqihui/hexo\n\nrclone sync ali:BookMark /opt/blog/source/_posts\n```\n\n![img](https://img-1256282866.cos.ap-beijing.myqcloud.com/50536515.png)\n","source":"_posts/BookMark/运维/常用Docker.md","raw":"# 常用Docker脚本\n\n---\n\n[toc]\n\n---\n\n## 安装docker\n\n```\napt install -y docker.io\napt install -y docker-compose\n```\n\n## 常用脚本\n\n```\n#ROOT密码\nbash <(curl -Ls https://github.com/baoqihui/script/raw/main/root.sh)\n#更新系统\nbash <(curl -Ls https://github.com/baoqihui/script/raw/main/init.sh)\n#证书申请\nbash <(curl -Ls https://github.com/baoqihui/script/raw/main/cert.sh)\n\nminio.huijia.cf alist.huijia.cf cms.service.cf cms-plus.service.cf minio.service.cf service.cf aixue.cf aiqi.cf\n```\n\n## 挂载nginx\n\n```\n#docker查看宿主机ip\nip addr show docker0\n#下载配置文件\nmkdir -p /opt/config&wget -O /opt/config/nginx.conf https://alist.huijia.cf/d/hui/config/linux/nginx.conf\n#修改配置后重启\ndocker run \\\n\t--name nginx \\\n\t--restart=always \\\n\t--privileged=true \\\n\t--net host \\\n\t-v /opt/config/nginx.conf:/etc/nginx/nginx.conf \\\n\t-v /opt/cert:/etc/nginx/cert \\\n\t-v /opt/minio/data/dev-ui:/etc/nginx/dev-ui \\\n\t-d nginx:1.13\n```\n\n## win\n\n```\n\ndocker run -d --name=hui --restart=always -p 81:8080 -e TZ=\"Asia/Shanghai\" -e ALIYUNDRIVE_AUTH_USERNAME=\"admin\" -e ALIYUNDRIVE_REFRESH_TOKEN=\"dea9215b0d504e50acf3495a86e3ef54\" -e ALIYUNDRIVE_AUTH_PASSWORD=\"HBQ521521cf*\" -e JAVA_OPTS=\"-Xmx1g\" baoqihui/webdav-aliyundriver:amd\n\ndocker run --name mysql --restart=always -v D:\\opt\\config\\mysqld.cnf:/etc/mysql/mysql.conf.d/mysqld.cnf -p 3306:3306 -e MYSQL_ROOT_PASSWORD=HBQ521521cf* -itd mysql:5.7.29\n\ndocker run --rm -d --name=ch-server --ulimit nofile=262144:262144 -p 8123:8123 -p 9009:9009 -p 9090:9000 yandex/clickhouse-server:22.1.2.2\n```\n\n## 阿里云盘\n\n```\n#hui\ndocker run \\\n    --name=hui \\\n    --restart=always \\\n    -p 81:8080 \\\n    -e TZ=\"Asia/Shanghai\" \\\n    -e JAVA_OPTS=\"-Xmx1g\" \\\n    -e ALIYUNDRIVE_REFRESH_TOKEN=\"dea9215b0d504e50acf3495a86e3ef54\" \\\n    -e ALIYUNDRIVE_AUTH_PASSWORD=\"HBQ521521cf*\" \\\n    -d baoqihui/webdav-aliyundriver\n\n#xue\ndocker run \\\n    --name=xue \\\n    --restart=always \\\n    -p 82:8080 \\\n    -v /etc/localtime:/etc/localtime \\\n    -e TZ=\"Asia/Shanghai\" \\\n    -e JAVA_OPTS=\"-Xmx1g\" \\\n    -e ALIYUNDRIVE_REFRESH_TOKEN=\"796520ae8cad4b10a9681554cd1437c2\" \\\n    -e ALIYUNDRIVE_AUTH_PASSWORD=\"HBQ521521cf*\" \\\n    -d baoqihui/webdav-aliyundriver\n```\n\n## MySQL\n\n```\nmkdir -p /out/mysql&&mkdir -p /opt/config&&wget -O /opt/config/mysqld.cnf https://alist.huijia.cf/d/hui/config/linux/mysqld.cnf&&wget -O /root/backup-mysql.sh https://alist.huijia.cf/d/hui/config/linux/backup-mysql.sh\n\n#arm框架\ndocker run \\\n\t--name mysql7 \\\n    --restart=always \\\n    -v /opt/config/mysqld7.cnf:/etc/mysql/mysql.conf.d/mysqld.cnf \\\n    -v /out/mysql/:/out/mysql/ \\\n    -p 3308:3306 \\\n    -e MYSQL_ROOT_PASSWORD=HBQ521521cf* \\\n    -itd biarms/mysql:5.7.30-linux-arm64v8\n    \n#amd框架\ndocker run \\\n    --name mysql \\\n    --restart=always \\\n    -v /opt/config/mysqld.cnf:/etc/mysql/mysql.conf.d/mysqld.cnf \\\n    -p 3306:3306 \\\n    -e MYSQL_ROOT_PASSWORD=HBQ521521cf* \\\n    -itd mysql:5.7.29\n    \n#登录mysql刷新权限\ndocker exec -it mysql bash\nmysql -uroot -pHBQ521521cf*\nupdate mysql.user set host=\"%\" where user=\"root\";\nflush privileges;\n```\n\n## Redis\n\n```\n#下载配置文件\nmkdir -p /opt/config&wget -O /opt/config/redis.conf https://alist.huijia.cf/d/hui/config/linux/redis.conf\n\n#启动redis\ndocker run \\\n\t--name redis \\\n    --restart=always \\\n    -p 6379:6379 \\\n    -v /opt/config/redis.conf:/etc/redis/redis.conf \\\n    -v /out/data:/data \\\n    -itd redis:5.0.3 redis-server /etc/redis/redis.conf \\\n    --requirepass HBQ521521cf* \\\n    --appendonly yes\n```\n\n## MongDB\n\n```\ndocker run -itd \\\n    --restart=always \\\n    --name mongo \\\n    -p 27017:27017 \\\n    mongo\n```\n\n## alist\n\n```\ndocker run -d \\\n\t--restart=always \\\n\t-v /opt/alist:/opt/alist/data \\\n\t-p 5244:5244 \\\n\t--name=\"alist\" \\\n\txhofe/alist:latest\n```\n\n## Nextcloud\n\n```\ndocker run \\\n    --name nextcloud \\\n    -p 83:80 \\\n    -v /opt/nextcloud:/var/www/html \\\n    -d nextcloud\n```\n\n## ServerStatus-Hotaru(探针)\n\n```\nwget https://raw.githubusercontent.com/cokemine/ServerStatus-Hotaru/master/status.sh\n#服务端\nbash status.sh s\n#客户端\nbash status.sh c\n#可通过删除所有下的header去除背景图\n/usr/local/ServerStatus/web/css/hotaru_fix.css\n#可以修改配置文件手动调整次序\n/usr/local/ServerStatus/server/config.json\n```\n\n### 探针自用nginx配置\n\n```\ndocker run \\\n\t--name nginx \\\n\t--restart=always \\\n\t--privileged=true \\\n\t-p 80:80 \\\n\t-p 83:83 \\\n\t-p 443:443 \\\n\t-v /opt//cert:/etc/nginx/cert \\\n\t-v /opt/config/nginx.conf:/etc/nginx/nginx.conf \\\n\t-v /usr/local/ServerStatus/web:/usr/local/ServerStatus/web \\\n\t-d nginx:1.13\n```\n\n## x-ui\n\n```\n#证书申请\nbash <(curl -Ls https://github.com/baoqihui/script/raw/main/cert.sh)\n\ndocker run -itd \\\n\t--network=host \\\n    -v /opt/x-ui/db/:/etc/x-ui/ \\\n    -v /opt/cert/:/root/cert/ \\\n    --name x-ui \\\n    --restart=unless-stopped \\\n    enwaiax/x-ui:latest\n    \n/root/cert/db.ivps.ga/cert.crt\n/root/cert/db.ivps.ga/private.key\n```\n\n## minio\n\n```\ndocker run -d \\\n \t-p 9000:9000 \\\n    -p 9001:9001 \\\n    --name minio \\\n    --restart=always \\\n    -v /opt/minio/data:/data \\\n    -v /opt/minio/config:/root/.minio \\\n\t-e \"MINIO_ROOT_USER=admin\" \\\n\t-e \"MINIO_ROOT_PASSWORD=HBQ521521cf*\" \\\n\tminio/minio server /data --console-address \":9001\" --address \":9000\"\n```\n\n## 青龙5700\n\n```\n#脚本\ndocker run -dit \\\n    -v /opt/ql/config:/ql/config \\\n    -v /opt/ql/log:/ql/log \\\n    -v /opt/ql/scripts:/ql/scripts \\\n    -v /opt/ql/db:/ql/db \\\n    --net host \\\n    --name qinglong \\\n    --hostname qinglong \\\n    --restart always \\ \n    whyour/qinglong:latest\n#token\n5112967514:AAFUKlk4o0BsrDMkYObWJV9fDvToKZxXGVk\n#uid\n1721031645\n#脚本\nql repo https://github.com/KingRan/KR.git \"jd_|jx_|jdCookie\" \"activity|backUp\" \"^jd[^_]|USER|utils|function|sign|sendNotify|ql|JDJR\"\n#账号配置\nm.jd.com\nJD_COOKIE\npt_key=AAJixPM2ADCFpLSE0IiXy0TPB_dqMkmf_NtkmAY4x7iQjGwlA4Yb2as26UQ_PUk8mXQRr4QisV0;pt_pin=jd_LUWkEsWClQXo;\n```\n\n![image-20220509181303263](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509181303263.png)\n\n## frp内网穿透\n\n```\n#服务端\nmkdir -p /opt/config&wget -O /opt/config/frps.ini https://alist.huijia.cf/d/hui/config/linux/frps.ini\n\ndocker run -d --restart always --network host --name frps -v /opt/config/frps.ini:/etc/frp/frps.ini snowdreamtech/frps\n#本地下载启动\nhttp://file.huijia.cf/file/frp.zip\n```\n\n## reclone\n\n```\napt install rclone\nrclone purge cch2:\n#同步备份数据\nrclone sync -P cch1:backup cch2:backup\n```\n\n## 极光中转面板8000\n\n```\nwget -O docker-compose.yml https://alist.huijia.cf/d/hui/config/linux/jiguang-docker-compose.yml\n#启动\ndocker-compose up -d\n#初始化\ndocker-compose exec backend python app/initial_data.py\n#端口\nHTTP端口是：80,8080,8880,2052,2082,2086,2095\nHTTPs端口是：443,2053,2083,2087,2096,8443\n```\n\n## Gost中转脚本\n\n```\nwget --no-check-certificate -O gost.sh https://raw.githubusercontent.com/KANIKIG/Multi-EasyGost/master/gost.sh && chmod +x gost.sh && ./gost.sh\n```\n\n## 测速\n\n```\ndocker run \\\n\t--name speedtest \\\n\t--restart=always \\\n\t-p 84:80 \\\n\t-dit stilleshan/speedtest-x\n```\n\n## ZPan\n\n```\ndocker run \\\n    --name zpan \\\n    --restart=always \\\n    -p 8222:8222 \\\n    -v /o/zpan:/etc/zpan \\\n    -it saltbo/zpan\n```\n\n### Zfile\n\n```\ndocker run -d --name=zfile --restart=always \\\n    -p 8099:8080 \\\n    -v /opt/zfile/db:/root/.zfile/db \\\n    -v /opt/zfile/logs:/root/.zfile/logs \\\n    zhaojun1998/zfile\n```\n\n## seafile\n\n```\nwget -O docker-compose.yml https://alist.huijia.cf/d/hui/config/linux/seafile-docker-compose.yml\n\n# 配置webdav/opt/seafile-data/seafile/conf/seafdav.conf\n[WEBDAV]\nenabled = true\nport = 85\nshare_name = /\nshow_repo_id=true\n```\n\n## cloudreve\n\n```\ndocker run -d \\\n  --name cloudreve \\\n  -e PUID=0 \\\n  -e PGID=0 \\\n  -e TZ=\"Asia/Shanghai\" \\\n  -p 5212:5212 \\\n  --restart=unless-stopped \\\n  -v /opt/cloudreve/uploads:/cloudreve/uploads \\\n  -v /opt/cloudreve/config:/cloudreve/config \\\n  -v /opt/cloudreve/db:/cloudreve/db \\\n  -v /opt/cloudreve/avatar:/cloudreve/avatar \\\n  xavierniu/cloudreve\n#mysql配置\ncat <(curl -Ls https://raw.githubusercontent.com/baoqihui/file/master/config/cloudreve-db) >> /opt/cloudreve/config/conf.ini\n#查看首次账号密码\ndocker logs -f cloudreve\n```\n\n## Java项目\n\n+ Dockerfile\n\n```\nFROM openjdk:11.0.4\nADD cms-0.0.1-SNAPSHOT.jar  /cms.jar\nEXPOSE 8089\nENTRYPOINT [\"java\",\"-Xms1024m\",\"-Xmx1024m\",\"-jar\",\"/cms.jar\",\"--spring.profiles.active=dev\",\"-c\"]\n```\n\n+ 构建：\n\n```\ndocker build -t cms:v1 .\ndocker run  -d --restart=always --name cms -p 8089:8089 -v /out/logs/cms:/out/logs/cms cms:v1\n```\n\n+ 上传自己的镜像到dockerhub\n\n```\ndocker login\ndocker tag cms:v1 baoqihui/cms:v1\ndocker push baoqihui/cms:v1\n```\n\n+ 拉取自己的docker镜像\n\n```\ndocker pull baoqihui/cms:v1\n```\n\n## 文件下载\n\n```\nmkdir -p /opt/config&wget -O /opt/config/nginx.conf https://alist.huijia.cf/d/hui/config/linux/nginx.conf\n```\n\n## rclone挂载\n\n```\nrclone co\n#阿里\nrclone mount ali:/ f: --cache-dir C:rclone --vfs-cache-mode writes\n#\nrclone mount cch1:/ f: --cache-dir C:rclone --vfs-cache-mode writes\n#谷歌\nrclone mount google:/ g: -- cache-dir C:\\rclone --vfs-cache-mode writes &\n```\n\nmklink /d  \"c:\\Users\\hui\\OneDrive - isahk\\BookMark\" \"D:\\BookMark\"\n\n## Clickhouse\n\n```\ndocker run --rm -d --name=ch-server --ulimit nofile=262144:262144 -p 8123:8123 -p 9009:9009 -p 9090:9000 yandex/clickhouse-server:22.1.2.2\n```\n\n## shardingwhere\n\n```\ndocker run -d --name=sharding -v /Users/huibaoqi/opt/sharding/conf:/opt/shardingsphere-proxy/conf -v /Users/huibaoqi/opt/sharding/ext-lib:/opt/shardingsphere-proxy/ext-lib -e PORT=3308 -p13308:3308 apache/shardingsphere-proxy:latest\n```\n\n## 可道云\n\n```\ndocker run -d -p 80:80 -v /data:/var/www/html kodcloud/kodbox\n```\n\n## hexo\n\n```\ndocker run -d --name=hexo \\\n-e HEXO_SERVER_PORT=4000 \\\n-e GIT_USER=\"baoqi.hui@qq.com\" \\\n-e GIT_EMAIL=\"HBQ521521cf*\" \\\n-v /opt/blog:/app/blog \\\n-p 4000:4000 \\\nbaoqihui/hexo\n\nrclone sync ali:BookMark /opt/blog/source/_posts\n```\n\n![img](https://img-1256282866.cos.ap-beijing.myqcloud.com/50536515.png)\n","slug":"BookMark/运维/常用Docker","published":1,"date":"2022-07-18T09:51:33.000Z","updated":"2022-09-06T05:52:40.984Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cl7ptszou0036aba5eilneej3","content":"<h1><span id=\"常用docker脚本\">常用Docker脚本</span></h1><hr>\n<p>[toc]</p>\n<hr>\n<h2><span id=\"安装docker\">安装docker</span></h2><figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cmake\">apt <span class=\"hljs-keyword\">install</span> -y docker.io<br>apt <span class=\"hljs-keyword\">install</span> -y docker-compose<br></code></pre></td></tr></table></figure>\n\n<h2><span id=\"常用脚本\">常用脚本</span></h2><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\"><span class=\"hljs-comment\">#ROOT密码</span><br>bash &lt;(curl -Ls https:<span class=\"hljs-regexp\">//gi</span>thub.com<span class=\"hljs-regexp\">/baoqihui/</span>script<span class=\"hljs-regexp\">/raw/m</span>ain/root.sh)<br><span class=\"hljs-comment\">#更新系统</span><br>bash &lt;(curl -Ls https:<span class=\"hljs-regexp\">//gi</span>thub.com<span class=\"hljs-regexp\">/baoqihui/</span>script<span class=\"hljs-regexp\">/raw/m</span>ain/init.sh)<br><span class=\"hljs-comment\">#证书申请</span><br>bash &lt;(curl -Ls https:<span class=\"hljs-regexp\">//gi</span>thub.com<span class=\"hljs-regexp\">/baoqihui/</span>script<span class=\"hljs-regexp\">/raw/m</span>ain/cert.sh)<br><br>minio.huijia.cf alist.huijia.cf cms.service.cf cms-plus.service.cf minio.service.cf service.cf aixue.cf aiqi.cf<br></code></pre></td></tr></table></figure>\n\n<h2><span id=\"挂载nginx\">挂载nginx</span></h2><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\"><span class=\"hljs-comment\">#docker查看宿主机ip</span><br>ip addr show docker0<br><span class=\"hljs-comment\">#下载配置文件</span><br>mkdir -p <span class=\"hljs-regexp\">/opt/</span>config&amp;wget -O <span class=\"hljs-regexp\">/opt/</span>config<span class=\"hljs-regexp\">/nginx.conf https:/</span><span class=\"hljs-regexp\">/alist.huijia.cf/</span>d<span class=\"hljs-regexp\">/hui/</span>config<span class=\"hljs-regexp\">/linux/</span>nginx.conf<br><span class=\"hljs-comment\">#修改配置后重启</span><br>docker run \\<br>\t--name nginx \\<br>\t--restart=always \\<br>\t--privileged=true \\<br>\t--net host \\<br>\t-v <span class=\"hljs-regexp\">/opt/</span>config<span class=\"hljs-regexp\">/nginx.conf:/</span>etc<span class=\"hljs-regexp\">/nginx/</span>nginx.conf \\<br>\t-v <span class=\"hljs-regexp\">/opt/</span>cert:<span class=\"hljs-regexp\">/etc/</span>nginx/cert \\<br>\t-v <span class=\"hljs-regexp\">/opt/mi</span>nio<span class=\"hljs-regexp\">/data/</span>dev-ui:<span class=\"hljs-regexp\">/etc/</span>nginx/dev-ui \\<br>\t-d nginx:<span class=\"hljs-number\">1.13</span><br></code></pre></td></tr></table></figure>\n\n<h2><span id=\"win\">win</span></h2><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\"><br>docker <span class=\"hljs-built_in\">run</span> -d <span class=\"hljs-attribute\">--name</span>=hui <span class=\"hljs-attribute\">--restart</span>=always -p 81:8080 -e <span class=\"hljs-attribute\">TZ</span>=<span class=\"hljs-string\">&quot;Asia/Shanghai&quot;</span> -e <span class=\"hljs-attribute\">ALIYUNDRIVE_AUTH_USERNAME</span>=<span class=\"hljs-string\">&quot;admin&quot;</span> -e <span class=\"hljs-attribute\">ALIYUNDRIVE_REFRESH_TOKEN</span>=<span class=\"hljs-string\">&quot;dea9215b0d504e50acf3495a86e3ef54&quot;</span> -e <span class=\"hljs-attribute\">ALIYUNDRIVE_AUTH_PASSWORD</span>=<span class=\"hljs-string\">&quot;HBQ521521cf*&quot;</span> -e <span class=\"hljs-attribute\">JAVA_OPTS</span>=<span class=\"hljs-string\">&quot;-Xmx1g&quot;</span> baoqihui/webdav-aliyundriver:amd<br><br>docker <span class=\"hljs-built_in\">run</span> --name mysql <span class=\"hljs-attribute\">--restart</span>=always -v D:\\opt\\config\\mysqld.cnf:/etc/mysql/mysql.conf.d/mysqld.cnf -p 3306:3306 -e <span class=\"hljs-attribute\">MYSQL_ROOT_PASSWORD</span>=HBQ521521cf* -itd mysql:5.7.29<br><br>docker <span class=\"hljs-built_in\">run</span> --rm -d <span class=\"hljs-attribute\">--name</span>=ch-server --ulimit <span class=\"hljs-attribute\">nofile</span>=262144:262144 -p 8123:8123 -p 9009:9009 -p 9090:9000 yandex/clickhouse-server:22.1.2.2<br></code></pre></td></tr></table></figure>\n\n<h2><span id=\"阿里云盘\">阿里云盘</span></h2><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\"><span class=\"hljs-comment\">#hui</span><br>docker <span class=\"hljs-built_in\">run</span> \\<br>    <span class=\"hljs-attribute\">--name</span>=hui \\<br>    <span class=\"hljs-attribute\">--restart</span>=always \\<br>    -p 81:8080 \\<br>    -e <span class=\"hljs-attribute\">TZ</span>=<span class=\"hljs-string\">&quot;Asia/Shanghai&quot;</span> \\<br>    -e <span class=\"hljs-attribute\">JAVA_OPTS</span>=<span class=\"hljs-string\">&quot;-Xmx1g&quot;</span> \\<br>    -e <span class=\"hljs-attribute\">ALIYUNDRIVE_REFRESH_TOKEN</span>=<span class=\"hljs-string\">&quot;dea9215b0d504e50acf3495a86e3ef54&quot;</span> \\<br>    -e <span class=\"hljs-attribute\">ALIYUNDRIVE_AUTH_PASSWORD</span>=<span class=\"hljs-string\">&quot;HBQ521521cf*&quot;</span> \\<br>    -d baoqihui/webdav-aliyundriver<br><br><span class=\"hljs-comment\">#xue</span><br>docker <span class=\"hljs-built_in\">run</span> \\<br>    <span class=\"hljs-attribute\">--name</span>=xue \\<br>    <span class=\"hljs-attribute\">--restart</span>=always \\<br>    -p 82:8080 \\<br>    -v /etc/localtime:/etc/localtime \\<br>    -e <span class=\"hljs-attribute\">TZ</span>=<span class=\"hljs-string\">&quot;Asia/Shanghai&quot;</span> \\<br>    -e <span class=\"hljs-attribute\">JAVA_OPTS</span>=<span class=\"hljs-string\">&quot;-Xmx1g&quot;</span> \\<br>    -e <span class=\"hljs-attribute\">ALIYUNDRIVE_REFRESH_TOKEN</span>=<span class=\"hljs-string\">&quot;796520ae8cad4b10a9681554cd1437c2&quot;</span> \\<br>    -e <span class=\"hljs-attribute\">ALIYUNDRIVE_AUTH_PASSWORD</span>=<span class=\"hljs-string\">&quot;HBQ521521cf*&quot;</span> \\<br>    -d baoqihui/webdav-aliyundriver<br></code></pre></td></tr></table></figure>\n\n<h2><span id=\"mysql\">MySQL</span></h2><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\">mkdir -p <span class=\"hljs-regexp\">/out/my</span>sql&amp;&amp;mkdir -p <span class=\"hljs-regexp\">/opt/</span>config&amp;&amp;wget -O <span class=\"hljs-regexp\">/opt/</span>config<span class=\"hljs-regexp\">/mysqld.cnf https:/</span><span class=\"hljs-regexp\">/alist.huijia.cf/</span>d<span class=\"hljs-regexp\">/hui/</span>config<span class=\"hljs-regexp\">/linux/my</span>sqld.cnf&amp;&amp;wget -O <span class=\"hljs-regexp\">/root/</span>backup-mysql.sh https:<span class=\"hljs-regexp\">//</span>alist.huijia.cf<span class=\"hljs-regexp\">/d/</span>hui<span class=\"hljs-regexp\">/config/</span>linux/backup-mysql.sh<br><br><span class=\"hljs-comment\">#arm框架</span><br>docker run \\<br>\t--name mysql7 \\<br>    --restart=always \\<br>    -v <span class=\"hljs-regexp\">/opt/</span>config<span class=\"hljs-regexp\">/mysqld7.cnf:/</span>etc<span class=\"hljs-regexp\">/mysql/my</span>sql.conf.d/mysqld.cnf \\<br>    -v <span class=\"hljs-regexp\">/out/my</span>sql<span class=\"hljs-regexp\">/:/</span>out<span class=\"hljs-regexp\">/mysql/</span> \\<br>    -p <span class=\"hljs-number\">3308</span>:<span class=\"hljs-number\">3306</span> \\<br>    -e MYSQL_ROOT_PASSWORD=HBQ521521cf* \\<br>    -itd biarms/mysql:<span class=\"hljs-number\">5.7</span>.<span class=\"hljs-number\">30</span>-linux-arm64v8<br>    <br><span class=\"hljs-comment\">#amd框架</span><br>docker run \\<br>    --name mysql \\<br>    --restart=always \\<br>    -v <span class=\"hljs-regexp\">/opt/</span>config<span class=\"hljs-regexp\">/mysqld.cnf:/</span>etc<span class=\"hljs-regexp\">/mysql/my</span>sql.conf.d/mysqld.cnf \\<br>    -p <span class=\"hljs-number\">3306</span>:<span class=\"hljs-number\">3306</span> \\<br>    -e MYSQL_ROOT_PASSWORD=HBQ521521cf* \\<br>    -itd mysql:<span class=\"hljs-number\">5.7</span>.<span class=\"hljs-number\">29</span><br>    <br><span class=\"hljs-comment\">#登录mysql刷新权限</span><br>docker exec -it mysql bash<br>mysql -uroot -pHBQ521521cf*<br>update mysql.user set host=<span class=\"hljs-string\">&quot;%&quot;</span> where user=<span class=\"hljs-string\">&quot;root&quot;</span>;<br>flush privileges;<br></code></pre></td></tr></table></figure>\n\n<h2><span id=\"redis\">Redis</span></h2><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\"><span class=\"hljs-comment\">#下载配置文件</span><br>mkdir -p <span class=\"hljs-regexp\">/opt/</span>config&amp;wget -O <span class=\"hljs-regexp\">/opt/</span>config<span class=\"hljs-regexp\">/redis.conf https:/</span><span class=\"hljs-regexp\">/alist.huijia.cf/</span>d<span class=\"hljs-regexp\">/hui/</span>config<span class=\"hljs-regexp\">/linux/</span>redis.conf<br><br><span class=\"hljs-comment\">#启动redis</span><br>docker run \\<br>\t--name redis \\<br>    --restart=always \\<br>    -p <span class=\"hljs-number\">6379</span>:<span class=\"hljs-number\">6379</span> \\<br>    -v <span class=\"hljs-regexp\">/opt/</span>config<span class=\"hljs-regexp\">/redis.conf:/</span>etc<span class=\"hljs-regexp\">/redis/</span>redis.conf \\<br>    -v <span class=\"hljs-regexp\">/out/</span>data:/data \\<br>    -itd redis:<span class=\"hljs-number\">5.0</span>.<span class=\"hljs-number\">3</span> redis-server <span class=\"hljs-regexp\">/etc/</span>redis/redis.conf \\<br>    --requirepass HBQ521521cf* \\<br>    --appendonly yes<br></code></pre></td></tr></table></figure>\n\n<h2><span id=\"mongdb\">MongDB</span></h2><figure class=\"highlight livescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs livescript\">docker run -itd <span class=\"hljs-string\">\\</span><br>    --restart=always <span class=\"hljs-string\">\\</span><br>    --name mongo <span class=\"hljs-string\">\\</span><br>    -p <span class=\"hljs-number\">27017</span>:<span class=\"hljs-number\">27017</span> <span class=\"hljs-string\">\\</span><br>    mongo<br></code></pre></td></tr></table></figure>\n\n<h2><span id=\"alist\">alist</span></h2><figure class=\"highlight livescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs livescript\">docker run -d <span class=\"hljs-string\">\\</span><br>\t--restart=always <span class=\"hljs-string\">\\</span><br>\t-v /opt/alist:/opt/alist/data <span class=\"hljs-string\">\\</span><br>\t-p <span class=\"hljs-number\">5244</span>:<span class=\"hljs-number\">5244</span> <span class=\"hljs-string\">\\</span><br>\t--name=<span class=\"hljs-string\">&quot;alist&quot;</span> <span class=\"hljs-string\">\\</span><br>\txhofe/alist:latest<br></code></pre></td></tr></table></figure>\n\n<h2><span id=\"nextcloud\">Nextcloud</span></h2><figure class=\"highlight livescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs livescript\">docker run <span class=\"hljs-string\">\\</span><br>    --name nextcloud <span class=\"hljs-string\">\\</span><br>    -p <span class=\"hljs-number\">83</span>:<span class=\"hljs-number\">80</span> <span class=\"hljs-string\">\\</span><br>    -v /opt/nextcloud:/<span class=\"hljs-keyword\">var</span>/www/html <span class=\"hljs-string\">\\</span><br>    -d nextcloud<br></code></pre></td></tr></table></figure>\n\n<h2><span id=\"serverstatus-hotaru探针\">ServerStatus-Hotaru(探针)</span></h2><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\">wget https:<span class=\"hljs-regexp\">//</span>raw.githubusercontent.com<span class=\"hljs-regexp\">/cokemine/</span>ServerStatus-Hotaru<span class=\"hljs-regexp\">/master/</span>status.sh<br><span class=\"hljs-comment\">#服务端</span><br>bash status.sh s<br><span class=\"hljs-comment\">#客户端</span><br>bash status.sh c<br><span class=\"hljs-comment\">#可通过删除所有下的header去除背景图</span><br><span class=\"hljs-regexp\">/usr/</span>local<span class=\"hljs-regexp\">/ServerStatus/</span>web<span class=\"hljs-regexp\">/css/</span>hotaru_fix.css<br><span class=\"hljs-comment\">#可以修改配置文件手动调整次序</span><br><span class=\"hljs-regexp\">/usr/</span>local<span class=\"hljs-regexp\">/ServerStatus/</span>server/config.json<br></code></pre></td></tr></table></figure>\n\n<h3><span id=\"探针自用nginx配置\">探针自用nginx配置</span></h3><figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gradle\">docker run \\<br>\t--name nginx \\<br>\t--restart=always \\<br>\t--privileged=<span class=\"hljs-keyword\">true</span> \\<br>\t-p <span class=\"hljs-number\">80</span>:<span class=\"hljs-number\">80</span> \\<br>\t-p <span class=\"hljs-number\">83</span>:<span class=\"hljs-number\">83</span> \\<br>\t-p <span class=\"hljs-number\">443</span>:<span class=\"hljs-number\">443</span> \\<br>\t-v <span class=\"hljs-regexp\">/opt/</span><span class=\"hljs-regexp\">/cert:/</span>etc<span class=\"hljs-regexp\">/nginx/</span>cert \\<br>\t-v <span class=\"hljs-regexp\">/opt/</span>config<span class=\"hljs-regexp\">/nginx.conf:/</span>etc<span class=\"hljs-regexp\">/nginx/</span>nginx.conf \\<br>\t-v <span class=\"hljs-regexp\">/usr/</span>local<span class=\"hljs-regexp\">/ServerStatus/</span>web:<span class=\"hljs-regexp\">/usr/</span>local<span class=\"hljs-regexp\">/ServerStatus/</span>web \\<br>\t-d nginx:<span class=\"hljs-number\">1.13</span><br></code></pre></td></tr></table></figure>\n\n<h2><span id=\"x-ui\">x-ui</span></h2><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\"><span class=\"hljs-comment\">#证书申请</span><br>bash &lt;(curl -Ls https:<span class=\"hljs-regexp\">//gi</span>thub.com<span class=\"hljs-regexp\">/baoqihui/</span>script<span class=\"hljs-regexp\">/raw/m</span>ain/cert.sh)<br><br>docker run -itd \\<br>\t--network=host \\<br>    -v <span class=\"hljs-regexp\">/opt/</span>x-ui<span class=\"hljs-regexp\">/db/</span>:<span class=\"hljs-regexp\">/etc/</span>x-ui/ \\<br>    -v <span class=\"hljs-regexp\">/opt/</span>cert<span class=\"hljs-regexp\">/:/</span>root<span class=\"hljs-regexp\">/cert/</span> \\<br>    --name x-ui \\<br>    --restart=unless-stopped \\<br>    enwaiax/x-ui:latest<br>    <br><span class=\"hljs-regexp\">/root/</span>cert<span class=\"hljs-regexp\">/db.ivps.ga/</span>cert.crt<br><span class=\"hljs-regexp\">/root/</span>cert<span class=\"hljs-regexp\">/db.ivps.ga/</span>private.key<br></code></pre></td></tr></table></figure>\n\n<h2><span id=\"minio\">minio</span></h2><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\">docker run -d \\<br> \t-p <span class=\"hljs-number\">9000</span>:<span class=\"hljs-number\">9000</span> \\<br>    -p <span class=\"hljs-number\">9001</span>:<span class=\"hljs-number\">9001</span> \\<br>    --name minio \\<br>    --restart=always \\<br>    -v <span class=\"hljs-regexp\">/opt/mi</span>nio<span class=\"hljs-regexp\">/data:/</span>data \\<br>    -v <span class=\"hljs-regexp\">/opt/mi</span>nio<span class=\"hljs-regexp\">/config:/</span>root/.minio \\<br>\t-e <span class=\"hljs-string\">&quot;MINIO_ROOT_USER=admin&quot;</span> \\<br>\t-e <span class=\"hljs-string\">&quot;MINIO_ROOT_PASSWORD=HBQ521521cf*&quot;</span> \\<br>\tminio<span class=\"hljs-regexp\">/minio server /</span>data --console-address <span class=\"hljs-string\">&quot;:9001&quot;</span> --address <span class=\"hljs-string\">&quot;:9000&quot;</span><br></code></pre></td></tr></table></figure>\n\n<h2><span id=\"青龙5700\">青龙5700</span></h2><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\"><span class=\"hljs-comment\">#脚本</span><br>docker run -dit \\<br>    -v <span class=\"hljs-regexp\">/opt/</span>ql<span class=\"hljs-regexp\">/config:/</span>ql/config \\<br>    -v <span class=\"hljs-regexp\">/opt/</span>ql<span class=\"hljs-regexp\">/log:/</span>ql/log \\<br>    -v <span class=\"hljs-regexp\">/opt/</span>ql<span class=\"hljs-regexp\">/scripts:/</span>ql/scripts \\<br>    -v <span class=\"hljs-regexp\">/opt/</span>ql<span class=\"hljs-regexp\">/db:/</span>ql/db \\<br>    --net host \\<br>    --name qinglong \\<br>    --hostname qinglong \\<br>    --restart always \\ <br>    whyour/qinglong:latest<br><span class=\"hljs-comment\">#token</span><br><span class=\"hljs-number\">5112967514</span>:AAFUKlk4o0BsrDMkYObWJV9fDvToKZxXGVk<br><span class=\"hljs-comment\">#uid</span><br><span class=\"hljs-number\">1721031645</span><br><span class=\"hljs-comment\">#脚本</span><br>ql repo https:<span class=\"hljs-regexp\">//gi</span>thub.com<span class=\"hljs-regexp\">/KingRan/</span>KR.git <span class=\"hljs-string\">&quot;jd_|jx_|jdCookie&quot;</span> <span class=\"hljs-string\">&quot;activity|backUp&quot;</span> <span class=\"hljs-string\">&quot;^jd[^_]|USER|utils|function|sign|sendNotify|ql|JDJR&quot;</span><br><span class=\"hljs-comment\">#账号配置</span><br>m.jd.com<br>JD_COOKIE<br>pt_key=AAJixPM2ADCFpLSE0IiXy0TPB_dqMkmf_NtkmAY4x7iQjGwlA4Yb2as26UQ_PUk8mXQRr4QisV0;pt_pin=jd_LUWkEsWClQXo;<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509181303263.png\" alt=\"image-20220509181303263\"></p>\n<h2><span id=\"frp内网穿透\">frp内网穿透</span></h2><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\"><span class=\"hljs-comment\">#服务端</span><br>mkdir -p <span class=\"hljs-regexp\">/opt/</span>config&amp;wget -O <span class=\"hljs-regexp\">/opt/</span>config<span class=\"hljs-regexp\">/frps.ini https:/</span><span class=\"hljs-regexp\">/alist.huijia.cf/</span>d<span class=\"hljs-regexp\">/hui/</span>config<span class=\"hljs-regexp\">/linux/</span>frps.ini<br><br>docker run -d --restart always --network host --name frps -v <span class=\"hljs-regexp\">/opt/</span>config<span class=\"hljs-regexp\">/frps.ini:/</span>etc<span class=\"hljs-regexp\">/frp/</span>frps.ini snowdreamtech/frps<br><span class=\"hljs-comment\">#本地下载启动</span><br>http:<span class=\"hljs-regexp\">//</span>file.huijia.cf<span class=\"hljs-regexp\">/file/</span>frp.zip<br></code></pre></td></tr></table></figure>\n\n<h2><span id=\"reclone\">reclone</span></h2><figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mipsasm\">apt <span class=\"hljs-keyword\">install </span>rclone<br>rclone purge cch2:<br><span class=\"hljs-comment\">#同步备份数据</span><br>rclone <span class=\"hljs-keyword\">sync </span>-P cch1:<span class=\"hljs-keyword\">backup </span>cch2:<span class=\"hljs-keyword\">backup</span><br></code></pre></td></tr></table></figure>\n\n<h2><span id=\"极光中转面板8000\">极光中转面板8000</span></h2><figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs apache\"><span class=\"hljs-attribute\">wget</span> -O docker-compose.yml https://alist.huijia.cf/d/hui/config/linux/jiguang-docker-compose.yml<br><span class=\"hljs-comment\">#启动</span><br><span class=\"hljs-attribute\">docker</span>-compose up -d<br><span class=\"hljs-comment\">#初始化</span><br><span class=\"hljs-attribute\">docker</span>-compose exec backend python app/initial_data.py<br><span class=\"hljs-comment\">#端口</span><br><span class=\"hljs-attribute\">HTTP</span>端口是：<span class=\"hljs-number\">80</span>,<span class=\"hljs-number\">8080</span>,<span class=\"hljs-number\">8880</span>,<span class=\"hljs-number\">2052</span>,<span class=\"hljs-number\">2082</span>,<span class=\"hljs-number\">2086</span>,<span class=\"hljs-number\">2095</span><br><span class=\"hljs-attribute\">HTTPs</span>端口是：<span class=\"hljs-number\">443</span>,<span class=\"hljs-number\">2053</span>,<span class=\"hljs-number\">2083</span>,<span class=\"hljs-number\">2087</span>,<span class=\"hljs-number\">2096</span>,<span class=\"hljs-number\">8443</span><br></code></pre></td></tr></table></figure>\n\n<h2><span id=\"gost中转脚本\">Gost中转脚本</span></h2><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\">wget --no-check-certificate -O gost.sh https:<span class=\"hljs-regexp\">//</span>raw.githubusercontent.com<span class=\"hljs-regexp\">/KANIKIG/</span>Multi-EasyGost<span class=\"hljs-regexp\">/master/g</span>ost.sh &amp;&amp; chmod +x gost.sh &amp;&amp; ./gost.sh<br></code></pre></td></tr></table></figure>\n\n<h2><span id=\"测速\">测速</span></h2><figure class=\"highlight livescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs livescript\">docker run <span class=\"hljs-string\">\\</span><br>\t--name speedtest <span class=\"hljs-string\">\\</span><br>\t--restart=always <span class=\"hljs-string\">\\</span><br>\t-p <span class=\"hljs-number\">84</span>:<span class=\"hljs-number\">80</span> <span class=\"hljs-string\">\\</span><br>\t-dit stilleshan/speedtest-x<br></code></pre></td></tr></table></figure>\n\n<h2><span id=\"zpan\">ZPan</span></h2><figure class=\"highlight livescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs livescript\">docker run <span class=\"hljs-string\">\\</span><br>    --name zpan <span class=\"hljs-string\">\\</span><br>    --restart=always <span class=\"hljs-string\">\\</span><br>    -p <span class=\"hljs-number\">8222</span>:<span class=\"hljs-number\">8222</span> <span class=\"hljs-string\">\\</span><br>    -v /o/zpan:/etc/zpan <span class=\"hljs-string\">\\</span><br>    -<span class=\"hljs-literal\">it</span> saltbo/zpan<br></code></pre></td></tr></table></figure>\n\n<h3><span id=\"zfile\">Zfile</span></h3><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\">docker run -d --name=zfile --restart=always \\<br>    -p <span class=\"hljs-number\">8099</span>:<span class=\"hljs-number\">8080</span> \\<br>    -v <span class=\"hljs-regexp\">/opt/</span>zfile<span class=\"hljs-regexp\">/db:/</span>root<span class=\"hljs-regexp\">/.zfile/</span>db \\<br>    -v <span class=\"hljs-regexp\">/opt/</span>zfile<span class=\"hljs-regexp\">/logs:/</span>root<span class=\"hljs-regexp\">/.zfile/</span>logs \\<br>    zhaojun1998/zfile<br></code></pre></td></tr></table></figure>\n\n<h2><span id=\"seafile\">seafile</span></h2><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\">wget -O docker-compose.yml https:<span class=\"hljs-regexp\">//</span>alist.huijia.cf<span class=\"hljs-regexp\">/d/</span>hui<span class=\"hljs-regexp\">/config/</span>linux/seafile-docker-compose.yml<br><br><span class=\"hljs-comment\"># 配置webdav/opt/seafile-data/seafile/conf/seafdav.conf</span><br>[WEBDAV]<br>enabled = true<br>port = <span class=\"hljs-number\">85</span><br>share_name = /<br>show_repo_id=true<br></code></pre></td></tr></table></figure>\n\n<h2><span id=\"cloudreve\">cloudreve</span></h2><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\">docker run -d \\<br>  --name cloudreve \\<br>  -e PUID=<span class=\"hljs-number\">0</span> \\<br>  -e PGID=<span class=\"hljs-number\">0</span> \\<br>  -e TZ=<span class=\"hljs-string\">&quot;Asia/Shanghai&quot;</span> \\<br>  -p <span class=\"hljs-number\">5212</span>:<span class=\"hljs-number\">5212</span> \\<br>  --restart=unless-stopped \\<br>  -v <span class=\"hljs-regexp\">/opt/</span>cloudreve<span class=\"hljs-regexp\">/uploads:/</span>cloudreve/uploads \\<br>  -v <span class=\"hljs-regexp\">/opt/</span>cloudreve<span class=\"hljs-regexp\">/config:/</span>cloudreve/config \\<br>  -v <span class=\"hljs-regexp\">/opt/</span>cloudreve<span class=\"hljs-regexp\">/db:/</span>cloudreve/db \\<br>  -v <span class=\"hljs-regexp\">/opt/</span>cloudreve<span class=\"hljs-regexp\">/avatar:/</span>cloudreve/avatar \\<br>  xavierniu/cloudreve<br><span class=\"hljs-comment\">#mysql配置</span><br>cat &lt;(curl -Ls https:<span class=\"hljs-regexp\">//</span>raw.githubusercontent.com<span class=\"hljs-regexp\">/baoqihui/</span>file<span class=\"hljs-regexp\">/master/</span>config<span class=\"hljs-regexp\">/cloudreve-db) &gt;&gt; /</span>opt<span class=\"hljs-regexp\">/cloudreve/</span>config/conf.ini<br><span class=\"hljs-comment\">#查看首次账号密码</span><br>docker logs -f cloudreve<br></code></pre></td></tr></table></figure>\n\n<h2><span id=\"java项目\">Java项目</span></h2><ul>\n<li>Dockerfile</li>\n</ul>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dockerfile\"><span class=\"hljs-keyword\">FROM</span> openjdk:<span class=\"hljs-number\">11.0</span>.<span class=\"hljs-number\">4</span><br><span class=\"hljs-keyword\">ADD</span><span class=\"language-bash\"> cms-0.0.1-SNAPSHOT.jar  /cms.jar</span><br><span class=\"hljs-keyword\">EXPOSE</span> <span class=\"hljs-number\">8089</span><br><span class=\"hljs-keyword\">ENTRYPOINT</span><span class=\"language-bash\"> [<span class=\"hljs-string\">&quot;java&quot;</span>,<span class=\"hljs-string\">&quot;-Xms1024m&quot;</span>,<span class=\"hljs-string\">&quot;-Xmx1024m&quot;</span>,<span class=\"hljs-string\">&quot;-jar&quot;</span>,<span class=\"hljs-string\">&quot;/cms.jar&quot;</span>,<span class=\"hljs-string\">&quot;--spring.profiles.active=dev&quot;</span>,<span class=\"hljs-string\">&quot;-c&quot;</span>]</span><br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>构建：</li>\n</ul>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\">docker build -t cms:v1 .<br>docker run  -d --restart=always --name cms -p <span class=\"hljs-number\">8089</span>:<span class=\"hljs-number\">8089</span> -v <span class=\"hljs-regexp\">/out/</span>logs<span class=\"hljs-regexp\">/cms:/</span>out<span class=\"hljs-regexp\">/logs/</span>cms cms:v1<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>上传自己的镜像到dockerhub</li>\n</ul>\n<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs vim\">docker login<br>docker <span class=\"hljs-keyword\">tag</span> <span class=\"hljs-keyword\">cm</span><span class=\"hljs-variable\">s:v1</span> baoqihui/<span class=\"hljs-keyword\">cm</span><span class=\"hljs-variable\">s:v1</span><br>docker push baoqihui/<span class=\"hljs-keyword\">cm</span><span class=\"hljs-variable\">s:v1</span><br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>拉取自己的docker镜像</li>\n</ul>\n<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs vim\">docker pull baoqihui/<span class=\"hljs-keyword\">cm</span><span class=\"hljs-variable\">s:v1</span><br></code></pre></td></tr></table></figure>\n\n<h2><span id=\"文件下载\">文件下载</span></h2><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\">mkdir -p <span class=\"hljs-regexp\">/opt/</span>config&amp;wget -O <span class=\"hljs-regexp\">/opt/</span>config<span class=\"hljs-regexp\">/nginx.conf https:/</span><span class=\"hljs-regexp\">/alist.huijia.cf/</span>d<span class=\"hljs-regexp\">/hui/</span>config<span class=\"hljs-regexp\">/linux/</span>nginx.conf<br></code></pre></td></tr></table></figure>\n\n<h2><span id=\"rclone挂载\">rclone挂载</span></h2><figure class=\"highlight dsconfig\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dsconfig\"><span class=\"hljs-string\">rclone</span> <span class=\"hljs-string\">co</span><br><span class=\"hljs-comment\">#阿里</span><br><span class=\"hljs-string\">rclone</span> <span class=\"hljs-string\">mount</span> <span class=\"hljs-string\">ali</span>:/ <span class=\"hljs-string\">f</span>: <span class=\"hljs-built_in\">--cache-dir</span> <span class=\"hljs-string\">C:rclone </span><span class=\"hljs-built_in\">--vfs-cache-mode</span> <span class=\"hljs-string\">writes</span><br><span class=\"hljs-comment\">#</span><br><span class=\"hljs-string\">rclone</span> <span class=\"hljs-string\">mount</span> <span class=\"hljs-string\">cch1</span>:/ <span class=\"hljs-string\">f</span>: <span class=\"hljs-built_in\">--cache-dir</span> <span class=\"hljs-string\">C:rclone </span><span class=\"hljs-built_in\">--vfs-cache-mode</span> <span class=\"hljs-string\">writes</span><br><span class=\"hljs-comment\">#谷歌</span><br><span class=\"hljs-string\">rclone</span> <span class=\"hljs-string\">mount</span> <span class=\"hljs-string\">google</span>:/ <span class=\"hljs-string\">g</span>: -- <span class=\"hljs-string\">cache-dir</span> <span class=\"hljs-string\">C</span>:\\<span class=\"hljs-string\">rclone</span> <span class=\"hljs-built_in\">--vfs-cache-mode</span> <span class=\"hljs-string\">writes</span> &amp;<br></code></pre></td></tr></table></figure>\n\n<p>mklink &#x2F;d  “c:\\Users\\hui\\OneDrive - isahk\\BookMark” “D:\\BookMark”</p>\n<h2><span id=\"clickhouse\">Clickhouse</span></h2><figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs apache\"><span class=\"hljs-attribute\">docker</span> run --rm -d --name=ch-server --ulimit nofile=<span class=\"hljs-number\">262144</span>:<span class=\"hljs-number\">262144</span> -p <span class=\"hljs-number\">8123</span>:<span class=\"hljs-number\">8123</span> -p <span class=\"hljs-number\">9009</span>:<span class=\"hljs-number\">9009</span> -p <span class=\"hljs-number\">9090</span>:<span class=\"hljs-number\">9000</span> yandex/clickhouse-server:<span class=\"hljs-number\">22.1.2.2</span><br></code></pre></td></tr></table></figure>\n\n<h2><span id=\"shardingwhere\">shardingwhere</span></h2><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\">docker run -d --name=sharding -v <span class=\"hljs-regexp\">/Users/</span>huibaoqi<span class=\"hljs-regexp\">/opt/</span>sharding<span class=\"hljs-regexp\">/conf:/</span>opt<span class=\"hljs-regexp\">/shardingsphere-proxy/</span>conf -v <span class=\"hljs-regexp\">/Users/</span>huibaoqi<span class=\"hljs-regexp\">/opt/</span>sharding<span class=\"hljs-regexp\">/ext-lib:/</span>opt<span class=\"hljs-regexp\">/shardingsphere-proxy/</span>ext-lib -e PORT=<span class=\"hljs-number\">3308</span> -p13308:<span class=\"hljs-number\">3308</span> apache/shardingsphere-proxy:latest<br></code></pre></td></tr></table></figure>\n\n<h2><span id=\"可道云\">可道云</span></h2><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\">docker run -d -p <span class=\"hljs-number\">80</span>:<span class=\"hljs-number\">80</span> -v <span class=\"hljs-regexp\">/data:/</span>var<span class=\"hljs-regexp\">/www/</span>html kodcloud/kodbox<br></code></pre></td></tr></table></figure>\n\n<h2><span id=\"hexo\">hexo</span></h2><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\">docker run -d --name=hexo \\<br>-e HEXO_SERVER_PORT=<span class=\"hljs-number\">4000</span> \\<br>-e GIT_USER=<span class=\"hljs-string\">&quot;baoqi.hui@qq.com&quot;</span> \\<br>-e GIT_EMAIL=<span class=\"hljs-string\">&quot;HBQ521521cf*&quot;</span> \\<br>-v <span class=\"hljs-regexp\">/opt/</span>blog:<span class=\"hljs-regexp\">/app/</span>blog \\<br>-p <span class=\"hljs-number\">4000</span>:<span class=\"hljs-number\">4000</span> \\<br>baoqihui/hexo<br><br>rclone sync ali:BookMark <span class=\"hljs-regexp\">/opt/</span>blog<span class=\"hljs-regexp\">/source/</span>_posts<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/50536515.png\" alt=\"img\"></p>\n","site":{"data":{}},"wordcount":8479,"excerpt":"","more":"<h1 id=\"常用Docker脚本\"><a href=\"#常用Docker脚本\" class=\"headerlink\" title=\"常用Docker脚本\"></a>常用Docker脚本</h1><hr>\n<p>[toc]</p>\n<hr>\n<h2 id=\"安装docker\"><a href=\"#安装docker\" class=\"headerlink\" title=\"安装docker\"></a>安装docker</h2><figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cmake\">apt <span class=\"hljs-keyword\">install</span> -y docker.io<br>apt <span class=\"hljs-keyword\">install</span> -y docker-compose<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"常用脚本\"><a href=\"#常用脚本\" class=\"headerlink\" title=\"常用脚本\"></a>常用脚本</h2><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\"><span class=\"hljs-comment\">#ROOT密码</span><br>bash &lt;(curl -Ls https:<span class=\"hljs-regexp\">//gi</span>thub.com<span class=\"hljs-regexp\">/baoqihui/</span>script<span class=\"hljs-regexp\">/raw/m</span>ain/root.sh)<br><span class=\"hljs-comment\">#更新系统</span><br>bash &lt;(curl -Ls https:<span class=\"hljs-regexp\">//gi</span>thub.com<span class=\"hljs-regexp\">/baoqihui/</span>script<span class=\"hljs-regexp\">/raw/m</span>ain/init.sh)<br><span class=\"hljs-comment\">#证书申请</span><br>bash &lt;(curl -Ls https:<span class=\"hljs-regexp\">//gi</span>thub.com<span class=\"hljs-regexp\">/baoqihui/</span>script<span class=\"hljs-regexp\">/raw/m</span>ain/cert.sh)<br><br>minio.huijia.cf alist.huijia.cf cms.service.cf cms-plus.service.cf minio.service.cf service.cf aixue.cf aiqi.cf<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"挂载nginx\"><a href=\"#挂载nginx\" class=\"headerlink\" title=\"挂载nginx\"></a>挂载nginx</h2><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\"><span class=\"hljs-comment\">#docker查看宿主机ip</span><br>ip addr show docker0<br><span class=\"hljs-comment\">#下载配置文件</span><br>mkdir -p <span class=\"hljs-regexp\">/opt/</span>config&amp;wget -O <span class=\"hljs-regexp\">/opt/</span>config<span class=\"hljs-regexp\">/nginx.conf https:/</span><span class=\"hljs-regexp\">/alist.huijia.cf/</span>d<span class=\"hljs-regexp\">/hui/</span>config<span class=\"hljs-regexp\">/linux/</span>nginx.conf<br><span class=\"hljs-comment\">#修改配置后重启</span><br>docker run \\<br>\t--name nginx \\<br>\t--restart=always \\<br>\t--privileged=true \\<br>\t--net host \\<br>\t-v <span class=\"hljs-regexp\">/opt/</span>config<span class=\"hljs-regexp\">/nginx.conf:/</span>etc<span class=\"hljs-regexp\">/nginx/</span>nginx.conf \\<br>\t-v <span class=\"hljs-regexp\">/opt/</span>cert:<span class=\"hljs-regexp\">/etc/</span>nginx/cert \\<br>\t-v <span class=\"hljs-regexp\">/opt/mi</span>nio<span class=\"hljs-regexp\">/data/</span>dev-ui:<span class=\"hljs-regexp\">/etc/</span>nginx/dev-ui \\<br>\t-d nginx:<span class=\"hljs-number\">1.13</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"win\"><a href=\"#win\" class=\"headerlink\" title=\"win\"></a>win</h2><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\"><br>docker <span class=\"hljs-built_in\">run</span> -d <span class=\"hljs-attribute\">--name</span>=hui <span class=\"hljs-attribute\">--restart</span>=always -p 81:8080 -e <span class=\"hljs-attribute\">TZ</span>=<span class=\"hljs-string\">&quot;Asia/Shanghai&quot;</span> -e <span class=\"hljs-attribute\">ALIYUNDRIVE_AUTH_USERNAME</span>=<span class=\"hljs-string\">&quot;admin&quot;</span> -e <span class=\"hljs-attribute\">ALIYUNDRIVE_REFRESH_TOKEN</span>=<span class=\"hljs-string\">&quot;dea9215b0d504e50acf3495a86e3ef54&quot;</span> -e <span class=\"hljs-attribute\">ALIYUNDRIVE_AUTH_PASSWORD</span>=<span class=\"hljs-string\">&quot;HBQ521521cf*&quot;</span> -e <span class=\"hljs-attribute\">JAVA_OPTS</span>=<span class=\"hljs-string\">&quot;-Xmx1g&quot;</span> baoqihui/webdav-aliyundriver:amd<br><br>docker <span class=\"hljs-built_in\">run</span> --name mysql <span class=\"hljs-attribute\">--restart</span>=always -v D:\\opt\\config\\mysqld.cnf:/etc/mysql/mysql.conf.d/mysqld.cnf -p 3306:3306 -e <span class=\"hljs-attribute\">MYSQL_ROOT_PASSWORD</span>=HBQ521521cf* -itd mysql:5.7.29<br><br>docker <span class=\"hljs-built_in\">run</span> --rm -d <span class=\"hljs-attribute\">--name</span>=ch-server --ulimit <span class=\"hljs-attribute\">nofile</span>=262144:262144 -p 8123:8123 -p 9009:9009 -p 9090:9000 yandex/clickhouse-server:22.1.2.2<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"阿里云盘\"><a href=\"#阿里云盘\" class=\"headerlink\" title=\"阿里云盘\"></a>阿里云盘</h2><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\"><span class=\"hljs-comment\">#hui</span><br>docker <span class=\"hljs-built_in\">run</span> \\<br>    <span class=\"hljs-attribute\">--name</span>=hui \\<br>    <span class=\"hljs-attribute\">--restart</span>=always \\<br>    -p 81:8080 \\<br>    -e <span class=\"hljs-attribute\">TZ</span>=<span class=\"hljs-string\">&quot;Asia/Shanghai&quot;</span> \\<br>    -e <span class=\"hljs-attribute\">JAVA_OPTS</span>=<span class=\"hljs-string\">&quot;-Xmx1g&quot;</span> \\<br>    -e <span class=\"hljs-attribute\">ALIYUNDRIVE_REFRESH_TOKEN</span>=<span class=\"hljs-string\">&quot;dea9215b0d504e50acf3495a86e3ef54&quot;</span> \\<br>    -e <span class=\"hljs-attribute\">ALIYUNDRIVE_AUTH_PASSWORD</span>=<span class=\"hljs-string\">&quot;HBQ521521cf*&quot;</span> \\<br>    -d baoqihui/webdav-aliyundriver<br><br><span class=\"hljs-comment\">#xue</span><br>docker <span class=\"hljs-built_in\">run</span> \\<br>    <span class=\"hljs-attribute\">--name</span>=xue \\<br>    <span class=\"hljs-attribute\">--restart</span>=always \\<br>    -p 82:8080 \\<br>    -v /etc/localtime:/etc/localtime \\<br>    -e <span class=\"hljs-attribute\">TZ</span>=<span class=\"hljs-string\">&quot;Asia/Shanghai&quot;</span> \\<br>    -e <span class=\"hljs-attribute\">JAVA_OPTS</span>=<span class=\"hljs-string\">&quot;-Xmx1g&quot;</span> \\<br>    -e <span class=\"hljs-attribute\">ALIYUNDRIVE_REFRESH_TOKEN</span>=<span class=\"hljs-string\">&quot;796520ae8cad4b10a9681554cd1437c2&quot;</span> \\<br>    -e <span class=\"hljs-attribute\">ALIYUNDRIVE_AUTH_PASSWORD</span>=<span class=\"hljs-string\">&quot;HBQ521521cf*&quot;</span> \\<br>    -d baoqihui/webdav-aliyundriver<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"MySQL\"><a href=\"#MySQL\" class=\"headerlink\" title=\"MySQL\"></a>MySQL</h2><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\">mkdir -p <span class=\"hljs-regexp\">/out/my</span>sql&amp;&amp;mkdir -p <span class=\"hljs-regexp\">/opt/</span>config&amp;&amp;wget -O <span class=\"hljs-regexp\">/opt/</span>config<span class=\"hljs-regexp\">/mysqld.cnf https:/</span><span class=\"hljs-regexp\">/alist.huijia.cf/</span>d<span class=\"hljs-regexp\">/hui/</span>config<span class=\"hljs-regexp\">/linux/my</span>sqld.cnf&amp;&amp;wget -O <span class=\"hljs-regexp\">/root/</span>backup-mysql.sh https:<span class=\"hljs-regexp\">//</span>alist.huijia.cf<span class=\"hljs-regexp\">/d/</span>hui<span class=\"hljs-regexp\">/config/</span>linux/backup-mysql.sh<br><br><span class=\"hljs-comment\">#arm框架</span><br>docker run \\<br>\t--name mysql7 \\<br>    --restart=always \\<br>    -v <span class=\"hljs-regexp\">/opt/</span>config<span class=\"hljs-regexp\">/mysqld7.cnf:/</span>etc<span class=\"hljs-regexp\">/mysql/my</span>sql.conf.d/mysqld.cnf \\<br>    -v <span class=\"hljs-regexp\">/out/my</span>sql<span class=\"hljs-regexp\">/:/</span>out<span class=\"hljs-regexp\">/mysql/</span> \\<br>    -p <span class=\"hljs-number\">3308</span>:<span class=\"hljs-number\">3306</span> \\<br>    -e MYSQL_ROOT_PASSWORD=HBQ521521cf* \\<br>    -itd biarms/mysql:<span class=\"hljs-number\">5.7</span>.<span class=\"hljs-number\">30</span>-linux-arm64v8<br>    <br><span class=\"hljs-comment\">#amd框架</span><br>docker run \\<br>    --name mysql \\<br>    --restart=always \\<br>    -v <span class=\"hljs-regexp\">/opt/</span>config<span class=\"hljs-regexp\">/mysqld.cnf:/</span>etc<span class=\"hljs-regexp\">/mysql/my</span>sql.conf.d/mysqld.cnf \\<br>    -p <span class=\"hljs-number\">3306</span>:<span class=\"hljs-number\">3306</span> \\<br>    -e MYSQL_ROOT_PASSWORD=HBQ521521cf* \\<br>    -itd mysql:<span class=\"hljs-number\">5.7</span>.<span class=\"hljs-number\">29</span><br>    <br><span class=\"hljs-comment\">#登录mysql刷新权限</span><br>docker exec -it mysql bash<br>mysql -uroot -pHBQ521521cf*<br>update mysql.user set host=<span class=\"hljs-string\">&quot;%&quot;</span> where user=<span class=\"hljs-string\">&quot;root&quot;</span>;<br>flush privileges;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"Redis\"><a href=\"#Redis\" class=\"headerlink\" title=\"Redis\"></a>Redis</h2><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\"><span class=\"hljs-comment\">#下载配置文件</span><br>mkdir -p <span class=\"hljs-regexp\">/opt/</span>config&amp;wget -O <span class=\"hljs-regexp\">/opt/</span>config<span class=\"hljs-regexp\">/redis.conf https:/</span><span class=\"hljs-regexp\">/alist.huijia.cf/</span>d<span class=\"hljs-regexp\">/hui/</span>config<span class=\"hljs-regexp\">/linux/</span>redis.conf<br><br><span class=\"hljs-comment\">#启动redis</span><br>docker run \\<br>\t--name redis \\<br>    --restart=always \\<br>    -p <span class=\"hljs-number\">6379</span>:<span class=\"hljs-number\">6379</span> \\<br>    -v <span class=\"hljs-regexp\">/opt/</span>config<span class=\"hljs-regexp\">/redis.conf:/</span>etc<span class=\"hljs-regexp\">/redis/</span>redis.conf \\<br>    -v <span class=\"hljs-regexp\">/out/</span>data:/data \\<br>    -itd redis:<span class=\"hljs-number\">5.0</span>.<span class=\"hljs-number\">3</span> redis-server <span class=\"hljs-regexp\">/etc/</span>redis/redis.conf \\<br>    --requirepass HBQ521521cf* \\<br>    --appendonly yes<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"MongDB\"><a href=\"#MongDB\" class=\"headerlink\" title=\"MongDB\"></a>MongDB</h2><figure class=\"highlight livescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs livescript\">docker run -itd <span class=\"hljs-string\">\\</span><br>    --restart=always <span class=\"hljs-string\">\\</span><br>    --name mongo <span class=\"hljs-string\">\\</span><br>    -p <span class=\"hljs-number\">27017</span>:<span class=\"hljs-number\">27017</span> <span class=\"hljs-string\">\\</span><br>    mongo<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"alist\"><a href=\"#alist\" class=\"headerlink\" title=\"alist\"></a>alist</h2><figure class=\"highlight livescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs livescript\">docker run -d <span class=\"hljs-string\">\\</span><br>\t--restart=always <span class=\"hljs-string\">\\</span><br>\t-v /opt/alist:/opt/alist/data <span class=\"hljs-string\">\\</span><br>\t-p <span class=\"hljs-number\">5244</span>:<span class=\"hljs-number\">5244</span> <span class=\"hljs-string\">\\</span><br>\t--name=<span class=\"hljs-string\">&quot;alist&quot;</span> <span class=\"hljs-string\">\\</span><br>\txhofe/alist:latest<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"Nextcloud\"><a href=\"#Nextcloud\" class=\"headerlink\" title=\"Nextcloud\"></a>Nextcloud</h2><figure class=\"highlight livescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs livescript\">docker run <span class=\"hljs-string\">\\</span><br>    --name nextcloud <span class=\"hljs-string\">\\</span><br>    -p <span class=\"hljs-number\">83</span>:<span class=\"hljs-number\">80</span> <span class=\"hljs-string\">\\</span><br>    -v /opt/nextcloud:/<span class=\"hljs-keyword\">var</span>/www/html <span class=\"hljs-string\">\\</span><br>    -d nextcloud<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"ServerStatus-Hotaru-探针\"><a href=\"#ServerStatus-Hotaru-探针\" class=\"headerlink\" title=\"ServerStatus-Hotaru(探针)\"></a>ServerStatus-Hotaru(探针)</h2><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\">wget https:<span class=\"hljs-regexp\">//</span>raw.githubusercontent.com<span class=\"hljs-regexp\">/cokemine/</span>ServerStatus-Hotaru<span class=\"hljs-regexp\">/master/</span>status.sh<br><span class=\"hljs-comment\">#服务端</span><br>bash status.sh s<br><span class=\"hljs-comment\">#客户端</span><br>bash status.sh c<br><span class=\"hljs-comment\">#可通过删除所有下的header去除背景图</span><br><span class=\"hljs-regexp\">/usr/</span>local<span class=\"hljs-regexp\">/ServerStatus/</span>web<span class=\"hljs-regexp\">/css/</span>hotaru_fix.css<br><span class=\"hljs-comment\">#可以修改配置文件手动调整次序</span><br><span class=\"hljs-regexp\">/usr/</span>local<span class=\"hljs-regexp\">/ServerStatus/</span>server/config.json<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"探针自用nginx配置\"><a href=\"#探针自用nginx配置\" class=\"headerlink\" title=\"探针自用nginx配置\"></a>探针自用nginx配置</h3><figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gradle\">docker run \\<br>\t--name nginx \\<br>\t--restart=always \\<br>\t--privileged=<span class=\"hljs-keyword\">true</span> \\<br>\t-p <span class=\"hljs-number\">80</span>:<span class=\"hljs-number\">80</span> \\<br>\t-p <span class=\"hljs-number\">83</span>:<span class=\"hljs-number\">83</span> \\<br>\t-p <span class=\"hljs-number\">443</span>:<span class=\"hljs-number\">443</span> \\<br>\t-v <span class=\"hljs-regexp\">/opt/</span><span class=\"hljs-regexp\">/cert:/</span>etc<span class=\"hljs-regexp\">/nginx/</span>cert \\<br>\t-v <span class=\"hljs-regexp\">/opt/</span>config<span class=\"hljs-regexp\">/nginx.conf:/</span>etc<span class=\"hljs-regexp\">/nginx/</span>nginx.conf \\<br>\t-v <span class=\"hljs-regexp\">/usr/</span>local<span class=\"hljs-regexp\">/ServerStatus/</span>web:<span class=\"hljs-regexp\">/usr/</span>local<span class=\"hljs-regexp\">/ServerStatus/</span>web \\<br>\t-d nginx:<span class=\"hljs-number\">1.13</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"x-ui\"><a href=\"#x-ui\" class=\"headerlink\" title=\"x-ui\"></a>x-ui</h2><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\"><span class=\"hljs-comment\">#证书申请</span><br>bash &lt;(curl -Ls https:<span class=\"hljs-regexp\">//gi</span>thub.com<span class=\"hljs-regexp\">/baoqihui/</span>script<span class=\"hljs-regexp\">/raw/m</span>ain/cert.sh)<br><br>docker run -itd \\<br>\t--network=host \\<br>    -v <span class=\"hljs-regexp\">/opt/</span>x-ui<span class=\"hljs-regexp\">/db/</span>:<span class=\"hljs-regexp\">/etc/</span>x-ui/ \\<br>    -v <span class=\"hljs-regexp\">/opt/</span>cert<span class=\"hljs-regexp\">/:/</span>root<span class=\"hljs-regexp\">/cert/</span> \\<br>    --name x-ui \\<br>    --restart=unless-stopped \\<br>    enwaiax/x-ui:latest<br>    <br><span class=\"hljs-regexp\">/root/</span>cert<span class=\"hljs-regexp\">/db.ivps.ga/</span>cert.crt<br><span class=\"hljs-regexp\">/root/</span>cert<span class=\"hljs-regexp\">/db.ivps.ga/</span>private.key<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"minio\"><a href=\"#minio\" class=\"headerlink\" title=\"minio\"></a>minio</h2><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\">docker run -d \\<br> \t-p <span class=\"hljs-number\">9000</span>:<span class=\"hljs-number\">9000</span> \\<br>    -p <span class=\"hljs-number\">9001</span>:<span class=\"hljs-number\">9001</span> \\<br>    --name minio \\<br>    --restart=always \\<br>    -v <span class=\"hljs-regexp\">/opt/mi</span>nio<span class=\"hljs-regexp\">/data:/</span>data \\<br>    -v <span class=\"hljs-regexp\">/opt/mi</span>nio<span class=\"hljs-regexp\">/config:/</span>root/.minio \\<br>\t-e <span class=\"hljs-string\">&quot;MINIO_ROOT_USER=admin&quot;</span> \\<br>\t-e <span class=\"hljs-string\">&quot;MINIO_ROOT_PASSWORD=HBQ521521cf*&quot;</span> \\<br>\tminio<span class=\"hljs-regexp\">/minio server /</span>data --console-address <span class=\"hljs-string\">&quot;:9001&quot;</span> --address <span class=\"hljs-string\">&quot;:9000&quot;</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"青龙5700\"><a href=\"#青龙5700\" class=\"headerlink\" title=\"青龙5700\"></a>青龙5700</h2><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\"><span class=\"hljs-comment\">#脚本</span><br>docker run -dit \\<br>    -v <span class=\"hljs-regexp\">/opt/</span>ql<span class=\"hljs-regexp\">/config:/</span>ql/config \\<br>    -v <span class=\"hljs-regexp\">/opt/</span>ql<span class=\"hljs-regexp\">/log:/</span>ql/log \\<br>    -v <span class=\"hljs-regexp\">/opt/</span>ql<span class=\"hljs-regexp\">/scripts:/</span>ql/scripts \\<br>    -v <span class=\"hljs-regexp\">/opt/</span>ql<span class=\"hljs-regexp\">/db:/</span>ql/db \\<br>    --net host \\<br>    --name qinglong \\<br>    --hostname qinglong \\<br>    --restart always \\ <br>    whyour/qinglong:latest<br><span class=\"hljs-comment\">#token</span><br><span class=\"hljs-number\">5112967514</span>:AAFUKlk4o0BsrDMkYObWJV9fDvToKZxXGVk<br><span class=\"hljs-comment\">#uid</span><br><span class=\"hljs-number\">1721031645</span><br><span class=\"hljs-comment\">#脚本</span><br>ql repo https:<span class=\"hljs-regexp\">//gi</span>thub.com<span class=\"hljs-regexp\">/KingRan/</span>KR.git <span class=\"hljs-string\">&quot;jd_|jx_|jdCookie&quot;</span> <span class=\"hljs-string\">&quot;activity|backUp&quot;</span> <span class=\"hljs-string\">&quot;^jd[^_]|USER|utils|function|sign|sendNotify|ql|JDJR&quot;</span><br><span class=\"hljs-comment\">#账号配置</span><br>m.jd.com<br>JD_COOKIE<br>pt_key=AAJixPM2ADCFpLSE0IiXy0TPB_dqMkmf_NtkmAY4x7iQjGwlA4Yb2as26UQ_PUk8mXQRr4QisV0;pt_pin=jd_LUWkEsWClQXo;<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509181303263.png\" alt=\"image-20220509181303263\"></p>\n<h2 id=\"frp内网穿透\"><a href=\"#frp内网穿透\" class=\"headerlink\" title=\"frp内网穿透\"></a>frp内网穿透</h2><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\"><span class=\"hljs-comment\">#服务端</span><br>mkdir -p <span class=\"hljs-regexp\">/opt/</span>config&amp;wget -O <span class=\"hljs-regexp\">/opt/</span>config<span class=\"hljs-regexp\">/frps.ini https:/</span><span class=\"hljs-regexp\">/alist.huijia.cf/</span>d<span class=\"hljs-regexp\">/hui/</span>config<span class=\"hljs-regexp\">/linux/</span>frps.ini<br><br>docker run -d --restart always --network host --name frps -v <span class=\"hljs-regexp\">/opt/</span>config<span class=\"hljs-regexp\">/frps.ini:/</span>etc<span class=\"hljs-regexp\">/frp/</span>frps.ini snowdreamtech/frps<br><span class=\"hljs-comment\">#本地下载启动</span><br>http:<span class=\"hljs-regexp\">//</span>file.huijia.cf<span class=\"hljs-regexp\">/file/</span>frp.zip<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"reclone\"><a href=\"#reclone\" class=\"headerlink\" title=\"reclone\"></a>reclone</h2><figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mipsasm\">apt <span class=\"hljs-keyword\">install </span>rclone<br>rclone purge cch2:<br><span class=\"hljs-comment\">#同步备份数据</span><br>rclone <span class=\"hljs-keyword\">sync </span>-P cch1:<span class=\"hljs-keyword\">backup </span>cch2:<span class=\"hljs-keyword\">backup</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"极光中转面板8000\"><a href=\"#极光中转面板8000\" class=\"headerlink\" title=\"极光中转面板8000\"></a>极光中转面板8000</h2><figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs apache\"><span class=\"hljs-attribute\">wget</span> -O docker-compose.yml https://alist.huijia.cf/d/hui/config/linux/jiguang-docker-compose.yml<br><span class=\"hljs-comment\">#启动</span><br><span class=\"hljs-attribute\">docker</span>-compose up -d<br><span class=\"hljs-comment\">#初始化</span><br><span class=\"hljs-attribute\">docker</span>-compose exec backend python app/initial_data.py<br><span class=\"hljs-comment\">#端口</span><br><span class=\"hljs-attribute\">HTTP</span>端口是：<span class=\"hljs-number\">80</span>,<span class=\"hljs-number\">8080</span>,<span class=\"hljs-number\">8880</span>,<span class=\"hljs-number\">2052</span>,<span class=\"hljs-number\">2082</span>,<span class=\"hljs-number\">2086</span>,<span class=\"hljs-number\">2095</span><br><span class=\"hljs-attribute\">HTTPs</span>端口是：<span class=\"hljs-number\">443</span>,<span class=\"hljs-number\">2053</span>,<span class=\"hljs-number\">2083</span>,<span class=\"hljs-number\">2087</span>,<span class=\"hljs-number\">2096</span>,<span class=\"hljs-number\">8443</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"Gost中转脚本\"><a href=\"#Gost中转脚本\" class=\"headerlink\" title=\"Gost中转脚本\"></a>Gost中转脚本</h2><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\">wget --no-check-certificate -O gost.sh https:<span class=\"hljs-regexp\">//</span>raw.githubusercontent.com<span class=\"hljs-regexp\">/KANIKIG/</span>Multi-EasyGost<span class=\"hljs-regexp\">/master/g</span>ost.sh &amp;&amp; chmod +x gost.sh &amp;&amp; ./gost.sh<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"测速\"><a href=\"#测速\" class=\"headerlink\" title=\"测速\"></a>测速</h2><figure class=\"highlight livescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs livescript\">docker run <span class=\"hljs-string\">\\</span><br>\t--name speedtest <span class=\"hljs-string\">\\</span><br>\t--restart=always <span class=\"hljs-string\">\\</span><br>\t-p <span class=\"hljs-number\">84</span>:<span class=\"hljs-number\">80</span> <span class=\"hljs-string\">\\</span><br>\t-dit stilleshan/speedtest-x<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"ZPan\"><a href=\"#ZPan\" class=\"headerlink\" title=\"ZPan\"></a>ZPan</h2><figure class=\"highlight livescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs livescript\">docker run <span class=\"hljs-string\">\\</span><br>    --name zpan <span class=\"hljs-string\">\\</span><br>    --restart=always <span class=\"hljs-string\">\\</span><br>    -p <span class=\"hljs-number\">8222</span>:<span class=\"hljs-number\">8222</span> <span class=\"hljs-string\">\\</span><br>    -v /o/zpan:/etc/zpan <span class=\"hljs-string\">\\</span><br>    -<span class=\"hljs-literal\">it</span> saltbo/zpan<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"Zfile\"><a href=\"#Zfile\" class=\"headerlink\" title=\"Zfile\"></a>Zfile</h3><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\">docker run -d --name=zfile --restart=always \\<br>    -p <span class=\"hljs-number\">8099</span>:<span class=\"hljs-number\">8080</span> \\<br>    -v <span class=\"hljs-regexp\">/opt/</span>zfile<span class=\"hljs-regexp\">/db:/</span>root<span class=\"hljs-regexp\">/.zfile/</span>db \\<br>    -v <span class=\"hljs-regexp\">/opt/</span>zfile<span class=\"hljs-regexp\">/logs:/</span>root<span class=\"hljs-regexp\">/.zfile/</span>logs \\<br>    zhaojun1998/zfile<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"seafile\"><a href=\"#seafile\" class=\"headerlink\" title=\"seafile\"></a>seafile</h2><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\">wget -O docker-compose.yml https:<span class=\"hljs-regexp\">//</span>alist.huijia.cf<span class=\"hljs-regexp\">/d/</span>hui<span class=\"hljs-regexp\">/config/</span>linux/seafile-docker-compose.yml<br><br><span class=\"hljs-comment\"># 配置webdav/opt/seafile-data/seafile/conf/seafdav.conf</span><br>[WEBDAV]<br>enabled = true<br>port = <span class=\"hljs-number\">85</span><br>share_name = /<br>show_repo_id=true<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"cloudreve\"><a href=\"#cloudreve\" class=\"headerlink\" title=\"cloudreve\"></a>cloudreve</h2><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\">docker run -d \\<br>  --name cloudreve \\<br>  -e PUID=<span class=\"hljs-number\">0</span> \\<br>  -e PGID=<span class=\"hljs-number\">0</span> \\<br>  -e TZ=<span class=\"hljs-string\">&quot;Asia/Shanghai&quot;</span> \\<br>  -p <span class=\"hljs-number\">5212</span>:<span class=\"hljs-number\">5212</span> \\<br>  --restart=unless-stopped \\<br>  -v <span class=\"hljs-regexp\">/opt/</span>cloudreve<span class=\"hljs-regexp\">/uploads:/</span>cloudreve/uploads \\<br>  -v <span class=\"hljs-regexp\">/opt/</span>cloudreve<span class=\"hljs-regexp\">/config:/</span>cloudreve/config \\<br>  -v <span class=\"hljs-regexp\">/opt/</span>cloudreve<span class=\"hljs-regexp\">/db:/</span>cloudreve/db \\<br>  -v <span class=\"hljs-regexp\">/opt/</span>cloudreve<span class=\"hljs-regexp\">/avatar:/</span>cloudreve/avatar \\<br>  xavierniu/cloudreve<br><span class=\"hljs-comment\">#mysql配置</span><br>cat &lt;(curl -Ls https:<span class=\"hljs-regexp\">//</span>raw.githubusercontent.com<span class=\"hljs-regexp\">/baoqihui/</span>file<span class=\"hljs-regexp\">/master/</span>config<span class=\"hljs-regexp\">/cloudreve-db) &gt;&gt; /</span>opt<span class=\"hljs-regexp\">/cloudreve/</span>config/conf.ini<br><span class=\"hljs-comment\">#查看首次账号密码</span><br>docker logs -f cloudreve<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"Java项目\"><a href=\"#Java项目\" class=\"headerlink\" title=\"Java项目\"></a>Java项目</h2><ul>\n<li>Dockerfile</li>\n</ul>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dockerfile\"><span class=\"hljs-keyword\">FROM</span> openjdk:<span class=\"hljs-number\">11.0</span>.<span class=\"hljs-number\">4</span><br><span class=\"hljs-keyword\">ADD</span><span class=\"language-bash\"> cms-0.0.1-SNAPSHOT.jar  /cms.jar</span><br><span class=\"hljs-keyword\">EXPOSE</span> <span class=\"hljs-number\">8089</span><br><span class=\"hljs-keyword\">ENTRYPOINT</span><span class=\"language-bash\"> [<span class=\"hljs-string\">&quot;java&quot;</span>,<span class=\"hljs-string\">&quot;-Xms1024m&quot;</span>,<span class=\"hljs-string\">&quot;-Xmx1024m&quot;</span>,<span class=\"hljs-string\">&quot;-jar&quot;</span>,<span class=\"hljs-string\">&quot;/cms.jar&quot;</span>,<span class=\"hljs-string\">&quot;--spring.profiles.active=dev&quot;</span>,<span class=\"hljs-string\">&quot;-c&quot;</span>]</span><br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>构建：</li>\n</ul>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\">docker build -t cms:v1 .<br>docker run  -d --restart=always --name cms -p <span class=\"hljs-number\">8089</span>:<span class=\"hljs-number\">8089</span> -v <span class=\"hljs-regexp\">/out/</span>logs<span class=\"hljs-regexp\">/cms:/</span>out<span class=\"hljs-regexp\">/logs/</span>cms cms:v1<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>上传自己的镜像到dockerhub</li>\n</ul>\n<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs vim\">docker login<br>docker <span class=\"hljs-keyword\">tag</span> <span class=\"hljs-keyword\">cm</span><span class=\"hljs-variable\">s:v1</span> baoqihui/<span class=\"hljs-keyword\">cm</span><span class=\"hljs-variable\">s:v1</span><br>docker push baoqihui/<span class=\"hljs-keyword\">cm</span><span class=\"hljs-variable\">s:v1</span><br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>拉取自己的docker镜像</li>\n</ul>\n<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs vim\">docker pull baoqihui/<span class=\"hljs-keyword\">cm</span><span class=\"hljs-variable\">s:v1</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"文件下载\"><a href=\"#文件下载\" class=\"headerlink\" title=\"文件下载\"></a>文件下载</h2><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\">mkdir -p <span class=\"hljs-regexp\">/opt/</span>config&amp;wget -O <span class=\"hljs-regexp\">/opt/</span>config<span class=\"hljs-regexp\">/nginx.conf https:/</span><span class=\"hljs-regexp\">/alist.huijia.cf/</span>d<span class=\"hljs-regexp\">/hui/</span>config<span class=\"hljs-regexp\">/linux/</span>nginx.conf<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"rclone挂载\"><a href=\"#rclone挂载\" class=\"headerlink\" title=\"rclone挂载\"></a>rclone挂载</h2><figure class=\"highlight dsconfig\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dsconfig\"><span class=\"hljs-string\">rclone</span> <span class=\"hljs-string\">co</span><br><span class=\"hljs-comment\">#阿里</span><br><span class=\"hljs-string\">rclone</span> <span class=\"hljs-string\">mount</span> <span class=\"hljs-string\">ali</span>:/ <span class=\"hljs-string\">f</span>: <span class=\"hljs-built_in\">--cache-dir</span> <span class=\"hljs-string\">C:rclone </span><span class=\"hljs-built_in\">--vfs-cache-mode</span> <span class=\"hljs-string\">writes</span><br><span class=\"hljs-comment\">#</span><br><span class=\"hljs-string\">rclone</span> <span class=\"hljs-string\">mount</span> <span class=\"hljs-string\">cch1</span>:/ <span class=\"hljs-string\">f</span>: <span class=\"hljs-built_in\">--cache-dir</span> <span class=\"hljs-string\">C:rclone </span><span class=\"hljs-built_in\">--vfs-cache-mode</span> <span class=\"hljs-string\">writes</span><br><span class=\"hljs-comment\">#谷歌</span><br><span class=\"hljs-string\">rclone</span> <span class=\"hljs-string\">mount</span> <span class=\"hljs-string\">google</span>:/ <span class=\"hljs-string\">g</span>: -- <span class=\"hljs-string\">cache-dir</span> <span class=\"hljs-string\">C</span>:\\<span class=\"hljs-string\">rclone</span> <span class=\"hljs-built_in\">--vfs-cache-mode</span> <span class=\"hljs-string\">writes</span> &amp;<br></code></pre></td></tr></table></figure>\n\n<p>mklink &#x2F;d  “c:\\Users\\hui\\OneDrive - isahk\\BookMark” “D:\\BookMark”</p>\n<h2 id=\"Clickhouse\"><a href=\"#Clickhouse\" class=\"headerlink\" title=\"Clickhouse\"></a>Clickhouse</h2><figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs apache\"><span class=\"hljs-attribute\">docker</span> run --rm -d --name=ch-server --ulimit nofile=<span class=\"hljs-number\">262144</span>:<span class=\"hljs-number\">262144</span> -p <span class=\"hljs-number\">8123</span>:<span class=\"hljs-number\">8123</span> -p <span class=\"hljs-number\">9009</span>:<span class=\"hljs-number\">9009</span> -p <span class=\"hljs-number\">9090</span>:<span class=\"hljs-number\">9000</span> yandex/clickhouse-server:<span class=\"hljs-number\">22.1.2.2</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"shardingwhere\"><a href=\"#shardingwhere\" class=\"headerlink\" title=\"shardingwhere\"></a>shardingwhere</h2><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\">docker run -d --name=sharding -v <span class=\"hljs-regexp\">/Users/</span>huibaoqi<span class=\"hljs-regexp\">/opt/</span>sharding<span class=\"hljs-regexp\">/conf:/</span>opt<span class=\"hljs-regexp\">/shardingsphere-proxy/</span>conf -v <span class=\"hljs-regexp\">/Users/</span>huibaoqi<span class=\"hljs-regexp\">/opt/</span>sharding<span class=\"hljs-regexp\">/ext-lib:/</span>opt<span class=\"hljs-regexp\">/shardingsphere-proxy/</span>ext-lib -e PORT=<span class=\"hljs-number\">3308</span> -p13308:<span class=\"hljs-number\">3308</span> apache/shardingsphere-proxy:latest<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"可道云\"><a href=\"#可道云\" class=\"headerlink\" title=\"可道云\"></a>可道云</h2><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\">docker run -d -p <span class=\"hljs-number\">80</span>:<span class=\"hljs-number\">80</span> -v <span class=\"hljs-regexp\">/data:/</span>var<span class=\"hljs-regexp\">/www/</span>html kodcloud/kodbox<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"hexo\"><a href=\"#hexo\" class=\"headerlink\" title=\"hexo\"></a>hexo</h2><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\">docker run -d --name=hexo \\<br>-e HEXO_SERVER_PORT=<span class=\"hljs-number\">4000</span> \\<br>-e GIT_USER=<span class=\"hljs-string\">&quot;baoqi.hui@qq.com&quot;</span> \\<br>-e GIT_EMAIL=<span class=\"hljs-string\">&quot;HBQ521521cf*&quot;</span> \\<br>-v <span class=\"hljs-regexp\">/opt/</span>blog:<span class=\"hljs-regexp\">/app/</span>blog \\<br>-p <span class=\"hljs-number\">4000</span>:<span class=\"hljs-number\">4000</span> \\<br>baoqihui/hexo<br><br>rclone sync ali:BookMark <span class=\"hljs-regexp\">/opt/</span>blog<span class=\"hljs-regexp\">/source/</span>_posts<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/50536515.png\" alt=\"img\"></p>\n"},{"_content":"﻿﻿﻿﻿# 服务器部署---《fastDFS篇》\n---\n汇总篇：\n[服务器配置篇汇总（linux）+（jdk）+（tomcat）+（mysql）+（nginx）+（redis）+（fastDFS）+（mycat）](https://blog.huijia21.com/archives/fu-wu-qi-pei-zhi-pian-hui-zong-linuxjdktomcatmysqlnginxredisfastdfsmycatgitmaven)\n接上篇：\n[服务器部署---《redis篇》](https://blog.huijia.cf/2022/09/08/BookMark/%E8%BF%90%E7%BB%B4/%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2---%E3%80%8Aredis%E7%AF%87%E3%80%8B%20--%E8%8F%9C%E9%B8%9F%E5%B0%8F%E5%9B%9E/)\n\n---\n\n## 六、fastDFS（安全组开启22122、23000端口）\n1. 创建：`mkdir /opt/fastDFS`\n2. 进入：`cd /opt/fastDFS`\n3. 下载libfastcommon：`wget http://file.huijia.cf/file/libfastcommon-1.0.7.tar.gz`\n4. 解压：`tar -zxvf V1.0.7.tar.gz`\n5. 编译安装\n```javascript?linenums\ncd libfastcommon-1.0.7\n./make.sh\n./make.sh install\n```\n6. 创建软链接\n```javascript?linenums\nln -s /usr/lib64/libfastcommon.so /usr/local/lib/libfastcommon.so\nln -s /usr/lib64/libfastcommon.so /usr/lib/libfastcommon.so\nln -s /usr/lib64/libfdfsclient.so /usr/local/lib/libfdfsclient.so\nln -s /usr/lib64/libfdfsclient.so /usr/lib/libfdfsclient.so \n```\n7. 下载fastDFS: `wget https://github.com/happyfish100/fastdfs/archive/V5.05.tar.gz`\n8. 解压：`tar -zxvf V5.05.tar.gz`\n10. 编译安装\n```javascript?linenums\ncd fastdfs-5.05\n./make.sh\n./make.sh install\n```\n\n11. 建立软连接\n```javascript?linenums\nln -s /usr/bin/fdfs_trackerd   /usr/local/bin\nln -s /usr/bin/fdfs_storaged   /usr/local/bin\nln -s /usr/bin/stop.sh         /usr/local/bin\nln -s /usr/bin/restart.sh      /usr/local/bin\n```\n12. 配置FastDFS跟踪器\n```javascript?linenums\ncd /etc/fdfs\ncp tracker.conf.sample tracker.conf\nvi tracker.conf\n//查找修改如下内容\nbase_path=/home/idse/fastdfs/tracker\nhttp.server_port=80\n//创建上方修改后的目录\nmkdir -p /home/idse/fastdfs/tracker\n```\n13. 启动tracker：\n```javascript?linenums\n/etc/init.d/fdfs_trackerd start\n//查看启动成功\nnetstat -unltp|grep fdfs\n//设置开机自启\nchkconfig fdfs_trackerd on\n```\n14. 配置 FastDFS 存储\n```javascript?linenums\ncd /etc/fdfs\ncp storage.conf.sample storage.conf\nvi storage.conf\n//查找修改如下内容\nbase_path=/home/idse/fastdfs/storage\nstore_path0=/home/idse/fastdfs/storage/file\ntracker_server=www.idse.top:22122\nhttp.server_port=80\n//创建上方修改后的目录\nmkdir -p /home/idse/fastdfs/storage\nmkdir -p /home/idse/fastdfs/storage/file\n```\n15. 启动Storage\n```javascript?linenums\n/etc/init.d/fdfs_storaged start\n//查看 Storage 是否成功启动\nnetstat -unltp|grep fdfs\n//查看Storage和Tracker是否在通信：\n/usr/bin/fdfs_monitor /etc/fdfs/storage.conf\n//设置 Storage 开机启动\nchkconfig fdfs_storaged on\n```\n16. 修改 Tracker 服务器中的客户端配置文件 \n```javascript?linenums\ncd /etc/fdfs\ncp client.conf.sample client.conf\nvi client.conf\n//查找修改如下内容\nbase_path=/home/idse/fastdfs/client\ntracker_server=www.idse.top:22122\n//创建上方修改后的文件夹\nmkdir -p /home/idse/fastdfs/client\n```\n17. 上传测试\n```javascript?linenums\n/usr/bin/fdfs_upload_file /etc/fdfs/client.conf /ti.jpg\n//返回所传图片地址\ngroup1/M00/00/00/rBDsh12jLdKAZCXFAAGTJAL2pIQ680.jpg\n//查看该图片\ncd /home/idse/fastdfs/storage/file/data/00/00\nls\n```\n![image-20220430205735349](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430205735349.png)\n![image-20220430205753760](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430205753760.png)\n\n18. nginx中配置访问\n```javascript?linenums\nvi /usr/local/nginx/conf/nginx.conf\n//插入如下代码到nginx.conf\n//fastDFS图片上传配置\nserver {\n        listen       80;\n        server_name  120.27.244.176;\n\n        location / {\n                root   html;\n                index  index.html index.htm;\n        }\n        location /group1/M00{\n                alias /home/idse/fastdfs/storage/file/data;\n        }\n}\n//重启nginx\ncd /usr/local/nginx/sbin/\n./nginx -s reload\n```\n19. 浏览器访问图片 `http://120.27.244.176/group1/M00/00/00/rBDsh12jLdKAZCXFAAGTJAL2pIQ680.jpg`\n![image-20220430205851120](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430205851120.png)\n---\n\n接下篇：\n[服务器部署---《mycat篇》](https://blog.huijia.cf/2022/09/08/BookMark/%E8%BF%90%E7%BB%B4/%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2---%E3%80%8Amycat%E7%AF%87%E3%80%8B%20--%E8%8F%9C%E9%B8%9F%E5%B0%8F%E5%9B%9E/)\n\n附加篇：\n[java中使用fastDFS上传图片(前端ajax+后端ssm)](https://blog.huijia.cf/2022/09/05/BookMark/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/java%E4%B8%AD%E4%BD%BF%E7%94%A8fastDFS%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87(%E5%89%8D%E7%AB%AFajax+%E5%90%8E%E7%AB%AFssm)%20--%E8%8F%9C%E9%B8%9F%E5%B0%8F%E5%9B%9E/)\n\n---\n","source":"_posts/BookMark/运维/服务器部署---《fastDFS篇》 --菜鸟小回.md","raw":"﻿﻿﻿﻿# 服务器部署---《fastDFS篇》\n---\n汇总篇：\n[服务器配置篇汇总（linux）+（jdk）+（tomcat）+（mysql）+（nginx）+（redis）+（fastDFS）+（mycat）](https://blog.huijia21.com/archives/fu-wu-qi-pei-zhi-pian-hui-zong-linuxjdktomcatmysqlnginxredisfastdfsmycatgitmaven)\n接上篇：\n[服务器部署---《redis篇》](https://blog.huijia.cf/2022/09/08/BookMark/%E8%BF%90%E7%BB%B4/%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2---%E3%80%8Aredis%E7%AF%87%E3%80%8B%20--%E8%8F%9C%E9%B8%9F%E5%B0%8F%E5%9B%9E/)\n\n---\n\n## 六、fastDFS（安全组开启22122、23000端口）\n1. 创建：`mkdir /opt/fastDFS`\n2. 进入：`cd /opt/fastDFS`\n3. 下载libfastcommon：`wget http://file.huijia.cf/file/libfastcommon-1.0.7.tar.gz`\n4. 解压：`tar -zxvf V1.0.7.tar.gz`\n5. 编译安装\n```javascript?linenums\ncd libfastcommon-1.0.7\n./make.sh\n./make.sh install\n```\n6. 创建软链接\n```javascript?linenums\nln -s /usr/lib64/libfastcommon.so /usr/local/lib/libfastcommon.so\nln -s /usr/lib64/libfastcommon.so /usr/lib/libfastcommon.so\nln -s /usr/lib64/libfdfsclient.so /usr/local/lib/libfdfsclient.so\nln -s /usr/lib64/libfdfsclient.so /usr/lib/libfdfsclient.so \n```\n7. 下载fastDFS: `wget https://github.com/happyfish100/fastdfs/archive/V5.05.tar.gz`\n8. 解压：`tar -zxvf V5.05.tar.gz`\n10. 编译安装\n```javascript?linenums\ncd fastdfs-5.05\n./make.sh\n./make.sh install\n```\n\n11. 建立软连接\n```javascript?linenums\nln -s /usr/bin/fdfs_trackerd   /usr/local/bin\nln -s /usr/bin/fdfs_storaged   /usr/local/bin\nln -s /usr/bin/stop.sh         /usr/local/bin\nln -s /usr/bin/restart.sh      /usr/local/bin\n```\n12. 配置FastDFS跟踪器\n```javascript?linenums\ncd /etc/fdfs\ncp tracker.conf.sample tracker.conf\nvi tracker.conf\n//查找修改如下内容\nbase_path=/home/idse/fastdfs/tracker\nhttp.server_port=80\n//创建上方修改后的目录\nmkdir -p /home/idse/fastdfs/tracker\n```\n13. 启动tracker：\n```javascript?linenums\n/etc/init.d/fdfs_trackerd start\n//查看启动成功\nnetstat -unltp|grep fdfs\n//设置开机自启\nchkconfig fdfs_trackerd on\n```\n14. 配置 FastDFS 存储\n```javascript?linenums\ncd /etc/fdfs\ncp storage.conf.sample storage.conf\nvi storage.conf\n//查找修改如下内容\nbase_path=/home/idse/fastdfs/storage\nstore_path0=/home/idse/fastdfs/storage/file\ntracker_server=www.idse.top:22122\nhttp.server_port=80\n//创建上方修改后的目录\nmkdir -p /home/idse/fastdfs/storage\nmkdir -p /home/idse/fastdfs/storage/file\n```\n15. 启动Storage\n```javascript?linenums\n/etc/init.d/fdfs_storaged start\n//查看 Storage 是否成功启动\nnetstat -unltp|grep fdfs\n//查看Storage和Tracker是否在通信：\n/usr/bin/fdfs_monitor /etc/fdfs/storage.conf\n//设置 Storage 开机启动\nchkconfig fdfs_storaged on\n```\n16. 修改 Tracker 服务器中的客户端配置文件 \n```javascript?linenums\ncd /etc/fdfs\ncp client.conf.sample client.conf\nvi client.conf\n//查找修改如下内容\nbase_path=/home/idse/fastdfs/client\ntracker_server=www.idse.top:22122\n//创建上方修改后的文件夹\nmkdir -p /home/idse/fastdfs/client\n```\n17. 上传测试\n```javascript?linenums\n/usr/bin/fdfs_upload_file /etc/fdfs/client.conf /ti.jpg\n//返回所传图片地址\ngroup1/M00/00/00/rBDsh12jLdKAZCXFAAGTJAL2pIQ680.jpg\n//查看该图片\ncd /home/idse/fastdfs/storage/file/data/00/00\nls\n```\n![image-20220430205735349](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430205735349.png)\n![image-20220430205753760](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430205753760.png)\n\n18. nginx中配置访问\n```javascript?linenums\nvi /usr/local/nginx/conf/nginx.conf\n//插入如下代码到nginx.conf\n//fastDFS图片上传配置\nserver {\n        listen       80;\n        server_name  120.27.244.176;\n\n        location / {\n                root   html;\n                index  index.html index.htm;\n        }\n        location /group1/M00{\n                alias /home/idse/fastdfs/storage/file/data;\n        }\n}\n//重启nginx\ncd /usr/local/nginx/sbin/\n./nginx -s reload\n```\n19. 浏览器访问图片 `http://120.27.244.176/group1/M00/00/00/rBDsh12jLdKAZCXFAAGTJAL2pIQ680.jpg`\n![image-20220430205851120](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430205851120.png)\n---\n\n接下篇：\n[服务器部署---《mycat篇》](https://blog.huijia.cf/2022/09/08/BookMark/%E8%BF%90%E7%BB%B4/%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2---%E3%80%8Amycat%E7%AF%87%E3%80%8B%20--%E8%8F%9C%E9%B8%9F%E5%B0%8F%E5%9B%9E/)\n\n附加篇：\n[java中使用fastDFS上传图片(前端ajax+后端ssm)](https://blog.huijia.cf/2022/09/05/BookMark/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/java%E4%B8%AD%E4%BD%BF%E7%94%A8fastDFS%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87(%E5%89%8D%E7%AB%AFajax+%E5%90%8E%E7%AB%AFssm)%20--%E8%8F%9C%E9%B8%9F%E5%B0%8F%E5%9B%9E/)\n\n---\n","slug":"BookMark/运维/服务器部署---《fastDFS篇》 --菜鸟小回","published":1,"date":"2022-07-18T09:51:33.000Z","updated":"2022-09-01T10:02:40.517Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cl7ptszou0037aba57qhvclz3","content":"<h1><span id=\"服务器部署fastdfs篇\">服务器部署—《fastDFS篇》</span></h1><hr>\n<p>汇总篇：<br><a href=\"https://blog.huijia21.com/archives/fu-wu-qi-pei-zhi-pian-hui-zong-linuxjdktomcatmysqlnginxredisfastdfsmycatgitmaven\">服务器配置篇汇总（linux）+（jdk）+（tomcat）+（mysql）+（nginx）+（redis）+（fastDFS）+（mycat）</a><br>接上篇：<br><a href=\"https://blog.huijia.cf/2022/09/08/BookMark/%E8%BF%90%E7%BB%B4/%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2---%E3%80%8Aredis%E7%AF%87%E3%80%8B%20--%E8%8F%9C%E9%B8%9F%E5%B0%8F%E5%9B%9E/\">服务器部署—《redis篇》</a></p>\n<hr>\n<h2><span id=\"六-fastdfs安全组开启22122-23000端口\">六、fastDFS（安全组开启22122、23000端口）</span></h2><ol>\n<li><p>创建：<code>mkdir /opt/fastDFS</code></p>\n</li>\n<li><p>进入：<code>cd /opt/fastDFS</code></p>\n</li>\n<li><p>下载libfastcommon：<code>wget http://file.huijia.cf/file/libfastcommon-1.0.7.tar.gz</code></p>\n</li>\n<li><p>解压：<code>tar -zxvf V1.0.7.tar.gz</code></p>\n</li>\n<li><p>编译安装</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">cd libfastcommon-1.0.7<br>./make.sh<br>./make.sh install<br></code></pre></td></tr></table></figure></li>\n<li><p>创建软链接</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">ln -s /usr/lib64/libfastcommon.so /usr/local/lib/libfastcommon.so<br>ln -s /usr/lib64/libfastcommon.so /usr/lib/libfastcommon.so<br>ln -s /usr/lib64/libfdfsclient.so /usr/local/lib/libfdfsclient.so<br>ln -s /usr/lib64/libfdfsclient.so /usr/lib/libfdfsclient.so <br></code></pre></td></tr></table></figure></li>\n<li><p>下载fastDFS: <code>wget https://github.com/happyfish100/fastdfs/archive/V5.05.tar.gz</code></p>\n</li>\n<li><p>解压：<code>tar -zxvf V5.05.tar.gz</code></p>\n</li>\n<li><p>编译安装</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">cd fastdfs-5.05<br>./make.sh<br>./make.sh install<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>建立软连接</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">ln -s /usr/bin/fdfs_trackerd   /usr/local/bin<br>ln -s /usr/bin/fdfs_storaged   /usr/local/bin<br>ln -s /usr/bin/stop.sh         /usr/local/bin<br>ln -s /usr/bin/restart.sh      /usr/local/bin<br></code></pre></td></tr></table></figure></li>\n<li><p>配置FastDFS跟踪器</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">cd /etc/fdfs<br>cp tracker.conf.sample tracker.conf<br>vi tracker.conf<br>//查找修改如下内容<br>base_path=/home/idse/fastdfs/tracker<br>http.server_port=80<br>//创建上方修改后的目录<br>mkdir -p /home/idse/fastdfs/tracker<br></code></pre></td></tr></table></figure></li>\n<li><p>启动tracker：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">/etc/init.d/fdfs_trackerd start<br>//查看启动成功<br>netstat -unltp|grep fdfs<br>//设置开机自启<br>chkconfig fdfs_trackerd on<br></code></pre></td></tr></table></figure></li>\n<li><p>配置 FastDFS 存储</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">cd /etc/fdfs<br>cp storage.conf.sample storage.conf<br>vi storage.conf<br>//查找修改如下内容<br>base_path=/home/idse/fastdfs/storage<br>store_path0=/home/idse/fastdfs/storage/file<br>tracker_server=www.idse.top:22122<br>http.server_port=80<br>//创建上方修改后的目录<br>mkdir -p /home/idse/fastdfs/storage<br>mkdir -p /home/idse/fastdfs/storage/file<br></code></pre></td></tr></table></figure></li>\n<li><p>启动Storage</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">/etc/init.d/fdfs_storaged start<br>//查看 Storage 是否成功启动<br>netstat -unltp|grep fdfs<br>//查看Storage和Tracker是否在通信：<br>/usr/bin/fdfs_monitor /etc/fdfs/storage.conf<br>//设置 Storage 开机启动<br>chkconfig fdfs_storaged on<br></code></pre></td></tr></table></figure></li>\n<li><p>修改 Tracker 服务器中的客户端配置文件 </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">cd /etc/fdfs<br>cp client.conf.sample client.conf<br>vi client.conf<br>//查找修改如下内容<br>base_path=/home/idse/fastdfs/client<br>tracker_server=www.idse.top:22122<br>//创建上方修改后的文件夹<br>mkdir -p /home/idse/fastdfs/client<br></code></pre></td></tr></table></figure></li>\n<li><p>上传测试</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">/usr/bin/fdfs_upload_file /etc/fdfs/client.conf /ti.jpg<br>//返回所传图片地址<br>group1/M00/00/00/rBDsh12jLdKAZCXFAAGTJAL2pIQ680.jpg<br>//查看该图片<br>cd /home/idse/fastdfs/storage/file/data/00/00<br>ls<br></code></pre></td></tr></table></figure>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430205735349.png\" alt=\"image-20220430205735349\"><br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430205753760.png\" alt=\"image-20220430205753760\"></p>\n</li>\n<li><p>nginx中配置访问</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">vi /usr/local/nginx/conf/nginx.conf<br>//插入如下代码到nginx.conf<br>//fastDFS图片上传配置<br>server &#123;<br>        listen       80;<br>        server_name  120.27.244.176;<br><br>        location / &#123;<br>                root   html;<br>                index  index.html index.htm;<br>        &#125;<br>        location /group1/M00&#123;<br>                alias /home/idse/fastdfs/storage/file/data;<br>        &#125;<br>&#125;<br>//重启nginx<br>cd /usr/local/nginx/sbin/<br>./nginx -s reload<br></code></pre></td></tr></table></figure></li>\n<li><p>浏览器访问图片 <code>http://120.27.244.176/group1/M00/00/00/rBDsh12jLdKAZCXFAAGTJAL2pIQ680.jpg</code><br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430205851120.png\" alt=\"image-20220430205851120\"></p>\n</li>\n</ol>\n<hr>\n<p>接下篇：<br><a href=\"https://blog.huijia.cf/2022/09/08/BookMark/%E8%BF%90%E7%BB%B4/%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2---%E3%80%8Amycat%E7%AF%87%E3%80%8B%20--%E8%8F%9C%E9%B8%9F%E5%B0%8F%E5%9B%9E/\">服务器部署—《mycat篇》</a></p>\n<p>附加篇：<br><a href=\"https://blog.huijia.cf/2022/09/05/BookMark/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/java%E4%B8%AD%E4%BD%BF%E7%94%A8fastDFS%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87(%E5%89%8D%E7%AB%AFajax+%E5%90%8E%E7%AB%AFssm)%20--%E8%8F%9C%E9%B8%9F%E5%B0%8F%E5%9B%9E/\">java中使用fastDFS上传图片(前端ajax+后端ssm)</a></p>\n<hr>\n","site":{"data":{}},"wordcount":2519,"excerpt":"","more":"<h1 id=\"服务器部署—《fastDFS篇》\"><a href=\"#服务器部署—《fastDFS篇》\" class=\"headerlink\" title=\"服务器部署—《fastDFS篇》\"></a>服务器部署—《fastDFS篇》</h1><hr>\n<p>汇总篇：<br><a href=\"https://blog.huijia21.com/archives/fu-wu-qi-pei-zhi-pian-hui-zong-linuxjdktomcatmysqlnginxredisfastdfsmycatgitmaven\">服务器配置篇汇总（linux）+（jdk）+（tomcat）+（mysql）+（nginx）+（redis）+（fastDFS）+（mycat）</a><br>接上篇：<br><a href=\"https://blog.huijia.cf/2022/09/08/BookMark/%E8%BF%90%E7%BB%B4/%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2---%E3%80%8Aredis%E7%AF%87%E3%80%8B%20--%E8%8F%9C%E9%B8%9F%E5%B0%8F%E5%9B%9E/\">服务器部署—《redis篇》</a></p>\n<hr>\n<h2 id=\"六、fastDFS（安全组开启22122、23000端口）\"><a href=\"#六、fastDFS（安全组开启22122、23000端口）\" class=\"headerlink\" title=\"六、fastDFS（安全组开启22122、23000端口）\"></a>六、fastDFS（安全组开启22122、23000端口）</h2><ol>\n<li><p>创建：<code>mkdir /opt/fastDFS</code></p>\n</li>\n<li><p>进入：<code>cd /opt/fastDFS</code></p>\n</li>\n<li><p>下载libfastcommon：<code>wget http://file.huijia.cf/file/libfastcommon-1.0.7.tar.gz</code></p>\n</li>\n<li><p>解压：<code>tar -zxvf V1.0.7.tar.gz</code></p>\n</li>\n<li><p>编译安装</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">cd libfastcommon-1.0.7<br>./make.sh<br>./make.sh install<br></code></pre></td></tr></table></figure></li>\n<li><p>创建软链接</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">ln -s /usr/lib64/libfastcommon.so /usr/local/lib/libfastcommon.so<br>ln -s /usr/lib64/libfastcommon.so /usr/lib/libfastcommon.so<br>ln -s /usr/lib64/libfdfsclient.so /usr/local/lib/libfdfsclient.so<br>ln -s /usr/lib64/libfdfsclient.so /usr/lib/libfdfsclient.so <br></code></pre></td></tr></table></figure></li>\n<li><p>下载fastDFS: <code>wget https://github.com/happyfish100/fastdfs/archive/V5.05.tar.gz</code></p>\n</li>\n<li><p>解压：<code>tar -zxvf V5.05.tar.gz</code></p>\n</li>\n<li><p>编译安装</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">cd fastdfs-5.05<br>./make.sh<br>./make.sh install<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>建立软连接</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">ln -s /usr/bin/fdfs_trackerd   /usr/local/bin<br>ln -s /usr/bin/fdfs_storaged   /usr/local/bin<br>ln -s /usr/bin/stop.sh         /usr/local/bin<br>ln -s /usr/bin/restart.sh      /usr/local/bin<br></code></pre></td></tr></table></figure></li>\n<li><p>配置FastDFS跟踪器</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">cd /etc/fdfs<br>cp tracker.conf.sample tracker.conf<br>vi tracker.conf<br>//查找修改如下内容<br>base_path=/home/idse/fastdfs/tracker<br>http.server_port=80<br>//创建上方修改后的目录<br>mkdir -p /home/idse/fastdfs/tracker<br></code></pre></td></tr></table></figure></li>\n<li><p>启动tracker：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">/etc/init.d/fdfs_trackerd start<br>//查看启动成功<br>netstat -unltp|grep fdfs<br>//设置开机自启<br>chkconfig fdfs_trackerd on<br></code></pre></td></tr></table></figure></li>\n<li><p>配置 FastDFS 存储</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">cd /etc/fdfs<br>cp storage.conf.sample storage.conf<br>vi storage.conf<br>//查找修改如下内容<br>base_path=/home/idse/fastdfs/storage<br>store_path0=/home/idse/fastdfs/storage/file<br>tracker_server=www.idse.top:22122<br>http.server_port=80<br>//创建上方修改后的目录<br>mkdir -p /home/idse/fastdfs/storage<br>mkdir -p /home/idse/fastdfs/storage/file<br></code></pre></td></tr></table></figure></li>\n<li><p>启动Storage</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">/etc/init.d/fdfs_storaged start<br>//查看 Storage 是否成功启动<br>netstat -unltp|grep fdfs<br>//查看Storage和Tracker是否在通信：<br>/usr/bin/fdfs_monitor /etc/fdfs/storage.conf<br>//设置 Storage 开机启动<br>chkconfig fdfs_storaged on<br></code></pre></td></tr></table></figure></li>\n<li><p>修改 Tracker 服务器中的客户端配置文件 </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">cd /etc/fdfs<br>cp client.conf.sample client.conf<br>vi client.conf<br>//查找修改如下内容<br>base_path=/home/idse/fastdfs/client<br>tracker_server=www.idse.top:22122<br>//创建上方修改后的文件夹<br>mkdir -p /home/idse/fastdfs/client<br></code></pre></td></tr></table></figure></li>\n<li><p>上传测试</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">/usr/bin/fdfs_upload_file /etc/fdfs/client.conf /ti.jpg<br>//返回所传图片地址<br>group1/M00/00/00/rBDsh12jLdKAZCXFAAGTJAL2pIQ680.jpg<br>//查看该图片<br>cd /home/idse/fastdfs/storage/file/data/00/00<br>ls<br></code></pre></td></tr></table></figure>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430205735349.png\" alt=\"image-20220430205735349\"><br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430205753760.png\" alt=\"image-20220430205753760\"></p>\n</li>\n<li><p>nginx中配置访问</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">vi /usr/local/nginx/conf/nginx.conf<br>//插入如下代码到nginx.conf<br>//fastDFS图片上传配置<br>server &#123;<br>        listen       80;<br>        server_name  120.27.244.176;<br><br>        location / &#123;<br>                root   html;<br>                index  index.html index.htm;<br>        &#125;<br>        location /group1/M00&#123;<br>                alias /home/idse/fastdfs/storage/file/data;<br>        &#125;<br>&#125;<br>//重启nginx<br>cd /usr/local/nginx/sbin/<br>./nginx -s reload<br></code></pre></td></tr></table></figure></li>\n<li><p>浏览器访问图片 <code>http://120.27.244.176/group1/M00/00/00/rBDsh12jLdKAZCXFAAGTJAL2pIQ680.jpg</code><br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430205851120.png\" alt=\"image-20220430205851120\"></p>\n</li>\n</ol>\n<hr>\n<p>接下篇：<br><a href=\"https://blog.huijia.cf/2022/09/08/BookMark/%E8%BF%90%E7%BB%B4/%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2---%E3%80%8Amycat%E7%AF%87%E3%80%8B%20--%E8%8F%9C%E9%B8%9F%E5%B0%8F%E5%9B%9E/\">服务器部署—《mycat篇》</a></p>\n<p>附加篇：<br><a href=\"https://blog.huijia.cf/2022/09/05/BookMark/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/java%E4%B8%AD%E4%BD%BF%E7%94%A8fastDFS%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87(%E5%89%8D%E7%AB%AFajax+%E5%90%8E%E7%AB%AFssm)%20--%E8%8F%9C%E9%B8%9F%E5%B0%8F%E5%9B%9E/\">java中使用fastDFS上传图片(前端ajax+后端ssm)</a></p>\n<hr>\n"},{"_content":"﻿﻿﻿﻿# 服务器部署---《jdk篇》\n---\n汇总篇：\n[服务器配置篇汇总（linux）+（jdk）+（tomcat）+（mysql）+（nginx）+（redis）+（fastDFS）+（mycat）](https://blog.huijia21.com/archives/fu-wu-qi-pei-zhi-pian-hui-zong-linuxjdktomcatmysqlnginxredisfastdfsmycatgitmaven)\n\n---\n## 一、jdk\n1. 创建：`mkdir -p /opt/java`\n2. 进入：`cd /opt/java`\n3. 下载jdk包：`wget http://file.huijia.cf/file/jdk-8u141-linux-x64.tar.gz`\n4. 解压：`tar -zxvf jdk-8u141-linux-x64.tar.gz`\n5. 编辑：`vi /etc/profile`\n6. 配置环境变量：\n```javascript?linenums\n//进编辑模式\ni \n//文档最后添加：\nexport JAVA_HOME=/opt/java/jdk1.8.0_141\nexport PATH=$PATH:$JAVA_HOME/bin\n//保存退出\nESC\n:wq\n//更新配置\nsource /etc/profile\n```\n7. 验证：输出长内容\n```javascript?linenums\njava\njavac\njava -version\n```\n![image-20220430210253258](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430210253258.png)\n\n---\n接下篇：\n[服务器部署---《tomcat篇》 ](https://blog.huijia.cf/2022/09/08/BookMark/%E8%BF%90%E7%BB%B4/%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2---%E3%80%8Atomcat%E7%AF%87%E3%80%8B%20--%E8%8F%9C%E9%B8%9F%E5%B0%8F%E5%9B%9E/\n\n---\n","source":"_posts/BookMark/运维/服务器部署---《jdk篇》 --菜鸟小回.md","raw":"﻿﻿﻿﻿# 服务器部署---《jdk篇》\n---\n汇总篇：\n[服务器配置篇汇总（linux）+（jdk）+（tomcat）+（mysql）+（nginx）+（redis）+（fastDFS）+（mycat）](https://blog.huijia21.com/archives/fu-wu-qi-pei-zhi-pian-hui-zong-linuxjdktomcatmysqlnginxredisfastdfsmycatgitmaven)\n\n---\n## 一、jdk\n1. 创建：`mkdir -p /opt/java`\n2. 进入：`cd /opt/java`\n3. 下载jdk包：`wget http://file.huijia.cf/file/jdk-8u141-linux-x64.tar.gz`\n4. 解压：`tar -zxvf jdk-8u141-linux-x64.tar.gz`\n5. 编辑：`vi /etc/profile`\n6. 配置环境变量：\n```javascript?linenums\n//进编辑模式\ni \n//文档最后添加：\nexport JAVA_HOME=/opt/java/jdk1.8.0_141\nexport PATH=$PATH:$JAVA_HOME/bin\n//保存退出\nESC\n:wq\n//更新配置\nsource /etc/profile\n```\n7. 验证：输出长内容\n```javascript?linenums\njava\njavac\njava -version\n```\n![image-20220430210253258](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430210253258.png)\n\n---\n接下篇：\n[服务器部署---《tomcat篇》 ](https://blog.huijia.cf/2022/09/08/BookMark/%E8%BF%90%E7%BB%B4/%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2---%E3%80%8Atomcat%E7%AF%87%E3%80%8B%20--%E8%8F%9C%E9%B8%9F%E5%B0%8F%E5%9B%9E/\n\n---\n","slug":"BookMark/运维/服务器部署---《jdk篇》 --菜鸟小回","published":1,"date":"2022-07-25T05:51:43.000Z","updated":"2022-09-01T10:02:40.563Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cl7ptszou0038aba5a19s8dvq","content":"<h1><span id=\"服务器部署jdk篇\">服务器部署—《jdk篇》</span></h1><hr>\n<p>汇总篇：<br><a href=\"https://blog.huijia21.com/archives/fu-wu-qi-pei-zhi-pian-hui-zong-linuxjdktomcatmysqlnginxredisfastdfsmycatgitmaven\">服务器配置篇汇总（linux）+（jdk）+（tomcat）+（mysql）+（nginx）+（redis）+（fastDFS）+（mycat）</a></p>\n<hr>\n<h2><span id=\"一-jdk\">一、jdk</span></h2><ol>\n<li>创建：<code>mkdir -p /opt/java</code></li>\n<li>进入：<code>cd /opt/java</code></li>\n<li>下载jdk包：<code>wget http://file.huijia.cf/file/jdk-8u141-linux-x64.tar.gz</code></li>\n<li>解压：<code>tar -zxvf jdk-8u141-linux-x64.tar.gz</code></li>\n<li>编辑：<code>vi /etc/profile</code></li>\n<li>配置环境变量：<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">//进编辑模式<br>i <br>//文档最后添加：<br>export JAVA_HOME=/opt/java/jdk1.8.0_141<br>export PATH=$PATH:$JAVA_HOME/bin<br>//保存退出<br>ESC<br>:wq<br>//更新配置<br>source /etc/profile<br></code></pre></td></tr></table></figure></li>\n<li>验证：输出长内容<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">java<br>javac<br>java -version<br></code></pre></td></tr></table></figure>\n<img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430210253258.png\" alt=\"image-20220430210253258\"></li>\n</ol>\n<hr>\n<p>接下篇：<br><a href=\"https://blog.huijia21.com/archives/fu-wu-qi-bu-shu-tomcat-pian-\">服务器部署—《tomcat篇》 </a></p>\n<hr>\n","site":{"data":{}},"wordcount":435,"excerpt":"","more":"<h1 id=\"服务器部署—《jdk篇》\"><a href=\"#服务器部署—《jdk篇》\" class=\"headerlink\" title=\"服务器部署—《jdk篇》\"></a>服务器部署—《jdk篇》</h1><hr>\n<p>汇总篇：<br><a href=\"https://blog.huijia21.com/archives/fu-wu-qi-pei-zhi-pian-hui-zong-linuxjdktomcatmysqlnginxredisfastdfsmycatgitmaven\">服务器配置篇汇总（linux）+（jdk）+（tomcat）+（mysql）+（nginx）+（redis）+（fastDFS）+（mycat）</a></p>\n<hr>\n<h2 id=\"一、jdk\"><a href=\"#一、jdk\" class=\"headerlink\" title=\"一、jdk\"></a>一、jdk</h2><ol>\n<li>创建：<code>mkdir -p /opt/java</code></li>\n<li>进入：<code>cd /opt/java</code></li>\n<li>下载jdk包：<code>wget http://file.huijia.cf/file/jdk-8u141-linux-x64.tar.gz</code></li>\n<li>解压：<code>tar -zxvf jdk-8u141-linux-x64.tar.gz</code></li>\n<li>编辑：<code>vi /etc/profile</code></li>\n<li>配置环境变量：<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">//进编辑模式<br>i <br>//文档最后添加：<br>export JAVA_HOME=/opt/java/jdk1.8.0_141<br>export PATH=$PATH:$JAVA_HOME/bin<br>//保存退出<br>ESC<br>:wq<br>//更新配置<br>source /etc/profile<br></code></pre></td></tr></table></figure></li>\n<li>验证：输出长内容<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">java<br>javac<br>java -version<br></code></pre></td></tr></table></figure>\n<img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430210253258.png\" alt=\"image-20220430210253258\"></li>\n</ol>\n<hr>\n<p>接下篇：<br><a href=\"https://blog.huijia21.com/archives/fu-wu-qi-bu-shu-tomcat-pian-\">服务器部署—《tomcat篇》 </a></p>\n<hr>\n"},{"_content":"﻿﻿﻿﻿﻿# 服务器部署---《mycat篇》\n---\n汇总篇：\n[服务器配置篇汇总（linux）+（jdk）+（tomcat）+（mysql）+（nginx）+（redis）+（fastDFS）+（mycat）](https://blog.huijia21.com/archives/fu-wu-qi-pei-zhi-pian-hui-zong-linuxjdktomcatmysqlnginxredisfastdfsmycatgitmaven)\n接上篇：\n[服务器部署---《fastDFS篇》](https://blog.huijia21.com/archives/fu-wu-qi-bu-shu-fastdfs-pian-)\n\n---\n## 七、mycat用于mysql数据库（安全组开启8066端口）\n1. 两个虚拟机分别建立两个数据库（版本5.7及以下，mycat5.8配置见文末连接）\n![image-20220430210537471](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430210537471.png)\n2. 创建：`mkdir /opt/mycat`\n3. 进入：`cd /opt/mycat`\n4. 上传：\n![image-20220430210549179](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430210549179.png)\n5. 解压：`tar -zxvf Mycat-server-1.6-RELEASE-20161028204710-linux.tar.gz`\n6. 配置server.xml： \n```javascript?linenums\nvi /opt/mycat/mycat/conf/server.xml\n//注释原有账号密码，添加自己账号密码\n//配置示例代码如下：\n<user name=\"root\"><!--账号-->\n\t<property name=\"password\">HBQ521521cf*</property><!--密码-->\n\t<property name=\"schemas\">T_M</property> <!--mycat数据库名-->\n\t<property name=\"readOnly\">false</property><!--非只读模式-->\n</user>\n```\n7. 配置schema.xml\n```javascript?linenums\n//建议新建该文件替换原有文件\n<?xml version=\"1.0\"?>\n<!DOCTYPE mycat:schema SYSTEM \"schema.dtd\">\n<mycat:schema xmlns:mycat=\"http://io.mycat/\">\n\n<!-- 数据库配置，与server.xml中的数据库对应，dataNode与分片配置name对应 -->\n    <schema name=\"T_M\" checkSQLschema=\"true\" sqlMaxLimit=\"100\">\n        <table name=\"me\" dataNode=\"dn1\"  /><!--me为ip=192.168.80.128的数据源中独有的表-->\n        <table name=\"do\" dataNode=\"dn2\"  /><!--do为ip=192.168.80.131的数据源中独有的表-->\n        <table name=\"user\" primaryKey=\"u_id\" autoIncrement=\"true\" dataNode=\"dn1,dn2\"  rule=\"mod-long\" />\n        <!--user为公共主表-->\n    </schema>\n\n<!-- 分片配置dataHost与物理数库name对应，数据源为物理数据源 -->\n    <dataNode name=\"dn1\" dataHost=\"test1\" database=\"T_M\" />\n    <dataNode name=\"dn2\" dataHost=\"test2\" database=\"T_M\" />\n\n<!-- 物理数据库配置；此处host的url与/etc/hosts中配置对应 -->\n    <dataHost name=\"test1\" maxCon=\"1000\" minCon=\"10\" balance=\"0\"  writeType=\"0\" dbType=\"mysql\" dbDriver=\"native\">\n        <heartbeat>select user();</heartbeat>\n        <writeHost host=\"hostM1\"  url=\"192.168.80.128:3306\" user=\"root\" password=\"HBQ521521cf*\">\n        </writeHost>\n    </dataHost>\n\n    <dataHost name=\"test2\" maxCon=\"1000\" minCon=\"10\" balance=\"0\" writeType=\"0\" dbType=\"mysql\" dbDriver=\"native\">\n        <heartbeat>select user();</heartbeat>\n        <writeHost host=\"hostM2\"  url=\"192.168.80.131:3306\" user=\"root\" password=\"HBQ521521cf*\">\n        </writeHost>\n    </dataHost>\n\n</mycat:schema>\n\n```\n8. 配置rule.xml\n```javascript?linenums\n//因为在schema.xml配置数据库rule=\"mod-long\" 所以在此配置该函数的参数\n<tableRule name=\"mod-long\">\n\t<rule>\n\t\t<columns>u_id</columns><!--此处u_id为公共表user的主键-->\n\t\t<algorithm>mod-long</algorithm>\n\t</rule>\n</tableRule>\n<function name=\"mod-long\" class=\"io.mycat.route.function.PartitionByMod\">\n\t<!-- how many data nodes -->\n\t<property name=\"count\">2</property><!--此处的2代表我们schema.xml配置的分片数-->\n</function>\n```\n9.配置hosts\n```javascript?linenums\nvi /etc/hosts\n//添加\n192.168.80.128 hostM1\n192.168.80.131 hostM2\n```\n10. 启动mycat\n```javascript?linenums\ncd /opt/mycat/mycat/bin/\n//启动\n./mycat start  \n//关闭命令\n./mycat stop\n```\n11. 使用navicat连接mycat\n![image-20220430210648013](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430210648013.png)\n![image-20220430210659404](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430210659404.png)\n\n12. 可能报错，查看日志\n```javascript?linenums\nvi /opt/mycat/mycat/logs/wrapper.log\n//报错1：超时：\nvi /opt/mycat/mycat/conf/wrapper.conf\n//添加两句，保存重启\nwrapper.startup.timeout=300000\nwrapper.ping.timeout=300000\n// 报错2：地址存在，端口占用\nps -ef|grep mycat\n//找出占用端口\nkill -9 占用端口\n// 报错3.直接报错无法连接\nmysql数据库版本高于5.7。请更换数据库或者参考下方链接mycat配置mysql5.8及以上版本\n```\n\n---\n\n[mycat配置mysql8](https://blog.csdn.net/qq_39231769/article/details/102651593)\n\n---\n\n接下篇：\n[服务器部署—《linux加载git仓库代码打包并运行》 ](https://blog.huijia21.com/archives/fu-wu-qi-bu-shu-linux-jia-zai-git-cang-ku-dai-ma-da-bao-bing-yun-xing-)\n\n---\n","source":"_posts/BookMark/运维/服务器部署---《mycat篇》 --菜鸟小回.md","raw":"﻿﻿﻿﻿﻿# 服务器部署---《mycat篇》\n---\n汇总篇：\n[服务器配置篇汇总（linux）+（jdk）+（tomcat）+（mysql）+（nginx）+（redis）+（fastDFS）+（mycat）](https://blog.huijia21.com/archives/fu-wu-qi-pei-zhi-pian-hui-zong-linuxjdktomcatmysqlnginxredisfastdfsmycatgitmaven)\n接上篇：\n[服务器部署---《fastDFS篇》](https://blog.huijia21.com/archives/fu-wu-qi-bu-shu-fastdfs-pian-)\n\n---\n## 七、mycat用于mysql数据库（安全组开启8066端口）\n1. 两个虚拟机分别建立两个数据库（版本5.7及以下，mycat5.8配置见文末连接）\n![image-20220430210537471](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430210537471.png)\n2. 创建：`mkdir /opt/mycat`\n3. 进入：`cd /opt/mycat`\n4. 上传：\n![image-20220430210549179](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430210549179.png)\n5. 解压：`tar -zxvf Mycat-server-1.6-RELEASE-20161028204710-linux.tar.gz`\n6. 配置server.xml： \n```javascript?linenums\nvi /opt/mycat/mycat/conf/server.xml\n//注释原有账号密码，添加自己账号密码\n//配置示例代码如下：\n<user name=\"root\"><!--账号-->\n\t<property name=\"password\">HBQ521521cf*</property><!--密码-->\n\t<property name=\"schemas\">T_M</property> <!--mycat数据库名-->\n\t<property name=\"readOnly\">false</property><!--非只读模式-->\n</user>\n```\n7. 配置schema.xml\n```javascript?linenums\n//建议新建该文件替换原有文件\n<?xml version=\"1.0\"?>\n<!DOCTYPE mycat:schema SYSTEM \"schema.dtd\">\n<mycat:schema xmlns:mycat=\"http://io.mycat/\">\n\n<!-- 数据库配置，与server.xml中的数据库对应，dataNode与分片配置name对应 -->\n    <schema name=\"T_M\" checkSQLschema=\"true\" sqlMaxLimit=\"100\">\n        <table name=\"me\" dataNode=\"dn1\"  /><!--me为ip=192.168.80.128的数据源中独有的表-->\n        <table name=\"do\" dataNode=\"dn2\"  /><!--do为ip=192.168.80.131的数据源中独有的表-->\n        <table name=\"user\" primaryKey=\"u_id\" autoIncrement=\"true\" dataNode=\"dn1,dn2\"  rule=\"mod-long\" />\n        <!--user为公共主表-->\n    </schema>\n\n<!-- 分片配置dataHost与物理数库name对应，数据源为物理数据源 -->\n    <dataNode name=\"dn1\" dataHost=\"test1\" database=\"T_M\" />\n    <dataNode name=\"dn2\" dataHost=\"test2\" database=\"T_M\" />\n\n<!-- 物理数据库配置；此处host的url与/etc/hosts中配置对应 -->\n    <dataHost name=\"test1\" maxCon=\"1000\" minCon=\"10\" balance=\"0\"  writeType=\"0\" dbType=\"mysql\" dbDriver=\"native\">\n        <heartbeat>select user();</heartbeat>\n        <writeHost host=\"hostM1\"  url=\"192.168.80.128:3306\" user=\"root\" password=\"HBQ521521cf*\">\n        </writeHost>\n    </dataHost>\n\n    <dataHost name=\"test2\" maxCon=\"1000\" minCon=\"10\" balance=\"0\" writeType=\"0\" dbType=\"mysql\" dbDriver=\"native\">\n        <heartbeat>select user();</heartbeat>\n        <writeHost host=\"hostM2\"  url=\"192.168.80.131:3306\" user=\"root\" password=\"HBQ521521cf*\">\n        </writeHost>\n    </dataHost>\n\n</mycat:schema>\n\n```\n8. 配置rule.xml\n```javascript?linenums\n//因为在schema.xml配置数据库rule=\"mod-long\" 所以在此配置该函数的参数\n<tableRule name=\"mod-long\">\n\t<rule>\n\t\t<columns>u_id</columns><!--此处u_id为公共表user的主键-->\n\t\t<algorithm>mod-long</algorithm>\n\t</rule>\n</tableRule>\n<function name=\"mod-long\" class=\"io.mycat.route.function.PartitionByMod\">\n\t<!-- how many data nodes -->\n\t<property name=\"count\">2</property><!--此处的2代表我们schema.xml配置的分片数-->\n</function>\n```\n9.配置hosts\n```javascript?linenums\nvi /etc/hosts\n//添加\n192.168.80.128 hostM1\n192.168.80.131 hostM2\n```\n10. 启动mycat\n```javascript?linenums\ncd /opt/mycat/mycat/bin/\n//启动\n./mycat start  \n//关闭命令\n./mycat stop\n```\n11. 使用navicat连接mycat\n![image-20220430210648013](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430210648013.png)\n![image-20220430210659404](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430210659404.png)\n\n12. 可能报错，查看日志\n```javascript?linenums\nvi /opt/mycat/mycat/logs/wrapper.log\n//报错1：超时：\nvi /opt/mycat/mycat/conf/wrapper.conf\n//添加两句，保存重启\nwrapper.startup.timeout=300000\nwrapper.ping.timeout=300000\n// 报错2：地址存在，端口占用\nps -ef|grep mycat\n//找出占用端口\nkill -9 占用端口\n// 报错3.直接报错无法连接\nmysql数据库版本高于5.7。请更换数据库或者参考下方链接mycat配置mysql5.8及以上版本\n```\n\n---\n\n[mycat配置mysql8](https://blog.csdn.net/qq_39231769/article/details/102651593)\n\n---\n\n接下篇：\n[服务器部署—《linux加载git仓库代码打包并运行》 ](https://blog.huijia21.com/archives/fu-wu-qi-bu-shu-linux-jia-zai-git-cang-ku-dai-ma-da-bao-bing-yun-xing-)\n\n---\n","slug":"BookMark/运维/服务器部署---《mycat篇》 --菜鸟小回","published":1,"date":"2022-07-25T05:51:42.000Z","updated":"2022-09-01T10:02:40.554Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cl7ptszou0039aba585c7az8i","content":"<h1><span id=\"服务器部署mycat篇\">服务器部署—《mycat篇》</span></h1><hr>\n<p>汇总篇：<br><a href=\"https://blog.huijia21.com/archives/fu-wu-qi-pei-zhi-pian-hui-zong-linuxjdktomcatmysqlnginxredisfastdfsmycatgitmaven\">服务器配置篇汇总（linux）+（jdk）+（tomcat）+（mysql）+（nginx）+（redis）+（fastDFS）+（mycat）</a><br>接上篇：<br><a href=\"https://blog.huijia21.com/archives/fu-wu-qi-bu-shu-fastdfs-pian-\">服务器部署—《fastDFS篇》</a></p>\n<hr>\n<h2><span id=\"七-mycat用于mysql数据库安全组开启8066端口\">七、mycat用于mysql数据库（安全组开启8066端口）</span></h2><ol>\n<li><p>两个虚拟机分别建立两个数据库（版本5.7及以下，mycat5.8配置见文末连接）<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430210537471.png\" alt=\"image-20220430210537471\"></p>\n</li>\n<li><p>创建：<code>mkdir /opt/mycat</code></p>\n</li>\n<li><p>进入：<code>cd /opt/mycat</code></p>\n</li>\n<li><p>上传：<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430210549179.png\" alt=\"image-20220430210549179\"></p>\n</li>\n<li><p>解压：<code>tar -zxvf Mycat-server-1.6-RELEASE-20161028204710-linux.tar.gz</code></p>\n</li>\n<li><p>配置server.xml： </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">vi /opt/mycat/mycat/conf/server.xml<br>//注释原有账号密码，添加自己账号密码<br>//配置示例代码如下：<br>&lt;user name=&quot;root&quot;&gt;&lt;!--账号--&gt;<br>\t&lt;property name=&quot;password&quot;&gt;HBQ521521cf*&lt;/property&gt;&lt;!--密码--&gt;<br>\t&lt;property name=&quot;schemas&quot;&gt;T_M&lt;/property&gt; &lt;!--mycat数据库名--&gt;<br>\t&lt;property name=&quot;readOnly&quot;&gt;false&lt;/property&gt;&lt;!--非只读模式--&gt;<br>&lt;/user&gt;<br></code></pre></td></tr></table></figure></li>\n<li><p>配置schema.xml</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">//建议新建该文件替换原有文件<br>&lt;?xml version=&quot;1.0&quot;?&gt;<br>&lt;!DOCTYPE mycat:schema SYSTEM &quot;schema.dtd&quot;&gt;<br>&lt;mycat:schema xmlns:mycat=&quot;http://io.mycat/&quot;&gt;<br><br>&lt;!-- 数据库配置，与server.xml中的数据库对应，dataNode与分片配置name对应 --&gt;<br>    &lt;schema name=&quot;T_M&quot; checkSQLschema=&quot;true&quot; sqlMaxLimit=&quot;100&quot;&gt;<br>        &lt;table name=&quot;me&quot; dataNode=&quot;dn1&quot;  /&gt;&lt;!--me为ip=192.168.80.128的数据源中独有的表--&gt;<br>        &lt;table name=&quot;do&quot; dataNode=&quot;dn2&quot;  /&gt;&lt;!--do为ip=192.168.80.131的数据源中独有的表--&gt;<br>        &lt;table name=&quot;user&quot; primaryKey=&quot;u_id&quot; autoIncrement=&quot;true&quot; dataNode=&quot;dn1,dn2&quot;  rule=&quot;mod-long&quot; /&gt;<br>        &lt;!--user为公共主表--&gt;<br>    &lt;/schema&gt;<br><br>&lt;!-- 分片配置dataHost与物理数库name对应，数据源为物理数据源 --&gt;<br>    &lt;dataNode name=&quot;dn1&quot; dataHost=&quot;test1&quot; database=&quot;T_M&quot; /&gt;<br>    &lt;dataNode name=&quot;dn2&quot; dataHost=&quot;test2&quot; database=&quot;T_M&quot; /&gt;<br><br>&lt;!-- 物理数据库配置；此处host的url与/etc/hosts中配置对应 --&gt;<br>    &lt;dataHost name=&quot;test1&quot; maxCon=&quot;1000&quot; minCon=&quot;10&quot; balance=&quot;0&quot;  writeType=&quot;0&quot; dbType=&quot;mysql&quot; dbDriver=&quot;native&quot;&gt;<br>        &lt;heartbeat&gt;select user();&lt;/heartbeat&gt;<br>        &lt;writeHost host=&quot;hostM1&quot;  url=&quot;192.168.80.128:3306&quot; user=&quot;root&quot; password=&quot;HBQ521521cf*&quot;&gt;<br>        &lt;/writeHost&gt;<br>    &lt;/dataHost&gt;<br><br>    &lt;dataHost name=&quot;test2&quot; maxCon=&quot;1000&quot; minCon=&quot;10&quot; balance=&quot;0&quot; writeType=&quot;0&quot; dbType=&quot;mysql&quot; dbDriver=&quot;native&quot;&gt;<br>        &lt;heartbeat&gt;select user();&lt;/heartbeat&gt;<br>        &lt;writeHost host=&quot;hostM2&quot;  url=&quot;192.168.80.131:3306&quot; user=&quot;root&quot; password=&quot;HBQ521521cf*&quot;&gt;<br>        &lt;/writeHost&gt;<br>    &lt;/dataHost&gt;<br><br>&lt;/mycat:schema&gt;<br><br></code></pre></td></tr></table></figure></li>\n<li><p>配置rule.xml</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">//因为在schema.xml配置数据库rule=&quot;mod-long&quot; 所以在此配置该函数的参数<br>&lt;tableRule name=&quot;mod-long&quot;&gt;<br>\t&lt;rule&gt;<br>\t\t&lt;columns&gt;u_id&lt;/columns&gt;&lt;!--此处u_id为公共表user的主键--&gt;<br>\t\t&lt;algorithm&gt;mod-long&lt;/algorithm&gt;<br>\t&lt;/rule&gt;<br>&lt;/tableRule&gt;<br>&lt;function name=&quot;mod-long&quot; class=&quot;io.mycat.route.function.PartitionByMod&quot;&gt;<br>\t&lt;!-- how many data nodes --&gt;<br>\t&lt;property name=&quot;count&quot;&gt;2&lt;/property&gt;&lt;!--此处的2代表我们schema.xml配置的分片数--&gt;<br>&lt;/function&gt;<br></code></pre></td></tr></table></figure>\n<p>9.配置hosts</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">vi /etc/hosts<br>//添加<br>192.168.80.128 hostM1<br>192.168.80.131 hostM2<br></code></pre></td></tr></table></figure></li>\n<li><p>启动mycat</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">cd /opt/mycat/mycat/bin/<br>//启动<br>./mycat start  <br>//关闭命令<br>./mycat stop<br></code></pre></td></tr></table></figure></li>\n<li><p>使用navicat连接mycat<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430210648013.png\" alt=\"image-20220430210648013\"><br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430210659404.png\" alt=\"image-20220430210659404\"></p>\n</li>\n<li><p>可能报错，查看日志</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">vi /opt/mycat/mycat/logs/wrapper.log<br>//报错1：超时：<br>vi /opt/mycat/mycat/conf/wrapper.conf<br>//添加两句，保存重启<br>wrapper.startup.timeout=300000<br>wrapper.ping.timeout=300000<br>// 报错2：地址存在，端口占用<br>ps -ef|grep mycat<br>//找出占用端口<br>kill -9 占用端口<br>// 报错3.直接报错无法连接<br>mysql数据库版本高于5.7。请更换数据库或者参考下方链接mycat配置mysql5.8及以上版本<br></code></pre></td></tr></table></figure></li>\n</ol>\n<hr>\n<p><a href=\"https://blog.csdn.net/qq_39231769/article/details/102651593\">mycat配置mysql8</a></p>\n<hr>\n<p>接下篇：<br><a href=\"https://blog.huijia21.com/archives/fu-wu-qi-bu-shu-linux-jia-zai-git-cang-ku-dai-ma-da-bao-bing-yun-xing-\">服务器部署—《linux加载git仓库代码打包并运行》 </a></p>\n<hr>\n","site":{"data":{}},"wordcount":3492,"excerpt":"","more":"<h1 id=\"服务器部署—《mycat篇》\"><a href=\"#服务器部署—《mycat篇》\" class=\"headerlink\" title=\"服务器部署—《mycat篇》\"></a>服务器部署—《mycat篇》</h1><hr>\n<p>汇总篇：<br><a href=\"https://blog.huijia21.com/archives/fu-wu-qi-pei-zhi-pian-hui-zong-linuxjdktomcatmysqlnginxredisfastdfsmycatgitmaven\">服务器配置篇汇总（linux）+（jdk）+（tomcat）+（mysql）+（nginx）+（redis）+（fastDFS）+（mycat）</a><br>接上篇：<br><a href=\"https://blog.huijia21.com/archives/fu-wu-qi-bu-shu-fastdfs-pian-\">服务器部署—《fastDFS篇》</a></p>\n<hr>\n<h2 id=\"七、mycat用于mysql数据库（安全组开启8066端口）\"><a href=\"#七、mycat用于mysql数据库（安全组开启8066端口）\" class=\"headerlink\" title=\"七、mycat用于mysql数据库（安全组开启8066端口）\"></a>七、mycat用于mysql数据库（安全组开启8066端口）</h2><ol>\n<li><p>两个虚拟机分别建立两个数据库（版本5.7及以下，mycat5.8配置见文末连接）<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430210537471.png\" alt=\"image-20220430210537471\"></p>\n</li>\n<li><p>创建：<code>mkdir /opt/mycat</code></p>\n</li>\n<li><p>进入：<code>cd /opt/mycat</code></p>\n</li>\n<li><p>上传：<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430210549179.png\" alt=\"image-20220430210549179\"></p>\n</li>\n<li><p>解压：<code>tar -zxvf Mycat-server-1.6-RELEASE-20161028204710-linux.tar.gz</code></p>\n</li>\n<li><p>配置server.xml： </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">vi /opt/mycat/mycat/conf/server.xml<br>//注释原有账号密码，添加自己账号密码<br>//配置示例代码如下：<br>&lt;user name=&quot;root&quot;&gt;&lt;!--账号--&gt;<br>\t&lt;property name=&quot;password&quot;&gt;HBQ521521cf*&lt;/property&gt;&lt;!--密码--&gt;<br>\t&lt;property name=&quot;schemas&quot;&gt;T_M&lt;/property&gt; &lt;!--mycat数据库名--&gt;<br>\t&lt;property name=&quot;readOnly&quot;&gt;false&lt;/property&gt;&lt;!--非只读模式--&gt;<br>&lt;/user&gt;<br></code></pre></td></tr></table></figure></li>\n<li><p>配置schema.xml</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">//建议新建该文件替换原有文件<br>&lt;?xml version=&quot;1.0&quot;?&gt;<br>&lt;!DOCTYPE mycat:schema SYSTEM &quot;schema.dtd&quot;&gt;<br>&lt;mycat:schema xmlns:mycat=&quot;http://io.mycat/&quot;&gt;<br><br>&lt;!-- 数据库配置，与server.xml中的数据库对应，dataNode与分片配置name对应 --&gt;<br>    &lt;schema name=&quot;T_M&quot; checkSQLschema=&quot;true&quot; sqlMaxLimit=&quot;100&quot;&gt;<br>        &lt;table name=&quot;me&quot; dataNode=&quot;dn1&quot;  /&gt;&lt;!--me为ip=192.168.80.128的数据源中独有的表--&gt;<br>        &lt;table name=&quot;do&quot; dataNode=&quot;dn2&quot;  /&gt;&lt;!--do为ip=192.168.80.131的数据源中独有的表--&gt;<br>        &lt;table name=&quot;user&quot; primaryKey=&quot;u_id&quot; autoIncrement=&quot;true&quot; dataNode=&quot;dn1,dn2&quot;  rule=&quot;mod-long&quot; /&gt;<br>        &lt;!--user为公共主表--&gt;<br>    &lt;/schema&gt;<br><br>&lt;!-- 分片配置dataHost与物理数库name对应，数据源为物理数据源 --&gt;<br>    &lt;dataNode name=&quot;dn1&quot; dataHost=&quot;test1&quot; database=&quot;T_M&quot; /&gt;<br>    &lt;dataNode name=&quot;dn2&quot; dataHost=&quot;test2&quot; database=&quot;T_M&quot; /&gt;<br><br>&lt;!-- 物理数据库配置；此处host的url与/etc/hosts中配置对应 --&gt;<br>    &lt;dataHost name=&quot;test1&quot; maxCon=&quot;1000&quot; minCon=&quot;10&quot; balance=&quot;0&quot;  writeType=&quot;0&quot; dbType=&quot;mysql&quot; dbDriver=&quot;native&quot;&gt;<br>        &lt;heartbeat&gt;select user();&lt;/heartbeat&gt;<br>        &lt;writeHost host=&quot;hostM1&quot;  url=&quot;192.168.80.128:3306&quot; user=&quot;root&quot; password=&quot;HBQ521521cf*&quot;&gt;<br>        &lt;/writeHost&gt;<br>    &lt;/dataHost&gt;<br><br>    &lt;dataHost name=&quot;test2&quot; maxCon=&quot;1000&quot; minCon=&quot;10&quot; balance=&quot;0&quot; writeType=&quot;0&quot; dbType=&quot;mysql&quot; dbDriver=&quot;native&quot;&gt;<br>        &lt;heartbeat&gt;select user();&lt;/heartbeat&gt;<br>        &lt;writeHost host=&quot;hostM2&quot;  url=&quot;192.168.80.131:3306&quot; user=&quot;root&quot; password=&quot;HBQ521521cf*&quot;&gt;<br>        &lt;/writeHost&gt;<br>    &lt;/dataHost&gt;<br><br>&lt;/mycat:schema&gt;<br><br></code></pre></td></tr></table></figure></li>\n<li><p>配置rule.xml</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">//因为在schema.xml配置数据库rule=&quot;mod-long&quot; 所以在此配置该函数的参数<br>&lt;tableRule name=&quot;mod-long&quot;&gt;<br>\t&lt;rule&gt;<br>\t\t&lt;columns&gt;u_id&lt;/columns&gt;&lt;!--此处u_id为公共表user的主键--&gt;<br>\t\t&lt;algorithm&gt;mod-long&lt;/algorithm&gt;<br>\t&lt;/rule&gt;<br>&lt;/tableRule&gt;<br>&lt;function name=&quot;mod-long&quot; class=&quot;io.mycat.route.function.PartitionByMod&quot;&gt;<br>\t&lt;!-- how many data nodes --&gt;<br>\t&lt;property name=&quot;count&quot;&gt;2&lt;/property&gt;&lt;!--此处的2代表我们schema.xml配置的分片数--&gt;<br>&lt;/function&gt;<br></code></pre></td></tr></table></figure>\n<p>9.配置hosts</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">vi /etc/hosts<br>//添加<br>192.168.80.128 hostM1<br>192.168.80.131 hostM2<br></code></pre></td></tr></table></figure></li>\n<li><p>启动mycat</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">cd /opt/mycat/mycat/bin/<br>//启动<br>./mycat start  <br>//关闭命令<br>./mycat stop<br></code></pre></td></tr></table></figure></li>\n<li><p>使用navicat连接mycat<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430210648013.png\" alt=\"image-20220430210648013\"><br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430210659404.png\" alt=\"image-20220430210659404\"></p>\n</li>\n<li><p>可能报错，查看日志</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">vi /opt/mycat/mycat/logs/wrapper.log<br>//报错1：超时：<br>vi /opt/mycat/mycat/conf/wrapper.conf<br>//添加两句，保存重启<br>wrapper.startup.timeout=300000<br>wrapper.ping.timeout=300000<br>// 报错2：地址存在，端口占用<br>ps -ef|grep mycat<br>//找出占用端口<br>kill -9 占用端口<br>// 报错3.直接报错无法连接<br>mysql数据库版本高于5.7。请更换数据库或者参考下方链接mycat配置mysql5.8及以上版本<br></code></pre></td></tr></table></figure></li>\n</ol>\n<hr>\n<p><a href=\"https://blog.csdn.net/qq_39231769/article/details/102651593\">mycat配置mysql8</a></p>\n<hr>\n<p>接下篇：<br><a href=\"https://blog.huijia21.com/archives/fu-wu-qi-bu-shu-linux-jia-zai-git-cang-ku-dai-ma-da-bao-bing-yun-xing-\">服务器部署—《linux加载git仓库代码打包并运行》 </a></p>\n<hr>\n"},{"_content":"﻿﻿﻿# 服务器部署---《mysql篇》\n---\n汇总篇：\n[服务器配置篇汇总（linux）+（jdk）+（tomcat）+（mysql）+（nginx）+（redis）+（fastDFS）+（mycat）](https://blog.huijia21.com/archives/fu-wu-qi-pei-zhi-pian-hui-zong-linuxjdktomcatmysqlnginxredisfastdfsmycatgitmaven)\n接上篇：\n[服务器部署---《tomcat篇》](https://blog.huijia.cf/2022/09/08/BookMark/%E8%BF%90%E7%BB%B4/%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2---%E3%80%8Atomcat%E7%AF%87%E3%80%8B%20--%E8%8F%9C%E9%B8%9F%E5%B0%8F%E5%9B%9E/\n\n---\n## 三、mysql（安全组开启3306端口）\n<font color=red size=5>所有确认操作均为：y </font>\n1. 安装 wget 下载器：`sudo yum install wget`\n2. 创建：`mkdir /opt/mysql`\n3. 进入：`cd /opt/mysql/`\n4. 安装\n```javascript?linenums\nwget http://dev.mysql.com/get/mysql57-community-release-el7-8.noarch.rpm\n//用 yum 安装MySQL Yum\nyum localinstall mysql57-community-release-el7-8.noarch.rpm\n安装 MySQL\nyum install mysql-community-server\n```\n5. 启动\n```javascript?linenums\n//启动 MySQL\nsystemctl start mysqld\n//设置开机启动 MySQL\nsystemctl enable mysqld\nsystemctl daemon-reload\n```\n6. 查看密码：`sudo grep 'temporary password' /var/log/mysqld.log`\n密码：`qGOzkVMGZ0%A`\n![image-20220430210854417](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430210854417.png)\n7. 设置新密码\n```javascript?linenums\nsudo mysql_secure_installation\n//输入临时密码\nqGOzkVMGZ0%A\n//输入新密码（大写+小写+数字+符号）\n***********\n```\n![image-20220430210901320](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430210901320.png)\n\n8. 开启端口3306\n![image-20220430210909710](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430210909710.png)\n\n9.  改变策略让root远程连接，或者创建新用户去远程连接\n```javascript?linenums\n//1. 登录,-u账号 -p密码\n mysql -uroot -p521521\n//2. 进入mysql:\n use mysql;\n//3.更新user表数据，添加远程访问权限；\nupdate user set Host='%' where User='root';\n//4.刷新属性\nflush privileges;\n```\n![image-20220430210919571](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430210919571.png)\n\n10. navicat远程连接\n![image-20220430210934055](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430210934055.png)\n\n---\n接下篇：\n[服务器部署---《nginx篇》](https://blog.huijia21.com/archives/fu-wu-qi-bu-shu-nginx-pian-)\n\n---\n","source":"_posts/BookMark/运维/服务器部署---《mysql篇》 --菜鸟小回.md","raw":"﻿﻿﻿# 服务器部署---《mysql篇》\n---\n汇总篇：\n[服务器配置篇汇总（linux）+（jdk）+（tomcat）+（mysql）+（nginx）+（redis）+（fastDFS）+（mycat）](https://blog.huijia21.com/archives/fu-wu-qi-pei-zhi-pian-hui-zong-linuxjdktomcatmysqlnginxredisfastdfsmycatgitmaven)\n接上篇：\n[服务器部署---《tomcat篇》](https://blog.huijia.cf/2022/09/08/BookMark/%E8%BF%90%E7%BB%B4/%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2---%E3%80%8Atomcat%E7%AF%87%E3%80%8B%20--%E8%8F%9C%E9%B8%9F%E5%B0%8F%E5%9B%9E/\n\n---\n## 三、mysql（安全组开启3306端口）\n<font color=red size=5>所有确认操作均为：y </font>\n1. 安装 wget 下载器：`sudo yum install wget`\n2. 创建：`mkdir /opt/mysql`\n3. 进入：`cd /opt/mysql/`\n4. 安装\n```javascript?linenums\nwget http://dev.mysql.com/get/mysql57-community-release-el7-8.noarch.rpm\n//用 yum 安装MySQL Yum\nyum localinstall mysql57-community-release-el7-8.noarch.rpm\n安装 MySQL\nyum install mysql-community-server\n```\n5. 启动\n```javascript?linenums\n//启动 MySQL\nsystemctl start mysqld\n//设置开机启动 MySQL\nsystemctl enable mysqld\nsystemctl daemon-reload\n```\n6. 查看密码：`sudo grep 'temporary password' /var/log/mysqld.log`\n密码：`qGOzkVMGZ0%A`\n![image-20220430210854417](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430210854417.png)\n7. 设置新密码\n```javascript?linenums\nsudo mysql_secure_installation\n//输入临时密码\nqGOzkVMGZ0%A\n//输入新密码（大写+小写+数字+符号）\n***********\n```\n![image-20220430210901320](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430210901320.png)\n\n8. 开启端口3306\n![image-20220430210909710](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430210909710.png)\n\n9.  改变策略让root远程连接，或者创建新用户去远程连接\n```javascript?linenums\n//1. 登录,-u账号 -p密码\n mysql -uroot -p521521\n//2. 进入mysql:\n use mysql;\n//3.更新user表数据，添加远程访问权限；\nupdate user set Host='%' where User='root';\n//4.刷新属性\nflush privileges;\n```\n![image-20220430210919571](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430210919571.png)\n\n10. navicat远程连接\n![image-20220430210934055](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430210934055.png)\n\n---\n接下篇：\n[服务器部署---《nginx篇》](https://blog.huijia21.com/archives/fu-wu-qi-bu-shu-nginx-pian-)\n\n---\n","slug":"BookMark/运维/服务器部署---《mysql篇》 --菜鸟小回","published":1,"date":"2022-07-25T05:51:41.000Z","updated":"2022-09-01T10:02:40.549Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cl7ptszou003aaba54nntcffp","content":"<h1><span id=\"服务器部署mysql篇\">服务器部署—《mysql篇》</span></h1><hr>\n<p>汇总篇：<br><a href=\"https://blog.huijia21.com/archives/fu-wu-qi-pei-zhi-pian-hui-zong-linuxjdktomcatmysqlnginxredisfastdfsmycatgitmaven\">服务器配置篇汇总（linux）+（jdk）+（tomcat）+（mysql）+（nginx）+（redis）+（fastDFS）+（mycat）</a><br>接上篇：<br><a href=\"https://blog.huijia21.com/archives/fu-wu-qi-bu-shu-tomcat-pian-\">服务器部署—《tomcat篇》</a></p>\n<hr>\n<h2><span id=\"三-mysql安全组开启3306端口\">三、mysql（安全组开启3306端口）</span></h2><p><font color=\"red\" size=\"5\">所有确认操作均为：y </font></p>\n<ol>\n<li><p>安装 wget 下载器：<code>sudo yum install wget</code></p>\n</li>\n<li><p>创建：<code>mkdir /opt/mysql</code></p>\n</li>\n<li><p>进入：<code>cd /opt/mysql/</code></p>\n</li>\n<li><p>安装</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">wget http://dev.mysql.com/get/mysql57-community-release-el7-8.noarch.rpm<br>//用 yum 安装MySQL Yum<br>yum localinstall mysql57-community-release-el7-8.noarch.rpm<br>安装 MySQL<br>yum install mysql-community-server<br></code></pre></td></tr></table></figure></li>\n<li><p>启动</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">//启动 MySQL<br>systemctl start mysqld<br>//设置开机启动 MySQL<br>systemctl enable mysqld<br>systemctl daemon-reload<br></code></pre></td></tr></table></figure></li>\n<li><p>查看密码：<code>sudo grep &#39;temporary password&#39; /var/log/mysqld.log</code><br>密码：<code>qGOzkVMGZ0%A</code><br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430210854417.png\" alt=\"image-20220430210854417\"></p>\n</li>\n<li><p>设置新密码</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">sudo mysql_secure_installation<br>//输入临时密码<br>qGOzkVMGZ0%A<br>//输入新密码（大写+小写+数字+符号）<br>***********<br></code></pre></td></tr></table></figure>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430210901320.png\" alt=\"image-20220430210901320\"></p>\n</li>\n<li><p>开启端口3306<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430210909710.png\" alt=\"image-20220430210909710\"></p>\n</li>\n<li><p>改变策略让root远程连接，或者创建新用户去远程连接</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">//1. 登录,-u账号 -p密码<br> mysql -uroot -p521521<br>//2. 进入mysql:<br> use mysql;<br>//3.更新user表数据，添加远程访问权限；<br>update user set Host=&#x27;%&#x27; where User=&#x27;root&#x27;;<br>//4.刷新属性<br>flush privileges;<br></code></pre></td></tr></table></figure>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430210919571.png\" alt=\"image-20220430210919571\"></p>\n</li>\n<li><p>navicat远程连接<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430210934055.png\" alt=\"image-20220430210934055\"></p>\n</li>\n</ol>\n<hr>\n<p>接下篇：<br><a href=\"https://blog.huijia21.com/archives/fu-wu-qi-bu-shu-nginx-pian-\">服务器部署—《nginx篇》</a></p>\n<hr>\n","site":{"data":{}},"wordcount":878,"excerpt":"","more":"<h1 id=\"服务器部署—《mysql篇》\"><a href=\"#服务器部署—《mysql篇》\" class=\"headerlink\" title=\"服务器部署—《mysql篇》\"></a>服务器部署—《mysql篇》</h1><hr>\n<p>汇总篇：<br><a href=\"https://blog.huijia21.com/archives/fu-wu-qi-pei-zhi-pian-hui-zong-linuxjdktomcatmysqlnginxredisfastdfsmycatgitmaven\">服务器配置篇汇总（linux）+（jdk）+（tomcat）+（mysql）+（nginx）+（redis）+（fastDFS）+（mycat）</a><br>接上篇：<br><a href=\"https://blog.huijia21.com/archives/fu-wu-qi-bu-shu-tomcat-pian-\">服务器部署—《tomcat篇》</a></p>\n<hr>\n<h2 id=\"三、mysql（安全组开启3306端口）\"><a href=\"#三、mysql（安全组开启3306端口）\" class=\"headerlink\" title=\"三、mysql（安全组开启3306端口）\"></a>三、mysql（安全组开启3306端口）</h2><p><font color=red size=5>所有确认操作均为：y </font></p>\n<ol>\n<li><p>安装 wget 下载器：<code>sudo yum install wget</code></p>\n</li>\n<li><p>创建：<code>mkdir /opt/mysql</code></p>\n</li>\n<li><p>进入：<code>cd /opt/mysql/</code></p>\n</li>\n<li><p>安装</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">wget http://dev.mysql.com/get/mysql57-community-release-el7-8.noarch.rpm<br>//用 yum 安装MySQL Yum<br>yum localinstall mysql57-community-release-el7-8.noarch.rpm<br>安装 MySQL<br>yum install mysql-community-server<br></code></pre></td></tr></table></figure></li>\n<li><p>启动</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">//启动 MySQL<br>systemctl start mysqld<br>//设置开机启动 MySQL<br>systemctl enable mysqld<br>systemctl daemon-reload<br></code></pre></td></tr></table></figure></li>\n<li><p>查看密码：<code>sudo grep &#39;temporary password&#39; /var/log/mysqld.log</code><br>密码：<code>qGOzkVMGZ0%A</code><br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430210854417.png\" alt=\"image-20220430210854417\"></p>\n</li>\n<li><p>设置新密码</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">sudo mysql_secure_installation<br>//输入临时密码<br>qGOzkVMGZ0%A<br>//输入新密码（大写+小写+数字+符号）<br>***********<br></code></pre></td></tr></table></figure>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430210901320.png\" alt=\"image-20220430210901320\"></p>\n</li>\n<li><p>开启端口3306<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430210909710.png\" alt=\"image-20220430210909710\"></p>\n</li>\n<li><p>改变策略让root远程连接，或者创建新用户去远程连接</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">//1. 登录,-u账号 -p密码<br> mysql -uroot -p521521<br>//2. 进入mysql:<br> use mysql;<br>//3.更新user表数据，添加远程访问权限；<br>update user set Host=&#x27;%&#x27; where User=&#x27;root&#x27;;<br>//4.刷新属性<br>flush privileges;<br></code></pre></td></tr></table></figure>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430210919571.png\" alt=\"image-20220430210919571\"></p>\n</li>\n<li><p>navicat远程连接<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430210934055.png\" alt=\"image-20220430210934055\"></p>\n</li>\n</ol>\n<hr>\n<p>接下篇：<br><a href=\"https://blog.huijia21.com/archives/fu-wu-qi-bu-shu-nginx-pian-\">服务器部署—《nginx篇》</a></p>\n<hr>\n"},{"_content":"﻿﻿﻿# 服务器部署---《nginx篇》\n---\n汇总篇：\n[服务器配置篇汇总（linux）+（jdk）+（tomcat）+（mysql）+（nginx）+（redis）+（fastDFS）+（mycat）](https://blog.huijia21.com/archives/fu-wu-qi-pei-zhi-pian-hui-zong-linuxjdktomcatmysqlnginxredisfastdfsmycatgitmaven)\n接上篇：\n[服务器部署---《mysql篇》](https://blog.huijia21.com/archives/fu-wu-qi-bu-shu-mysql-pian-)\n\n---\n## 四、nginx(安全组开启所配置端口)\n1. 创建：mkdir /opt/nginx\n2. 进入：cd /opt/nginx/\n3. 下载：`wget http://file.huijia.cf/file/nginx-1.13.0.tar.gz`\n4. 解压：tar -zxvf nginx-1.13.0.tar.gz \n5. 编译：\n```javascript?linenums\ncd nginx-1.13.0\n//安装编译源码所需要的工具和库：\nyum install gcc gcc-c++ ncurses-devel perl \nyum install pcre pcre-devel\nyum  install zlib gzip zlib-devel\n//编译\n./configure \n```\n6. 安装到默认位置/usr/local/nginx：`make & make install`\n![image-20220430211126489](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430211126489.png)\n\n7. 启动\n```javascript?linenums\ncd /usr/local/nginx/sbin/\n//启动\n./nginx\n//重启\n./nginx -s reload\n```\n![image-20220430211135391](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430211135391.png)\n\n8. 虚拟主机配置\n```javascript?linenums\nvi /usr/local/nginx/conf/nginx.conf\n//在原主页server上写入：\n\n# 虚拟主机的配置\n\n#虚拟主机一（虚拟域名）：\nserver { \n\tlisten       8081;   #端口\n\tserver_name  hhh.idse.top;\t#域名，虚拟机需要在windows的C:\\Windows\\System32\\drivers\\etc的hosts里面配置\n\t\t\t\t#120.27.244.176 hhh.idse.top\n\tlocation / {  \n\t\troot  abc; #相当于ningx目录下的hbq目录，可以写成绝对路径  /zhiyou/java \n\t\tindex a.html;  #默认跳转页面\n\t} \n}\n#虚拟主机一（真实域名）：\nserver { \n\tlisten       8082;   #端口\n\tserver_name  www.idse.top;     #公网域名，配置域名解析到本机ip\n       \n\tlocation / {  \n\t\troot  abc; #相当于ningx目录下的hbq目录，可以写成绝对路径  /zhiyou/java \n\t\tindex b.html;  #默认跳转页面\n\t} \n}\n#虚拟主机三（ip）：\n server{ \n\tlisten\t8083;  #端口\n\tserver_name 120.27.244.176; #域名        \n\tlocation / {  \n\t\troot  abc; #相当于ningx目录下的hbq目录，可以写成绝对路径  /zhiyou/java \n\t\tindex c.html;  #默认跳转页面\n\t}        \n}\n//创建文件\nmkdir -p /usr/local/nginx/abc\nvi /usr/local/nginx/abc/a.html  //写入aaa\nvi /usr/local/nginx/abc/b.html  //写入bbb\nvi /usr/local/nginx/abc/c.html  //写入ccc\n//重启nginx\ncd /usr/local/nginx/sbin/\n./nginx -s reload\n```\n![image-20220430211145872](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430211145872.png)\n\n8. 负载均衡多服务器配置\n```javascript?linenums\nupstream tomcatserver1 {   #后面的名字自己起的，与下面proxy_pass后面保持一致\n        server 120.27.244.176:8080  weight=2; #ip或者主机名都可以\n        #server 120.27.244.176:81;\n}\nserver {\n        listen       80;   #端口\n        server_name  www.idse.top;     #域名，虚拟机需要在windows的hosts里面配置\n\n        location / {\n        proxy_pass   http://tomcatserver1;    #代理，会更具名字找到上面的\n        }\n}\n\n```\n![image-20220430211153673](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430211153673.png)\n\n---\n接下篇：\n[服务器部署---《redis篇》](https://blog.huijia21.com/archives/fu-wu-qi-bu-shu-redis-pian-)\n\n---\n","source":"_posts/BookMark/运维/服务器部署---《nginx篇》 --菜鸟小回.md","raw":"﻿﻿﻿# 服务器部署---《nginx篇》\n---\n汇总篇：\n[服务器配置篇汇总（linux）+（jdk）+（tomcat）+（mysql）+（nginx）+（redis）+（fastDFS）+（mycat）](https://blog.huijia21.com/archives/fu-wu-qi-pei-zhi-pian-hui-zong-linuxjdktomcatmysqlnginxredisfastdfsmycatgitmaven)\n接上篇：\n[服务器部署---《mysql篇》](https://blog.huijia21.com/archives/fu-wu-qi-bu-shu-mysql-pian-)\n\n---\n## 四、nginx(安全组开启所配置端口)\n1. 创建：mkdir /opt/nginx\n2. 进入：cd /opt/nginx/\n3. 下载：`wget http://file.huijia.cf/file/nginx-1.13.0.tar.gz`\n4. 解压：tar -zxvf nginx-1.13.0.tar.gz \n5. 编译：\n```javascript?linenums\ncd nginx-1.13.0\n//安装编译源码所需要的工具和库：\nyum install gcc gcc-c++ ncurses-devel perl \nyum install pcre pcre-devel\nyum  install zlib gzip zlib-devel\n//编译\n./configure \n```\n6. 安装到默认位置/usr/local/nginx：`make & make install`\n![image-20220430211126489](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430211126489.png)\n\n7. 启动\n```javascript?linenums\ncd /usr/local/nginx/sbin/\n//启动\n./nginx\n//重启\n./nginx -s reload\n```\n![image-20220430211135391](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430211135391.png)\n\n8. 虚拟主机配置\n```javascript?linenums\nvi /usr/local/nginx/conf/nginx.conf\n//在原主页server上写入：\n\n# 虚拟主机的配置\n\n#虚拟主机一（虚拟域名）：\nserver { \n\tlisten       8081;   #端口\n\tserver_name  hhh.idse.top;\t#域名，虚拟机需要在windows的C:\\Windows\\System32\\drivers\\etc的hosts里面配置\n\t\t\t\t#120.27.244.176 hhh.idse.top\n\tlocation / {  \n\t\troot  abc; #相当于ningx目录下的hbq目录，可以写成绝对路径  /zhiyou/java \n\t\tindex a.html;  #默认跳转页面\n\t} \n}\n#虚拟主机一（真实域名）：\nserver { \n\tlisten       8082;   #端口\n\tserver_name  www.idse.top;     #公网域名，配置域名解析到本机ip\n       \n\tlocation / {  \n\t\troot  abc; #相当于ningx目录下的hbq目录，可以写成绝对路径  /zhiyou/java \n\t\tindex b.html;  #默认跳转页面\n\t} \n}\n#虚拟主机三（ip）：\n server{ \n\tlisten\t8083;  #端口\n\tserver_name 120.27.244.176; #域名        \n\tlocation / {  \n\t\troot  abc; #相当于ningx目录下的hbq目录，可以写成绝对路径  /zhiyou/java \n\t\tindex c.html;  #默认跳转页面\n\t}        \n}\n//创建文件\nmkdir -p /usr/local/nginx/abc\nvi /usr/local/nginx/abc/a.html  //写入aaa\nvi /usr/local/nginx/abc/b.html  //写入bbb\nvi /usr/local/nginx/abc/c.html  //写入ccc\n//重启nginx\ncd /usr/local/nginx/sbin/\n./nginx -s reload\n```\n![image-20220430211145872](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430211145872.png)\n\n8. 负载均衡多服务器配置\n```javascript?linenums\nupstream tomcatserver1 {   #后面的名字自己起的，与下面proxy_pass后面保持一致\n        server 120.27.244.176:8080  weight=2; #ip或者主机名都可以\n        #server 120.27.244.176:81;\n}\nserver {\n        listen       80;   #端口\n        server_name  www.idse.top;     #域名，虚拟机需要在windows的hosts里面配置\n\n        location / {\n        proxy_pass   http://tomcatserver1;    #代理，会更具名字找到上面的\n        }\n}\n\n```\n![image-20220430211153673](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430211153673.png)\n\n---\n接下篇：\n[服务器部署---《redis篇》](https://blog.huijia21.com/archives/fu-wu-qi-bu-shu-redis-pian-)\n\n---\n","slug":"BookMark/运维/服务器部署---《nginx篇》 --菜鸟小回","published":1,"date":"2022-07-18T09:51:34.000Z","updated":"2022-09-01T10:02:40.485Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cl7ptszou003baba53sqb01wk","content":"<h1><span id=\"服务器部署nginx篇\">服务器部署—《nginx篇》</span></h1><hr>\n<p>汇总篇：<br><a href=\"https://blog.huijia21.com/archives/fu-wu-qi-pei-zhi-pian-hui-zong-linuxjdktomcatmysqlnginxredisfastdfsmycatgitmaven\">服务器配置篇汇总（linux）+（jdk）+（tomcat）+（mysql）+（nginx）+（redis）+（fastDFS）+（mycat）</a><br>接上篇：<br><a href=\"https://blog.huijia21.com/archives/fu-wu-qi-bu-shu-mysql-pian-\">服务器部署—《mysql篇》</a></p>\n<hr>\n<h2><span id=\"四-nginx安全组开启所配置端口\">四、nginx(安全组开启所配置端口)</span></h2><ol>\n<li><p>创建：mkdir &#x2F;opt&#x2F;nginx</p>\n</li>\n<li><p>进入：cd &#x2F;opt&#x2F;nginx&#x2F;</p>\n</li>\n<li><p>下载：<code>wget http://file.huijia.cf/file/nginx-1.13.0.tar.gz</code></p>\n</li>\n<li><p>解压：tar -zxvf nginx-1.13.0.tar.gz </p>\n</li>\n<li><p>编译：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">cd nginx-1.13.0<br>//安装编译源码所需要的工具和库：<br>yum install gcc gcc-c++ ncurses-devel perl <br>yum install pcre pcre-devel<br>yum  install zlib gzip zlib-devel<br>//编译<br>./configure <br></code></pre></td></tr></table></figure></li>\n<li><p>安装到默认位置&#x2F;usr&#x2F;local&#x2F;nginx：<code>make &amp; make install</code><br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430211126489.png\" alt=\"image-20220430211126489\"></p>\n</li>\n<li><p>启动</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">cd /usr/local/nginx/sbin/<br>//启动<br>./nginx<br>//重启<br>./nginx -s reload<br></code></pre></td></tr></table></figure>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430211135391.png\" alt=\"image-20220430211135391\"></p>\n</li>\n<li><p>虚拟主机配置</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">vi /usr/local/nginx/conf/nginx.conf<br>//在原主页server上写入：<br><br># 虚拟主机的配置<br><br>#虚拟主机一（虚拟域名）：<br>server &#123; <br>\tlisten       8081;   #端口<br>\tserver_name  hhh.idse.top;\t#域名，虚拟机需要在windows的C:\\Windows\\System32\\drivers\\etc的hosts里面配置<br>\t\t\t\t#120.27.244.176 hhh.idse.top<br>\tlocation / &#123;  <br>\t\troot  abc; #相当于ningx目录下的hbq目录，可以写成绝对路径  /zhiyou/java <br>\t\tindex a.html;  #默认跳转页面<br>\t&#125; <br>&#125;<br>#虚拟主机一（真实域名）：<br>server &#123; <br>\tlisten       8082;   #端口<br>\tserver_name  www.idse.top;     #公网域名，配置域名解析到本机ip<br>       <br>\tlocation / &#123;  <br>\t\troot  abc; #相当于ningx目录下的hbq目录，可以写成绝对路径  /zhiyou/java <br>\t\tindex b.html;  #默认跳转页面<br>\t&#125; <br>&#125;<br>#虚拟主机三（ip）：<br> server&#123; <br>\tlisten\t8083;  #端口<br>\tserver_name 120.27.244.176; #域名        <br>\tlocation / &#123;  <br>\t\troot  abc; #相当于ningx目录下的hbq目录，可以写成绝对路径  /zhiyou/java <br>\t\tindex c.html;  #默认跳转页面<br>\t&#125;        <br>&#125;<br>//创建文件<br>mkdir -p /usr/local/nginx/abc<br>vi /usr/local/nginx/abc/a.html  //写入aaa<br>vi /usr/local/nginx/abc/b.html  //写入bbb<br>vi /usr/local/nginx/abc/c.html  //写入ccc<br>//重启nginx<br>cd /usr/local/nginx/sbin/<br>./nginx -s reload<br></code></pre></td></tr></table></figure>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430211145872.png\" alt=\"image-20220430211145872\"></p>\n</li>\n<li><p>负载均衡多服务器配置</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">upstream tomcatserver1 &#123;   #后面的名字自己起的，与下面proxy_pass后面保持一致<br>        server 120.27.244.176:8080  weight=2; #ip或者主机名都可以<br>        #server 120.27.244.176:81;<br>&#125;<br>server &#123;<br>        listen       80;   #端口<br>        server_name  www.idse.top;     #域名，虚拟机需要在windows的hosts里面配置<br><br>        location / &#123;<br>        proxy_pass   http://tomcatserver1;    #代理，会更具名字找到上面的<br>        &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430211153673.png\" alt=\"image-20220430211153673\"></p>\n</li>\n</ol>\n<hr>\n<p>接下篇：<br><a href=\"https://blog.huijia21.com/archives/fu-wu-qi-bu-shu-redis-pian-\">服务器部署—《redis篇》</a></p>\n<hr>\n","site":{"data":{}},"wordcount":1761,"excerpt":"","more":"<h1 id=\"服务器部署—《nginx篇》\"><a href=\"#服务器部署—《nginx篇》\" class=\"headerlink\" title=\"服务器部署—《nginx篇》\"></a>服务器部署—《nginx篇》</h1><hr>\n<p>汇总篇：<br><a href=\"https://blog.huijia21.com/archives/fu-wu-qi-pei-zhi-pian-hui-zong-linuxjdktomcatmysqlnginxredisfastdfsmycatgitmaven\">服务器配置篇汇总（linux）+（jdk）+（tomcat）+（mysql）+（nginx）+（redis）+（fastDFS）+（mycat）</a><br>接上篇：<br><a href=\"https://blog.huijia21.com/archives/fu-wu-qi-bu-shu-mysql-pian-\">服务器部署—《mysql篇》</a></p>\n<hr>\n<h2 id=\"四、nginx-安全组开启所配置端口\"><a href=\"#四、nginx-安全组开启所配置端口\" class=\"headerlink\" title=\"四、nginx(安全组开启所配置端口)\"></a>四、nginx(安全组开启所配置端口)</h2><ol>\n<li><p>创建：mkdir &#x2F;opt&#x2F;nginx</p>\n</li>\n<li><p>进入：cd &#x2F;opt&#x2F;nginx&#x2F;</p>\n</li>\n<li><p>下载：<code>wget http://file.huijia.cf/file/nginx-1.13.0.tar.gz</code></p>\n</li>\n<li><p>解压：tar -zxvf nginx-1.13.0.tar.gz </p>\n</li>\n<li><p>编译：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">cd nginx-1.13.0<br>//安装编译源码所需要的工具和库：<br>yum install gcc gcc-c++ ncurses-devel perl <br>yum install pcre pcre-devel<br>yum  install zlib gzip zlib-devel<br>//编译<br>./configure <br></code></pre></td></tr></table></figure></li>\n<li><p>安装到默认位置&#x2F;usr&#x2F;local&#x2F;nginx：<code>make &amp; make install</code><br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430211126489.png\" alt=\"image-20220430211126489\"></p>\n</li>\n<li><p>启动</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">cd /usr/local/nginx/sbin/<br>//启动<br>./nginx<br>//重启<br>./nginx -s reload<br></code></pre></td></tr></table></figure>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430211135391.png\" alt=\"image-20220430211135391\"></p>\n</li>\n<li><p>虚拟主机配置</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">vi /usr/local/nginx/conf/nginx.conf<br>//在原主页server上写入：<br><br># 虚拟主机的配置<br><br>#虚拟主机一（虚拟域名）：<br>server &#123; <br>\tlisten       8081;   #端口<br>\tserver_name  hhh.idse.top;\t#域名，虚拟机需要在windows的C:\\Windows\\System32\\drivers\\etc的hosts里面配置<br>\t\t\t\t#120.27.244.176 hhh.idse.top<br>\tlocation / &#123;  <br>\t\troot  abc; #相当于ningx目录下的hbq目录，可以写成绝对路径  /zhiyou/java <br>\t\tindex a.html;  #默认跳转页面<br>\t&#125; <br>&#125;<br>#虚拟主机一（真实域名）：<br>server &#123; <br>\tlisten       8082;   #端口<br>\tserver_name  www.idse.top;     #公网域名，配置域名解析到本机ip<br>       <br>\tlocation / &#123;  <br>\t\troot  abc; #相当于ningx目录下的hbq目录，可以写成绝对路径  /zhiyou/java <br>\t\tindex b.html;  #默认跳转页面<br>\t&#125; <br>&#125;<br>#虚拟主机三（ip）：<br> server&#123; <br>\tlisten\t8083;  #端口<br>\tserver_name 120.27.244.176; #域名        <br>\tlocation / &#123;  <br>\t\troot  abc; #相当于ningx目录下的hbq目录，可以写成绝对路径  /zhiyou/java <br>\t\tindex c.html;  #默认跳转页面<br>\t&#125;        <br>&#125;<br>//创建文件<br>mkdir -p /usr/local/nginx/abc<br>vi /usr/local/nginx/abc/a.html  //写入aaa<br>vi /usr/local/nginx/abc/b.html  //写入bbb<br>vi /usr/local/nginx/abc/c.html  //写入ccc<br>//重启nginx<br>cd /usr/local/nginx/sbin/<br>./nginx -s reload<br></code></pre></td></tr></table></figure>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430211145872.png\" alt=\"image-20220430211145872\"></p>\n</li>\n<li><p>负载均衡多服务器配置</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">upstream tomcatserver1 &#123;   #后面的名字自己起的，与下面proxy_pass后面保持一致<br>        server 120.27.244.176:8080  weight=2; #ip或者主机名都可以<br>        #server 120.27.244.176:81;<br>&#125;<br>server &#123;<br>        listen       80;   #端口<br>        server_name  www.idse.top;     #域名，虚拟机需要在windows的hosts里面配置<br><br>        location / &#123;<br>        proxy_pass   http://tomcatserver1;    #代理，会更具名字找到上面的<br>        &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430211153673.png\" alt=\"image-20220430211153673\"></p>\n</li>\n</ol>\n<hr>\n<p>接下篇：<br><a href=\"https://blog.huijia21.com/archives/fu-wu-qi-bu-shu-redis-pian-\">服务器部署—《redis篇》</a></p>\n<hr>\n"},{"_content":"﻿﻿﻿# 服务器部署---《redis篇》\n---\n汇总篇：\n[服务器配置篇汇总（linux）+（jdk）+（tomcat）+（mysql）+（nginx）+（redis）+（fastDFS）+（mycat）](https://blog.huijia21.com/archives/fu-wu-qi-pei-zhi-pian-hui-zong-linuxjdktomcatmysqlnginxredisfastdfsmycatgitmaven)\n接上篇：\n[服务器部署---《nginx篇》](https://blog.huijia21.com/archives/fu-wu-qi-bu-shu-nginx-pian-)\n\n---\n\n## 五、redis(安全组开启6379)\n1. 创建：`mkdir /opt/redis`\n2. 进入：`cd /opt/redis`\n3. 下载：`wget http://file.huijia21.com/redis-5.0.3.tar.gz`\n4. 解压：`tar -zxvf redis-5.0.3.tar.gz`\n5. 编译：\n```javascript?linenums\ncd redis-5.0.3\nmake\n```\n6. 安装：`make install`\n7. 创建新目录方便管理：`mkdir -p /opt/redis/redis-5.0.3/bin`\n8. 拷贝文件：\n```javascript?linenums\ncd src/\ncp redis-server /opt/redis/redis-5.0.3/bin/\ncp redis-benchmark /opt/redis/redis-5.0.3/bin/\ncp redis-cli /opt/redis/redis-5.0.3/bin/\ncp /opt/redis/redis-5.0.3/redis.conf  /opt/redis/redis-5.0.3/bin/\n```\n9. 修改配置文件\n```javascript?linenums\ncd ../bin\n//修改配置文件\nvi redis.conf\n//找到daemonize no改为：\ndaemonize yes\n//找到bind 127.0.0.1改为\n#bind 127.0.0.1\n//找到#requirepass foobared去掉注释并改为自己的密码\nrequirepass youpassword\n\n```\n10. 启动：` ./redis-server redis.conf`\n11. 测试：\n```javascript?linenums\n./redis-cli -a youpassword\n\nset key \"hello world!\"\nget key\n//得到hello world!成功\n```\n12. 远程连接，先创建安全组6379端口！\n\n![image-20220430213243585](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430213243585.png)\n![image-20220430213252132](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430213252132.png)\n\n---\n接下篇：\n[服务器部署---《fastDFS篇》](https://blog.huijia21.com/archives/fu-wu-qi-bu-shu-fastdfs-pian-)\n\n---\n","source":"_posts/BookMark/运维/服务器部署---《redis篇》 --菜鸟小回.md","raw":"﻿﻿﻿# 服务器部署---《redis篇》\n---\n汇总篇：\n[服务器配置篇汇总（linux）+（jdk）+（tomcat）+（mysql）+（nginx）+（redis）+（fastDFS）+（mycat）](https://blog.huijia21.com/archives/fu-wu-qi-pei-zhi-pian-hui-zong-linuxjdktomcatmysqlnginxredisfastdfsmycatgitmaven)\n接上篇：\n[服务器部署---《nginx篇》](https://blog.huijia21.com/archives/fu-wu-qi-bu-shu-nginx-pian-)\n\n---\n\n## 五、redis(安全组开启6379)\n1. 创建：`mkdir /opt/redis`\n2. 进入：`cd /opt/redis`\n3. 下载：`wget http://file.huijia21.com/redis-5.0.3.tar.gz`\n4. 解压：`tar -zxvf redis-5.0.3.tar.gz`\n5. 编译：\n```javascript?linenums\ncd redis-5.0.3\nmake\n```\n6. 安装：`make install`\n7. 创建新目录方便管理：`mkdir -p /opt/redis/redis-5.0.3/bin`\n8. 拷贝文件：\n```javascript?linenums\ncd src/\ncp redis-server /opt/redis/redis-5.0.3/bin/\ncp redis-benchmark /opt/redis/redis-5.0.3/bin/\ncp redis-cli /opt/redis/redis-5.0.3/bin/\ncp /opt/redis/redis-5.0.3/redis.conf  /opt/redis/redis-5.0.3/bin/\n```\n9. 修改配置文件\n```javascript?linenums\ncd ../bin\n//修改配置文件\nvi redis.conf\n//找到daemonize no改为：\ndaemonize yes\n//找到bind 127.0.0.1改为\n#bind 127.0.0.1\n//找到#requirepass foobared去掉注释并改为自己的密码\nrequirepass youpassword\n\n```\n10. 启动：` ./redis-server redis.conf`\n11. 测试：\n```javascript?linenums\n./redis-cli -a youpassword\n\nset key \"hello world!\"\nget key\n//得到hello world!成功\n```\n12. 远程连接，先创建安全组6379端口！\n\n![image-20220430213243585](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430213243585.png)\n![image-20220430213252132](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430213252132.png)\n\n---\n接下篇：\n[服务器部署---《fastDFS篇》](https://blog.huijia21.com/archives/fu-wu-qi-bu-shu-fastdfs-pian-)\n\n---\n","slug":"BookMark/运维/服务器部署---《redis篇》 --菜鸟小回","published":1,"date":"2022-07-18T09:51:35.000Z","updated":"2022-09-01T10:02:40.494Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cl7ptszou003caba5e7730yd5","content":"<h1><span id=\"服务器部署redis篇\">服务器部署—《redis篇》</span></h1><hr>\n<p>汇总篇：<br><a href=\"https://blog.huijia21.com/archives/fu-wu-qi-pei-zhi-pian-hui-zong-linuxjdktomcatmysqlnginxredisfastdfsmycatgitmaven\">服务器配置篇汇总（linux）+（jdk）+（tomcat）+（mysql）+（nginx）+（redis）+（fastDFS）+（mycat）</a><br>接上篇：<br><a href=\"https://blog.huijia21.com/archives/fu-wu-qi-bu-shu-nginx-pian-\">服务器部署—《nginx篇》</a></p>\n<hr>\n<h2><span id=\"五-redis安全组开启6379\">五、redis(安全组开启6379)</span></h2><ol>\n<li>创建：<code>mkdir /opt/redis</code></li>\n<li>进入：<code>cd /opt/redis</code></li>\n<li>下载：<code>wget http://file.huijia21.com/redis-5.0.3.tar.gz</code></li>\n<li>解压：<code>tar -zxvf redis-5.0.3.tar.gz</code></li>\n<li>编译：<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">cd redis-5.0.3<br>make<br></code></pre></td></tr></table></figure></li>\n<li>安装：<code>make install</code></li>\n<li>创建新目录方便管理：<code>mkdir -p /opt/redis/redis-5.0.3/bin</code></li>\n<li>拷贝文件：<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">cd src/<br>cp redis-server /opt/redis/redis-5.0.3/bin/<br>cp redis-benchmark /opt/redis/redis-5.0.3/bin/<br>cp redis-cli /opt/redis/redis-5.0.3/bin/<br>cp /opt/redis/redis-5.0.3/redis.conf  /opt/redis/redis-5.0.3/bin/<br></code></pre></td></tr></table></figure></li>\n<li>修改配置文件<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">cd ../bin<br>//修改配置文件<br>vi redis.conf<br>//找到daemonize no改为：<br>daemonize yes<br>//找到bind 127.0.0.1改为<br>#bind 127.0.0.1<br>//找到#requirepass foobared去掉注释并改为自己的密码<br>requirepass youpassword<br><br></code></pre></td></tr></table></figure></li>\n<li>启动：<code> ./redis-server redis.conf</code></li>\n<li>测试：<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">./redis-cli -a youpassword<br><br>set key &quot;hello world!&quot;<br>get key<br>//得到hello world!成功<br></code></pre></td></tr></table></figure></li>\n<li>远程连接，先创建安全组6379端口！</li>\n</ol>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430213243585.png\" alt=\"image-20220430213243585\"><br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430213252132.png\" alt=\"image-20220430213252132\"></p>\n<hr>\n<p>接下篇：<br><a href=\"https://blog.huijia21.com/archives/fu-wu-qi-bu-shu-fastdfs-pian-\">服务器部署—《fastDFS篇》</a></p>\n<hr>\n","site":{"data":{}},"wordcount":833,"excerpt":"","more":"<h1 id=\"服务器部署—《redis篇》\"><a href=\"#服务器部署—《redis篇》\" class=\"headerlink\" title=\"服务器部署—《redis篇》\"></a>服务器部署—《redis篇》</h1><hr>\n<p>汇总篇：<br><a href=\"https://blog.huijia21.com/archives/fu-wu-qi-pei-zhi-pian-hui-zong-linuxjdktomcatmysqlnginxredisfastdfsmycatgitmaven\">服务器配置篇汇总（linux）+（jdk）+（tomcat）+（mysql）+（nginx）+（redis）+（fastDFS）+（mycat）</a><br>接上篇：<br><a href=\"https://blog.huijia21.com/archives/fu-wu-qi-bu-shu-nginx-pian-\">服务器部署—《nginx篇》</a></p>\n<hr>\n<h2 id=\"五、redis-安全组开启6379\"><a href=\"#五、redis-安全组开启6379\" class=\"headerlink\" title=\"五、redis(安全组开启6379)\"></a>五、redis(安全组开启6379)</h2><ol>\n<li>创建：<code>mkdir /opt/redis</code></li>\n<li>进入：<code>cd /opt/redis</code></li>\n<li>下载：<code>wget http://file.huijia21.com/redis-5.0.3.tar.gz</code></li>\n<li>解压：<code>tar -zxvf redis-5.0.3.tar.gz</code></li>\n<li>编译：<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">cd redis-5.0.3<br>make<br></code></pre></td></tr></table></figure></li>\n<li>安装：<code>make install</code></li>\n<li>创建新目录方便管理：<code>mkdir -p /opt/redis/redis-5.0.3/bin</code></li>\n<li>拷贝文件：<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">cd src/<br>cp redis-server /opt/redis/redis-5.0.3/bin/<br>cp redis-benchmark /opt/redis/redis-5.0.3/bin/<br>cp redis-cli /opt/redis/redis-5.0.3/bin/<br>cp /opt/redis/redis-5.0.3/redis.conf  /opt/redis/redis-5.0.3/bin/<br></code></pre></td></tr></table></figure></li>\n<li>修改配置文件<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">cd ../bin<br>//修改配置文件<br>vi redis.conf<br>//找到daemonize no改为：<br>daemonize yes<br>//找到bind 127.0.0.1改为<br>#bind 127.0.0.1<br>//找到#requirepass foobared去掉注释并改为自己的密码<br>requirepass youpassword<br><br></code></pre></td></tr></table></figure></li>\n<li>启动：<code> ./redis-server redis.conf</code></li>\n<li>测试：<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">./redis-cli -a youpassword<br><br>set key &quot;hello world!&quot;<br>get key<br>//得到hello world!成功<br></code></pre></td></tr></table></figure></li>\n<li>远程连接，先创建安全组6379端口！</li>\n</ol>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430213243585.png\" alt=\"image-20220430213243585\"><br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430213252132.png\" alt=\"image-20220430213252132\"></p>\n<hr>\n<p>接下篇：<br><a href=\"https://blog.huijia21.com/archives/fu-wu-qi-bu-shu-fastdfs-pian-\">服务器部署—《fastDFS篇》</a></p>\n<hr>\n"},{"_content":"﻿﻿﻿# 服务器部署---《tomcat篇》\n---\n汇总篇：\n[服务器配置篇汇总（linux）+（jdk）+（tomcat）+（mysql）+（nginx）+（redis）+（fastDFS）+（mycat）](https://blog.huijia21.com/archives/fu-wu-qi-pei-zhi-pian-hui-zong-linuxjdktomcatmysqlnginxredisfastdfsmycatgitmaven)\n接上篇：\n[服务器部署---《jdk篇》](https://blog.huijia21.com/archives/fu-wu-qi-bu-shu-jdk-pian-)\n\n---\n## 二、tomcat（安全组开启80、8080端口）\n1. 创建：`mkdir -p /opt/tomcat`\n2. 进入：`cd /opt/tomcat`\n3. 上传：`wget http://file.huijia.cf/file/apache-maven-3.6.1-bin.tar.gz`\n4. 解压：`tar -zxvf apache-tomcat-8.5.34.tar.gz`\n5. 改名：`mv apache-tomcat-8.5.34 tomcat-8.5.34`\n6. 启动：\n```javascript?linenums\ncd /opt/tomcat/tomcat-8.5.34/bin/\n./startup.sh\n```\n7. 关防火墙\n```javascript?linenums\nsystemctl stop firewalld.service\nsystemctl disable firewalld.service\n```\n8. 开安全组\n![image-20220430213423919](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430213423919.png)\n9. 访问：`http://120.27.244.176:8080` 耐心等待......\n![image-20220430213433355](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430213433355.png)\n10. 修改端口，配置默认访问项目名\n```javascript?linenums\n//编辑配置文件\nvi ../conf/server.xml\n//搜索端口\n:/8080\n改为80\n//搜索Host\n//添加;root可改为你的项目名\n<Context path=\"/\" docBase=\"root\" />\n//保存退出\n:wq\n```\n![image-20220430213444811](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430213444811.png)\n![image-20220430213454713](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430213454713.png)\n\n11. 重启tomcat\n```javascript?linenums\ncd /opt/tomcat/tomcat-8.5.34/bin/\n//关闭\n./shutdown.sh\n//查看关闭成功（一行输出为成功，多行未成功）\nps -ef|grep java\n//未成功，杀死线程\nkill -9 线程号\n//启动\n./startup.sh\n```\n![image-20220430213505555](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430213505555.png)\n\n12. 访问：`http://120.27.244.176` 等待......\n![image-20220430213513763](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430213513763.png)\n\n---\n接下篇：\n[服务器部署---《mysql篇》](https://blog.huijia21.com/archives/fu-wu-qi-bu-shu-mysql-pian-)\n\n---\n","source":"_posts/BookMark/运维/服务器部署---《tomcat篇》 --菜鸟小回.md","raw":"﻿﻿﻿# 服务器部署---《tomcat篇》\n---\n汇总篇：\n[服务器配置篇汇总（linux）+（jdk）+（tomcat）+（mysql）+（nginx）+（redis）+（fastDFS）+（mycat）](https://blog.huijia21.com/archives/fu-wu-qi-pei-zhi-pian-hui-zong-linuxjdktomcatmysqlnginxredisfastdfsmycatgitmaven)\n接上篇：\n[服务器部署---《jdk篇》](https://blog.huijia21.com/archives/fu-wu-qi-bu-shu-jdk-pian-)\n\n---\n## 二、tomcat（安全组开启80、8080端口）\n1. 创建：`mkdir -p /opt/tomcat`\n2. 进入：`cd /opt/tomcat`\n3. 上传：`wget http://file.huijia.cf/file/apache-maven-3.6.1-bin.tar.gz`\n4. 解压：`tar -zxvf apache-tomcat-8.5.34.tar.gz`\n5. 改名：`mv apache-tomcat-8.5.34 tomcat-8.5.34`\n6. 启动：\n```javascript?linenums\ncd /opt/tomcat/tomcat-8.5.34/bin/\n./startup.sh\n```\n7. 关防火墙\n```javascript?linenums\nsystemctl stop firewalld.service\nsystemctl disable firewalld.service\n```\n8. 开安全组\n![image-20220430213423919](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430213423919.png)\n9. 访问：`http://120.27.244.176:8080` 耐心等待......\n![image-20220430213433355](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430213433355.png)\n10. 修改端口，配置默认访问项目名\n```javascript?linenums\n//编辑配置文件\nvi ../conf/server.xml\n//搜索端口\n:/8080\n改为80\n//搜索Host\n//添加;root可改为你的项目名\n<Context path=\"/\" docBase=\"root\" />\n//保存退出\n:wq\n```\n![image-20220430213444811](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430213444811.png)\n![image-20220430213454713](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430213454713.png)\n\n11. 重启tomcat\n```javascript?linenums\ncd /opt/tomcat/tomcat-8.5.34/bin/\n//关闭\n./shutdown.sh\n//查看关闭成功（一行输出为成功，多行未成功）\nps -ef|grep java\n//未成功，杀死线程\nkill -9 线程号\n//启动\n./startup.sh\n```\n![image-20220430213505555](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430213505555.png)\n\n12. 访问：`http://120.27.244.176` 等待......\n![image-20220430213513763](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430213513763.png)\n\n---\n接下篇：\n[服务器部署---《mysql篇》](https://blog.huijia21.com/archives/fu-wu-qi-bu-shu-mysql-pian-)\n\n---\n","slug":"BookMark/运维/服务器部署---《tomcat篇》 --菜鸟小回","published":1,"date":"2022-07-18T09:51:35.000Z","updated":"2022-09-01T10:02:40.492Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cl7ptszov003daba529r682y4","content":"<h1><span id=\"服务器部署tomcat篇\">服务器部署—《tomcat篇》</span></h1><hr>\n<p>汇总篇：<br><a href=\"https://blog.huijia21.com/archives/fu-wu-qi-pei-zhi-pian-hui-zong-linuxjdktomcatmysqlnginxredisfastdfsmycatgitmaven\">服务器配置篇汇总（linux）+（jdk）+（tomcat）+（mysql）+（nginx）+（redis）+（fastDFS）+（mycat）</a><br>接上篇：<br><a href=\"https://blog.huijia21.com/archives/fu-wu-qi-bu-shu-jdk-pian-\">服务器部署—《jdk篇》</a></p>\n<hr>\n<h2><span id=\"二-tomcat安全组开启80-8080端口\">二、tomcat（安全组开启80、8080端口）</span></h2><ol>\n<li><p>创建：<code>mkdir -p /opt/tomcat</code></p>\n</li>\n<li><p>进入：<code>cd /opt/tomcat</code></p>\n</li>\n<li><p>上传：<code>wget http://file.huijia.cf/file/apache-maven-3.6.1-bin.tar.gz</code></p>\n</li>\n<li><p>解压：<code>tar -zxvf apache-tomcat-8.5.34.tar.gz</code></p>\n</li>\n<li><p>改名：<code>mv apache-tomcat-8.5.34 tomcat-8.5.34</code></p>\n</li>\n<li><p>启动：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">cd /opt/tomcat/tomcat-8.5.34/bin/<br>./startup.sh<br></code></pre></td></tr></table></figure></li>\n<li><p>关防火墙</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">systemctl stop firewalld.service<br>systemctl disable firewalld.service<br></code></pre></td></tr></table></figure></li>\n<li><p>开安全组<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430213423919.png\" alt=\"image-20220430213423919\"></p>\n</li>\n<li><p>访问：<code>http://120.27.244.176:8080</code> 耐心等待……<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430213433355.png\" alt=\"image-20220430213433355\"></p>\n</li>\n<li><p>修改端口，配置默认访问项目名</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">//编辑配置文件<br>vi ../conf/server.xml<br>//搜索端口<br>:/8080<br>改为80<br>//搜索Host<br>//添加;root可改为你的项目名<br>&lt;Context path=&quot;/&quot; docBase=&quot;root&quot; /&gt;<br>//保存退出<br>:wq<br></code></pre></td></tr></table></figure>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430213444811.png\" alt=\"image-20220430213444811\"><br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430213454713.png\" alt=\"image-20220430213454713\"></p>\n</li>\n<li><p>重启tomcat</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">cd /opt/tomcat/tomcat-8.5.34/bin/<br>//关闭<br>./shutdown.sh<br>//查看关闭成功（一行输出为成功，多行未成功）<br>ps -ef|grep java<br>//未成功，杀死线程<br>kill -9 线程号<br>//启动<br>./startup.sh<br></code></pre></td></tr></table></figure>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430213505555.png\" alt=\"image-20220430213505555\"></p>\n</li>\n<li><p>访问：<code>http://120.27.244.176</code> 等待……<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430213513763.png\" alt=\"image-20220430213513763\"></p>\n</li>\n</ol>\n<hr>\n<p>接下篇：<br><a href=\"https://blog.huijia21.com/archives/fu-wu-qi-bu-shu-mysql-pian-\">服务器部署—《mysql篇》</a></p>\n<hr>\n","site":{"data":{}},"wordcount":809,"excerpt":"","more":"<h1 id=\"服务器部署—《tomcat篇》\"><a href=\"#服务器部署—《tomcat篇》\" class=\"headerlink\" title=\"服务器部署—《tomcat篇》\"></a>服务器部署—《tomcat篇》</h1><hr>\n<p>汇总篇：<br><a href=\"https://blog.huijia21.com/archives/fu-wu-qi-pei-zhi-pian-hui-zong-linuxjdktomcatmysqlnginxredisfastdfsmycatgitmaven\">服务器配置篇汇总（linux）+（jdk）+（tomcat）+（mysql）+（nginx）+（redis）+（fastDFS）+（mycat）</a><br>接上篇：<br><a href=\"https://blog.huijia21.com/archives/fu-wu-qi-bu-shu-jdk-pian-\">服务器部署—《jdk篇》</a></p>\n<hr>\n<h2 id=\"二、tomcat（安全组开启80、8080端口）\"><a href=\"#二、tomcat（安全组开启80、8080端口）\" class=\"headerlink\" title=\"二、tomcat（安全组开启80、8080端口）\"></a>二、tomcat（安全组开启80、8080端口）</h2><ol>\n<li><p>创建：<code>mkdir -p /opt/tomcat</code></p>\n</li>\n<li><p>进入：<code>cd /opt/tomcat</code></p>\n</li>\n<li><p>上传：<code>wget http://file.huijia.cf/file/apache-maven-3.6.1-bin.tar.gz</code></p>\n</li>\n<li><p>解压：<code>tar -zxvf apache-tomcat-8.5.34.tar.gz</code></p>\n</li>\n<li><p>改名：<code>mv apache-tomcat-8.5.34 tomcat-8.5.34</code></p>\n</li>\n<li><p>启动：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">cd /opt/tomcat/tomcat-8.5.34/bin/<br>./startup.sh<br></code></pre></td></tr></table></figure></li>\n<li><p>关防火墙</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">systemctl stop firewalld.service<br>systemctl disable firewalld.service<br></code></pre></td></tr></table></figure></li>\n<li><p>开安全组<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430213423919.png\" alt=\"image-20220430213423919\"></p>\n</li>\n<li><p>访问：<code>http://120.27.244.176:8080</code> 耐心等待……<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430213433355.png\" alt=\"image-20220430213433355\"></p>\n</li>\n<li><p>修改端口，配置默认访问项目名</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">//编辑配置文件<br>vi ../conf/server.xml<br>//搜索端口<br>:/8080<br>改为80<br>//搜索Host<br>//添加;root可改为你的项目名<br>&lt;Context path=&quot;/&quot; docBase=&quot;root&quot; /&gt;<br>//保存退出<br>:wq<br></code></pre></td></tr></table></figure>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430213444811.png\" alt=\"image-20220430213444811\"><br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430213454713.png\" alt=\"image-20220430213454713\"></p>\n</li>\n<li><p>重启tomcat</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">cd /opt/tomcat/tomcat-8.5.34/bin/<br>//关闭<br>./shutdown.sh<br>//查看关闭成功（一行输出为成功，多行未成功）<br>ps -ef|grep java<br>//未成功，杀死线程<br>kill -9 线程号<br>//启动<br>./startup.sh<br></code></pre></td></tr></table></figure>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430213505555.png\" alt=\"image-20220430213505555\"></p>\n</li>\n<li><p>访问：<code>http://120.27.244.176</code> 等待……<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430213513763.png\" alt=\"image-20220430213513763\"></p>\n</li>\n</ol>\n<hr>\n<p>接下篇：<br><a href=\"https://blog.huijia21.com/archives/fu-wu-qi-bu-shu-mysql-pian-\">服务器部署—《mysql篇》</a></p>\n<hr>\n"},{"_content":"﻿﻿﻿#服务器部署—《linux加载git仓库代码打包并运行》\n---\n汇总篇：\n[服务器配置篇汇总（linux）+（jdk）+（tomcat）+（mysql）+（nginx）+（redis）+（fastDFS）+（mycat）](https://blog.huijia21.com/archives/fu-wu-qi-pei-zhi-pian-hui-zong-linuxjdktomcatmysqlnginxredisfastdfsmycatgitmaven)\n接上篇：\n[服务器部署---《mycat篇》](https://blog.huijia.cf/2022/09/08/BookMark/%E8%BF%90%E7%BB%B4/%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2---%E3%80%8Amycat%E7%AF%87%E3%80%8B%20--%E8%8F%9C%E9%B8%9F%E5%B0%8F%E5%9B%9E/)\n\n---\n## 八、git安装\n```javascript?linenums\n# 安装git\nyum install git\n# 完成后查看git版本\ngit version\n```\n## 九、maven安装\n1. 创建：`mkdir -p /opt/maven`\n2. 进入：`cd /opt/maven`\n3. 下载：`wget http://file.huijia.cf/file/apache-maven-3.6.1-bin.tar.gz`\n4. 解压：`tar -zxvf apache-maven-3.6.1-bin.tar.gz`\n5. 编辑：`vi /etc/profile`\n6. 配置环境变量：\n```javascript?linenums\n//进编辑模式\ni \n//文档最后添加：\nexport MAVEN_HOME=/opt/maven/apache-maven-3.6.1\nexport PATH=$MAVEN_HOME/bin:$PATH\n//保存退出\nESC\n:wq\n//更新配置\nsource /etc/profile\n```\n\n## 十、shell脚本\n```javascript?linenums\necho \"=====================删除原代码=====================\"\nrm -rf /root/teacher_plus/\nrm -rf /out/teacher_plus/\n## 从git拉取代码\necho \"=====================拉取新代码=====================\"\ngit clone https://gitee.com/idse666666/teacher_plus.git\n\nmv -f /root/teacher_plus/ /out/teacher_plus/\ncd /out/teacher_plus/\n## 构筑项目\necho \"=====================正在打包=====================\"\nmvn clean install\n\n## 关闭服务\necho \"=====================正在关闭jar服务=====================\"\npid=`ps ax | grep -i 'jar' |grep java | grep -v grep | awk '{print $1}'`\nif [ -z \"$pid\" ] ; then\n        echo \"No $1 running.\"\nelse \n\techo \"The $1(${pid}) is running...\"\n\tkill ${pid}\n\techo \"Send shutdown request to $1(${pid}) OK\"\nfi\n\necho \"=====================启动nginx===================\"\n/usr/local/nginx/sbin/nginx\n\necho \"=====================启动ridis===================\"\ncd /opt/redis/redis-5.0.3/bin/\n./redis-server redis.conf\n\n## 启动服务\necho \"=====================正在启动项目=====================\"\nnohup java -jar /out/teacher_plus/target/teacher_plus-0.0.1-SNAPSHOT.jar >/out/project_log.out 2>&1 &\necho \"=====================项目启动完毕=====================\"\n```\n","source":"_posts/BookMark/运维/服务器部署—《linux加载git仓库代码打包并运行》--菜鸟小回.md","raw":"﻿﻿﻿#服务器部署—《linux加载git仓库代码打包并运行》\n---\n汇总篇：\n[服务器配置篇汇总（linux）+（jdk）+（tomcat）+（mysql）+（nginx）+（redis）+（fastDFS）+（mycat）](https://blog.huijia21.com/archives/fu-wu-qi-pei-zhi-pian-hui-zong-linuxjdktomcatmysqlnginxredisfastdfsmycatgitmaven)\n接上篇：\n[服务器部署---《mycat篇》](https://blog.huijia.cf/2022/09/08/BookMark/%E8%BF%90%E7%BB%B4/%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2---%E3%80%8Amycat%E7%AF%87%E3%80%8B%20--%E8%8F%9C%E9%B8%9F%E5%B0%8F%E5%9B%9E/)\n\n---\n## 八、git安装\n```javascript?linenums\n# 安装git\nyum install git\n# 完成后查看git版本\ngit version\n```\n## 九、maven安装\n1. 创建：`mkdir -p /opt/maven`\n2. 进入：`cd /opt/maven`\n3. 下载：`wget http://file.huijia.cf/file/apache-maven-3.6.1-bin.tar.gz`\n4. 解压：`tar -zxvf apache-maven-3.6.1-bin.tar.gz`\n5. 编辑：`vi /etc/profile`\n6. 配置环境变量：\n```javascript?linenums\n//进编辑模式\ni \n//文档最后添加：\nexport MAVEN_HOME=/opt/maven/apache-maven-3.6.1\nexport PATH=$MAVEN_HOME/bin:$PATH\n//保存退出\nESC\n:wq\n//更新配置\nsource /etc/profile\n```\n\n## 十、shell脚本\n```javascript?linenums\necho \"=====================删除原代码=====================\"\nrm -rf /root/teacher_plus/\nrm -rf /out/teacher_plus/\n## 从git拉取代码\necho \"=====================拉取新代码=====================\"\ngit clone https://gitee.com/idse666666/teacher_plus.git\n\nmv -f /root/teacher_plus/ /out/teacher_plus/\ncd /out/teacher_plus/\n## 构筑项目\necho \"=====================正在打包=====================\"\nmvn clean install\n\n## 关闭服务\necho \"=====================正在关闭jar服务=====================\"\npid=`ps ax | grep -i 'jar' |grep java | grep -v grep | awk '{print $1}'`\nif [ -z \"$pid\" ] ; then\n        echo \"No $1 running.\"\nelse \n\techo \"The $1(${pid}) is running...\"\n\tkill ${pid}\n\techo \"Send shutdown request to $1(${pid}) OK\"\nfi\n\necho \"=====================启动nginx===================\"\n/usr/local/nginx/sbin/nginx\n\necho \"=====================启动ridis===================\"\ncd /opt/redis/redis-5.0.3/bin/\n./redis-server redis.conf\n\n## 启动服务\necho \"=====================正在启动项目=====================\"\nnohup java -jar /out/teacher_plus/target/teacher_plus-0.0.1-SNAPSHOT.jar >/out/project_log.out 2>&1 &\necho \"=====================项目启动完毕=====================\"\n```\n","slug":"BookMark/运维/服务器部署—《linux加载git仓库代码打包并运行》--菜鸟小回","published":1,"date":"2022-07-18T09:51:35.000Z","updated":"2022-07-18T09:51:35.000Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cl7ptszov003eaba54wddbpyv","content":"<h2><span id=\"服务器部署linux加载git仓库代码打包并运行\">#服务器部署—《linux加载git仓库代码打包并运行》</span></h2><p>汇总篇：<br><a href=\"https://blog.huijia21.com/archives/fu-wu-qi-pei-zhi-pian-hui-zong-linuxjdktomcatmysqlnginxredisfastdfsmycatgitmaven\">服务器配置篇汇总（linux）+（jdk）+（tomcat）+（mysql）+（nginx）+（redis）+（fastDFS）+（mycat）</a><br>接上篇：<br><a href=\"https://blog.huijia.cf/2022/09/08/BookMark/%E8%BF%90%E7%BB%B4/%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2---%E3%80%8Amycat%E7%AF%87%E3%80%8B%20--%E8%8F%9C%E9%B8%9F%E5%B0%8F%E5%9B%9E/\">服务器部署—《mycat篇》</a></p>\n<hr>\n<h2><span id=\"八-git安装\">八、git安装</span></h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\"># 安装git<br>yum install git<br># 完成后查看git版本<br>git version<br></code></pre></td></tr></table></figure>\n<h2><span id=\"九-maven安装\">九、maven安装</span></h2><ol>\n<li>创建：<code>mkdir -p /opt/maven</code></li>\n<li>进入：<code>cd /opt/maven</code></li>\n<li>下载：<code>wget http://file.huijia.cf/file/apache-maven-3.6.1-bin.tar.gz</code></li>\n<li>解压：<code>tar -zxvf apache-maven-3.6.1-bin.tar.gz</code></li>\n<li>编辑：<code>vi /etc/profile</code></li>\n<li>配置环境变量：<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">//进编辑模式<br>i <br>//文档最后添加：<br>export MAVEN_HOME=/opt/maven/apache-maven-3.6.1<br>export PATH=$MAVEN_HOME/bin:$PATH<br>//保存退出<br>ESC<br>:wq<br>//更新配置<br>source /etc/profile<br></code></pre></td></tr></table></figure></li>\n</ol>\n<h2><span id=\"十-shell脚本\">十、shell脚本</span></h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">echo &quot;=====================删除原代码=====================&quot;<br>rm -rf /root/teacher_plus/<br>rm -rf /out/teacher_plus/<br>## 从git拉取代码<br>echo &quot;=====================拉取新代码=====================&quot;<br>git clone https://gitee.com/idse666666/teacher_plus.git<br><br>mv -f /root/teacher_plus/ /out/teacher_plus/<br>cd /out/teacher_plus/<br>## 构筑项目<br>echo &quot;=====================正在打包=====================&quot;<br>mvn clean install<br><br>## 关闭服务<br>echo &quot;=====================正在关闭jar服务=====================&quot;<br>pid=`ps ax | grep -i &#x27;jar&#x27; |grep java | grep -v grep | awk &#x27;&#123;print $1&#125;&#x27;`<br>if [ -z &quot;$pid&quot; ] ; then<br>        echo &quot;No $1 running.&quot;<br>else <br>\techo &quot;The $1($&#123;pid&#125;) is running...&quot;<br>\tkill $&#123;pid&#125;<br>\techo &quot;Send shutdown request to $1($&#123;pid&#125;) OK&quot;<br>fi<br><br>echo &quot;=====================启动nginx===================&quot;<br>/usr/local/nginx/sbin/nginx<br><br>echo &quot;=====================启动ridis===================&quot;<br>cd /opt/redis/redis-5.0.3/bin/<br>./redis-server redis.conf<br><br>## 启动服务<br>echo &quot;=====================正在启动项目=====================&quot;<br>nohup java -jar /out/teacher_plus/target/teacher_plus-0.0.1-SNAPSHOT.jar &gt;/out/project_log.out 2&gt;&amp;1 &amp;<br>echo &quot;=====================项目启动完毕=====================&quot;<br></code></pre></td></tr></table></figure>\n","site":{"data":{}},"wordcount":1736,"excerpt":"","more":"<h2 id=\"服务器部署—《linux加载git仓库代码打包并运行》\"><a href=\"#服务器部署—《linux加载git仓库代码打包并运行》\" class=\"headerlink\" title=\"#服务器部署—《linux加载git仓库代码打包并运行》\"></a>#服务器部署—《linux加载git仓库代码打包并运行》</h2><p>汇总篇：<br><a href=\"https://blog.huijia21.com/archives/fu-wu-qi-pei-zhi-pian-hui-zong-linuxjdktomcatmysqlnginxredisfastdfsmycatgitmaven\">服务器配置篇汇总（linux）+（jdk）+（tomcat）+（mysql）+（nginx）+（redis）+（fastDFS）+（mycat）</a><br>接上篇：<br><a href=\"https://blog.huijia.cf/2022/09/08/BookMark/%E8%BF%90%E7%BB%B4/%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2---%E3%80%8Amycat%E7%AF%87%E3%80%8B%20--%E8%8F%9C%E9%B8%9F%E5%B0%8F%E5%9B%9E/\">服务器部署—《mycat篇》</a></p>\n<hr>\n<h2 id=\"八、git安装\"><a href=\"#八、git安装\" class=\"headerlink\" title=\"八、git安装\"></a>八、git安装</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\"># 安装git<br>yum install git<br># 完成后查看git版本<br>git version<br></code></pre></td></tr></table></figure>\n<h2 id=\"九、maven安装\"><a href=\"#九、maven安装\" class=\"headerlink\" title=\"九、maven安装\"></a>九、maven安装</h2><ol>\n<li>创建：<code>mkdir -p /opt/maven</code></li>\n<li>进入：<code>cd /opt/maven</code></li>\n<li>下载：<code>wget http://file.huijia.cf/file/apache-maven-3.6.1-bin.tar.gz</code></li>\n<li>解压：<code>tar -zxvf apache-maven-3.6.1-bin.tar.gz</code></li>\n<li>编辑：<code>vi /etc/profile</code></li>\n<li>配置环境变量：<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">//进编辑模式<br>i <br>//文档最后添加：<br>export MAVEN_HOME=/opt/maven/apache-maven-3.6.1<br>export PATH=$MAVEN_HOME/bin:$PATH<br>//保存退出<br>ESC<br>:wq<br>//更新配置<br>source /etc/profile<br></code></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"十、shell脚本\"><a href=\"#十、shell脚本\" class=\"headerlink\" title=\"十、shell脚本\"></a>十、shell脚本</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">echo &quot;=====================删除原代码=====================&quot;<br>rm -rf /root/teacher_plus/<br>rm -rf /out/teacher_plus/<br>## 从git拉取代码<br>echo &quot;=====================拉取新代码=====================&quot;<br>git clone https://gitee.com/idse666666/teacher_plus.git<br><br>mv -f /root/teacher_plus/ /out/teacher_plus/<br>cd /out/teacher_plus/<br>## 构筑项目<br>echo &quot;=====================正在打包=====================&quot;<br>mvn clean install<br><br>## 关闭服务<br>echo &quot;=====================正在关闭jar服务=====================&quot;<br>pid=`ps ax | grep -i &#x27;jar&#x27; |grep java | grep -v grep | awk &#x27;&#123;print $1&#125;&#x27;`<br>if [ -z &quot;$pid&quot; ] ; then<br>        echo &quot;No $1 running.&quot;<br>else <br>\techo &quot;The $1($&#123;pid&#125;) is running...&quot;<br>\tkill $&#123;pid&#125;<br>\techo &quot;Send shutdown request to $1($&#123;pid&#125;) OK&quot;<br>fi<br><br>echo &quot;=====================启动nginx===================&quot;<br>/usr/local/nginx/sbin/nginx<br><br>echo &quot;=====================启动ridis===================&quot;<br>cd /opt/redis/redis-5.0.3/bin/<br>./redis-server redis.conf<br><br>## 启动服务<br>echo &quot;=====================正在启动项目=====================&quot;<br>nohup java -jar /out/teacher_plus/target/teacher_plus-0.0.1-SNAPSHOT.jar &gt;/out/project_log.out 2&gt;&amp;1 &amp;<br>echo &quot;=====================项目启动完毕=====================&quot;<br></code></pre></td></tr></table></figure>\n"},{"_content":"﻿﻿# 服务器配置篇汇总（linux）+（jdk）+（tomcat）+（mysql）+（nginx）+（redis）+（fastDFS）+（mycat）+（git）+(maven)\n---\n<font color=red size=5>本文说明：经一段时间学习，汇总整理了服务器配置方面的安装方式。发表在此用于分享交流学习！</font>\n+ [阿里服务器大礼包](https://www.aliyun.com/minisite/goods?userCode=e3v6m6yo) \n+ [ECS服务器购买程序](https://blog.csdn.net/qq_39231769/article/details/100587577)\n+ 相关运维教程：[从docker安装到前后端分离项目启动完成（docker安装mysql、nginx；启动jar包）](https://blog.csdn.net/qq_39231769/article/details/119008899?spm=1001.2014.3001.5502)\n---\n## 一、标题技术简介：\n1. linux：Linux是一套免费使用和自由传播的类Unix操作系统。主流版本：debian、ubuntu、centos；多用于服务器配置。此处不做过多介绍，大家自行百度。博主此次选用阿里云的ECS服务器。系统版本为Centos 7。\n2. jdk：Java 开发工具包。整个Java的核心，包括了Java运行环境JRE、Java工具和Java基础类库。java运行的必备环境，博主项目为java的 ssm+maven项目。所以需要安装jdk。\n3. tomcat：Tomcat 服务器是一个免费的开放源代码的Web 应用服务器。属于轻量级应用服务器，在中小型系统和并发访问用户不是很多的场合下被普遍使用，是开发和调试JSP 程序的首选。免费，快速，方便，易部署。这些特性让他成我我们首选服务器。\n4. mysql：MySQL是一个关系型数据库管理系统，由于其体积小、速度快、总体拥有成本低，尤其是开放源码这一特点，一般中小型网站的开发都选择 MySQL 作为网站数据库。博主项目数据库使用mysql数据库。\n5. nginx：Nginx (engine x) 是一个高性能的HTTP和反向代理web服务器，Nginx作为代理服务器。此处主要使用nginx配置负载均衡，让部署在两台ECS服务器的两个相同项目都可以被用户用同一域名访问。用一个域名去映射两个ip。配置负载，让项目更好的面对高并发。\n6. redis：是一个开源的使用ANSI C语言编写、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库。一个高性能的key-value数据库。由于使用上方的nginx代理服务器。客户端访问项目时很可能访问我们两台服务器上的同一项目。我们的项目session共享问题就需要借助redis短暂共享存储。\n7. fastDFS：FastDFS是一个开源的轻量级分布式文件系统，它对文件进行管理，功能包括：文件存储、文件同步、文件访问（文件上传、文件下载）等，解决了大容量存储和负载均衡的问题。博主项目中用到了图片上传下载功能。使用fastDFS制作一个属于自己的图库，再合适不过了。\n8. mycat：Mycat 是一个开源的分布式数据库系统，mycat是一个数据库中间件，也可以理解为是数据库代理。mycat的三大功能：分表、读写分离、主从切换。此处暂时只是简单模拟分表功能。也用来降低单个mysql数据库读写压力。\n9. git+maven:实现Spring Boot项目的快速上传服务器并打包运行\n\n---\n\n## 二、阿里云服务器的购买，简单配置连接在上篇博客已经写过。另外如果没有linux命令使用经验也建议先去阅读下方链接博文，比较详细。\n+ 链接：[阿里云服务器配置](https://blog.huijia21.com/archives/a-li-yun-fu-wu-qi-pei-zhi-linuxs-xi-tong-an-zhuang-jdktomcatmysql-hui-zong-xiang-xi-jiao-cheng--xiang-mu-shang-xian-fa-bu-zhong-de-bu-fen-xiao-bug-jie-jue-fang-an)\n\n---\n## 三、创建安全组规则（开放端口）\n1. 管理ECS![enter description here](https://imgconvert.csdnimg.cn/aHR0cDovL2hicS5pZHNlLnRvcC9ibG9nLzE1NzA5NzY4NzQzNjYucG5n?x-oss-process=image/format,png)\n2. 进去本实例安全组，配置规则。\n\n![image-20220509151906341](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509151906341.png)\n3. 快速创建规则\n![image-20220509151844712](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509151844712.png)\n4. 配置下方所用技术端口\n![image-20220509151914789](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509151914789.png)\n\n---\n# 四、标题技术安装方法。太长不易阅读，故分开发布。\n使用教程前请先安装wget以便下载相关安装包：`sudo yum install wget`\n\n[1.服务器部署---《jdk篇》](https://blog.huijia21.com/archives/fu-wu-qi-bu-shu-jdk-pian-)\n\n[2.服务器部署---《tomcat篇》](https://blog.huijia.cf/2022/09/08/BookMark/%E8%BF%90%E7%BB%B4/%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2---%E3%80%8Atomcat%E7%AF%87%E3%80%8B%20--%E8%8F%9C%E9%B8%9F%E5%B0%8F%E5%9B%9E/\n\n[3.服务器部署---《mysql篇》](https://blog.huijia21.com/archives/fu-wu-qi-bu-shu-mysql-pian-)\n\n[4.服务器部署---《nginx篇》](https://blog.huijia21.com/archives/fu-wu-qi-bu-shu-nginx-pian-)\n\n[5.服务器部署---《redis篇》](https://blog.huijia21.com/archives/fu-wu-qi-bu-shu-redis-pian-)\n\n[6.服务器部署---《fastDFS篇》](https://blog.huijia21.com/archives/fu-wu-qi-bu-shu-fastdfs-pian-)\n\n[7.服务器部署---《mycat篇》](https://blog.huijia.cf/2022/09/08/BookMark/%E8%BF%90%E7%BB%B4/%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2---%E3%80%8Amycat%E7%AF%87%E3%80%8B%20--%E8%8F%9C%E9%B8%9F%E5%B0%8F%E5%9B%9E/)\n\n[7.服务器部署---《linux加载git仓库代码打包并运行》](https://blog.huijia21.com/archives/fu-wu-qi-bu-shu-linux-jia-zai-git-cang-ku-dai-ma-da-bao-bing-yun-xing-)\n","source":"_posts/BookMark/运维/服务器配置篇汇总（linux）+（jdk）+（tomcat）+（mysql）+（nginx）+（redis）+（fastDFS）+（mycat）+（git）+(maven) --菜鸟小回.md","raw":"﻿﻿# 服务器配置篇汇总（linux）+（jdk）+（tomcat）+（mysql）+（nginx）+（redis）+（fastDFS）+（mycat）+（git）+(maven)\n---\n<font color=red size=5>本文说明：经一段时间学习，汇总整理了服务器配置方面的安装方式。发表在此用于分享交流学习！</font>\n+ [阿里服务器大礼包](https://www.aliyun.com/minisite/goods?userCode=e3v6m6yo) \n+ [ECS服务器购买程序](https://blog.csdn.net/qq_39231769/article/details/100587577)\n+ 相关运维教程：[从docker安装到前后端分离项目启动完成（docker安装mysql、nginx；启动jar包）](https://blog.csdn.net/qq_39231769/article/details/119008899?spm=1001.2014.3001.5502)\n---\n## 一、标题技术简介：\n1. linux：Linux是一套免费使用和自由传播的类Unix操作系统。主流版本：debian、ubuntu、centos；多用于服务器配置。此处不做过多介绍，大家自行百度。博主此次选用阿里云的ECS服务器。系统版本为Centos 7。\n2. jdk：Java 开发工具包。整个Java的核心，包括了Java运行环境JRE、Java工具和Java基础类库。java运行的必备环境，博主项目为java的 ssm+maven项目。所以需要安装jdk。\n3. tomcat：Tomcat 服务器是一个免费的开放源代码的Web 应用服务器。属于轻量级应用服务器，在中小型系统和并发访问用户不是很多的场合下被普遍使用，是开发和调试JSP 程序的首选。免费，快速，方便，易部署。这些特性让他成我我们首选服务器。\n4. mysql：MySQL是一个关系型数据库管理系统，由于其体积小、速度快、总体拥有成本低，尤其是开放源码这一特点，一般中小型网站的开发都选择 MySQL 作为网站数据库。博主项目数据库使用mysql数据库。\n5. nginx：Nginx (engine x) 是一个高性能的HTTP和反向代理web服务器，Nginx作为代理服务器。此处主要使用nginx配置负载均衡，让部署在两台ECS服务器的两个相同项目都可以被用户用同一域名访问。用一个域名去映射两个ip。配置负载，让项目更好的面对高并发。\n6. redis：是一个开源的使用ANSI C语言编写、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库。一个高性能的key-value数据库。由于使用上方的nginx代理服务器。客户端访问项目时很可能访问我们两台服务器上的同一项目。我们的项目session共享问题就需要借助redis短暂共享存储。\n7. fastDFS：FastDFS是一个开源的轻量级分布式文件系统，它对文件进行管理，功能包括：文件存储、文件同步、文件访问（文件上传、文件下载）等，解决了大容量存储和负载均衡的问题。博主项目中用到了图片上传下载功能。使用fastDFS制作一个属于自己的图库，再合适不过了。\n8. mycat：Mycat 是一个开源的分布式数据库系统，mycat是一个数据库中间件，也可以理解为是数据库代理。mycat的三大功能：分表、读写分离、主从切换。此处暂时只是简单模拟分表功能。也用来降低单个mysql数据库读写压力。\n9. git+maven:实现Spring Boot项目的快速上传服务器并打包运行\n\n---\n\n## 二、阿里云服务器的购买，简单配置连接在上篇博客已经写过。另外如果没有linux命令使用经验也建议先去阅读下方链接博文，比较详细。\n+ 链接：[阿里云服务器配置](https://blog.huijia21.com/archives/a-li-yun-fu-wu-qi-pei-zhi-linuxs-xi-tong-an-zhuang-jdktomcatmysql-hui-zong-xiang-xi-jiao-cheng--xiang-mu-shang-xian-fa-bu-zhong-de-bu-fen-xiao-bug-jie-jue-fang-an)\n\n---\n## 三、创建安全组规则（开放端口）\n1. 管理ECS![enter description here](https://imgconvert.csdnimg.cn/aHR0cDovL2hicS5pZHNlLnRvcC9ibG9nLzE1NzA5NzY4NzQzNjYucG5n?x-oss-process=image/format,png)\n2. 进去本实例安全组，配置规则。\n\n![image-20220509151906341](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509151906341.png)\n3. 快速创建规则\n![image-20220509151844712](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509151844712.png)\n4. 配置下方所用技术端口\n![image-20220509151914789](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509151914789.png)\n\n---\n# 四、标题技术安装方法。太长不易阅读，故分开发布。\n使用教程前请先安装wget以便下载相关安装包：`sudo yum install wget`\n\n[1.服务器部署---《jdk篇》](https://blog.huijia21.com/archives/fu-wu-qi-bu-shu-jdk-pian-)\n\n[2.服务器部署---《tomcat篇》](https://blog.huijia.cf/2022/09/08/BookMark/%E8%BF%90%E7%BB%B4/%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2---%E3%80%8Atomcat%E7%AF%87%E3%80%8B%20--%E8%8F%9C%E9%B8%9F%E5%B0%8F%E5%9B%9E/\n\n[3.服务器部署---《mysql篇》](https://blog.huijia21.com/archives/fu-wu-qi-bu-shu-mysql-pian-)\n\n[4.服务器部署---《nginx篇》](https://blog.huijia21.com/archives/fu-wu-qi-bu-shu-nginx-pian-)\n\n[5.服务器部署---《redis篇》](https://blog.huijia21.com/archives/fu-wu-qi-bu-shu-redis-pian-)\n\n[6.服务器部署---《fastDFS篇》](https://blog.huijia21.com/archives/fu-wu-qi-bu-shu-fastdfs-pian-)\n\n[7.服务器部署---《mycat篇》](https://blog.huijia.cf/2022/09/08/BookMark/%E8%BF%90%E7%BB%B4/%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2---%E3%80%8Amycat%E7%AF%87%E3%80%8B%20--%E8%8F%9C%E9%B8%9F%E5%B0%8F%E5%9B%9E/)\n\n[7.服务器部署---《linux加载git仓库代码打包并运行》](https://blog.huijia21.com/archives/fu-wu-qi-bu-shu-linux-jia-zai-git-cang-ku-dai-ma-da-bao-bing-yun-xing-)\n","slug":"BookMark/运维/服务器配置篇汇总（linux）+（jdk）+（tomcat）+（mysql）+（nginx）+（redis）+（fastDFS）+（mycat）+（git）+(maven) --菜鸟小回","published":1,"date":"2022-07-18T09:51:35.000Z","updated":"2022-09-01T10:02:40.511Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cl7ptszov003faba57fvhbar1","content":"<h1><span id=\"服务器配置篇汇总linuxjdktomcatmysqlnginxredisfastdfsmycatgitmaven\">服务器配置篇汇总（linux）+（jdk）+（tomcat）+（mysql）+（nginx）+（redis）+（fastDFS）+（mycat）+（git）+(maven)</span></h1><hr>\n<p><font color=\"red\" size=\"5\">本文说明：经一段时间学习，汇总整理了服务器配置方面的安装方式。发表在此用于分享交流学习！</font></p>\n<ul>\n<li><a href=\"https://www.aliyun.com/minisite/goods?userCode=e3v6m6yo\">阿里服务器大礼包</a> </li>\n<li><a href=\"https://blog.csdn.net/qq_39231769/article/details/100587577\">ECS服务器购买程序</a></li>\n<li>相关运维教程：<a href=\"https://blog.csdn.net/qq_39231769/article/details/119008899?spm=1001.2014.3001.5502\">从docker安装到前后端分离项目启动完成（docker安装mysql、nginx；启动jar包）</a></li>\n</ul>\n<hr>\n<h2><span id=\"一-标题技术简介\">一、标题技术简介：</span></h2><ol>\n<li>linux：Linux是一套免费使用和自由传播的类Unix操作系统。主流版本：debian、ubuntu、centos；多用于服务器配置。此处不做过多介绍，大家自行百度。博主此次选用阿里云的ECS服务器。系统版本为Centos 7。</li>\n<li>jdk：Java 开发工具包。整个Java的核心，包括了Java运行环境JRE、Java工具和Java基础类库。java运行的必备环境，博主项目为java的 ssm+maven项目。所以需要安装jdk。</li>\n<li>tomcat：Tomcat 服务器是一个免费的开放源代码的Web 应用服务器。属于轻量级应用服务器，在中小型系统和并发访问用户不是很多的场合下被普遍使用，是开发和调试JSP 程序的首选。免费，快速，方便，易部署。这些特性让他成我我们首选服务器。</li>\n<li>mysql：MySQL是一个关系型数据库管理系统，由于其体积小、速度快、总体拥有成本低，尤其是开放源码这一特点，一般中小型网站的开发都选择 MySQL 作为网站数据库。博主项目数据库使用mysql数据库。</li>\n<li>nginx：Nginx (engine x) 是一个高性能的HTTP和反向代理web服务器，Nginx作为代理服务器。此处主要使用nginx配置负载均衡，让部署在两台ECS服务器的两个相同项目都可以被用户用同一域名访问。用一个域名去映射两个ip。配置负载，让项目更好的面对高并发。</li>\n<li>redis：是一个开源的使用ANSI C语言编写、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库。一个高性能的key-value数据库。由于使用上方的nginx代理服务器。客户端访问项目时很可能访问我们两台服务器上的同一项目。我们的项目session共享问题就需要借助redis短暂共享存储。</li>\n<li>fastDFS：FastDFS是一个开源的轻量级分布式文件系统，它对文件进行管理，功能包括：文件存储、文件同步、文件访问（文件上传、文件下载）等，解决了大容量存储和负载均衡的问题。博主项目中用到了图片上传下载功能。使用fastDFS制作一个属于自己的图库，再合适不过了。</li>\n<li>mycat：Mycat 是一个开源的分布式数据库系统，mycat是一个数据库中间件，也可以理解为是数据库代理。mycat的三大功能：分表、读写分离、主从切换。此处暂时只是简单模拟分表功能。也用来降低单个mysql数据库读写压力。</li>\n<li>git+maven:实现Spring Boot项目的快速上传服务器并打包运行</li>\n</ol>\n<hr>\n<h2><span id=\"二-阿里云服务器的购买简单配置连接在上篇博客已经写过-另外如果没有linux命令使用经验也建议先去阅读下方链接博文比较详细\">二、阿里云服务器的购买，简单配置连接在上篇博客已经写过。另外如果没有linux命令使用经验也建议先去阅读下方链接博文，比较详细。</span></h2><ul>\n<li>链接：<a href=\"https://blog.huijia21.com/archives/a-li-yun-fu-wu-qi-pei-zhi-linuxs-xi-tong-an-zhuang-jdktomcatmysql-hui-zong-xiang-xi-jiao-cheng--xiang-mu-shang-xian-fa-bu-zhong-de-bu-fen-xiao-bug-jie-jue-fang-an\">阿里云服务器配置</a></li>\n</ul>\n<hr>\n<h2><span id=\"三-创建安全组规则开放端口\">三、创建安全组规则（开放端口）</span></h2><ol>\n<li>管理ECS<img src=\"https://imgconvert.csdnimg.cn/aHR0cDovL2hicS5pZHNlLnRvcC9ibG9nLzE1NzA5NzY4NzQzNjYucG5n?x-oss-process=image/format,png\" alt=\"enter description here\"></li>\n<li>进去本实例安全组，配置规则。</li>\n</ol>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509151906341.png\" alt=\"image-20220509151906341\"><br>3. 快速创建规则<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509151844712.png\" alt=\"image-20220509151844712\"><br>4. 配置下方所用技术端口<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509151914789.png\" alt=\"image-20220509151914789\"></p>\n<hr>\n<h1><span id=\"四-标题技术安装方法-太长不易阅读故分开发布\">四、标题技术安装方法。太长不易阅读，故分开发布。</span></h1><p>使用教程前请先安装wget以便下载相关安装包：<code>sudo yum install wget</code></p>\n<p><a href=\"https://blog.huijia21.com/archives/fu-wu-qi-bu-shu-jdk-pian-\">1.服务器部署—《jdk篇》</a></p>\n<p><a href=\"https://blog.huijia21.com/archives/fu-wu-qi-bu-shu-tomcat-pian-\">2.服务器部署—《tomcat篇》</a></p>\n<p><a href=\"https://blog.huijia21.com/archives/fu-wu-qi-bu-shu-mysql-pian-\">3.服务器部署—《mysql篇》</a></p>\n<p><a href=\"https://blog.huijia21.com/archives/fu-wu-qi-bu-shu-nginx-pian-\">4.服务器部署—《nginx篇》</a></p>\n<p><a href=\"https://blog.huijia21.com/archives/fu-wu-qi-bu-shu-redis-pian-\">5.服务器部署—《redis篇》</a></p>\n<p><a href=\"https://blog.huijia21.com/archives/fu-wu-qi-bu-shu-fastdfs-pian-\">6.服务器部署—《fastDFS篇》</a></p>\n<p><a href=\"https://blog.huijia.cf/2022/09/08/BookMark/%E8%BF%90%E7%BB%B4/%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2---%E3%80%8Amycat%E7%AF%87%E3%80%8B%20--%E8%8F%9C%E9%B8%9F%E5%B0%8F%E5%9B%9E/\">7.服务器部署—《mycat篇》</a></p>\n<p><a href=\"https://blog.huijia21.com/archives/fu-wu-qi-bu-shu-linux-jia-zai-git-cang-ku-dai-ma-da-bao-bing-yun-xing-\">7.服务器部署—《linux加载git仓库代码打包并运行》</a></p>\n","site":{"data":{}},"wordcount":1558,"excerpt":"","more":"<h1 id=\"服务器配置篇汇总（linux）-（jdk）-（tomcat）-（mysql）-（nginx）-（redis）-（fastDFS）-（mycat）-（git）-maven\"><a href=\"#服务器配置篇汇总（linux）-（jdk）-（tomcat）-（mysql）-（nginx）-（redis）-（fastDFS）-（mycat）-（git）-maven\" class=\"headerlink\" title=\"服务器配置篇汇总（linux）+（jdk）+（tomcat）+（mysql）+（nginx）+（redis）+（fastDFS）+（mycat）+（git）+(maven)\"></a>服务器配置篇汇总（linux）+（jdk）+（tomcat）+（mysql）+（nginx）+（redis）+（fastDFS）+（mycat）+（git）+(maven)</h1><hr>\n<p><font color=red size=5>本文说明：经一段时间学习，汇总整理了服务器配置方面的安装方式。发表在此用于分享交流学习！</font></p>\n<ul>\n<li><a href=\"https://www.aliyun.com/minisite/goods?userCode=e3v6m6yo\">阿里服务器大礼包</a> </li>\n<li><a href=\"https://blog.csdn.net/qq_39231769/article/details/100587577\">ECS服务器购买程序</a></li>\n<li>相关运维教程：<a href=\"https://blog.csdn.net/qq_39231769/article/details/119008899?spm=1001.2014.3001.5502\">从docker安装到前后端分离项目启动完成（docker安装mysql、nginx；启动jar包）</a></li>\n</ul>\n<hr>\n<h2 id=\"一、标题技术简介：\"><a href=\"#一、标题技术简介：\" class=\"headerlink\" title=\"一、标题技术简介：\"></a>一、标题技术简介：</h2><ol>\n<li>linux：Linux是一套免费使用和自由传播的类Unix操作系统。主流版本：debian、ubuntu、centos；多用于服务器配置。此处不做过多介绍，大家自行百度。博主此次选用阿里云的ECS服务器。系统版本为Centos 7。</li>\n<li>jdk：Java 开发工具包。整个Java的核心，包括了Java运行环境JRE、Java工具和Java基础类库。java运行的必备环境，博主项目为java的 ssm+maven项目。所以需要安装jdk。</li>\n<li>tomcat：Tomcat 服务器是一个免费的开放源代码的Web 应用服务器。属于轻量级应用服务器，在中小型系统和并发访问用户不是很多的场合下被普遍使用，是开发和调试JSP 程序的首选。免费，快速，方便，易部署。这些特性让他成我我们首选服务器。</li>\n<li>mysql：MySQL是一个关系型数据库管理系统，由于其体积小、速度快、总体拥有成本低，尤其是开放源码这一特点，一般中小型网站的开发都选择 MySQL 作为网站数据库。博主项目数据库使用mysql数据库。</li>\n<li>nginx：Nginx (engine x) 是一个高性能的HTTP和反向代理web服务器，Nginx作为代理服务器。此处主要使用nginx配置负载均衡，让部署在两台ECS服务器的两个相同项目都可以被用户用同一域名访问。用一个域名去映射两个ip。配置负载，让项目更好的面对高并发。</li>\n<li>redis：是一个开源的使用ANSI C语言编写、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库。一个高性能的key-value数据库。由于使用上方的nginx代理服务器。客户端访问项目时很可能访问我们两台服务器上的同一项目。我们的项目session共享问题就需要借助redis短暂共享存储。</li>\n<li>fastDFS：FastDFS是一个开源的轻量级分布式文件系统，它对文件进行管理，功能包括：文件存储、文件同步、文件访问（文件上传、文件下载）等，解决了大容量存储和负载均衡的问题。博主项目中用到了图片上传下载功能。使用fastDFS制作一个属于自己的图库，再合适不过了。</li>\n<li>mycat：Mycat 是一个开源的分布式数据库系统，mycat是一个数据库中间件，也可以理解为是数据库代理。mycat的三大功能：分表、读写分离、主从切换。此处暂时只是简单模拟分表功能。也用来降低单个mysql数据库读写压力。</li>\n<li>git+maven:实现Spring Boot项目的快速上传服务器并打包运行</li>\n</ol>\n<hr>\n<h2 id=\"二、阿里云服务器的购买，简单配置连接在上篇博客已经写过。另外如果没有linux命令使用经验也建议先去阅读下方链接博文，比较详细。\"><a href=\"#二、阿里云服务器的购买，简单配置连接在上篇博客已经写过。另外如果没有linux命令使用经验也建议先去阅读下方链接博文，比较详细。\" class=\"headerlink\" title=\"二、阿里云服务器的购买，简单配置连接在上篇博客已经写过。另外如果没有linux命令使用经验也建议先去阅读下方链接博文，比较详细。\"></a>二、阿里云服务器的购买，简单配置连接在上篇博客已经写过。另外如果没有linux命令使用经验也建议先去阅读下方链接博文，比较详细。</h2><ul>\n<li>链接：<a href=\"https://blog.huijia21.com/archives/a-li-yun-fu-wu-qi-pei-zhi-linuxs-xi-tong-an-zhuang-jdktomcatmysql-hui-zong-xiang-xi-jiao-cheng--xiang-mu-shang-xian-fa-bu-zhong-de-bu-fen-xiao-bug-jie-jue-fang-an\">阿里云服务器配置</a></li>\n</ul>\n<hr>\n<h2 id=\"三、创建安全组规则（开放端口）\"><a href=\"#三、创建安全组规则（开放端口）\" class=\"headerlink\" title=\"三、创建安全组规则（开放端口）\"></a>三、创建安全组规则（开放端口）</h2><ol>\n<li>管理ECS<img src=\"https://imgconvert.csdnimg.cn/aHR0cDovL2hicS5pZHNlLnRvcC9ibG9nLzE1NzA5NzY4NzQzNjYucG5n?x-oss-process=image/format,png\" alt=\"enter description here\"></li>\n<li>进去本实例安全组，配置规则。</li>\n</ol>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509151906341.png\" alt=\"image-20220509151906341\"><br>3. 快速创建规则<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509151844712.png\" alt=\"image-20220509151844712\"><br>4. 配置下方所用技术端口<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509151914789.png\" alt=\"image-20220509151914789\"></p>\n<hr>\n<h1 id=\"四、标题技术安装方法。太长不易阅读，故分开发布。\"><a href=\"#四、标题技术安装方法。太长不易阅读，故分开发布。\" class=\"headerlink\" title=\"四、标题技术安装方法。太长不易阅读，故分开发布。\"></a>四、标题技术安装方法。太长不易阅读，故分开发布。</h1><p>使用教程前请先安装wget以便下载相关安装包：<code>sudo yum install wget</code></p>\n<p><a href=\"https://blog.huijia21.com/archives/fu-wu-qi-bu-shu-jdk-pian-\">1.服务器部署—《jdk篇》</a></p>\n<p><a href=\"https://blog.huijia21.com/archives/fu-wu-qi-bu-shu-tomcat-pian-\">2.服务器部署—《tomcat篇》</a></p>\n<p><a href=\"https://blog.huijia21.com/archives/fu-wu-qi-bu-shu-mysql-pian-\">3.服务器部署—《mysql篇》</a></p>\n<p><a href=\"https://blog.huijia21.com/archives/fu-wu-qi-bu-shu-nginx-pian-\">4.服务器部署—《nginx篇》</a></p>\n<p><a href=\"https://blog.huijia21.com/archives/fu-wu-qi-bu-shu-redis-pian-\">5.服务器部署—《redis篇》</a></p>\n<p><a href=\"https://blog.huijia21.com/archives/fu-wu-qi-bu-shu-fastdfs-pian-\">6.服务器部署—《fastDFS篇》</a></p>\n<p><a href=\"https://blog.huijia.cf/2022/09/08/BookMark/%E8%BF%90%E7%BB%B4/%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2---%E3%80%8Amycat%E7%AF%87%E3%80%8B%20--%E8%8F%9C%E9%B8%9F%E5%B0%8F%E5%9B%9E/\">7.服务器部署—《mycat篇》</a></p>\n<p><a href=\"https://blog.huijia21.com/archives/fu-wu-qi-bu-shu-linux-jia-zai-git-cang-ku-dai-ma-da-bao-bing-yun-xing-\">7.服务器部署—《linux加载git仓库代码打包并运行》</a></p>\n"},{"_content":" # 虚拟机安装centos7并配置网络\n---\n[toc]\n\n---\n# 一、软件准备\n+ 虚拟机：[VMware](https://www.aliyundrive.com/s/qpLZrLZyWav)\n+ 系统镜像：[Centos7](http://mirrors.163.com/centos/7/isos/x86_64/CentOS-7-x86_64-DVD-2009.iso)\n注：虚拟机安装教程参考文件内教程连接。鸣谢 “软件智库”！（侵删）\n\n---\n\n\n\n# 二、新建虚拟机\n\n##  1.“文件”->“新建虚拟机”->“自定义”\n![image-20220509175549104](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509175549104.png)\n##  2.默认硬件兼容性\n![image-20220509175554682](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509175554682.png)\n## 3.稍后安装操作系统\n![image-20220509175601779](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509175601779.png)\n## 4.选择“Linux”操作系统，“CentOS 7 64 位”\n![image-20220509175608411](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509175608411.png)\n## 5.定义虚拟机名字和位置\n![image-20220509175616641](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509175616641.png)\n## 6.处理器配置，虚拟机内存等默认即可\n## 7.网络类型选择“使用网络地址转换”\n![image-20220509175625265](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509175625265.png)\n## 8.控制器类型选择，磁盘类型 “推荐”即可\n![image-20220509175634123](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509175634123.png)\n![image-20220509175644381](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509175644381.png)\n\n## 9.磁盘“新建”，容量自定义\n![image-20220509175651338](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509175651338.png)\n![image-20220509175657980](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509175657980.png)\n\n## 10.默认到下一步到完成，可以在虚拟机列表找到新建的虚拟机\n![image-20220509175709634](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509175709634.png)\n![image-20220509175716557](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509175716557.png)\n![image-20220509175724252](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509175724252.png)\n\n---\n\n# 三、配置虚拟机镜像，安装系统\n## 1.进入虚拟机设置选择“CD/DVD”，选定你下载好的ISO映像文件\n![image-20220509175736410](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509175736410.png)\n![image-20220509175743409](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509175743409.png)\n\n## 2.开机 并 配置系统\n### 2-1.选择安装系统\n![image-20220509175750267](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509175750267.png)\n### 2-2.选择语言拉到最下方有中文\n![image-20220509175757193](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509175757193.png)\n### 2-3.安装信息点击“安装位置”->“完成”->“开始安装”\n![image-20220509175803657](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509175803657.png)\n![image-20220509175811105](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509175811105.png)\n![image-20220509175816581](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509175816581.png)\n\n### 2-4.设置“root密码”->“完成”，等待安装\n![image-20220509175823109](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509175823109.png)\n### 2-5.安装完成“重启”，启动后输入账号和密码\n+ 账号：默认：root\n+ 密码：你自己设置的密码，输入是隐形的无法看到\n![image-20220509175836903](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509175836903.png)\n### 2-6.登录系统，安装完成\n![image-20220509175843207](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509175843207.png)\n\n---\n\n# 四、设置虚拟机网络\n## 1.虚拟机设置->网络适配器->桥接模式\n![image-20220509175852742](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509175852742.png)\n## 2.查看<font color=red size=5>寄主机（本机）</font>的网络设置-> cmd模式->ipconfig\n![image-20220509175901207](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509175901207.png)\n## 3.进入centos编辑\" ifcfg-ens33\"文件\n```javascript?linenums\nvi /etc/sysconfig/network-scripts/ifcfg-ens33\n//修改红色区内容\nBOOTPROTO=static\nONBOOT=yes\n//新增黄色区内容；IPADDR：就是ip保持频段与寄主机相同；GATEWAY：就是网关，直接保持与寄主机相同，DNS固定即可。\nIPADDR=192.168.1.250\nGATEWAY=192.168.1.1\nDNS1=114.114.114.114\nDNS2=8.8.8.8\n```\n![image-20220509175909441](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509175909441.png)\n\n ## 4.编辑\"resolv.conf\"文件\n ```javascript?linenums\nvi /etc/resolv.conf\n//添加如下内容即可\nnameserver 114.114.114.114\nnameserver 8.8.8.8\n ```\n\n## 5.重启network;\n`service network restart`\n\n---\n附加命令：\n```javascript?linenums\n查看防火墙状态：firewall-cmd --state\n停止防火墙服务：systemctl stop firewalld.service\n进制开机自启动：systemctl disable firewalld.service\n```\n","source":"_posts/BookMark/运维/虚拟机安装centos7并配置网络.md","raw":" # 虚拟机安装centos7并配置网络\n---\n[toc]\n\n---\n# 一、软件准备\n+ 虚拟机：[VMware](https://www.aliyundrive.com/s/qpLZrLZyWav)\n+ 系统镜像：[Centos7](http://mirrors.163.com/centos/7/isos/x86_64/CentOS-7-x86_64-DVD-2009.iso)\n注：虚拟机安装教程参考文件内教程连接。鸣谢 “软件智库”！（侵删）\n\n---\n\n\n\n# 二、新建虚拟机\n\n##  1.“文件”->“新建虚拟机”->“自定义”\n![image-20220509175549104](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509175549104.png)\n##  2.默认硬件兼容性\n![image-20220509175554682](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509175554682.png)\n## 3.稍后安装操作系统\n![image-20220509175601779](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509175601779.png)\n## 4.选择“Linux”操作系统，“CentOS 7 64 位”\n![image-20220509175608411](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509175608411.png)\n## 5.定义虚拟机名字和位置\n![image-20220509175616641](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509175616641.png)\n## 6.处理器配置，虚拟机内存等默认即可\n## 7.网络类型选择“使用网络地址转换”\n![image-20220509175625265](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509175625265.png)\n## 8.控制器类型选择，磁盘类型 “推荐”即可\n![image-20220509175634123](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509175634123.png)\n![image-20220509175644381](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509175644381.png)\n\n## 9.磁盘“新建”，容量自定义\n![image-20220509175651338](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509175651338.png)\n![image-20220509175657980](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509175657980.png)\n\n## 10.默认到下一步到完成，可以在虚拟机列表找到新建的虚拟机\n![image-20220509175709634](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509175709634.png)\n![image-20220509175716557](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509175716557.png)\n![image-20220509175724252](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509175724252.png)\n\n---\n\n# 三、配置虚拟机镜像，安装系统\n## 1.进入虚拟机设置选择“CD/DVD”，选定你下载好的ISO映像文件\n![image-20220509175736410](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509175736410.png)\n![image-20220509175743409](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509175743409.png)\n\n## 2.开机 并 配置系统\n### 2-1.选择安装系统\n![image-20220509175750267](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509175750267.png)\n### 2-2.选择语言拉到最下方有中文\n![image-20220509175757193](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509175757193.png)\n### 2-3.安装信息点击“安装位置”->“完成”->“开始安装”\n![image-20220509175803657](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509175803657.png)\n![image-20220509175811105](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509175811105.png)\n![image-20220509175816581](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509175816581.png)\n\n### 2-4.设置“root密码”->“完成”，等待安装\n![image-20220509175823109](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509175823109.png)\n### 2-5.安装完成“重启”，启动后输入账号和密码\n+ 账号：默认：root\n+ 密码：你自己设置的密码，输入是隐形的无法看到\n![image-20220509175836903](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509175836903.png)\n### 2-6.登录系统，安装完成\n![image-20220509175843207](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509175843207.png)\n\n---\n\n# 四、设置虚拟机网络\n## 1.虚拟机设置->网络适配器->桥接模式\n![image-20220509175852742](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509175852742.png)\n## 2.查看<font color=red size=5>寄主机（本机）</font>的网络设置-> cmd模式->ipconfig\n![image-20220509175901207](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509175901207.png)\n## 3.进入centos编辑\" ifcfg-ens33\"文件\n```javascript?linenums\nvi /etc/sysconfig/network-scripts/ifcfg-ens33\n//修改红色区内容\nBOOTPROTO=static\nONBOOT=yes\n//新增黄色区内容；IPADDR：就是ip保持频段与寄主机相同；GATEWAY：就是网关，直接保持与寄主机相同，DNS固定即可。\nIPADDR=192.168.1.250\nGATEWAY=192.168.1.1\nDNS1=114.114.114.114\nDNS2=8.8.8.8\n```\n![image-20220509175909441](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509175909441.png)\n\n ## 4.编辑\"resolv.conf\"文件\n ```javascript?linenums\nvi /etc/resolv.conf\n//添加如下内容即可\nnameserver 114.114.114.114\nnameserver 8.8.8.8\n ```\n\n## 5.重启network;\n`service network restart`\n\n---\n附加命令：\n```javascript?linenums\n查看防火墙状态：firewall-cmd --state\n停止防火墙服务：systemctl stop firewalld.service\n进制开机自启动：systemctl disable firewalld.service\n```\n","slug":"BookMark/运维/虚拟机安装centos7并配置网络","published":1,"date":"2022-07-18T09:51:36.000Z","updated":"2022-09-01T10:02:40.578Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cl7ptszov003gaba58w4f6ii5","content":"<h1><span id=\"虚拟机安装centos7并配置网络\">虚拟机安装centos7并配置网络</span></h1><hr>\n<p>[toc]</p>\n<hr>\n<h1><span id=\"一-软件准备\">一、软件准备</span></h1><ul>\n<li>虚拟机：<a href=\"https://www.aliyundrive.com/s/qpLZrLZyWav\">VMware</a></li>\n<li>系统镜像：<a href=\"http://mirrors.163.com/centos/7/isos/x86_64/CentOS-7-x86_64-DVD-2009.iso\">Centos7</a><br>注：虚拟机安装教程参考文件内教程连接。鸣谢 “软件智库”！（侵删）</li>\n</ul>\n<hr>\n<h1><span id=\"二-新建虚拟机\">二、新建虚拟机</span></h1><h2><span id=\"1文件-gt新建虚拟机-gt自定义\">1.“文件”-&gt;“新建虚拟机”-&gt;“自定义”</span></h2><p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509175549104.png\" alt=\"image-20220509175549104\"></p>\n<h2><span id=\"2默认硬件兼容性\">2.默认硬件兼容性</span></h2><p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509175554682.png\" alt=\"image-20220509175554682\"></p>\n<h2><span id=\"3稍后安装操作系统\">3.稍后安装操作系统</span></h2><p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509175601779.png\" alt=\"image-20220509175601779\"></p>\n<h2><span id=\"4选择linux操作系统centos-7-64-位\">4.选择“Linux”操作系统，“CentOS 7 64 位”</span></h2><p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509175608411.png\" alt=\"image-20220509175608411\"></p>\n<h2><span id=\"5定义虚拟机名字和位置\">5.定义虚拟机名字和位置</span></h2><p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509175616641.png\" alt=\"image-20220509175616641\"></p>\n<h2><span id=\"6处理器配置虚拟机内存等默认即可\">6.处理器配置，虚拟机内存等默认即可</span></h2><h2><span id=\"7网络类型选择使用网络地址转换\">7.网络类型选择“使用网络地址转换”</span></h2><p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509175625265.png\" alt=\"image-20220509175625265\"></p>\n<h2><span id=\"8控制器类型选择磁盘类型-推荐即可\">8.控制器类型选择，磁盘类型 “推荐”即可</span></h2><p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509175634123.png\" alt=\"image-20220509175634123\"><br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509175644381.png\" alt=\"image-20220509175644381\"></p>\n<h2><span id=\"9磁盘新建容量自定义\">9.磁盘“新建”，容量自定义</span></h2><p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509175651338.png\" alt=\"image-20220509175651338\"><br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509175657980.png\" alt=\"image-20220509175657980\"></p>\n<h2><span id=\"10默认到下一步到完成可以在虚拟机列表找到新建的虚拟机\">10.默认到下一步到完成，可以在虚拟机列表找到新建的虚拟机</span></h2><p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509175709634.png\" alt=\"image-20220509175709634\"><br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509175716557.png\" alt=\"image-20220509175716557\"><br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509175724252.png\" alt=\"image-20220509175724252\"></p>\n<hr>\n<h1><span id=\"三-配置虚拟机镜像安装系统\">三、配置虚拟机镜像，安装系统</span></h1><h2><span id=\"1进入虚拟机设置选择cdx2fdvd选定你下载好的iso映像文件\">1.进入虚拟机设置选择“CD&#x2F;DVD”，选定你下载好的ISO映像文件</span></h2><p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509175736410.png\" alt=\"image-20220509175736410\"><br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509175743409.png\" alt=\"image-20220509175743409\"></p>\n<h2><span id=\"2开机-并-配置系统\">2.开机 并 配置系统</span></h2><h3><span id=\"2-1选择安装系统\">2-1.选择安装系统</span></h3><p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509175750267.png\" alt=\"image-20220509175750267\"></p>\n<h3><span id=\"2-2选择语言拉到最下方有中文\">2-2.选择语言拉到最下方有中文</span></h3><p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509175757193.png\" alt=\"image-20220509175757193\"></p>\n<h3><span id=\"2-3安装信息点击安装位置-gt完成-gt开始安装\">2-3.安装信息点击“安装位置”-&gt;“完成”-&gt;“开始安装”</span></h3><p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509175803657.png\" alt=\"image-20220509175803657\"><br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509175811105.png\" alt=\"image-20220509175811105\"><br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509175816581.png\" alt=\"image-20220509175816581\"></p>\n<h3><span id=\"2-4设置root密码-gt完成等待安装\">2-4.设置“root密码”-&gt;“完成”，等待安装</span></h3><p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509175823109.png\" alt=\"image-20220509175823109\"></p>\n<h3><span id=\"2-5安装完成重启启动后输入账号和密码\">2-5.安装完成“重启”，启动后输入账号和密码</span></h3><ul>\n<li>账号：默认：root</li>\n<li>密码：你自己设置的密码，输入是隐形的无法看到<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509175836903.png\" alt=\"image-20220509175836903\"></li>\n</ul>\n<h3><span id=\"2-6登录系统安装完成\">2-6.登录系统，安装完成</span></h3><p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509175843207.png\" alt=\"image-20220509175843207\"></p>\n<hr>\n<h1><span id=\"四-设置虚拟机网络\">四、设置虚拟机网络</span></h1><h2><span id=\"1虚拟机设置-gt网络适配器-gt桥接模式\">1.虚拟机设置-&gt;网络适配器-&gt;桥接模式</span></h2><p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509175852742.png\" alt=\"image-20220509175852742\"></p>\n<h2><span id=\"2查看寄主机本机的网络设置-gt-cmd模式-gtipconfig\">2.查看<font color=\"red\" size=\"5\">寄主机（本机）</font>的网络设置-&gt; cmd模式-&gt;ipconfig</span></h2><p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509175901207.png\" alt=\"image-20220509175901207\"></p>\n<h2><span id=\"3进入centos编辑-ifcfg-ens33文件\">3.进入centos编辑” ifcfg-ens33”文件</span></h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">vi /etc/sysconfig/network-scripts/ifcfg-ens33<br>//修改红色区内容<br>BOOTPROTO=static<br>ONBOOT=yes<br>//新增黄色区内容；IPADDR：就是ip保持频段与寄主机相同；GATEWAY：就是网关，直接保持与寄主机相同，DNS固定即可。<br>IPADDR=192.168.1.250<br>GATEWAY=192.168.1.1<br>DNS1=114.114.114.114<br>DNS2=8.8.8.8<br></code></pre></td></tr></table></figure>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509175909441.png\" alt=\"image-20220509175909441\"></p>\n<h2><span id=\"4编辑resolvconf文件\">4.编辑”resolv.conf”文件</span></h2> <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">vi /etc/resolv.conf<br>//添加如下内容即可<br>nameserver 114.114.114.114<br>nameserver 8.8.8.8<br></code></pre></td></tr></table></figure>\n\n<h2><span id=\"5重启network\">5.重启network;</span></h2><p><code>service network restart</code></p>\n<hr>\n<p>附加命令：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">查看防火墙状态：firewall-cmd --state<br>停止防火墙服务：systemctl stop firewalld.service<br>进制开机自启动：systemctl disable firewalld.service<br></code></pre></td></tr></table></figure>\n","site":{"data":{}},"wordcount":1059,"excerpt":"","more":"<h1 id=\"虚拟机安装centos7并配置网络\"><a href=\"#虚拟机安装centos7并配置网络\" class=\"headerlink\" title=\"虚拟机安装centos7并配置网络\"></a>虚拟机安装centos7并配置网络</h1><hr>\n<p>[toc]</p>\n<hr>\n<h1 id=\"一、软件准备\"><a href=\"#一、软件准备\" class=\"headerlink\" title=\"一、软件准备\"></a>一、软件准备</h1><ul>\n<li>虚拟机：<a href=\"https://www.aliyundrive.com/s/qpLZrLZyWav\">VMware</a></li>\n<li>系统镜像：<a href=\"http://mirrors.163.com/centos/7/isos/x86_64/CentOS-7-x86_64-DVD-2009.iso\">Centos7</a><br>注：虚拟机安装教程参考文件内教程连接。鸣谢 “软件智库”！（侵删）</li>\n</ul>\n<hr>\n<h1 id=\"二、新建虚拟机\"><a href=\"#二、新建虚拟机\" class=\"headerlink\" title=\"二、新建虚拟机\"></a>二、新建虚拟机</h1><h2 id=\"1-“文件”-gt-“新建虚拟机”-gt-“自定义”\"><a href=\"#1-“文件”-gt-“新建虚拟机”-gt-“自定义”\" class=\"headerlink\" title=\"1.“文件”-&gt;“新建虚拟机”-&gt;“自定义”\"></a>1.“文件”-&gt;“新建虚拟机”-&gt;“自定义”</h2><p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509175549104.png\" alt=\"image-20220509175549104\"></p>\n<h2 id=\"2-默认硬件兼容性\"><a href=\"#2-默认硬件兼容性\" class=\"headerlink\" title=\"2.默认硬件兼容性\"></a>2.默认硬件兼容性</h2><p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509175554682.png\" alt=\"image-20220509175554682\"></p>\n<h2 id=\"3-稍后安装操作系统\"><a href=\"#3-稍后安装操作系统\" class=\"headerlink\" title=\"3.稍后安装操作系统\"></a>3.稍后安装操作系统</h2><p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509175601779.png\" alt=\"image-20220509175601779\"></p>\n<h2 id=\"4-选择“Linux”操作系统，“CentOS-7-64-位”\"><a href=\"#4-选择“Linux”操作系统，“CentOS-7-64-位”\" class=\"headerlink\" title=\"4.选择“Linux”操作系统，“CentOS 7 64 位”\"></a>4.选择“Linux”操作系统，“CentOS 7 64 位”</h2><p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509175608411.png\" alt=\"image-20220509175608411\"></p>\n<h2 id=\"5-定义虚拟机名字和位置\"><a href=\"#5-定义虚拟机名字和位置\" class=\"headerlink\" title=\"5.定义虚拟机名字和位置\"></a>5.定义虚拟机名字和位置</h2><p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509175616641.png\" alt=\"image-20220509175616641\"></p>\n<h2 id=\"6-处理器配置，虚拟机内存等默认即可\"><a href=\"#6-处理器配置，虚拟机内存等默认即可\" class=\"headerlink\" title=\"6.处理器配置，虚拟机内存等默认即可\"></a>6.处理器配置，虚拟机内存等默认即可</h2><h2 id=\"7-网络类型选择“使用网络地址转换”\"><a href=\"#7-网络类型选择“使用网络地址转换”\" class=\"headerlink\" title=\"7.网络类型选择“使用网络地址转换”\"></a>7.网络类型选择“使用网络地址转换”</h2><p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509175625265.png\" alt=\"image-20220509175625265\"></p>\n<h2 id=\"8-控制器类型选择，磁盘类型-“推荐”即可\"><a href=\"#8-控制器类型选择，磁盘类型-“推荐”即可\" class=\"headerlink\" title=\"8.控制器类型选择，磁盘类型 “推荐”即可\"></a>8.控制器类型选择，磁盘类型 “推荐”即可</h2><p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509175634123.png\" alt=\"image-20220509175634123\"><br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509175644381.png\" alt=\"image-20220509175644381\"></p>\n<h2 id=\"9-磁盘“新建”，容量自定义\"><a href=\"#9-磁盘“新建”，容量自定义\" class=\"headerlink\" title=\"9.磁盘“新建”，容量自定义\"></a>9.磁盘“新建”，容量自定义</h2><p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509175651338.png\" alt=\"image-20220509175651338\"><br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509175657980.png\" alt=\"image-20220509175657980\"></p>\n<h2 id=\"10-默认到下一步到完成，可以在虚拟机列表找到新建的虚拟机\"><a href=\"#10-默认到下一步到完成，可以在虚拟机列表找到新建的虚拟机\" class=\"headerlink\" title=\"10.默认到下一步到完成，可以在虚拟机列表找到新建的虚拟机\"></a>10.默认到下一步到完成，可以在虚拟机列表找到新建的虚拟机</h2><p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509175709634.png\" alt=\"image-20220509175709634\"><br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509175716557.png\" alt=\"image-20220509175716557\"><br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509175724252.png\" alt=\"image-20220509175724252\"></p>\n<hr>\n<h1 id=\"三、配置虚拟机镜像，安装系统\"><a href=\"#三、配置虚拟机镜像，安装系统\" class=\"headerlink\" title=\"三、配置虚拟机镜像，安装系统\"></a>三、配置虚拟机镜像，安装系统</h1><h2 id=\"1-进入虚拟机设置选择“CD-x2F-DVD”，选定你下载好的ISO映像文件\"><a href=\"#1-进入虚拟机设置选择“CD-x2F-DVD”，选定你下载好的ISO映像文件\" class=\"headerlink\" title=\"1.进入虚拟机设置选择“CD&#x2F;DVD”，选定你下载好的ISO映像文件\"></a>1.进入虚拟机设置选择“CD&#x2F;DVD”，选定你下载好的ISO映像文件</h2><p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509175736410.png\" alt=\"image-20220509175736410\"><br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509175743409.png\" alt=\"image-20220509175743409\"></p>\n<h2 id=\"2-开机-并-配置系统\"><a href=\"#2-开机-并-配置系统\" class=\"headerlink\" title=\"2.开机 并 配置系统\"></a>2.开机 并 配置系统</h2><h3 id=\"2-1-选择安装系统\"><a href=\"#2-1-选择安装系统\" class=\"headerlink\" title=\"2-1.选择安装系统\"></a>2-1.选择安装系统</h3><p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509175750267.png\" alt=\"image-20220509175750267\"></p>\n<h3 id=\"2-2-选择语言拉到最下方有中文\"><a href=\"#2-2-选择语言拉到最下方有中文\" class=\"headerlink\" title=\"2-2.选择语言拉到最下方有中文\"></a>2-2.选择语言拉到最下方有中文</h3><p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509175757193.png\" alt=\"image-20220509175757193\"></p>\n<h3 id=\"2-3-安装信息点击“安装位置”-gt-“完成”-gt-“开始安装”\"><a href=\"#2-3-安装信息点击“安装位置”-gt-“完成”-gt-“开始安装”\" class=\"headerlink\" title=\"2-3.安装信息点击“安装位置”-&gt;“完成”-&gt;“开始安装”\"></a>2-3.安装信息点击“安装位置”-&gt;“完成”-&gt;“开始安装”</h3><p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509175803657.png\" alt=\"image-20220509175803657\"><br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509175811105.png\" alt=\"image-20220509175811105\"><br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509175816581.png\" alt=\"image-20220509175816581\"></p>\n<h3 id=\"2-4-设置“root密码”-gt-“完成”，等待安装\"><a href=\"#2-4-设置“root密码”-gt-“完成”，等待安装\" class=\"headerlink\" title=\"2-4.设置“root密码”-&gt;“完成”，等待安装\"></a>2-4.设置“root密码”-&gt;“完成”，等待安装</h3><p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509175823109.png\" alt=\"image-20220509175823109\"></p>\n<h3 id=\"2-5-安装完成“重启”，启动后输入账号和密码\"><a href=\"#2-5-安装完成“重启”，启动后输入账号和密码\" class=\"headerlink\" title=\"2-5.安装完成“重启”，启动后输入账号和密码\"></a>2-5.安装完成“重启”，启动后输入账号和密码</h3><ul>\n<li>账号：默认：root</li>\n<li>密码：你自己设置的密码，输入是隐形的无法看到<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509175836903.png\" alt=\"image-20220509175836903\"></li>\n</ul>\n<h3 id=\"2-6-登录系统，安装完成\"><a href=\"#2-6-登录系统，安装完成\" class=\"headerlink\" title=\"2-6.登录系统，安装完成\"></a>2-6.登录系统，安装完成</h3><p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509175843207.png\" alt=\"image-20220509175843207\"></p>\n<hr>\n<h1 id=\"四、设置虚拟机网络\"><a href=\"#四、设置虚拟机网络\" class=\"headerlink\" title=\"四、设置虚拟机网络\"></a>四、设置虚拟机网络</h1><h2 id=\"1-虚拟机设置-gt-网络适配器-gt-桥接模式\"><a href=\"#1-虚拟机设置-gt-网络适配器-gt-桥接模式\" class=\"headerlink\" title=\"1.虚拟机设置-&gt;网络适配器-&gt;桥接模式\"></a>1.虚拟机设置-&gt;网络适配器-&gt;桥接模式</h2><p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509175852742.png\" alt=\"image-20220509175852742\"></p>\n<h2 id=\"2-查看寄主机（本机）的网络设置-gt-cmd模式-gt-ipconfig\"><a href=\"#2-查看寄主机（本机）的网络设置-gt-cmd模式-gt-ipconfig\" class=\"headerlink\" title=\"2.查看寄主机（本机）的网络设置-&gt; cmd模式-&gt;ipconfig\"></a>2.查看<font color=red size=5>寄主机（本机）</font>的网络设置-&gt; cmd模式-&gt;ipconfig</h2><p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509175901207.png\" alt=\"image-20220509175901207\"></p>\n<h2 id=\"3-进入centos编辑”-ifcfg-ens33”文件\"><a href=\"#3-进入centos编辑”-ifcfg-ens33”文件\" class=\"headerlink\" title=\"3.进入centos编辑” ifcfg-ens33”文件\"></a>3.进入centos编辑” ifcfg-ens33”文件</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">vi /etc/sysconfig/network-scripts/ifcfg-ens33<br>//修改红色区内容<br>BOOTPROTO=static<br>ONBOOT=yes<br>//新增黄色区内容；IPADDR：就是ip保持频段与寄主机相同；GATEWAY：就是网关，直接保持与寄主机相同，DNS固定即可。<br>IPADDR=192.168.1.250<br>GATEWAY=192.168.1.1<br>DNS1=114.114.114.114<br>DNS2=8.8.8.8<br></code></pre></td></tr></table></figure>\n<p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220509175909441.png\" alt=\"image-20220509175909441\"></p>\n<h2 id=\"4-编辑”resolv-conf”文件\"><a href=\"#4-编辑”resolv-conf”文件\" class=\"headerlink\" title=\"4.编辑”resolv.conf”文件\"></a>4.编辑”resolv.conf”文件</h2> <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">vi /etc/resolv.conf<br>//添加如下内容即可<br>nameserver 114.114.114.114<br>nameserver 8.8.8.8<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"5-重启network\"><a href=\"#5-重启network\" class=\"headerlink\" title=\"5.重启network;\"></a>5.重启network;</h2><p><code>service network restart</code></p>\n<hr>\n<p>附加命令：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">查看防火墙状态：firewall-cmd --state<br>停止防火墙服务：systemctl stop firewalld.service<br>进制开机自启动：systemctl disable firewalld.service<br></code></pre></td></tr></table></figure>\n"},{"_content":"﻿# 阿里云服务器配置 + Linuxs系统安装 jdk、tomcat、MySQL汇总详细教程 + 项目上线发布中的部分小bug解决方案 --菜鸟小回\n---\n[toc]\n\n---\n\n\n\n写在前面：\n\n+ 学了编程后就想知道自己写好的项目到底如何发布上线。却总停留在局域网访问范围...\n+ Linuxs操作系统不会，网上教程太杂，云服务器还要钱，怕成功不了...还...屡次望而却步！\n+ 此次终于下定决心。问各路大神，跑各方博客，查各种百科，读各种开发文档...踩坑无数...然后...成功发布上线。\n+ 基础太差，编写不易，为编写此教程不缺失步骤，将辛苦配好的服务器初始化后重新配置，步步截图。甚至有少许啰嗦。望多多包涵！\n\n---\n\n所需软件打包：[Xshell+Xftp+navicat+tomcat+jdk]( https://pan.baidu.com/s/1BODnbuXlnNwre7OAO3CuSA ) \t提取码: bdqj （均可去官网自行下载，tomcat及jdk注意下载Linuxs系统下的！）\n\n---\n## 一、本机安装远程连接软件（远程软件用于简化操作，大神请忽略）\n1. 自行下载安装Xshell（连接远程Linuxs系统）\n2. 下载解压Xftp，解压后绿化再打开（配合Xshell与Linuxs进行文件传输）\n![image-20220430172153557](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430172153557.png)\n3. 下载安装Navicat，按照文档教程破解（连接远程MySQL数据库）\n\n---\n\n## 二、申请阿里云ECS\n1. 注册阿里云账号：\n[阿里云](https://promotion.aliyun.com/ntms/yunparter/invite.html?userCode=e3v6m6yo)\n3. 实名认证\n4. 申请 云服务器ECS\n+ 24岁以下可以去活动页买优惠的（位置如下；土豪跳过）\n![image-20220430172207638](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430172207638.png)\n![image-20220430172214976](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430172214976.png)\n![image-20220430172224497](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430172224497.png)\n\n---\n\n## 三、 设置ECS远程控制\n1. 找到你的ECS服务器\n![image-20220430172229931](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430172229931.png)\n2. 设置远程连接密码（首次使用默认分配密码登录，注意复制系统提示的默认密码）\n![image-20220430172238420](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430172238420.png)\n3. 同样方法设置自己的实例密码（用于Linuxs系统启动）\n\n4. 进入详细设置\n![image-20220430172244945](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430172244945.png)\n5. 点击远程连接\n![image-20220430172253711](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430172253711.png)\n\n6. 输入账号：“root” 密码：“实例密码” 进入系统（输入密码时无提示，直接输入就可以）\n![image-20220430172306096](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430172306096.png)\n\n<font color=red size=5>致此处说明已经你的云服务器主机可以正常使用，但对于不会Linuxs系统的菜鸟来说，接下来可以使用远程连接工具操作了 </font>\n\n## 四、使用Xshell连接远程Linuxs\n1. 进入Xshell，新建连接\n![image-20220430172312223](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430172312223.png)\n2. 复制你的ECS公网ip到主机名点击“测试”\n![image-20220430172319478](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430172319478.png)\n3. 弹出提醒登录账号密码（就是你设置的实例 账号：root 密码：（实例密码））\n![image-20220430172326957](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430172326957.png)\n![image-20220430172335708](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430172335708.png)\n\n4. 成功登录\n![image-20220430172347859](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430172347859.png)\n<font color=red size=5>注：出现下图情况可以忽略，强迫症可以去左上角 “文件”->“属性”->“隧道”->“勾去 转发X11连接到(X)”重新登录就正常啦！！ </font>\n![image-20220430172359717](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430172359717.png)\n\n---\n\n## 五、配置Linuxs系统(重点到了)\n\n<font color=red size=5>tips：粘贴代码使用“shift+insert” </font>\n\n### 1. jdk安装与环境变量配置\n1. 官网下载或使用我包中的压缩包（.tar.gz 文件）：\n    ![image-20220430172414597](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430172414597.png)\n2. 下载以后Xshell输入如下命令：\n```javascript?linenums\n//在usr文件夹下新建java目录\nmkdir /usr/java\n//进入java目录\ncd /usr/java\n//激活上传操作\nyum -y install lrzsz\n```\n+ 激活成功\n![image-20220430172420684](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430172420684.png)\n\n3. 进入xftp可视化工具，用于传输windows上下载好的jdk\n![enter description here](https://img-1256282866.cos.ap-beijing.myqcloud.com/aHR0cDovL3B4ZXhjYjFsMi5ia3QuY2xvdWRkbi5jb20vYmxvZy8xNTY3Nzc4ODk5MjAyLnBuZw.png)\n+ 压缩包到Linuxs上（直接如图拖拽并等待上传）\n![enter description here](https://img-1256282866.cos.ap-beijing.myqcloud.com/aHR0cDovL3B4ZXhjYjFsMi5ia3QuY2xvdWRkbi5jb20vYmxvZy8xNTY3Nzc4ODk5MjAzLnBuZw.png)\n\n4. 上传完成后解压安装包：\n```javascript?linenums\n//在创建的/usr/java目录下执行ls，查看压缩包名\nls\n//复制文件夹名填到下方压缩包名处，将压缩包解压\ntar -zxvf 压缩包名\n\n```\n+ 解压完成（可以通过xftp查看）\n![enter description here](https://img-1256282866.cos.ap-beijing.myqcloud.com/aHR0cDovL3B4ZXhjYjFsMi5ia3QuY2xvdWRkbi5jb20vYmxvZy8xNTY3Nzc4ODk5MjMxLnBuZw.png)\n5. 配置jdk环境变量\n```javascript?linenums\n//进入etc文件夹\ncd /etc\n//打开profile文件,按shift+i进入编辑模式\nvi profile\n//配置环境变量,在profile文件中添加如下内容,注意更换到你的版本\nexport JAVA_HOME=/usr/java/jdk1.8.0_221 \nexport JRE_HOME=${JAVA_HOME}/jre\nexport CLASSPATH=.:${JAVA_HOME}/lib:${JRE_HOME}/lib:$CLASSPATH\nexport JAVA_PATH=${JAVA_HOME}/bin:${JRE_HOME}/bin\nexport PATH=$PATH:${JAVA_PATH}\n//按“esc”退出编辑模式,随后按“shift+：”进入命令模式，保存并退出\n输入“wq” 回车\n```\n![image-20220430172428465](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430172428465.png)\n+ 重启你的Linuxs输入\"reboot\"\n`reboot`\n<img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430172435932.png\" alt=\"image-20220430172435932\" style=\"zoom:80%;\" />\n6. 查看配置的环境变量\n```javascript?linenums\njavac 回车\njava -version 回车\n```\n+ javac 配置成功\n<img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430172442450.png\" alt=\"image-20220430172442450\" style=\"zoom:80%;\" />\n\n+ java -version 配置成功\n![image-20220430172501264](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430172501264.png)\n\n\n### 2. tomcat安装与端口配置\n1. 与解压tomcat方法相同，先创建一个tomcat文件夹\n```javascript?linenums\n//在usr文件夹下新建java目录\nmkdir /usr/tomcat\n//进入java目录\ncd /usr/tomcat\n//激活上传操作\nyum -y install lrzsz\n```\n2. 进入xftp可视化工具，用于传输windows上下载好的tomcat\n+ 压缩包到Linuxs上（直接如图拖拽并等待上传）\n![image-20220430172522199](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430172522199.png)\n\n3. 上传完成后解压安装包：\n```javascript?linenums\n//在创建的/usr/java目录下执行ls，查看压缩包名\nls\n//复制文件夹名填到下方压缩包名处，将压缩包解压\ntar -zxvf 压缩包名\n//修改文件夹名称（注意版本对应你下载的）\nmv apache-tomcat-8.5.45 tomcat8\n```\n\n+ 解压完成\n![image-20220430172531559](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430172531559.png)\n\n<font color=red size=5>tips：tomcat端口号可使用xftp去“/usr/tomcat/tomcat8/conf”下的server.xml处修改，修改方法与Windows上相同 </font>\n![image-20220430172540010](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430172540010.png)\n\n4. 启动tomcat\n```javascript?linenums\n//进入tomcat的bin目录\ncd /usr/tomcat/tomcat8/bin\n//启动tomcat,输入\n./startup.sh 回车\n```\n5. 浏览器访问测试\n```javascript?linenums\n//ip和端口号换成你的\nhttp://47.105.221.156:8080/\n```\n+ 成功访问：完成tomcat安装\n![image-20220430172546907](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430172546907.png)\n\n<font color=red size=5>检查网址正确后仍然无法访问</font> \n+ 莫慌，回到阿里云控制台，找到“本实例安全组”->“配置规则”：\n![image-20220430172559666](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430172559666.png)\n+ 添加端口\n![image-20220430172608412](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430172608412.png)\n+ 端口范围按照你设置的端口来填，授权对象“0.0.0.0/0”\n![image-20220430172617194](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430172617194.png)\n\n+ 保存后重启你的Linuxs <font color=red size=5>重启后仍无法看到主页。请耐心等待20分钟，可以先继续其他步骤，因为开放端口过程需要给阿里一定时间去配置。只有第一次配置如此！</font>，重新访问tomcat首页，解决！\n\n6. 使用eclipse把你的项目打为war包。\n![image-20220430172626046](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430172626046.png)\n\n7. 上传到Linuxs的“/usr/tomcat/tomcat8/webapps”目录下；重启tomcat\n![image-20220430172637170](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430172637170.png)\n```javascript?linenums\n//进入bin文件夹\ncd /usr/tomcat/tomcat8/bin\n//关闭tomcat\n./shutdown.sh\n//查看是否成功关闭\nps -ef|grep java\n//如果出现以下信息，则表示Tomcat已经关闭\nroot 19955 19757 0 17:48 pts/0 00:00:00 grep java\n//启动Tomcat\n./startup.sh\n```\n+ 如果显示以下相似信息，说明Tomcat还没有关闭\n![image-20220430172643828](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430172643828.png)\n```javascript?linenums\n//使用kill命令杀死tomcat\nkill -9 12778 \n//再次查看\nps -ef|grep java\n//启动Tomcat\n./startup.sh\n```\n![image-20220430172650405](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430172650405.png)\n+ 发现我们的tomcat中已经有war包解压出的工程\n![image-20220430172657174](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430172657174.png)\n8. 访问你的项目，完成（无数据库工程）！\n![image-20220430172704691](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430172704691.png)\n\n<font color=red size=5>注：需要更换war包工程，先关tomcat；删除原来的war包和解压出的工程；在检查“/usr/tomcat/tomcat8/work/Catalina/localhost”路径下是否有部署的工程，有则删除。导入新包，重启tomcat！（载过坑...）</font>\n\n---\n\n### 3. MySQL安装与配置（非必须，无数据库用户忽略）\n1. Xshell输入命令下载安装包\n```javascript?linenums\n//5.7版本\nwget http://repo.mysql.com/mysql57-community-release-el7-8.noarch.rpm\n//8.0版本\nwget https://dev.mysql.com/get/mysql80-community-release-el7-3.noarch.rpm\n//其他版本自己去官网下yum安装栏找下载路径\n//未安装wget的同学执行以下命令安装\nsudo yum install wget\n```\n\n2. 安装：\n```javascript?linenums\n//-ivh 后跟你装的对应版本mysql包\nsudo rpm -ivh mysql57-community-release-el7-8.noarch.rpm\n \nsudo yum install mysql-server\n```\n+ 输入“y” 确认安装，等待\n![image-20220430172716193](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430172716193.png)\n+ 继续“y”，等待\n<img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/aHR0cDovL3B4ZXhjYjFsMi5ia3QuY2xvdWRkbi5jb20vYmxvZy8xNTY3Nzc4ODk5NTE2LnBuZw.png\" alt=\"enter description here\" style=\"zoom: 80%;\" />\n+ 完成\n![image-20220430172724468](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430172724468.png)\n3. 设置密码\n```javascript?linenums\n//当第一次启动MySQL服务器时，为MySQL根用户生成一个临时密码。 您可以通过运行以下命令找到密码：\nsudo grep 'temporary password' /var/log/mysqld.log\n\n```\n4. 如果这个文件为空：\n```javascript?linenums\n//1.删除原来安装过的mysql残留的数据\nrm -rf /var/lib/mysql\n//2.重启mysqld服务\nsystemctl restart mysqld\n//3.再去找临时密码\nsudo grep 'temporary password' /var/log/mysqld.log\n```\n+ localhost：后面就是临时密码，复制 hr?=;FsST2fc\n![image-20220430172757333](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430172757333.png)\n\n5. 配置安装项\n`sudo mysql_secure_installation`\n\n6. 粘贴你复制的密码，设置新密码（必须包含：密码：大写，小写，数字，字符）\n![image-20220430172803635](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430172803635.png)\n+ 选择项均为“Y”,确认。看到All done！完成配置。\n![image-20220430172812319](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430172812319.png)\n+ 尝试访问，成功\n![image-20220430172822916](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430172822916.png)\n\n## 六、迁移数据库文件\n1. 使用可视化软件navicat连接数据库\n+ 新建连接\n![image-20220430172829212](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430172829212.png)\n+ 按照你的公网ip和设置的mysql密码进行连接\n![image-20220430172836365](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430172836365.png)\n2. 可能出现以下窗口（莫慌，这坑踩过了）\n![image-20220430172850122](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430172850122.png)\n+ 两步走：\n    + 第一步：老地方“安全组规则”->增加你的3306端口->重启。<font color=red size=5>重启后仍无法看到主页。请耐心等待20分钟，可以先继续其他步骤！部署项目到tomcat服务器需要一定等待时间，请等待。</font>\n    ![image-20220430172856589](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430172856589.png)\n    ![image-20220430172921544](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430172921544.png)\n    + 第二步：Xhell中进入你的数据库\n    ```javascript?linenums\n    //1. 登录,-u账号 -p密码\n     mysql -uroot -p521521\n    //2. 查看数据库：\n     show databases;\n    //3. 进入mysql:\n     use mysql;\n    //4. 查看表：\n    show tables;\n    //5.更新user表数据，添加远程访问权限；\n    update user set Host='%' where User='root';\n    //重启mysql\n    systemctl restart mysqld\n    ```\n    ![image-20220430172934343](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430172934343.png)\n+ 重新使用navicat工具连接数据库（踩坑完毕，全体鼓掌！）\n![image-20220430172943035](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430172943035.png)\n3. 转储你的项目数据库sql文件到阿里云服务器上的数据库中。\n![image-20220430173003236](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430173003236.png)\n![image-20220430172952238](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430172952238.png)\n\n\n4.  不要忘记修改你的代码，重新上传war包呦！！！\n+ 项目上线发布成功，你的项目可以通过你的网址任意网络访问啦！（全体起立！）\n![image-20220430173015337](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430173015337.png)\n\n<font color=red size=5>注：没有缺少任何步骤却无法访问项目的同学，注意：1.修改Linuxs端口后是否重启实例？ 2.修改war包后是否重启tomcat（必要时kill tomcat删除缓存项目重新加载，甚至删除tomcat重新解压。）3.再次检查过程是否缺失步骤！ </font>\n\n<font color=green size=5>至此，项目上线成功。为整理出此教程加班三晚，若对大家有所帮助，请多多点赞转发。跪谢！如若还有问题未成功，私聊即可。</font>\n   <font color=red size=5>注：转载请注明出处！！！ </font> \n   接下篇：[《Linuxs系统中修改配置文件使得访问java工程直接通过ip，除去端口号和项目名访问。》](https://blog.csdn.net/qq_39231769/article/details/100603219)\n","source":"_posts/BookMark/运维/阿里云服务器配置   Linuxs系统安装 jdk、tomcat、MySQL汇总详细教程   项目上线发布中的部分小bug解决方案 --菜鸟小回.md","raw":"﻿# 阿里云服务器配置 + Linuxs系统安装 jdk、tomcat、MySQL汇总详细教程 + 项目上线发布中的部分小bug解决方案 --菜鸟小回\n---\n[toc]\n\n---\n\n\n\n写在前面：\n\n+ 学了编程后就想知道自己写好的项目到底如何发布上线。却总停留在局域网访问范围...\n+ Linuxs操作系统不会，网上教程太杂，云服务器还要钱，怕成功不了...还...屡次望而却步！\n+ 此次终于下定决心。问各路大神，跑各方博客，查各种百科，读各种开发文档...踩坑无数...然后...成功发布上线。\n+ 基础太差，编写不易，为编写此教程不缺失步骤，将辛苦配好的服务器初始化后重新配置，步步截图。甚至有少许啰嗦。望多多包涵！\n\n---\n\n所需软件打包：[Xshell+Xftp+navicat+tomcat+jdk]( https://pan.baidu.com/s/1BODnbuXlnNwre7OAO3CuSA ) \t提取码: bdqj （均可去官网自行下载，tomcat及jdk注意下载Linuxs系统下的！）\n\n---\n## 一、本机安装远程连接软件（远程软件用于简化操作，大神请忽略）\n1. 自行下载安装Xshell（连接远程Linuxs系统）\n2. 下载解压Xftp，解压后绿化再打开（配合Xshell与Linuxs进行文件传输）\n![image-20220430172153557](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430172153557.png)\n3. 下载安装Navicat，按照文档教程破解（连接远程MySQL数据库）\n\n---\n\n## 二、申请阿里云ECS\n1. 注册阿里云账号：\n[阿里云](https://promotion.aliyun.com/ntms/yunparter/invite.html?userCode=e3v6m6yo)\n3. 实名认证\n4. 申请 云服务器ECS\n+ 24岁以下可以去活动页买优惠的（位置如下；土豪跳过）\n![image-20220430172207638](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430172207638.png)\n![image-20220430172214976](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430172214976.png)\n![image-20220430172224497](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430172224497.png)\n\n---\n\n## 三、 设置ECS远程控制\n1. 找到你的ECS服务器\n![image-20220430172229931](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430172229931.png)\n2. 设置远程连接密码（首次使用默认分配密码登录，注意复制系统提示的默认密码）\n![image-20220430172238420](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430172238420.png)\n3. 同样方法设置自己的实例密码（用于Linuxs系统启动）\n\n4. 进入详细设置\n![image-20220430172244945](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430172244945.png)\n5. 点击远程连接\n![image-20220430172253711](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430172253711.png)\n\n6. 输入账号：“root” 密码：“实例密码” 进入系统（输入密码时无提示，直接输入就可以）\n![image-20220430172306096](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430172306096.png)\n\n<font color=red size=5>致此处说明已经你的云服务器主机可以正常使用，但对于不会Linuxs系统的菜鸟来说，接下来可以使用远程连接工具操作了 </font>\n\n## 四、使用Xshell连接远程Linuxs\n1. 进入Xshell，新建连接\n![image-20220430172312223](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430172312223.png)\n2. 复制你的ECS公网ip到主机名点击“测试”\n![image-20220430172319478](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430172319478.png)\n3. 弹出提醒登录账号密码（就是你设置的实例 账号：root 密码：（实例密码））\n![image-20220430172326957](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430172326957.png)\n![image-20220430172335708](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430172335708.png)\n\n4. 成功登录\n![image-20220430172347859](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430172347859.png)\n<font color=red size=5>注：出现下图情况可以忽略，强迫症可以去左上角 “文件”->“属性”->“隧道”->“勾去 转发X11连接到(X)”重新登录就正常啦！！ </font>\n![image-20220430172359717](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430172359717.png)\n\n---\n\n## 五、配置Linuxs系统(重点到了)\n\n<font color=red size=5>tips：粘贴代码使用“shift+insert” </font>\n\n### 1. jdk安装与环境变量配置\n1. 官网下载或使用我包中的压缩包（.tar.gz 文件）：\n    ![image-20220430172414597](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430172414597.png)\n2. 下载以后Xshell输入如下命令：\n```javascript?linenums\n//在usr文件夹下新建java目录\nmkdir /usr/java\n//进入java目录\ncd /usr/java\n//激活上传操作\nyum -y install lrzsz\n```\n+ 激活成功\n![image-20220430172420684](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430172420684.png)\n\n3. 进入xftp可视化工具，用于传输windows上下载好的jdk\n![enter description here](https://img-1256282866.cos.ap-beijing.myqcloud.com/aHR0cDovL3B4ZXhjYjFsMi5ia3QuY2xvdWRkbi5jb20vYmxvZy8xNTY3Nzc4ODk5MjAyLnBuZw.png)\n+ 压缩包到Linuxs上（直接如图拖拽并等待上传）\n![enter description here](https://img-1256282866.cos.ap-beijing.myqcloud.com/aHR0cDovL3B4ZXhjYjFsMi5ia3QuY2xvdWRkbi5jb20vYmxvZy8xNTY3Nzc4ODk5MjAzLnBuZw.png)\n\n4. 上传完成后解压安装包：\n```javascript?linenums\n//在创建的/usr/java目录下执行ls，查看压缩包名\nls\n//复制文件夹名填到下方压缩包名处，将压缩包解压\ntar -zxvf 压缩包名\n\n```\n+ 解压完成（可以通过xftp查看）\n![enter description here](https://img-1256282866.cos.ap-beijing.myqcloud.com/aHR0cDovL3B4ZXhjYjFsMi5ia3QuY2xvdWRkbi5jb20vYmxvZy8xNTY3Nzc4ODk5MjMxLnBuZw.png)\n5. 配置jdk环境变量\n```javascript?linenums\n//进入etc文件夹\ncd /etc\n//打开profile文件,按shift+i进入编辑模式\nvi profile\n//配置环境变量,在profile文件中添加如下内容,注意更换到你的版本\nexport JAVA_HOME=/usr/java/jdk1.8.0_221 \nexport JRE_HOME=${JAVA_HOME}/jre\nexport CLASSPATH=.:${JAVA_HOME}/lib:${JRE_HOME}/lib:$CLASSPATH\nexport JAVA_PATH=${JAVA_HOME}/bin:${JRE_HOME}/bin\nexport PATH=$PATH:${JAVA_PATH}\n//按“esc”退出编辑模式,随后按“shift+：”进入命令模式，保存并退出\n输入“wq” 回车\n```\n![image-20220430172428465](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430172428465.png)\n+ 重启你的Linuxs输入\"reboot\"\n`reboot`\n<img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430172435932.png\" alt=\"image-20220430172435932\" style=\"zoom:80%;\" />\n6. 查看配置的环境变量\n```javascript?linenums\njavac 回车\njava -version 回车\n```\n+ javac 配置成功\n<img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430172442450.png\" alt=\"image-20220430172442450\" style=\"zoom:80%;\" />\n\n+ java -version 配置成功\n![image-20220430172501264](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430172501264.png)\n\n\n### 2. tomcat安装与端口配置\n1. 与解压tomcat方法相同，先创建一个tomcat文件夹\n```javascript?linenums\n//在usr文件夹下新建java目录\nmkdir /usr/tomcat\n//进入java目录\ncd /usr/tomcat\n//激活上传操作\nyum -y install lrzsz\n```\n2. 进入xftp可视化工具，用于传输windows上下载好的tomcat\n+ 压缩包到Linuxs上（直接如图拖拽并等待上传）\n![image-20220430172522199](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430172522199.png)\n\n3. 上传完成后解压安装包：\n```javascript?linenums\n//在创建的/usr/java目录下执行ls，查看压缩包名\nls\n//复制文件夹名填到下方压缩包名处，将压缩包解压\ntar -zxvf 压缩包名\n//修改文件夹名称（注意版本对应你下载的）\nmv apache-tomcat-8.5.45 tomcat8\n```\n\n+ 解压完成\n![image-20220430172531559](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430172531559.png)\n\n<font color=red size=5>tips：tomcat端口号可使用xftp去“/usr/tomcat/tomcat8/conf”下的server.xml处修改，修改方法与Windows上相同 </font>\n![image-20220430172540010](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430172540010.png)\n\n4. 启动tomcat\n```javascript?linenums\n//进入tomcat的bin目录\ncd /usr/tomcat/tomcat8/bin\n//启动tomcat,输入\n./startup.sh 回车\n```\n5. 浏览器访问测试\n```javascript?linenums\n//ip和端口号换成你的\nhttp://47.105.221.156:8080/\n```\n+ 成功访问：完成tomcat安装\n![image-20220430172546907](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430172546907.png)\n\n<font color=red size=5>检查网址正确后仍然无法访问</font> \n+ 莫慌，回到阿里云控制台，找到“本实例安全组”->“配置规则”：\n![image-20220430172559666](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430172559666.png)\n+ 添加端口\n![image-20220430172608412](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430172608412.png)\n+ 端口范围按照你设置的端口来填，授权对象“0.0.0.0/0”\n![image-20220430172617194](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430172617194.png)\n\n+ 保存后重启你的Linuxs <font color=red size=5>重启后仍无法看到主页。请耐心等待20分钟，可以先继续其他步骤，因为开放端口过程需要给阿里一定时间去配置。只有第一次配置如此！</font>，重新访问tomcat首页，解决！\n\n6. 使用eclipse把你的项目打为war包。\n![image-20220430172626046](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430172626046.png)\n\n7. 上传到Linuxs的“/usr/tomcat/tomcat8/webapps”目录下；重启tomcat\n![image-20220430172637170](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430172637170.png)\n```javascript?linenums\n//进入bin文件夹\ncd /usr/tomcat/tomcat8/bin\n//关闭tomcat\n./shutdown.sh\n//查看是否成功关闭\nps -ef|grep java\n//如果出现以下信息，则表示Tomcat已经关闭\nroot 19955 19757 0 17:48 pts/0 00:00:00 grep java\n//启动Tomcat\n./startup.sh\n```\n+ 如果显示以下相似信息，说明Tomcat还没有关闭\n![image-20220430172643828](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430172643828.png)\n```javascript?linenums\n//使用kill命令杀死tomcat\nkill -9 12778 \n//再次查看\nps -ef|grep java\n//启动Tomcat\n./startup.sh\n```\n![image-20220430172650405](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430172650405.png)\n+ 发现我们的tomcat中已经有war包解压出的工程\n![image-20220430172657174](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430172657174.png)\n8. 访问你的项目，完成（无数据库工程）！\n![image-20220430172704691](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430172704691.png)\n\n<font color=red size=5>注：需要更换war包工程，先关tomcat；删除原来的war包和解压出的工程；在检查“/usr/tomcat/tomcat8/work/Catalina/localhost”路径下是否有部署的工程，有则删除。导入新包，重启tomcat！（载过坑...）</font>\n\n---\n\n### 3. MySQL安装与配置（非必须，无数据库用户忽略）\n1. Xshell输入命令下载安装包\n```javascript?linenums\n//5.7版本\nwget http://repo.mysql.com/mysql57-community-release-el7-8.noarch.rpm\n//8.0版本\nwget https://dev.mysql.com/get/mysql80-community-release-el7-3.noarch.rpm\n//其他版本自己去官网下yum安装栏找下载路径\n//未安装wget的同学执行以下命令安装\nsudo yum install wget\n```\n\n2. 安装：\n```javascript?linenums\n//-ivh 后跟你装的对应版本mysql包\nsudo rpm -ivh mysql57-community-release-el7-8.noarch.rpm\n \nsudo yum install mysql-server\n```\n+ 输入“y” 确认安装，等待\n![image-20220430172716193](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430172716193.png)\n+ 继续“y”，等待\n<img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/aHR0cDovL3B4ZXhjYjFsMi5ia3QuY2xvdWRkbi5jb20vYmxvZy8xNTY3Nzc4ODk5NTE2LnBuZw.png\" alt=\"enter description here\" style=\"zoom: 80%;\" />\n+ 完成\n![image-20220430172724468](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430172724468.png)\n3. 设置密码\n```javascript?linenums\n//当第一次启动MySQL服务器时，为MySQL根用户生成一个临时密码。 您可以通过运行以下命令找到密码：\nsudo grep 'temporary password' /var/log/mysqld.log\n\n```\n4. 如果这个文件为空：\n```javascript?linenums\n//1.删除原来安装过的mysql残留的数据\nrm -rf /var/lib/mysql\n//2.重启mysqld服务\nsystemctl restart mysqld\n//3.再去找临时密码\nsudo grep 'temporary password' /var/log/mysqld.log\n```\n+ localhost：后面就是临时密码，复制 hr?=;FsST2fc\n![image-20220430172757333](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430172757333.png)\n\n5. 配置安装项\n`sudo mysql_secure_installation`\n\n6. 粘贴你复制的密码，设置新密码（必须包含：密码：大写，小写，数字，字符）\n![image-20220430172803635](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430172803635.png)\n+ 选择项均为“Y”,确认。看到All done！完成配置。\n![image-20220430172812319](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430172812319.png)\n+ 尝试访问，成功\n![image-20220430172822916](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430172822916.png)\n\n## 六、迁移数据库文件\n1. 使用可视化软件navicat连接数据库\n+ 新建连接\n![image-20220430172829212](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430172829212.png)\n+ 按照你的公网ip和设置的mysql密码进行连接\n![image-20220430172836365](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430172836365.png)\n2. 可能出现以下窗口（莫慌，这坑踩过了）\n![image-20220430172850122](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430172850122.png)\n+ 两步走：\n    + 第一步：老地方“安全组规则”->增加你的3306端口->重启。<font color=red size=5>重启后仍无法看到主页。请耐心等待20分钟，可以先继续其他步骤！部署项目到tomcat服务器需要一定等待时间，请等待。</font>\n    ![image-20220430172856589](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430172856589.png)\n    ![image-20220430172921544](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430172921544.png)\n    + 第二步：Xhell中进入你的数据库\n    ```javascript?linenums\n    //1. 登录,-u账号 -p密码\n     mysql -uroot -p521521\n    //2. 查看数据库：\n     show databases;\n    //3. 进入mysql:\n     use mysql;\n    //4. 查看表：\n    show tables;\n    //5.更新user表数据，添加远程访问权限；\n    update user set Host='%' where User='root';\n    //重启mysql\n    systemctl restart mysqld\n    ```\n    ![image-20220430172934343](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430172934343.png)\n+ 重新使用navicat工具连接数据库（踩坑完毕，全体鼓掌！）\n![image-20220430172943035](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430172943035.png)\n3. 转储你的项目数据库sql文件到阿里云服务器上的数据库中。\n![image-20220430173003236](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430173003236.png)\n![image-20220430172952238](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430172952238.png)\n\n\n4.  不要忘记修改你的代码，重新上传war包呦！！！\n+ 项目上线发布成功，你的项目可以通过你的网址任意网络访问啦！（全体起立！）\n![image-20220430173015337](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430173015337.png)\n\n<font color=red size=5>注：没有缺少任何步骤却无法访问项目的同学，注意：1.修改Linuxs端口后是否重启实例？ 2.修改war包后是否重启tomcat（必要时kill tomcat删除缓存项目重新加载，甚至删除tomcat重新解压。）3.再次检查过程是否缺失步骤！ </font>\n\n<font color=green size=5>至此，项目上线成功。为整理出此教程加班三晚，若对大家有所帮助，请多多点赞转发。跪谢！如若还有问题未成功，私聊即可。</font>\n   <font color=red size=5>注：转载请注明出处！！！ </font> \n   接下篇：[《Linuxs系统中修改配置文件使得访问java工程直接通过ip，除去端口号和项目名访问。》](https://blog.csdn.net/qq_39231769/article/details/100603219)\n","slug":"BookMark/运维/阿里云服务器配置   Linuxs系统安装 jdk、tomcat、MySQL汇总详细教程   项目上线发布中的部分小bug解决方案 --菜鸟小回","published":1,"date":"2022-07-18T09:51:36.000Z","updated":"2022-09-05T06:58:24.797Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cl7ptszov003haba50t7v0o23","content":"<h1><span id=\"阿里云服务器配置-linuxs系统安装-jdk-tomcat-mysql汇总详细教程-项目上线发布中的部分小bug解决方案-菜鸟小回\">阿里云服务器配置 + Linuxs系统安装 jdk、tomcat、MySQL汇总详细教程 + 项目上线发布中的部分小bug解决方案 –菜鸟小回</span></h1><hr>\n<p>[toc]</p>\n<hr>\n<p>写在前面：</p>\n<ul>\n<li>学了编程后就想知道自己写好的项目到底如何发布上线。却总停留在局域网访问范围…</li>\n<li>Linuxs操作系统不会，网上教程太杂，云服务器还要钱，怕成功不了…还…屡次望而却步！</li>\n<li>此次终于下定决心。问各路大神，跑各方博客，查各种百科，读各种开发文档…踩坑无数…然后…成功发布上线。</li>\n<li>基础太差，编写不易，为编写此教程不缺失步骤，将辛苦配好的服务器初始化后重新配置，步步截图。甚至有少许啰嗦。望多多包涵！</li>\n</ul>\n<hr>\n<p>所需软件打包：<a href=\"https://pan.baidu.com/s/1BODnbuXlnNwre7OAO3CuSA\">Xshell+Xftp+navicat+tomcat+jdk</a> \t提取码: bdqj （均可去官网自行下载，tomcat及jdk注意下载Linuxs系统下的！）</p>\n<hr>\n<h2><span id=\"一-本机安装远程连接软件远程软件用于简化操作大神请忽略\">一、本机安装远程连接软件（远程软件用于简化操作，大神请忽略）</span></h2><ol>\n<li>自行下载安装Xshell（连接远程Linuxs系统）</li>\n<li>下载解压Xftp，解压后绿化再打开（配合Xshell与Linuxs进行文件传输）<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430172153557.png\" alt=\"image-20220430172153557\"></li>\n<li>下载安装Navicat，按照文档教程破解（连接远程MySQL数据库）</li>\n</ol>\n<hr>\n<h2><span id=\"二-申请阿里云ecs\">二、申请阿里云ECS</span></h2><ol>\n<li>注册阿里云账号：<br><a href=\"https://promotion.aliyun.com/ntms/yunparter/invite.html?userCode=e3v6m6yo\">阿里云</a></li>\n<li>实名认证</li>\n<li>申请 云服务器ECS</li>\n</ol>\n<ul>\n<li>24岁以下可以去活动页买优惠的（位置如下；土豪跳过）<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430172207638.png\" alt=\"image-20220430172207638\"><br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430172214976.png\" alt=\"image-20220430172214976\"><br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430172224497.png\" alt=\"image-20220430172224497\"></li>\n</ul>\n<hr>\n<h2><span id=\"三-设置ecs远程控制\">三、 设置ECS远程控制</span></h2><ol>\n<li><p>找到你的ECS服务器<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430172229931.png\" alt=\"image-20220430172229931\"></p>\n</li>\n<li><p>设置远程连接密码（首次使用默认分配密码登录，注意复制系统提示的默认密码）<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430172238420.png\" alt=\"image-20220430172238420\"></p>\n</li>\n<li><p>同样方法设置自己的实例密码（用于Linuxs系统启动）</p>\n</li>\n<li><p>进入详细设置<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430172244945.png\" alt=\"image-20220430172244945\"></p>\n</li>\n<li><p>点击远程连接<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430172253711.png\" alt=\"image-20220430172253711\"></p>\n</li>\n<li><p>输入账号：“root” 密码：“实例密码” 进入系统（输入密码时无提示，直接输入就可以）<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430172306096.png\" alt=\"image-20220430172306096\"></p>\n</li>\n</ol>\n<p><font color=\"red\" size=\"5\">致此处说明已经你的云服务器主机可以正常使用，但对于不会Linuxs系统的菜鸟来说，接下来可以使用远程连接工具操作了 </font></p>\n<h2><span id=\"四-使用xshell连接远程linuxs\">四、使用Xshell连接远程Linuxs</span></h2><ol>\n<li><p>进入Xshell，新建连接<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430172312223.png\" alt=\"image-20220430172312223\"></p>\n</li>\n<li><p>复制你的ECS公网ip到主机名点击“测试”<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430172319478.png\" alt=\"image-20220430172319478\"></p>\n</li>\n<li><p>弹出提醒登录账号密码（就是你设置的实例 账号：root 密码：（实例密码））<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430172326957.png\" alt=\"image-20220430172326957\"><br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430172335708.png\" alt=\"image-20220430172335708\"></p>\n</li>\n<li><p>成功登录<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430172347859.png\" alt=\"image-20220430172347859\"><br><font color=\"red\" size=\"5\">注：出现下图情况可以忽略，强迫症可以去左上角 “文件”-&gt;“属性”-&gt;“隧道”-&gt;“勾去 转发X11连接到(X)”重新登录就正常啦！！ </font><br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430172359717.png\" alt=\"image-20220430172359717\"></p>\n</li>\n</ol>\n<hr>\n<h2><span id=\"五-配置linuxs系统重点到了\">五、配置Linuxs系统(重点到了)</span></h2><p><font color=\"red\" size=\"5\">tips：粘贴代码使用“shift+insert” </font></p>\n<h3><span id=\"1-jdk安装与环境变量配置\">1. jdk安装与环境变量配置</span></h3><ol>\n<li>官网下载或使用我包中的压缩包（.tar.gz 文件）：<br> <img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430172414597.png\" alt=\"image-20220430172414597\"></li>\n<li>下载以后Xshell输入如下命令：<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">//在usr文件夹下新建java目录<br>mkdir /usr/java<br>//进入java目录<br>cd /usr/java<br>//激活上传操作<br>yum -y install lrzsz<br></code></pre></td></tr></table></figure></li>\n</ol>\n<ul>\n<li>激活成功<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430172420684.png\" alt=\"image-20220430172420684\"></li>\n</ul>\n<ol start=\"3\">\n<li>进入xftp可视化工具，用于传输windows上下载好的jdk<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/aHR0cDovL3B4ZXhjYjFsMi5ia3QuY2xvdWRkbi5jb20vYmxvZy8xNTY3Nzc4ODk5MjAyLnBuZw.png\" alt=\"enter description here\"></li>\n</ol>\n<ul>\n<li>压缩包到Linuxs上（直接如图拖拽并等待上传）<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/aHR0cDovL3B4ZXhjYjFsMi5ia3QuY2xvdWRkbi5jb20vYmxvZy8xNTY3Nzc4ODk5MjAzLnBuZw.png\" alt=\"enter description here\"></li>\n</ul>\n<ol start=\"4\">\n<li>上传完成后解压安装包：<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">//在创建的/usr/java目录下执行ls，查看压缩包名<br>ls<br>//复制文件夹名填到下方压缩包名处，将压缩包解压<br>tar -zxvf 压缩包名<br><br></code></pre></td></tr></table></figure></li>\n</ol>\n<ul>\n<li>解压完成（可以通过xftp查看）<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/aHR0cDovL3B4ZXhjYjFsMi5ia3QuY2xvdWRkbi5jb20vYmxvZy8xNTY3Nzc4ODk5MjMxLnBuZw.png\" alt=\"enter description here\"></li>\n</ul>\n<ol start=\"5\">\n<li>配置jdk环境变量<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">//进入etc文件夹<br>cd /etc<br>//打开profile文件,按shift+i进入编辑模式<br>vi profile<br>//配置环境变量,在profile文件中添加如下内容,注意更换到你的版本<br>export JAVA_HOME=/usr/java/jdk1.8.0_221 <br>export JRE_HOME=$&#123;JAVA_HOME&#125;/jre<br>export CLASSPATH=.:$&#123;JAVA_HOME&#125;/lib:$&#123;JRE_HOME&#125;/lib:$CLASSPATH<br>export JAVA_PATH=$&#123;JAVA_HOME&#125;/bin:$&#123;JRE_HOME&#125;/bin<br>export PATH=$PATH:$&#123;JAVA_PATH&#125;<br>//按“esc”退出编辑模式,随后按“shift+：”进入命令模式，保存并退出<br>输入“wq” 回车<br></code></pre></td></tr></table></figure>\n<img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430172428465.png\" alt=\"image-20220430172428465\"></li>\n</ol>\n<ul>\n<li>重启你的Linuxs输入”reboot”<br><code>reboot</code><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430172435932.png\" alt=\"image-20220430172435932\" style=\"zoom:80%;\"></li>\n</ul>\n<ol start=\"6\">\n<li>查看配置的环境变量<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">javac 回车<br>java -version 回车<br></code></pre></td></tr></table></figure></li>\n</ol>\n<ul>\n<li><p>javac 配置成功</p>\n<img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430172442450.png\" alt=\"image-20220430172442450\" style=\"zoom:80%;\">\n</li>\n<li><p>java -version 配置成功<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430172501264.png\" alt=\"image-20220430172501264\"></p>\n</li>\n</ul>\n<h3><span id=\"2-tomcat安装与端口配置\">2. tomcat安装与端口配置</span></h3><ol>\n<li>与解压tomcat方法相同，先创建一个tomcat文件夹<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">//在usr文件夹下新建java目录<br>mkdir /usr/tomcat<br>//进入java目录<br>cd /usr/tomcat<br>//激活上传操作<br>yum -y install lrzsz<br></code></pre></td></tr></table></figure></li>\n<li>进入xftp可视化工具，用于传输windows上下载好的tomcat</li>\n</ol>\n<ul>\n<li>压缩包到Linuxs上（直接如图拖拽并等待上传）<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430172522199.png\" alt=\"image-20220430172522199\"></li>\n</ul>\n<ol start=\"3\">\n<li>上传完成后解压安装包：<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">//在创建的/usr/java目录下执行ls，查看压缩包名<br>ls<br>//复制文件夹名填到下方压缩包名处，将压缩包解压<br>tar -zxvf 压缩包名<br>//修改文件夹名称（注意版本对应你下载的）<br>mv apache-tomcat-8.5.45 tomcat8<br></code></pre></td></tr></table></figure></li>\n</ol>\n<ul>\n<li>解压完成<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430172531559.png\" alt=\"image-20220430172531559\"></li>\n</ul>\n<p><font color=\"red\" size=\"5\">tips：tomcat端口号可使用xftp去“&#x2F;usr&#x2F;tomcat&#x2F;tomcat8&#x2F;conf”下的server.xml处修改，修改方法与Windows上相同 </font><br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430172540010.png\" alt=\"image-20220430172540010\"></p>\n<ol start=\"4\">\n<li>启动tomcat<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">//进入tomcat的bin目录<br>cd /usr/tomcat/tomcat8/bin<br>//启动tomcat,输入<br>./startup.sh 回车<br></code></pre></td></tr></table></figure></li>\n<li>浏览器访问测试<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">//ip和端口号换成你的<br>http://47.105.221.156:8080/<br></code></pre></td></tr></table></figure></li>\n</ol>\n<ul>\n<li>成功访问：完成tomcat安装<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430172546907.png\" alt=\"image-20220430172546907\"></li>\n</ul>\n<p><font color=\"red\" size=\"5\">检查网址正确后仍然无法访问</font> </p>\n<ul>\n<li><p>莫慌，回到阿里云控制台，找到“本实例安全组”-&gt;“配置规则”：<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430172559666.png\" alt=\"image-20220430172559666\"></p>\n</li>\n<li><p>添加端口<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430172608412.png\" alt=\"image-20220430172608412\"></p>\n</li>\n<li><p>端口范围按照你设置的端口来填，授权对象“0.0.0.0&#x2F;0”<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430172617194.png\" alt=\"image-20220430172617194\"></p>\n</li>\n<li><p>保存后重启你的Linuxs <font color=\"red\" size=\"5\">重启后仍无法看到主页。请耐心等待20分钟，可以先继续其他步骤，因为开放端口过程需要给阿里一定时间去配置。只有第一次配置如此！</font>，重新访问tomcat首页，解决！</p>\n</li>\n</ul>\n<ol start=\"6\">\n<li><p>使用eclipse把你的项目打为war包。<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430172626046.png\" alt=\"image-20220430172626046\"></p>\n</li>\n<li><p>上传到Linuxs的“&#x2F;usr&#x2F;tomcat&#x2F;tomcat8&#x2F;webapps”目录下；重启tomcat<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430172637170.png\" alt=\"image-20220430172637170\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">//进入bin文件夹<br>cd /usr/tomcat/tomcat8/bin<br>//关闭tomcat<br>./shutdown.sh<br>//查看是否成功关闭<br>ps -ef|grep java<br>//如果出现以下信息，则表示Tomcat已经关闭<br>root 19955 19757 0 17:48 pts/0 00:00:00 grep java<br>//启动Tomcat<br>./startup.sh<br></code></pre></td></tr></table></figure></li>\n</ol>\n<ul>\n<li>如果显示以下相似信息，说明Tomcat还没有关闭<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430172643828.png\" alt=\"image-20220430172643828\"><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">//使用kill命令杀死tomcat<br>kill -9 12778 <br>//再次查看<br>ps -ef|grep java<br>//启动Tomcat<br>./startup.sh<br></code></pre></td></tr></table></figure>\n<img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430172650405.png\" alt=\"image-20220430172650405\"></li>\n<li>发现我们的tomcat中已经有war包解压出的工程<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430172657174.png\" alt=\"image-20220430172657174\"></li>\n</ul>\n<ol start=\"8\">\n<li>访问你的项目，完成（无数据库工程）！<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430172704691.png\" alt=\"image-20220430172704691\"></li>\n</ol>\n<p><font color=\"red\" size=\"5\">注：需要更换war包工程，先关tomcat；删除原来的war包和解压出的工程；在检查“&#x2F;usr&#x2F;tomcat&#x2F;tomcat8&#x2F;work&#x2F;Catalina&#x2F;localhost”路径下是否有部署的工程，有则删除。导入新包，重启tomcat！（载过坑…）</font></p>\n<hr>\n<h3><span id=\"3-mysql安装与配置非必须无数据库用户忽略\">3. MySQL安装与配置（非必须，无数据库用户忽略）</span></h3><ol>\n<li><p>Xshell输入命令下载安装包</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">//5.7版本<br>wget http://repo.mysql.com/mysql57-community-release-el7-8.noarch.rpm<br>//8.0版本<br>wget https://dev.mysql.com/get/mysql80-community-release-el7-3.noarch.rpm<br>//其他版本自己去官网下yum安装栏找下载路径<br>//未安装wget的同学执行以下命令安装<br>sudo yum install wget<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>安装：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">//-ivh 后跟你装的对应版本mysql包<br>sudo rpm -ivh mysql57-community-release-el7-8.noarch.rpm<br> <br>sudo yum install mysql-server<br></code></pre></td></tr></table></figure></li>\n</ol>\n<ul>\n<li>输入“y” 确认安装，等待<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430172716193.png\" alt=\"image-20220430172716193\"></li>\n<li>继续“y”，等待<img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/aHR0cDovL3B4ZXhjYjFsMi5ia3QuY2xvdWRkbi5jb20vYmxvZy8xNTY3Nzc4ODk5NTE2LnBuZw.png\" alt=\"enter description here\" style=\"zoom: 80%;\"></li>\n<li>完成<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430172724468.png\" alt=\"image-20220430172724468\"></li>\n</ul>\n<ol start=\"3\">\n<li>设置密码<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">//当第一次启动MySQL服务器时，为MySQL根用户生成一个临时密码。 您可以通过运行以下命令找到密码：<br>sudo grep &#x27;temporary password&#x27; /var/log/mysqld.log<br><br></code></pre></td></tr></table></figure></li>\n<li>如果这个文件为空：<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">//1.删除原来安装过的mysql残留的数据<br>rm -rf /var/lib/mysql<br>//2.重启mysqld服务<br>systemctl restart mysqld<br>//3.再去找临时密码<br>sudo grep &#x27;temporary password&#x27; /var/log/mysqld.log<br></code></pre></td></tr></table></figure></li>\n</ol>\n<ul>\n<li>localhost：后面就是临时密码，复制 hr?&#x3D;;FsST2fc<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430172757333.png\" alt=\"image-20220430172757333\"></li>\n</ul>\n<ol start=\"5\">\n<li><p>配置安装项<br><code>sudo mysql_secure_installation</code></p>\n</li>\n<li><p>粘贴你复制的密码，设置新密码（必须包含：密码：大写，小写，数字，字符）<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430172803635.png\" alt=\"image-20220430172803635\"></p>\n</li>\n</ol>\n<ul>\n<li>选择项均为“Y”,确认。看到All done！完成配置。<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430172812319.png\" alt=\"image-20220430172812319\"></li>\n<li>尝试访问，成功<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430172822916.png\" alt=\"image-20220430172822916\"></li>\n</ul>\n<h2><span id=\"六-迁移数据库文件\">六、迁移数据库文件</span></h2><ol>\n<li>使用可视化软件navicat连接数据库</li>\n</ol>\n<ul>\n<li>新建连接<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430172829212.png\" alt=\"image-20220430172829212\"></li>\n<li>按照你的公网ip和设置的mysql密码进行连接<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430172836365.png\" alt=\"image-20220430172836365\"></li>\n</ul>\n<ol start=\"2\">\n<li>可能出现以下窗口（莫慌，这坑踩过了）<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430172850122.png\" alt=\"image-20220430172850122\"></li>\n</ol>\n<ul>\n<li>两步走：<ul>\n<li>第一步：老地方“安全组规则”-&gt;增加你的3306端口-&gt;重启。<font color=\"red\" size=\"5\">重启后仍无法看到主页。请耐心等待20分钟，可以先继续其他步骤！部署项目到tomcat服务器需要一定等待时间，请等待。</font><br>  <img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430172856589.png\" alt=\"image-20220430172856589\"><br>  <img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430172921544.png\" alt=\"image-20220430172921544\"></li>\n<li>第二步：Xhell中进入你的数据库  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">//1. 登录,-u账号 -p密码<br> mysql -uroot -p521521<br>//2. 查看数据库：<br> show databases;<br>//3. 进入mysql:<br> use mysql;<br>//4. 查看表：<br>show tables;<br>//5.更新user表数据，添加远程访问权限；<br>update user set Host=&#x27;%&#x27; where User=&#x27;root&#x27;;<br>//重启mysql<br>systemctl restart mysqld<br></code></pre></td></tr></table></figure>\n  <img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430172934343.png\" alt=\"image-20220430172934343\"></li>\n</ul>\n</li>\n<li>重新使用navicat工具连接数据库（踩坑完毕，全体鼓掌！）<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430172943035.png\" alt=\"image-20220430172943035\"></li>\n</ul>\n<ol start=\"3\">\n<li><p>转储你的项目数据库sql文件到阿里云服务器上的数据库中。<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430173003236.png\" alt=\"image-20220430173003236\"><br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430172952238.png\" alt=\"image-20220430172952238\"></p>\n</li>\n<li><p>不要忘记修改你的代码，重新上传war包呦！！！</p>\n</li>\n</ol>\n<ul>\n<li>项目上线发布成功，你的项目可以通过你的网址任意网络访问啦！（全体起立！）<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430173015337.png\" alt=\"image-20220430173015337\"></li>\n</ul>\n<p><font color=\"red\" size=\"5\">注：没有缺少任何步骤却无法访问项目的同学，注意：1.修改Linuxs端口后是否重启实例？ 2.修改war包后是否重启tomcat（必要时kill tomcat删除缓存项目重新加载，甚至删除tomcat重新解压。）3.再次检查过程是否缺失步骤！ </font></p>\n<p><font color=\"green\" size=\"5\">至此，项目上线成功。为整理出此教程加班三晚，若对大家有所帮助，请多多点赞转发。跪谢！如若还有问题未成功，私聊即可。</font><br>   <font color=\"red\" size=\"5\">注：转载请注明出处！！！ </font><br>   接下篇：<a href=\"https://blog.csdn.net/qq_39231769/article/details/100603219\">《Linuxs系统中修改配置文件使得访问java工程直接通过ip，除去端口号和项目名访问。》</a></p>\n","site":{"data":{}},"wordcount":4645,"excerpt":"","more":"<h1 id=\"阿里云服务器配置-Linuxs系统安装-jdk、tomcat、MySQL汇总详细教程-项目上线发布中的部分小bug解决方案-–菜鸟小回\"><a href=\"#阿里云服务器配置-Linuxs系统安装-jdk、tomcat、MySQL汇总详细教程-项目上线发布中的部分小bug解决方案-–菜鸟小回\" class=\"headerlink\" title=\"阿里云服务器配置 + Linuxs系统安装 jdk、tomcat、MySQL汇总详细教程 + 项目上线发布中的部分小bug解决方案 –菜鸟小回\"></a>阿里云服务器配置 + Linuxs系统安装 jdk、tomcat、MySQL汇总详细教程 + 项目上线发布中的部分小bug解决方案 –菜鸟小回</h1><hr>\n<p>[toc]</p>\n<hr>\n<p>写在前面：</p>\n<ul>\n<li>学了编程后就想知道自己写好的项目到底如何发布上线。却总停留在局域网访问范围…</li>\n<li>Linuxs操作系统不会，网上教程太杂，云服务器还要钱，怕成功不了…还…屡次望而却步！</li>\n<li>此次终于下定决心。问各路大神，跑各方博客，查各种百科，读各种开发文档…踩坑无数…然后…成功发布上线。</li>\n<li>基础太差，编写不易，为编写此教程不缺失步骤，将辛苦配好的服务器初始化后重新配置，步步截图。甚至有少许啰嗦。望多多包涵！</li>\n</ul>\n<hr>\n<p>所需软件打包：<a href=\"https://pan.baidu.com/s/1BODnbuXlnNwre7OAO3CuSA\">Xshell+Xftp+navicat+tomcat+jdk</a> \t提取码: bdqj （均可去官网自行下载，tomcat及jdk注意下载Linuxs系统下的！）</p>\n<hr>\n<h2 id=\"一、本机安装远程连接软件（远程软件用于简化操作，大神请忽略）\"><a href=\"#一、本机安装远程连接软件（远程软件用于简化操作，大神请忽略）\" class=\"headerlink\" title=\"一、本机安装远程连接软件（远程软件用于简化操作，大神请忽略）\"></a>一、本机安装远程连接软件（远程软件用于简化操作，大神请忽略）</h2><ol>\n<li>自行下载安装Xshell（连接远程Linuxs系统）</li>\n<li>下载解压Xftp，解压后绿化再打开（配合Xshell与Linuxs进行文件传输）<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430172153557.png\" alt=\"image-20220430172153557\"></li>\n<li>下载安装Navicat，按照文档教程破解（连接远程MySQL数据库）</li>\n</ol>\n<hr>\n<h2 id=\"二、申请阿里云ECS\"><a href=\"#二、申请阿里云ECS\" class=\"headerlink\" title=\"二、申请阿里云ECS\"></a>二、申请阿里云ECS</h2><ol>\n<li>注册阿里云账号：<br><a href=\"https://promotion.aliyun.com/ntms/yunparter/invite.html?userCode=e3v6m6yo\">阿里云</a></li>\n<li>实名认证</li>\n<li>申请 云服务器ECS</li>\n</ol>\n<ul>\n<li>24岁以下可以去活动页买优惠的（位置如下；土豪跳过）<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430172207638.png\" alt=\"image-20220430172207638\"><br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430172214976.png\" alt=\"image-20220430172214976\"><br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430172224497.png\" alt=\"image-20220430172224497\"></li>\n</ul>\n<hr>\n<h2 id=\"三、-设置ECS远程控制\"><a href=\"#三、-设置ECS远程控制\" class=\"headerlink\" title=\"三、 设置ECS远程控制\"></a>三、 设置ECS远程控制</h2><ol>\n<li><p>找到你的ECS服务器<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430172229931.png\" alt=\"image-20220430172229931\"></p>\n</li>\n<li><p>设置远程连接密码（首次使用默认分配密码登录，注意复制系统提示的默认密码）<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430172238420.png\" alt=\"image-20220430172238420\"></p>\n</li>\n<li><p>同样方法设置自己的实例密码（用于Linuxs系统启动）</p>\n</li>\n<li><p>进入详细设置<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430172244945.png\" alt=\"image-20220430172244945\"></p>\n</li>\n<li><p>点击远程连接<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430172253711.png\" alt=\"image-20220430172253711\"></p>\n</li>\n<li><p>输入账号：“root” 密码：“实例密码” 进入系统（输入密码时无提示，直接输入就可以）<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430172306096.png\" alt=\"image-20220430172306096\"></p>\n</li>\n</ol>\n<p><font color=red size=5>致此处说明已经你的云服务器主机可以正常使用，但对于不会Linuxs系统的菜鸟来说，接下来可以使用远程连接工具操作了 </font></p>\n<h2 id=\"四、使用Xshell连接远程Linuxs\"><a href=\"#四、使用Xshell连接远程Linuxs\" class=\"headerlink\" title=\"四、使用Xshell连接远程Linuxs\"></a>四、使用Xshell连接远程Linuxs</h2><ol>\n<li><p>进入Xshell，新建连接<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430172312223.png\" alt=\"image-20220430172312223\"></p>\n</li>\n<li><p>复制你的ECS公网ip到主机名点击“测试”<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430172319478.png\" alt=\"image-20220430172319478\"></p>\n</li>\n<li><p>弹出提醒登录账号密码（就是你设置的实例 账号：root 密码：（实例密码））<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430172326957.png\" alt=\"image-20220430172326957\"><br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430172335708.png\" alt=\"image-20220430172335708\"></p>\n</li>\n<li><p>成功登录<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430172347859.png\" alt=\"image-20220430172347859\"><br><font color=red size=5>注：出现下图情况可以忽略，强迫症可以去左上角 “文件”-&gt;“属性”-&gt;“隧道”-&gt;“勾去 转发X11连接到(X)”重新登录就正常啦！！ </font><br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430172359717.png\" alt=\"image-20220430172359717\"></p>\n</li>\n</ol>\n<hr>\n<h2 id=\"五、配置Linuxs系统-重点到了\"><a href=\"#五、配置Linuxs系统-重点到了\" class=\"headerlink\" title=\"五、配置Linuxs系统(重点到了)\"></a>五、配置Linuxs系统(重点到了)</h2><p><font color=red size=5>tips：粘贴代码使用“shift+insert” </font></p>\n<h3 id=\"1-jdk安装与环境变量配置\"><a href=\"#1-jdk安装与环境变量配置\" class=\"headerlink\" title=\"1. jdk安装与环境变量配置\"></a>1. jdk安装与环境变量配置</h3><ol>\n<li>官网下载或使用我包中的压缩包（.tar.gz 文件）：<br> <img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430172414597.png\" alt=\"image-20220430172414597\"></li>\n<li>下载以后Xshell输入如下命令：<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">//在usr文件夹下新建java目录<br>mkdir /usr/java<br>//进入java目录<br>cd /usr/java<br>//激活上传操作<br>yum -y install lrzsz<br></code></pre></td></tr></table></figure></li>\n</ol>\n<ul>\n<li>激活成功<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430172420684.png\" alt=\"image-20220430172420684\"></li>\n</ul>\n<ol start=\"3\">\n<li>进入xftp可视化工具，用于传输windows上下载好的jdk<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/aHR0cDovL3B4ZXhjYjFsMi5ia3QuY2xvdWRkbi5jb20vYmxvZy8xNTY3Nzc4ODk5MjAyLnBuZw.png\" alt=\"enter description here\"></li>\n</ol>\n<ul>\n<li>压缩包到Linuxs上（直接如图拖拽并等待上传）<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/aHR0cDovL3B4ZXhjYjFsMi5ia3QuY2xvdWRkbi5jb20vYmxvZy8xNTY3Nzc4ODk5MjAzLnBuZw.png\" alt=\"enter description here\"></li>\n</ul>\n<ol start=\"4\">\n<li>上传完成后解压安装包：<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">//在创建的/usr/java目录下执行ls，查看压缩包名<br>ls<br>//复制文件夹名填到下方压缩包名处，将压缩包解压<br>tar -zxvf 压缩包名<br><br></code></pre></td></tr></table></figure></li>\n</ol>\n<ul>\n<li>解压完成（可以通过xftp查看）<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/aHR0cDovL3B4ZXhjYjFsMi5ia3QuY2xvdWRkbi5jb20vYmxvZy8xNTY3Nzc4ODk5MjMxLnBuZw.png\" alt=\"enter description here\"></li>\n</ul>\n<ol start=\"5\">\n<li>配置jdk环境变量<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">//进入etc文件夹<br>cd /etc<br>//打开profile文件,按shift+i进入编辑模式<br>vi profile<br>//配置环境变量,在profile文件中添加如下内容,注意更换到你的版本<br>export JAVA_HOME=/usr/java/jdk1.8.0_221 <br>export JRE_HOME=$&#123;JAVA_HOME&#125;/jre<br>export CLASSPATH=.:$&#123;JAVA_HOME&#125;/lib:$&#123;JRE_HOME&#125;/lib:$CLASSPATH<br>export JAVA_PATH=$&#123;JAVA_HOME&#125;/bin:$&#123;JRE_HOME&#125;/bin<br>export PATH=$PATH:$&#123;JAVA_PATH&#125;<br>//按“esc”退出编辑模式,随后按“shift+：”进入命令模式，保存并退出<br>输入“wq” 回车<br></code></pre></td></tr></table></figure>\n<img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430172428465.png\" alt=\"image-20220430172428465\"></li>\n</ol>\n<ul>\n<li>重启你的Linuxs输入”reboot”<br><code>reboot</code><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430172435932.png\" alt=\"image-20220430172435932\" style=\"zoom:80%;\" /></li>\n</ul>\n<ol start=\"6\">\n<li>查看配置的环境变量<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">javac 回车<br>java -version 回车<br></code></pre></td></tr></table></figure></li>\n</ol>\n<ul>\n<li><p>javac 配置成功</p>\n<img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430172442450.png\" alt=\"image-20220430172442450\" style=\"zoom:80%;\" />\n</li>\n<li><p>java -version 配置成功<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430172501264.png\" alt=\"image-20220430172501264\"></p>\n</li>\n</ul>\n<h3 id=\"2-tomcat安装与端口配置\"><a href=\"#2-tomcat安装与端口配置\" class=\"headerlink\" title=\"2. tomcat安装与端口配置\"></a>2. tomcat安装与端口配置</h3><ol>\n<li>与解压tomcat方法相同，先创建一个tomcat文件夹<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">//在usr文件夹下新建java目录<br>mkdir /usr/tomcat<br>//进入java目录<br>cd /usr/tomcat<br>//激活上传操作<br>yum -y install lrzsz<br></code></pre></td></tr></table></figure></li>\n<li>进入xftp可视化工具，用于传输windows上下载好的tomcat</li>\n</ol>\n<ul>\n<li>压缩包到Linuxs上（直接如图拖拽并等待上传）<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430172522199.png\" alt=\"image-20220430172522199\"></li>\n</ul>\n<ol start=\"3\">\n<li>上传完成后解压安装包：<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">//在创建的/usr/java目录下执行ls，查看压缩包名<br>ls<br>//复制文件夹名填到下方压缩包名处，将压缩包解压<br>tar -zxvf 压缩包名<br>//修改文件夹名称（注意版本对应你下载的）<br>mv apache-tomcat-8.5.45 tomcat8<br></code></pre></td></tr></table></figure></li>\n</ol>\n<ul>\n<li>解压完成<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430172531559.png\" alt=\"image-20220430172531559\"></li>\n</ul>\n<p><font color=red size=5>tips：tomcat端口号可使用xftp去“&#x2F;usr&#x2F;tomcat&#x2F;tomcat8&#x2F;conf”下的server.xml处修改，修改方法与Windows上相同 </font><br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430172540010.png\" alt=\"image-20220430172540010\"></p>\n<ol start=\"4\">\n<li>启动tomcat<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">//进入tomcat的bin目录<br>cd /usr/tomcat/tomcat8/bin<br>//启动tomcat,输入<br>./startup.sh 回车<br></code></pre></td></tr></table></figure></li>\n<li>浏览器访问测试<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">//ip和端口号换成你的<br>http://47.105.221.156:8080/<br></code></pre></td></tr></table></figure></li>\n</ol>\n<ul>\n<li>成功访问：完成tomcat安装<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430172546907.png\" alt=\"image-20220430172546907\"></li>\n</ul>\n<p><font color=red size=5>检查网址正确后仍然无法访问</font> </p>\n<ul>\n<li><p>莫慌，回到阿里云控制台，找到“本实例安全组”-&gt;“配置规则”：<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430172559666.png\" alt=\"image-20220430172559666\"></p>\n</li>\n<li><p>添加端口<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430172608412.png\" alt=\"image-20220430172608412\"></p>\n</li>\n<li><p>端口范围按照你设置的端口来填，授权对象“0.0.0.0&#x2F;0”<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430172617194.png\" alt=\"image-20220430172617194\"></p>\n</li>\n<li><p>保存后重启你的Linuxs <font color=red size=5>重启后仍无法看到主页。请耐心等待20分钟，可以先继续其他步骤，因为开放端口过程需要给阿里一定时间去配置。只有第一次配置如此！</font>，重新访问tomcat首页，解决！</p>\n</li>\n</ul>\n<ol start=\"6\">\n<li><p>使用eclipse把你的项目打为war包。<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430172626046.png\" alt=\"image-20220430172626046\"></p>\n</li>\n<li><p>上传到Linuxs的“&#x2F;usr&#x2F;tomcat&#x2F;tomcat8&#x2F;webapps”目录下；重启tomcat<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430172637170.png\" alt=\"image-20220430172637170\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">//进入bin文件夹<br>cd /usr/tomcat/tomcat8/bin<br>//关闭tomcat<br>./shutdown.sh<br>//查看是否成功关闭<br>ps -ef|grep java<br>//如果出现以下信息，则表示Tomcat已经关闭<br>root 19955 19757 0 17:48 pts/0 00:00:00 grep java<br>//启动Tomcat<br>./startup.sh<br></code></pre></td></tr></table></figure></li>\n</ol>\n<ul>\n<li>如果显示以下相似信息，说明Tomcat还没有关闭<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430172643828.png\" alt=\"image-20220430172643828\"><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">//使用kill命令杀死tomcat<br>kill -9 12778 <br>//再次查看<br>ps -ef|grep java<br>//启动Tomcat<br>./startup.sh<br></code></pre></td></tr></table></figure>\n<img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430172650405.png\" alt=\"image-20220430172650405\"></li>\n<li>发现我们的tomcat中已经有war包解压出的工程<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430172657174.png\" alt=\"image-20220430172657174\"></li>\n</ul>\n<ol start=\"8\">\n<li>访问你的项目，完成（无数据库工程）！<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430172704691.png\" alt=\"image-20220430172704691\"></li>\n</ol>\n<p><font color=red size=5>注：需要更换war包工程，先关tomcat；删除原来的war包和解压出的工程；在检查“&#x2F;usr&#x2F;tomcat&#x2F;tomcat8&#x2F;work&#x2F;Catalina&#x2F;localhost”路径下是否有部署的工程，有则删除。导入新包，重启tomcat！（载过坑…）</font></p>\n<hr>\n<h3 id=\"3-MySQL安装与配置（非必须，无数据库用户忽略）\"><a href=\"#3-MySQL安装与配置（非必须，无数据库用户忽略）\" class=\"headerlink\" title=\"3. MySQL安装与配置（非必须，无数据库用户忽略）\"></a>3. MySQL安装与配置（非必须，无数据库用户忽略）</h3><ol>\n<li><p>Xshell输入命令下载安装包</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">//5.7版本<br>wget http://repo.mysql.com/mysql57-community-release-el7-8.noarch.rpm<br>//8.0版本<br>wget https://dev.mysql.com/get/mysql80-community-release-el7-3.noarch.rpm<br>//其他版本自己去官网下yum安装栏找下载路径<br>//未安装wget的同学执行以下命令安装<br>sudo yum install wget<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>安装：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">//-ivh 后跟你装的对应版本mysql包<br>sudo rpm -ivh mysql57-community-release-el7-8.noarch.rpm<br> <br>sudo yum install mysql-server<br></code></pre></td></tr></table></figure></li>\n</ol>\n<ul>\n<li>输入“y” 确认安装，等待<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430172716193.png\" alt=\"image-20220430172716193\"></li>\n<li>继续“y”，等待<img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/aHR0cDovL3B4ZXhjYjFsMi5ia3QuY2xvdWRkbi5jb20vYmxvZy8xNTY3Nzc4ODk5NTE2LnBuZw.png\" alt=\"enter description here\" style=\"zoom: 80%;\" /></li>\n<li>完成<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430172724468.png\" alt=\"image-20220430172724468\"></li>\n</ul>\n<ol start=\"3\">\n<li>设置密码<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">//当第一次启动MySQL服务器时，为MySQL根用户生成一个临时密码。 您可以通过运行以下命令找到密码：<br>sudo grep &#x27;temporary password&#x27; /var/log/mysqld.log<br><br></code></pre></td></tr></table></figure></li>\n<li>如果这个文件为空：<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">//1.删除原来安装过的mysql残留的数据<br>rm -rf /var/lib/mysql<br>//2.重启mysqld服务<br>systemctl restart mysqld<br>//3.再去找临时密码<br>sudo grep &#x27;temporary password&#x27; /var/log/mysqld.log<br></code></pre></td></tr></table></figure></li>\n</ol>\n<ul>\n<li>localhost：后面就是临时密码，复制 hr?&#x3D;;FsST2fc<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430172757333.png\" alt=\"image-20220430172757333\"></li>\n</ul>\n<ol start=\"5\">\n<li><p>配置安装项<br><code>sudo mysql_secure_installation</code></p>\n</li>\n<li><p>粘贴你复制的密码，设置新密码（必须包含：密码：大写，小写，数字，字符）<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430172803635.png\" alt=\"image-20220430172803635\"></p>\n</li>\n</ol>\n<ul>\n<li>选择项均为“Y”,确认。看到All done！完成配置。<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430172812319.png\" alt=\"image-20220430172812319\"></li>\n<li>尝试访问，成功<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430172822916.png\" alt=\"image-20220430172822916\"></li>\n</ul>\n<h2 id=\"六、迁移数据库文件\"><a href=\"#六、迁移数据库文件\" class=\"headerlink\" title=\"六、迁移数据库文件\"></a>六、迁移数据库文件</h2><ol>\n<li>使用可视化软件navicat连接数据库</li>\n</ol>\n<ul>\n<li>新建连接<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430172829212.png\" alt=\"image-20220430172829212\"></li>\n<li>按照你的公网ip和设置的mysql密码进行连接<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430172836365.png\" alt=\"image-20220430172836365\"></li>\n</ul>\n<ol start=\"2\">\n<li>可能出现以下窗口（莫慌，这坑踩过了）<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430172850122.png\" alt=\"image-20220430172850122\"></li>\n</ol>\n<ul>\n<li>两步走：<ul>\n<li>第一步：老地方“安全组规则”-&gt;增加你的3306端口-&gt;重启。<font color=red size=5>重启后仍无法看到主页。请耐心等待20分钟，可以先继续其他步骤！部署项目到tomcat服务器需要一定等待时间，请等待。</font><br>  <img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430172856589.png\" alt=\"image-20220430172856589\"><br>  <img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430172921544.png\" alt=\"image-20220430172921544\"></li>\n<li>第二步：Xhell中进入你的数据库  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">//1. 登录,-u账号 -p密码<br> mysql -uroot -p521521<br>//2. 查看数据库：<br> show databases;<br>//3. 进入mysql:<br> use mysql;<br>//4. 查看表：<br>show tables;<br>//5.更新user表数据，添加远程访问权限；<br>update user set Host=&#x27;%&#x27; where User=&#x27;root&#x27;;<br>//重启mysql<br>systemctl restart mysqld<br></code></pre></td></tr></table></figure>\n  <img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430172934343.png\" alt=\"image-20220430172934343\"></li>\n</ul>\n</li>\n<li>重新使用navicat工具连接数据库（踩坑完毕，全体鼓掌！）<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430172943035.png\" alt=\"image-20220430172943035\"></li>\n</ul>\n<ol start=\"3\">\n<li><p>转储你的项目数据库sql文件到阿里云服务器上的数据库中。<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430173003236.png\" alt=\"image-20220430173003236\"><br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430172952238.png\" alt=\"image-20220430172952238\"></p>\n</li>\n<li><p>不要忘记修改你的代码，重新上传war包呦！！！</p>\n</li>\n</ol>\n<ul>\n<li>项目上线发布成功，你的项目可以通过你的网址任意网络访问啦！（全体起立！）<br><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220430173015337.png\" alt=\"image-20220430173015337\"></li>\n</ul>\n<p><font color=red size=5>注：没有缺少任何步骤却无法访问项目的同学，注意：1.修改Linuxs端口后是否重启实例？ 2.修改war包后是否重启tomcat（必要时kill tomcat删除缓存项目重新加载，甚至删除tomcat重新解压。）3.再次检查过程是否缺失步骤！ </font></p>\n<p><font color=green size=5>至此，项目上线成功。为整理出此教程加班三晚，若对大家有所帮助，请多多点赞转发。跪谢！如若还有问题未成功，私聊即可。</font><br>   <font color=red size=5>注：转载请注明出处！！！ </font><br>   接下篇：<a href=\"https://blog.csdn.net/qq_39231769/article/details/100603219\">《Linuxs系统中修改配置文件使得访问java工程直接通过ip，除去端口号和项目名访问。》</a></p>\n"},{"_content":"# 公告需求设计\n\n---\n\n原型图：[https://4g4w5v.axshare.com](https://4g4w5v.axshare.com/) skysky \n\n---\n\n路径\n\ncurrent\n\n## 一、表结构\n\n```\n-- ----------------------------\n-- Table structure for user_read_notice\n-- ----------------------------\nDROP TABLE IF EXISTS `user_read_notice`;\nCREATE TABLE `user_read_notice`  (\n  `id` bigint NOT NULL AUTO_INCREMENT,\n  `user` int NOT NULL COMMENT '用户',\n  `notice` bigint NOT NULL COMMENT '公告',\n  `tenant_notice` bigint NOT NULL COMMENT '租户公告',\n  PRIMARY KEY (`id`) USING BTREE\n) ENGINE = InnoDB AUTO_INCREMENT = 1 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_unicode_ci COMMENT = '用户已读公告' ROW_FORMAT = DYNAMIC;\n\n-- ----------------------------\n-- Table structure for notice\n-- ----------------------------\nDROP TABLE IF EXISTS `notice`;\nCREATE TABLE `notice`  (\n  `id` bigint NOT NULL AUTO_INCREMENT,\n  `title` varchar(15) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL COMMENT '标题',\n  `content` text CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL COMMENT '内容',\n  `status` tinyint NOT NULL DEFAULT 1 COMMENT '状态（1-未发布 2-已发布）',\n  `pre_publish_time` datetime NOT NULL COMMENT '预发布时间',\n  `publish_time` datetime NULL DEFAULT NULL COMMENT '实际发布时间',\n  `all_tenants` tinyint NOT NULL COMMENT '是否全部租户（0-否 1-是）',\n  `platform` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL COMMENT '平台（,拼接的id形式 1-决策 2-风控）',\n  `create_time` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',\n  `update_time` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '更新时间',\n  PRIMARY KEY (`id`) USING BTREE\n) ENGINE = InnoDB AUTO_INCREMENT = 3 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci COMMENT = '公告' ROW_FORMAT = Dynamic;\n\n-- ----------------------------\n-- Table structure for tenant_notice\n-- ----------------------------\nDROP TABLE IF EXISTS `tenant_notice`;\nCREATE TABLE `tenant_notice`  (\n  `id` bigint NOT NULL AUTO_INCREMENT,\n  `tenant` int NOT NULL COMMENT '租户',\n  `notice` bigint NOT NULL COMMENT '公告',\n  `platform` tinyint NOT NULL COMMENT '平台（1-决策 2-风控）',\n  `create_time` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',\n  PRIMARY KEY (`id`) USING BTREE\n) ENGINE = InnoDB AUTO_INCREMENT = 6 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_unicode_ci COMMENT = '租户公告' ROW_FORMAT = Dynamic;\n```\n\n## 二、存在问题\n\n### 1.产品确认问题\n\n暂无\n\n### 2.技术\n\n+ spring boot\n\n+ Redisson：RDelayedQueue\n\n## 三、接口设计\n\n### 1.后台\n\n1. 租户列表查询`get: /api/tenant`，平台列表查询 （樊喆）\n2. 公告列表查询`get: /api/notice` （樊喆）\n3. 公告新建`post: /api/notice`：数据保存，发送延时消息 （樊喆）\n4. 公告详情`get: /api/notice/{id}/detail`（樊喆）\n5. 公告修改`put: /api/notice/{id}`：发布前：删除延时消息，删除tenant_notice记录，重新添加； 发布后：只可修改notice 的title、content； （樊喆）\n6. 公告删除`delete: /api/notice/{id}`：不考虑状态，直接删除notice，tenant_notice，user_read_notice；取消延时消息 （樊喆）\n5. 延时消息发布/取消 （回宝旗 7.8）\n\n### 2.用户端\n\n1. 公告未读数量`get: /api/notice/{platform}/un_read/num`（回宝旗 7.4）\n2. 最近公告查询`get: /api/notice/{platform}/un_read/last `（回宝旗 7.4）\n3. 公告列表 `get: /api/notice/{platform} `（回宝旗7.5）\n3. 公告详情：与管理端共用\n4. 更新已读状态 `post /api/notice/user_read `（回宝旗 7.5）\n\n### 3.公共\n\n+ 数据库设计（6.28）\n\n+ 基础框架搭建 （回宝旗 6.30）\n+ Redisson：RDelayedQueue 搭建（回宝旗 7.1）\n+ 权限集成 （回宝旗 6.30）\n+ 网关\n\n## 四、交互流程图\n\n![image-20220628154206836](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220628154206836.png)\n\n","source":"_posts/BookMark/车车笔记/天境/公告.md","raw":"# 公告需求设计\n\n---\n\n原型图：[https://4g4w5v.axshare.com](https://4g4w5v.axshare.com/) skysky \n\n---\n\n路径\n\ncurrent\n\n## 一、表结构\n\n```\n-- ----------------------------\n-- Table structure for user_read_notice\n-- ----------------------------\nDROP TABLE IF EXISTS `user_read_notice`;\nCREATE TABLE `user_read_notice`  (\n  `id` bigint NOT NULL AUTO_INCREMENT,\n  `user` int NOT NULL COMMENT '用户',\n  `notice` bigint NOT NULL COMMENT '公告',\n  `tenant_notice` bigint NOT NULL COMMENT '租户公告',\n  PRIMARY KEY (`id`) USING BTREE\n) ENGINE = InnoDB AUTO_INCREMENT = 1 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_unicode_ci COMMENT = '用户已读公告' ROW_FORMAT = DYNAMIC;\n\n-- ----------------------------\n-- Table structure for notice\n-- ----------------------------\nDROP TABLE IF EXISTS `notice`;\nCREATE TABLE `notice`  (\n  `id` bigint NOT NULL AUTO_INCREMENT,\n  `title` varchar(15) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL COMMENT '标题',\n  `content` text CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL COMMENT '内容',\n  `status` tinyint NOT NULL DEFAULT 1 COMMENT '状态（1-未发布 2-已发布）',\n  `pre_publish_time` datetime NOT NULL COMMENT '预发布时间',\n  `publish_time` datetime NULL DEFAULT NULL COMMENT '实际发布时间',\n  `all_tenants` tinyint NOT NULL COMMENT '是否全部租户（0-否 1-是）',\n  `platform` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL COMMENT '平台（,拼接的id形式 1-决策 2-风控）',\n  `create_time` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',\n  `update_time` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '更新时间',\n  PRIMARY KEY (`id`) USING BTREE\n) ENGINE = InnoDB AUTO_INCREMENT = 3 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci COMMENT = '公告' ROW_FORMAT = Dynamic;\n\n-- ----------------------------\n-- Table structure for tenant_notice\n-- ----------------------------\nDROP TABLE IF EXISTS `tenant_notice`;\nCREATE TABLE `tenant_notice`  (\n  `id` bigint NOT NULL AUTO_INCREMENT,\n  `tenant` int NOT NULL COMMENT '租户',\n  `notice` bigint NOT NULL COMMENT '公告',\n  `platform` tinyint NOT NULL COMMENT '平台（1-决策 2-风控）',\n  `create_time` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',\n  PRIMARY KEY (`id`) USING BTREE\n) ENGINE = InnoDB AUTO_INCREMENT = 6 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_unicode_ci COMMENT = '租户公告' ROW_FORMAT = Dynamic;\n```\n\n## 二、存在问题\n\n### 1.产品确认问题\n\n暂无\n\n### 2.技术\n\n+ spring boot\n\n+ Redisson：RDelayedQueue\n\n## 三、接口设计\n\n### 1.后台\n\n1. 租户列表查询`get: /api/tenant`，平台列表查询 （樊喆）\n2. 公告列表查询`get: /api/notice` （樊喆）\n3. 公告新建`post: /api/notice`：数据保存，发送延时消息 （樊喆）\n4. 公告详情`get: /api/notice/{id}/detail`（樊喆）\n5. 公告修改`put: /api/notice/{id}`：发布前：删除延时消息，删除tenant_notice记录，重新添加； 发布后：只可修改notice 的title、content； （樊喆）\n6. 公告删除`delete: /api/notice/{id}`：不考虑状态，直接删除notice，tenant_notice，user_read_notice；取消延时消息 （樊喆）\n5. 延时消息发布/取消 （回宝旗 7.8）\n\n### 2.用户端\n\n1. 公告未读数量`get: /api/notice/{platform}/un_read/num`（回宝旗 7.4）\n2. 最近公告查询`get: /api/notice/{platform}/un_read/last `（回宝旗 7.4）\n3. 公告列表 `get: /api/notice/{platform} `（回宝旗7.5）\n3. 公告详情：与管理端共用\n4. 更新已读状态 `post /api/notice/user_read `（回宝旗 7.5）\n\n### 3.公共\n\n+ 数据库设计（6.28）\n\n+ 基础框架搭建 （回宝旗 6.30）\n+ Redisson：RDelayedQueue 搭建（回宝旗 7.1）\n+ 权限集成 （回宝旗 6.30）\n+ 网关\n\n## 四、交互流程图\n\n![image-20220628154206836](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220628154206836.png)\n\n","slug":"BookMark/车车笔记/天境/公告","published":1,"date":"2022-07-18T09:51:41.000Z","updated":"2022-09-01T10:02:40.540Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cl7ptszov003iaba56prr21gp","content":"<h1><span id=\"公告需求设计\">公告需求设计</span></h1><hr>\n<p>原型图：<a href=\"https://4g4w5v.axshare.com/\">https://4g4w5v.axshare.com</a> skysky </p>\n<hr>\n<p>路径</p>\n<p>current</p>\n<h2><span id=\"一-表结构\">一、表结构</span></h2><figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pgsql\"><span class=\"hljs-comment\">-- ----------------------------</span><br><span class=\"hljs-comment\">-- Table structure for user_read_notice</span><br><span class=\"hljs-comment\">-- ----------------------------</span><br><span class=\"hljs-keyword\">DROP</span> <span class=\"hljs-keyword\">TABLE</span> <span class=\"hljs-keyword\">IF</span> <span class=\"hljs-keyword\">EXISTS</span> `user_read_notice`;<br><span class=\"hljs-keyword\">CREATE</span> <span class=\"hljs-keyword\">TABLE</span> `user_read_notice`  (<br>  `id` <span class=\"hljs-type\">bigint</span> <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-keyword\">NULL</span> AUTO_INCREMENT,<br>  `<span class=\"hljs-keyword\">user</span>` <span class=\"hljs-type\">int</span> <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-keyword\">NULL</span> <span class=\"hljs-keyword\">COMMENT</span> <span class=\"hljs-string\">&#x27;用户&#x27;</span>,<br>  `<span class=\"hljs-keyword\">notice</span>` <span class=\"hljs-type\">bigint</span> <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-keyword\">NULL</span> <span class=\"hljs-keyword\">COMMENT</span> <span class=\"hljs-string\">&#x27;公告&#x27;</span>,<br>  `tenant_notice` <span class=\"hljs-type\">bigint</span> <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-keyword\">NULL</span> <span class=\"hljs-keyword\">COMMENT</span> <span class=\"hljs-string\">&#x27;租户公告&#x27;</span>,<br>  <span class=\"hljs-keyword\">PRIMARY KEY</span> (`id`) <span class=\"hljs-keyword\">USING</span> BTREE<br>) ENGINE = InnoDB AUTO_INCREMENT = <span class=\"hljs-number\">1</span> <span class=\"hljs-type\">CHARACTER</span> <span class=\"hljs-keyword\">SET</span> = utf8mb4 <span class=\"hljs-keyword\">COLLATE</span> = utf8mb4_unicode_ci <span class=\"hljs-keyword\">COMMENT</span> = <span class=\"hljs-string\">&#x27;用户已读公告&#x27;</span> ROW_FORMAT = DYNAMIC;<br><br><span class=\"hljs-comment\">-- ----------------------------</span><br><span class=\"hljs-comment\">-- Table structure for notice</span><br><span class=\"hljs-comment\">-- ----------------------------</span><br><span class=\"hljs-keyword\">DROP</span> <span class=\"hljs-keyword\">TABLE</span> <span class=\"hljs-keyword\">IF</span> <span class=\"hljs-keyword\">EXISTS</span> `<span class=\"hljs-keyword\">notice</span>`;<br><span class=\"hljs-keyword\">CREATE</span> <span class=\"hljs-keyword\">TABLE</span> `<span class=\"hljs-keyword\">notice</span>`  (<br>  `id` <span class=\"hljs-type\">bigint</span> <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-keyword\">NULL</span> AUTO_INCREMENT,<br>  `title` <span class=\"hljs-type\">varchar</span>(<span class=\"hljs-number\">15</span>) <span class=\"hljs-type\">CHARACTER</span> <span class=\"hljs-keyword\">SET</span> utf8mb4 <span class=\"hljs-keyword\">COLLATE</span> utf8mb4_unicode_ci <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-keyword\">NULL</span> <span class=\"hljs-keyword\">COMMENT</span> <span class=\"hljs-string\">&#x27;标题&#x27;</span>,<br>  `content` <span class=\"hljs-type\">text</span> <span class=\"hljs-type\">CHARACTER</span> <span class=\"hljs-keyword\">SET</span> utf8mb4 <span class=\"hljs-keyword\">COLLATE</span> utf8mb4_unicode_ci <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-keyword\">NULL</span> <span class=\"hljs-keyword\">COMMENT</span> <span class=\"hljs-string\">&#x27;内容&#x27;</span>,<br>  `status` tinyint <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-keyword\">NULL</span> <span class=\"hljs-keyword\">DEFAULT</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">COMMENT</span> <span class=\"hljs-string\">&#x27;状态（1-未发布 2-已发布）&#x27;</span>,<br>  `pre_publish_time` datetime <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-keyword\">NULL</span> <span class=\"hljs-keyword\">COMMENT</span> <span class=\"hljs-string\">&#x27;预发布时间&#x27;</span>,<br>  `publish_time` datetime <span class=\"hljs-keyword\">NULL</span> <span class=\"hljs-keyword\">DEFAULT</span> <span class=\"hljs-keyword\">NULL</span> <span class=\"hljs-keyword\">COMMENT</span> <span class=\"hljs-string\">&#x27;实际发布时间&#x27;</span>,<br>  `all_tenants` tinyint <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-keyword\">NULL</span> <span class=\"hljs-keyword\">COMMENT</span> <span class=\"hljs-string\">&#x27;是否全部租户（0-否 1-是）&#x27;</span>,<br>  `platform` <span class=\"hljs-type\">varchar</span>(<span class=\"hljs-number\">50</span>) <span class=\"hljs-type\">CHARACTER</span> <span class=\"hljs-keyword\">SET</span> utf8mb4 <span class=\"hljs-keyword\">COLLATE</span> utf8mb4_0900_ai_ci <span class=\"hljs-keyword\">NULL</span> <span class=\"hljs-keyword\">DEFAULT</span> <span class=\"hljs-keyword\">NULL</span> <span class=\"hljs-keyword\">COMMENT</span> <span class=\"hljs-string\">&#x27;平台（,拼接的id形式 1-决策 2-风控）&#x27;</span>,<br>  `create_time` datetime <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-keyword\">NULL</span> <span class=\"hljs-keyword\">DEFAULT</span> <span class=\"hljs-built_in\">CURRENT_TIMESTAMP</span> <span class=\"hljs-keyword\">COMMENT</span> <span class=\"hljs-string\">&#x27;创建时间&#x27;</span>,<br>  `update_time` datetime <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-keyword\">NULL</span> <span class=\"hljs-keyword\">DEFAULT</span> <span class=\"hljs-built_in\">CURRENT_TIMESTAMP</span> <span class=\"hljs-keyword\">ON</span> <span class=\"hljs-keyword\">UPDATE</span> <span class=\"hljs-built_in\">CURRENT_TIMESTAMP</span> <span class=\"hljs-keyword\">COMMENT</span> <span class=\"hljs-string\">&#x27;更新时间&#x27;</span>,<br>  <span class=\"hljs-keyword\">PRIMARY KEY</span> (`id`) <span class=\"hljs-keyword\">USING</span> BTREE<br>) ENGINE = InnoDB AUTO_INCREMENT = <span class=\"hljs-number\">3</span> <span class=\"hljs-type\">CHARACTER</span> <span class=\"hljs-keyword\">SET</span> = utf8mb4 <span class=\"hljs-keyword\">COLLATE</span> = utf8mb4_0900_ai_ci <span class=\"hljs-keyword\">COMMENT</span> = <span class=\"hljs-string\">&#x27;公告&#x27;</span> ROW_FORMAT = Dynamic;<br><br><span class=\"hljs-comment\">-- ----------------------------</span><br><span class=\"hljs-comment\">-- Table structure for tenant_notice</span><br><span class=\"hljs-comment\">-- ----------------------------</span><br><span class=\"hljs-keyword\">DROP</span> <span class=\"hljs-keyword\">TABLE</span> <span class=\"hljs-keyword\">IF</span> <span class=\"hljs-keyword\">EXISTS</span> `tenant_notice`;<br><span class=\"hljs-keyword\">CREATE</span> <span class=\"hljs-keyword\">TABLE</span> `tenant_notice`  (<br>  `id` <span class=\"hljs-type\">bigint</span> <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-keyword\">NULL</span> AUTO_INCREMENT,<br>  `tenant` <span class=\"hljs-type\">int</span> <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-keyword\">NULL</span> <span class=\"hljs-keyword\">COMMENT</span> <span class=\"hljs-string\">&#x27;租户&#x27;</span>,<br>  `<span class=\"hljs-keyword\">notice</span>` <span class=\"hljs-type\">bigint</span> <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-keyword\">NULL</span> <span class=\"hljs-keyword\">COMMENT</span> <span class=\"hljs-string\">&#x27;公告&#x27;</span>,<br>  `platform` tinyint <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-keyword\">NULL</span> <span class=\"hljs-keyword\">COMMENT</span> <span class=\"hljs-string\">&#x27;平台（1-决策 2-风控）&#x27;</span>,<br>  `create_time` datetime <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-keyword\">NULL</span> <span class=\"hljs-keyword\">DEFAULT</span> <span class=\"hljs-built_in\">CURRENT_TIMESTAMP</span> <span class=\"hljs-keyword\">COMMENT</span> <span class=\"hljs-string\">&#x27;创建时间&#x27;</span>,<br>  <span class=\"hljs-keyword\">PRIMARY KEY</span> (`id`) <span class=\"hljs-keyword\">USING</span> BTREE<br>) ENGINE = InnoDB AUTO_INCREMENT = <span class=\"hljs-number\">6</span> <span class=\"hljs-type\">CHARACTER</span> <span class=\"hljs-keyword\">SET</span> = utf8mb4 <span class=\"hljs-keyword\">COLLATE</span> = utf8mb4_unicode_ci <span class=\"hljs-keyword\">COMMENT</span> = <span class=\"hljs-string\">&#x27;租户公告&#x27;</span> ROW_FORMAT = Dynamic;<br></code></pre></td></tr></table></figure>\n\n<h2><span id=\"二-存在问题\">二、存在问题</span></h2><h3><span id=\"1产品确认问题\">1.产品确认问题</span></h3><p>暂无</p>\n<h3><span id=\"2技术\">2.技术</span></h3><ul>\n<li><p>spring boot</p>\n</li>\n<li><p>Redisson：RDelayedQueue</p>\n</li>\n</ul>\n<h2><span id=\"三-接口设计\">三、接口设计</span></h2><h3><span id=\"1后台\">1.后台</span></h3><ol>\n<li>租户列表查询<code>get: /api/tenant</code>，平台列表查询 （樊喆）</li>\n<li>公告列表查询<code>get: /api/notice</code> （樊喆）</li>\n<li>公告新建<code>post: /api/notice</code>：数据保存，发送延时消息 （樊喆）</li>\n<li>公告详情<code>get: /api/notice/&#123;id&#125;/detail</code>（樊喆）</li>\n<li>公告修改<code>put: /api/notice/&#123;id&#125;</code>：发布前：删除延时消息，删除tenant_notice记录，重新添加； 发布后：只可修改notice 的title、content； （樊喆）</li>\n<li>公告删除<code>delete: /api/notice/&#123;id&#125;</code>：不考虑状态，直接删除notice，tenant_notice，user_read_notice；取消延时消息 （樊喆）</li>\n<li>延时消息发布&#x2F;取消 （回宝旗 7.8）</li>\n</ol>\n<h3><span id=\"2用户端\">2.用户端</span></h3><ol>\n<li>公告未读数量<code>get: /api/notice/&#123;platform&#125;/un_read/num</code>（回宝旗 7.4）</li>\n<li>最近公告查询<code>get: /api/notice/&#123;platform&#125;/un_read/last </code>（回宝旗 7.4）</li>\n<li>公告列表 <code>get: /api/notice/&#123;platform&#125; </code>（回宝旗7.5）</li>\n<li>公告详情：与管理端共用</li>\n<li>更新已读状态 <code>post /api/notice/user_read </code>（回宝旗 7.5）</li>\n</ol>\n<h3><span id=\"3公共\">3.公共</span></h3><ul>\n<li><p>数据库设计（6.28）</p>\n</li>\n<li><p>基础框架搭建 （回宝旗 6.30）</p>\n</li>\n<li><p>Redisson：RDelayedQueue 搭建（回宝旗 7.1）</p>\n</li>\n<li><p>权限集成 （回宝旗 6.30）</p>\n</li>\n<li><p>网关</p>\n</li>\n</ul>\n<h2><span id=\"四-交互流程图\">四、交互流程图</span></h2><p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220628154206836.png\" alt=\"image-20220628154206836\"></p>\n","site":{"data":{}},"wordcount":2906,"excerpt":"","more":"<h1 id=\"公告需求设计\"><a href=\"#公告需求设计\" class=\"headerlink\" title=\"公告需求设计\"></a>公告需求设计</h1><hr>\n<p>原型图：<a href=\"https://4g4w5v.axshare.com/\">https://4g4w5v.axshare.com</a> skysky </p>\n<hr>\n<p>路径</p>\n<p>current</p>\n<h2 id=\"一、表结构\"><a href=\"#一、表结构\" class=\"headerlink\" title=\"一、表结构\"></a>一、表结构</h2><figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pgsql\"><span class=\"hljs-comment\">-- ----------------------------</span><br><span class=\"hljs-comment\">-- Table structure for user_read_notice</span><br><span class=\"hljs-comment\">-- ----------------------------</span><br><span class=\"hljs-keyword\">DROP</span> <span class=\"hljs-keyword\">TABLE</span> <span class=\"hljs-keyword\">IF</span> <span class=\"hljs-keyword\">EXISTS</span> `user_read_notice`;<br><span class=\"hljs-keyword\">CREATE</span> <span class=\"hljs-keyword\">TABLE</span> `user_read_notice`  (<br>  `id` <span class=\"hljs-type\">bigint</span> <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-keyword\">NULL</span> AUTO_INCREMENT,<br>  `<span class=\"hljs-keyword\">user</span>` <span class=\"hljs-type\">int</span> <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-keyword\">NULL</span> <span class=\"hljs-keyword\">COMMENT</span> <span class=\"hljs-string\">&#x27;用户&#x27;</span>,<br>  `<span class=\"hljs-keyword\">notice</span>` <span class=\"hljs-type\">bigint</span> <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-keyword\">NULL</span> <span class=\"hljs-keyword\">COMMENT</span> <span class=\"hljs-string\">&#x27;公告&#x27;</span>,<br>  `tenant_notice` <span class=\"hljs-type\">bigint</span> <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-keyword\">NULL</span> <span class=\"hljs-keyword\">COMMENT</span> <span class=\"hljs-string\">&#x27;租户公告&#x27;</span>,<br>  <span class=\"hljs-keyword\">PRIMARY KEY</span> (`id`) <span class=\"hljs-keyword\">USING</span> BTREE<br>) ENGINE = InnoDB AUTO_INCREMENT = <span class=\"hljs-number\">1</span> <span class=\"hljs-type\">CHARACTER</span> <span class=\"hljs-keyword\">SET</span> = utf8mb4 <span class=\"hljs-keyword\">COLLATE</span> = utf8mb4_unicode_ci <span class=\"hljs-keyword\">COMMENT</span> = <span class=\"hljs-string\">&#x27;用户已读公告&#x27;</span> ROW_FORMAT = DYNAMIC;<br><br><span class=\"hljs-comment\">-- ----------------------------</span><br><span class=\"hljs-comment\">-- Table structure for notice</span><br><span class=\"hljs-comment\">-- ----------------------------</span><br><span class=\"hljs-keyword\">DROP</span> <span class=\"hljs-keyword\">TABLE</span> <span class=\"hljs-keyword\">IF</span> <span class=\"hljs-keyword\">EXISTS</span> `<span class=\"hljs-keyword\">notice</span>`;<br><span class=\"hljs-keyword\">CREATE</span> <span class=\"hljs-keyword\">TABLE</span> `<span class=\"hljs-keyword\">notice</span>`  (<br>  `id` <span class=\"hljs-type\">bigint</span> <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-keyword\">NULL</span> AUTO_INCREMENT,<br>  `title` <span class=\"hljs-type\">varchar</span>(<span class=\"hljs-number\">15</span>) <span class=\"hljs-type\">CHARACTER</span> <span class=\"hljs-keyword\">SET</span> utf8mb4 <span class=\"hljs-keyword\">COLLATE</span> utf8mb4_unicode_ci <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-keyword\">NULL</span> <span class=\"hljs-keyword\">COMMENT</span> <span class=\"hljs-string\">&#x27;标题&#x27;</span>,<br>  `content` <span class=\"hljs-type\">text</span> <span class=\"hljs-type\">CHARACTER</span> <span class=\"hljs-keyword\">SET</span> utf8mb4 <span class=\"hljs-keyword\">COLLATE</span> utf8mb4_unicode_ci <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-keyword\">NULL</span> <span class=\"hljs-keyword\">COMMENT</span> <span class=\"hljs-string\">&#x27;内容&#x27;</span>,<br>  `status` tinyint <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-keyword\">NULL</span> <span class=\"hljs-keyword\">DEFAULT</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">COMMENT</span> <span class=\"hljs-string\">&#x27;状态（1-未发布 2-已发布）&#x27;</span>,<br>  `pre_publish_time` datetime <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-keyword\">NULL</span> <span class=\"hljs-keyword\">COMMENT</span> <span class=\"hljs-string\">&#x27;预发布时间&#x27;</span>,<br>  `publish_time` datetime <span class=\"hljs-keyword\">NULL</span> <span class=\"hljs-keyword\">DEFAULT</span> <span class=\"hljs-keyword\">NULL</span> <span class=\"hljs-keyword\">COMMENT</span> <span class=\"hljs-string\">&#x27;实际发布时间&#x27;</span>,<br>  `all_tenants` tinyint <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-keyword\">NULL</span> <span class=\"hljs-keyword\">COMMENT</span> <span class=\"hljs-string\">&#x27;是否全部租户（0-否 1-是）&#x27;</span>,<br>  `platform` <span class=\"hljs-type\">varchar</span>(<span class=\"hljs-number\">50</span>) <span class=\"hljs-type\">CHARACTER</span> <span class=\"hljs-keyword\">SET</span> utf8mb4 <span class=\"hljs-keyword\">COLLATE</span> utf8mb4_0900_ai_ci <span class=\"hljs-keyword\">NULL</span> <span class=\"hljs-keyword\">DEFAULT</span> <span class=\"hljs-keyword\">NULL</span> <span class=\"hljs-keyword\">COMMENT</span> <span class=\"hljs-string\">&#x27;平台（,拼接的id形式 1-决策 2-风控）&#x27;</span>,<br>  `create_time` datetime <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-keyword\">NULL</span> <span class=\"hljs-keyword\">DEFAULT</span> <span class=\"hljs-built_in\">CURRENT_TIMESTAMP</span> <span class=\"hljs-keyword\">COMMENT</span> <span class=\"hljs-string\">&#x27;创建时间&#x27;</span>,<br>  `update_time` datetime <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-keyword\">NULL</span> <span class=\"hljs-keyword\">DEFAULT</span> <span class=\"hljs-built_in\">CURRENT_TIMESTAMP</span> <span class=\"hljs-keyword\">ON</span> <span class=\"hljs-keyword\">UPDATE</span> <span class=\"hljs-built_in\">CURRENT_TIMESTAMP</span> <span class=\"hljs-keyword\">COMMENT</span> <span class=\"hljs-string\">&#x27;更新时间&#x27;</span>,<br>  <span class=\"hljs-keyword\">PRIMARY KEY</span> (`id`) <span class=\"hljs-keyword\">USING</span> BTREE<br>) ENGINE = InnoDB AUTO_INCREMENT = <span class=\"hljs-number\">3</span> <span class=\"hljs-type\">CHARACTER</span> <span class=\"hljs-keyword\">SET</span> = utf8mb4 <span class=\"hljs-keyword\">COLLATE</span> = utf8mb4_0900_ai_ci <span class=\"hljs-keyword\">COMMENT</span> = <span class=\"hljs-string\">&#x27;公告&#x27;</span> ROW_FORMAT = Dynamic;<br><br><span class=\"hljs-comment\">-- ----------------------------</span><br><span class=\"hljs-comment\">-- Table structure for tenant_notice</span><br><span class=\"hljs-comment\">-- ----------------------------</span><br><span class=\"hljs-keyword\">DROP</span> <span class=\"hljs-keyword\">TABLE</span> <span class=\"hljs-keyword\">IF</span> <span class=\"hljs-keyword\">EXISTS</span> `tenant_notice`;<br><span class=\"hljs-keyword\">CREATE</span> <span class=\"hljs-keyword\">TABLE</span> `tenant_notice`  (<br>  `id` <span class=\"hljs-type\">bigint</span> <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-keyword\">NULL</span> AUTO_INCREMENT,<br>  `tenant` <span class=\"hljs-type\">int</span> <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-keyword\">NULL</span> <span class=\"hljs-keyword\">COMMENT</span> <span class=\"hljs-string\">&#x27;租户&#x27;</span>,<br>  `<span class=\"hljs-keyword\">notice</span>` <span class=\"hljs-type\">bigint</span> <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-keyword\">NULL</span> <span class=\"hljs-keyword\">COMMENT</span> <span class=\"hljs-string\">&#x27;公告&#x27;</span>,<br>  `platform` tinyint <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-keyword\">NULL</span> <span class=\"hljs-keyword\">COMMENT</span> <span class=\"hljs-string\">&#x27;平台（1-决策 2-风控）&#x27;</span>,<br>  `create_time` datetime <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-keyword\">NULL</span> <span class=\"hljs-keyword\">DEFAULT</span> <span class=\"hljs-built_in\">CURRENT_TIMESTAMP</span> <span class=\"hljs-keyword\">COMMENT</span> <span class=\"hljs-string\">&#x27;创建时间&#x27;</span>,<br>  <span class=\"hljs-keyword\">PRIMARY KEY</span> (`id`) <span class=\"hljs-keyword\">USING</span> BTREE<br>) ENGINE = InnoDB AUTO_INCREMENT = <span class=\"hljs-number\">6</span> <span class=\"hljs-type\">CHARACTER</span> <span class=\"hljs-keyword\">SET</span> = utf8mb4 <span class=\"hljs-keyword\">COLLATE</span> = utf8mb4_unicode_ci <span class=\"hljs-keyword\">COMMENT</span> = <span class=\"hljs-string\">&#x27;租户公告&#x27;</span> ROW_FORMAT = Dynamic;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"二、存在问题\"><a href=\"#二、存在问题\" class=\"headerlink\" title=\"二、存在问题\"></a>二、存在问题</h2><h3 id=\"1-产品确认问题\"><a href=\"#1-产品确认问题\" class=\"headerlink\" title=\"1.产品确认问题\"></a>1.产品确认问题</h3><p>暂无</p>\n<h3 id=\"2-技术\"><a href=\"#2-技术\" class=\"headerlink\" title=\"2.技术\"></a>2.技术</h3><ul>\n<li><p>spring boot</p>\n</li>\n<li><p>Redisson：RDelayedQueue</p>\n</li>\n</ul>\n<h2 id=\"三、接口设计\"><a href=\"#三、接口设计\" class=\"headerlink\" title=\"三、接口设计\"></a>三、接口设计</h2><h3 id=\"1-后台\"><a href=\"#1-后台\" class=\"headerlink\" title=\"1.后台\"></a>1.后台</h3><ol>\n<li>租户列表查询<code>get: /api/tenant</code>，平台列表查询 （樊喆）</li>\n<li>公告列表查询<code>get: /api/notice</code> （樊喆）</li>\n<li>公告新建<code>post: /api/notice</code>：数据保存，发送延时消息 （樊喆）</li>\n<li>公告详情<code>get: /api/notice/&#123;id&#125;/detail</code>（樊喆）</li>\n<li>公告修改<code>put: /api/notice/&#123;id&#125;</code>：发布前：删除延时消息，删除tenant_notice记录，重新添加； 发布后：只可修改notice 的title、content； （樊喆）</li>\n<li>公告删除<code>delete: /api/notice/&#123;id&#125;</code>：不考虑状态，直接删除notice，tenant_notice，user_read_notice；取消延时消息 （樊喆）</li>\n<li>延时消息发布&#x2F;取消 （回宝旗 7.8）</li>\n</ol>\n<h3 id=\"2-用户端\"><a href=\"#2-用户端\" class=\"headerlink\" title=\"2.用户端\"></a>2.用户端</h3><ol>\n<li>公告未读数量<code>get: /api/notice/&#123;platform&#125;/un_read/num</code>（回宝旗 7.4）</li>\n<li>最近公告查询<code>get: /api/notice/&#123;platform&#125;/un_read/last </code>（回宝旗 7.4）</li>\n<li>公告列表 <code>get: /api/notice/&#123;platform&#125; </code>（回宝旗7.5）</li>\n<li>公告详情：与管理端共用</li>\n<li>更新已读状态 <code>post /api/notice/user_read </code>（回宝旗 7.5）</li>\n</ol>\n<h3 id=\"3-公共\"><a href=\"#3-公共\" class=\"headerlink\" title=\"3.公共\"></a>3.公共</h3><ul>\n<li><p>数据库设计（6.28）</p>\n</li>\n<li><p>基础框架搭建 （回宝旗 6.30）</p>\n</li>\n<li><p>Redisson：RDelayedQueue 搭建（回宝旗 7.1）</p>\n</li>\n<li><p>权限集成 （回宝旗 6.30）</p>\n</li>\n<li><p>网关</p>\n</li>\n</ul>\n<h2 id=\"四、交互流程图\"><a href=\"#四、交互流程图\" class=\"headerlink\" title=\"四、交互流程图\"></a>四、交互流程图</h2><p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220628154206836.png\" alt=\"image-20220628154206836\"></p>\n"},{"_content":"仅需结构：\n\tdefault:\n\t\taudit_log \n\t\tbatch_query_info\n\t\tbatch_query_risk_report\n\t\tbatch_query_risk_report_detail\n\t\treport_label_mapping\n\t\trisk_claim\n\t\trisk_claim_case_message\n\t\trisk_claim_detail\n\t\trisk_report\n\t\trisk_report_detail\n\n结构数据：\n\tdefault:\n\t\tarea 地区\n\t\taccident_type 保险事故分类\n\t\tfitting 配件表\n\t\tinsurance_kind 险种\n\t\tinsurance_company 保司\n\t\trisk_label 风险标签表\n\t\trisk_level 风险等级表\n\tseer_0 - seer_7:\n\t\tclaim\n\t\tclaim_auto\n\t\tclaim_policy\n\t\tclaim_person_info\n\t\tvin_claim_mapping\n\t\tclaim_maintenance_info\n\nMerge.sql\n\n```\n#1.0.2\nINSERT INTO `seer_default`.`role_permission` (`id`, `role`, `permission`) VALUES (120,4,70);\n#1.1.0\nINSERT INTO `seer_default`.`permission` (`id`, `name`, `code`, `parent`, `internal`, `create_time`)\nVALUES\n    (75, '理赔风控', 'risk_claim', 0, 0, NOW()),\n    (76, '新建理赔风控查询', 'risk_claim.create', 75, 0, NOW()),\n    (77, '理赔风控列表', 'risk_claim.query', 75, 0, NOW()),\n    (78, '理赔风控详情', 'risk_claim.query.detail', 77, 0, NOW());\nINSERT INTO `seer_default`.`role_permission` (`id`, `role`, `permission`)\nVALUES\n    (127,4,75),\n    (128,4,76),\n    (129,4,77),\n    (130,4,78);\n#1.0.3\nINSERT INTO `seer_default`.`permission` (`id`, `name`, `code`, `parent`, `internal`, `create_time`) \nVALUES\n\t(86, '新建批量承保查询', 'risk_insured.batch_create', 66, 0, '2022-07-06 14:35:15'),\n    (87, '批量承保查询列表', 'risk_insured.batch_query', 66, 0, '2022-07-06 14:36:10');\nINSERT INTO `seer_default`.`role_permission` (`id`, `role`, `permission`)\nVALUES\n    (145, 4, 86),\n    (146, 4, 87);\nINSERT INTO `seer_default`.`permission` (`id`, `name`, `code`, `parent`, `internal`, `create_time`)\nVALUES\n    (109, '风控报告详情维修信息权限', 'risk_insured.maintenance_detail', 66, 0, '2022-08-08 14:36:10');\nINSERT INTO `seer_default`.`role_permission` (`id`, `role`, `permission`)\nVALUES\n    (162, 4, 109);\n```","source":"_posts/BookMark/车车笔记/天境/天境上线.md","raw":"仅需结构：\n\tdefault:\n\t\taudit_log \n\t\tbatch_query_info\n\t\tbatch_query_risk_report\n\t\tbatch_query_risk_report_detail\n\t\treport_label_mapping\n\t\trisk_claim\n\t\trisk_claim_case_message\n\t\trisk_claim_detail\n\t\trisk_report\n\t\trisk_report_detail\n\n结构数据：\n\tdefault:\n\t\tarea 地区\n\t\taccident_type 保险事故分类\n\t\tfitting 配件表\n\t\tinsurance_kind 险种\n\t\tinsurance_company 保司\n\t\trisk_label 风险标签表\n\t\trisk_level 风险等级表\n\tseer_0 - seer_7:\n\t\tclaim\n\t\tclaim_auto\n\t\tclaim_policy\n\t\tclaim_person_info\n\t\tvin_claim_mapping\n\t\tclaim_maintenance_info\n\nMerge.sql\n\n```\n#1.0.2\nINSERT INTO `seer_default`.`role_permission` (`id`, `role`, `permission`) VALUES (120,4,70);\n#1.1.0\nINSERT INTO `seer_default`.`permission` (`id`, `name`, `code`, `parent`, `internal`, `create_time`)\nVALUES\n    (75, '理赔风控', 'risk_claim', 0, 0, NOW()),\n    (76, '新建理赔风控查询', 'risk_claim.create', 75, 0, NOW()),\n    (77, '理赔风控列表', 'risk_claim.query', 75, 0, NOW()),\n    (78, '理赔风控详情', 'risk_claim.query.detail', 77, 0, NOW());\nINSERT INTO `seer_default`.`role_permission` (`id`, `role`, `permission`)\nVALUES\n    (127,4,75),\n    (128,4,76),\n    (129,4,77),\n    (130,4,78);\n#1.0.3\nINSERT INTO `seer_default`.`permission` (`id`, `name`, `code`, `parent`, `internal`, `create_time`) \nVALUES\n\t(86, '新建批量承保查询', 'risk_insured.batch_create', 66, 0, '2022-07-06 14:35:15'),\n    (87, '批量承保查询列表', 'risk_insured.batch_query', 66, 0, '2022-07-06 14:36:10');\nINSERT INTO `seer_default`.`role_permission` (`id`, `role`, `permission`)\nVALUES\n    (145, 4, 86),\n    (146, 4, 87);\nINSERT INTO `seer_default`.`permission` (`id`, `name`, `code`, `parent`, `internal`, `create_time`)\nVALUES\n    (109, '风控报告详情维修信息权限', 'risk_insured.maintenance_detail', 66, 0, '2022-08-08 14:36:10');\nINSERT INTO `seer_default`.`role_permission` (`id`, `role`, `permission`)\nVALUES\n    (162, 4, 109);\n```","slug":"BookMark/车车笔记/天境/天境上线","published":1,"date":"2022-08-18T08:19:06.208Z","updated":"2022-08-18T08:20:25.461Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cl7ptszov003jaba5h5d09cpr","content":"<p>仅需结构：<br>    default:<br>        audit_log<br>        batch_query_info<br>        batch_query_risk_report<br>        batch_query_risk_report_detail<br>        report_label_mapping<br>        risk_claim<br>        risk_claim_case_message<br>        risk_claim_detail<br>        risk_report<br>        risk_report_detail</p>\n<p>结构数据：<br>    default:<br>        area 地区<br>        accident_type 保险事故分类<br>        fitting 配件表<br>        insurance_kind 险种<br>        insurance_company 保司<br>        risk_label 风险标签表<br>        risk_level 风险等级表<br>    seer_0 - seer_7:<br>        claim<br>        claim_auto<br>        claim_policy<br>        claim_person_info<br>        vin_claim_mapping<br>        claim_maintenance_info</p>\n<p>Merge.sql</p>\n<figure class=\"highlight autohotkey\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs autohotkey\"><span class=\"hljs-meta\">#1.0.2</span><br>INSERT INTO `seer_default`.`role_permission` (`id`, `role`, `permission`) VALUES (<span class=\"hljs-number\">120</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">70</span>)<span class=\"hljs-comment\">;</span><br><span class=\"hljs-meta\">#1.1.0</span><br>INSERT INTO `seer_default`.`permission` (`id`, `name`, `code`, `parent`, `internal`, `create_time`)<br>VALUES<br>    (<span class=\"hljs-number\">75</span>, &#x27;理赔风控&#x27;, &#x27;risk_claim&#x27;, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, NOW()),<br>    (<span class=\"hljs-number\">76</span>, &#x27;新建理赔风控查询&#x27;, &#x27;risk_claim.create&#x27;, <span class=\"hljs-number\">75</span>, <span class=\"hljs-number\">0</span>, NOW()),<br>    (<span class=\"hljs-number\">77</span>, &#x27;理赔风控列表&#x27;, &#x27;risk_claim.query&#x27;, <span class=\"hljs-number\">75</span>, <span class=\"hljs-number\">0</span>, NOW()),<br>    (<span class=\"hljs-number\">78</span>, &#x27;理赔风控详情&#x27;, &#x27;risk_claim.query.detail&#x27;, <span class=\"hljs-number\">77</span>, <span class=\"hljs-number\">0</span>, NOW())<span class=\"hljs-comment\">;</span><br>INSERT INTO `seer_default`.`role_permission` (`id`, `role`, `permission`)<br>VALUES<br>    (<span class=\"hljs-number\">127</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">75</span>),<br>    (<span class=\"hljs-number\">128</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">76</span>),<br>    (<span class=\"hljs-number\">129</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">77</span>),<br>    (<span class=\"hljs-number\">130</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">78</span>)<span class=\"hljs-comment\">;</span><br><span class=\"hljs-meta\">#1.0.3</span><br>INSERT INTO `seer_default`.`permission` (`id`, `name`, `code`, `parent`, `internal`, `create_time`) <br>VALUES<br><span class=\"hljs-title\">\t(86, &#x27;新建批量承保查询&#x27;, &#x27;risk_insured.batch_create&#x27;, 66, 0, &#x27;2022-07-06 14:35:</span><span class=\"hljs-number\">15</span>&#x27;),<br><span class=\"hljs-title\">    (87, &#x27;批量承保查询列表&#x27;, &#x27;risk_insured.batch_query&#x27;, 66, 0, &#x27;2022-07-06 14:36:</span><span class=\"hljs-number\">10</span>&#x27;)<span class=\"hljs-comment\">;</span><br>INSERT INTO `seer_default`.`role_permission` (`id`, `role`, `permission`)<br>VALUES<br>    (<span class=\"hljs-number\">145</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">86</span>),<br>    (<span class=\"hljs-number\">146</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">87</span>)<span class=\"hljs-comment\">;</span><br>INSERT INTO `seer_default`.`permission` (`id`, `name`, `code`, `parent`, `internal`, `create_time`)<br>VALUES<br><span class=\"hljs-title\">    (109, &#x27;风控报告详情维修信息权限&#x27;, &#x27;risk_insured.maintenance_detail&#x27;, 66, 0, &#x27;2022-08-08 14:36:</span><span class=\"hljs-number\">10</span>&#x27;)<span class=\"hljs-comment\">;</span><br>INSERT INTO `seer_default`.`role_permission` (`id`, `role`, `permission`)<br>VALUES<br>    (<span class=\"hljs-number\">162</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">109</span>)<span class=\"hljs-comment\">;</span><br></code></pre></td></tr></table></figure>","site":{"data":{}},"wordcount":1721,"excerpt":"","more":"<p>仅需结构：<br>    default:<br>        audit_log<br>        batch_query_info<br>        batch_query_risk_report<br>        batch_query_risk_report_detail<br>        report_label_mapping<br>        risk_claim<br>        risk_claim_case_message<br>        risk_claim_detail<br>        risk_report<br>        risk_report_detail</p>\n<p>结构数据：<br>    default:<br>        area 地区<br>        accident_type 保险事故分类<br>        fitting 配件表<br>        insurance_kind 险种<br>        insurance_company 保司<br>        risk_label 风险标签表<br>        risk_level 风险等级表<br>    seer_0 - seer_7:<br>        claim<br>        claim_auto<br>        claim_policy<br>        claim_person_info<br>        vin_claim_mapping<br>        claim_maintenance_info</p>\n<p>Merge.sql</p>\n<figure class=\"highlight autohotkey\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs autohotkey\"><span class=\"hljs-meta\">#1.0.2</span><br>INSERT INTO `seer_default`.`role_permission` (`id`, `role`, `permission`) VALUES (<span class=\"hljs-number\">120</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">70</span>)<span class=\"hljs-comment\">;</span><br><span class=\"hljs-meta\">#1.1.0</span><br>INSERT INTO `seer_default`.`permission` (`id`, `name`, `code`, `parent`, `internal`, `create_time`)<br>VALUES<br>    (<span class=\"hljs-number\">75</span>, &#x27;理赔风控&#x27;, &#x27;risk_claim&#x27;, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, NOW()),<br>    (<span class=\"hljs-number\">76</span>, &#x27;新建理赔风控查询&#x27;, &#x27;risk_claim.create&#x27;, <span class=\"hljs-number\">75</span>, <span class=\"hljs-number\">0</span>, NOW()),<br>    (<span class=\"hljs-number\">77</span>, &#x27;理赔风控列表&#x27;, &#x27;risk_claim.query&#x27;, <span class=\"hljs-number\">75</span>, <span class=\"hljs-number\">0</span>, NOW()),<br>    (<span class=\"hljs-number\">78</span>, &#x27;理赔风控详情&#x27;, &#x27;risk_claim.query.detail&#x27;, <span class=\"hljs-number\">77</span>, <span class=\"hljs-number\">0</span>, NOW())<span class=\"hljs-comment\">;</span><br>INSERT INTO `seer_default`.`role_permission` (`id`, `role`, `permission`)<br>VALUES<br>    (<span class=\"hljs-number\">127</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">75</span>),<br>    (<span class=\"hljs-number\">128</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">76</span>),<br>    (<span class=\"hljs-number\">129</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">77</span>),<br>    (<span class=\"hljs-number\">130</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">78</span>)<span class=\"hljs-comment\">;</span><br><span class=\"hljs-meta\">#1.0.3</span><br>INSERT INTO `seer_default`.`permission` (`id`, `name`, `code`, `parent`, `internal`, `create_time`) <br>VALUES<br><span class=\"hljs-title\">\t(86, &#x27;新建批量承保查询&#x27;, &#x27;risk_insured.batch_create&#x27;, 66, 0, &#x27;2022-07-06 14:35:</span><span class=\"hljs-number\">15</span>&#x27;),<br><span class=\"hljs-title\">    (87, &#x27;批量承保查询列表&#x27;, &#x27;risk_insured.batch_query&#x27;, 66, 0, &#x27;2022-07-06 14:36:</span><span class=\"hljs-number\">10</span>&#x27;)<span class=\"hljs-comment\">;</span><br>INSERT INTO `seer_default`.`role_permission` (`id`, `role`, `permission`)<br>VALUES<br>    (<span class=\"hljs-number\">145</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">86</span>),<br>    (<span class=\"hljs-number\">146</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">87</span>)<span class=\"hljs-comment\">;</span><br>INSERT INTO `seer_default`.`permission` (`id`, `name`, `code`, `parent`, `internal`, `create_time`)<br>VALUES<br><span class=\"hljs-title\">    (109, &#x27;风控报告详情维修信息权限&#x27;, &#x27;risk_insured.maintenance_detail&#x27;, 66, 0, &#x27;2022-08-08 14:36:</span><span class=\"hljs-number\">10</span>&#x27;)<span class=\"hljs-comment\">;</span><br>INSERT INTO `seer_default`.`role_permission` (`id`, `role`, `permission`)<br>VALUES<br>    (<span class=\"hljs-number\">162</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">109</span>)<span class=\"hljs-comment\">;</span><br></code></pre></td></tr></table></figure>"},{"_content":"## 用户中心资源扣减\n\n\n```\nlpush COMSUMPTION_RESOURCE_2_LOG \"{\\\"tenant\\\": 1,\\\"user\\\": 1, \\\"user_name\\\": \\\"admin\\\", \\\"consumptions\\\": -1, \\\"consumption_time\\\": \\\"2022-04-22 14:59:19\\\"}\"\n\nlpush COMSUMPTION_RESOURCE_1_LOG \"{\\\"tenant\\\": 31, \\\"user\\\": 0, \\\"username\\\": \\\"system\\\", \\\"resource_bundle_detail\\\": 12, \\\"consumptions\\\": 240, \\\"consumption_time\\\": \\\"2022-04-18 10:11:31\\\"}\"\n```\n\n## 理赔查询结果处理\n\n```\nRPUSH \"nier_risk_claim_result_queue\" \"{\\\"query_id\\\":3,\\\"related_cases_list\\\":[{\\\"certificate_no\\\":\\\"410423199704227312\\\",\\\"case_num\\\":6},{\\\"certificate_no\\\":\\\"410423199704227313\\\",\\\"case_num\\\":4}],\\\"related_cases_details\\\":{\\\"nodes\\\":[{\\\"claim_no\\\":\\\"案件号1\\\"},{\\\"certificate_no\\\":\\\"410423199704227312\\\",\\\"name\\\":\\\"宋田野\\\",\\\"certificate_type\\\":\\\"ID_CARD\\\"},{\\\"certificate_no\\\":\\\"210222199711144816\\\",\\\"name\\\":\\\"张三\\\",\\\"certificate_type\\\":\\\"ID_CARD\\\"},{\\\"certificate_no\\\":\\\"3102221997111448169\\\",\\\"name\\\":\\\"李四\\\",\\\"certificate_type\\\":\\\"ID_CARD\\\"},{\\\"certificate_no\\\":\\\"610222199711144816\\\",\\\"name\\\":\\\"鲁智深\\\",\\\"certificate_type\\\":\\\"ID_CARD\\\"},{\\\"claim_no\\\":\\\"案件号2\\\"},{\\\"certificate_no\\\":\\\"410423199704227313\\\",\\\"name\\\":\\\"潘金莲\\\",\\\"certificate_type\\\":\\\"ID_CARD\\\"},{\\\"certificate_no\\\":\\\"410222199711144819\\\",\\\"name\\\":\\\"李逵\\\",\\\"certificate_type\\\":\\\"ID_CARD\\\"},{\\\"certificate_no\\\":\\\"810222199711144816\\\",\\\"name\\\":\\\"武松\\\",\\\"certificate_type\\\":\\\"ID_CARD\\\"},{\\\"claim_no\\\":\\\"案件号3\\\"},{\\\"claim_no\\\":\\\"案件号4\\\"},{\\\"claim_no\\\":\\\"案件号5\\\"}],\\\"links\\\":[{\\\"type\\\":\\\"车主\\\",\\\"target\\\":0,\\\"source\\\":1},{\\\"type\\\":\\\"报案人\\\",\\\"target\\\":0,\\\"source\\\":2},{\\\"type\\\":\\\"投保人\\\",\\\"target\\\":0,\\\"source\\\":3},{\\\"type\\\":\\\"三者\\\",\\\"target\\\":0,\\\"source\\\":4},{\\\"type\\\":\\\"报案人\\\",\\\"target\\\":5,\\\"source\\\":4},{\\\"type\\\":\\\"投保人\\\",\\\"target\\\":5,\\\"source\\\":6},{\\\"type\\\":\\\"被保险人\\\",\\\"target\\\":5,\\\"source\\\":7},{\\\"type\\\":\\\"驾驶人\\\",\\\"target\\\":5,\\\"source\\\":1},{\\\"type\\\":\\\"三者\\\",\\\"target\\\":5,\\\"source\\\":8},{\\\"type\\\":\\\"报案人\\\",\\\"target\\\":9,\\\"source\\\":6},{\\\"type\\\":\\\"三者\\\",\\\"target\\\":9,\\\"source\\\":1},{\\\"type\\\":\\\"车主\\\",\\\"target\\\":10,\\\"source\\\":1},{\\\"type\\\":\\\"报案人\\\",\\\"target\\\":10,\\\"source\\\":2},{\\\"type\\\":\\\"投保人\\\",\\\"target\\\":10,\\\"source\\\":3},{\\\"type\\\":\\\"驾驶人\\\",\\\"target\\\":10,\\\"source\\\":7},{\\\"type\\\":\\\"车主\\\",\\\"target\\\":11,\\\"source\\\":1},{\\\"type\\\":\\\"三者\\\",\\\"target\\\":11,\\\"source\\\":8}]}}\"\n```\n\n## 用户添加资源\n\n```\nHMSET \"TENANT_126_RESOURCE_1\" \"balance\" \"100\" \"hset\" \"TENANT_126_RESOURCE_1\" \"consumption_mode\" \"次\" \"expired_time\" \"2022-04-11 16:39:47\"\n```\n\n## clickhouse\n\n```\ncreate database seer_dev;\ncreate table seer_dev.policy\n(\n    area                           UInt32,\n    insurance_company              UInt64,\n    last_year_insurance_company Nullable(UInt64),\n    accept_insurance_date          Date,\n    insurance_channel              UInt16,\n    insurance_channel_summary_code UInt16,\n    insurance_type Enum8('商业险' = 1, '交强险' = 2),\n    sub_area                       UInt32,\n    third_area                     UInt32,\n    effective_date                 Date,\n    expired_date                   Date,\n    original_charge                Decimal(18, 2),\n    charge                         Decimal(18, 2),\n    discount_rate Nullable(Float32),\n    ratio Nullable(Float32),\n    ncd Nullable(Float32),\n    traffic_rate Nullable(Float32),\n    auto_license_no Nullable(String),\n    vin Nullable(String),\n    engine_no Nullable(String),\n    auto_type LowCardinality(String),\n    auto_type_summary_code         UInt8,\n    model_energy_type LowCardinality(String),\n    fuel_type Nullable(UInt16),\n    ev_or_oil Enum8('新能源' = 1, '油车' = 2),\n    sale_price                     Decimal(18, 2),\n    regist_date                    Date,\n    is_transferred                 UInt8,\n    is_new                         UInt8,\n    insurance_renewal_flag Nullable(Enum8('新保' = 1, '续保' = 2, '转保' = 3, '其他' = 4)),\n    auto_age                       UInt8,\n    brand LowCardinality(String),\n    brand_code LowCardinality(String),\n    family Nullable(String),\n    family_code Nullable(String),\n    model Nullable(String),\n    model_code Nullable(String),\n    insurance_model_code Nullable(String),\n    use_property                   UInt16,\n    use_property_summary_code      UInt16,\n    insurance_kind Array(Tuple(String, Decimal(18, 2), Decimal(18, 2), UInt16)),\n    vehicle_damage_insured         UInt8,\n    vehicle_damage_amount          Decimal(18, 2),\n    vehicle_damage_premium         Decimal(18, 2),\n    third_party_insured            UInt8,\n    third_party_amount             Decimal(18, 2),\n    third_party_premium            Decimal(18, 2),\n    seat_driver_insured            UInt8,\n    seat_driver_amount             Decimal(18, 2),\n    seat_driver_premium            Decimal(18, 2),\n    seat_passenger_insured         UInt8,\n    seat_passenger_amount          Decimal(18, 2),\n    seat_passenger_premium         Decimal(18, 2),\n    seat_passenger_num Nullable(UInt16),\n    auto_owner_type Enum8('个人' = 1, '机关' = 2, '企业' = 3),\n    confirm_no                     String,\n    certificate_no Nullable(String),\n    agent_name Nullable(String),\n    third_party_record_code Nullable(String),\n    agent_type Nullable(Enum8('个人代理人' = 1, '兼业代理人' = 2, '专业代理人' = 3, '经纪人' = 4)),\n    create_time                    DateTime default now(),\n    insured_data Array(Tuple(Date, UInt32, Decimal(18, 2))),\n    auto_owner_name Nullable(String),\n    auto_owner_credential_code Nullable(UInt16),\n    auto_owner_credential_no Nullable(String),\n    applicant_name Nullable(String),\n    applicant_credential_code Nullable(UInt16),\n    applicant_credential_no Nullable(String),\n    insured_name Nullable(String),\n    insured_credential_code Nullable(UInt16),\n    insured_credential_no Nullable(String)\n)\n    engine = MergeTree PARTITION BY area\n        ORDER BY (area, sub_area, third_area, insurance_company, insurance_type, confirm_no)\n        SETTINGS index_granularity = 8192;\n\nINSERT INTO seer_dev.policy (area, insurance_company, last_year_insurance_company, accept_insurance_date, insurance_channel, insurance_channel_summary_code, insurance_type, sub_area, third_area, effective_date, expired_date, original_charge, charge, discount_rate, ratio, ncd, traffic_rate, auto_license_no, vin, engine_no, auto_type, auto_type_summary_code, model_energy_type, fuel_type, ev_or_oil, sale_price, regist_date, is_transferred, is_new, insurance_renewal_flag, auto_age, brand, brand_code, family, family_code, model, model_code, insurance_model_code, use_property, use_property_summary_code, insurance_kind, vehicle_damage_insured, vehicle_damage_amount, vehicle_damage_premium, third_party_insured, third_party_amount, third_party_premium, seat_driver_insured, seat_driver_amount, seat_driver_premium, seat_passenger_insured, seat_passenger_amount, seat_passenger_premium, seat_passenger_num, auto_owner_type, confirm_no, certificate_no, agent_name, third_party_record_code, agent_type, create_time, insured_data, auto_owner_name, auto_owner_credential_code, auto_owner_credential_no, applicant_name, applicant_credential_code, applicant_credential_no, insured_name, insured_credential_code, insured_credential_no) VALUES (450000, 4005, 2002, '2020-01-09', 13, 3, '交强险', 450600, 450603, '2020-01-31', '2021-01-30', 3478.27, 1862.22, 0.5353864, 0.669233, 0.8, 1, '桂YU2QK1', 'LZDLDMN3PQR074325', '723020', '41', 9, 'C', 10, '油车', 1397313.67, '2011-07-26', 0, 0, '续保', 9, '东风日产', 'SHC', '轩逸', 'SHCLY', '东风日产DFL7168VBL2轿车', 'BSHCLYUC0029', 'BAAAJAUA000190A1', 12, 3, [('200',100000,1243.63,0),('702',50000,1.01,4)], 1, 100000.00, 1243.63, 0, 0.00, 0.00, 0, 0.00, 0.00, 1, 50000.00, 1.01, 4, '个人', '08043c865bc74f5d93cd72b58c4920fc', 'YX211400001202100070', '汇泽保险销售服务有限公司山西分公司', 'CXPTA2018101602', '经纪人', '2022-05-12 04:32:33', [('2020-01-01',1,5.08),('2020-02-01',29,147.55),('2020-03-01',31,157.72),('2020-04-01',30,152.64),('2020-05-01',31,157.72),('2020-06-01',30,152.64),('2020-07-01',31,157.72),('2020-08-01',31,157.72),('2020-09-01',30,152.64),('2020-10-01',31,157.72),('2020-11-01',30,152.64),('2020-12-01',31,157.72),('2021-01-01',30,152.64)], null, null, '111111', null, null, '222222', null, null, '333333');\nINSERT INTO seer_dev.policy (area, insurance_company, last_year_insurance_company, accept_insurance_date, insurance_channel, insurance_channel_summary_code, insurance_type, sub_area, third_area, effective_date, expired_date, original_charge, charge, discount_rate, ratio, ncd, traffic_rate, auto_license_no, vin, engine_no, auto_type, auto_type_summary_code, model_energy_type, fuel_type, ev_or_oil, sale_price, regist_date, is_transferred, is_new, insurance_renewal_flag, auto_age, brand, brand_code, family, family_code, model, model_code, insurance_model_code, use_property, use_property_summary_code, insurance_kind, vehicle_damage_insured, vehicle_damage_amount, vehicle_damage_premium, third_party_insured, third_party_amount, third_party_premium, seat_driver_insured, seat_driver_amount, seat_driver_premium, seat_passenger_insured, seat_passenger_amount, seat_passenger_premium, seat_passenger_num, auto_owner_type, confirm_no, certificate_no, agent_name, third_party_record_code, agent_type, create_time, insured_data, auto_owner_name, auto_owner_credential_code, auto_owner_credential_no, applicant_name, applicant_credential_code, applicant_credential_no, insured_name, insured_credential_code, insured_credential_no) VALUES (450000, 4005, 2002, '2020-01-09', 13, 3, '交强险', 450600, 450603, '2020-01-31', '2021-01-30', 3478.27, 1862.22, 0.5353864, 0.669233, 0.8, 1, '桂YU2QK1', 'LZDLDMN3PQR074325', '723020', '41', 9, 'C', 10, '油车', 1397313.67, '2011-07-26', 0, 0, '续保', 9, '东风日产', 'SHC', '轩逸', 'SHCLY', '东风日产DFL7168VBL2轿车', 'BSHCLYUC0029', 'BAAAJAUA000190A1', 12, 3, [('200',100000,1243.63,0),('702',50000,1.01,4)], 1, 100000.00, 1243.63, 0, 0.00, 0.00, 0, 0.00, 0.00, 1, 50000.00, 1.01, 4, '个人', '08043c865bc74f5d93cd72b58c4920fc', 'YX211400001202100070', '汇泽保险销售服务有限公司山西分公司', 'CXPTA2018101602', '经纪人', '2022-05-12 04:32:33', [('2020-01-01',1,5.08),('2020-02-01',29,147.55),('2020-03-01',31,157.72),('2020-04-01',30,152.64),('2020-05-01',31,157.72),('2020-06-01',30,152.64),('2020-07-01',31,157.72),('2020-08-01',31,157.72),('2020-09-01',30,152.64),('2020-10-01',31,157.72),('2020-11-01',30,152.64),('2020-12-01',31,157.72),('2021-01-01',30,152.64)], null, null, '444444', null, null, '111111', null, null, '555555');\n```\n\n## 寻找vin码位置\n\n```\nclass Scrach {\n    public static void main(String[] args) {\n        //byVin(\"LBJETVYA39R809561\");\n        byClaim(\"996824653315969151\");\n    }\n    static void byVin(String vin) {\n        Integer vin_last_5_36_num = Integer.parseInt(vin.substring(vin.length()-5), 36);\n        Integer db = vin_last_5_36_num % 8;\n        Integer dn = vin_last_5_36_num % 128 / 8;\n        System.out.println(\"vin:\"+ db+\",\"+dn);\n    }\n    static void byClaim(String claim) {\n        Long aLong = Long.valueOf(claim);\n        Long db = aLong % 8;\n        Long dn = aLong % 128 / 8;\n        System.out.println(db+\",\"+dn);\n    }\n}\n```\n\n","source":"_posts/BookMark/车车笔记/天境/常用脚本代码段.md","raw":"## 用户中心资源扣减\n\n\n```\nlpush COMSUMPTION_RESOURCE_2_LOG \"{\\\"tenant\\\": 1,\\\"user\\\": 1, \\\"user_name\\\": \\\"admin\\\", \\\"consumptions\\\": -1, \\\"consumption_time\\\": \\\"2022-04-22 14:59:19\\\"}\"\n\nlpush COMSUMPTION_RESOURCE_1_LOG \"{\\\"tenant\\\": 31, \\\"user\\\": 0, \\\"username\\\": \\\"system\\\", \\\"resource_bundle_detail\\\": 12, \\\"consumptions\\\": 240, \\\"consumption_time\\\": \\\"2022-04-18 10:11:31\\\"}\"\n```\n\n## 理赔查询结果处理\n\n```\nRPUSH \"nier_risk_claim_result_queue\" \"{\\\"query_id\\\":3,\\\"related_cases_list\\\":[{\\\"certificate_no\\\":\\\"410423199704227312\\\",\\\"case_num\\\":6},{\\\"certificate_no\\\":\\\"410423199704227313\\\",\\\"case_num\\\":4}],\\\"related_cases_details\\\":{\\\"nodes\\\":[{\\\"claim_no\\\":\\\"案件号1\\\"},{\\\"certificate_no\\\":\\\"410423199704227312\\\",\\\"name\\\":\\\"宋田野\\\",\\\"certificate_type\\\":\\\"ID_CARD\\\"},{\\\"certificate_no\\\":\\\"210222199711144816\\\",\\\"name\\\":\\\"张三\\\",\\\"certificate_type\\\":\\\"ID_CARD\\\"},{\\\"certificate_no\\\":\\\"3102221997111448169\\\",\\\"name\\\":\\\"李四\\\",\\\"certificate_type\\\":\\\"ID_CARD\\\"},{\\\"certificate_no\\\":\\\"610222199711144816\\\",\\\"name\\\":\\\"鲁智深\\\",\\\"certificate_type\\\":\\\"ID_CARD\\\"},{\\\"claim_no\\\":\\\"案件号2\\\"},{\\\"certificate_no\\\":\\\"410423199704227313\\\",\\\"name\\\":\\\"潘金莲\\\",\\\"certificate_type\\\":\\\"ID_CARD\\\"},{\\\"certificate_no\\\":\\\"410222199711144819\\\",\\\"name\\\":\\\"李逵\\\",\\\"certificate_type\\\":\\\"ID_CARD\\\"},{\\\"certificate_no\\\":\\\"810222199711144816\\\",\\\"name\\\":\\\"武松\\\",\\\"certificate_type\\\":\\\"ID_CARD\\\"},{\\\"claim_no\\\":\\\"案件号3\\\"},{\\\"claim_no\\\":\\\"案件号4\\\"},{\\\"claim_no\\\":\\\"案件号5\\\"}],\\\"links\\\":[{\\\"type\\\":\\\"车主\\\",\\\"target\\\":0,\\\"source\\\":1},{\\\"type\\\":\\\"报案人\\\",\\\"target\\\":0,\\\"source\\\":2},{\\\"type\\\":\\\"投保人\\\",\\\"target\\\":0,\\\"source\\\":3},{\\\"type\\\":\\\"三者\\\",\\\"target\\\":0,\\\"source\\\":4},{\\\"type\\\":\\\"报案人\\\",\\\"target\\\":5,\\\"source\\\":4},{\\\"type\\\":\\\"投保人\\\",\\\"target\\\":5,\\\"source\\\":6},{\\\"type\\\":\\\"被保险人\\\",\\\"target\\\":5,\\\"source\\\":7},{\\\"type\\\":\\\"驾驶人\\\",\\\"target\\\":5,\\\"source\\\":1},{\\\"type\\\":\\\"三者\\\",\\\"target\\\":5,\\\"source\\\":8},{\\\"type\\\":\\\"报案人\\\",\\\"target\\\":9,\\\"source\\\":6},{\\\"type\\\":\\\"三者\\\",\\\"target\\\":9,\\\"source\\\":1},{\\\"type\\\":\\\"车主\\\",\\\"target\\\":10,\\\"source\\\":1},{\\\"type\\\":\\\"报案人\\\",\\\"target\\\":10,\\\"source\\\":2},{\\\"type\\\":\\\"投保人\\\",\\\"target\\\":10,\\\"source\\\":3},{\\\"type\\\":\\\"驾驶人\\\",\\\"target\\\":10,\\\"source\\\":7},{\\\"type\\\":\\\"车主\\\",\\\"target\\\":11,\\\"source\\\":1},{\\\"type\\\":\\\"三者\\\",\\\"target\\\":11,\\\"source\\\":8}]}}\"\n```\n\n## 用户添加资源\n\n```\nHMSET \"TENANT_126_RESOURCE_1\" \"balance\" \"100\" \"hset\" \"TENANT_126_RESOURCE_1\" \"consumption_mode\" \"次\" \"expired_time\" \"2022-04-11 16:39:47\"\n```\n\n## clickhouse\n\n```\ncreate database seer_dev;\ncreate table seer_dev.policy\n(\n    area                           UInt32,\n    insurance_company              UInt64,\n    last_year_insurance_company Nullable(UInt64),\n    accept_insurance_date          Date,\n    insurance_channel              UInt16,\n    insurance_channel_summary_code UInt16,\n    insurance_type Enum8('商业险' = 1, '交强险' = 2),\n    sub_area                       UInt32,\n    third_area                     UInt32,\n    effective_date                 Date,\n    expired_date                   Date,\n    original_charge                Decimal(18, 2),\n    charge                         Decimal(18, 2),\n    discount_rate Nullable(Float32),\n    ratio Nullable(Float32),\n    ncd Nullable(Float32),\n    traffic_rate Nullable(Float32),\n    auto_license_no Nullable(String),\n    vin Nullable(String),\n    engine_no Nullable(String),\n    auto_type LowCardinality(String),\n    auto_type_summary_code         UInt8,\n    model_energy_type LowCardinality(String),\n    fuel_type Nullable(UInt16),\n    ev_or_oil Enum8('新能源' = 1, '油车' = 2),\n    sale_price                     Decimal(18, 2),\n    regist_date                    Date,\n    is_transferred                 UInt8,\n    is_new                         UInt8,\n    insurance_renewal_flag Nullable(Enum8('新保' = 1, '续保' = 2, '转保' = 3, '其他' = 4)),\n    auto_age                       UInt8,\n    brand LowCardinality(String),\n    brand_code LowCardinality(String),\n    family Nullable(String),\n    family_code Nullable(String),\n    model Nullable(String),\n    model_code Nullable(String),\n    insurance_model_code Nullable(String),\n    use_property                   UInt16,\n    use_property_summary_code      UInt16,\n    insurance_kind Array(Tuple(String, Decimal(18, 2), Decimal(18, 2), UInt16)),\n    vehicle_damage_insured         UInt8,\n    vehicle_damage_amount          Decimal(18, 2),\n    vehicle_damage_premium         Decimal(18, 2),\n    third_party_insured            UInt8,\n    third_party_amount             Decimal(18, 2),\n    third_party_premium            Decimal(18, 2),\n    seat_driver_insured            UInt8,\n    seat_driver_amount             Decimal(18, 2),\n    seat_driver_premium            Decimal(18, 2),\n    seat_passenger_insured         UInt8,\n    seat_passenger_amount          Decimal(18, 2),\n    seat_passenger_premium         Decimal(18, 2),\n    seat_passenger_num Nullable(UInt16),\n    auto_owner_type Enum8('个人' = 1, '机关' = 2, '企业' = 3),\n    confirm_no                     String,\n    certificate_no Nullable(String),\n    agent_name Nullable(String),\n    third_party_record_code Nullable(String),\n    agent_type Nullable(Enum8('个人代理人' = 1, '兼业代理人' = 2, '专业代理人' = 3, '经纪人' = 4)),\n    create_time                    DateTime default now(),\n    insured_data Array(Tuple(Date, UInt32, Decimal(18, 2))),\n    auto_owner_name Nullable(String),\n    auto_owner_credential_code Nullable(UInt16),\n    auto_owner_credential_no Nullable(String),\n    applicant_name Nullable(String),\n    applicant_credential_code Nullable(UInt16),\n    applicant_credential_no Nullable(String),\n    insured_name Nullable(String),\n    insured_credential_code Nullable(UInt16),\n    insured_credential_no Nullable(String)\n)\n    engine = MergeTree PARTITION BY area\n        ORDER BY (area, sub_area, third_area, insurance_company, insurance_type, confirm_no)\n        SETTINGS index_granularity = 8192;\n\nINSERT INTO seer_dev.policy (area, insurance_company, last_year_insurance_company, accept_insurance_date, insurance_channel, insurance_channel_summary_code, insurance_type, sub_area, third_area, effective_date, expired_date, original_charge, charge, discount_rate, ratio, ncd, traffic_rate, auto_license_no, vin, engine_no, auto_type, auto_type_summary_code, model_energy_type, fuel_type, ev_or_oil, sale_price, regist_date, is_transferred, is_new, insurance_renewal_flag, auto_age, brand, brand_code, family, family_code, model, model_code, insurance_model_code, use_property, use_property_summary_code, insurance_kind, vehicle_damage_insured, vehicle_damage_amount, vehicle_damage_premium, third_party_insured, third_party_amount, third_party_premium, seat_driver_insured, seat_driver_amount, seat_driver_premium, seat_passenger_insured, seat_passenger_amount, seat_passenger_premium, seat_passenger_num, auto_owner_type, confirm_no, certificate_no, agent_name, third_party_record_code, agent_type, create_time, insured_data, auto_owner_name, auto_owner_credential_code, auto_owner_credential_no, applicant_name, applicant_credential_code, applicant_credential_no, insured_name, insured_credential_code, insured_credential_no) VALUES (450000, 4005, 2002, '2020-01-09', 13, 3, '交强险', 450600, 450603, '2020-01-31', '2021-01-30', 3478.27, 1862.22, 0.5353864, 0.669233, 0.8, 1, '桂YU2QK1', 'LZDLDMN3PQR074325', '723020', '41', 9, 'C', 10, '油车', 1397313.67, '2011-07-26', 0, 0, '续保', 9, '东风日产', 'SHC', '轩逸', 'SHCLY', '东风日产DFL7168VBL2轿车', 'BSHCLYUC0029', 'BAAAJAUA000190A1', 12, 3, [('200',100000,1243.63,0),('702',50000,1.01,4)], 1, 100000.00, 1243.63, 0, 0.00, 0.00, 0, 0.00, 0.00, 1, 50000.00, 1.01, 4, '个人', '08043c865bc74f5d93cd72b58c4920fc', 'YX211400001202100070', '汇泽保险销售服务有限公司山西分公司', 'CXPTA2018101602', '经纪人', '2022-05-12 04:32:33', [('2020-01-01',1,5.08),('2020-02-01',29,147.55),('2020-03-01',31,157.72),('2020-04-01',30,152.64),('2020-05-01',31,157.72),('2020-06-01',30,152.64),('2020-07-01',31,157.72),('2020-08-01',31,157.72),('2020-09-01',30,152.64),('2020-10-01',31,157.72),('2020-11-01',30,152.64),('2020-12-01',31,157.72),('2021-01-01',30,152.64)], null, null, '111111', null, null, '222222', null, null, '333333');\nINSERT INTO seer_dev.policy (area, insurance_company, last_year_insurance_company, accept_insurance_date, insurance_channel, insurance_channel_summary_code, insurance_type, sub_area, third_area, effective_date, expired_date, original_charge, charge, discount_rate, ratio, ncd, traffic_rate, auto_license_no, vin, engine_no, auto_type, auto_type_summary_code, model_energy_type, fuel_type, ev_or_oil, sale_price, regist_date, is_transferred, is_new, insurance_renewal_flag, auto_age, brand, brand_code, family, family_code, model, model_code, insurance_model_code, use_property, use_property_summary_code, insurance_kind, vehicle_damage_insured, vehicle_damage_amount, vehicle_damage_premium, third_party_insured, third_party_amount, third_party_premium, seat_driver_insured, seat_driver_amount, seat_driver_premium, seat_passenger_insured, seat_passenger_amount, seat_passenger_premium, seat_passenger_num, auto_owner_type, confirm_no, certificate_no, agent_name, third_party_record_code, agent_type, create_time, insured_data, auto_owner_name, auto_owner_credential_code, auto_owner_credential_no, applicant_name, applicant_credential_code, applicant_credential_no, insured_name, insured_credential_code, insured_credential_no) VALUES (450000, 4005, 2002, '2020-01-09', 13, 3, '交强险', 450600, 450603, '2020-01-31', '2021-01-30', 3478.27, 1862.22, 0.5353864, 0.669233, 0.8, 1, '桂YU2QK1', 'LZDLDMN3PQR074325', '723020', '41', 9, 'C', 10, '油车', 1397313.67, '2011-07-26', 0, 0, '续保', 9, '东风日产', 'SHC', '轩逸', 'SHCLY', '东风日产DFL7168VBL2轿车', 'BSHCLYUC0029', 'BAAAJAUA000190A1', 12, 3, [('200',100000,1243.63,0),('702',50000,1.01,4)], 1, 100000.00, 1243.63, 0, 0.00, 0.00, 0, 0.00, 0.00, 1, 50000.00, 1.01, 4, '个人', '08043c865bc74f5d93cd72b58c4920fc', 'YX211400001202100070', '汇泽保险销售服务有限公司山西分公司', 'CXPTA2018101602', '经纪人', '2022-05-12 04:32:33', [('2020-01-01',1,5.08),('2020-02-01',29,147.55),('2020-03-01',31,157.72),('2020-04-01',30,152.64),('2020-05-01',31,157.72),('2020-06-01',30,152.64),('2020-07-01',31,157.72),('2020-08-01',31,157.72),('2020-09-01',30,152.64),('2020-10-01',31,157.72),('2020-11-01',30,152.64),('2020-12-01',31,157.72),('2021-01-01',30,152.64)], null, null, '444444', null, null, '111111', null, null, '555555');\n```\n\n## 寻找vin码位置\n\n```\nclass Scrach {\n    public static void main(String[] args) {\n        //byVin(\"LBJETVYA39R809561\");\n        byClaim(\"996824653315969151\");\n    }\n    static void byVin(String vin) {\n        Integer vin_last_5_36_num = Integer.parseInt(vin.substring(vin.length()-5), 36);\n        Integer db = vin_last_5_36_num % 8;\n        Integer dn = vin_last_5_36_num % 128 / 8;\n        System.out.println(\"vin:\"+ db+\",\"+dn);\n    }\n    static void byClaim(String claim) {\n        Long aLong = Long.valueOf(claim);\n        Long db = aLong % 8;\n        Long dn = aLong % 128 / 8;\n        System.out.println(db+\",\"+dn);\n    }\n}\n```\n\n","slug":"BookMark/车车笔记/天境/常用脚本代码段","published":1,"date":"2022-07-25T05:51:47.000Z","updated":"2022-08-05T07:26:41.686Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cl7ptszov003kaba51qko28r9","content":"<h2><span id=\"用户中心资源扣减\">用户中心资源扣减</span></h2><figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs lsl\">lpush COMSUMPTION_RESOURCE_2_LOG <span class=\"hljs-string\">&quot;&#123;<span class=\"hljs-subst\">\\&quot;</span>tenant<span class=\"hljs-subst\">\\&quot;</span>: 1,<span class=\"hljs-subst\">\\&quot;</span>user<span class=\"hljs-subst\">\\&quot;</span>: 1, <span class=\"hljs-subst\">\\&quot;</span>user_name<span class=\"hljs-subst\">\\&quot;</span>: <span class=\"hljs-subst\">\\&quot;</span>admin<span class=\"hljs-subst\">\\&quot;</span>, <span class=\"hljs-subst\">\\&quot;</span>consumptions<span class=\"hljs-subst\">\\&quot;</span>: -1, <span class=\"hljs-subst\">\\&quot;</span>consumption_time<span class=\"hljs-subst\">\\&quot;</span>: <span class=\"hljs-subst\">\\&quot;</span>2022-04-22 14:59:19<span class=\"hljs-subst\">\\&quot;</span>&#125;&quot;</span><br><br>lpush COMSUMPTION_RESOURCE_1_LOG <span class=\"hljs-string\">&quot;&#123;<span class=\"hljs-subst\">\\&quot;</span>tenant<span class=\"hljs-subst\">\\&quot;</span>: 31, <span class=\"hljs-subst\">\\&quot;</span>user<span class=\"hljs-subst\">\\&quot;</span>: 0, <span class=\"hljs-subst\">\\&quot;</span>username<span class=\"hljs-subst\">\\&quot;</span>: <span class=\"hljs-subst\">\\&quot;</span>system<span class=\"hljs-subst\">\\&quot;</span>, <span class=\"hljs-subst\">\\&quot;</span>resource_bundle_detail<span class=\"hljs-subst\">\\&quot;</span>: 12, <span class=\"hljs-subst\">\\&quot;</span>consumptions<span class=\"hljs-subst\">\\&quot;</span>: 240, <span class=\"hljs-subst\">\\&quot;</span>consumption_time<span class=\"hljs-subst\">\\&quot;</span>: <span class=\"hljs-subst\">\\&quot;</span>2022-04-18 10:11:31<span class=\"hljs-subst\">\\&quot;</span>&#125;&quot;</span><br></code></pre></td></tr></table></figure>\n\n<h2><span id=\"理赔查询结果处理\">理赔查询结果处理</span></h2><figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs lsl\">RPUSH <span class=\"hljs-string\">&quot;nier_risk_claim_result_queue&quot;</span> <span class=\"hljs-string\">&quot;&#123;<span class=\"hljs-subst\">\\&quot;</span>query_id<span class=\"hljs-subst\">\\&quot;</span>:3,<span class=\"hljs-subst\">\\&quot;</span>related_cases_list<span class=\"hljs-subst\">\\&quot;</span>:[&#123;<span class=\"hljs-subst\">\\&quot;</span>certificate_no<span class=\"hljs-subst\">\\&quot;</span>:<span class=\"hljs-subst\">\\&quot;</span>410423199704227312<span class=\"hljs-subst\">\\&quot;</span>,<span class=\"hljs-subst\">\\&quot;</span>case_num<span class=\"hljs-subst\">\\&quot;</span>:6&#125;,&#123;<span class=\"hljs-subst\">\\&quot;</span>certificate_no<span class=\"hljs-subst\">\\&quot;</span>:<span class=\"hljs-subst\">\\&quot;</span>410423199704227313<span class=\"hljs-subst\">\\&quot;</span>,<span class=\"hljs-subst\">\\&quot;</span>case_num<span class=\"hljs-subst\">\\&quot;</span>:4&#125;],<span class=\"hljs-subst\">\\&quot;</span>related_cases_details<span class=\"hljs-subst\">\\&quot;</span>:&#123;<span class=\"hljs-subst\">\\&quot;</span>nodes<span class=\"hljs-subst\">\\&quot;</span>:[&#123;<span class=\"hljs-subst\">\\&quot;</span>claim_no<span class=\"hljs-subst\">\\&quot;</span>:<span class=\"hljs-subst\">\\&quot;</span>案件号1<span class=\"hljs-subst\">\\&quot;</span>&#125;,&#123;<span class=\"hljs-subst\">\\&quot;</span>certificate_no<span class=\"hljs-subst\">\\&quot;</span>:<span class=\"hljs-subst\">\\&quot;</span>410423199704227312<span class=\"hljs-subst\">\\&quot;</span>,<span class=\"hljs-subst\">\\&quot;</span>name<span class=\"hljs-subst\">\\&quot;</span>:<span class=\"hljs-subst\">\\&quot;</span>宋田野<span class=\"hljs-subst\">\\&quot;</span>,<span class=\"hljs-subst\">\\&quot;</span>certificate_type<span class=\"hljs-subst\">\\&quot;</span>:<span class=\"hljs-subst\">\\&quot;</span>ID_CARD<span class=\"hljs-subst\">\\&quot;</span>&#125;,&#123;<span class=\"hljs-subst\">\\&quot;</span>certificate_no<span class=\"hljs-subst\">\\&quot;</span>:<span class=\"hljs-subst\">\\&quot;</span>210222199711144816<span class=\"hljs-subst\">\\&quot;</span>,<span class=\"hljs-subst\">\\&quot;</span>name<span class=\"hljs-subst\">\\&quot;</span>:<span class=\"hljs-subst\">\\&quot;</span>张三<span class=\"hljs-subst\">\\&quot;</span>,<span class=\"hljs-subst\">\\&quot;</span>certificate_type<span class=\"hljs-subst\">\\&quot;</span>:<span class=\"hljs-subst\">\\&quot;</span>ID_CARD<span class=\"hljs-subst\">\\&quot;</span>&#125;,&#123;<span class=\"hljs-subst\">\\&quot;</span>certificate_no<span class=\"hljs-subst\">\\&quot;</span>:<span class=\"hljs-subst\">\\&quot;</span>3102221997111448169<span class=\"hljs-subst\">\\&quot;</span>,<span class=\"hljs-subst\">\\&quot;</span>name<span class=\"hljs-subst\">\\&quot;</span>:<span class=\"hljs-subst\">\\&quot;</span>李四<span class=\"hljs-subst\">\\&quot;</span>,<span class=\"hljs-subst\">\\&quot;</span>certificate_type<span class=\"hljs-subst\">\\&quot;</span>:<span class=\"hljs-subst\">\\&quot;</span>ID_CARD<span class=\"hljs-subst\">\\&quot;</span>&#125;,&#123;<span class=\"hljs-subst\">\\&quot;</span>certificate_no<span class=\"hljs-subst\">\\&quot;</span>:<span class=\"hljs-subst\">\\&quot;</span>610222199711144816<span class=\"hljs-subst\">\\&quot;</span>,<span class=\"hljs-subst\">\\&quot;</span>name<span class=\"hljs-subst\">\\&quot;</span>:<span class=\"hljs-subst\">\\&quot;</span>鲁智深<span class=\"hljs-subst\">\\&quot;</span>,<span class=\"hljs-subst\">\\&quot;</span>certificate_type<span class=\"hljs-subst\">\\&quot;</span>:<span class=\"hljs-subst\">\\&quot;</span>ID_CARD<span class=\"hljs-subst\">\\&quot;</span>&#125;,&#123;<span class=\"hljs-subst\">\\&quot;</span>claim_no<span class=\"hljs-subst\">\\&quot;</span>:<span class=\"hljs-subst\">\\&quot;</span>案件号2<span class=\"hljs-subst\">\\&quot;</span>&#125;,&#123;<span class=\"hljs-subst\">\\&quot;</span>certificate_no<span class=\"hljs-subst\">\\&quot;</span>:<span class=\"hljs-subst\">\\&quot;</span>410423199704227313<span class=\"hljs-subst\">\\&quot;</span>,<span class=\"hljs-subst\">\\&quot;</span>name<span class=\"hljs-subst\">\\&quot;</span>:<span class=\"hljs-subst\">\\&quot;</span>潘金莲<span class=\"hljs-subst\">\\&quot;</span>,<span class=\"hljs-subst\">\\&quot;</span>certificate_type<span class=\"hljs-subst\">\\&quot;</span>:<span class=\"hljs-subst\">\\&quot;</span>ID_CARD<span class=\"hljs-subst\">\\&quot;</span>&#125;,&#123;<span class=\"hljs-subst\">\\&quot;</span>certificate_no<span class=\"hljs-subst\">\\&quot;</span>:<span class=\"hljs-subst\">\\&quot;</span>410222199711144819<span class=\"hljs-subst\">\\&quot;</span>,<span class=\"hljs-subst\">\\&quot;</span>name<span class=\"hljs-subst\">\\&quot;</span>:<span class=\"hljs-subst\">\\&quot;</span>李逵<span class=\"hljs-subst\">\\&quot;</span>,<span class=\"hljs-subst\">\\&quot;</span>certificate_type<span class=\"hljs-subst\">\\&quot;</span>:<span class=\"hljs-subst\">\\&quot;</span>ID_CARD<span class=\"hljs-subst\">\\&quot;</span>&#125;,&#123;<span class=\"hljs-subst\">\\&quot;</span>certificate_no<span class=\"hljs-subst\">\\&quot;</span>:<span class=\"hljs-subst\">\\&quot;</span>810222199711144816<span class=\"hljs-subst\">\\&quot;</span>,<span class=\"hljs-subst\">\\&quot;</span>name<span class=\"hljs-subst\">\\&quot;</span>:<span class=\"hljs-subst\">\\&quot;</span>武松<span class=\"hljs-subst\">\\&quot;</span>,<span class=\"hljs-subst\">\\&quot;</span>certificate_type<span class=\"hljs-subst\">\\&quot;</span>:<span class=\"hljs-subst\">\\&quot;</span>ID_CARD<span class=\"hljs-subst\">\\&quot;</span>&#125;,&#123;<span class=\"hljs-subst\">\\&quot;</span>claim_no<span class=\"hljs-subst\">\\&quot;</span>:<span class=\"hljs-subst\">\\&quot;</span>案件号3<span class=\"hljs-subst\">\\&quot;</span>&#125;,&#123;<span class=\"hljs-subst\">\\&quot;</span>claim_no<span class=\"hljs-subst\">\\&quot;</span>:<span class=\"hljs-subst\">\\&quot;</span>案件号4<span class=\"hljs-subst\">\\&quot;</span>&#125;,&#123;<span class=\"hljs-subst\">\\&quot;</span>claim_no<span class=\"hljs-subst\">\\&quot;</span>:<span class=\"hljs-subst\">\\&quot;</span>案件号5<span class=\"hljs-subst\">\\&quot;</span>&#125;],<span class=\"hljs-subst\">\\&quot;</span>links<span class=\"hljs-subst\">\\&quot;</span>:[&#123;<span class=\"hljs-subst\">\\&quot;</span>type<span class=\"hljs-subst\">\\&quot;</span>:<span class=\"hljs-subst\">\\&quot;</span>车主<span class=\"hljs-subst\">\\&quot;</span>,<span class=\"hljs-subst\">\\&quot;</span>target<span class=\"hljs-subst\">\\&quot;</span>:0,<span class=\"hljs-subst\">\\&quot;</span>source<span class=\"hljs-subst\">\\&quot;</span>:1&#125;,&#123;<span class=\"hljs-subst\">\\&quot;</span>type<span class=\"hljs-subst\">\\&quot;</span>:<span class=\"hljs-subst\">\\&quot;</span>报案人<span class=\"hljs-subst\">\\&quot;</span>,<span class=\"hljs-subst\">\\&quot;</span>target<span class=\"hljs-subst\">\\&quot;</span>:0,<span class=\"hljs-subst\">\\&quot;</span>source<span class=\"hljs-subst\">\\&quot;</span>:2&#125;,&#123;<span class=\"hljs-subst\">\\&quot;</span>type<span class=\"hljs-subst\">\\&quot;</span>:<span class=\"hljs-subst\">\\&quot;</span>投保人<span class=\"hljs-subst\">\\&quot;</span>,<span class=\"hljs-subst\">\\&quot;</span>target<span class=\"hljs-subst\">\\&quot;</span>:0,<span class=\"hljs-subst\">\\&quot;</span>source<span class=\"hljs-subst\">\\&quot;</span>:3&#125;,&#123;<span class=\"hljs-subst\">\\&quot;</span>type<span class=\"hljs-subst\">\\&quot;</span>:<span class=\"hljs-subst\">\\&quot;</span>三者<span class=\"hljs-subst\">\\&quot;</span>,<span class=\"hljs-subst\">\\&quot;</span>target<span class=\"hljs-subst\">\\&quot;</span>:0,<span class=\"hljs-subst\">\\&quot;</span>source<span class=\"hljs-subst\">\\&quot;</span>:4&#125;,&#123;<span class=\"hljs-subst\">\\&quot;</span>type<span class=\"hljs-subst\">\\&quot;</span>:<span class=\"hljs-subst\">\\&quot;</span>报案人<span class=\"hljs-subst\">\\&quot;</span>,<span class=\"hljs-subst\">\\&quot;</span>target<span class=\"hljs-subst\">\\&quot;</span>:5,<span class=\"hljs-subst\">\\&quot;</span>source<span class=\"hljs-subst\">\\&quot;</span>:4&#125;,&#123;<span class=\"hljs-subst\">\\&quot;</span>type<span class=\"hljs-subst\">\\&quot;</span>:<span class=\"hljs-subst\">\\&quot;</span>投保人<span class=\"hljs-subst\">\\&quot;</span>,<span class=\"hljs-subst\">\\&quot;</span>target<span class=\"hljs-subst\">\\&quot;</span>:5,<span class=\"hljs-subst\">\\&quot;</span>source<span class=\"hljs-subst\">\\&quot;</span>:6&#125;,&#123;<span class=\"hljs-subst\">\\&quot;</span>type<span class=\"hljs-subst\">\\&quot;</span>:<span class=\"hljs-subst\">\\&quot;</span>被保险人<span class=\"hljs-subst\">\\&quot;</span>,<span class=\"hljs-subst\">\\&quot;</span>target<span class=\"hljs-subst\">\\&quot;</span>:5,<span class=\"hljs-subst\">\\&quot;</span>source<span class=\"hljs-subst\">\\&quot;</span>:7&#125;,&#123;<span class=\"hljs-subst\">\\&quot;</span>type<span class=\"hljs-subst\">\\&quot;</span>:<span class=\"hljs-subst\">\\&quot;</span>驾驶人<span class=\"hljs-subst\">\\&quot;</span>,<span class=\"hljs-subst\">\\&quot;</span>target<span class=\"hljs-subst\">\\&quot;</span>:5,<span class=\"hljs-subst\">\\&quot;</span>source<span class=\"hljs-subst\">\\&quot;</span>:1&#125;,&#123;<span class=\"hljs-subst\">\\&quot;</span>type<span class=\"hljs-subst\">\\&quot;</span>:<span class=\"hljs-subst\">\\&quot;</span>三者<span class=\"hljs-subst\">\\&quot;</span>,<span class=\"hljs-subst\">\\&quot;</span>target<span class=\"hljs-subst\">\\&quot;</span>:5,<span class=\"hljs-subst\">\\&quot;</span>source<span class=\"hljs-subst\">\\&quot;</span>:8&#125;,&#123;<span class=\"hljs-subst\">\\&quot;</span>type<span class=\"hljs-subst\">\\&quot;</span>:<span class=\"hljs-subst\">\\&quot;</span>报案人<span class=\"hljs-subst\">\\&quot;</span>,<span class=\"hljs-subst\">\\&quot;</span>target<span class=\"hljs-subst\">\\&quot;</span>:9,<span class=\"hljs-subst\">\\&quot;</span>source<span class=\"hljs-subst\">\\&quot;</span>:6&#125;,&#123;<span class=\"hljs-subst\">\\&quot;</span>type<span class=\"hljs-subst\">\\&quot;</span>:<span class=\"hljs-subst\">\\&quot;</span>三者<span class=\"hljs-subst\">\\&quot;</span>,<span class=\"hljs-subst\">\\&quot;</span>target<span class=\"hljs-subst\">\\&quot;</span>:9,<span class=\"hljs-subst\">\\&quot;</span>source<span class=\"hljs-subst\">\\&quot;</span>:1&#125;,&#123;<span class=\"hljs-subst\">\\&quot;</span>type<span class=\"hljs-subst\">\\&quot;</span>:<span class=\"hljs-subst\">\\&quot;</span>车主<span class=\"hljs-subst\">\\&quot;</span>,<span class=\"hljs-subst\">\\&quot;</span>target<span class=\"hljs-subst\">\\&quot;</span>:10,<span class=\"hljs-subst\">\\&quot;</span>source<span class=\"hljs-subst\">\\&quot;</span>:1&#125;,&#123;<span class=\"hljs-subst\">\\&quot;</span>type<span class=\"hljs-subst\">\\&quot;</span>:<span class=\"hljs-subst\">\\&quot;</span>报案人<span class=\"hljs-subst\">\\&quot;</span>,<span class=\"hljs-subst\">\\&quot;</span>target<span class=\"hljs-subst\">\\&quot;</span>:10,<span class=\"hljs-subst\">\\&quot;</span>source<span class=\"hljs-subst\">\\&quot;</span>:2&#125;,&#123;<span class=\"hljs-subst\">\\&quot;</span>type<span class=\"hljs-subst\">\\&quot;</span>:<span class=\"hljs-subst\">\\&quot;</span>投保人<span class=\"hljs-subst\">\\&quot;</span>,<span class=\"hljs-subst\">\\&quot;</span>target<span class=\"hljs-subst\">\\&quot;</span>:10,<span class=\"hljs-subst\">\\&quot;</span>source<span class=\"hljs-subst\">\\&quot;</span>:3&#125;,&#123;<span class=\"hljs-subst\">\\&quot;</span>type<span class=\"hljs-subst\">\\&quot;</span>:<span class=\"hljs-subst\">\\&quot;</span>驾驶人<span class=\"hljs-subst\">\\&quot;</span>,<span class=\"hljs-subst\">\\&quot;</span>target<span class=\"hljs-subst\">\\&quot;</span>:10,<span class=\"hljs-subst\">\\&quot;</span>source<span class=\"hljs-subst\">\\&quot;</span>:7&#125;,&#123;<span class=\"hljs-subst\">\\&quot;</span>type<span class=\"hljs-subst\">\\&quot;</span>:<span class=\"hljs-subst\">\\&quot;</span>车主<span class=\"hljs-subst\">\\&quot;</span>,<span class=\"hljs-subst\">\\&quot;</span>target<span class=\"hljs-subst\">\\&quot;</span>:11,<span class=\"hljs-subst\">\\&quot;</span>source<span class=\"hljs-subst\">\\&quot;</span>:1&#125;,&#123;<span class=\"hljs-subst\">\\&quot;</span>type<span class=\"hljs-subst\">\\&quot;</span>:<span class=\"hljs-subst\">\\&quot;</span>三者<span class=\"hljs-subst\">\\&quot;</span>,<span class=\"hljs-subst\">\\&quot;</span>target<span class=\"hljs-subst\">\\&quot;</span>:11,<span class=\"hljs-subst\">\\&quot;</span>source<span class=\"hljs-subst\">\\&quot;</span>:8&#125;]&#125;&#125;&quot;</span><br></code></pre></td></tr></table></figure>\n\n<h2><span id=\"用户添加资源\">用户添加资源</span></h2><figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs nginx\"><span class=\"hljs-attribute\">HMSET</span> <span class=\"hljs-string\">&quot;TENANT_126_RESOURCE_1&quot;</span> <span class=\"hljs-string\">&quot;balance&quot;</span> <span class=\"hljs-string\">&quot;100&quot;</span> <span class=\"hljs-string\">&quot;hset&quot;</span> <span class=\"hljs-string\">&quot;TENANT_126_RESOURCE_1&quot;</span> <span class=\"hljs-string\">&quot;consumption_mode&quot;</span> <span class=\"hljs-string\">&quot;次&quot;</span> <span class=\"hljs-string\">&quot;expired_time&quot;</span> <span class=\"hljs-string\">&quot;2022-04-11 16:39:47&quot;</span><br></code></pre></td></tr></table></figure>\n\n<h2><span id=\"clickhouse\">clickhouse</span></h2><figure class=\"highlight 1c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs 1c\">create database seer_dev;<br>create table seer_dev.policy<br>(<br>    area                           UInt32,<br>    insurance_company              UInt64,<br>    last_year_insurance_company Nullable(UInt64),<br>    accept_insurance_date          Date,<br>    insurance_channel              UInt16,<br>    insurance_channel_summary_code UInt16,<br>    insurance_type Enum8(&#x27;商业险&#x27; = <span class=\"hljs-number\">1</span>, &#x27;交强险&#x27; = <span class=\"hljs-number\">2</span>),<br>    sub_area                       UInt32,<br>    third_area                     UInt32,<br>    effective_date                 Date,<br>    expired_date                   Date,<br>    original_charge                Decimal(<span class=\"hljs-number\">18</span>, <span class=\"hljs-number\">2</span>),<br>    charge                         Decimal(<span class=\"hljs-number\">18</span>, <span class=\"hljs-number\">2</span>),<br>    discount_rate Nullable(Float32),<br>    ratio Nullable(Float32),<br>    ncd Nullable(Float32),<br>    traffic_rate Nullable(Float32),<br>    auto_license_no Nullable(String),<br>    vin Nullable(String),<br>    engine_no Nullable(String),<br>    auto_type LowCardinality(String),<br>    auto_type_summary_code         UInt8,<br>    model_energy_type LowCardinality(String),<br>    fuel_type Nullable(UInt16),<br>    ev_or_oil Enum8(&#x27;新能源&#x27; = <span class=\"hljs-number\">1</span>, &#x27;油车&#x27; = <span class=\"hljs-number\">2</span>),<br>    sale_price                     Decimal(<span class=\"hljs-number\">18</span>, <span class=\"hljs-number\">2</span>),<br>    regist_date                    Date,<br>    is_transferred                 UInt8,<br>    is_new                         UInt8,<br>    insurance_renewal_flag Nullable(Enum8(&#x27;新保&#x27; = <span class=\"hljs-number\">1</span>, &#x27;续保&#x27; = <span class=\"hljs-number\">2</span>, &#x27;转保&#x27; = <span class=\"hljs-number\">3</span>, &#x27;其他&#x27; = <span class=\"hljs-number\">4</span>)),<br>    auto_age                       UInt8,<br>    brand LowCardinality(String),<br>    brand_code LowCardinality(String),<br>    family Nullable(String),<br>    family_code Nullable(String),<br>    model Nullable(String),<br>    model_code Nullable(String),<br>    insurance_model_code Nullable(String),<br>    use_property                   UInt16,<br>    use_property_summary_code      UInt16,<br>    insurance_kind Array(Tuple(String, Decimal(<span class=\"hljs-number\">18</span>, <span class=\"hljs-number\">2</span>), Decimal(<span class=\"hljs-number\">18</span>, <span class=\"hljs-number\">2</span>), UInt16)),<br>    vehicle_damage_insured         UInt8,<br>    vehicle_damage_amount          Decimal(<span class=\"hljs-number\">18</span>, <span class=\"hljs-number\">2</span>),<br>    vehicle_damage_premium         Decimal(<span class=\"hljs-number\">18</span>, <span class=\"hljs-number\">2</span>),<br>    third_party_insured            UInt8,<br>    third_party_amount             Decimal(<span class=\"hljs-number\">18</span>, <span class=\"hljs-number\">2</span>),<br>    third_party_premium            Decimal(<span class=\"hljs-number\">18</span>, <span class=\"hljs-number\">2</span>),<br>    seat_driver_insured            UInt8,<br>    seat_driver_amount             Decimal(<span class=\"hljs-number\">18</span>, <span class=\"hljs-number\">2</span>),<br>    seat_driver_premium            Decimal(<span class=\"hljs-number\">18</span>, <span class=\"hljs-number\">2</span>),<br>    seat_passenger_insured         UInt8,<br>    seat_passenger_amount          Decimal(<span class=\"hljs-number\">18</span>, <span class=\"hljs-number\">2</span>),<br>    seat_passenger_premium         Decimal(<span class=\"hljs-number\">18</span>, <span class=\"hljs-number\">2</span>),<br>    seat_passenger_num Nullable(UInt16),<br>    auto_owner_type Enum8(&#x27;个人&#x27; = <span class=\"hljs-number\">1</span>, &#x27;机关&#x27; = <span class=\"hljs-number\">2</span>, &#x27;企业&#x27; = <span class=\"hljs-number\">3</span>),<br>    confirm_no                     String,<br>    certificate_no Nullable(String),<br>    agent_name Nullable(String),<br>    third_party_record_code Nullable(String),<br>    agent_type Nullable(Enum8(&#x27;个人代理人&#x27; = <span class=\"hljs-number\">1</span>, &#x27;兼业代理人&#x27; = <span class=\"hljs-number\">2</span>, &#x27;专业代理人&#x27; = <span class=\"hljs-number\">3</span>, &#x27;经纪人&#x27; = <span class=\"hljs-number\">4</span>)),<br>    create_time                    DateTime default now(),<br>    insured_data Array(Tuple(Date, UInt32, Decimal(<span class=\"hljs-number\">18</span>, <span class=\"hljs-number\">2</span>))),<br>    auto_owner_name Nullable(String),<br>    auto_owner_credential_code Nullable(UInt16),<br>    auto_owner_credential_no Nullable(String),<br>    applicant_name Nullable(String),<br>    applicant_credential_code Nullable(UInt16),<br>    applicant_credential_no Nullable(String),<br>    insured_name Nullable(String),<br>    insured_credential_code Nullable(UInt16),<br>    insured_credential_no Nullable(String)<br>)<br>    engine = MergeTree PARTITION BY area<br>        ORDER BY (area, sub_area, third_area, insurance_company, insurance_type, confirm_no)<br>        SETTINGS index_granularity = <span class=\"hljs-number\">8192</span>;<br><br>INSERT INTO seer_dev.policy (area, insurance_company, last_year_insurance_company, accept_insurance_date, insurance_channel, insurance_channel_summary_code, insurance_type, sub_area, third_area, effective_date, expired_date, original_charge, charge, discount_rate, ratio, ncd, traffic_rate, auto_license_no, vin, engine_no, auto_type, auto_type_summary_code, model_energy_type, fuel_type, ev_or_oil, sale_price, regist_date, is_transferred, is_new, insurance_renewal_flag, auto_age, brand, brand_code, family, family_code, model, model_code, insurance_model_code, use_property, use_property_summary_code, insurance_kind, vehicle_damage_insured, vehicle_damage_amount, vehicle_damage_premium, third_party_insured, third_party_amount, third_party_premium, seat_driver_insured, seat_driver_amount, seat_driver_premium, seat_passenger_insured, seat_passenger_amount, seat_passenger_premium, seat_passenger_num, auto_owner_type, confirm_no, certificate_no, agent_name, third_party_record_code, agent_type, create_time, insured_data, auto_owner_name, auto_owner_credential_code, auto_owner_credential_no, applicant_name, applicant_credential_code, applicant_credential_no, insured_name, insured_credential_code, insured_credential_no) VALUES (<span class=\"hljs-number\">450000</span>, <span class=\"hljs-number\">4005</span>, <span class=\"hljs-number\">2002</span>, &#x27;<span class=\"hljs-number\">2020-01-09</span>&#x27;, <span class=\"hljs-number\">13</span>, <span class=\"hljs-number\">3</span>, &#x27;交强险&#x27;, <span class=\"hljs-number\">450600</span>, <span class=\"hljs-number\">450603</span>, &#x27;<span class=\"hljs-number\">2020-01-31</span>&#x27;, &#x27;<span class=\"hljs-number\">2021-01-30</span>&#x27;, <span class=\"hljs-number\">3478.27</span>, <span class=\"hljs-number\">1862.22</span>, <span class=\"hljs-number\">0.5353864</span>, <span class=\"hljs-number\">0.669233</span>, <span class=\"hljs-number\">0.8</span>, <span class=\"hljs-number\">1</span>, &#x27;桂YU2QK1&#x27;, &#x27;LZDLDMN3PQR<span class=\"hljs-number\">074325</span>&#x27;, &#x27;<span class=\"hljs-number\">723020</span>&#x27;, &#x27;41&#x27;, <span class=\"hljs-number\">9</span>, &#x27;C&#x27;, <span class=\"hljs-number\">10</span>, &#x27;油车&#x27;, <span class=\"hljs-number\">1397313.67</span>, &#x27;<span class=\"hljs-number\">2011-07-26</span>&#x27;, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, &#x27;续保&#x27;, <span class=\"hljs-number\">9</span>, &#x27;东风日产&#x27;, &#x27;SHC&#x27;, &#x27;轩逸&#x27;, &#x27;SHCLY&#x27;, &#x27;东风日产DFL<span class=\"hljs-number\">7168</span>VBL2轿车&#x27;, &#x27;BSHCLYUC<span class=\"hljs-number\">0029</span>&#x27;, &#x27;BAAAJAUA<span class=\"hljs-number\">000190</span>A1&#x27;, <span class=\"hljs-number\">12</span>, <span class=\"hljs-number\">3</span>, [(&#x27;200&#x27;,<span class=\"hljs-number\">100000</span>,<span class=\"hljs-number\">1243.63</span>,<span class=\"hljs-number\">0</span>),(&#x27;702&#x27;,<span class=\"hljs-number\">50000</span>,<span class=\"hljs-number\">1.01</span>,<span class=\"hljs-number\">4</span>)], <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">100000.00</span>, <span class=\"hljs-number\">1243.63</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0.00</span>, <span class=\"hljs-number\">0.00</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0.00</span>, <span class=\"hljs-number\">0.00</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">50000.00</span>, <span class=\"hljs-number\">1.01</span>, <span class=\"hljs-number\">4</span>, &#x27;个人&#x27;, &#x27;<span class=\"hljs-number\">0804</span>3c865bc74f5d93cd72b58c<span class=\"hljs-number\">4920</span>fc&#x27;, &#x27;YX<span class=\"hljs-number\">21140000120210</span><span class=\"hljs-number\">0070</span>&#x27;, &#x27;汇泽保险销售服务有限公司山西分公司&#x27;, &#x27;CXPTA<span class=\"hljs-number\">2018101602</span>&#x27;, &#x27;经纪人&#x27;, &#x27;<span class=\"hljs-number\">2022-05-12</span> 04:32:33&#x27;, [(&#x27;<span class=\"hljs-number\">2020-01-01</span>&#x27;,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">5.08</span>),(&#x27;<span class=\"hljs-number\">2020-02-01</span>&#x27;,<span class=\"hljs-number\">29</span>,<span class=\"hljs-number\">147.55</span>),(&#x27;<span class=\"hljs-number\">2020-03-01</span>&#x27;,<span class=\"hljs-number\">31</span>,<span class=\"hljs-number\">157.72</span>),(&#x27;<span class=\"hljs-number\">2020-04-01</span>&#x27;,<span class=\"hljs-number\">30</span>,<span class=\"hljs-number\">152.64</span>),(&#x27;<span class=\"hljs-number\">2020-05-01</span>&#x27;,<span class=\"hljs-number\">31</span>,<span class=\"hljs-number\">157.72</span>),(&#x27;<span class=\"hljs-number\">2020-06-01</span>&#x27;,<span class=\"hljs-number\">30</span>,<span class=\"hljs-number\">152.64</span>),(&#x27;<span class=\"hljs-number\">2020-07-01</span>&#x27;,<span class=\"hljs-number\">31</span>,<span class=\"hljs-number\">157.72</span>),(&#x27;<span class=\"hljs-number\">2020-08-01</span>&#x27;,<span class=\"hljs-number\">31</span>,<span class=\"hljs-number\">157.72</span>),(&#x27;<span class=\"hljs-number\">2020-09-01</span>&#x27;,<span class=\"hljs-number\">30</span>,<span class=\"hljs-number\">152.64</span>),(&#x27;<span class=\"hljs-number\">2020-10-01</span>&#x27;,<span class=\"hljs-number\">31</span>,<span class=\"hljs-number\">157.72</span>),(&#x27;<span class=\"hljs-number\">2020-11-01</span>&#x27;,<span class=\"hljs-number\">30</span>,<span class=\"hljs-number\">152.64</span>),(&#x27;<span class=\"hljs-number\">2020-12-01</span>&#x27;,<span class=\"hljs-number\">31</span>,<span class=\"hljs-number\">157.72</span>),(&#x27;<span class=\"hljs-number\">2021-01-01</span>&#x27;,<span class=\"hljs-number\">30</span>,<span class=\"hljs-number\">152.64</span>)], <span class=\"hljs-literal\">null</span>, <span class=\"hljs-literal\">null</span>, &#x27;<span class=\"hljs-number\">111111</span>&#x27;, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-literal\">null</span>, &#x27;<span class=\"hljs-number\">222222</span>&#x27;, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-literal\">null</span>, &#x27;<span class=\"hljs-number\">333333</span>&#x27;);<br>INSERT INTO seer_dev.policy (area, insurance_company, last_year_insurance_company, accept_insurance_date, insurance_channel, insurance_channel_summary_code, insurance_type, sub_area, third_area, effective_date, expired_date, original_charge, charge, discount_rate, ratio, ncd, traffic_rate, auto_license_no, vin, engine_no, auto_type, auto_type_summary_code, model_energy_type, fuel_type, ev_or_oil, sale_price, regist_date, is_transferred, is_new, insurance_renewal_flag, auto_age, brand, brand_code, family, family_code, model, model_code, insurance_model_code, use_property, use_property_summary_code, insurance_kind, vehicle_damage_insured, vehicle_damage_amount, vehicle_damage_premium, third_party_insured, third_party_amount, third_party_premium, seat_driver_insured, seat_driver_amount, seat_driver_premium, seat_passenger_insured, seat_passenger_amount, seat_passenger_premium, seat_passenger_num, auto_owner_type, confirm_no, certificate_no, agent_name, third_party_record_code, agent_type, create_time, insured_data, auto_owner_name, auto_owner_credential_code, auto_owner_credential_no, applicant_name, applicant_credential_code, applicant_credential_no, insured_name, insured_credential_code, insured_credential_no) VALUES (<span class=\"hljs-number\">450000</span>, <span class=\"hljs-number\">4005</span>, <span class=\"hljs-number\">2002</span>, &#x27;<span class=\"hljs-number\">2020-01-09</span>&#x27;, <span class=\"hljs-number\">13</span>, <span class=\"hljs-number\">3</span>, &#x27;交强险&#x27;, <span class=\"hljs-number\">450600</span>, <span class=\"hljs-number\">450603</span>, &#x27;<span class=\"hljs-number\">2020-01-31</span>&#x27;, &#x27;<span class=\"hljs-number\">2021-01-30</span>&#x27;, <span class=\"hljs-number\">3478.27</span>, <span class=\"hljs-number\">1862.22</span>, <span class=\"hljs-number\">0.5353864</span>, <span class=\"hljs-number\">0.669233</span>, <span class=\"hljs-number\">0.8</span>, <span class=\"hljs-number\">1</span>, &#x27;桂YU2QK1&#x27;, &#x27;LZDLDMN3PQR<span class=\"hljs-number\">074325</span>&#x27;, &#x27;<span class=\"hljs-number\">723020</span>&#x27;, &#x27;41&#x27;, <span class=\"hljs-number\">9</span>, &#x27;C&#x27;, <span class=\"hljs-number\">10</span>, &#x27;油车&#x27;, <span class=\"hljs-number\">1397313.67</span>, &#x27;<span class=\"hljs-number\">2011-07-26</span>&#x27;, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, &#x27;续保&#x27;, <span class=\"hljs-number\">9</span>, &#x27;东风日产&#x27;, &#x27;SHC&#x27;, &#x27;轩逸&#x27;, &#x27;SHCLY&#x27;, &#x27;东风日产DFL<span class=\"hljs-number\">7168</span>VBL2轿车&#x27;, &#x27;BSHCLYUC<span class=\"hljs-number\">0029</span>&#x27;, &#x27;BAAAJAUA<span class=\"hljs-number\">000190</span>A1&#x27;, <span class=\"hljs-number\">12</span>, <span class=\"hljs-number\">3</span>, [(&#x27;200&#x27;,<span class=\"hljs-number\">100000</span>,<span class=\"hljs-number\">1243.63</span>,<span class=\"hljs-number\">0</span>),(&#x27;702&#x27;,<span class=\"hljs-number\">50000</span>,<span class=\"hljs-number\">1.01</span>,<span class=\"hljs-number\">4</span>)], <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">100000.00</span>, <span class=\"hljs-number\">1243.63</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0.00</span>, <span class=\"hljs-number\">0.00</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0.00</span>, <span class=\"hljs-number\">0.00</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">50000.00</span>, <span class=\"hljs-number\">1.01</span>, <span class=\"hljs-number\">4</span>, &#x27;个人&#x27;, &#x27;<span class=\"hljs-number\">0804</span>3c865bc74f5d93cd72b58c<span class=\"hljs-number\">4920</span>fc&#x27;, &#x27;YX<span class=\"hljs-number\">21140000120210</span><span class=\"hljs-number\">0070</span>&#x27;, &#x27;汇泽保险销售服务有限公司山西分公司&#x27;, &#x27;CXPTA<span class=\"hljs-number\">2018101602</span>&#x27;, &#x27;经纪人&#x27;, &#x27;<span class=\"hljs-number\">2022-05-12</span> 04:32:33&#x27;, [(&#x27;<span class=\"hljs-number\">2020-01-01</span>&#x27;,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">5.08</span>),(&#x27;<span class=\"hljs-number\">2020-02-01</span>&#x27;,<span class=\"hljs-number\">29</span>,<span class=\"hljs-number\">147.55</span>),(&#x27;<span class=\"hljs-number\">2020-03-01</span>&#x27;,<span class=\"hljs-number\">31</span>,<span class=\"hljs-number\">157.72</span>),(&#x27;<span class=\"hljs-number\">2020-04-01</span>&#x27;,<span class=\"hljs-number\">30</span>,<span class=\"hljs-number\">152.64</span>),(&#x27;<span class=\"hljs-number\">2020-05-01</span>&#x27;,<span class=\"hljs-number\">31</span>,<span class=\"hljs-number\">157.72</span>),(&#x27;<span class=\"hljs-number\">2020-06-01</span>&#x27;,<span class=\"hljs-number\">30</span>,<span class=\"hljs-number\">152.64</span>),(&#x27;<span class=\"hljs-number\">2020-07-01</span>&#x27;,<span class=\"hljs-number\">31</span>,<span class=\"hljs-number\">157.72</span>),(&#x27;<span class=\"hljs-number\">2020-08-01</span>&#x27;,<span class=\"hljs-number\">31</span>,<span class=\"hljs-number\">157.72</span>),(&#x27;<span class=\"hljs-number\">2020-09-01</span>&#x27;,<span class=\"hljs-number\">30</span>,<span class=\"hljs-number\">152.64</span>),(&#x27;<span class=\"hljs-number\">2020-10-01</span>&#x27;,<span class=\"hljs-number\">31</span>,<span class=\"hljs-number\">157.72</span>),(&#x27;<span class=\"hljs-number\">2020-11-01</span>&#x27;,<span class=\"hljs-number\">30</span>,<span class=\"hljs-number\">152.64</span>),(&#x27;<span class=\"hljs-number\">2020-12-01</span>&#x27;,<span class=\"hljs-number\">31</span>,<span class=\"hljs-number\">157.72</span>),(&#x27;<span class=\"hljs-number\">2021-01-01</span>&#x27;,<span class=\"hljs-number\">30</span>,<span class=\"hljs-number\">152.64</span>)], <span class=\"hljs-literal\">null</span>, <span class=\"hljs-literal\">null</span>, &#x27;<span class=\"hljs-number\">444444</span>&#x27;, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-literal\">null</span>, &#x27;<span class=\"hljs-number\">111111</span>&#x27;, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-literal\">null</span>, &#x27;<span class=\"hljs-number\">555555</span>&#x27;);<br></code></pre></td></tr></table></figure>\n\n<h2><span id=\"寻找vin码位置\">寻找vin码位置</span></h2><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs typescript\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Scrach</span> &#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-built_in\">void</span> <span class=\"hljs-title function_\">main</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">String</span>[] args</span>) &#123;<br>        <span class=\"hljs-comment\">//byVin(&quot;LBJETVYA39R809561&quot;);</span><br>        <span class=\"hljs-title function_\">byClaim</span>(<span class=\"hljs-string\">&quot;996824653315969151&quot;</span>);<br>    &#125;<br>    <span class=\"hljs-keyword\">static</span> <span class=\"hljs-built_in\">void</span> <span class=\"hljs-title function_\">byVin</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">String</span> vin</span>) &#123;<br>        <span class=\"hljs-title class_\">Integer</span> vin_last_5_36_num = <span class=\"hljs-title class_\">Integer</span>.<span class=\"hljs-built_in\">parseInt</span>(vin.<span class=\"hljs-title function_\">substring</span>(vin.<span class=\"hljs-title function_\">length</span>()-<span class=\"hljs-number\">5</span>), <span class=\"hljs-number\">36</span>);<br>        <span class=\"hljs-title class_\">Integer</span> db = vin_last_5_36_num % <span class=\"hljs-number\">8</span>;<br>        <span class=\"hljs-title class_\">Integer</span> dn = vin_last_5_36_num % <span class=\"hljs-number\">128</span> / <span class=\"hljs-number\">8</span>;<br>        <span class=\"hljs-title class_\">System</span>.<span class=\"hljs-property\">out</span>.<span class=\"hljs-title function_\">println</span>(<span class=\"hljs-string\">&quot;vin:&quot;</span>+ db+<span class=\"hljs-string\">&quot;,&quot;</span>+dn);<br>    &#125;<br>    <span class=\"hljs-keyword\">static</span> <span class=\"hljs-built_in\">void</span> <span class=\"hljs-title function_\">byClaim</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">String</span> claim</span>) &#123;<br>        <span class=\"hljs-title class_\">Long</span> aLong = <span class=\"hljs-title class_\">Long</span>.<span class=\"hljs-title function_\">valueOf</span>(claim);<br>        <span class=\"hljs-title class_\">Long</span> db = aLong % <span class=\"hljs-number\">8</span>;<br>        <span class=\"hljs-title class_\">Long</span> dn = aLong % <span class=\"hljs-number\">128</span> / <span class=\"hljs-number\">8</span>;<br>        <span class=\"hljs-title class_\">System</span>.<span class=\"hljs-property\">out</span>.<span class=\"hljs-title function_\">println</span>(db+<span class=\"hljs-string\">&quot;,&quot;</span>+dn);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n","site":{"data":{}},"wordcount":12503,"excerpt":"","more":"<h2 id=\"用户中心资源扣减\"><a href=\"#用户中心资源扣减\" class=\"headerlink\" title=\"用户中心资源扣减\"></a>用户中心资源扣减</h2><figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs lsl\">lpush COMSUMPTION_RESOURCE_2_LOG <span class=\"hljs-string\">&quot;&#123;<span class=\"hljs-subst\">\\&quot;</span>tenant<span class=\"hljs-subst\">\\&quot;</span>: 1,<span class=\"hljs-subst\">\\&quot;</span>user<span class=\"hljs-subst\">\\&quot;</span>: 1, <span class=\"hljs-subst\">\\&quot;</span>user_name<span class=\"hljs-subst\">\\&quot;</span>: <span class=\"hljs-subst\">\\&quot;</span>admin<span class=\"hljs-subst\">\\&quot;</span>, <span class=\"hljs-subst\">\\&quot;</span>consumptions<span class=\"hljs-subst\">\\&quot;</span>: -1, <span class=\"hljs-subst\">\\&quot;</span>consumption_time<span class=\"hljs-subst\">\\&quot;</span>: <span class=\"hljs-subst\">\\&quot;</span>2022-04-22 14:59:19<span class=\"hljs-subst\">\\&quot;</span>&#125;&quot;</span><br><br>lpush COMSUMPTION_RESOURCE_1_LOG <span class=\"hljs-string\">&quot;&#123;<span class=\"hljs-subst\">\\&quot;</span>tenant<span class=\"hljs-subst\">\\&quot;</span>: 31, <span class=\"hljs-subst\">\\&quot;</span>user<span class=\"hljs-subst\">\\&quot;</span>: 0, <span class=\"hljs-subst\">\\&quot;</span>username<span class=\"hljs-subst\">\\&quot;</span>: <span class=\"hljs-subst\">\\&quot;</span>system<span class=\"hljs-subst\">\\&quot;</span>, <span class=\"hljs-subst\">\\&quot;</span>resource_bundle_detail<span class=\"hljs-subst\">\\&quot;</span>: 12, <span class=\"hljs-subst\">\\&quot;</span>consumptions<span class=\"hljs-subst\">\\&quot;</span>: 240, <span class=\"hljs-subst\">\\&quot;</span>consumption_time<span class=\"hljs-subst\">\\&quot;</span>: <span class=\"hljs-subst\">\\&quot;</span>2022-04-18 10:11:31<span class=\"hljs-subst\">\\&quot;</span>&#125;&quot;</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"理赔查询结果处理\"><a href=\"#理赔查询结果处理\" class=\"headerlink\" title=\"理赔查询结果处理\"></a>理赔查询结果处理</h2><figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs lsl\">RPUSH <span class=\"hljs-string\">&quot;nier_risk_claim_result_queue&quot;</span> <span class=\"hljs-string\">&quot;&#123;<span class=\"hljs-subst\">\\&quot;</span>query_id<span class=\"hljs-subst\">\\&quot;</span>:3,<span class=\"hljs-subst\">\\&quot;</span>related_cases_list<span class=\"hljs-subst\">\\&quot;</span>:[&#123;<span class=\"hljs-subst\">\\&quot;</span>certificate_no<span class=\"hljs-subst\">\\&quot;</span>:<span class=\"hljs-subst\">\\&quot;</span>410423199704227312<span class=\"hljs-subst\">\\&quot;</span>,<span class=\"hljs-subst\">\\&quot;</span>case_num<span class=\"hljs-subst\">\\&quot;</span>:6&#125;,&#123;<span class=\"hljs-subst\">\\&quot;</span>certificate_no<span class=\"hljs-subst\">\\&quot;</span>:<span class=\"hljs-subst\">\\&quot;</span>410423199704227313<span class=\"hljs-subst\">\\&quot;</span>,<span class=\"hljs-subst\">\\&quot;</span>case_num<span class=\"hljs-subst\">\\&quot;</span>:4&#125;],<span class=\"hljs-subst\">\\&quot;</span>related_cases_details<span class=\"hljs-subst\">\\&quot;</span>:&#123;<span class=\"hljs-subst\">\\&quot;</span>nodes<span class=\"hljs-subst\">\\&quot;</span>:[&#123;<span class=\"hljs-subst\">\\&quot;</span>claim_no<span class=\"hljs-subst\">\\&quot;</span>:<span class=\"hljs-subst\">\\&quot;</span>案件号1<span class=\"hljs-subst\">\\&quot;</span>&#125;,&#123;<span class=\"hljs-subst\">\\&quot;</span>certificate_no<span class=\"hljs-subst\">\\&quot;</span>:<span class=\"hljs-subst\">\\&quot;</span>410423199704227312<span class=\"hljs-subst\">\\&quot;</span>,<span class=\"hljs-subst\">\\&quot;</span>name<span class=\"hljs-subst\">\\&quot;</span>:<span class=\"hljs-subst\">\\&quot;</span>宋田野<span class=\"hljs-subst\">\\&quot;</span>,<span class=\"hljs-subst\">\\&quot;</span>certificate_type<span class=\"hljs-subst\">\\&quot;</span>:<span class=\"hljs-subst\">\\&quot;</span>ID_CARD<span class=\"hljs-subst\">\\&quot;</span>&#125;,&#123;<span class=\"hljs-subst\">\\&quot;</span>certificate_no<span class=\"hljs-subst\">\\&quot;</span>:<span class=\"hljs-subst\">\\&quot;</span>210222199711144816<span class=\"hljs-subst\">\\&quot;</span>,<span class=\"hljs-subst\">\\&quot;</span>name<span class=\"hljs-subst\">\\&quot;</span>:<span class=\"hljs-subst\">\\&quot;</span>张三<span class=\"hljs-subst\">\\&quot;</span>,<span class=\"hljs-subst\">\\&quot;</span>certificate_type<span class=\"hljs-subst\">\\&quot;</span>:<span class=\"hljs-subst\">\\&quot;</span>ID_CARD<span class=\"hljs-subst\">\\&quot;</span>&#125;,&#123;<span class=\"hljs-subst\">\\&quot;</span>certificate_no<span class=\"hljs-subst\">\\&quot;</span>:<span class=\"hljs-subst\">\\&quot;</span>3102221997111448169<span class=\"hljs-subst\">\\&quot;</span>,<span class=\"hljs-subst\">\\&quot;</span>name<span class=\"hljs-subst\">\\&quot;</span>:<span class=\"hljs-subst\">\\&quot;</span>李四<span class=\"hljs-subst\">\\&quot;</span>,<span class=\"hljs-subst\">\\&quot;</span>certificate_type<span class=\"hljs-subst\">\\&quot;</span>:<span class=\"hljs-subst\">\\&quot;</span>ID_CARD<span class=\"hljs-subst\">\\&quot;</span>&#125;,&#123;<span class=\"hljs-subst\">\\&quot;</span>certificate_no<span class=\"hljs-subst\">\\&quot;</span>:<span class=\"hljs-subst\">\\&quot;</span>610222199711144816<span class=\"hljs-subst\">\\&quot;</span>,<span class=\"hljs-subst\">\\&quot;</span>name<span class=\"hljs-subst\">\\&quot;</span>:<span class=\"hljs-subst\">\\&quot;</span>鲁智深<span class=\"hljs-subst\">\\&quot;</span>,<span class=\"hljs-subst\">\\&quot;</span>certificate_type<span class=\"hljs-subst\">\\&quot;</span>:<span class=\"hljs-subst\">\\&quot;</span>ID_CARD<span class=\"hljs-subst\">\\&quot;</span>&#125;,&#123;<span class=\"hljs-subst\">\\&quot;</span>claim_no<span class=\"hljs-subst\">\\&quot;</span>:<span class=\"hljs-subst\">\\&quot;</span>案件号2<span class=\"hljs-subst\">\\&quot;</span>&#125;,&#123;<span class=\"hljs-subst\">\\&quot;</span>certificate_no<span class=\"hljs-subst\">\\&quot;</span>:<span class=\"hljs-subst\">\\&quot;</span>410423199704227313<span class=\"hljs-subst\">\\&quot;</span>,<span class=\"hljs-subst\">\\&quot;</span>name<span class=\"hljs-subst\">\\&quot;</span>:<span class=\"hljs-subst\">\\&quot;</span>潘金莲<span class=\"hljs-subst\">\\&quot;</span>,<span class=\"hljs-subst\">\\&quot;</span>certificate_type<span class=\"hljs-subst\">\\&quot;</span>:<span class=\"hljs-subst\">\\&quot;</span>ID_CARD<span class=\"hljs-subst\">\\&quot;</span>&#125;,&#123;<span class=\"hljs-subst\">\\&quot;</span>certificate_no<span class=\"hljs-subst\">\\&quot;</span>:<span class=\"hljs-subst\">\\&quot;</span>410222199711144819<span class=\"hljs-subst\">\\&quot;</span>,<span class=\"hljs-subst\">\\&quot;</span>name<span class=\"hljs-subst\">\\&quot;</span>:<span class=\"hljs-subst\">\\&quot;</span>李逵<span class=\"hljs-subst\">\\&quot;</span>,<span class=\"hljs-subst\">\\&quot;</span>certificate_type<span class=\"hljs-subst\">\\&quot;</span>:<span class=\"hljs-subst\">\\&quot;</span>ID_CARD<span class=\"hljs-subst\">\\&quot;</span>&#125;,&#123;<span class=\"hljs-subst\">\\&quot;</span>certificate_no<span class=\"hljs-subst\">\\&quot;</span>:<span class=\"hljs-subst\">\\&quot;</span>810222199711144816<span class=\"hljs-subst\">\\&quot;</span>,<span class=\"hljs-subst\">\\&quot;</span>name<span class=\"hljs-subst\">\\&quot;</span>:<span class=\"hljs-subst\">\\&quot;</span>武松<span class=\"hljs-subst\">\\&quot;</span>,<span class=\"hljs-subst\">\\&quot;</span>certificate_type<span class=\"hljs-subst\">\\&quot;</span>:<span class=\"hljs-subst\">\\&quot;</span>ID_CARD<span class=\"hljs-subst\">\\&quot;</span>&#125;,&#123;<span class=\"hljs-subst\">\\&quot;</span>claim_no<span class=\"hljs-subst\">\\&quot;</span>:<span class=\"hljs-subst\">\\&quot;</span>案件号3<span class=\"hljs-subst\">\\&quot;</span>&#125;,&#123;<span class=\"hljs-subst\">\\&quot;</span>claim_no<span class=\"hljs-subst\">\\&quot;</span>:<span class=\"hljs-subst\">\\&quot;</span>案件号4<span class=\"hljs-subst\">\\&quot;</span>&#125;,&#123;<span class=\"hljs-subst\">\\&quot;</span>claim_no<span class=\"hljs-subst\">\\&quot;</span>:<span class=\"hljs-subst\">\\&quot;</span>案件号5<span class=\"hljs-subst\">\\&quot;</span>&#125;],<span class=\"hljs-subst\">\\&quot;</span>links<span class=\"hljs-subst\">\\&quot;</span>:[&#123;<span class=\"hljs-subst\">\\&quot;</span>type<span class=\"hljs-subst\">\\&quot;</span>:<span class=\"hljs-subst\">\\&quot;</span>车主<span class=\"hljs-subst\">\\&quot;</span>,<span class=\"hljs-subst\">\\&quot;</span>target<span class=\"hljs-subst\">\\&quot;</span>:0,<span class=\"hljs-subst\">\\&quot;</span>source<span class=\"hljs-subst\">\\&quot;</span>:1&#125;,&#123;<span class=\"hljs-subst\">\\&quot;</span>type<span class=\"hljs-subst\">\\&quot;</span>:<span class=\"hljs-subst\">\\&quot;</span>报案人<span class=\"hljs-subst\">\\&quot;</span>,<span class=\"hljs-subst\">\\&quot;</span>target<span class=\"hljs-subst\">\\&quot;</span>:0,<span class=\"hljs-subst\">\\&quot;</span>source<span class=\"hljs-subst\">\\&quot;</span>:2&#125;,&#123;<span class=\"hljs-subst\">\\&quot;</span>type<span class=\"hljs-subst\">\\&quot;</span>:<span class=\"hljs-subst\">\\&quot;</span>投保人<span class=\"hljs-subst\">\\&quot;</span>,<span class=\"hljs-subst\">\\&quot;</span>target<span class=\"hljs-subst\">\\&quot;</span>:0,<span class=\"hljs-subst\">\\&quot;</span>source<span class=\"hljs-subst\">\\&quot;</span>:3&#125;,&#123;<span class=\"hljs-subst\">\\&quot;</span>type<span class=\"hljs-subst\">\\&quot;</span>:<span class=\"hljs-subst\">\\&quot;</span>三者<span class=\"hljs-subst\">\\&quot;</span>,<span class=\"hljs-subst\">\\&quot;</span>target<span class=\"hljs-subst\">\\&quot;</span>:0,<span class=\"hljs-subst\">\\&quot;</span>source<span class=\"hljs-subst\">\\&quot;</span>:4&#125;,&#123;<span class=\"hljs-subst\">\\&quot;</span>type<span class=\"hljs-subst\">\\&quot;</span>:<span class=\"hljs-subst\">\\&quot;</span>报案人<span class=\"hljs-subst\">\\&quot;</span>,<span class=\"hljs-subst\">\\&quot;</span>target<span class=\"hljs-subst\">\\&quot;</span>:5,<span class=\"hljs-subst\">\\&quot;</span>source<span class=\"hljs-subst\">\\&quot;</span>:4&#125;,&#123;<span class=\"hljs-subst\">\\&quot;</span>type<span class=\"hljs-subst\">\\&quot;</span>:<span class=\"hljs-subst\">\\&quot;</span>投保人<span class=\"hljs-subst\">\\&quot;</span>,<span class=\"hljs-subst\">\\&quot;</span>target<span class=\"hljs-subst\">\\&quot;</span>:5,<span class=\"hljs-subst\">\\&quot;</span>source<span class=\"hljs-subst\">\\&quot;</span>:6&#125;,&#123;<span class=\"hljs-subst\">\\&quot;</span>type<span class=\"hljs-subst\">\\&quot;</span>:<span class=\"hljs-subst\">\\&quot;</span>被保险人<span class=\"hljs-subst\">\\&quot;</span>,<span class=\"hljs-subst\">\\&quot;</span>target<span class=\"hljs-subst\">\\&quot;</span>:5,<span class=\"hljs-subst\">\\&quot;</span>source<span class=\"hljs-subst\">\\&quot;</span>:7&#125;,&#123;<span class=\"hljs-subst\">\\&quot;</span>type<span class=\"hljs-subst\">\\&quot;</span>:<span class=\"hljs-subst\">\\&quot;</span>驾驶人<span class=\"hljs-subst\">\\&quot;</span>,<span class=\"hljs-subst\">\\&quot;</span>target<span class=\"hljs-subst\">\\&quot;</span>:5,<span class=\"hljs-subst\">\\&quot;</span>source<span class=\"hljs-subst\">\\&quot;</span>:1&#125;,&#123;<span class=\"hljs-subst\">\\&quot;</span>type<span class=\"hljs-subst\">\\&quot;</span>:<span class=\"hljs-subst\">\\&quot;</span>三者<span class=\"hljs-subst\">\\&quot;</span>,<span class=\"hljs-subst\">\\&quot;</span>target<span class=\"hljs-subst\">\\&quot;</span>:5,<span class=\"hljs-subst\">\\&quot;</span>source<span class=\"hljs-subst\">\\&quot;</span>:8&#125;,&#123;<span class=\"hljs-subst\">\\&quot;</span>type<span class=\"hljs-subst\">\\&quot;</span>:<span class=\"hljs-subst\">\\&quot;</span>报案人<span class=\"hljs-subst\">\\&quot;</span>,<span class=\"hljs-subst\">\\&quot;</span>target<span class=\"hljs-subst\">\\&quot;</span>:9,<span class=\"hljs-subst\">\\&quot;</span>source<span class=\"hljs-subst\">\\&quot;</span>:6&#125;,&#123;<span class=\"hljs-subst\">\\&quot;</span>type<span class=\"hljs-subst\">\\&quot;</span>:<span class=\"hljs-subst\">\\&quot;</span>三者<span class=\"hljs-subst\">\\&quot;</span>,<span class=\"hljs-subst\">\\&quot;</span>target<span class=\"hljs-subst\">\\&quot;</span>:9,<span class=\"hljs-subst\">\\&quot;</span>source<span class=\"hljs-subst\">\\&quot;</span>:1&#125;,&#123;<span class=\"hljs-subst\">\\&quot;</span>type<span class=\"hljs-subst\">\\&quot;</span>:<span class=\"hljs-subst\">\\&quot;</span>车主<span class=\"hljs-subst\">\\&quot;</span>,<span class=\"hljs-subst\">\\&quot;</span>target<span class=\"hljs-subst\">\\&quot;</span>:10,<span class=\"hljs-subst\">\\&quot;</span>source<span class=\"hljs-subst\">\\&quot;</span>:1&#125;,&#123;<span class=\"hljs-subst\">\\&quot;</span>type<span class=\"hljs-subst\">\\&quot;</span>:<span class=\"hljs-subst\">\\&quot;</span>报案人<span class=\"hljs-subst\">\\&quot;</span>,<span class=\"hljs-subst\">\\&quot;</span>target<span class=\"hljs-subst\">\\&quot;</span>:10,<span class=\"hljs-subst\">\\&quot;</span>source<span class=\"hljs-subst\">\\&quot;</span>:2&#125;,&#123;<span class=\"hljs-subst\">\\&quot;</span>type<span class=\"hljs-subst\">\\&quot;</span>:<span class=\"hljs-subst\">\\&quot;</span>投保人<span class=\"hljs-subst\">\\&quot;</span>,<span class=\"hljs-subst\">\\&quot;</span>target<span class=\"hljs-subst\">\\&quot;</span>:10,<span class=\"hljs-subst\">\\&quot;</span>source<span class=\"hljs-subst\">\\&quot;</span>:3&#125;,&#123;<span class=\"hljs-subst\">\\&quot;</span>type<span class=\"hljs-subst\">\\&quot;</span>:<span class=\"hljs-subst\">\\&quot;</span>驾驶人<span class=\"hljs-subst\">\\&quot;</span>,<span class=\"hljs-subst\">\\&quot;</span>target<span class=\"hljs-subst\">\\&quot;</span>:10,<span class=\"hljs-subst\">\\&quot;</span>source<span class=\"hljs-subst\">\\&quot;</span>:7&#125;,&#123;<span class=\"hljs-subst\">\\&quot;</span>type<span class=\"hljs-subst\">\\&quot;</span>:<span class=\"hljs-subst\">\\&quot;</span>车主<span class=\"hljs-subst\">\\&quot;</span>,<span class=\"hljs-subst\">\\&quot;</span>target<span class=\"hljs-subst\">\\&quot;</span>:11,<span class=\"hljs-subst\">\\&quot;</span>source<span class=\"hljs-subst\">\\&quot;</span>:1&#125;,&#123;<span class=\"hljs-subst\">\\&quot;</span>type<span class=\"hljs-subst\">\\&quot;</span>:<span class=\"hljs-subst\">\\&quot;</span>三者<span class=\"hljs-subst\">\\&quot;</span>,<span class=\"hljs-subst\">\\&quot;</span>target<span class=\"hljs-subst\">\\&quot;</span>:11,<span class=\"hljs-subst\">\\&quot;</span>source<span class=\"hljs-subst\">\\&quot;</span>:8&#125;]&#125;&#125;&quot;</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"用户添加资源\"><a href=\"#用户添加资源\" class=\"headerlink\" title=\"用户添加资源\"></a>用户添加资源</h2><figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs nginx\"><span class=\"hljs-attribute\">HMSET</span> <span class=\"hljs-string\">&quot;TENANT_126_RESOURCE_1&quot;</span> <span class=\"hljs-string\">&quot;balance&quot;</span> <span class=\"hljs-string\">&quot;100&quot;</span> <span class=\"hljs-string\">&quot;hset&quot;</span> <span class=\"hljs-string\">&quot;TENANT_126_RESOURCE_1&quot;</span> <span class=\"hljs-string\">&quot;consumption_mode&quot;</span> <span class=\"hljs-string\">&quot;次&quot;</span> <span class=\"hljs-string\">&quot;expired_time&quot;</span> <span class=\"hljs-string\">&quot;2022-04-11 16:39:47&quot;</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"clickhouse\"><a href=\"#clickhouse\" class=\"headerlink\" title=\"clickhouse\"></a>clickhouse</h2><figure class=\"highlight 1c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs 1c\">create database seer_dev;<br>create table seer_dev.policy<br>(<br>    area                           UInt32,<br>    insurance_company              UInt64,<br>    last_year_insurance_company Nullable(UInt64),<br>    accept_insurance_date          Date,<br>    insurance_channel              UInt16,<br>    insurance_channel_summary_code UInt16,<br>    insurance_type Enum8(&#x27;商业险&#x27; = <span class=\"hljs-number\">1</span>, &#x27;交强险&#x27; = <span class=\"hljs-number\">2</span>),<br>    sub_area                       UInt32,<br>    third_area                     UInt32,<br>    effective_date                 Date,<br>    expired_date                   Date,<br>    original_charge                Decimal(<span class=\"hljs-number\">18</span>, <span class=\"hljs-number\">2</span>),<br>    charge                         Decimal(<span class=\"hljs-number\">18</span>, <span class=\"hljs-number\">2</span>),<br>    discount_rate Nullable(Float32),<br>    ratio Nullable(Float32),<br>    ncd Nullable(Float32),<br>    traffic_rate Nullable(Float32),<br>    auto_license_no Nullable(String),<br>    vin Nullable(String),<br>    engine_no Nullable(String),<br>    auto_type LowCardinality(String),<br>    auto_type_summary_code         UInt8,<br>    model_energy_type LowCardinality(String),<br>    fuel_type Nullable(UInt16),<br>    ev_or_oil Enum8(&#x27;新能源&#x27; = <span class=\"hljs-number\">1</span>, &#x27;油车&#x27; = <span class=\"hljs-number\">2</span>),<br>    sale_price                     Decimal(<span class=\"hljs-number\">18</span>, <span class=\"hljs-number\">2</span>),<br>    regist_date                    Date,<br>    is_transferred                 UInt8,<br>    is_new                         UInt8,<br>    insurance_renewal_flag Nullable(Enum8(&#x27;新保&#x27; = <span class=\"hljs-number\">1</span>, &#x27;续保&#x27; = <span class=\"hljs-number\">2</span>, &#x27;转保&#x27; = <span class=\"hljs-number\">3</span>, &#x27;其他&#x27; = <span class=\"hljs-number\">4</span>)),<br>    auto_age                       UInt8,<br>    brand LowCardinality(String),<br>    brand_code LowCardinality(String),<br>    family Nullable(String),<br>    family_code Nullable(String),<br>    model Nullable(String),<br>    model_code Nullable(String),<br>    insurance_model_code Nullable(String),<br>    use_property                   UInt16,<br>    use_property_summary_code      UInt16,<br>    insurance_kind Array(Tuple(String, Decimal(<span class=\"hljs-number\">18</span>, <span class=\"hljs-number\">2</span>), Decimal(<span class=\"hljs-number\">18</span>, <span class=\"hljs-number\">2</span>), UInt16)),<br>    vehicle_damage_insured         UInt8,<br>    vehicle_damage_amount          Decimal(<span class=\"hljs-number\">18</span>, <span class=\"hljs-number\">2</span>),<br>    vehicle_damage_premium         Decimal(<span class=\"hljs-number\">18</span>, <span class=\"hljs-number\">2</span>),<br>    third_party_insured            UInt8,<br>    third_party_amount             Decimal(<span class=\"hljs-number\">18</span>, <span class=\"hljs-number\">2</span>),<br>    third_party_premium            Decimal(<span class=\"hljs-number\">18</span>, <span class=\"hljs-number\">2</span>),<br>    seat_driver_insured            UInt8,<br>    seat_driver_amount             Decimal(<span class=\"hljs-number\">18</span>, <span class=\"hljs-number\">2</span>),<br>    seat_driver_premium            Decimal(<span class=\"hljs-number\">18</span>, <span class=\"hljs-number\">2</span>),<br>    seat_passenger_insured         UInt8,<br>    seat_passenger_amount          Decimal(<span class=\"hljs-number\">18</span>, <span class=\"hljs-number\">2</span>),<br>    seat_passenger_premium         Decimal(<span class=\"hljs-number\">18</span>, <span class=\"hljs-number\">2</span>),<br>    seat_passenger_num Nullable(UInt16),<br>    auto_owner_type Enum8(&#x27;个人&#x27; = <span class=\"hljs-number\">1</span>, &#x27;机关&#x27; = <span class=\"hljs-number\">2</span>, &#x27;企业&#x27; = <span class=\"hljs-number\">3</span>),<br>    confirm_no                     String,<br>    certificate_no Nullable(String),<br>    agent_name Nullable(String),<br>    third_party_record_code Nullable(String),<br>    agent_type Nullable(Enum8(&#x27;个人代理人&#x27; = <span class=\"hljs-number\">1</span>, &#x27;兼业代理人&#x27; = <span class=\"hljs-number\">2</span>, &#x27;专业代理人&#x27; = <span class=\"hljs-number\">3</span>, &#x27;经纪人&#x27; = <span class=\"hljs-number\">4</span>)),<br>    create_time                    DateTime default now(),<br>    insured_data Array(Tuple(Date, UInt32, Decimal(<span class=\"hljs-number\">18</span>, <span class=\"hljs-number\">2</span>))),<br>    auto_owner_name Nullable(String),<br>    auto_owner_credential_code Nullable(UInt16),<br>    auto_owner_credential_no Nullable(String),<br>    applicant_name Nullable(String),<br>    applicant_credential_code Nullable(UInt16),<br>    applicant_credential_no Nullable(String),<br>    insured_name Nullable(String),<br>    insured_credential_code Nullable(UInt16),<br>    insured_credential_no Nullable(String)<br>)<br>    engine = MergeTree PARTITION BY area<br>        ORDER BY (area, sub_area, third_area, insurance_company, insurance_type, confirm_no)<br>        SETTINGS index_granularity = <span class=\"hljs-number\">8192</span>;<br><br>INSERT INTO seer_dev.policy (area, insurance_company, last_year_insurance_company, accept_insurance_date, insurance_channel, insurance_channel_summary_code, insurance_type, sub_area, third_area, effective_date, expired_date, original_charge, charge, discount_rate, ratio, ncd, traffic_rate, auto_license_no, vin, engine_no, auto_type, auto_type_summary_code, model_energy_type, fuel_type, ev_or_oil, sale_price, regist_date, is_transferred, is_new, insurance_renewal_flag, auto_age, brand, brand_code, family, family_code, model, model_code, insurance_model_code, use_property, use_property_summary_code, insurance_kind, vehicle_damage_insured, vehicle_damage_amount, vehicle_damage_premium, third_party_insured, third_party_amount, third_party_premium, seat_driver_insured, seat_driver_amount, seat_driver_premium, seat_passenger_insured, seat_passenger_amount, seat_passenger_premium, seat_passenger_num, auto_owner_type, confirm_no, certificate_no, agent_name, third_party_record_code, agent_type, create_time, insured_data, auto_owner_name, auto_owner_credential_code, auto_owner_credential_no, applicant_name, applicant_credential_code, applicant_credential_no, insured_name, insured_credential_code, insured_credential_no) VALUES (<span class=\"hljs-number\">450000</span>, <span class=\"hljs-number\">4005</span>, <span class=\"hljs-number\">2002</span>, &#x27;<span class=\"hljs-number\">2020-01-09</span>&#x27;, <span class=\"hljs-number\">13</span>, <span class=\"hljs-number\">3</span>, &#x27;交强险&#x27;, <span class=\"hljs-number\">450600</span>, <span class=\"hljs-number\">450603</span>, &#x27;<span class=\"hljs-number\">2020-01-31</span>&#x27;, &#x27;<span class=\"hljs-number\">2021-01-30</span>&#x27;, <span class=\"hljs-number\">3478.27</span>, <span class=\"hljs-number\">1862.22</span>, <span class=\"hljs-number\">0.5353864</span>, <span class=\"hljs-number\">0.669233</span>, <span class=\"hljs-number\">0.8</span>, <span class=\"hljs-number\">1</span>, &#x27;桂YU2QK1&#x27;, &#x27;LZDLDMN3PQR<span class=\"hljs-number\">074325</span>&#x27;, &#x27;<span class=\"hljs-number\">723020</span>&#x27;, &#x27;41&#x27;, <span class=\"hljs-number\">9</span>, &#x27;C&#x27;, <span class=\"hljs-number\">10</span>, &#x27;油车&#x27;, <span class=\"hljs-number\">1397313.67</span>, &#x27;<span class=\"hljs-number\">2011-07-26</span>&#x27;, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, &#x27;续保&#x27;, <span class=\"hljs-number\">9</span>, &#x27;东风日产&#x27;, &#x27;SHC&#x27;, &#x27;轩逸&#x27;, &#x27;SHCLY&#x27;, &#x27;东风日产DFL<span class=\"hljs-number\">7168</span>VBL2轿车&#x27;, &#x27;BSHCLYUC<span class=\"hljs-number\">0029</span>&#x27;, &#x27;BAAAJAUA<span class=\"hljs-number\">000190</span>A1&#x27;, <span class=\"hljs-number\">12</span>, <span class=\"hljs-number\">3</span>, [(&#x27;200&#x27;,<span class=\"hljs-number\">100000</span>,<span class=\"hljs-number\">1243.63</span>,<span class=\"hljs-number\">0</span>),(&#x27;702&#x27;,<span class=\"hljs-number\">50000</span>,<span class=\"hljs-number\">1.01</span>,<span class=\"hljs-number\">4</span>)], <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">100000.00</span>, <span class=\"hljs-number\">1243.63</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0.00</span>, <span class=\"hljs-number\">0.00</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0.00</span>, <span class=\"hljs-number\">0.00</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">50000.00</span>, <span class=\"hljs-number\">1.01</span>, <span class=\"hljs-number\">4</span>, &#x27;个人&#x27;, &#x27;<span class=\"hljs-number\">0804</span>3c865bc74f5d93cd72b58c<span class=\"hljs-number\">4920</span>fc&#x27;, &#x27;YX<span class=\"hljs-number\">21140000120210</span><span class=\"hljs-number\">0070</span>&#x27;, &#x27;汇泽保险销售服务有限公司山西分公司&#x27;, &#x27;CXPTA<span class=\"hljs-number\">2018101602</span>&#x27;, &#x27;经纪人&#x27;, &#x27;<span class=\"hljs-number\">2022-05-12</span> 04:32:33&#x27;, [(&#x27;<span class=\"hljs-number\">2020-01-01</span>&#x27;,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">5.08</span>),(&#x27;<span class=\"hljs-number\">2020-02-01</span>&#x27;,<span class=\"hljs-number\">29</span>,<span class=\"hljs-number\">147.55</span>),(&#x27;<span class=\"hljs-number\">2020-03-01</span>&#x27;,<span class=\"hljs-number\">31</span>,<span class=\"hljs-number\">157.72</span>),(&#x27;<span class=\"hljs-number\">2020-04-01</span>&#x27;,<span class=\"hljs-number\">30</span>,<span class=\"hljs-number\">152.64</span>),(&#x27;<span class=\"hljs-number\">2020-05-01</span>&#x27;,<span class=\"hljs-number\">31</span>,<span class=\"hljs-number\">157.72</span>),(&#x27;<span class=\"hljs-number\">2020-06-01</span>&#x27;,<span class=\"hljs-number\">30</span>,<span class=\"hljs-number\">152.64</span>),(&#x27;<span class=\"hljs-number\">2020-07-01</span>&#x27;,<span class=\"hljs-number\">31</span>,<span class=\"hljs-number\">157.72</span>),(&#x27;<span class=\"hljs-number\">2020-08-01</span>&#x27;,<span class=\"hljs-number\">31</span>,<span class=\"hljs-number\">157.72</span>),(&#x27;<span class=\"hljs-number\">2020-09-01</span>&#x27;,<span class=\"hljs-number\">30</span>,<span class=\"hljs-number\">152.64</span>),(&#x27;<span class=\"hljs-number\">2020-10-01</span>&#x27;,<span class=\"hljs-number\">31</span>,<span class=\"hljs-number\">157.72</span>),(&#x27;<span class=\"hljs-number\">2020-11-01</span>&#x27;,<span class=\"hljs-number\">30</span>,<span class=\"hljs-number\">152.64</span>),(&#x27;<span class=\"hljs-number\">2020-12-01</span>&#x27;,<span class=\"hljs-number\">31</span>,<span class=\"hljs-number\">157.72</span>),(&#x27;<span class=\"hljs-number\">2021-01-01</span>&#x27;,<span class=\"hljs-number\">30</span>,<span class=\"hljs-number\">152.64</span>)], <span class=\"hljs-literal\">null</span>, <span class=\"hljs-literal\">null</span>, &#x27;<span class=\"hljs-number\">111111</span>&#x27;, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-literal\">null</span>, &#x27;<span class=\"hljs-number\">222222</span>&#x27;, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-literal\">null</span>, &#x27;<span class=\"hljs-number\">333333</span>&#x27;);<br>INSERT INTO seer_dev.policy (area, insurance_company, last_year_insurance_company, accept_insurance_date, insurance_channel, insurance_channel_summary_code, insurance_type, sub_area, third_area, effective_date, expired_date, original_charge, charge, discount_rate, ratio, ncd, traffic_rate, auto_license_no, vin, engine_no, auto_type, auto_type_summary_code, model_energy_type, fuel_type, ev_or_oil, sale_price, regist_date, is_transferred, is_new, insurance_renewal_flag, auto_age, brand, brand_code, family, family_code, model, model_code, insurance_model_code, use_property, use_property_summary_code, insurance_kind, vehicle_damage_insured, vehicle_damage_amount, vehicle_damage_premium, third_party_insured, third_party_amount, third_party_premium, seat_driver_insured, seat_driver_amount, seat_driver_premium, seat_passenger_insured, seat_passenger_amount, seat_passenger_premium, seat_passenger_num, auto_owner_type, confirm_no, certificate_no, agent_name, third_party_record_code, agent_type, create_time, insured_data, auto_owner_name, auto_owner_credential_code, auto_owner_credential_no, applicant_name, applicant_credential_code, applicant_credential_no, insured_name, insured_credential_code, insured_credential_no) VALUES (<span class=\"hljs-number\">450000</span>, <span class=\"hljs-number\">4005</span>, <span class=\"hljs-number\">2002</span>, &#x27;<span class=\"hljs-number\">2020-01-09</span>&#x27;, <span class=\"hljs-number\">13</span>, <span class=\"hljs-number\">3</span>, &#x27;交强险&#x27;, <span class=\"hljs-number\">450600</span>, <span class=\"hljs-number\">450603</span>, &#x27;<span class=\"hljs-number\">2020-01-31</span>&#x27;, &#x27;<span class=\"hljs-number\">2021-01-30</span>&#x27;, <span class=\"hljs-number\">3478.27</span>, <span class=\"hljs-number\">1862.22</span>, <span class=\"hljs-number\">0.5353864</span>, <span class=\"hljs-number\">0.669233</span>, <span class=\"hljs-number\">0.8</span>, <span class=\"hljs-number\">1</span>, &#x27;桂YU2QK1&#x27;, &#x27;LZDLDMN3PQR<span class=\"hljs-number\">074325</span>&#x27;, &#x27;<span class=\"hljs-number\">723020</span>&#x27;, &#x27;41&#x27;, <span class=\"hljs-number\">9</span>, &#x27;C&#x27;, <span class=\"hljs-number\">10</span>, &#x27;油车&#x27;, <span class=\"hljs-number\">1397313.67</span>, &#x27;<span class=\"hljs-number\">2011-07-26</span>&#x27;, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, &#x27;续保&#x27;, <span class=\"hljs-number\">9</span>, &#x27;东风日产&#x27;, &#x27;SHC&#x27;, &#x27;轩逸&#x27;, &#x27;SHCLY&#x27;, &#x27;东风日产DFL<span class=\"hljs-number\">7168</span>VBL2轿车&#x27;, &#x27;BSHCLYUC<span class=\"hljs-number\">0029</span>&#x27;, &#x27;BAAAJAUA<span class=\"hljs-number\">000190</span>A1&#x27;, <span class=\"hljs-number\">12</span>, <span class=\"hljs-number\">3</span>, [(&#x27;200&#x27;,<span class=\"hljs-number\">100000</span>,<span class=\"hljs-number\">1243.63</span>,<span class=\"hljs-number\">0</span>),(&#x27;702&#x27;,<span class=\"hljs-number\">50000</span>,<span class=\"hljs-number\">1.01</span>,<span class=\"hljs-number\">4</span>)], <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">100000.00</span>, <span class=\"hljs-number\">1243.63</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0.00</span>, <span class=\"hljs-number\">0.00</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0.00</span>, <span class=\"hljs-number\">0.00</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">50000.00</span>, <span class=\"hljs-number\">1.01</span>, <span class=\"hljs-number\">4</span>, &#x27;个人&#x27;, &#x27;<span class=\"hljs-number\">0804</span>3c865bc74f5d93cd72b58c<span class=\"hljs-number\">4920</span>fc&#x27;, &#x27;YX<span class=\"hljs-number\">21140000120210</span><span class=\"hljs-number\">0070</span>&#x27;, &#x27;汇泽保险销售服务有限公司山西分公司&#x27;, &#x27;CXPTA<span class=\"hljs-number\">2018101602</span>&#x27;, &#x27;经纪人&#x27;, &#x27;<span class=\"hljs-number\">2022-05-12</span> 04:32:33&#x27;, [(&#x27;<span class=\"hljs-number\">2020-01-01</span>&#x27;,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">5.08</span>),(&#x27;<span class=\"hljs-number\">2020-02-01</span>&#x27;,<span class=\"hljs-number\">29</span>,<span class=\"hljs-number\">147.55</span>),(&#x27;<span class=\"hljs-number\">2020-03-01</span>&#x27;,<span class=\"hljs-number\">31</span>,<span class=\"hljs-number\">157.72</span>),(&#x27;<span class=\"hljs-number\">2020-04-01</span>&#x27;,<span class=\"hljs-number\">30</span>,<span class=\"hljs-number\">152.64</span>),(&#x27;<span class=\"hljs-number\">2020-05-01</span>&#x27;,<span class=\"hljs-number\">31</span>,<span class=\"hljs-number\">157.72</span>),(&#x27;<span class=\"hljs-number\">2020-06-01</span>&#x27;,<span class=\"hljs-number\">30</span>,<span class=\"hljs-number\">152.64</span>),(&#x27;<span class=\"hljs-number\">2020-07-01</span>&#x27;,<span class=\"hljs-number\">31</span>,<span class=\"hljs-number\">157.72</span>),(&#x27;<span class=\"hljs-number\">2020-08-01</span>&#x27;,<span class=\"hljs-number\">31</span>,<span class=\"hljs-number\">157.72</span>),(&#x27;<span class=\"hljs-number\">2020-09-01</span>&#x27;,<span class=\"hljs-number\">30</span>,<span class=\"hljs-number\">152.64</span>),(&#x27;<span class=\"hljs-number\">2020-10-01</span>&#x27;,<span class=\"hljs-number\">31</span>,<span class=\"hljs-number\">157.72</span>),(&#x27;<span class=\"hljs-number\">2020-11-01</span>&#x27;,<span class=\"hljs-number\">30</span>,<span class=\"hljs-number\">152.64</span>),(&#x27;<span class=\"hljs-number\">2020-12-01</span>&#x27;,<span class=\"hljs-number\">31</span>,<span class=\"hljs-number\">157.72</span>),(&#x27;<span class=\"hljs-number\">2021-01-01</span>&#x27;,<span class=\"hljs-number\">30</span>,<span class=\"hljs-number\">152.64</span>)], <span class=\"hljs-literal\">null</span>, <span class=\"hljs-literal\">null</span>, &#x27;<span class=\"hljs-number\">444444</span>&#x27;, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-literal\">null</span>, &#x27;<span class=\"hljs-number\">111111</span>&#x27;, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-literal\">null</span>, &#x27;<span class=\"hljs-number\">555555</span>&#x27;);<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"寻找vin码位置\"><a href=\"#寻找vin码位置\" class=\"headerlink\" title=\"寻找vin码位置\"></a>寻找vin码位置</h2><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs typescript\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Scrach</span> &#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-built_in\">void</span> <span class=\"hljs-title function_\">main</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">String</span>[] args</span>) &#123;<br>        <span class=\"hljs-comment\">//byVin(&quot;LBJETVYA39R809561&quot;);</span><br>        <span class=\"hljs-title function_\">byClaim</span>(<span class=\"hljs-string\">&quot;996824653315969151&quot;</span>);<br>    &#125;<br>    <span class=\"hljs-keyword\">static</span> <span class=\"hljs-built_in\">void</span> <span class=\"hljs-title function_\">byVin</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">String</span> vin</span>) &#123;<br>        <span class=\"hljs-title class_\">Integer</span> vin_last_5_36_num = <span class=\"hljs-title class_\">Integer</span>.<span class=\"hljs-built_in\">parseInt</span>(vin.<span class=\"hljs-title function_\">substring</span>(vin.<span class=\"hljs-title function_\">length</span>()-<span class=\"hljs-number\">5</span>), <span class=\"hljs-number\">36</span>);<br>        <span class=\"hljs-title class_\">Integer</span> db = vin_last_5_36_num % <span class=\"hljs-number\">8</span>;<br>        <span class=\"hljs-title class_\">Integer</span> dn = vin_last_5_36_num % <span class=\"hljs-number\">128</span> / <span class=\"hljs-number\">8</span>;<br>        <span class=\"hljs-title class_\">System</span>.<span class=\"hljs-property\">out</span>.<span class=\"hljs-title function_\">println</span>(<span class=\"hljs-string\">&quot;vin:&quot;</span>+ db+<span class=\"hljs-string\">&quot;,&quot;</span>+dn);<br>    &#125;<br>    <span class=\"hljs-keyword\">static</span> <span class=\"hljs-built_in\">void</span> <span class=\"hljs-title function_\">byClaim</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">String</span> claim</span>) &#123;<br>        <span class=\"hljs-title class_\">Long</span> aLong = <span class=\"hljs-title class_\">Long</span>.<span class=\"hljs-title function_\">valueOf</span>(claim);<br>        <span class=\"hljs-title class_\">Long</span> db = aLong % <span class=\"hljs-number\">8</span>;<br>        <span class=\"hljs-title class_\">Long</span> dn = aLong % <span class=\"hljs-number\">128</span> / <span class=\"hljs-number\">8</span>;<br>        <span class=\"hljs-title class_\">System</span>.<span class=\"hljs-property\">out</span>.<span class=\"hljs-title function_\">println</span>(db+<span class=\"hljs-string\">&quot;,&quot;</span>+dn);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n"},{"_content":"1. Spring WebFlux\n2. Netty\n3. R2DBC","source":"_posts/BookMark/车车笔记/天境/用户中心项目.md","raw":"1. Spring WebFlux\n2. Netty\n3. R2DBC","slug":"BookMark/车车笔记/天境/用户中心项目","published":1,"date":"2022-07-18T09:51:41.000Z","updated":"2022-07-18T09:51:41.000Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cl7ptszow003laba5ddbzfvnk","content":"<ol>\n<li>Spring WebFlux</li>\n<li>Netty</li>\n<li>R2DBC</li>\n</ol>\n","site":{"data":{}},"wordcount":23,"excerpt":"","more":"<ol>\n<li>Spring WebFlux</li>\n<li>Netty</li>\n<li>R2DBC</li>\n</ol>\n"},{"_content":"## 一、车车项目骨架参照\n\n### 1.初始项目骨架参照\n\n语言或技术栈：\n\n基于Gradle构建的、Java（Java、Groovy、Kotlin）+Spring框架的项目 http://192.168.1.213/pub-apps/gradle-project-template \n\n+ Java/Groovy\n+ Jpa\n+ ...\n\n### 2.分层\n\n+ Model（内部业务模型）\n\n+ DTO（跨系统数据交换、传输）\n\n+ Service（业务服务内部接口声明及实现）\n\n+ RESTful API（HTTP层实现）\n\n+ Client SDK（可选）\n\n## 二、原停给利项目骨架改版\n\n### 1.语言或技术栈：\n\n+ 语言：Java11\n+ 构建：Gradle\n+ 基本框架：spring boot\n+ 持久层框架：mybatis-plus\n+ api文档：swagger\n+ DB：mysql+redis+mongDB\n+ ihub相关插件\n+ pmd代码静态检查、git钩子程序\n\n### 2.分层\n\n![image-20220418113819985](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220418113819985.png)\n\n+ entity：数据实体/常量/枚举\n+ externalapi：外部调用 风控/支付/车车平台服务对接\n+ rest：包含controller层（但对比原有骨架去除了Facade层）\n+ scheduletask：定时任务\n+ service：包含service层和dao层\n\n### 3.存在问题\n\n单元测试工具的确定，原有测试工具采用Groovy+Spock形式，对Java以及mybatis支持比较差，存在部分bug未解决，基本未使用。\n\n\n\n\n\n\n\n## 已完成\n\n1、改gradle.properties，ihub-plugin升级至1.2.6\n\n2、webflux改为webmvc，配置在gradle/springboot_web_settings.gradle\n\n3、这个新模板用的JUnit5，不是Spock\n\n4、jwt无需官方包（搜jsonwebtoken，擦除项目中的所有痕迹），改用hutool就行，它有一系列方便方法，默认每个项目都对它有implementation级别的依赖\n\n5、Controller实现类无需implements某个interface，因为没有SpringCloud声明Feign Client的需求\n\n6、不要添加Swagger\n\n7、mysql jdbc driver依赖加到rest里（那个mysql r2dbc driver的位置），不要加到其他层\n\n8、持久层改用mybatis-plus\n\n+ hutool引入\n\n+ mybatis配置分页、sql日志\n\n### 进行中\n\n+ 认证重新改为mvc\n\n### 待完成\n\n\n\n","source":"_posts/BookMark/车车笔记/天境/项目骨架.md","raw":"## 一、车车项目骨架参照\n\n### 1.初始项目骨架参照\n\n语言或技术栈：\n\n基于Gradle构建的、Java（Java、Groovy、Kotlin）+Spring框架的项目 http://192.168.1.213/pub-apps/gradle-project-template \n\n+ Java/Groovy\n+ Jpa\n+ ...\n\n### 2.分层\n\n+ Model（内部业务模型）\n\n+ DTO（跨系统数据交换、传输）\n\n+ Service（业务服务内部接口声明及实现）\n\n+ RESTful API（HTTP层实现）\n\n+ Client SDK（可选）\n\n## 二、原停给利项目骨架改版\n\n### 1.语言或技术栈：\n\n+ 语言：Java11\n+ 构建：Gradle\n+ 基本框架：spring boot\n+ 持久层框架：mybatis-plus\n+ api文档：swagger\n+ DB：mysql+redis+mongDB\n+ ihub相关插件\n+ pmd代码静态检查、git钩子程序\n\n### 2.分层\n\n![image-20220418113819985](https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220418113819985.png)\n\n+ entity：数据实体/常量/枚举\n+ externalapi：外部调用 风控/支付/车车平台服务对接\n+ rest：包含controller层（但对比原有骨架去除了Facade层）\n+ scheduletask：定时任务\n+ service：包含service层和dao层\n\n### 3.存在问题\n\n单元测试工具的确定，原有测试工具采用Groovy+Spock形式，对Java以及mybatis支持比较差，存在部分bug未解决，基本未使用。\n\n\n\n\n\n\n\n## 已完成\n\n1、改gradle.properties，ihub-plugin升级至1.2.6\n\n2、webflux改为webmvc，配置在gradle/springboot_web_settings.gradle\n\n3、这个新模板用的JUnit5，不是Spock\n\n4、jwt无需官方包（搜jsonwebtoken，擦除项目中的所有痕迹），改用hutool就行，它有一系列方便方法，默认每个项目都对它有implementation级别的依赖\n\n5、Controller实现类无需implements某个interface，因为没有SpringCloud声明Feign Client的需求\n\n6、不要添加Swagger\n\n7、mysql jdbc driver依赖加到rest里（那个mysql r2dbc driver的位置），不要加到其他层\n\n8、持久层改用mybatis-plus\n\n+ hutool引入\n\n+ mybatis配置分页、sql日志\n\n### 进行中\n\n+ 认证重新改为mvc\n\n### 待完成\n\n\n\n","slug":"BookMark/车车笔记/天境/项目骨架","published":1,"date":"2022-07-18T09:51:41.000Z","updated":"2022-09-01T10:02:40.531Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cl7ptszow003maba57m73578h","content":"<h2><span id=\"一-车车项目骨架参照\">一、车车项目骨架参照</span></h2><h3><span id=\"1初始项目骨架参照\">1.初始项目骨架参照</span></h3><p>语言或技术栈：</p>\n<p>基于Gradle构建的、Java（Java、Groovy、Kotlin）+Spring框架的项目 <a href=\"http://192.168.1.213/pub-apps/gradle-project-template\">http://192.168.1.213/pub-apps/gradle-project-template</a> </p>\n<ul>\n<li>Java&#x2F;Groovy</li>\n<li>Jpa</li>\n<li>…</li>\n</ul>\n<h3><span id=\"2分层\">2.分层</span></h3><ul>\n<li><p>Model（内部业务模型）</p>\n</li>\n<li><p>DTO（跨系统数据交换、传输）</p>\n</li>\n<li><p>Service（业务服务内部接口声明及实现）</p>\n</li>\n<li><p>RESTful API（HTTP层实现）</p>\n</li>\n<li><p>Client SDK（可选）</p>\n</li>\n</ul>\n<h2><span id=\"二-原停给利项目骨架改版\">二、原停给利项目骨架改版</span></h2><h3><span id=\"1语言或技术栈\">1.语言或技术栈：</span></h3><ul>\n<li>语言：Java11</li>\n<li>构建：Gradle</li>\n<li>基本框架：spring boot</li>\n<li>持久层框架：mybatis-plus</li>\n<li>api文档：swagger</li>\n<li>DB：mysql+redis+mongDB</li>\n<li>ihub相关插件</li>\n<li>pmd代码静态检查、git钩子程序</li>\n</ul>\n<h3><span id=\"2分层\">2.分层</span></h3><p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220418113819985.png\" alt=\"image-20220418113819985\"></p>\n<ul>\n<li>entity：数据实体&#x2F;常量&#x2F;枚举</li>\n<li>externalapi：外部调用 风控&#x2F;支付&#x2F;车车平台服务对接</li>\n<li>rest：包含controller层（但对比原有骨架去除了Facade层）</li>\n<li>scheduletask：定时任务</li>\n<li>service：包含service层和dao层</li>\n</ul>\n<h3><span id=\"3存在问题\">3.存在问题</span></h3><p>单元测试工具的确定，原有测试工具采用Groovy+Spock形式，对Java以及mybatis支持比较差，存在部分bug未解决，基本未使用。</p>\n<h2><span id=\"已完成\">已完成</span></h2><p>1、改gradle.properties，ihub-plugin升级至1.2.6</p>\n<p>2、webflux改为webmvc，配置在gradle&#x2F;springboot_web_settings.gradle</p>\n<p>3、这个新模板用的JUnit5，不是Spock</p>\n<p>4、jwt无需官方包（搜jsonwebtoken，擦除项目中的所有痕迹），改用hutool就行，它有一系列方便方法，默认每个项目都对它有implementation级别的依赖</p>\n<p>5、Controller实现类无需implements某个interface，因为没有SpringCloud声明Feign Client的需求</p>\n<p>6、不要添加Swagger</p>\n<p>7、mysql jdbc driver依赖加到rest里（那个mysql r2dbc driver的位置），不要加到其他层</p>\n<p>8、持久层改用mybatis-plus</p>\n<ul>\n<li><p>hutool引入</p>\n</li>\n<li><p>mybatis配置分页、sql日志</p>\n</li>\n</ul>\n<h3><span id=\"进行中\">进行中</span></h3><ul>\n<li>认证重新改为mvc</li>\n</ul>\n<h3><span id=\"待完成\">待完成</span></h3>","site":{"data":{}},"wordcount":1004,"excerpt":"","more":"<h2 id=\"一、车车项目骨架参照\"><a href=\"#一、车车项目骨架参照\" class=\"headerlink\" title=\"一、车车项目骨架参照\"></a>一、车车项目骨架参照</h2><h3 id=\"1-初始项目骨架参照\"><a href=\"#1-初始项目骨架参照\" class=\"headerlink\" title=\"1.初始项目骨架参照\"></a>1.初始项目骨架参照</h3><p>语言或技术栈：</p>\n<p>基于Gradle构建的、Java（Java、Groovy、Kotlin）+Spring框架的项目 <a href=\"http://192.168.1.213/pub-apps/gradle-project-template\">http://192.168.1.213/pub-apps/gradle-project-template</a> </p>\n<ul>\n<li>Java&#x2F;Groovy</li>\n<li>Jpa</li>\n<li>…</li>\n</ul>\n<h3 id=\"2-分层\"><a href=\"#2-分层\" class=\"headerlink\" title=\"2.分层\"></a>2.分层</h3><ul>\n<li><p>Model（内部业务模型）</p>\n</li>\n<li><p>DTO（跨系统数据交换、传输）</p>\n</li>\n<li><p>Service（业务服务内部接口声明及实现）</p>\n</li>\n<li><p>RESTful API（HTTP层实现）</p>\n</li>\n<li><p>Client SDK（可选）</p>\n</li>\n</ul>\n<h2 id=\"二、原停给利项目骨架改版\"><a href=\"#二、原停给利项目骨架改版\" class=\"headerlink\" title=\"二、原停给利项目骨架改版\"></a>二、原停给利项目骨架改版</h2><h3 id=\"1-语言或技术栈：\"><a href=\"#1-语言或技术栈：\" class=\"headerlink\" title=\"1.语言或技术栈：\"></a>1.语言或技术栈：</h3><ul>\n<li>语言：Java11</li>\n<li>构建：Gradle</li>\n<li>基本框架：spring boot</li>\n<li>持久层框架：mybatis-plus</li>\n<li>api文档：swagger</li>\n<li>DB：mysql+redis+mongDB</li>\n<li>ihub相关插件</li>\n<li>pmd代码静态检查、git钩子程序</li>\n</ul>\n<h3 id=\"2-分层-1\"><a href=\"#2-分层-1\" class=\"headerlink\" title=\"2.分层\"></a>2.分层</h3><p><img src=\"https://img-1256282866.cos.ap-beijing.myqcloud.com/image-20220418113819985.png\" alt=\"image-20220418113819985\"></p>\n<ul>\n<li>entity：数据实体&#x2F;常量&#x2F;枚举</li>\n<li>externalapi：外部调用 风控&#x2F;支付&#x2F;车车平台服务对接</li>\n<li>rest：包含controller层（但对比原有骨架去除了Facade层）</li>\n<li>scheduletask：定时任务</li>\n<li>service：包含service层和dao层</li>\n</ul>\n<h3 id=\"3-存在问题\"><a href=\"#3-存在问题\" class=\"headerlink\" title=\"3.存在问题\"></a>3.存在问题</h3><p>单元测试工具的确定，原有测试工具采用Groovy+Spock形式，对Java以及mybatis支持比较差，存在部分bug未解决，基本未使用。</p>\n<h2 id=\"已完成\"><a href=\"#已完成\" class=\"headerlink\" title=\"已完成\"></a>已完成</h2><p>1、改gradle.properties，ihub-plugin升级至1.2.6</p>\n<p>2、webflux改为webmvc，配置在gradle&#x2F;springboot_web_settings.gradle</p>\n<p>3、这个新模板用的JUnit5，不是Spock</p>\n<p>4、jwt无需官方包（搜jsonwebtoken，擦除项目中的所有痕迹），改用hutool就行，它有一系列方便方法，默认每个项目都对它有implementation级别的依赖</p>\n<p>5、Controller实现类无需implements某个interface，因为没有SpringCloud声明Feign Client的需求</p>\n<p>6、不要添加Swagger</p>\n<p>7、mysql jdbc driver依赖加到rest里（那个mysql r2dbc driver的位置），不要加到其他层</p>\n<p>8、持久层改用mybatis-plus</p>\n<ul>\n<li><p>hutool引入</p>\n</li>\n<li><p>mybatis配置分页、sql日志</p>\n</li>\n</ul>\n<h3 id=\"进行中\"><a href=\"#进行中\" class=\"headerlink\" title=\"进行中\"></a>进行中</h3><ul>\n<li>认证重新改为mvc</li>\n</ul>\n<h3 id=\"待完成\"><a href=\"#待完成\" class=\"headerlink\" title=\"待完成\"></a>待完成</h3>"},{"_content":"\n\n66  风控承保  risk_insured\n67  新建承保查询  risk_insured.create\n68  承保风控列表  risk_insured.query\n69  承保风控详情  risk_insured.query.detail\n\n## 已完成\n\n## 后端任务：\n\n1. token拦截器,校验权限 王志斌 4.22\n2. user信息解析 王志斌 4.22\n3. secret 宝旗 4.22\n4. 车型查询（保信的车型接口调用） 王志斌\n5. 地区模块 宝旗\n6. 一些util类、第三方的底层实现类（redisTemplate）宝旗\n\n## 接口：\n\n1. 风控列表查询接口  宝旗\n2. 风控详情查询接口  宝旗\n3. 新建承包风控查询接口 王志斌\n4. 租户资源余量查询接口 宝旗\n5. 租户资源是否可用接口 王志斌\n6. 拿到查询结果，并进行综合分汇算，写库 王志斌\n\n## 1.0.1\n\n1、mysql claim、actio、risk_report_detail表schema 王志斌\n2、abaucs查询理赔维修数据 王志斌\n3、nier-backend-java解析存储数据 回宝旗\n4、生成测试数据 王志斌\n5、新增承保查询参数校验 王志斌\n6、etl导入mysql数据库 张华彬\n7、前端开发 丽鑫\n8、风控查询详情接口 回宝旗\n\n## 1.1\n\n1、权限script脚本准备 孙源健\n2、图数据库neo4j建模 宋田野\n3、数据导入图数据库neo4j 宋田野\n4、调用neo4j查询证件号案件关联结果 宋田野\n5、生成结果入库 回宝旗\n6、接入用户中心资源使用 孙源健\n7、前端开发 丽鑫\n8、新增理赔风控报告接口 回宝旗\n9、列表查询接口 孙源健\n10、详情页面接口 孙源健\n11、生成测试数据 王志斌\n12、理赔风控数据库设计 孙源健","source":"_posts/BookMark/车车笔记/天境/风控.md","raw":"\n\n66  风控承保  risk_insured\n67  新建承保查询  risk_insured.create\n68  承保风控列表  risk_insured.query\n69  承保风控详情  risk_insured.query.detail\n\n## 已完成\n\n## 后端任务：\n\n1. token拦截器,校验权限 王志斌 4.22\n2. user信息解析 王志斌 4.22\n3. secret 宝旗 4.22\n4. 车型查询（保信的车型接口调用） 王志斌\n5. 地区模块 宝旗\n6. 一些util类、第三方的底层实现类（redisTemplate）宝旗\n\n## 接口：\n\n1. 风控列表查询接口  宝旗\n2. 风控详情查询接口  宝旗\n3. 新建承包风控查询接口 王志斌\n4. 租户资源余量查询接口 宝旗\n5. 租户资源是否可用接口 王志斌\n6. 拿到查询结果，并进行综合分汇算，写库 王志斌\n\n## 1.0.1\n\n1、mysql claim、actio、risk_report_detail表schema 王志斌\n2、abaucs查询理赔维修数据 王志斌\n3、nier-backend-java解析存储数据 回宝旗\n4、生成测试数据 王志斌\n5、新增承保查询参数校验 王志斌\n6、etl导入mysql数据库 张华彬\n7、前端开发 丽鑫\n8、风控查询详情接口 回宝旗\n\n## 1.1\n\n1、权限script脚本准备 孙源健\n2、图数据库neo4j建模 宋田野\n3、数据导入图数据库neo4j 宋田野\n4、调用neo4j查询证件号案件关联结果 宋田野\n5、生成结果入库 回宝旗\n6、接入用户中心资源使用 孙源健\n7、前端开发 丽鑫\n8、新增理赔风控报告接口 回宝旗\n9、列表查询接口 孙源健\n10、详情页面接口 孙源健\n11、生成测试数据 王志斌\n12、理赔风控数据库设计 孙源健","slug":"BookMark/车车笔记/天境/风控","published":1,"date":"2022-07-18T09:51:42.000Z","updated":"2022-07-18T09:51:42.000Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cl7ptszow003naba51z02bodi","content":"<p>66  风控承保  risk_insured<br>67  新建承保查询  risk_insured.create<br>68  承保风控列表  risk_insured.query<br>69  承保风控详情  risk_insured.query.detail</p>\n<h2><span id=\"已完成\">已完成</span></h2><h2><span id=\"后端任务\">后端任务：</span></h2><ol>\n<li>token拦截器,校验权限 王志斌 4.22</li>\n<li>user信息解析 王志斌 4.22</li>\n<li>secret 宝旗 4.22</li>\n<li>车型查询（保信的车型接口调用） 王志斌</li>\n<li>地区模块 宝旗</li>\n<li>一些util类、第三方的底层实现类（redisTemplate）宝旗</li>\n</ol>\n<h2><span id=\"接口\">接口：</span></h2><ol>\n<li>风控列表查询接口  宝旗</li>\n<li>风控详情查询接口  宝旗</li>\n<li>新建承包风控查询接口 王志斌</li>\n<li>租户资源余量查询接口 宝旗</li>\n<li>租户资源是否可用接口 王志斌</li>\n<li>拿到查询结果，并进行综合分汇算，写库 王志斌</li>\n</ol>\n<h2><span id=\"101\">1.0.1</span></h2><p>1、mysql claim、actio、risk_report_detail表schema 王志斌<br>2、abaucs查询理赔维修数据 王志斌<br>3、nier-backend-java解析存储数据 回宝旗<br>4、生成测试数据 王志斌<br>5、新增承保查询参数校验 王志斌<br>6、etl导入mysql数据库 张华彬<br>7、前端开发 丽鑫<br>8、风控查询详情接口 回宝旗</p>\n<h2><span id=\"11\">1.1</span></h2><p>1、权限script脚本准备 孙源健<br>2、图数据库neo4j建模 宋田野<br>3、数据导入图数据库neo4j 宋田野<br>4、调用neo4j查询证件号案件关联结果 宋田野<br>5、生成结果入库 回宝旗<br>6、接入用户中心资源使用 孙源健<br>7、前端开发 丽鑫<br>8、新增理赔风控报告接口 回宝旗<br>9、列表查询接口 孙源健<br>10、详情页面接口 孙源健<br>11、生成测试数据 王志斌<br>12、理赔风控数据库设计 孙源健</p>\n","site":{"data":{}},"wordcount":639,"excerpt":"","more":"<p>66  风控承保  risk_insured<br>67  新建承保查询  risk_insured.create<br>68  承保风控列表  risk_insured.query<br>69  承保风控详情  risk_insured.query.detail</p>\n<h2 id=\"已完成\"><a href=\"#已完成\" class=\"headerlink\" title=\"已完成\"></a>已完成</h2><h2 id=\"后端任务：\"><a href=\"#后端任务：\" class=\"headerlink\" title=\"后端任务：\"></a>后端任务：</h2><ol>\n<li>token拦截器,校验权限 王志斌 4.22</li>\n<li>user信息解析 王志斌 4.22</li>\n<li>secret 宝旗 4.22</li>\n<li>车型查询（保信的车型接口调用） 王志斌</li>\n<li>地区模块 宝旗</li>\n<li>一些util类、第三方的底层实现类（redisTemplate）宝旗</li>\n</ol>\n<h2 id=\"接口：\"><a href=\"#接口：\" class=\"headerlink\" title=\"接口：\"></a>接口：</h2><ol>\n<li>风控列表查询接口  宝旗</li>\n<li>风控详情查询接口  宝旗</li>\n<li>新建承包风控查询接口 王志斌</li>\n<li>租户资源余量查询接口 宝旗</li>\n<li>租户资源是否可用接口 王志斌</li>\n<li>拿到查询结果，并进行综合分汇算，写库 王志斌</li>\n</ol>\n<h2 id=\"1-0-1\"><a href=\"#1-0-1\" class=\"headerlink\" title=\"1.0.1\"></a>1.0.1</h2><p>1、mysql claim、actio、risk_report_detail表schema 王志斌<br>2、abaucs查询理赔维修数据 王志斌<br>3、nier-backend-java解析存储数据 回宝旗<br>4、生成测试数据 王志斌<br>5、新增承保查询参数校验 王志斌<br>6、etl导入mysql数据库 张华彬<br>7、前端开发 丽鑫<br>8、风控查询详情接口 回宝旗</p>\n<h2 id=\"1-1\"><a href=\"#1-1\" class=\"headerlink\" title=\"1.1\"></a>1.1</h2><p>1、权限script脚本准备 孙源健<br>2、图数据库neo4j建模 宋田野<br>3、数据导入图数据库neo4j 宋田野<br>4、调用neo4j查询证件号案件关联结果 宋田野<br>5、生成结果入库 回宝旗<br>6、接入用户中心资源使用 孙源健<br>7、前端开发 丽鑫<br>8、新增理赔风控报告接口 回宝旗<br>9、列表查询接口 孙源健<br>10、详情页面接口 孙源健<br>11、生成测试数据 王志斌<br>12、理赔风控数据库设计 孙源健</p>\n"},{"title":"Spring Boot & MinIo进行分布式文件服务","date":"2022-09-05T09:09:05.000Z","category_bar":true,"_content":"# Spring Boot & MinIo进行分布式文件服务\n[toc]\n\n---\n<font color=red size=5> 参考文章：[springboot 使用 minio](https://www.jianshu.com/p/d10f8fdbf7cd)</font>\n\n---\n## 一、 安装MinIo\n[中文官网](https://docs.min.io/cn/minio-quickstart-guide.html)\n\n## 二、 yml配置\n```javascript?linenums\n#minio文件服务\nminio:\n  url: http://127.0.0.1:9000\n  accessKey: minioadmin\n  secretKey: minioadmin\n  bucketName: hbq\n```\n## 三、Pom依赖\n```javascript?linenums\n<dependency>\n\t<groupId>io.minio</groupId>\n\t<artifactId>minio</artifactId>\n\t<version>7.0.2</version>\n</dependency>\n```\n## 四、MinIoUtil\n```javascript?linenums\npackage com.hbq.cms.util;\n\n/**\n * 文件服务器工具类\n */\n@Slf4j\n@Component\npublic class MinioUtil {\n    private static MinioClient minioClient;\n\n    @Value(\"${minio.endpoint}\")\n    private String endpoint;\n    @Value(\"${minio.accessKey}\")\n    private String accessKey;\n    @Value(\"${minio.secretKey}\")\n    private String secretKey;\n    @Value(\"${minio.bucketName}\")\n    private String bucketName;\n\n    @PostConstruct\n    public void init() {\n        try {\n            minioClient = MinioClient.builder()\n                    .endpoint(endpoint)\n                    .credentials(accessKey, secretKey)\n                    .build();\n            createBucket(bucketName);\n        } catch (Exception e) {\n            e.printStackTrace();\n            log.error(\"初始化minio配置异常: 【{}】\", e.fillInStackTrace());\n        }\n    }\n\n\n    /**\n     * 查看存储bucket是否存在\n     *\n     * @return boolean\n     */\n    public static Boolean bucketExists(String bucketName) {\n        Boolean found;\n        try {\n            found = minioClient.bucketExists(BucketExistsArgs.builder().bucket(bucketName).build());\n        } catch (Exception e) {\n            //e.printStackTrace();\n            return false;\n        }\n        return found;\n    }\n\n    /**\n     * 创建存储bucket\n     *\n     * @return Boolean\n     */\n    public static Boolean createBucket(String bucketName) {\n        try {\n            if (!bucketExists(bucketName)) {\n                minioClient.makeBucket(MakeBucketArgs.builder()\n                        .bucket(bucketName)\n                        .build());\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n            return false;\n        }\n        return true;\n    }\n\n    /**\n     * 删除存储bucket\n     *\n     * @return Boolean\n     */\n    public static Boolean removeBucket(String bucketName) {\n        try {\n            minioClient.removeBucket(RemoveBucketArgs.builder()\n                    .bucket(bucketName)\n                    .build());\n        } catch (Exception e) {\n            e.printStackTrace();\n            return false;\n        }\n        return true;\n    }\n\n    /**\n     * 获取全部bucket\n     */\n    public static List<Bucket> getAllBuckets() {\n        try {\n            return minioClient.listBuckets();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return null;\n    }\n\n    /**\n     * 文件上传\n     *\n     * @param file 文件\n     * @return Boolean\n     */\n    public static Boolean upload(String bucketName, String fileName, MultipartFile file, InputStream inputStream) {\n        try {\n            PutObjectArgs objectArgs = PutObjectArgs.builder()\n                    .bucket(bucketName)\n                    .object(fileName)\n                    .stream(inputStream, file.getSize(), -1)\n                    .contentType(FileUtil.getMimeType(fileName))\n                    .build();\n            //文件名称相同会覆盖\n            minioClient.putObject(objectArgs);\n        } catch (Exception e) {\n            e.printStackTrace();\n            return false;\n        }\n        return true;\n    }\n\n    /**\n     * 上传预览\n     *\n     * @param bucketName 位置\n     * @param file       文件\n     * @return 文件url\n     * @throws IOException\n     */\n    public static String uploadPreview(String bucketName, MultipartFile file) throws IOException {\n        String originalFilename = file.getOriginalFilename();\n        String newFileName = String.format(\"%s-%s.%s\", FileUtil.mainName(originalFilename), IdUtil.simpleUUID(), FileUtil.extName(originalFilename));\n        upload(bucketName, newFileName, file, file.getInputStream());\n        return preview(bucketName, newFileName);\n    }\n\n    /**\n     * 预览\n     *\n     * @param fileName\n     * @return\n     */\n    public static String preview(String bucketName, String fileName) {\n        // 查看文件地址`\n        try {\n            GetPresignedObjectUrlArgs build = new GetPresignedObjectUrlArgs().builder()\n                    .bucket(bucketName)\n                    .object(fileName)\n                    .method(Method.GET)\n                    .build();\n            String url = minioClient.getPresignedObjectUrl(build);\n            String finalUrl = StrUtil.subBefore(url, \"?\", false);\n            log.info(\"文件路径预览：{}\", finalUrl);\n            return finalUrl;\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return null;\n    }\n\n    /**\n     * 文件下载\n     *\n     * @param fileName 文件名称\n     * @param res      response\n     * @return Boolean\n     */\n    public static void download(String fileName, String bucketName, HttpServletResponse res) {\n        GetObjectArgs objectArgs = GetObjectArgs.builder().bucket(bucketName)\n                .object(fileName).build();\n        try (GetObjectResponse response = minioClient.getObject(objectArgs)) {\n            byte[] buf = new byte[1024];\n            int len;\n            try (FastByteArrayOutputStream os = new FastByteArrayOutputStream()) {\n                while ((len = response.read(buf)) != -1) {\n                    os.write(buf, 0, len);\n                }\n                os.flush();\n                byte[] bytes = os.toByteArray();\n                res.setCharacterEncoding(\"utf-8\");\n                //设置强制下载不打开\n                //res.setContentType(\"application/force-download\");\n                res.addHeader(\"Content-Disposition\", \"attachment;fileName=\" + fileName);\n                try (ServletOutputStream stream = res.getOutputStream()) {\n                    stream.write(bytes);\n                    stream.flush();\n                }\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    /**\n     * 查看文件对象\n     *\n     * @return 存储bucket内文件对象信息\n     */\n    public static List<Item> listObjects(String bucketName) {\n        Iterable<Result<Item>> results = minioClient.listObjects(\n                ListObjectsArgs.builder().bucket(bucketName).recursive(true).build());\n        List<Item> items = new ArrayList<>();\n        try {\n            for (Result<Item> result : results) {\n                items.add(result.get());\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n            return null;\n        }\n        return items;\n    }\n\n    /**\n     * 所有文件列表\n     *\n     * @param bucketName\n     * @return\n     */\n    public static List<FileVo> listObjectNames(String bucketName) {\n        List<Item> items = listObjects(bucketName);\n        if (ObjectUtil.isEmpty(items)) {\n            return new ArrayList<>();\n        } else {\n            return items.stream()\n                    .map(i -> FileVo.builder()\n                            .fileName(i.objectName())\n                            .fileSize(i.size())\n                            .filePath(preview(bucketName, i.objectName()))\n                            .fileType(FileUtil.extName(i.objectName()))\n                            .build()).collect(Collectors.toList());\n\n        }\n    }\n\n    /**\n     * 删除\n     *\n     * @param fileName\n     * @return\n     * @throws Exception\n     */\n    public static boolean remove(String fileName, String bucketName) {\n        try {\n            minioClient.removeObject(RemoveObjectArgs.builder().bucket(bucketName).object(fileName).build());\n        } catch (Exception e) {\n            return false;\n        }\n        return true;\n    }\n\n    /**\n     * 批量删除文件对象（没测试）\n     *\n     * @param objects 对象名称集合\n     */\n    public static Iterable<Result<DeleteError>> removeObjects(List<String> objects, String bucketName) {\n        List<DeleteObject> dos = objects.stream().map(e -> new DeleteObject(e)).collect(Collectors.toList());\n        Iterable<Result<DeleteError>> results = minioClient.removeObjects(RemoveObjectsArgs.builder().bucket(bucketName).objects(dos).build());\n        return results;\n    }\n\n}\n```\n\n## 五、Test\n```javascript?linenums\npackage com.hbq.cms.common.controller;\n\n/**\n * 测试MinIO文件系统\n */\n@Slf4j\n@CrossOrigin\n@Api(tags = \"文件\")\n@RestController\n@RequestMapping(\"/file\")\n@AllArgsConstructor\npublic class FileController {\n\n    @ApiOperation(value = \"创建文件夹\")\n    @PostMapping(\"/createBucket\")\n    public void createBucket(String bucketName) {\n        MinioUtil.createBucket(bucketName);\n    }\n\n    @ApiOperation(value = \"上传文件返回url\")\n    @PostMapping(\"/upload\")\n    public String MinIOUpload(String bucketName, MultipartFile file) throws Exception {\n        if (ObjectUtil.isEmpty(bucketName)) {\n            bucketName = \"file\";\n        }\n        return MinioUtil.uploadPreview(bucketName, file);\n    }\n\n    @ApiOperation(value = \"下载文件\")\n    @PostMapping(\"/download\")\n    public void download(String bucketName, String fileName, HttpServletResponse response) {\n        MinioUtil.download(bucketName, fileName, response);\n    }\n\n    @ApiOperation(value = \"删除文件\")\n    @PostMapping(\"/deleteFile\")\n    public void deleteFile(String bucketName, String fileName) {\n        MinioUtil.remove(bucketName, fileName);\n    }\n\n    @ApiOperation(value = \"获取当前文件夹下文件\")\n    @PostMapping(\"/list\")\n    public List<FileVo> list(String bucketName) {\n        return MinioUtil.listObjectNames(bucketName);\n    }\n}\n```","source":"_posts/BookMark/Spring Boot/Spring Boot & MinIo进行分布式文件服务.md","raw":"---\ntitle: Spring Boot & MinIo进行分布式文件服务\ndate: 2022-09-05 17:09:05\ncategory_bar: true\ncategories: Spring Boot\ntags:\n- Spring Boot\n- MinIo\n---\n# Spring Boot & MinIo进行分布式文件服务\n[toc]\n\n---\n<font color=red size=5> 参考文章：[springboot 使用 minio](https://www.jianshu.com/p/d10f8fdbf7cd)</font>\n\n---\n## 一、 安装MinIo\n[中文官网](https://docs.min.io/cn/minio-quickstart-guide.html)\n\n## 二、 yml配置\n```javascript?linenums\n#minio文件服务\nminio:\n  url: http://127.0.0.1:9000\n  accessKey: minioadmin\n  secretKey: minioadmin\n  bucketName: hbq\n```\n## 三、Pom依赖\n```javascript?linenums\n<dependency>\n\t<groupId>io.minio</groupId>\n\t<artifactId>minio</artifactId>\n\t<version>7.0.2</version>\n</dependency>\n```\n## 四、MinIoUtil\n```javascript?linenums\npackage com.hbq.cms.util;\n\n/**\n * 文件服务器工具类\n */\n@Slf4j\n@Component\npublic class MinioUtil {\n    private static MinioClient minioClient;\n\n    @Value(\"${minio.endpoint}\")\n    private String endpoint;\n    @Value(\"${minio.accessKey}\")\n    private String accessKey;\n    @Value(\"${minio.secretKey}\")\n    private String secretKey;\n    @Value(\"${minio.bucketName}\")\n    private String bucketName;\n\n    @PostConstruct\n    public void init() {\n        try {\n            minioClient = MinioClient.builder()\n                    .endpoint(endpoint)\n                    .credentials(accessKey, secretKey)\n                    .build();\n            createBucket(bucketName);\n        } catch (Exception e) {\n            e.printStackTrace();\n            log.error(\"初始化minio配置异常: 【{}】\", e.fillInStackTrace());\n        }\n    }\n\n\n    /**\n     * 查看存储bucket是否存在\n     *\n     * @return boolean\n     */\n    public static Boolean bucketExists(String bucketName) {\n        Boolean found;\n        try {\n            found = minioClient.bucketExists(BucketExistsArgs.builder().bucket(bucketName).build());\n        } catch (Exception e) {\n            //e.printStackTrace();\n            return false;\n        }\n        return found;\n    }\n\n    /**\n     * 创建存储bucket\n     *\n     * @return Boolean\n     */\n    public static Boolean createBucket(String bucketName) {\n        try {\n            if (!bucketExists(bucketName)) {\n                minioClient.makeBucket(MakeBucketArgs.builder()\n                        .bucket(bucketName)\n                        .build());\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n            return false;\n        }\n        return true;\n    }\n\n    /**\n     * 删除存储bucket\n     *\n     * @return Boolean\n     */\n    public static Boolean removeBucket(String bucketName) {\n        try {\n            minioClient.removeBucket(RemoveBucketArgs.builder()\n                    .bucket(bucketName)\n                    .build());\n        } catch (Exception e) {\n            e.printStackTrace();\n            return false;\n        }\n        return true;\n    }\n\n    /**\n     * 获取全部bucket\n     */\n    public static List<Bucket> getAllBuckets() {\n        try {\n            return minioClient.listBuckets();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return null;\n    }\n\n    /**\n     * 文件上传\n     *\n     * @param file 文件\n     * @return Boolean\n     */\n    public static Boolean upload(String bucketName, String fileName, MultipartFile file, InputStream inputStream) {\n        try {\n            PutObjectArgs objectArgs = PutObjectArgs.builder()\n                    .bucket(bucketName)\n                    .object(fileName)\n                    .stream(inputStream, file.getSize(), -1)\n                    .contentType(FileUtil.getMimeType(fileName))\n                    .build();\n            //文件名称相同会覆盖\n            minioClient.putObject(objectArgs);\n        } catch (Exception e) {\n            e.printStackTrace();\n            return false;\n        }\n        return true;\n    }\n\n    /**\n     * 上传预览\n     *\n     * @param bucketName 位置\n     * @param file       文件\n     * @return 文件url\n     * @throws IOException\n     */\n    public static String uploadPreview(String bucketName, MultipartFile file) throws IOException {\n        String originalFilename = file.getOriginalFilename();\n        String newFileName = String.format(\"%s-%s.%s\", FileUtil.mainName(originalFilename), IdUtil.simpleUUID(), FileUtil.extName(originalFilename));\n        upload(bucketName, newFileName, file, file.getInputStream());\n        return preview(bucketName, newFileName);\n    }\n\n    /**\n     * 预览\n     *\n     * @param fileName\n     * @return\n     */\n    public static String preview(String bucketName, String fileName) {\n        // 查看文件地址`\n        try {\n            GetPresignedObjectUrlArgs build = new GetPresignedObjectUrlArgs().builder()\n                    .bucket(bucketName)\n                    .object(fileName)\n                    .method(Method.GET)\n                    .build();\n            String url = minioClient.getPresignedObjectUrl(build);\n            String finalUrl = StrUtil.subBefore(url, \"?\", false);\n            log.info(\"文件路径预览：{}\", finalUrl);\n            return finalUrl;\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return null;\n    }\n\n    /**\n     * 文件下载\n     *\n     * @param fileName 文件名称\n     * @param res      response\n     * @return Boolean\n     */\n    public static void download(String fileName, String bucketName, HttpServletResponse res) {\n        GetObjectArgs objectArgs = GetObjectArgs.builder().bucket(bucketName)\n                .object(fileName).build();\n        try (GetObjectResponse response = minioClient.getObject(objectArgs)) {\n            byte[] buf = new byte[1024];\n            int len;\n            try (FastByteArrayOutputStream os = new FastByteArrayOutputStream()) {\n                while ((len = response.read(buf)) != -1) {\n                    os.write(buf, 0, len);\n                }\n                os.flush();\n                byte[] bytes = os.toByteArray();\n                res.setCharacterEncoding(\"utf-8\");\n                //设置强制下载不打开\n                //res.setContentType(\"application/force-download\");\n                res.addHeader(\"Content-Disposition\", \"attachment;fileName=\" + fileName);\n                try (ServletOutputStream stream = res.getOutputStream()) {\n                    stream.write(bytes);\n                    stream.flush();\n                }\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    /**\n     * 查看文件对象\n     *\n     * @return 存储bucket内文件对象信息\n     */\n    public static List<Item> listObjects(String bucketName) {\n        Iterable<Result<Item>> results = minioClient.listObjects(\n                ListObjectsArgs.builder().bucket(bucketName).recursive(true).build());\n        List<Item> items = new ArrayList<>();\n        try {\n            for (Result<Item> result : results) {\n                items.add(result.get());\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n            return null;\n        }\n        return items;\n    }\n\n    /**\n     * 所有文件列表\n     *\n     * @param bucketName\n     * @return\n     */\n    public static List<FileVo> listObjectNames(String bucketName) {\n        List<Item> items = listObjects(bucketName);\n        if (ObjectUtil.isEmpty(items)) {\n            return new ArrayList<>();\n        } else {\n            return items.stream()\n                    .map(i -> FileVo.builder()\n                            .fileName(i.objectName())\n                            .fileSize(i.size())\n                            .filePath(preview(bucketName, i.objectName()))\n                            .fileType(FileUtil.extName(i.objectName()))\n                            .build()).collect(Collectors.toList());\n\n        }\n    }\n\n    /**\n     * 删除\n     *\n     * @param fileName\n     * @return\n     * @throws Exception\n     */\n    public static boolean remove(String fileName, String bucketName) {\n        try {\n            minioClient.removeObject(RemoveObjectArgs.builder().bucket(bucketName).object(fileName).build());\n        } catch (Exception e) {\n            return false;\n        }\n        return true;\n    }\n\n    /**\n     * 批量删除文件对象（没测试）\n     *\n     * @param objects 对象名称集合\n     */\n    public static Iterable<Result<DeleteError>> removeObjects(List<String> objects, String bucketName) {\n        List<DeleteObject> dos = objects.stream().map(e -> new DeleteObject(e)).collect(Collectors.toList());\n        Iterable<Result<DeleteError>> results = minioClient.removeObjects(RemoveObjectsArgs.builder().bucket(bucketName).objects(dos).build());\n        return results;\n    }\n\n}\n```\n\n## 五、Test\n```javascript?linenums\npackage com.hbq.cms.common.controller;\n\n/**\n * 测试MinIO文件系统\n */\n@Slf4j\n@CrossOrigin\n@Api(tags = \"文件\")\n@RestController\n@RequestMapping(\"/file\")\n@AllArgsConstructor\npublic class FileController {\n\n    @ApiOperation(value = \"创建文件夹\")\n    @PostMapping(\"/createBucket\")\n    public void createBucket(String bucketName) {\n        MinioUtil.createBucket(bucketName);\n    }\n\n    @ApiOperation(value = \"上传文件返回url\")\n    @PostMapping(\"/upload\")\n    public String MinIOUpload(String bucketName, MultipartFile file) throws Exception {\n        if (ObjectUtil.isEmpty(bucketName)) {\n            bucketName = \"file\";\n        }\n        return MinioUtil.uploadPreview(bucketName, file);\n    }\n\n    @ApiOperation(value = \"下载文件\")\n    @PostMapping(\"/download\")\n    public void download(String bucketName, String fileName, HttpServletResponse response) {\n        MinioUtil.download(bucketName, fileName, response);\n    }\n\n    @ApiOperation(value = \"删除文件\")\n    @PostMapping(\"/deleteFile\")\n    public void deleteFile(String bucketName, String fileName) {\n        MinioUtil.remove(bucketName, fileName);\n    }\n\n    @ApiOperation(value = \"获取当前文件夹下文件\")\n    @PostMapping(\"/list\")\n    public List<FileVo> list(String bucketName) {\n        return MinioUtil.listObjectNames(bucketName);\n    }\n}\n```","slug":"BookMark/Spring Boot/Spring Boot & MinIo进行分布式文件服务","published":1,"updated":"2022-09-06T07:08:49.871Z","_id":"cl7puoyyd000gl5a55mq19u7x","comments":1,"layout":"post","photos":[],"link":"","content":"<h1><span id=\"spring-boot-amp-minio进行分布式文件服务\">Spring Boot &amp; MinIo进行分布式文件服务</span></h1><p>[toc]</p>\n<hr>\n<p><font color=\"red\" size=\"5\"> 参考文章：<a href=\"https://www.jianshu.com/p/d10f8fdbf7cd\">springboot 使用 minio</a></font></p>\n<hr>\n<h2><span id=\"一-安装minio\">一、 安装MinIo</span></h2><p><a href=\"https://docs.min.io/cn/minio-quickstart-guide.html\">中文官网</a></p>\n<h2><span id=\"二-yml配置\">二、 yml配置</span></h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">#minio文件服务<br>minio:<br>  url: http://127.0.0.1:9000<br>  accessKey: minioadmin<br>  secretKey: minioadmin<br>  bucketName: hbq<br></code></pre></td></tr></table></figure>\n<h2><span id=\"三-pom依赖\">三、Pom依赖</span></h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">&lt;dependency&gt;<br>\t&lt;groupId&gt;io.minio&lt;/groupId&gt;<br>\t&lt;artifactId&gt;minio&lt;/artifactId&gt;<br>\t&lt;version&gt;7.0.2&lt;/version&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure>\n<h2><span id=\"四-minioutil\">四、MinIoUtil</span></h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">package com.hbq.cms.util;<br><br>/**<br> * 文件服务器工具类<br> */<br>@Slf4j<br>@Component<br>public class MinioUtil &#123;<br>    private static MinioClient minioClient;<br><br>    @Value(&quot;$&#123;minio.endpoint&#125;&quot;)<br>    private String endpoint;<br>    @Value(&quot;$&#123;minio.accessKey&#125;&quot;)<br>    private String accessKey;<br>    @Value(&quot;$&#123;minio.secretKey&#125;&quot;)<br>    private String secretKey;<br>    @Value(&quot;$&#123;minio.bucketName&#125;&quot;)<br>    private String bucketName;<br><br>    @PostConstruct<br>    public void init() &#123;<br>        try &#123;<br>            minioClient = MinioClient.builder()<br>                    .endpoint(endpoint)<br>                    .credentials(accessKey, secretKey)<br>                    .build();<br>            createBucket(bucketName);<br>        &#125; catch (Exception e) &#123;<br>            e.printStackTrace();<br>            log.error(&quot;初始化minio配置异常: 【&#123;&#125;】&quot;, e.fillInStackTrace());<br>        &#125;<br>    &#125;<br><br><br>    /**<br>     * 查看存储bucket是否存在<br>     *<br>     * @return boolean<br>     */<br>    public static Boolean bucketExists(String bucketName) &#123;<br>        Boolean found;<br>        try &#123;<br>            found = minioClient.bucketExists(BucketExistsArgs.builder().bucket(bucketName).build());<br>        &#125; catch (Exception e) &#123;<br>            //e.printStackTrace();<br>            return false;<br>        &#125;<br>        return found;<br>    &#125;<br><br>    /**<br>     * 创建存储bucket<br>     *<br>     * @return Boolean<br>     */<br>    public static Boolean createBucket(String bucketName) &#123;<br>        try &#123;<br>            if (!bucketExists(bucketName)) &#123;<br>                minioClient.makeBucket(MakeBucketArgs.builder()<br>                        .bucket(bucketName)<br>                        .build());<br>            &#125;<br>        &#125; catch (Exception e) &#123;<br>            e.printStackTrace();<br>            return false;<br>        &#125;<br>        return true;<br>    &#125;<br><br>    /**<br>     * 删除存储bucket<br>     *<br>     * @return Boolean<br>     */<br>    public static Boolean removeBucket(String bucketName) &#123;<br>        try &#123;<br>            minioClient.removeBucket(RemoveBucketArgs.builder()<br>                    .bucket(bucketName)<br>                    .build());<br>        &#125; catch (Exception e) &#123;<br>            e.printStackTrace();<br>            return false;<br>        &#125;<br>        return true;<br>    &#125;<br><br>    /**<br>     * 获取全部bucket<br>     */<br>    public static List&lt;Bucket&gt; getAllBuckets() &#123;<br>        try &#123;<br>            return minioClient.listBuckets();<br>        &#125; catch (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        return null;<br>    &#125;<br><br>    /**<br>     * 文件上传<br>     *<br>     * @param file 文件<br>     * @return Boolean<br>     */<br>    public static Boolean upload(String bucketName, String fileName, MultipartFile file, InputStream inputStream) &#123;<br>        try &#123;<br>            PutObjectArgs objectArgs = PutObjectArgs.builder()<br>                    .bucket(bucketName)<br>                    .object(fileName)<br>                    .stream(inputStream, file.getSize(), -1)<br>                    .contentType(FileUtil.getMimeType(fileName))<br>                    .build();<br>            //文件名称相同会覆盖<br>            minioClient.putObject(objectArgs);<br>        &#125; catch (Exception e) &#123;<br>            e.printStackTrace();<br>            return false;<br>        &#125;<br>        return true;<br>    &#125;<br><br>    /**<br>     * 上传预览<br>     *<br>     * @param bucketName 位置<br>     * @param file       文件<br>     * @return 文件url<br>     * @throws IOException<br>     */<br>    public static String uploadPreview(String bucketName, MultipartFile file) throws IOException &#123;<br>        String originalFilename = file.getOriginalFilename();<br>        String newFileName = String.format(&quot;%s-%s.%s&quot;, FileUtil.mainName(originalFilename), IdUtil.simpleUUID(), FileUtil.extName(originalFilename));<br>        upload(bucketName, newFileName, file, file.getInputStream());<br>        return preview(bucketName, newFileName);<br>    &#125;<br><br>    /**<br>     * 预览<br>     *<br>     * @param fileName<br>     * @return<br>     */<br>    public static String preview(String bucketName, String fileName) &#123;<br>        // 查看文件地址`<br>        try &#123;<br>            GetPresignedObjectUrlArgs build = new GetPresignedObjectUrlArgs().builder()<br>                    .bucket(bucketName)<br>                    .object(fileName)<br>                    .method(Method.GET)<br>                    .build();<br>            String url = minioClient.getPresignedObjectUrl(build);<br>            String finalUrl = StrUtil.subBefore(url, &quot;?&quot;, false);<br>            log.info(&quot;文件路径预览：&#123;&#125;&quot;, finalUrl);<br>            return finalUrl;<br>        &#125; catch (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        return null;<br>    &#125;<br><br>    /**<br>     * 文件下载<br>     *<br>     * @param fileName 文件名称<br>     * @param res      response<br>     * @return Boolean<br>     */<br>    public static void download(String fileName, String bucketName, HttpServletResponse res) &#123;<br>        GetObjectArgs objectArgs = GetObjectArgs.builder().bucket(bucketName)<br>                .object(fileName).build();<br>        try (GetObjectResponse response = minioClient.getObject(objectArgs)) &#123;<br>            byte[] buf = new byte[1024];<br>            int len;<br>            try (FastByteArrayOutputStream os = new FastByteArrayOutputStream()) &#123;<br>                while ((len = response.read(buf)) != -1) &#123;<br>                    os.write(buf, 0, len);<br>                &#125;<br>                os.flush();<br>                byte[] bytes = os.toByteArray();<br>                res.setCharacterEncoding(&quot;utf-8&quot;);<br>                //设置强制下载不打开<br>                //res.setContentType(&quot;application/force-download&quot;);<br>                res.addHeader(&quot;Content-Disposition&quot;, &quot;attachment;fileName=&quot; + fileName);<br>                try (ServletOutputStream stream = res.getOutputStream()) &#123;<br>                    stream.write(bytes);<br>                    stream.flush();<br>                &#125;<br>            &#125;<br>        &#125; catch (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br>    /**<br>     * 查看文件对象<br>     *<br>     * @return 存储bucket内文件对象信息<br>     */<br>    public static List&lt;Item&gt; listObjects(String bucketName) &#123;<br>        Iterable&lt;Result&lt;Item&gt;&gt; results = minioClient.listObjects(<br>                ListObjectsArgs.builder().bucket(bucketName).recursive(true).build());<br>        List&lt;Item&gt; items = new ArrayList&lt;&gt;();<br>        try &#123;<br>            for (Result&lt;Item&gt; result : results) &#123;<br>                items.add(result.get());<br>            &#125;<br>        &#125; catch (Exception e) &#123;<br>            e.printStackTrace();<br>            return null;<br>        &#125;<br>        return items;<br>    &#125;<br><br>    /**<br>     * 所有文件列表<br>     *<br>     * @param bucketName<br>     * @return<br>     */<br>    public static List&lt;FileVo&gt; listObjectNames(String bucketName) &#123;<br>        List&lt;Item&gt; items = listObjects(bucketName);<br>        if (ObjectUtil.isEmpty(items)) &#123;<br>            return new ArrayList&lt;&gt;();<br>        &#125; else &#123;<br>            return items.stream()<br>                    .map(i -&gt; FileVo.builder()<br>                            .fileName(i.objectName())<br>                            .fileSize(i.size())<br>                            .filePath(preview(bucketName, i.objectName()))<br>                            .fileType(FileUtil.extName(i.objectName()))<br>                            .build()).collect(Collectors.toList());<br><br>        &#125;<br>    &#125;<br><br>    /**<br>     * 删除<br>     *<br>     * @param fileName<br>     * @return<br>     * @throws Exception<br>     */<br>    public static boolean remove(String fileName, String bucketName) &#123;<br>        try &#123;<br>            minioClient.removeObject(RemoveObjectArgs.builder().bucket(bucketName).object(fileName).build());<br>        &#125; catch (Exception e) &#123;<br>            return false;<br>        &#125;<br>        return true;<br>    &#125;<br><br>    /**<br>     * 批量删除文件对象（没测试）<br>     *<br>     * @param objects 对象名称集合<br>     */<br>    public static Iterable&lt;Result&lt;DeleteError&gt;&gt; removeObjects(List&lt;String&gt; objects, String bucketName) &#123;<br>        List&lt;DeleteObject&gt; dos = objects.stream().map(e -&gt; new DeleteObject(e)).collect(Collectors.toList());<br>        Iterable&lt;Result&lt;DeleteError&gt;&gt; results = minioClient.removeObjects(RemoveObjectsArgs.builder().bucket(bucketName).objects(dos).build());<br>        return results;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2><span id=\"五-test\">五、Test</span></h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">package com.hbq.cms.common.controller;<br><br>/**<br> * 测试MinIO文件系统<br> */<br>@Slf4j<br>@CrossOrigin<br>@Api(tags = &quot;文件&quot;)<br>@RestController<br>@RequestMapping(&quot;/file&quot;)<br>@AllArgsConstructor<br>public class FileController &#123;<br><br>    @ApiOperation(value = &quot;创建文件夹&quot;)<br>    @PostMapping(&quot;/createBucket&quot;)<br>    public void createBucket(String bucketName) &#123;<br>        MinioUtil.createBucket(bucketName);<br>    &#125;<br><br>    @ApiOperation(value = &quot;上传文件返回url&quot;)<br>    @PostMapping(&quot;/upload&quot;)<br>    public String MinIOUpload(String bucketName, MultipartFile file) throws Exception &#123;<br>        if (ObjectUtil.isEmpty(bucketName)) &#123;<br>            bucketName = &quot;file&quot;;<br>        &#125;<br>        return MinioUtil.uploadPreview(bucketName, file);<br>    &#125;<br><br>    @ApiOperation(value = &quot;下载文件&quot;)<br>    @PostMapping(&quot;/download&quot;)<br>    public void download(String bucketName, String fileName, HttpServletResponse response) &#123;<br>        MinioUtil.download(bucketName, fileName, response);<br>    &#125;<br><br>    @ApiOperation(value = &quot;删除文件&quot;)<br>    @PostMapping(&quot;/deleteFile&quot;)<br>    public void deleteFile(String bucketName, String fileName) &#123;<br>        MinioUtil.remove(bucketName, fileName);<br>    &#125;<br><br>    @ApiOperation(value = &quot;获取当前文件夹下文件&quot;)<br>    @PostMapping(&quot;/list&quot;)<br>    public List&lt;FileVo&gt; list(String bucketName) &#123;<br>        return MinioUtil.listObjectNames(bucketName);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>","site":{"data":{}},"wordcount":7982,"excerpt":"","more":"<h1 id=\"Spring-Boot-amp-MinIo进行分布式文件服务\"><a href=\"#Spring-Boot-amp-MinIo进行分布式文件服务\" class=\"headerlink\" title=\"Spring Boot &amp; MinIo进行分布式文件服务\"></a>Spring Boot &amp; MinIo进行分布式文件服务</h1><p>[toc]</p>\n<hr>\n<p><font color=red size=5> 参考文章：<a href=\"https://www.jianshu.com/p/d10f8fdbf7cd\">springboot 使用 minio</a></font></p>\n<hr>\n<h2 id=\"一、-安装MinIo\"><a href=\"#一、-安装MinIo\" class=\"headerlink\" title=\"一、 安装MinIo\"></a>一、 安装MinIo</h2><p><a href=\"https://docs.min.io/cn/minio-quickstart-guide.html\">中文官网</a></p>\n<h2 id=\"二、-yml配置\"><a href=\"#二、-yml配置\" class=\"headerlink\" title=\"二、 yml配置\"></a>二、 yml配置</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">#minio文件服务<br>minio:<br>  url: http://127.0.0.1:9000<br>  accessKey: minioadmin<br>  secretKey: minioadmin<br>  bucketName: hbq<br></code></pre></td></tr></table></figure>\n<h2 id=\"三、Pom依赖\"><a href=\"#三、Pom依赖\" class=\"headerlink\" title=\"三、Pom依赖\"></a>三、Pom依赖</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">&lt;dependency&gt;<br>\t&lt;groupId&gt;io.minio&lt;/groupId&gt;<br>\t&lt;artifactId&gt;minio&lt;/artifactId&gt;<br>\t&lt;version&gt;7.0.2&lt;/version&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure>\n<h2 id=\"四、MinIoUtil\"><a href=\"#四、MinIoUtil\" class=\"headerlink\" title=\"四、MinIoUtil\"></a>四、MinIoUtil</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">package com.hbq.cms.util;<br><br>/**<br> * 文件服务器工具类<br> */<br>@Slf4j<br>@Component<br>public class MinioUtil &#123;<br>    private static MinioClient minioClient;<br><br>    @Value(&quot;$&#123;minio.endpoint&#125;&quot;)<br>    private String endpoint;<br>    @Value(&quot;$&#123;minio.accessKey&#125;&quot;)<br>    private String accessKey;<br>    @Value(&quot;$&#123;minio.secretKey&#125;&quot;)<br>    private String secretKey;<br>    @Value(&quot;$&#123;minio.bucketName&#125;&quot;)<br>    private String bucketName;<br><br>    @PostConstruct<br>    public void init() &#123;<br>        try &#123;<br>            minioClient = MinioClient.builder()<br>                    .endpoint(endpoint)<br>                    .credentials(accessKey, secretKey)<br>                    .build();<br>            createBucket(bucketName);<br>        &#125; catch (Exception e) &#123;<br>            e.printStackTrace();<br>            log.error(&quot;初始化minio配置异常: 【&#123;&#125;】&quot;, e.fillInStackTrace());<br>        &#125;<br>    &#125;<br><br><br>    /**<br>     * 查看存储bucket是否存在<br>     *<br>     * @return boolean<br>     */<br>    public static Boolean bucketExists(String bucketName) &#123;<br>        Boolean found;<br>        try &#123;<br>            found = minioClient.bucketExists(BucketExistsArgs.builder().bucket(bucketName).build());<br>        &#125; catch (Exception e) &#123;<br>            //e.printStackTrace();<br>            return false;<br>        &#125;<br>        return found;<br>    &#125;<br><br>    /**<br>     * 创建存储bucket<br>     *<br>     * @return Boolean<br>     */<br>    public static Boolean createBucket(String bucketName) &#123;<br>        try &#123;<br>            if (!bucketExists(bucketName)) &#123;<br>                minioClient.makeBucket(MakeBucketArgs.builder()<br>                        .bucket(bucketName)<br>                        .build());<br>            &#125;<br>        &#125; catch (Exception e) &#123;<br>            e.printStackTrace();<br>            return false;<br>        &#125;<br>        return true;<br>    &#125;<br><br>    /**<br>     * 删除存储bucket<br>     *<br>     * @return Boolean<br>     */<br>    public static Boolean removeBucket(String bucketName) &#123;<br>        try &#123;<br>            minioClient.removeBucket(RemoveBucketArgs.builder()<br>                    .bucket(bucketName)<br>                    .build());<br>        &#125; catch (Exception e) &#123;<br>            e.printStackTrace();<br>            return false;<br>        &#125;<br>        return true;<br>    &#125;<br><br>    /**<br>     * 获取全部bucket<br>     */<br>    public static List&lt;Bucket&gt; getAllBuckets() &#123;<br>        try &#123;<br>            return minioClient.listBuckets();<br>        &#125; catch (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        return null;<br>    &#125;<br><br>    /**<br>     * 文件上传<br>     *<br>     * @param file 文件<br>     * @return Boolean<br>     */<br>    public static Boolean upload(String bucketName, String fileName, MultipartFile file, InputStream inputStream) &#123;<br>        try &#123;<br>            PutObjectArgs objectArgs = PutObjectArgs.builder()<br>                    .bucket(bucketName)<br>                    .object(fileName)<br>                    .stream(inputStream, file.getSize(), -1)<br>                    .contentType(FileUtil.getMimeType(fileName))<br>                    .build();<br>            //文件名称相同会覆盖<br>            minioClient.putObject(objectArgs);<br>        &#125; catch (Exception e) &#123;<br>            e.printStackTrace();<br>            return false;<br>        &#125;<br>        return true;<br>    &#125;<br><br>    /**<br>     * 上传预览<br>     *<br>     * @param bucketName 位置<br>     * @param file       文件<br>     * @return 文件url<br>     * @throws IOException<br>     */<br>    public static String uploadPreview(String bucketName, MultipartFile file) throws IOException &#123;<br>        String originalFilename = file.getOriginalFilename();<br>        String newFileName = String.format(&quot;%s-%s.%s&quot;, FileUtil.mainName(originalFilename), IdUtil.simpleUUID(), FileUtil.extName(originalFilename));<br>        upload(bucketName, newFileName, file, file.getInputStream());<br>        return preview(bucketName, newFileName);<br>    &#125;<br><br>    /**<br>     * 预览<br>     *<br>     * @param fileName<br>     * @return<br>     */<br>    public static String preview(String bucketName, String fileName) &#123;<br>        // 查看文件地址`<br>        try &#123;<br>            GetPresignedObjectUrlArgs build = new GetPresignedObjectUrlArgs().builder()<br>                    .bucket(bucketName)<br>                    .object(fileName)<br>                    .method(Method.GET)<br>                    .build();<br>            String url = minioClient.getPresignedObjectUrl(build);<br>            String finalUrl = StrUtil.subBefore(url, &quot;?&quot;, false);<br>            log.info(&quot;文件路径预览：&#123;&#125;&quot;, finalUrl);<br>            return finalUrl;<br>        &#125; catch (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        return null;<br>    &#125;<br><br>    /**<br>     * 文件下载<br>     *<br>     * @param fileName 文件名称<br>     * @param res      response<br>     * @return Boolean<br>     */<br>    public static void download(String fileName, String bucketName, HttpServletResponse res) &#123;<br>        GetObjectArgs objectArgs = GetObjectArgs.builder().bucket(bucketName)<br>                .object(fileName).build();<br>        try (GetObjectResponse response = minioClient.getObject(objectArgs)) &#123;<br>            byte[] buf = new byte[1024];<br>            int len;<br>            try (FastByteArrayOutputStream os = new FastByteArrayOutputStream()) &#123;<br>                while ((len = response.read(buf)) != -1) &#123;<br>                    os.write(buf, 0, len);<br>                &#125;<br>                os.flush();<br>                byte[] bytes = os.toByteArray();<br>                res.setCharacterEncoding(&quot;utf-8&quot;);<br>                //设置强制下载不打开<br>                //res.setContentType(&quot;application/force-download&quot;);<br>                res.addHeader(&quot;Content-Disposition&quot;, &quot;attachment;fileName=&quot; + fileName);<br>                try (ServletOutputStream stream = res.getOutputStream()) &#123;<br>                    stream.write(bytes);<br>                    stream.flush();<br>                &#125;<br>            &#125;<br>        &#125; catch (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br>    /**<br>     * 查看文件对象<br>     *<br>     * @return 存储bucket内文件对象信息<br>     */<br>    public static List&lt;Item&gt; listObjects(String bucketName) &#123;<br>        Iterable&lt;Result&lt;Item&gt;&gt; results = minioClient.listObjects(<br>                ListObjectsArgs.builder().bucket(bucketName).recursive(true).build());<br>        List&lt;Item&gt; items = new ArrayList&lt;&gt;();<br>        try &#123;<br>            for (Result&lt;Item&gt; result : results) &#123;<br>                items.add(result.get());<br>            &#125;<br>        &#125; catch (Exception e) &#123;<br>            e.printStackTrace();<br>            return null;<br>        &#125;<br>        return items;<br>    &#125;<br><br>    /**<br>     * 所有文件列表<br>     *<br>     * @param bucketName<br>     * @return<br>     */<br>    public static List&lt;FileVo&gt; listObjectNames(String bucketName) &#123;<br>        List&lt;Item&gt; items = listObjects(bucketName);<br>        if (ObjectUtil.isEmpty(items)) &#123;<br>            return new ArrayList&lt;&gt;();<br>        &#125; else &#123;<br>            return items.stream()<br>                    .map(i -&gt; FileVo.builder()<br>                            .fileName(i.objectName())<br>                            .fileSize(i.size())<br>                            .filePath(preview(bucketName, i.objectName()))<br>                            .fileType(FileUtil.extName(i.objectName()))<br>                            .build()).collect(Collectors.toList());<br><br>        &#125;<br>    &#125;<br><br>    /**<br>     * 删除<br>     *<br>     * @param fileName<br>     * @return<br>     * @throws Exception<br>     */<br>    public static boolean remove(String fileName, String bucketName) &#123;<br>        try &#123;<br>            minioClient.removeObject(RemoveObjectArgs.builder().bucket(bucketName).object(fileName).build());<br>        &#125; catch (Exception e) &#123;<br>            return false;<br>        &#125;<br>        return true;<br>    &#125;<br><br>    /**<br>     * 批量删除文件对象（没测试）<br>     *<br>     * @param objects 对象名称集合<br>     */<br>    public static Iterable&lt;Result&lt;DeleteError&gt;&gt; removeObjects(List&lt;String&gt; objects, String bucketName) &#123;<br>        List&lt;DeleteObject&gt; dos = objects.stream().map(e -&gt; new DeleteObject(e)).collect(Collectors.toList());<br>        Iterable&lt;Result&lt;DeleteError&gt;&gt; results = minioClient.removeObjects(RemoveObjectsArgs.builder().bucket(bucketName).objects(dos).build());<br>        return results;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"五、Test\"><a href=\"#五、Test\" class=\"headerlink\" title=\"五、Test\"></a>五、Test</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript?linenums\">package com.hbq.cms.common.controller;<br><br>/**<br> * 测试MinIO文件系统<br> */<br>@Slf4j<br>@CrossOrigin<br>@Api(tags = &quot;文件&quot;)<br>@RestController<br>@RequestMapping(&quot;/file&quot;)<br>@AllArgsConstructor<br>public class FileController &#123;<br><br>    @ApiOperation(value = &quot;创建文件夹&quot;)<br>    @PostMapping(&quot;/createBucket&quot;)<br>    public void createBucket(String bucketName) &#123;<br>        MinioUtil.createBucket(bucketName);<br>    &#125;<br><br>    @ApiOperation(value = &quot;上传文件返回url&quot;)<br>    @PostMapping(&quot;/upload&quot;)<br>    public String MinIOUpload(String bucketName, MultipartFile file) throws Exception &#123;<br>        if (ObjectUtil.isEmpty(bucketName)) &#123;<br>            bucketName = &quot;file&quot;;<br>        &#125;<br>        return MinioUtil.uploadPreview(bucketName, file);<br>    &#125;<br><br>    @ApiOperation(value = &quot;下载文件&quot;)<br>    @PostMapping(&quot;/download&quot;)<br>    public void download(String bucketName, String fileName, HttpServletResponse response) &#123;<br>        MinioUtil.download(bucketName, fileName, response);<br>    &#125;<br><br>    @ApiOperation(value = &quot;删除文件&quot;)<br>    @PostMapping(&quot;/deleteFile&quot;)<br>    public void deleteFile(String bucketName, String fileName) &#123;<br>        MinioUtil.remove(bucketName, fileName);<br>    &#125;<br><br>    @ApiOperation(value = &quot;获取当前文件夹下文件&quot;)<br>    @PostMapping(&quot;/list&quot;)<br>    public List&lt;FileVo&gt; list(String bucketName) &#123;<br>        return MinioUtil.listObjectNames(bucketName);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>"}],"PostAsset":[],"PostCategory":[{"post_id":"cl7ptszof000baba52emxh7px","category_id":"cl7ptszoe0008aba5eihy8pf7","_id":"cl7ptszoh000iaba5e7e0cbjj"},{"post_id":"cl7ptszod0006aba58vgy075z","category_id":"cl7ptszoe0008aba5eihy8pf7","_id":"cl7ptszoh000maba523fa069p"},{"post_id":"cl7ptszof000caba5ee3gehrl","category_id":"cl7ptszoe0008aba5eihy8pf7","_id":"cl7ptszoi000paba54zwj8k90"},{"post_id":"cl7ptszog000gaba56frbbf1j","category_id":"cl7ptszoe0008aba5eihy8pf7","_id":"cl7ptszoi000saba5bsdgb767"},{"post_id":"cl7ptszoe0007aba53nt77g6g","category_id":"cl7ptszoe0008aba5eihy8pf7","_id":"cl7ptszoi000uaba52vgt5neg"},{"post_id":"cl7ptszof000aaba51i2d0jed","category_id":"cl7ptszoe0008aba5eihy8pf7","_id":"cl7ptszoj000xaba529z8bjca"},{"post_id":"cl7ptszon001saba5eove57iy","category_id":"cl7ptszon001uaba5g5khbbpr","_id":"cl7ptszoo0022aba5cu6t3edx"},{"post_id":"cl7ptszol001eaba59vouaiwk","category_id":"cl7ptszon001uaba5g5khbbpr","_id":"cl7puevob000bl5a563hugmmq"},{"post_id":"cl7ptszom001naba5cqmkh9ez","category_id":"cl7ptszon001uaba5g5khbbpr","_id":"cl7puoyy8000dl5a56fnw4cvk"},{"post_id":"cl7ptszom001laba59bg5dpox","category_id":"cl7ptszon001uaba5g5khbbpr","_id":"cl7puoyye000il5a57knf16nq"},{"post_id":"cl7puoyyd000gl5a55mq19u7x","category_id":"cl7ptszon001uaba5g5khbbpr","_id":"cl7puoyye000jl5a575ro2nhe"},{"post_id":"cl7ptszom001oaba5en876g12","category_id":"cl7ptszon001uaba5g5khbbpr","_id":"cl7puoyyf000ll5a50qe80jmw"},{"post_id":"cl7ptszom001paba5d45e9vz8","category_id":"cl7ptszon001uaba5g5khbbpr","_id":"cl7puoyyf000ml5a52yzr74k5"},{"post_id":"cl7ptszom001maba55lixbjrf","category_id":"cl7ptszon001uaba5g5khbbpr","_id":"cl7puoyyf000ol5a59j6idg6e"},{"post_id":"cl7ptszon001raba5b673dh5y","category_id":"cl7ptszon001uaba5g5khbbpr","_id":"cl7puoyyo0016l5a52s9ugnrt"},{"post_id":"cl7ptszom001kaba509tzgdfv","category_id":"cl7ptszon001uaba5g5khbbpr","_id":"cl7puoyyo0018l5a50g1u9sa2"},{"post_id":"cl7ptszom001qaba55z7h9xko","category_id":"cl7ptszon001uaba5g5khbbpr","_id":"cl7puoyyo001bl5a5eucwcqwy"},{"post_id":"cl7ptszol001gaba55gm31487","category_id":"cl7ptszon001uaba5g5khbbpr","_id":"cl7puoyyp001fl5a56gn4gqoq"},{"post_id":"cl7ptszol001jaba54jja7y2w","category_id":"cl7ptszon001uaba5g5khbbpr","_id":"cl7puoyyq001hl5a59z4h4wra"},{"post_id":"cl7ptszol001faba5c7296ukz","category_id":"cl7ptszon001uaba5g5khbbpr","_id":"cl7puoyyq001kl5a532tibvc1"},{"post_id":"cl7ptszol001iaba5hbo9d2h2","category_id":"cl7ptszon001uaba5g5khbbpr","_id":"cl7puoyyr001ml5a5b3mwf70b"},{"post_id":"cl7ptszol001haba5g6041o98","category_id":"cl7ptszon001uaba5g5khbbpr","_id":"cl7puoyyr001pl5a5ambv3frg"},{"post_id":"cl7ptszok001daba52xkxba9q","category_id":"cl7ptszon001uaba5g5khbbpr","_id":"cl7puoyyr001rl5a59chv88ix"}],"PostTag":[{"post_id":"cl7ptszod0006aba58vgy075z","tag_id":"cl7ptszof0009aba56bpt9qh1","_id":"cl7ptszog000faba55v5x01q5"},{"post_id":"cl7ptszoe0007aba53nt77g6g","tag_id":"cl7ptszog000eaba5c21wbo54","_id":"cl7ptszoh000naba5fnl62k58"},{"post_id":"cl7ptszof000aaba51i2d0jed","tag_id":"cl7ptszoh000kaba5bemfgzky","_id":"cl7ptszoj000yaba59p6z7sg1"},{"post_id":"cl7ptszof000aaba51i2d0jed","tag_id":"cl7ptszoi000qaba57wgp1x9j","_id":"cl7ptszoj0010aba55gwn7gcc"},{"post_id":"cl7ptszof000baba52emxh7px","tag_id":"cl7ptszoi000vaba51th22wqr","_id":"cl7ptszoj0013aba5flr91wax"},{"post_id":"cl7ptszof000caba5ee3gehrl","tag_id":"cl7ptszoj0012aba5hogldrig","_id":"cl7ptszok0018aba5bh2nhdw7"},{"post_id":"cl7ptszog000gaba56frbbf1j","tag_id":"cl7ptszoi000vaba51th22wqr","_id":"cl7ptszok001baba55d4914zy"},{"post_id":"cl7ptszon001saba5eove57iy","tag_id":"cl7ptszon001vaba5ffnagw7m","_id":"cl7ptszoo0024aba52fus2c7u"},{"post_id":"cl7ptszon001saba5eove57iy","tag_id":"cl7ptszoo001zaba5hx07ahq6","_id":"cl7ptszoo0026aba540r2g3je"},{"post_id":"cl7ptszom001naba5cqmkh9ez","tag_id":"cl7ptszon001vaba5ffnagw7m","_id":"cl7puoyy8000el5a59dr3fgyb"},{"post_id":"cl7ptszom001naba5cqmkh9ez","tag_id":"cl7puoyy8000cl5a530yha7ga","_id":"cl7puoyy9000fl5a5e4uw7g3u"},{"post_id":"cl7ptszom001laba59bg5dpox","tag_id":"cl7ptszon001vaba5ffnagw7m","_id":"cl7puoyyf000pl5a50br7bqxb"},{"post_id":"cl7ptszom001laba59bg5dpox","tag_id":"cl7puoyye000hl5a5hwzy9ewl","_id":"cl7puoyyf000ql5a59ec20jsy"},{"post_id":"cl7ptszom001laba59bg5dpox","tag_id":"cl7puoyyf000kl5a5fm0z05yg","_id":"cl7puoyyg000sl5a58djo6qey"},{"post_id":"cl7puoyyd000gl5a55mq19u7x","tag_id":"cl7ptszon001vaba5ffnagw7m","_id":"cl7puoyyg000tl5a5etgqaaio"},{"post_id":"cl7puoyyd000gl5a55mq19u7x","tag_id":"cl7puoyyf000nl5a5btal8dpq","_id":"cl7puoyyg000vl5a5a5uw3ge2"},{"post_id":"cl7ptszom001oaba5en876g12","tag_id":"cl7ptszon001vaba5ffnagw7m","_id":"cl7puoyyg000wl5a54fm22fk0"},{"post_id":"cl7ptszom001oaba5en876g12","tag_id":"cl7puoyyf000rl5a597ddeky6","_id":"cl7puoyyg000yl5a5eqrx7b9e"},{"post_id":"cl7ptszom001paba5d45e9vz8","tag_id":"cl7ptszon001vaba5ffnagw7m","_id":"cl7puoyyg000zl5a540xm6k7h"},{"post_id":"cl7ptszom001paba5d45e9vz8","tag_id":"cl7puoyyg000ul5a50ccqdtuv","_id":"cl7puoyyg0010l5a5g5ogetwo"},{"post_id":"cl7ptszom001maba55lixbjrf","tag_id":"cl7ptszon001vaba5ffnagw7m","_id":"cl7puoyyg0012l5a580yj6wqr"},{"post_id":"cl7ptszom001maba55lixbjrf","tag_id":"cl7puoyyg000xl5a50bz16ijg","_id":"cl7puoyyg0013l5a57e27fj3s"},{"post_id":"cl7ptszom001maba55lixbjrf","tag_id":"cl7puoyyg0011l5a52w40fiha","_id":"cl7puoyyg0014l5a53yha0mik"},{"post_id":"cl7ptszom001qaba55z7h9xko","tag_id":"cl7ptszon001vaba5ffnagw7m","_id":"cl7puoyyo0017l5a50yil4okj"},{"post_id":"cl7ptszom001qaba55z7h9xko","tag_id":"cl7puoyyg000ul5a50ccqdtuv","_id":"cl7puoyyo001al5a5dypp45ih"},{"post_id":"cl7ptszon001raba5b673dh5y","tag_id":"cl7ptszon001vaba5ffnagw7m","_id":"cl7puoyyo001cl5a5euhxgeep"},{"post_id":"cl7ptszon001raba5b673dh5y","tag_id":"cl7puoyyn0015l5a5f6r3gn9s","_id":"cl7puoyyp001el5a5d70v59hv"},{"post_id":"cl7ptszom001kaba509tzgdfv","tag_id":"cl7ptszon001vaba5ffnagw7m","_id":"cl7puoyyp001gl5a548qc4wdq"},{"post_id":"cl7ptszom001kaba509tzgdfv","tag_id":"cl7puoyyo0019l5a50ytc7sxw","_id":"cl7puoyyq001jl5a5ew1zepcj"},{"post_id":"cl7ptszol001faba5c7296ukz","tag_id":"cl7ptszon001vaba5ffnagw7m","_id":"cl7puoyyr001ll5a540em9qtq"},{"post_id":"cl7ptszol001faba5c7296ukz","tag_id":"cl7ptszog000eaba5c21wbo54","_id":"cl7puoyyr001nl5a584aiesk8"},{"post_id":"cl7ptszol001eaba59vouaiwk","tag_id":"cl7ptszon001vaba5ffnagw7m","_id":"cl7puoyyr001ql5a53l53g94b"},{"post_id":"cl7ptszol001eaba59vouaiwk","tag_id":"cl7puoyyp001dl5a503hzces2","_id":"cl7puoyyr001sl5a5gt370s4x"},{"post_id":"cl7ptszol001gaba55gm31487","tag_id":"cl7ptszon001vaba5ffnagw7m","_id":"cl7puoyyr001ul5a515rb6qde"},{"post_id":"cl7ptszol001gaba55gm31487","tag_id":"cl7puoyyq001il5a5cil6heae","_id":"cl7puoyyr001vl5a59kaa82zx"},{"post_id":"cl7ptszol001jaba54jja7y2w","tag_id":"cl7ptszon001vaba5ffnagw7m","_id":"cl7puoyyr001xl5a5bz206kcw"},{"post_id":"cl7ptszol001jaba54jja7y2w","tag_id":"cl7puoyyr001ol5a5glpj0vnw","_id":"cl7puoyyr001zl5a58geu8j18"},{"post_id":"cl7ptszol001jaba54jja7y2w","tag_id":"cl7puoyyr001tl5a59igk46l0","_id":"cl7puoyys0020l5a5g568g52c"},{"post_id":"cl7ptszol001iaba5hbo9d2h2","tag_id":"cl7ptszon001vaba5ffnagw7m","_id":"cl7puoyys0022l5a5hctrb4l8"},{"post_id":"cl7ptszol001iaba5hbo9d2h2","tag_id":"cl7puoyyr001wl5a5gv5q2flu","_id":"cl7puoyys0023l5a5am6t8elq"},{"post_id":"cl7ptszol001iaba5hbo9d2h2","tag_id":"cl7puoyyr001yl5a5hgr507lu","_id":"cl7puoyys0025l5a5h1rg0e1o"},{"post_id":"cl7ptszol001haba5g6041o98","tag_id":"cl7ptszon001vaba5ffnagw7m","_id":"cl7puoyys0027l5a5ej4b1yx2"},{"post_id":"cl7ptszol001haba5g6041o98","tag_id":"cl7puoyys0021l5a53nhd0729","_id":"cl7puoyys0028l5a5fc3scr1k"},{"post_id":"cl7ptszol001haba5g6041o98","tag_id":"cl7puoyys0024l5a551g4ge4i","_id":"cl7puoyys0029l5a5hmz65x1m"},{"post_id":"cl7ptszok001daba52xkxba9q","tag_id":"cl7ptszon001vaba5ffnagw7m","_id":"cl7puoyys002al5a5gsvf23w7"},{"post_id":"cl7ptszok001daba52xkxba9q","tag_id":"cl7puoyys0026l5a5bwh23473","_id":"cl7puoyys002bl5a5bnpi2bd2"}],"Tag":[{"name":"Hutool","_id":"cl7ptszof0009aba56bpt9qh1"},{"name":"Mybatis Plus","_id":"cl7ptszog000eaba5c21wbo54"},{"name":"Stream","_id":"cl7ptszoh000kaba5bemfgzky"},{"name":"Lambda","_id":"cl7ptszoi000qaba57wgp1x9j"},{"name":"mysql","_id":"cl7ptszoi000vaba51th22wqr"},{"name":"js","_id":"cl7ptszoj0012aba5hogldrig"},{"name":"Spring Boot","_id":"cl7ptszon001vaba5ffnagw7m"},{"name":"idea","_id":"cl7ptszoo001zaba5hx07ahq6"},{"name":"阿里OSS文件服务","_id":"cl7puoyy8000cl5a530yha7ga"},{"name":"自定义注解","_id":"cl7puoyye000hl5a5hwzy9ewl"},{"name":"redis","_id":"cl7puoyyf000kl5a5fm0z05yg"},{"name":"MinIo","_id":"cl7puoyyf000nl5a5btal8dpq"},{"name":"阿里短信服务","_id":"cl7puoyyf000rl5a597ddeky6"},{"name":"Spring Clound","_id":"cl7puoyyg000ul5a50ccqdtuv"},{"name":"过滤器","_id":"cl7puoyyg000xl5a50bz16ijg"},{"name":"拦截器","_id":"cl7puoyyg0011l5a52w40fiha"},{"name":"maven","_id":"cl7puoyyn0015l5a5f6r3gn9s"},{"name":"支付宝支付","_id":"cl7puoyyo0019l5a50ytc7sxw"},{"name":"Jenkins","_id":"cl7puoyyp001dl5a503hzces2"},{"name":"RabbitMq","_id":"cl7puoyyq001il5a5cil6heae"},{"name":"全局异常处理","_id":"cl7puoyyr001ol5a5glpj0vnw"},{"name":"统一结果返回","_id":"cl7puoyyr001tl5a59igk46l0"},{"name":"poi","_id":"cl7puoyyr001wl5a5gv5q2flu"},{"name":"Excel","_id":"cl7puoyyr001yl5a5hgr507lu"},{"name":"Slf4j","_id":"cl7puoyys0021l5a53nhd0729"},{"name":"logback","_id":"cl7puoyys0024l5a551g4ge4i"},{"name":"SSM","_id":"cl7puoyys0026l5a5bwh23473"}]}}